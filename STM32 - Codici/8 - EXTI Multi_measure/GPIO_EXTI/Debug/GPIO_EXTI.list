
GPIO_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082fc  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008594  08008594  00009594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080085d4  080085d4  000095d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080085dc  080085dc  000095dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080085e0  080085e0  000095e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  080085e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a24  24000010  080085f4  0000a010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000a34  080085f4  0000aa34  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000188bf  00000000  00000000  0000a03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002aaf  00000000  00000000  000228fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001318  00000000  00000000  000253b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ee8  00000000  00000000  000266c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039219  00000000  00000000  000275b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ad39  00000000  00000000  000607c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00176593  00000000  00000000  0007b502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f1a95  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005184  00000000  00000000  001f1ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000098  00000000  00000000  001f6c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800857c 	.word	0x0800857c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800857c 	.word	0x0800857c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ADC_custom_init>:
bool triggd = false;
bool pre_triggd = false;
uint16_t trig_indx = 0;


void ADC_custom_init(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

	ADC3->SQR1=0; // Resetto il registro per cancellare modifice dell'IDE
 80005cc:	4b33      	ldr	r3, [pc, #204]	@ (800069c <ADC_custom_init+0xd4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere (0 = 1 canale)
 80005d2:	4b32      	ldr	r3, [pc, #200]	@ (800069c <ADC_custom_init+0xd4>)
 80005d4:	4a31      	ldr	r2, [pc, #196]	@ (800069c <ADC_custom_init+0xd4>)
 80005d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_SQ1_Pos);	// Inidco i canali da accendere
 80005da:	4b30      	ldr	r3, [pc, #192]	@ (800069c <ADC_custom_init+0xd4>)
 80005dc:	4a2f      	ldr	r2, [pc, #188]	@ (800069c <ADC_custom_init+0xd4>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->PCSEL |= ADC_PCSEL_PCSEL_0;		// Selezioni i canali da leggere
 80005e2:	4b2e      	ldr	r3, [pc, #184]	@ (800069c <ADC_custom_init+0xd4>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a2d      	ldr	r2, [pc, #180]	@ (800069c <ADC_custom_init+0xd4>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	61d3      	str	r3, [r2, #28]

	/* Fase di calibrazione */
	ADC3->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 80005ee:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <ADC_custom_init+0xd4>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	4a2a      	ldr	r2, [pc, #168]	@ (800069c <ADC_custom_init+0xd4>)
 80005f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80005f8:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 80005fa:	4b28      	ldr	r3, [pc, #160]	@ (800069c <ADC_custom_init+0xd4>)
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	4a27      	ldr	r2, [pc, #156]	@ (800069c <ADC_custom_init+0xd4>)
 8000600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000604:	6093      	str	r3, [r2, #8]
	ADC3->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 8000606:	4b25      	ldr	r3, [pc, #148]	@ (800069c <ADC_custom_init+0xd4>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	4a24      	ldr	r2, [pc, #144]	@ (800069c <ADC_custom_init+0xd4>)
 800060c:	f023 0301 	bic.w	r3, r3, #1
 8000610:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 8000612:	4b22      	ldr	r3, [pc, #136]	@ (800069c <ADC_custom_init+0xd4>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	4a21      	ldr	r2, [pc, #132]	@ (800069c <ADC_custom_init+0xd4>)
 8000618:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800061c:	6093      	str	r3, [r2, #8]

	while((ADC3->CR & ADC_CR_ADCAL) != 0){};
 800061e:	bf00      	nop
 8000620:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <ADC_custom_init+0xd4>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	2b00      	cmp	r3, #0
 8000626:	dbfb      	blt.n	8000620 <ADC_custom_init+0x58>
	/* Fine fase di calibrazione */

	/* Accensione ADC */
	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 8000628:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <ADC_custom_init+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1b      	ldr	r2, [pc, #108]	@ (800069c <ADC_custom_init+0xd4>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]
	ADC3->CR |= ADC_CR_ADEN;		// Abilito l'ADC
 8000634:	4b19      	ldr	r3, [pc, #100]	@ (800069c <ADC_custom_init+0xd4>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	4a18      	ldr	r2, [pc, #96]	@ (800069c <ADC_custom_init+0xd4>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6093      	str	r3, [r2, #8]

	while((ADC3->ISR & ADC_ISR_ADRDY) != 0){}	// Aspetto che il flag cambi
 8000640:	bf00      	nop
 8000642:	4b16      	ldr	r3, [pc, #88]	@ (800069c <ADC_custom_init+0xd4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f9      	bne.n	8000642 <ADC_custom_init+0x7a>

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 800064e:	4b13      	ldr	r3, [pc, #76]	@ (800069c <ADC_custom_init+0xd4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a12      	ldr	r2, [pc, #72]	@ (800069c <ADC_custom_init+0xd4>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6013      	str	r3, [r2, #0]
	/* Fine istruzioni per l'accensione */

	/* Impostazioni TIMER per triggerare l'nizio della misura */
	TIM6->PSC = 12;	// 240/12 = 20Mhz
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <ADC_custom_init+0xd8>)
 800065c:	220c      	movs	r2, #12
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 1;	// 20Mhz / 10 = 2Mhz
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <ADC_custom_init+0xd8>)
 8000662:	2201      	movs	r2, #1
 8000664:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->CNT = 0;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <ADC_custom_init+0xd8>)
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->DIER &= ~TIM_DIER_UIE;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <ADC_custom_init+0xd8>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	4a0b      	ldr	r2, [pc, #44]	@ (80006a0 <ADC_custom_init+0xd8>)
 8000672:	f023 0301 	bic.w	r3, r3, #1
 8000676:	60d3      	str	r3, [r2, #12]
	TIM6->CR1 &= ~TIM_CR1_CEN;
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <ADC_custom_init+0xd8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a08      	ldr	r2, [pc, #32]	@ (80006a0 <ADC_custom_init+0xd8>)
 800067e:	f023 0301 	bic.w	r3, r3, #1
 8000682:	6013      	str	r3, [r2, #0]
	/* Fine sett. TImer */

	ADC3->IER |= ADC_IER_EOCIE;		// Abilito l'interrupt di fine conversione
 8000684:	4b05      	ldr	r3, [pc, #20]	@ (800069c <ADC_custom_init+0xd4>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	4a04      	ldr	r2, [pc, #16]	@ (800069c <ADC_custom_init+0xd4>)
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	6053      	str	r3, [r2, #4]
//	ADC3->CR  |= ADC_CR_ADSTART;	// Inizio le misurazioni
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	58026000 	.word	0x58026000
 80006a0:	40001000 	.word	0x40001000

080006a4 <EXTI_custom_interrupt>:


void EXTI_custom_interrupt(){
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

	if((TIM6->CR1 & TIM_CR1_CEN) == 0){	// se il timer è spento
 80006a8:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <EXTI_custom_interrupt+0x30>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d109      	bne.n	80006c8 <EXTI_custom_interrupt+0x24>

		DMA1_Stream0->NDTR = 1000;		// imposto numero di misure da eseguire
 80006b4:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <EXTI_custom_interrupt+0x34>)
 80006b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006ba:	605a      	str	r2, [r3, #4]

//		GPIOB->BSRR |= GPIO_BSRR_BS0;

		TIM6->CR1 |= TIM_CR1_CEN;		// accendo il timer
 80006bc:	4b05      	ldr	r3, [pc, #20]	@ (80006d4 <EXTI_custom_interrupt+0x30>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a04      	ldr	r2, [pc, #16]	@ (80006d4 <EXTI_custom_interrupt+0x30>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]
	}
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40001000 	.word	0x40001000
 80006d8:	40020010 	.word	0x40020010

080006dc <DMA_custom_init>:

#define DMA_DATA_BUFF_SIZE 1000

uint16_t DMA_data_buffer[DMA_DATA_BUFF_SIZE];

void DMA_custom_init(){
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0

	DMA1_Stream0->M0AR = (uint32_t) (&DMA_data_buffer);	// inidico l'indirizzo dello storarge di dati
 80006e2:	4b20      	ldr	r3, [pc, #128]	@ (8000764 <DMA_custom_init+0x88>)
 80006e4:	4a20      	ldr	r2, [pc, #128]	@ (8000768 <DMA_custom_init+0x8c>)
 80006e6:	60da      	str	r2, [r3, #12]
	DMA1_Stream1->M0AR = (uint32_t) (&DMA_data_buffer);
 80006e8:	4b20      	ldr	r3, [pc, #128]	@ (800076c <DMA_custom_init+0x90>)
 80006ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000768 <DMA_custom_init+0x8c>)
 80006ec:	60da      	str	r2, [r3, #12]

	DMA1_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
 80006ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <DMA_custom_init+0x88>)
 80006f0:	4a1f      	ldr	r2, [pc, #124]	@ (8000770 <DMA_custom_init+0x94>)
 80006f2:	609a      	str	r2, [r3, #8]
	DMA1_Stream1->PAR = (uint32_t) (&USART3->TDR);
 80006f4:	4b1d      	ldr	r3, [pc, #116]	@ (800076c <DMA_custom_init+0x90>)
 80006f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000774 <DMA_custom_init+0x98>)
 80006f8:	609a      	str	r2, [r3, #8]

	uint32_t n_misure = DMA_DATA_BUFF_SIZE;
 80006fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006fe:	607b      	str	r3, [r7, #4]

	DMA1_Stream0->NDTR = n_misure;			// numero elementi da prendere da ADC3
 8000700:	4a18      	ldr	r2, [pc, #96]	@ (8000764 <DMA_custom_init+0x88>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6053      	str	r3, [r2, #4]
	DMA1_Stream1->NDTR = n_misure*2;			// numero elementi da mandare a USART3
 8000706:	4a19      	ldr	r2, [pc, #100]	@ (800076c <DMA_custom_init+0x90>)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	6053      	str	r3, [r2, #4]

	DMA1_Stream0->CR |= DMA_SxCR_TCIE;		// disablilito interrupt di fine ricezione
 800070e:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <DMA_custom_init+0x88>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a14      	ldr	r2, [pc, #80]	@ (8000764 <DMA_custom_init+0x88>)
 8000714:	f043 0310 	orr.w	r3, r3, #16
 8000718:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_TCIE;		// abilito interrupt di fine trasmissione
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <DMA_custom_init+0x90>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a13      	ldr	r2, [pc, #76]	@ (800076c <DMA_custom_init+0x90>)
 8000720:	f043 0310 	orr.w	r3, r3, #16
 8000724:	6013      	str	r3, [r2, #0]

	ADC3->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);	// DMA in cont mode
 8000726:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <DMA_custom_init+0x9c>)
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	4a13      	ldr	r2, [pc, #76]	@ (8000778 <DMA_custom_init+0x9c>)
 800072c:	f043 0303 	orr.w	r3, r3, #3
 8000730:	60d3      	str	r3, [r2, #12]

	DMA1_Stream0->CR |= DMA_SxCR_EN;
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <DMA_custom_init+0x88>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a0b      	ldr	r2, [pc, #44]	@ (8000764 <DMA_custom_init+0x88>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_EN;
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <DMA_custom_init+0x90>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a0a      	ldr	r2, [pc, #40]	@ (800076c <DMA_custom_init+0x90>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6013      	str	r3, [r2, #0]

	ADC3->CR  |= ADC_CR_ADSTART;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <DMA_custom_init+0x9c>)
 800074c:	689b      	ldr	r3, [r3, #8]
 800074e:	4a0a      	ldr	r2, [pc, #40]	@ (8000778 <DMA_custom_init+0x9c>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6093      	str	r3, [r2, #8]
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40020010 	.word	0x40020010
 8000768:	2400002c 	.word	0x2400002c
 800076c:	40020028 	.word	0x40020028
 8000770:	58026040 	.word	0x58026040
 8000774:	40004828 	.word	0x40004828
 8000778:	58026000 	.word	0x58026000

0800077c <DMA_custom_interrupt_tx>:


void DMA_custom_interrupt_tx(){
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

	USART3->CR3 &= ~USART_CR3_DMAT;			  // SPENGO trasmissione usart
 8000780:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <DMA_custom_interrupt_tx+0x50>)
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	4a11      	ldr	r2, [pc, #68]	@ (80007cc <DMA_custom_interrupt_tx+0x50>)
 8000786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800078a:	6093      	str	r3, [r2, #8]

	DMA1->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 800078c:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <DMA_custom_interrupt_tx+0x54>)
 800078e:	f04f 32ff 	mov.w	r2, #4294967295
 8000792:	609a      	str	r2, [r3, #8]
	DMA1->HIFCR = 0xffffffff;
 8000794:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <DMA_custom_interrupt_tx+0x54>)
 8000796:	f04f 32ff 	mov.w	r2, #4294967295
 800079a:	60da      	str	r2, [r3, #12]

	DMA1_Stream0->CR |= DMA_SxCR_EN;
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <DMA_custom_interrupt_tx+0x58>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0c      	ldr	r2, [pc, #48]	@ (80007d4 <DMA_custom_interrupt_tx+0x58>)
 80007a2:	f043 0301 	orr.w	r3, r3, #1
 80007a6:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_EN;
 80007a8:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <DMA_custom_interrupt_tx+0x5c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <DMA_custom_interrupt_tx+0x5c>)
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	6013      	str	r3, [r2, #0]

	GPIOB->BSRR |= GPIO_BSRR_BR0;			// spengo la luce
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <DMA_custom_interrupt_tx+0x60>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a08      	ldr	r2, [pc, #32]	@ (80007dc <DMA_custom_interrupt_tx+0x60>)
 80007ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007be:	6193      	str	r3, [r2, #24]
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40004800 	.word	0x40004800
 80007d0:	40020000 	.word	0x40020000
 80007d4:	40020010 	.word	0x40020010
 80007d8:	40020028 	.word	0x40020028
 80007dc:	58020400 	.word	0x58020400

080007e0 <DMA_custom_interrupt_rx>:

void DMA_custom_interrupt_rx(){
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

	TIM6->CR1 &= ~TIM_CR1_CEN;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <DMA_custom_interrupt_rx+0x38>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000818 <DMA_custom_interrupt_rx+0x38>)
 80007ea:	f023 0301 	bic.w	r3, r3, #1
 80007ee:	6013      	str	r3, [r2, #0]

	USART3->CR3 |= USART_CR3_DMAT;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <DMA_custom_interrupt_rx+0x3c>)
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	4a09      	ldr	r2, [pc, #36]	@ (800081c <DMA_custom_interrupt_rx+0x3c>)
 80007f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fa:	6093      	str	r3, [r2, #8]

	DMA1->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 80007fc:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <DMA_custom_interrupt_rx+0x40>)
 80007fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000802:	609a      	str	r2, [r3, #8]
	DMA1->HIFCR = 0xffffffff;
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <DMA_custom_interrupt_rx+0x40>)
 8000806:	f04f 32ff 	mov.w	r2, #4294967295
 800080a:	60da      	str	r2, [r3, #12]
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40001000 	.word	0x40001000
 800081c:	40004800 	.word	0x40004800
 8000820:	40020000 	.word	0x40020000

08000824 <USART_custom_init>:
 *      Author: yehan
 */

#include "Custom_USART.h"

void USART_custom_init(){
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

	USART3->CR1 |= USART_CR1_TE;
 8000828:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <USART_custom_init+0x4c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a10      	ldr	r2, [pc, #64]	@ (8000870 <USART_custom_init+0x4c>)
 800082e:	f043 0308 	orr.w	r3, r3, #8
 8000832:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_RE;
 8000834:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <USART_custom_init+0x4c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a0d      	ldr	r2, [pc, #52]	@ (8000870 <USART_custom_init+0x4c>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	6013      	str	r3, [r2, #0]

	USART3->CR1 &= ~USART_CR1_TXEIE;
 8000840:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <USART_custom_init+0x4c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a0a      	ldr	r2, [pc, #40]	@ (8000870 <USART_custom_init+0x4c>)
 8000846:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800084a:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_RXNEIE;
 800084c:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <USART_custom_init+0x4c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a07      	ldr	r2, [pc, #28]	@ (8000870 <USART_custom_init+0x4c>)
 8000852:	f043 0320 	orr.w	r3, r3, #32
 8000856:	6013      	str	r3, [r2, #0]

	USART3->CR1 |= USART_CR1_UE;
 8000858:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <USART_custom_init+0x4c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a04      	ldr	r2, [pc, #16]	@ (8000870 <USART_custom_init+0x4c>)
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	6013      	str	r3, [r2, #0]
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40004800 	.word	0x40004800

08000874 <USART_custom_interrupt>:

void USART_custom_interrupt(){
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0

	char data = USART3->RDR;
 800087a:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <USART_custom_interrupt+0x5c>)
 800087c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800087e:	71fb      	strb	r3, [r7, #7]

	if(data == '?'){
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b3f      	cmp	r3, #63	@ 0x3f
 8000884:	d10b      	bne.n	800089e <USART_custom_interrupt+0x2a>

		USART3->CR3 &= ~USART_CR3_DMAT;	// spengo l'usart
 8000886:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <USART_custom_interrupt+0x5c>)
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	4a11      	ldr	r2, [pc, #68]	@ (80008d0 <USART_custom_interrupt+0x5c>)
 800088c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000890:	6093      	str	r3, [r2, #8]
		TIM6->CR1 |= TIM_CR1_CEN;		// accendo l'adc
 8000892:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <USART_custom_interrupt+0x60>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a0f      	ldr	r2, [pc, #60]	@ (80008d4 <USART_custom_interrupt+0x60>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6013      	str	r3, [r2, #0]
	}

	USART3->ICR |= USART_ICR_ORECF;  //Cancella l'overrun. Capita quando si entra in debug
 800089e:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <USART_custom_interrupt+0x5c>)
 80008a0:	6a1b      	ldr	r3, [r3, #32]
 80008a2:	4a0b      	ldr	r2, [pc, #44]	@ (80008d0 <USART_custom_interrupt+0x5c>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF;   //Azzeramento flag interrupt trasmissione
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <USART_custom_interrupt+0x5c>)
 80008ac:	6a1b      	ldr	r3, [r3, #32]
 80008ae:	4a08      	ldr	r2, [pc, #32]	@ (80008d0 <USART_custom_interrupt+0x5c>)
 80008b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008b4:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <USART_custom_interrupt+0x5c>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	4a05      	ldr	r2, [pc, #20]	@ (80008d0 <USART_custom_interrupt+0x5c>)
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	6193      	str	r3, [r2, #24]
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40004800 	.word	0x40004800
 80008d4:	40001000 	.word	0x40001000

080008d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008dc:	f000 fdbc 	bl	8001458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e0:	f000 f812 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e4:	f000 f9da 	bl	8000c9c <MX_GPIO_Init>
  MX_DMA_Init();
 80008e8:	f000 f9b0 	bl	8000c4c <MX_DMA_Init>
  MX_ADC3_Init();
 80008ec:	f000 f8ba 	bl	8000a64 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 80008f0:	f000 f95e 	bl	8000bb0 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80008f4:	f000 f926 	bl	8000b44 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  ADC_custom_init();
 80008f8:	f7ff fe66 	bl	80005c8 <ADC_custom_init>
  USART_custom_init();
 80008fc:	f7ff ff92 	bl	8000824 <USART_custom_init>
  DMA_custom_init();
 8000900:	f7ff feec 	bl	80006dc <DMA_custom_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <main+0x2c>

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b09e      	sub	sp, #120	@ 0x78
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000912:	224c      	movs	r2, #76	@ 0x4c
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f007 fe04 	bl	8008524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2220      	movs	r2, #32
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f007 fdfd 	bl	8008524 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800092a:	2002      	movs	r0, #2
 800092c:	f002 fe74 	bl	8003618 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	4b48      	ldr	r3, [pc, #288]	@ (8000a58 <SystemClock_Config+0x150>)
 8000936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000938:	4a47      	ldr	r2, [pc, #284]	@ (8000a58 <SystemClock_Config+0x150>)
 800093a:	f023 0301 	bic.w	r3, r3, #1
 800093e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000940:	4b45      	ldr	r3, [pc, #276]	@ (8000a58 <SystemClock_Config+0x150>)
 8000942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4b44      	ldr	r3, [pc, #272]	@ (8000a5c <SystemClock_Config+0x154>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	4a43      	ldr	r2, [pc, #268]	@ (8000a5c <SystemClock_Config+0x154>)
 8000950:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000954:	6193      	str	r3, [r2, #24]
 8000956:	4b41      	ldr	r3, [pc, #260]	@ (8000a5c <SystemClock_Config+0x154>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000962:	bf00      	nop
 8000964:	4b3d      	ldr	r3, [pc, #244]	@ (8000a5c <SystemClock_Config+0x154>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800096c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000970:	d1f8      	bne.n	8000964 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	4b3b      	ldr	r3, [pc, #236]	@ (8000a60 <SystemClock_Config+0x158>)
 8000974:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000978:	4a39      	ldr	r2, [pc, #228]	@ (8000a60 <SystemClock_Config+0x158>)
 800097a:	f043 0302 	orr.w	r3, r3, #2
 800097e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000982:	4b37      	ldr	r3, [pc, #220]	@ (8000a60 <SystemClock_Config+0x158>)
 8000984:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000988:	f003 0302 	and.w	r3, r3, #2
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000990:	2300      	movs	r3, #0
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	4b31      	ldr	r3, [pc, #196]	@ (8000a5c <SystemClock_Config+0x154>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a30      	ldr	r2, [pc, #192]	@ (8000a5c <SystemClock_Config+0x154>)
 800099a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b2e      	ldr	r3, [pc, #184]	@ (8000a5c <SystemClock_Config+0x154>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b2b      	ldr	r3, [pc, #172]	@ (8000a58 <SystemClock_Config+0x150>)
 80009ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ae:	4a2a      	ldr	r2, [pc, #168]	@ (8000a58 <SystemClock_Config+0x150>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009b6:	4b28      	ldr	r3, [pc, #160]	@ (8000a58 <SystemClock_Config+0x150>)
 80009b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009c2:	bf00      	nop
 80009c4:	4b25      	ldr	r3, [pc, #148]	@ (8000a5c <SystemClock_Config+0x154>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009d0:	d1f8      	bne.n	80009c4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d2:	2301      	movs	r3, #1
 80009d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009d6:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80009da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009dc:	2302      	movs	r3, #2
 80009de:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e0:	2302      	movs	r3, #2
 80009e2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009e4:	2301      	movs	r3, #1
 80009e6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 80009e8:	2378      	movs	r3, #120	@ 0x78
 80009ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009f0:	2304      	movs	r3, #4
 80009f2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009f8:	230c      	movs	r3, #12
 80009fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 fe3f 	bl	800368c <HAL_RCC_OscConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000a14:	f000 faa2 	bl	8000f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a18:	233f      	movs	r3, #63	@ 0x3f
 8000a1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a24:	2308      	movs	r3, #8
 8000a26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a28:	2340      	movs	r3, #64	@ 0x40
 8000a2a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a2c:	2340      	movs	r3, #64	@ 0x40
 8000a2e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a36:	2340      	movs	r3, #64	@ 0x40
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	2104      	movs	r1, #4
 8000a40:	4618      	mov	r0, r3
 8000a42:	f003 fa7d 	bl	8003f40 <HAL_RCC_ClockConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000a4c:	f000 fa86 	bl	8000f5c <Error_Handler>
  }
}
 8000a50:	bf00      	nop
 8000a52:	3778      	adds	r7, #120	@ 0x78
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	58000400 	.word	0x58000400
 8000a5c:	58024800 	.word	0x58024800
 8000a60:	58024400 	.word	0x58024400

08000a64 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
 8000a78:	615a      	str	r2, [r3, #20]
 8000a7a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000b3c <MX_ADC3_Init+0xd8>)
 8000a7e:	4a30      	ldr	r2, [pc, #192]	@ (8000b40 <MX_ADC3_Init+0xdc>)
 8000a80:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a82:	4b2e      	ldr	r3, [pc, #184]	@ (8000b3c <MX_ADC3_Init+0xd8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a88:	4b2c      	ldr	r3, [pc, #176]	@ (8000b3c <MX_ADC3_Init+0xd8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b3c <MX_ADC3_Init+0xd8>)
 8000a90:	2204      	movs	r2, #4
 8000a92:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a94:	4b29      	ldr	r3, [pc, #164]	@ (8000b3c <MX_ADC3_Init+0xd8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a9a:	4b28      	ldr	r3, [pc, #160]	@ (8000b3c <MX_ADC3_Init+0xd8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000aa0:	4b26      	ldr	r3, [pc, #152]	@ (8000b3c <MX_ADC3_Init+0xd8>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000aa6:	4b25      	ldr	r3, [pc, #148]	@ (8000b3c <MX_ADC3_Init+0xd8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000aac:	4b23      	ldr	r3, [pc, #140]	@ (8000b3c <MX_ADC3_Init+0xd8>)
 8000aae:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000ab2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ab4:	4b21      	ldr	r3, [pc, #132]	@ (8000b3c <MX_ADC3_Init+0xd8>)
 8000ab6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aba:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000abc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b3c <MX_ADC3_Init+0xd8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b3c <MX_ADC3_Init+0xd8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b3c <MX_ADC3_Init+0xd8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000ace:	4b1b      	ldr	r3, [pc, #108]	@ (8000b3c <MX_ADC3_Init+0xd8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000ad6:	4b19      	ldr	r3, [pc, #100]	@ (8000b3c <MX_ADC3_Init+0xd8>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000adc:	4817      	ldr	r0, [pc, #92]	@ (8000b3c <MX_ADC3_Init+0xd8>)
 8000ade:	f000 fefb 	bl	80018d8 <HAL_ADC_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000ae8:	f000 fa38 	bl	8000f5c <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000aec:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <MX_ADC3_Init+0xd8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000af2:	4812      	ldr	r0, [pc, #72]	@ (8000b3c <MX_ADC3_Init+0xd8>)
 8000af4:	f000 fef0 	bl	80018d8 <HAL_ADC_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000afe:	f000 fa2d 	bl	8000f5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b02:	2301      	movs	r3, #1
 8000b04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b06:	2306      	movs	r3, #6
 8000b08:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b0e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b12:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b14:	2304      	movs	r3, #4
 8000b16:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	@ (8000b3c <MX_ADC3_Init+0xd8>)
 8000b26:	f001 f879 	bl	8001c1c <HAL_ADC_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000b30:	f000 fa14 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3720      	adds	r7, #32
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	240007fc 	.word	0x240007fc
 8000b40:	58026000 	.word	0x58026000

08000b44 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b54:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <MX_TIM6_Init+0x64>)
 8000b56:	4a15      	ldr	r2, [pc, #84]	@ (8000bac <MX_TIM6_Init+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <MX_TIM6_Init+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b60:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <MX_TIM6_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000b66:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <MX_TIM6_Init+0x64>)
 8000b68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b6c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <MX_TIM6_Init+0x64>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b74:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <MX_TIM6_Init+0x64>)
 8000b76:	f006 fa6d 	bl	8007054 <HAL_TIM_Base_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b80:	f000 f9ec 	bl	8000f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b84:	2320      	movs	r3, #32
 8000b86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <MX_TIM6_Init+0x64>)
 8000b92:	f006 fb5d 	bl	8007250 <HAL_TIMEx_MasterConfigSynchronization>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000b9c:	f000 f9de 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	240008d8 	.word	0x240008d8
 8000bac:	40001000 	.word	0x40001000

08000bb0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bb4:	4b22      	ldr	r3, [pc, #136]	@ (8000c40 <MX_USART3_UART_Init+0x90>)
 8000bb6:	4a23      	ldr	r2, [pc, #140]	@ (8000c44 <MX_USART3_UART_Init+0x94>)
 8000bb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8000bba:	4b21      	ldr	r3, [pc, #132]	@ (8000c40 <MX_USART3_UART_Init+0x90>)
 8000bbc:	4a22      	ldr	r2, [pc, #136]	@ (8000c48 <MX_USART3_UART_Init+0x98>)
 8000bbe:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c40 <MX_USART3_UART_Init+0x90>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c40 <MX_USART3_UART_Init+0x90>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c40 <MX_USART3_UART_Init+0x90>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c40 <MX_USART3_UART_Init+0x90>)
 8000bd4:	220c      	movs	r2, #12
 8000bd6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <MX_USART3_UART_Init+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bde:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <MX_USART3_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be4:	4b16      	ldr	r3, [pc, #88]	@ (8000c40 <MX_USART3_UART_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bea:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <MX_USART3_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf0:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <MX_USART3_UART_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bf6:	4812      	ldr	r0, [pc, #72]	@ (8000c40 <MX_USART3_UART_Init+0x90>)
 8000bf8:	f006 fbb8 	bl	800736c <HAL_UART_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000c02:	f000 f9ab 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c06:	2100      	movs	r1, #0
 8000c08:	480d      	ldr	r0, [pc, #52]	@ (8000c40 <MX_USART3_UART_Init+0x90>)
 8000c0a:	f007 fbc0 	bl	800838e <HAL_UARTEx_SetTxFifoThreshold>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000c14:	f000 f9a2 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4809      	ldr	r0, [pc, #36]	@ (8000c40 <MX_USART3_UART_Init+0x90>)
 8000c1c:	f007 fbf5 	bl	800840a <HAL_UARTEx_SetRxFifoThreshold>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000c26:	f000 f999 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <MX_USART3_UART_Init+0x90>)
 8000c2c:	f007 fb76 	bl	800831c <HAL_UARTEx_DisableFifoMode>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000c36:	f000 f991 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	24000924 	.word	0x24000924
 8000c44:	40004800 	.word	0x40004800
 8000c48:	000f4240 	.word	0x000f4240

08000c4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <MX_DMA_Init+0x4c>)
 8000c54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c58:	4a0f      	ldr	r2, [pc, #60]	@ (8000c98 <MX_DMA_Init+0x4c>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c62:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <MX_DMA_Init+0x4c>)
 8000c64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	200b      	movs	r0, #11
 8000c76:	f001 fd14 	bl	80026a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c7a:	200b      	movs	r0, #11
 8000c7c:	f001 fd2b 	bl	80026d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2100      	movs	r1, #0
 8000c84:	200c      	movs	r0, #12
 8000c86:	f001 fd0c 	bl	80026a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c8a:	200c      	movs	r0, #12
 8000c8c:	f001 fd23 	bl	80026d6 <HAL_NVIC_EnableIRQ>

}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	58024400 	.word	0x58024400

08000c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08e      	sub	sp, #56	@ 0x38
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	4ba2      	ldr	r3, [pc, #648]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb8:	4aa0      	ldr	r2, [pc, #640]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc2:	4b9e      	ldr	r3, [pc, #632]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	623b      	str	r3, [r7, #32]
 8000cce:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cd0:	4b9a      	ldr	r3, [pc, #616]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd6:	4a99      	ldr	r2, [pc, #612]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000cd8:	f043 0320 	orr.w	r3, r3, #32
 8000cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce0:	4b96      	ldr	r3, [pc, #600]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce6:	f003 0320 	and.w	r3, r3, #32
 8000cea:	61fb      	str	r3, [r7, #28]
 8000cec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cee:	4b93      	ldr	r3, [pc, #588]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf4:	4a91      	ldr	r2, [pc, #580]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cfe:	4b8f      	ldr	r3, [pc, #572]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d08:	61bb      	str	r3, [r7, #24]
 8000d0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0c:	4b8b      	ldr	r3, [pc, #556]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d12:	4a8a      	ldr	r2, [pc, #552]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d1c:	4b87      	ldr	r3, [pc, #540]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	4b84      	ldr	r3, [pc, #528]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d30:	4a82      	ldr	r2, [pc, #520]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000d32:	f043 0302 	orr.w	r3, r3, #2
 8000d36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3a:	4b80      	ldr	r3, [pc, #512]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d48:	4b7c      	ldr	r3, [pc, #496]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4e:	4a7b      	ldr	r2, [pc, #492]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000d50:	f043 0308 	orr.w	r3, r3, #8
 8000d54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d58:	4b78      	ldr	r3, [pc, #480]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d66:	4b75      	ldr	r3, [pc, #468]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6c:	4a73      	ldr	r2, [pc, #460]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000d6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d76:	4b71      	ldr	r3, [pc, #452]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d84:	4b6d      	ldr	r3, [pc, #436]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8a:	4a6c      	ldr	r2, [pc, #432]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000d8c:	f043 0310 	orr.w	r3, r3, #16
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d94:	4b69      	ldr	r3, [pc, #420]	@ (8000f3c <MX_GPIO_Init+0x2a0>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9a:	f003 0310 	and.w	r3, r3, #16
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000da8:	4865      	ldr	r0, [pc, #404]	@ (8000f40 <MX_GPIO_Init+0x2a4>)
 8000daa:	f002 fbf7 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000db4:	4863      	ldr	r0, [pc, #396]	@ (8000f44 <MX_GPIO_Init+0x2a8>)
 8000db6:	f002 fbf1 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	4862      	ldr	r0, [pc, #392]	@ (8000f48 <MX_GPIO_Init+0x2ac>)
 8000dc0:	f002 fbec 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd8:	4619      	mov	r1, r3
 8000dda:	485c      	ldr	r0, [pc, #368]	@ (8000f4c <MX_GPIO_Init+0x2b0>)
 8000ddc:	f002 fa2e 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000de0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000de4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000df0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df4:	4619      	mov	r1, r3
 8000df6:	4856      	ldr	r0, [pc, #344]	@ (8000f50 <MX_GPIO_Init+0x2b4>)
 8000df8:	f002 fa20 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000dfc:	2332      	movs	r3, #50	@ 0x32
 8000dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e0c:	230b      	movs	r3, #11
 8000e0e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e14:	4619      	mov	r1, r3
 8000e16:	484d      	ldr	r0, [pc, #308]	@ (8000f4c <MX_GPIO_Init+0x2b0>)
 8000e18:	f002 fa10 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e1c:	2386      	movs	r3, #134	@ 0x86
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e2c:	230b      	movs	r3, #11
 8000e2e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e34:	4619      	mov	r1, r3
 8000e36:	4847      	ldr	r0, [pc, #284]	@ (8000f54 <MX_GPIO_Init+0x2b8>)
 8000e38:	f002 fa00 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e3c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e52:	4619      	mov	r1, r3
 8000e54:	483a      	ldr	r0, [pc, #232]	@ (8000f40 <MX_GPIO_Init+0x2a4>)
 8000e56:	f002 f9f1 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e6c:	230b      	movs	r3, #11
 8000e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e74:	4619      	mov	r1, r3
 8000e76:	4832      	ldr	r0, [pc, #200]	@ (8000f40 <MX_GPIO_Init+0x2a4>)
 8000e78:	f002 f9e0 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000e7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e82:	2301      	movs	r3, #1
 8000e84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e92:	4619      	mov	r1, r3
 8000e94:	482b      	ldr	r0, [pc, #172]	@ (8000f44 <MX_GPIO_Init+0x2a8>)
 8000e96:	f002 f9d1 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000e9a:	2380      	movs	r3, #128	@ 0x80
 8000e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e9e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eac:	4619      	mov	r1, r3
 8000eae:	482a      	ldr	r0, [pc, #168]	@ (8000f58 <MX_GPIO_Init+0x2bc>)
 8000eb0:	f002 f9c4 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000eb4:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4820      	ldr	r0, [pc, #128]	@ (8000f54 <MX_GPIO_Init+0x2b8>)
 8000ed2:	f002 f9b3 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ed6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee8:	230b      	movs	r3, #11
 8000eea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4819      	ldr	r0, [pc, #100]	@ (8000f58 <MX_GPIO_Init+0x2bc>)
 8000ef4:	f002 f9a2 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480e      	ldr	r0, [pc, #56]	@ (8000f48 <MX_GPIO_Init+0x2ac>)
 8000f10:	f002 f994 	bl	800323c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2100      	movs	r1, #0
 8000f18:	2017      	movs	r0, #23
 8000f1a:	f001 fbc2 	bl	80026a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f1e:	2017      	movs	r0, #23
 8000f20:	f001 fbd9 	bl	80026d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	2028      	movs	r0, #40	@ 0x28
 8000f2a:	f001 fbba 	bl	80026a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f2e:	2028      	movs	r0, #40	@ 0x28
 8000f30:	f001 fbd1 	bl	80026d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f34:	bf00      	nop
 8000f36:	3738      	adds	r7, #56	@ 0x38
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	58024400 	.word	0x58024400
 8000f40:	58020400 	.word	0x58020400
 8000f44:	58020c00 	.word	0x58020c00
 8000f48:	58021000 	.word	0x58021000
 8000f4c:	58020800 	.word	0x58020800
 8000f50:	58021400 	.word	0x58021400
 8000f54:	58020000 	.word	0x58020000
 8000f58:	58021800 	.word	0x58021800

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
}
 8000f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <Error_Handler+0x8>

08000f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <HAL_MspInit+0x30>)
 8000f70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f74:	4a08      	ldr	r2, [pc, #32]	@ (8000f98 <HAL_MspInit+0x30>)
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f7e:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HAL_MspInit+0x30>)
 8000f80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	58024400 	.word	0x58024400

08000f9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0b4      	sub	sp, #208	@ 0xd0
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	22c0      	movs	r2, #192	@ 0xc0
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f007 fab9 	bl	8008524 <memset>
  if(hadc->Instance==ADC3)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a3e      	ldr	r2, [pc, #248]	@ (80010b0 <HAL_ADC_MspInit+0x114>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d175      	bne.n	80010a8 <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fbc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000fc0:	f04f 0300 	mov.w	r3, #0
 8000fc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 50;
 8000fcc:	2332      	movs	r3, #50	@ 0x32
 8000fce:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000fdc:	2380      	movs	r3, #128	@ 0x80
 8000fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f003 fb30 	bl	8004658 <HAL_RCCEx_PeriphCLKConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8000ffe:	f7ff ffad 	bl	8000f5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001002:	4b2c      	ldr	r3, [pc, #176]	@ (80010b4 <HAL_ADC_MspInit+0x118>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001008:	4a2a      	ldr	r2, [pc, #168]	@ (80010b4 <HAL_ADC_MspInit+0x118>)
 800100a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800100e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001012:	4b28      	ldr	r3, [pc, #160]	@ (80010b4 <HAL_ADC_MspInit+0x118>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001018:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001020:	4b24      	ldr	r3, [pc, #144]	@ (80010b4 <HAL_ADC_MspInit+0x118>)
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001026:	4a23      	ldr	r2, [pc, #140]	@ (80010b4 <HAL_ADC_MspInit+0x118>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001030:	4b20      	ldr	r3, [pc, #128]	@ (80010b4 <HAL_ADC_MspInit+0x118>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800103e:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001042:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001046:	f000 faa5 	bl	8001594 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 800104a:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <HAL_ADC_MspInit+0x11c>)
 800104c:	4a1b      	ldr	r2, [pc, #108]	@ (80010bc <HAL_ADC_MspInit+0x120>)
 800104e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001050:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <HAL_ADC_MspInit+0x11c>)
 8001052:	2273      	movs	r2, #115	@ 0x73
 8001054:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001056:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <HAL_ADC_MspInit+0x11c>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800105c:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <HAL_ADC_MspInit+0x11c>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <HAL_ADC_MspInit+0x11c>)
 8001064:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001068:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800106a:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <HAL_ADC_MspInit+0x11c>)
 800106c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001070:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <HAL_ADC_MspInit+0x11c>)
 8001074:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001078:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <HAL_ADC_MspInit+0x11c>)
 800107c:	2200      	movs	r2, #0
 800107e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001080:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <HAL_ADC_MspInit+0x11c>)
 8001082:	2200      	movs	r2, #0
 8001084:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <HAL_ADC_MspInit+0x11c>)
 8001088:	2200      	movs	r2, #0
 800108a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800108c:	480a      	ldr	r0, [pc, #40]	@ (80010b8 <HAL_ADC_MspInit+0x11c>)
 800108e:	f001 fb3d 	bl	800270c <HAL_DMA_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8001098:	f7ff ff60 	bl	8000f5c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a06      	ldr	r2, [pc, #24]	@ (80010b8 <HAL_ADC_MspInit+0x11c>)
 80010a0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80010a2:	4a05      	ldr	r2, [pc, #20]	@ (80010b8 <HAL_ADC_MspInit+0x11c>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 80010a8:	bf00      	nop
 80010aa:	37d0      	adds	r7, #208	@ 0xd0
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	58026000 	.word	0x58026000
 80010b4:	58024400 	.word	0x58024400
 80010b8:	24000860 	.word	0x24000860
 80010bc:	40020010 	.word	0x40020010

080010c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0b      	ldr	r2, [pc, #44]	@ (80010fc <HAL_TIM_Base_MspInit+0x3c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d10e      	bne.n	80010f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <HAL_TIM_Base_MspInit+0x40>)
 80010d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010d8:	4a09      	ldr	r2, [pc, #36]	@ (8001100 <HAL_TIM_Base_MspInit+0x40>)
 80010da:	f043 0310 	orr.w	r3, r3, #16
 80010de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <HAL_TIM_Base_MspInit+0x40>)
 80010e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40001000 	.word	0x40001000
 8001100:	58024400 	.word	0x58024400

08001104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b0ba      	sub	sp, #232	@ 0xe8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	22c0      	movs	r2, #192	@ 0xc0
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f007 f9fd 	bl	8008524 <memset>
  if(huart->Instance==USART3)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a41      	ldr	r2, [pc, #260]	@ (8001234 <HAL_UART_MspInit+0x130>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d17b      	bne.n	800122c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001134:	f04f 0202 	mov.w	r2, #2
 8001138:	f04f 0300 	mov.w	r3, #0
 800113c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	4618      	mov	r0, r3
 800114c:	f003 fa84 	bl	8004658 <HAL_RCCEx_PeriphCLKConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001156:	f7ff ff01 	bl	8000f5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800115a:	4b37      	ldr	r3, [pc, #220]	@ (8001238 <HAL_UART_MspInit+0x134>)
 800115c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001160:	4a35      	ldr	r2, [pc, #212]	@ (8001238 <HAL_UART_MspInit+0x134>)
 8001162:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001166:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800116a:	4b33      	ldr	r3, [pc, #204]	@ (8001238 <HAL_UART_MspInit+0x134>)
 800116c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001170:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001178:	4b2f      	ldr	r3, [pc, #188]	@ (8001238 <HAL_UART_MspInit+0x134>)
 800117a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800117e:	4a2e      	ldr	r2, [pc, #184]	@ (8001238 <HAL_UART_MspInit+0x134>)
 8001180:	f043 0308 	orr.w	r3, r3, #8
 8001184:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001188:	4b2b      	ldr	r3, [pc, #172]	@ (8001238 <HAL_UART_MspInit+0x134>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001196:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800119a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011b0:	2307      	movs	r3, #7
 80011b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011ba:	4619      	mov	r1, r3
 80011bc:	481f      	ldr	r0, [pc, #124]	@ (800123c <HAL_UART_MspInit+0x138>)
 80011be:	f002 f83d 	bl	800323c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80011c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <HAL_UART_MspInit+0x13c>)
 80011c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001244 <HAL_UART_MspInit+0x140>)
 80011c6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80011c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <HAL_UART_MspInit+0x13c>)
 80011ca:	222e      	movs	r2, #46	@ 0x2e
 80011cc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <HAL_UART_MspInit+0x13c>)
 80011d0:	2240      	movs	r2, #64	@ 0x40
 80011d2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <HAL_UART_MspInit+0x13c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011da:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <HAL_UART_MspInit+0x13c>)
 80011dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011e0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011e2:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <HAL_UART_MspInit+0x13c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011e8:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <HAL_UART_MspInit+0x13c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80011ee:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <HAL_UART_MspInit+0x13c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <HAL_UART_MspInit+0x13c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011fa:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <HAL_UART_MspInit+0x13c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001200:	480f      	ldr	r0, [pc, #60]	@ (8001240 <HAL_UART_MspInit+0x13c>)
 8001202:	f001 fa83 	bl	800270c <HAL_DMA_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800120c:	f7ff fea6 	bl	8000f5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a0b      	ldr	r2, [pc, #44]	@ (8001240 <HAL_UART_MspInit+0x13c>)
 8001214:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001216:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <HAL_UART_MspInit+0x13c>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2100      	movs	r1, #0
 8001220:	2027      	movs	r0, #39	@ 0x27
 8001222:	f001 fa3e 	bl	80026a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001226:	2027      	movs	r0, #39	@ 0x27
 8001228:	f001 fa55 	bl	80026d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800122c:	bf00      	nop
 800122e:	37e8      	adds	r7, #232	@ 0xe8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40004800 	.word	0x40004800
 8001238:	58024400 	.word	0x58024400
 800123c:	58020c00 	.word	0x58020c00
 8001240:	240009b8 	.word	0x240009b8
 8001244:	40020028 	.word	0x40020028

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <NMI_Handler+0x4>

08001250 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <HardFault_Handler+0x4>

08001258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <MemManage_Handler+0x4>

08001260 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <BusFault_Handler+0x4>

08001268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <UsageFault_Handler+0x4>

08001270 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129e:	f000 f94d 	bl	800153c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	DMA_custom_interrupt_rx();
 80012aa:	f7ff fa99 	bl	80007e0 <DMA_custom_interrupt_rx>
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
	DMA_custom_interrupt_tx();
 80012b6:	f7ff fa61 	bl	800077c <DMA_custom_interrupt_tx>
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}

080012be <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0
//	if(GPIOE->IDR & GPIO_IDR_ID1){
//		GPIOE->BSRR |= GPIO_BSRR_BR1;
//	}else{
//		GPIOE->BSRR |= GPIO_BSRR_BS1;
//	}
	EXTI_custom_interrupt();
 80012c2:	f7ff f9ef 	bl	80006a4 <EXTI_custom_interrupt>

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_OVCR_Pin);
 80012c6:	2080      	movs	r0, #128	@ 0x80
 80012c8:	f002 f981 	bl	80035ce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80012cc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80012d0:	f002 f97d 	bl	80035ce <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	USART_custom_interrupt();
 80012dc:	f7ff faca 	bl	8000874 <USART_custom_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(1)
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012ec:	f002 f96f 	bl	80035ce <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012f8:	4b37      	ldr	r3, [pc, #220]	@ (80013d8 <SystemInit+0xe4>)
 80012fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012fe:	4a36      	ldr	r2, [pc, #216]	@ (80013d8 <SystemInit+0xe4>)
 8001300:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001304:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001308:	4b34      	ldr	r3, [pc, #208]	@ (80013dc <SystemInit+0xe8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	2b06      	cmp	r3, #6
 8001312:	d807      	bhi.n	8001324 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001314:	4b31      	ldr	r3, [pc, #196]	@ (80013dc <SystemInit+0xe8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f023 030f 	bic.w	r3, r3, #15
 800131c:	4a2f      	ldr	r2, [pc, #188]	@ (80013dc <SystemInit+0xe8>)
 800131e:	f043 0307 	orr.w	r3, r3, #7
 8001322:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001324:	4b2e      	ldr	r3, [pc, #184]	@ (80013e0 <SystemInit+0xec>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a2d      	ldr	r2, [pc, #180]	@ (80013e0 <SystemInit+0xec>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001330:	4b2b      	ldr	r3, [pc, #172]	@ (80013e0 <SystemInit+0xec>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001336:	4b2a      	ldr	r3, [pc, #168]	@ (80013e0 <SystemInit+0xec>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4929      	ldr	r1, [pc, #164]	@ (80013e0 <SystemInit+0xec>)
 800133c:	4b29      	ldr	r3, [pc, #164]	@ (80013e4 <SystemInit+0xf0>)
 800133e:	4013      	ands	r3, r2
 8001340:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001342:	4b26      	ldr	r3, [pc, #152]	@ (80013dc <SystemInit+0xe8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d007      	beq.n	800135e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800134e:	4b23      	ldr	r3, [pc, #140]	@ (80013dc <SystemInit+0xe8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 030f 	bic.w	r3, r3, #15
 8001356:	4a21      	ldr	r2, [pc, #132]	@ (80013dc <SystemInit+0xe8>)
 8001358:	f043 0307 	orr.w	r3, r3, #7
 800135c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800135e:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <SystemInit+0xec>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001364:	4b1e      	ldr	r3, [pc, #120]	@ (80013e0 <SystemInit+0xec>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800136a:	4b1d      	ldr	r3, [pc, #116]	@ (80013e0 <SystemInit+0xec>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001370:	4b1b      	ldr	r3, [pc, #108]	@ (80013e0 <SystemInit+0xec>)
 8001372:	4a1d      	ldr	r2, [pc, #116]	@ (80013e8 <SystemInit+0xf4>)
 8001374:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001376:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <SystemInit+0xec>)
 8001378:	4a1c      	ldr	r2, [pc, #112]	@ (80013ec <SystemInit+0xf8>)
 800137a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800137c:	4b18      	ldr	r3, [pc, #96]	@ (80013e0 <SystemInit+0xec>)
 800137e:	4a1c      	ldr	r2, [pc, #112]	@ (80013f0 <SystemInit+0xfc>)
 8001380:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001382:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <SystemInit+0xec>)
 8001384:	2200      	movs	r2, #0
 8001386:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001388:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <SystemInit+0xec>)
 800138a:	4a19      	ldr	r2, [pc, #100]	@ (80013f0 <SystemInit+0xfc>)
 800138c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800138e:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <SystemInit+0xec>)
 8001390:	2200      	movs	r2, #0
 8001392:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <SystemInit+0xec>)
 8001396:	4a16      	ldr	r2, [pc, #88]	@ (80013f0 <SystemInit+0xfc>)
 8001398:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <SystemInit+0xec>)
 800139c:	2200      	movs	r2, #0
 800139e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <SystemInit+0xec>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0e      	ldr	r2, [pc, #56]	@ (80013e0 <SystemInit+0xec>)
 80013a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <SystemInit+0xec>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <SystemInit+0x100>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <SystemInit+0x104>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013be:	d202      	bcs.n	80013c6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013c0:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <SystemInit+0x108>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <SystemInit+0x10c>)
 80013c8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80013cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00
 80013dc:	52002000 	.word	0x52002000
 80013e0:	58024400 	.word	0x58024400
 80013e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80013e8:	02020200 	.word	0x02020200
 80013ec:	01ff0000 	.word	0x01ff0000
 80013f0:	01010280 	.word	0x01010280
 80013f4:	5c001000 	.word	0x5c001000
 80013f8:	ffff0000 	.word	0xffff0000
 80013fc:	51008108 	.word	0x51008108
 8001400:	52004000 	.word	0x52004000

08001404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001404:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800143c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001408:	f7ff ff74 	bl	80012f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800140c:	480c      	ldr	r0, [pc, #48]	@ (8001440 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800140e:	490d      	ldr	r1, [pc, #52]	@ (8001444 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001410:	4a0d      	ldr	r2, [pc, #52]	@ (8001448 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001414:	e002      	b.n	800141c <LoopCopyDataInit>

08001416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141a:	3304      	adds	r3, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001420:	d3f9      	bcc.n	8001416 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001422:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001424:	4c0a      	ldr	r4, [pc, #40]	@ (8001450 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001428:	e001      	b.n	800142e <LoopFillZerobss>

0800142a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800142c:	3204      	adds	r2, #4

0800142e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001430:	d3fb      	bcc.n	800142a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001432:	f007 f87f 	bl	8008534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001436:	f7ff fa4f 	bl	80008d8 <main>
  bx  lr
 800143a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800143c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001440:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001444:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001448:	080085e4 	.word	0x080085e4
  ldr r2, =_sbss
 800144c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001450:	24000a34 	.word	0x24000a34

08001454 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC3_IRQHandler>
	...

08001458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145e:	2003      	movs	r0, #3
 8001460:	f001 f914 	bl	800268c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001464:	f002 ff22 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 8001468:	4602      	mov	r2, r0
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <HAL_Init+0x68>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	0a1b      	lsrs	r3, r3, #8
 8001470:	f003 030f 	and.w	r3, r3, #15
 8001474:	4913      	ldr	r1, [pc, #76]	@ (80014c4 <HAL_Init+0x6c>)
 8001476:	5ccb      	ldrb	r3, [r1, r3]
 8001478:	f003 031f 	and.w	r3, r3, #31
 800147c:	fa22 f303 	lsr.w	r3, r2, r3
 8001480:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001482:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <HAL_Init+0x68>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	4a0e      	ldr	r2, [pc, #56]	@ (80014c4 <HAL_Init+0x6c>)
 800148c:	5cd3      	ldrb	r3, [r2, r3]
 800148e:	f003 031f 	and.w	r3, r3, #31
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
 8001498:	4a0b      	ldr	r2, [pc, #44]	@ (80014c8 <HAL_Init+0x70>)
 800149a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800149c:	4a0b      	ldr	r2, [pc, #44]	@ (80014cc <HAL_Init+0x74>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014a2:	2000      	movs	r0, #0
 80014a4:	f000 f814 	bl	80014d0 <HAL_InitTick>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e002      	b.n	80014b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014b2:	f7ff fd59 	bl	8000f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	58024400 	.word	0x58024400
 80014c4:	08008594 	.word	0x08008594
 80014c8:	24000004 	.word	0x24000004
 80014cc:	24000000 	.word	0x24000000

080014d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014d8:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <HAL_InitTick+0x60>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e021      	b.n	8001528 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014e4:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <HAL_InitTick+0x64>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <HAL_InitTick+0x60>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f001 f8f9 	bl	80026f2 <HAL_SYSTICK_Config>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e00e      	b.n	8001528 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b0f      	cmp	r3, #15
 800150e:	d80a      	bhi.n	8001526 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001510:	2200      	movs	r2, #0
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f001 f8c3 	bl	80026a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800151c:	4a06      	ldr	r2, [pc, #24]	@ (8001538 <HAL_InitTick+0x68>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e000      	b.n	8001528 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2400000c 	.word	0x2400000c
 8001534:	24000000 	.word	0x24000000
 8001538:	24000008 	.word	0x24000008

0800153c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_IncTick+0x20>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <HAL_IncTick+0x24>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
 800154c:	4a04      	ldr	r2, [pc, #16]	@ (8001560 <HAL_IncTick+0x24>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	2400000c 	.word	0x2400000c
 8001560:	24000a30 	.word	0x24000a30

08001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b03      	ldr	r3, [pc, #12]	@ (8001578 <HAL_GetTick+0x14>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	24000a30 	.word	0x24000a30

0800157c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001580:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <HAL_GetREVID+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	0c1b      	lsrs	r3, r3, #16
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	5c001000 	.word	0x5c001000

08001594 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800159e:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	401a      	ands	r2, r3
 80015a8:	4904      	ldr	r1, [pc, #16]	@ (80015bc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	58000400 	.word	0x58000400

080015c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	609a      	str	r2, [r3, #8]
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	609a      	str	r2, [r3, #8]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001628:	b480      	push	{r7}
 800162a:	b087      	sub	sp, #28
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3360      	adds	r3, #96	@ 0x60
 800163a:	461a      	mov	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	430b      	orrs	r3, r1
 8001656:	431a      	orrs	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800165c:	bf00      	nop
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	f003 031f 	and.w	r3, r3, #31
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	431a      	orrs	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	611a      	str	r2, [r3, #16]
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800169a:	b480      	push	{r7}
 800169c:	b087      	sub	sp, #28
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3360      	adds	r3, #96	@ 0x60
 80016aa:	461a      	mov	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	431a      	orrs	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	601a      	str	r2, [r3, #0]
  }
}
 80016c4:	bf00      	nop
 80016c6:	371c      	adds	r7, #28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	3330      	adds	r3, #48	@ 0x30
 80016e0:	461a      	mov	r2, r3
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	4413      	add	r3, r2
 80016ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f003 031f 	and.w	r3, r3, #31
 80016fa:	211f      	movs	r1, #31
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	401a      	ands	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	0e9b      	lsrs	r3, r3, #26
 8001708:	f003 011f 	and.w	r1, r3, #31
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	f003 031f 	and.w	r3, r3, #31
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	431a      	orrs	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800171c:	bf00      	nop
 800171e:	371c      	adds	r7, #28
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3314      	adds	r3, #20
 8001738:	461a      	mov	r2, r3
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	0e5b      	lsrs	r3, r3, #25
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	4413      	add	r3, r2
 8001746:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	0d1b      	lsrs	r3, r3, #20
 8001750:	f003 031f 	and.w	r3, r3, #31
 8001754:	2107      	movs	r1, #7
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	401a      	ands	r2, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	0d1b      	lsrs	r3, r3, #20
 8001762:	f003 031f 	and.w	r3, r3, #31
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	fa01 f303 	lsl.w	r3, r1, r3
 800176c:	431a      	orrs	r2, r3
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001772:	bf00      	nop
 8001774:	371c      	adds	r7, #28
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001798:	43db      	mvns	r3, r3
 800179a:	401a      	ands	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0318 	and.w	r3, r3, #24
 80017a2:	4908      	ldr	r1, [pc, #32]	@ (80017c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80017a4:	40d9      	lsrs	r1, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	400b      	ands	r3, r1
 80017aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017ae:	431a      	orrs	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	000fffff 	.word	0x000fffff

080017c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6093      	str	r3, [r2, #8]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	5fffffc0 	.word	0x5fffffc0

080017ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001800:	d101      	bne.n	8001806 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	4b05      	ldr	r3, [pc, #20]	@ (8001838 <LL_ADC_EnableInternalRegulator+0x24>)
 8001822:	4013      	ands	r3, r2
 8001824:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	6fffffc0 	.word	0x6fffffc0

0800183c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001850:	d101      	bne.n	8001856 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b01      	cmp	r3, #1
 8001876:	d101      	bne.n	800187c <LL_ADC_IsEnabled+0x18>
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <LL_ADC_IsEnabled+0x1a>
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	2b04      	cmp	r3, #4
 800189c:	d101      	bne.n	80018a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d101      	bne.n	80018c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b089      	sub	sp, #36	@ 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e18f      	b.n	8001c12 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d109      	bne.n	8001914 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff fb4b 	bl	8000f9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff67 	bl	80017ec <LL_ADC_IsDeepPowerDownEnabled>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d004      	beq.n	800192e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff4d 	bl	80017c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff ff82 	bl	800183c <LL_ADC_IsInternalRegulatorEnabled>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d114      	bne.n	8001968 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ff66 	bl	8001814 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001948:	4b87      	ldr	r3, [pc, #540]	@ (8001b68 <HAL_ADC_Init+0x290>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	099b      	lsrs	r3, r3, #6
 800194e:	4a87      	ldr	r2, [pc, #540]	@ (8001b6c <HAL_ADC_Init+0x294>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	099b      	lsrs	r3, r3, #6
 8001956:	3301      	adds	r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800195a:	e002      	b.n	8001962 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	3b01      	subs	r3, #1
 8001960:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f9      	bne.n	800195c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff65 	bl	800183c <LL_ADC_IsInternalRegulatorEnabled>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10d      	bne.n	8001994 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800197c:	f043 0210 	orr.w	r2, r3, #16
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001988:	f043 0201 	orr.w	r2, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff76 	bl	800188a <LL_ADC_REG_IsConversionOngoing>
 800199e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f040 8129 	bne.w	8001c00 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f040 8125 	bne.w	8001c00 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ba:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80019be:	f043 0202 	orr.w	r2, r3, #2
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ff4a 	bl	8001864 <LL_ADC_IsEnabled>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d136      	bne.n	8001a44 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a65      	ldr	r2, [pc, #404]	@ (8001b70 <HAL_ADC_Init+0x298>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d004      	beq.n	80019ea <HAL_ADC_Init+0x112>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a63      	ldr	r2, [pc, #396]	@ (8001b74 <HAL_ADC_Init+0x29c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d10e      	bne.n	8001a08 <HAL_ADC_Init+0x130>
 80019ea:	4861      	ldr	r0, [pc, #388]	@ (8001b70 <HAL_ADC_Init+0x298>)
 80019ec:	f7ff ff3a 	bl	8001864 <LL_ADC_IsEnabled>
 80019f0:	4604      	mov	r4, r0
 80019f2:	4860      	ldr	r0, [pc, #384]	@ (8001b74 <HAL_ADC_Init+0x29c>)
 80019f4:	f7ff ff36 	bl	8001864 <LL_ADC_IsEnabled>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4323      	orrs	r3, r4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	bf0c      	ite	eq
 8001a00:	2301      	moveq	r3, #1
 8001a02:	2300      	movne	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	e008      	b.n	8001a1a <HAL_ADC_Init+0x142>
 8001a08:	485b      	ldr	r0, [pc, #364]	@ (8001b78 <HAL_ADC_Init+0x2a0>)
 8001a0a:	f7ff ff2b 	bl	8001864 <LL_ADC_IsEnabled>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bf0c      	ite	eq
 8001a14:	2301      	moveq	r3, #1
 8001a16:	2300      	movne	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d012      	beq.n	8001a44 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a53      	ldr	r2, [pc, #332]	@ (8001b70 <HAL_ADC_Init+0x298>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d004      	beq.n	8001a32 <HAL_ADC_Init+0x15a>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a51      	ldr	r2, [pc, #324]	@ (8001b74 <HAL_ADC_Init+0x29c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_Init+0x15e>
 8001a32:	4a52      	ldr	r2, [pc, #328]	@ (8001b7c <HAL_ADC_Init+0x2a4>)
 8001a34:	e000      	b.n	8001a38 <HAL_ADC_Init+0x160>
 8001a36:	4a52      	ldr	r2, [pc, #328]	@ (8001b80 <HAL_ADC_Init+0x2a8>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4610      	mov	r0, r2
 8001a40:	f7ff fdbe 	bl	80015c0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001a44:	f7ff fd9a 	bl	800157c <HAL_GetREVID>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d914      	bls.n	8001a7c <HAL_ADC_Init+0x1a4>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b10      	cmp	r3, #16
 8001a58:	d110      	bne.n	8001a7c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	7d5b      	ldrb	r3, [r3, #21]
 8001a5e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a64:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a6a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7f1b      	ldrb	r3, [r3, #28]
 8001a70:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a72:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a74:	f043 030c 	orr.w	r3, r3, #12
 8001a78:	61bb      	str	r3, [r7, #24]
 8001a7a:	e00d      	b.n	8001a98 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	7d5b      	ldrb	r3, [r3, #21]
 8001a80:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a86:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a8c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7f1b      	ldrb	r3, [r3, #28]
 8001a92:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7f1b      	ldrb	r3, [r3, #28]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d106      	bne.n	8001aae <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	045b      	lsls	r3, r3, #17
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aba:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b84 <HAL_ADC_Init+0x2ac>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	69b9      	ldr	r1, [r7, #24]
 8001ada:	430b      	orrs	r3, r1
 8001adc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fed1 	bl	800188a <LL_ADC_REG_IsConversionOngoing>
 8001ae8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fede 	bl	80018b0 <LL_ADC_INJ_IsConversionOngoing>
 8001af4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d15f      	bne.n	8001bbc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d15c      	bne.n	8001bbc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7d1b      	ldrb	r3, [r3, #20]
 8001b06:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	4b1c      	ldr	r3, [pc, #112]	@ (8001b88 <HAL_ADC_Init+0x2b0>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	69b9      	ldr	r1, [r7, #24]
 8001b20:	430b      	orrs	r3, r1
 8001b22:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d130      	bne.n	8001b90 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b32:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	4b14      	ldr	r3, [pc, #80]	@ (8001b8c <HAL_ADC_Init+0x2b4>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b42:	3a01      	subs	r2, #1
 8001b44:	0411      	lsls	r1, r2, #16
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b4a:	4311      	orrs	r1, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b50:	4311      	orrs	r1, r2
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b56:	430a      	orrs	r2, r1
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	611a      	str	r2, [r3, #16]
 8001b64:	e01c      	b.n	8001ba0 <HAL_ADC_Init+0x2c8>
 8001b66:	bf00      	nop
 8001b68:	24000000 	.word	0x24000000
 8001b6c:	053e2d63 	.word	0x053e2d63
 8001b70:	40022000 	.word	0x40022000
 8001b74:	40022100 	.word	0x40022100
 8001b78:	58026000 	.word	0x58026000
 8001b7c:	40022300 	.word	0x40022300
 8001b80:	58026300 	.word	0x58026300
 8001b84:	fff0c003 	.word	0xfff0c003
 8001b88:	ffffbffc 	.word	0xffffbffc
 8001b8c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0201 	bic.w	r2, r2, #1
 8001b9e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 fb8c 	bl	80022d4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d10c      	bne.n	8001bde <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	f023 010f 	bic.w	r1, r3, #15
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	1e5a      	subs	r2, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bdc:	e007      	b.n	8001bee <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 020f 	bic.w	r2, r2, #15
 8001bec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf2:	f023 0303 	bic.w	r3, r3, #3
 8001bf6:	f043 0201 	orr.w	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	655a      	str	r2, [r3, #84]	@ 0x54
 8001bfe:	e007      	b.n	8001c10 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c04:	f043 0210 	orr.w	r2, r3, #16
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c10:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3724      	adds	r7, #36	@ 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd90      	pop	{r4, r7, pc}
 8001c1a:	bf00      	nop

08001c1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b0a1      	sub	sp, #132	@ 0x84
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	4a65      	ldr	r2, [pc, #404]	@ (8001dcc <HAL_ADC_ConfigChannel+0x1b0>)
 8001c36:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x2a>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e32e      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x688>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fe19 	bl	800188a <LL_ADC_REG_IsConversionOngoing>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f040 8313 	bne.w	8002286 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	db2c      	blt.n	8001cc2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d108      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x6a>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	0e9b      	lsrs	r3, r3, #26
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	2201      	movs	r2, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	e016      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x98>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c96:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001c9e:	2320      	movs	r3, #32
 8001ca0:	e003      	b.n	8001caa <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001ca2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ca4:	fab3 f383 	clz	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	2201      	movs	r2, #1
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	69d1      	ldr	r1, [r2, #28]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	430b      	orrs	r3, r1
 8001cc0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	6859      	ldr	r1, [r3, #4]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	f7ff fcfe 	bl	80016d0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fdd6 	bl	800188a <LL_ADC_REG_IsConversionOngoing>
 8001cde:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fde3 	bl	80018b0 <LL_ADC_INJ_IsConversionOngoing>
 8001cea:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f040 80b8 	bne.w	8001e64 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f040 80b4 	bne.w	8001e64 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	6819      	ldr	r1, [r3, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	f7ff fd0d 	bl	8001728 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d0e:	4b30      	ldr	r3, [pc, #192]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x1b4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001d16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d1a:	d10b      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x118>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	089b      	lsrs	r3, r3, #2
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	e01d      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x154>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10b      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x13e>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	695a      	ldr	r2, [r3, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	089b      	lsrs	r3, r3, #2
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	e00a      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x154>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d02c      	beq.n	8001dd4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	6919      	ldr	r1, [r3, #16]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d88:	f7ff fc4e 	bl	8001628 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	6919      	ldr	r1, [r3, #16]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	7e5b      	ldrb	r3, [r3, #25]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d102      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x186>
 8001d9c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001da0:	e000      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x188>
 8001da2:	2300      	movs	r3, #0
 8001da4:	461a      	mov	r2, r3
 8001da6:	f7ff fc78 	bl	800169a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	6919      	ldr	r1, [r3, #16]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	7e1b      	ldrb	r3, [r3, #24]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d102      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x1a4>
 8001dba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001dbe:	e000      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1a6>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f7ff fc50 	bl	8001668 <LL_ADC_SetDataRightShift>
 8001dc8:	e04c      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x248>
 8001dca:	bf00      	nop
 8001dcc:	47ff0000 	.word	0x47ff0000
 8001dd0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	069b      	lsls	r3, r3, #26
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d107      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001df6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001dfe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	069b      	lsls	r3, r3, #26
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d107      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e1a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	069b      	lsls	r3, r3, #26
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d107      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e3e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	069b      	lsls	r3, r3, #26
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d107      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e62:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fcfb 	bl	8001864 <LL_ADC_IsEnabled>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f040 8211 	bne.w	8002298 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	6819      	ldr	r1, [r3, #0]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	461a      	mov	r2, r3
 8001e84:	f7ff fc7c 	bl	8001780 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4aa1      	ldr	r2, [pc, #644]	@ (8002114 <HAL_ADC_ConfigChannel+0x4f8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	f040 812e 	bne.w	80020f0 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10b      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x2a0>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0e9b      	lsrs	r3, r3, #26
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	2b09      	cmp	r3, #9
 8001eb2:	bf94      	ite	ls
 8001eb4:	2301      	movls	r3, #1
 8001eb6:	2300      	movhi	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	e019      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x2d4>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001ece:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8001ed4:	2320      	movs	r3, #32
 8001ed6:	e003      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8001ed8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	2b09      	cmp	r3, #9
 8001ee8:	bf94      	ite	ls
 8001eea:	2301      	movls	r3, #1
 8001eec:	2300      	movhi	r3, #0
 8001eee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d079      	beq.n	8001fe8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d107      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x2f4>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	0e9b      	lsrs	r3, r3, #26
 8001f06:	3301      	adds	r3, #1
 8001f08:	069b      	lsls	r3, r3, #26
 8001f0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f0e:	e015      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x320>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001f1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f20:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001f22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8001f28:	2320      	movs	r3, #32
 8001f2a:	e003      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8001f2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f2e:	fab3 f383 	clz	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	3301      	adds	r3, #1
 8001f36:	069b      	lsls	r3, r3, #26
 8001f38:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d109      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x340>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	0e9b      	lsrs	r3, r3, #26
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	2101      	movs	r1, #1
 8001f56:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5a:	e017      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x370>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f6c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001f6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8001f74:	2320      	movs	r3, #32
 8001f76:	e003      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8001f78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f7a:	fab3 f383 	clz	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	3301      	adds	r3, #1
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	2101      	movs	r1, #1
 8001f88:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8c:	ea42 0103 	orr.w	r1, r2, r3
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10a      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x396>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	0e9b      	lsrs	r3, r3, #26
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f003 021f 	and.w	r2, r3, #31
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	051b      	lsls	r3, r3, #20
 8001fb0:	e018      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x3c8>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8001fca:	2320      	movs	r3, #32
 8001fcc:	e003      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8001fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fd0:	fab3 f383 	clz	r3, r3
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	f003 021f 	and.w	r2, r3, #31
 8001fdc:	4613      	mov	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	e07e      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d107      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x3e8>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	0e9b      	lsrs	r3, r3, #26
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	069b      	lsls	r3, r3, #26
 8001ffe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002002:	e015      	b.n	8002030 <HAL_ADC_ConfigChannel+0x414>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800201c:	2320      	movs	r3, #32
 800201e:	e003      	b.n	8002028 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	3301      	adds	r3, #1
 800202a:	069b      	lsls	r3, r3, #26
 800202c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002038:	2b00      	cmp	r3, #0
 800203a:	d109      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x434>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	0e9b      	lsrs	r3, r3, #26
 8002042:	3301      	adds	r3, #1
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	2101      	movs	r1, #1
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	e017      	b.n	8002080 <HAL_ADC_ConfigChannel+0x464>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	61bb      	str	r3, [r7, #24]
  return result;
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002068:	2320      	movs	r3, #32
 800206a:	e003      	b.n	8002074 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	3301      	adds	r3, #1
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	2101      	movs	r1, #1
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	ea42 0103 	orr.w	r1, r2, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10d      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x490>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	0e9b      	lsrs	r3, r3, #26
 8002096:	3301      	adds	r3, #1
 8002098:	f003 021f 	and.w	r2, r3, #31
 800209c:	4613      	mov	r3, r2
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	3b1e      	subs	r3, #30
 80020a4:	051b      	lsls	r3, r3, #20
 80020a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020aa:	e01b      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x4c8>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	60fb      	str	r3, [r7, #12]
  return result;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80020c4:	2320      	movs	r3, #32
 80020c6:	e003      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	3301      	adds	r3, #1
 80020d2:	f003 021f 	and.w	r2, r3, #31
 80020d6:	4613      	mov	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	3b1e      	subs	r3, #30
 80020de:	051b      	lsls	r3, r3, #20
 80020e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020e4:	430b      	orrs	r3, r1
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	6892      	ldr	r2, [r2, #8]
 80020ea:	4619      	mov	r1, r3
 80020ec:	f7ff fb1c 	bl	8001728 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f280 80cf 	bge.w	8002298 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a06      	ldr	r2, [pc, #24]	@ (8002118 <HAL_ADC_ConfigChannel+0x4fc>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d004      	beq.n	800210e <HAL_ADC_ConfigChannel+0x4f2>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a04      	ldr	r2, [pc, #16]	@ (800211c <HAL_ADC_ConfigChannel+0x500>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d10a      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x508>
 800210e:	4b04      	ldr	r3, [pc, #16]	@ (8002120 <HAL_ADC_ConfigChannel+0x504>)
 8002110:	e009      	b.n	8002126 <HAL_ADC_ConfigChannel+0x50a>
 8002112:	bf00      	nop
 8002114:	47ff0000 	.word	0x47ff0000
 8002118:	40022000 	.word	0x40022000
 800211c:	40022100 	.word	0x40022100
 8002120:	40022300 	.word	0x40022300
 8002124:	4b61      	ldr	r3, [pc, #388]	@ (80022ac <HAL_ADC_ConfigChannel+0x690>)
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fa70 	bl	800160c <LL_ADC_GetCommonPathInternalCh>
 800212c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a5f      	ldr	r2, [pc, #380]	@ (80022b0 <HAL_ADC_ConfigChannel+0x694>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d004      	beq.n	8002142 <HAL_ADC_ConfigChannel+0x526>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a5d      	ldr	r2, [pc, #372]	@ (80022b4 <HAL_ADC_ConfigChannel+0x698>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d10e      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x544>
 8002142:	485b      	ldr	r0, [pc, #364]	@ (80022b0 <HAL_ADC_ConfigChannel+0x694>)
 8002144:	f7ff fb8e 	bl	8001864 <LL_ADC_IsEnabled>
 8002148:	4604      	mov	r4, r0
 800214a:	485a      	ldr	r0, [pc, #360]	@ (80022b4 <HAL_ADC_ConfigChannel+0x698>)
 800214c:	f7ff fb8a 	bl	8001864 <LL_ADC_IsEnabled>
 8002150:	4603      	mov	r3, r0
 8002152:	4323      	orrs	r3, r4
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	e008      	b.n	8002172 <HAL_ADC_ConfigChannel+0x556>
 8002160:	4855      	ldr	r0, [pc, #340]	@ (80022b8 <HAL_ADC_ConfigChannel+0x69c>)
 8002162:	f7ff fb7f 	bl	8001864 <LL_ADC_IsEnabled>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d07d      	beq.n	8002272 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a50      	ldr	r2, [pc, #320]	@ (80022bc <HAL_ADC_ConfigChannel+0x6a0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d130      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x5c6>
 8002180:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002182:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d12b      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a4a      	ldr	r2, [pc, #296]	@ (80022b8 <HAL_ADC_ConfigChannel+0x69c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	f040 8081 	bne.w	8002298 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a45      	ldr	r2, [pc, #276]	@ (80022b0 <HAL_ADC_ConfigChannel+0x694>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d004      	beq.n	80021aa <HAL_ADC_ConfigChannel+0x58e>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a43      	ldr	r2, [pc, #268]	@ (80022b4 <HAL_ADC_ConfigChannel+0x698>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d101      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x592>
 80021aa:	4a45      	ldr	r2, [pc, #276]	@ (80022c0 <HAL_ADC_ConfigChannel+0x6a4>)
 80021ac:	e000      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x594>
 80021ae:	4a3f      	ldr	r2, [pc, #252]	@ (80022ac <HAL_ADC_ConfigChannel+0x690>)
 80021b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021b6:	4619      	mov	r1, r3
 80021b8:	4610      	mov	r0, r2
 80021ba:	f7ff fa14 	bl	80015e6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021be:	4b41      	ldr	r3, [pc, #260]	@ (80022c4 <HAL_ADC_ConfigChannel+0x6a8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	099b      	lsrs	r3, r3, #6
 80021c4:	4a40      	ldr	r2, [pc, #256]	@ (80022c8 <HAL_ADC_ConfigChannel+0x6ac>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	099b      	lsrs	r3, r3, #6
 80021cc:	3301      	adds	r3, #1
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80021d2:	e002      	b.n	80021da <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f9      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021e0:	e05a      	b.n	8002298 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a39      	ldr	r2, [pc, #228]	@ (80022cc <HAL_ADC_ConfigChannel+0x6b0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d11e      	bne.n	800222a <HAL_ADC_ConfigChannel+0x60e>
 80021ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d119      	bne.n	800222a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a2f      	ldr	r2, [pc, #188]	@ (80022b8 <HAL_ADC_ConfigChannel+0x69c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d14b      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a2a      	ldr	r2, [pc, #168]	@ (80022b0 <HAL_ADC_ConfigChannel+0x694>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d004      	beq.n	8002214 <HAL_ADC_ConfigChannel+0x5f8>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a29      	ldr	r2, [pc, #164]	@ (80022b4 <HAL_ADC_ConfigChannel+0x698>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d101      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x5fc>
 8002214:	4a2a      	ldr	r2, [pc, #168]	@ (80022c0 <HAL_ADC_ConfigChannel+0x6a4>)
 8002216:	e000      	b.n	800221a <HAL_ADC_ConfigChannel+0x5fe>
 8002218:	4a24      	ldr	r2, [pc, #144]	@ (80022ac <HAL_ADC_ConfigChannel+0x690>)
 800221a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800221c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002220:	4619      	mov	r1, r3
 8002222:	4610      	mov	r0, r2
 8002224:	f7ff f9df 	bl	80015e6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002228:	e036      	b.n	8002298 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a28      	ldr	r2, [pc, #160]	@ (80022d0 <HAL_ADC_ConfigChannel+0x6b4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d131      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x67c>
 8002234:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d12c      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1d      	ldr	r2, [pc, #116]	@ (80022b8 <HAL_ADC_ConfigChannel+0x69c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d127      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a18      	ldr	r2, [pc, #96]	@ (80022b0 <HAL_ADC_ConfigChannel+0x694>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d004      	beq.n	800225c <HAL_ADC_ConfigChannel+0x640>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a17      	ldr	r2, [pc, #92]	@ (80022b4 <HAL_ADC_ConfigChannel+0x698>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d101      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x644>
 800225c:	4a18      	ldr	r2, [pc, #96]	@ (80022c0 <HAL_ADC_ConfigChannel+0x6a4>)
 800225e:	e000      	b.n	8002262 <HAL_ADC_ConfigChannel+0x646>
 8002260:	4a12      	ldr	r2, [pc, #72]	@ (80022ac <HAL_ADC_ConfigChannel+0x690>)
 8002262:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002264:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002268:	4619      	mov	r1, r3
 800226a:	4610      	mov	r0, r2
 800226c:	f7ff f9bb 	bl	80015e6 <LL_ADC_SetCommonPathInternalCh>
 8002270:	e012      	b.n	8002298 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002276:	f043 0220 	orr.w	r2, r3, #32
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002284:	e008      	b.n	8002298 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228a:	f043 0220 	orr.w	r2, r3, #32
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80022a0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3784      	adds	r7, #132	@ 0x84
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd90      	pop	{r4, r7, pc}
 80022ac:	58026300 	.word	0x58026300
 80022b0:	40022000 	.word	0x40022000
 80022b4:	40022100 	.word	0x40022100
 80022b8:	58026000 	.word	0x58026000
 80022bc:	cb840000 	.word	0xcb840000
 80022c0:	40022300 	.word	0x40022300
 80022c4:	24000000 	.word	0x24000000
 80022c8:	053e2d63 	.word	0x053e2d63
 80022cc:	c7520000 	.word	0xc7520000
 80022d0:	cfb80000 	.word	0xcfb80000

080022d4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a7a      	ldr	r2, [pc, #488]	@ (80024cc <ADC_ConfigureBoostMode+0x1f8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d004      	beq.n	80022f0 <ADC_ConfigureBoostMode+0x1c>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a79      	ldr	r2, [pc, #484]	@ (80024d0 <ADC_ConfigureBoostMode+0x1fc>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d109      	bne.n	8002304 <ADC_ConfigureBoostMode+0x30>
 80022f0:	4b78      	ldr	r3, [pc, #480]	@ (80024d4 <ADC_ConfigureBoostMode+0x200>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bf14      	ite	ne
 80022fc:	2301      	movne	r3, #1
 80022fe:	2300      	moveq	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	e008      	b.n	8002316 <ADC_ConfigureBoostMode+0x42>
 8002304:	4b74      	ldr	r3, [pc, #464]	@ (80024d8 <ADC_ConfigureBoostMode+0x204>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf14      	ite	ne
 8002310:	2301      	movne	r3, #1
 8002312:	2300      	moveq	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d01c      	beq.n	8002354 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800231a:	f002 f941 	bl	80045a0 <HAL_RCC_GetHCLKFreq>
 800231e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002328:	d010      	beq.n	800234c <ADC_ConfigureBoostMode+0x78>
 800232a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800232e:	d873      	bhi.n	8002418 <ADC_ConfigureBoostMode+0x144>
 8002330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002334:	d002      	beq.n	800233c <ADC_ConfigureBoostMode+0x68>
 8002336:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800233a:	d16d      	bne.n	8002418 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	0c1b      	lsrs	r3, r3, #16
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	fbb2 f3f3 	udiv	r3, r2, r3
 8002348:	60fb      	str	r3, [r7, #12]
        break;
 800234a:	e068      	b.n	800241e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	60fb      	str	r3, [r7, #12]
        break;
 8002352:	e064      	b.n	800241e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002354:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002358:	f04f 0100 	mov.w	r1, #0
 800235c:	f003 fb86 	bl	8005a6c <HAL_RCCEx_GetPeriphCLKFreq>
 8002360:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800236a:	d051      	beq.n	8002410 <ADC_ConfigureBoostMode+0x13c>
 800236c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002370:	d854      	bhi.n	800241c <ADC_ConfigureBoostMode+0x148>
 8002372:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002376:	d047      	beq.n	8002408 <ADC_ConfigureBoostMode+0x134>
 8002378:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800237c:	d84e      	bhi.n	800241c <ADC_ConfigureBoostMode+0x148>
 800237e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002382:	d03d      	beq.n	8002400 <ADC_ConfigureBoostMode+0x12c>
 8002384:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002388:	d848      	bhi.n	800241c <ADC_ConfigureBoostMode+0x148>
 800238a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800238e:	d033      	beq.n	80023f8 <ADC_ConfigureBoostMode+0x124>
 8002390:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002394:	d842      	bhi.n	800241c <ADC_ConfigureBoostMode+0x148>
 8002396:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800239a:	d029      	beq.n	80023f0 <ADC_ConfigureBoostMode+0x11c>
 800239c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80023a0:	d83c      	bhi.n	800241c <ADC_ConfigureBoostMode+0x148>
 80023a2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80023a6:	d01a      	beq.n	80023de <ADC_ConfigureBoostMode+0x10a>
 80023a8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80023ac:	d836      	bhi.n	800241c <ADC_ConfigureBoostMode+0x148>
 80023ae:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80023b2:	d014      	beq.n	80023de <ADC_ConfigureBoostMode+0x10a>
 80023b4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80023b8:	d830      	bhi.n	800241c <ADC_ConfigureBoostMode+0x148>
 80023ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023be:	d00e      	beq.n	80023de <ADC_ConfigureBoostMode+0x10a>
 80023c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023c4:	d82a      	bhi.n	800241c <ADC_ConfigureBoostMode+0x148>
 80023c6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80023ca:	d008      	beq.n	80023de <ADC_ConfigureBoostMode+0x10a>
 80023cc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80023d0:	d824      	bhi.n	800241c <ADC_ConfigureBoostMode+0x148>
 80023d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80023d6:	d002      	beq.n	80023de <ADC_ConfigureBoostMode+0x10a>
 80023d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80023dc:	d11e      	bne.n	800241c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	0c9b      	lsrs	r3, r3, #18
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ec:	60fb      	str	r3, [r7, #12]
        break;
 80023ee:	e016      	b.n	800241e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	60fb      	str	r3, [r7, #12]
        break;
 80023f6:	e012      	b.n	800241e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	60fb      	str	r3, [r7, #12]
        break;
 80023fe:	e00e      	b.n	800241e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	099b      	lsrs	r3, r3, #6
 8002404:	60fb      	str	r3, [r7, #12]
        break;
 8002406:	e00a      	b.n	800241e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	09db      	lsrs	r3, r3, #7
 800240c:	60fb      	str	r3, [r7, #12]
        break;
 800240e:	e006      	b.n	800241e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	60fb      	str	r3, [r7, #12]
        break;
 8002416:	e002      	b.n	800241e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002418:	bf00      	nop
 800241a:	e000      	b.n	800241e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800241c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800241e:	f7ff f8ad 	bl	800157c <HAL_GetREVID>
 8002422:	4603      	mov	r3, r0
 8002424:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002428:	4293      	cmp	r3, r2
 800242a:	d815      	bhi.n	8002458 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4a2b      	ldr	r2, [pc, #172]	@ (80024dc <ADC_ConfigureBoostMode+0x208>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d908      	bls.n	8002446 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002442:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002444:	e03e      	b.n	80024c4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002454:	609a      	str	r2, [r3, #8]
}
 8002456:	e035      	b.n	80024c4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	085b      	lsrs	r3, r3, #1
 800245c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4a1f      	ldr	r2, [pc, #124]	@ (80024e0 <ADC_ConfigureBoostMode+0x20c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d808      	bhi.n	8002478 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002474:	609a      	str	r2, [r3, #8]
}
 8002476:	e025      	b.n	80024c4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4a1a      	ldr	r2, [pc, #104]	@ (80024e4 <ADC_ConfigureBoostMode+0x210>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d80a      	bhi.n	8002496 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002492:	609a      	str	r2, [r3, #8]
}
 8002494:	e016      	b.n	80024c4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4a13      	ldr	r2, [pc, #76]	@ (80024e8 <ADC_ConfigureBoostMode+0x214>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d80a      	bhi.n	80024b4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024b0:	609a      	str	r2, [r3, #8]
}
 80024b2:	e007      	b.n	80024c4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80024c2:	609a      	str	r2, [r3, #8]
}
 80024c4:	bf00      	nop
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40022000 	.word	0x40022000
 80024d0:	40022100 	.word	0x40022100
 80024d4:	40022300 	.word	0x40022300
 80024d8:	58026300 	.word	0x58026300
 80024dc:	01312d00 	.word	0x01312d00
 80024e0:	005f5e10 	.word	0x005f5e10
 80024e4:	00bebc20 	.word	0x00bebc20
 80024e8:	017d7840 	.word	0x017d7840

080024ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024fc:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <__NVIC_SetPriorityGrouping+0x40>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002508:	4013      	ands	r3, r2
 800250a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002514:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <__NVIC_SetPriorityGrouping+0x44>)
 8002516:	4313      	orrs	r3, r2
 8002518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800251a:	4a04      	ldr	r2, [pc, #16]	@ (800252c <__NVIC_SetPriorityGrouping+0x40>)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	60d3      	str	r3, [r2, #12]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000ed00 	.word	0xe000ed00
 8002530:	05fa0000 	.word	0x05fa0000

08002534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002538:	4b04      	ldr	r3, [pc, #16]	@ (800254c <__NVIC_GetPriorityGrouping+0x18>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	0a1b      	lsrs	r3, r3, #8
 800253e:	f003 0307 	and.w	r3, r3, #7
}
 8002542:	4618      	mov	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800255a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800255e:	2b00      	cmp	r3, #0
 8002560:	db0b      	blt.n	800257a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002562:	88fb      	ldrh	r3, [r7, #6]
 8002564:	f003 021f 	and.w	r2, r3, #31
 8002568:	4907      	ldr	r1, [pc, #28]	@ (8002588 <__NVIC_EnableIRQ+0x38>)
 800256a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800256e:	095b      	lsrs	r3, r3, #5
 8002570:	2001      	movs	r0, #1
 8002572:	fa00 f202 	lsl.w	r2, r0, r2
 8002576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000e100 	.word	0xe000e100

0800258c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	6039      	str	r1, [r7, #0]
 8002596:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002598:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800259c:	2b00      	cmp	r3, #0
 800259e:	db0a      	blt.n	80025b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	490c      	ldr	r1, [pc, #48]	@ (80025d8 <__NVIC_SetPriority+0x4c>)
 80025a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025aa:	0112      	lsls	r2, r2, #4
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	440b      	add	r3, r1
 80025b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b4:	e00a      	b.n	80025cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4908      	ldr	r1, [pc, #32]	@ (80025dc <__NVIC_SetPriority+0x50>)
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	3b04      	subs	r3, #4
 80025c4:	0112      	lsls	r2, r2, #4
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	440b      	add	r3, r1
 80025ca:	761a      	strb	r2, [r3, #24]
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000e100 	.word	0xe000e100
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	@ 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f1c3 0307 	rsb	r3, r3, #7
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	bf28      	it	cs
 80025fe:	2304      	movcs	r3, #4
 8002600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3304      	adds	r3, #4
 8002606:	2b06      	cmp	r3, #6
 8002608:	d902      	bls.n	8002610 <NVIC_EncodePriority+0x30>
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3b03      	subs	r3, #3
 800260e:	e000      	b.n	8002612 <NVIC_EncodePriority+0x32>
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	f04f 32ff 	mov.w	r2, #4294967295
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43da      	mvns	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	401a      	ands	r2, r3
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002628:	f04f 31ff 	mov.w	r1, #4294967295
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	43d9      	mvns	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	4313      	orrs	r3, r2
         );
}
 800263a:	4618      	mov	r0, r3
 800263c:	3724      	adds	r7, #36	@ 0x24
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002658:	d301      	bcc.n	800265e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800265a:	2301      	movs	r3, #1
 800265c:	e00f      	b.n	800267e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800265e:	4a0a      	ldr	r2, [pc, #40]	@ (8002688 <SysTick_Config+0x40>)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002666:	210f      	movs	r1, #15
 8002668:	f04f 30ff 	mov.w	r0, #4294967295
 800266c:	f7ff ff8e 	bl	800258c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002670:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <SysTick_Config+0x40>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002676:	4b04      	ldr	r3, [pc, #16]	@ (8002688 <SysTick_Config+0x40>)
 8002678:	2207      	movs	r2, #7
 800267a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	e000e010 	.word	0xe000e010

0800268c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff ff29 	bl	80024ec <__NVIC_SetPriorityGrouping>
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	4603      	mov	r3, r0
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026b0:	f7ff ff40 	bl	8002534 <__NVIC_GetPriorityGrouping>
 80026b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	6978      	ldr	r0, [r7, #20]
 80026bc:	f7ff ff90 	bl	80025e0 <NVIC_EncodePriority>
 80026c0:	4602      	mov	r2, r0
 80026c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff5f 	bl	800258c <__NVIC_SetPriority>
}
 80026ce:	bf00      	nop
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff33 	bl	8002550 <__NVIC_EnableIRQ>
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff ffa4 	bl	8002648 <SysTick_Config>
 8002700:	4603      	mov	r3, r0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002714:	f7fe ff26 	bl	8001564 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e316      	b.n	8002d52 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a66      	ldr	r2, [pc, #408]	@ (80028c4 <HAL_DMA_Init+0x1b8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d04a      	beq.n	80027c4 <HAL_DMA_Init+0xb8>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a65      	ldr	r2, [pc, #404]	@ (80028c8 <HAL_DMA_Init+0x1bc>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d045      	beq.n	80027c4 <HAL_DMA_Init+0xb8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a63      	ldr	r2, [pc, #396]	@ (80028cc <HAL_DMA_Init+0x1c0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d040      	beq.n	80027c4 <HAL_DMA_Init+0xb8>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a62      	ldr	r2, [pc, #392]	@ (80028d0 <HAL_DMA_Init+0x1c4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d03b      	beq.n	80027c4 <HAL_DMA_Init+0xb8>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a60      	ldr	r2, [pc, #384]	@ (80028d4 <HAL_DMA_Init+0x1c8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d036      	beq.n	80027c4 <HAL_DMA_Init+0xb8>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a5f      	ldr	r2, [pc, #380]	@ (80028d8 <HAL_DMA_Init+0x1cc>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d031      	beq.n	80027c4 <HAL_DMA_Init+0xb8>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a5d      	ldr	r2, [pc, #372]	@ (80028dc <HAL_DMA_Init+0x1d0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d02c      	beq.n	80027c4 <HAL_DMA_Init+0xb8>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a5c      	ldr	r2, [pc, #368]	@ (80028e0 <HAL_DMA_Init+0x1d4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d027      	beq.n	80027c4 <HAL_DMA_Init+0xb8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a5a      	ldr	r2, [pc, #360]	@ (80028e4 <HAL_DMA_Init+0x1d8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d022      	beq.n	80027c4 <HAL_DMA_Init+0xb8>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a59      	ldr	r2, [pc, #356]	@ (80028e8 <HAL_DMA_Init+0x1dc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d01d      	beq.n	80027c4 <HAL_DMA_Init+0xb8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a57      	ldr	r2, [pc, #348]	@ (80028ec <HAL_DMA_Init+0x1e0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d018      	beq.n	80027c4 <HAL_DMA_Init+0xb8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a56      	ldr	r2, [pc, #344]	@ (80028f0 <HAL_DMA_Init+0x1e4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d013      	beq.n	80027c4 <HAL_DMA_Init+0xb8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a54      	ldr	r2, [pc, #336]	@ (80028f4 <HAL_DMA_Init+0x1e8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d00e      	beq.n	80027c4 <HAL_DMA_Init+0xb8>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a53      	ldr	r2, [pc, #332]	@ (80028f8 <HAL_DMA_Init+0x1ec>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d009      	beq.n	80027c4 <HAL_DMA_Init+0xb8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a51      	ldr	r2, [pc, #324]	@ (80028fc <HAL_DMA_Init+0x1f0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d004      	beq.n	80027c4 <HAL_DMA_Init+0xb8>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a50      	ldr	r2, [pc, #320]	@ (8002900 <HAL_DMA_Init+0x1f4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d101      	bne.n	80027c8 <HAL_DMA_Init+0xbc>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <HAL_DMA_Init+0xbe>
 80027c8:	2300      	movs	r3, #0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 813b 	beq.w	8002a46 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a37      	ldr	r2, [pc, #220]	@ (80028c4 <HAL_DMA_Init+0x1b8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d04a      	beq.n	8002880 <HAL_DMA_Init+0x174>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a36      	ldr	r2, [pc, #216]	@ (80028c8 <HAL_DMA_Init+0x1bc>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d045      	beq.n	8002880 <HAL_DMA_Init+0x174>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a34      	ldr	r2, [pc, #208]	@ (80028cc <HAL_DMA_Init+0x1c0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d040      	beq.n	8002880 <HAL_DMA_Init+0x174>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a33      	ldr	r2, [pc, #204]	@ (80028d0 <HAL_DMA_Init+0x1c4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d03b      	beq.n	8002880 <HAL_DMA_Init+0x174>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a31      	ldr	r2, [pc, #196]	@ (80028d4 <HAL_DMA_Init+0x1c8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d036      	beq.n	8002880 <HAL_DMA_Init+0x174>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a30      	ldr	r2, [pc, #192]	@ (80028d8 <HAL_DMA_Init+0x1cc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d031      	beq.n	8002880 <HAL_DMA_Init+0x174>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a2e      	ldr	r2, [pc, #184]	@ (80028dc <HAL_DMA_Init+0x1d0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d02c      	beq.n	8002880 <HAL_DMA_Init+0x174>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a2d      	ldr	r2, [pc, #180]	@ (80028e0 <HAL_DMA_Init+0x1d4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d027      	beq.n	8002880 <HAL_DMA_Init+0x174>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a2b      	ldr	r2, [pc, #172]	@ (80028e4 <HAL_DMA_Init+0x1d8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d022      	beq.n	8002880 <HAL_DMA_Init+0x174>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a2a      	ldr	r2, [pc, #168]	@ (80028e8 <HAL_DMA_Init+0x1dc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d01d      	beq.n	8002880 <HAL_DMA_Init+0x174>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a28      	ldr	r2, [pc, #160]	@ (80028ec <HAL_DMA_Init+0x1e0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d018      	beq.n	8002880 <HAL_DMA_Init+0x174>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a27      	ldr	r2, [pc, #156]	@ (80028f0 <HAL_DMA_Init+0x1e4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d013      	beq.n	8002880 <HAL_DMA_Init+0x174>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a25      	ldr	r2, [pc, #148]	@ (80028f4 <HAL_DMA_Init+0x1e8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d00e      	beq.n	8002880 <HAL_DMA_Init+0x174>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a24      	ldr	r2, [pc, #144]	@ (80028f8 <HAL_DMA_Init+0x1ec>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d009      	beq.n	8002880 <HAL_DMA_Init+0x174>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a22      	ldr	r2, [pc, #136]	@ (80028fc <HAL_DMA_Init+0x1f0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d004      	beq.n	8002880 <HAL_DMA_Init+0x174>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a21      	ldr	r2, [pc, #132]	@ (8002900 <HAL_DMA_Init+0x1f4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d108      	bne.n	8002892 <HAL_DMA_Init+0x186>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	e007      	b.n	80028a2 <HAL_DMA_Init+0x196>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0201 	bic.w	r2, r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028a2:	e02f      	b.n	8002904 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028a4:	f7fe fe5e 	bl	8001564 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b05      	cmp	r3, #5
 80028b0:	d928      	bls.n	8002904 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2203      	movs	r2, #3
 80028bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e246      	b.n	8002d52 <HAL_DMA_Init+0x646>
 80028c4:	40020010 	.word	0x40020010
 80028c8:	40020028 	.word	0x40020028
 80028cc:	40020040 	.word	0x40020040
 80028d0:	40020058 	.word	0x40020058
 80028d4:	40020070 	.word	0x40020070
 80028d8:	40020088 	.word	0x40020088
 80028dc:	400200a0 	.word	0x400200a0
 80028e0:	400200b8 	.word	0x400200b8
 80028e4:	40020410 	.word	0x40020410
 80028e8:	40020428 	.word	0x40020428
 80028ec:	40020440 	.word	0x40020440
 80028f0:	40020458 	.word	0x40020458
 80028f4:	40020470 	.word	0x40020470
 80028f8:	40020488 	.word	0x40020488
 80028fc:	400204a0 	.word	0x400204a0
 8002900:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1c8      	bne.n	80028a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4b83      	ldr	r3, [pc, #524]	@ (8002b2c <HAL_DMA_Init+0x420>)
 800291e:	4013      	ands	r3, r2
 8002920:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800292a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002936:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002942:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4313      	orrs	r3, r2
 800294e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	2b04      	cmp	r3, #4
 8002956:	d107      	bne.n	8002968 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002960:	4313      	orrs	r3, r2
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002968:	4b71      	ldr	r3, [pc, #452]	@ (8002b30 <HAL_DMA_Init+0x424>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b71      	ldr	r3, [pc, #452]	@ (8002b34 <HAL_DMA_Init+0x428>)
 800296e:	4013      	ands	r3, r2
 8002970:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002974:	d328      	bcc.n	80029c8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b28      	cmp	r3, #40	@ 0x28
 800297c:	d903      	bls.n	8002986 <HAL_DMA_Init+0x27a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b2e      	cmp	r3, #46	@ 0x2e
 8002984:	d917      	bls.n	80029b6 <HAL_DMA_Init+0x2aa>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b3e      	cmp	r3, #62	@ 0x3e
 800298c:	d903      	bls.n	8002996 <HAL_DMA_Init+0x28a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b42      	cmp	r3, #66	@ 0x42
 8002994:	d90f      	bls.n	80029b6 <HAL_DMA_Init+0x2aa>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b46      	cmp	r3, #70	@ 0x46
 800299c:	d903      	bls.n	80029a6 <HAL_DMA_Init+0x29a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b48      	cmp	r3, #72	@ 0x48
 80029a4:	d907      	bls.n	80029b6 <HAL_DMA_Init+0x2aa>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b4e      	cmp	r3, #78	@ 0x4e
 80029ac:	d905      	bls.n	80029ba <HAL_DMA_Init+0x2ae>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b52      	cmp	r3, #82	@ 0x52
 80029b4:	d801      	bhi.n	80029ba <HAL_DMA_Init+0x2ae>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_DMA_Init+0x2b0>
 80029ba:	2300      	movs	r3, #0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029c6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f023 0307 	bic.w	r3, r3, #7
 80029de:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d117      	bne.n	8002a22 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00e      	beq.n	8002a22 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fa8f 	bl	8002f28 <DMA_CheckFifoParam>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2240      	movs	r2, #64	@ 0x40
 8002a14:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e197      	b.n	8002d52 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f9ca 	bl	8002dc4 <DMA_CalcBaseAndBitshift>
 8002a30:	4603      	mov	r3, r0
 8002a32:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	223f      	movs	r2, #63	@ 0x3f
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	e0cd      	b.n	8002be2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a3b      	ldr	r2, [pc, #236]	@ (8002b38 <HAL_DMA_Init+0x42c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d022      	beq.n	8002a96 <HAL_DMA_Init+0x38a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a39      	ldr	r2, [pc, #228]	@ (8002b3c <HAL_DMA_Init+0x430>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d01d      	beq.n	8002a96 <HAL_DMA_Init+0x38a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a38      	ldr	r2, [pc, #224]	@ (8002b40 <HAL_DMA_Init+0x434>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d018      	beq.n	8002a96 <HAL_DMA_Init+0x38a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a36      	ldr	r2, [pc, #216]	@ (8002b44 <HAL_DMA_Init+0x438>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d013      	beq.n	8002a96 <HAL_DMA_Init+0x38a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a35      	ldr	r2, [pc, #212]	@ (8002b48 <HAL_DMA_Init+0x43c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d00e      	beq.n	8002a96 <HAL_DMA_Init+0x38a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a33      	ldr	r2, [pc, #204]	@ (8002b4c <HAL_DMA_Init+0x440>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d009      	beq.n	8002a96 <HAL_DMA_Init+0x38a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a32      	ldr	r2, [pc, #200]	@ (8002b50 <HAL_DMA_Init+0x444>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d004      	beq.n	8002a96 <HAL_DMA_Init+0x38a>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a30      	ldr	r2, [pc, #192]	@ (8002b54 <HAL_DMA_Init+0x448>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_DMA_Init+0x38e>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_DMA_Init+0x390>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8097 	beq.w	8002bd0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a24      	ldr	r2, [pc, #144]	@ (8002b38 <HAL_DMA_Init+0x42c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d021      	beq.n	8002af0 <HAL_DMA_Init+0x3e4>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a22      	ldr	r2, [pc, #136]	@ (8002b3c <HAL_DMA_Init+0x430>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d01c      	beq.n	8002af0 <HAL_DMA_Init+0x3e4>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a21      	ldr	r2, [pc, #132]	@ (8002b40 <HAL_DMA_Init+0x434>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d017      	beq.n	8002af0 <HAL_DMA_Init+0x3e4>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b44 <HAL_DMA_Init+0x438>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d012      	beq.n	8002af0 <HAL_DMA_Init+0x3e4>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a1e      	ldr	r2, [pc, #120]	@ (8002b48 <HAL_DMA_Init+0x43c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00d      	beq.n	8002af0 <HAL_DMA_Init+0x3e4>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b4c <HAL_DMA_Init+0x440>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d008      	beq.n	8002af0 <HAL_DMA_Init+0x3e4>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b50 <HAL_DMA_Init+0x444>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d003      	beq.n	8002af0 <HAL_DMA_Init+0x3e4>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a19      	ldr	r2, [pc, #100]	@ (8002b54 <HAL_DMA_Init+0x448>)
 8002aee:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	4b13      	ldr	r3, [pc, #76]	@ (8002b58 <HAL_DMA_Init+0x44c>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b40      	cmp	r3, #64	@ 0x40
 8002b16:	d021      	beq.n	8002b5c <HAL_DMA_Init+0x450>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b80      	cmp	r3, #128	@ 0x80
 8002b1e:	d102      	bne.n	8002b26 <HAL_DMA_Init+0x41a>
 8002b20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b24:	e01b      	b.n	8002b5e <HAL_DMA_Init+0x452>
 8002b26:	2300      	movs	r3, #0
 8002b28:	e019      	b.n	8002b5e <HAL_DMA_Init+0x452>
 8002b2a:	bf00      	nop
 8002b2c:	fe10803f 	.word	0xfe10803f
 8002b30:	5c001000 	.word	0x5c001000
 8002b34:	ffff0000 	.word	0xffff0000
 8002b38:	58025408 	.word	0x58025408
 8002b3c:	5802541c 	.word	0x5802541c
 8002b40:	58025430 	.word	0x58025430
 8002b44:	58025444 	.word	0x58025444
 8002b48:	58025458 	.word	0x58025458
 8002b4c:	5802546c 	.word	0x5802546c
 8002b50:	58025480 	.word	0x58025480
 8002b54:	58025494 	.word	0x58025494
 8002b58:	fffe000f 	.word	0xfffe000f
 8002b5c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	68d2      	ldr	r2, [r2, #12]
 8002b62:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b8c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b6e      	ldr	r3, [pc, #440]	@ (8002d5c <HAL_DMA_Init+0x650>)
 8002ba4:	4413      	add	r3, r2
 8002ba6:	4a6e      	ldr	r2, [pc, #440]	@ (8002d60 <HAL_DMA_Init+0x654>)
 8002ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	009a      	lsls	r2, r3, #2
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f905 	bl	8002dc4 <DMA_CalcBaseAndBitshift>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc2:	f003 031f 	and.w	r3, r3, #31
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	e008      	b.n	8002be2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2240      	movs	r2, #64	@ 0x40
 8002bd4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2203      	movs	r2, #3
 8002bda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e0b7      	b.n	8002d52 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a5f      	ldr	r2, [pc, #380]	@ (8002d64 <HAL_DMA_Init+0x658>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d072      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a5d      	ldr	r2, [pc, #372]	@ (8002d68 <HAL_DMA_Init+0x65c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d06d      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a5c      	ldr	r2, [pc, #368]	@ (8002d6c <HAL_DMA_Init+0x660>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d068      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a5a      	ldr	r2, [pc, #360]	@ (8002d70 <HAL_DMA_Init+0x664>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d063      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a59      	ldr	r2, [pc, #356]	@ (8002d74 <HAL_DMA_Init+0x668>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d05e      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a57      	ldr	r2, [pc, #348]	@ (8002d78 <HAL_DMA_Init+0x66c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d059      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a56      	ldr	r2, [pc, #344]	@ (8002d7c <HAL_DMA_Init+0x670>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d054      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a54      	ldr	r2, [pc, #336]	@ (8002d80 <HAL_DMA_Init+0x674>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d04f      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a53      	ldr	r2, [pc, #332]	@ (8002d84 <HAL_DMA_Init+0x678>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d04a      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a51      	ldr	r2, [pc, #324]	@ (8002d88 <HAL_DMA_Init+0x67c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d045      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a50      	ldr	r2, [pc, #320]	@ (8002d8c <HAL_DMA_Init+0x680>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d040      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a4e      	ldr	r2, [pc, #312]	@ (8002d90 <HAL_DMA_Init+0x684>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d03b      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a4d      	ldr	r2, [pc, #308]	@ (8002d94 <HAL_DMA_Init+0x688>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d036      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a4b      	ldr	r2, [pc, #300]	@ (8002d98 <HAL_DMA_Init+0x68c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d031      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a4a      	ldr	r2, [pc, #296]	@ (8002d9c <HAL_DMA_Init+0x690>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d02c      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a48      	ldr	r2, [pc, #288]	@ (8002da0 <HAL_DMA_Init+0x694>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d027      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a47      	ldr	r2, [pc, #284]	@ (8002da4 <HAL_DMA_Init+0x698>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d022      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a45      	ldr	r2, [pc, #276]	@ (8002da8 <HAL_DMA_Init+0x69c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01d      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a44      	ldr	r2, [pc, #272]	@ (8002dac <HAL_DMA_Init+0x6a0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d018      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a42      	ldr	r2, [pc, #264]	@ (8002db0 <HAL_DMA_Init+0x6a4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d013      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a41      	ldr	r2, [pc, #260]	@ (8002db4 <HAL_DMA_Init+0x6a8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d00e      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a3f      	ldr	r2, [pc, #252]	@ (8002db8 <HAL_DMA_Init+0x6ac>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d009      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a3e      	ldr	r2, [pc, #248]	@ (8002dbc <HAL_DMA_Init+0x6b0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d004      	beq.n	8002cd2 <HAL_DMA_Init+0x5c6>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a3c      	ldr	r2, [pc, #240]	@ (8002dc0 <HAL_DMA_Init+0x6b4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_DMA_Init+0x5ca>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <HAL_DMA_Init+0x5cc>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d032      	beq.n	8002d42 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f99f 	bl	8003020 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b80      	cmp	r3, #128	@ 0x80
 8002ce8:	d102      	bne.n	8002cf0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d04:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d010      	beq.n	8002d30 <HAL_DMA_Init+0x624>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d80c      	bhi.n	8002d30 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fa1c 	bl	8003154 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	e008      	b.n	8002d42 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	a7fdabf8 	.word	0xa7fdabf8
 8002d60:	cccccccd 	.word	0xcccccccd
 8002d64:	40020010 	.word	0x40020010
 8002d68:	40020028 	.word	0x40020028
 8002d6c:	40020040 	.word	0x40020040
 8002d70:	40020058 	.word	0x40020058
 8002d74:	40020070 	.word	0x40020070
 8002d78:	40020088 	.word	0x40020088
 8002d7c:	400200a0 	.word	0x400200a0
 8002d80:	400200b8 	.word	0x400200b8
 8002d84:	40020410 	.word	0x40020410
 8002d88:	40020428 	.word	0x40020428
 8002d8c:	40020440 	.word	0x40020440
 8002d90:	40020458 	.word	0x40020458
 8002d94:	40020470 	.word	0x40020470
 8002d98:	40020488 	.word	0x40020488
 8002d9c:	400204a0 	.word	0x400204a0
 8002da0:	400204b8 	.word	0x400204b8
 8002da4:	58025408 	.word	0x58025408
 8002da8:	5802541c 	.word	0x5802541c
 8002dac:	58025430 	.word	0x58025430
 8002db0:	58025444 	.word	0x58025444
 8002db4:	58025458 	.word	0x58025458
 8002db8:	5802546c 	.word	0x5802546c
 8002dbc:	58025480 	.word	0x58025480
 8002dc0:	58025494 	.word	0x58025494

08002dc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a42      	ldr	r2, [pc, #264]	@ (8002edc <DMA_CalcBaseAndBitshift+0x118>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d04a      	beq.n	8002e6c <DMA_CalcBaseAndBitshift+0xa8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a41      	ldr	r2, [pc, #260]	@ (8002ee0 <DMA_CalcBaseAndBitshift+0x11c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d045      	beq.n	8002e6c <DMA_CalcBaseAndBitshift+0xa8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a3f      	ldr	r2, [pc, #252]	@ (8002ee4 <DMA_CalcBaseAndBitshift+0x120>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d040      	beq.n	8002e6c <DMA_CalcBaseAndBitshift+0xa8>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a3e      	ldr	r2, [pc, #248]	@ (8002ee8 <DMA_CalcBaseAndBitshift+0x124>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d03b      	beq.n	8002e6c <DMA_CalcBaseAndBitshift+0xa8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a3c      	ldr	r2, [pc, #240]	@ (8002eec <DMA_CalcBaseAndBitshift+0x128>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d036      	beq.n	8002e6c <DMA_CalcBaseAndBitshift+0xa8>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a3b      	ldr	r2, [pc, #236]	@ (8002ef0 <DMA_CalcBaseAndBitshift+0x12c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d031      	beq.n	8002e6c <DMA_CalcBaseAndBitshift+0xa8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a39      	ldr	r2, [pc, #228]	@ (8002ef4 <DMA_CalcBaseAndBitshift+0x130>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d02c      	beq.n	8002e6c <DMA_CalcBaseAndBitshift+0xa8>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a38      	ldr	r2, [pc, #224]	@ (8002ef8 <DMA_CalcBaseAndBitshift+0x134>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d027      	beq.n	8002e6c <DMA_CalcBaseAndBitshift+0xa8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a36      	ldr	r2, [pc, #216]	@ (8002efc <DMA_CalcBaseAndBitshift+0x138>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d022      	beq.n	8002e6c <DMA_CalcBaseAndBitshift+0xa8>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a35      	ldr	r2, [pc, #212]	@ (8002f00 <DMA_CalcBaseAndBitshift+0x13c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d01d      	beq.n	8002e6c <DMA_CalcBaseAndBitshift+0xa8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a33      	ldr	r2, [pc, #204]	@ (8002f04 <DMA_CalcBaseAndBitshift+0x140>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d018      	beq.n	8002e6c <DMA_CalcBaseAndBitshift+0xa8>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a32      	ldr	r2, [pc, #200]	@ (8002f08 <DMA_CalcBaseAndBitshift+0x144>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d013      	beq.n	8002e6c <DMA_CalcBaseAndBitshift+0xa8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a30      	ldr	r2, [pc, #192]	@ (8002f0c <DMA_CalcBaseAndBitshift+0x148>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00e      	beq.n	8002e6c <DMA_CalcBaseAndBitshift+0xa8>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a2f      	ldr	r2, [pc, #188]	@ (8002f10 <DMA_CalcBaseAndBitshift+0x14c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d009      	beq.n	8002e6c <DMA_CalcBaseAndBitshift+0xa8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a2d      	ldr	r2, [pc, #180]	@ (8002f14 <DMA_CalcBaseAndBitshift+0x150>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d004      	beq.n	8002e6c <DMA_CalcBaseAndBitshift+0xa8>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a2c      	ldr	r2, [pc, #176]	@ (8002f18 <DMA_CalcBaseAndBitshift+0x154>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d101      	bne.n	8002e70 <DMA_CalcBaseAndBitshift+0xac>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <DMA_CalcBaseAndBitshift+0xae>
 8002e70:	2300      	movs	r3, #0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d024      	beq.n	8002ec0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	3b10      	subs	r3, #16
 8002e7e:	4a27      	ldr	r2, [pc, #156]	@ (8002f1c <DMA_CalcBaseAndBitshift+0x158>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	4a24      	ldr	r2, [pc, #144]	@ (8002f20 <DMA_CalcBaseAndBitshift+0x15c>)
 8002e90:	5cd3      	ldrb	r3, [r2, r3]
 8002e92:	461a      	mov	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d908      	bls.n	8002eb0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f24 <DMA_CalcBaseAndBitshift+0x160>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	1d1a      	adds	r2, r3, #4
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	659a      	str	r2, [r3, #88]	@ 0x58
 8002eae:	e00d      	b.n	8002ecc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f24 <DMA_CalcBaseAndBitshift+0x160>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ebe:	e005      	b.n	8002ecc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	40020010 	.word	0x40020010
 8002ee0:	40020028 	.word	0x40020028
 8002ee4:	40020040 	.word	0x40020040
 8002ee8:	40020058 	.word	0x40020058
 8002eec:	40020070 	.word	0x40020070
 8002ef0:	40020088 	.word	0x40020088
 8002ef4:	400200a0 	.word	0x400200a0
 8002ef8:	400200b8 	.word	0x400200b8
 8002efc:	40020410 	.word	0x40020410
 8002f00:	40020428 	.word	0x40020428
 8002f04:	40020440 	.word	0x40020440
 8002f08:	40020458 	.word	0x40020458
 8002f0c:	40020470 	.word	0x40020470
 8002f10:	40020488 	.word	0x40020488
 8002f14:	400204a0 	.word	0x400204a0
 8002f18:	400204b8 	.word	0x400204b8
 8002f1c:	aaaaaaab 	.word	0xaaaaaaab
 8002f20:	080085a4 	.word	0x080085a4
 8002f24:	fffffc00 	.word	0xfffffc00

08002f28 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d120      	bne.n	8002f7e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d858      	bhi.n	8002ff6 <DMA_CheckFifoParam+0xce>
 8002f44:	a201      	add	r2, pc, #4	@ (adr r2, 8002f4c <DMA_CheckFifoParam+0x24>)
 8002f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4a:	bf00      	nop
 8002f4c:	08002f5d 	.word	0x08002f5d
 8002f50:	08002f6f 	.word	0x08002f6f
 8002f54:	08002f5d 	.word	0x08002f5d
 8002f58:	08002ff7 	.word	0x08002ff7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d048      	beq.n	8002ffa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f6c:	e045      	b.n	8002ffa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f76:	d142      	bne.n	8002ffe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f7c:	e03f      	b.n	8002ffe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f86:	d123      	bne.n	8002fd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d838      	bhi.n	8003002 <DMA_CheckFifoParam+0xda>
 8002f90:	a201      	add	r2, pc, #4	@ (adr r2, 8002f98 <DMA_CheckFifoParam+0x70>)
 8002f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f96:	bf00      	nop
 8002f98:	08002fa9 	.word	0x08002fa9
 8002f9c:	08002faf 	.word	0x08002faf
 8002fa0:	08002fa9 	.word	0x08002fa9
 8002fa4:	08002fc1 	.word	0x08002fc1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
        break;
 8002fac:	e030      	b.n	8003010 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d025      	beq.n	8003006 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002fbe:	e022      	b.n	8003006 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fc8:	d11f      	bne.n	800300a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002fce:	e01c      	b.n	800300a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d902      	bls.n	8002fde <DMA_CheckFifoParam+0xb6>
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d003      	beq.n	8002fe4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002fdc:	e018      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	73fb      	strb	r3, [r7, #15]
        break;
 8002fe2:	e015      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00e      	beq.n	800300e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8002ff4:	e00b      	b.n	800300e <DMA_CheckFifoParam+0xe6>
        break;
 8002ff6:	bf00      	nop
 8002ff8:	e00a      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
        break;
 8002ffa:	bf00      	nop
 8002ffc:	e008      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
        break;
 8002ffe:	bf00      	nop
 8003000:	e006      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
        break;
 8003002:	bf00      	nop
 8003004:	e004      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
        break;
 8003006:	bf00      	nop
 8003008:	e002      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
        break;
 800300a:	bf00      	nop
 800300c:	e000      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
    break;
 800300e:	bf00      	nop
    }
  }

  return status;
 8003010:	7bfb      	ldrb	r3, [r7, #15]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop

08003020 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a38      	ldr	r2, [pc, #224]	@ (8003114 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d022      	beq.n	800307e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a36      	ldr	r2, [pc, #216]	@ (8003118 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d01d      	beq.n	800307e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a35      	ldr	r2, [pc, #212]	@ (800311c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d018      	beq.n	800307e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a33      	ldr	r2, [pc, #204]	@ (8003120 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d013      	beq.n	800307e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a32      	ldr	r2, [pc, #200]	@ (8003124 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00e      	beq.n	800307e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a30      	ldr	r2, [pc, #192]	@ (8003128 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d009      	beq.n	800307e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a2f      	ldr	r2, [pc, #188]	@ (800312c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d004      	beq.n	800307e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a2d      	ldr	r2, [pc, #180]	@ (8003130 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d101      	bne.n	8003082 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d01a      	beq.n	80030be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	3b08      	subs	r3, #8
 8003090:	4a28      	ldr	r2, [pc, #160]	@ (8003134 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	091b      	lsrs	r3, r3, #4
 8003098:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	4b26      	ldr	r3, [pc, #152]	@ (8003138 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	461a      	mov	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a24      	ldr	r2, [pc, #144]	@ (800313c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80030ac:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	2201      	movs	r2, #1
 80030b6:	409a      	lsls	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80030bc:	e024      	b.n	8003108 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	3b10      	subs	r3, #16
 80030c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003140 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003144 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d806      	bhi.n	80030e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4a1b      	ldr	r2, [pc, #108]	@ (8003148 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d902      	bls.n	80030e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	3308      	adds	r3, #8
 80030e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4b18      	ldr	r3, [pc, #96]	@ (800314c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	461a      	mov	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a16      	ldr	r2, [pc, #88]	@ (8003150 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80030f8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	2201      	movs	r2, #1
 8003102:	409a      	lsls	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	58025408 	.word	0x58025408
 8003118:	5802541c 	.word	0x5802541c
 800311c:	58025430 	.word	0x58025430
 8003120:	58025444 	.word	0x58025444
 8003124:	58025458 	.word	0x58025458
 8003128:	5802546c 	.word	0x5802546c
 800312c:	58025480 	.word	0x58025480
 8003130:	58025494 	.word	0x58025494
 8003134:	cccccccd 	.word	0xcccccccd
 8003138:	16009600 	.word	0x16009600
 800313c:	58025880 	.word	0x58025880
 8003140:	aaaaaaab 	.word	0xaaaaaaab
 8003144:	400204b8 	.word	0x400204b8
 8003148:	4002040f 	.word	0x4002040f
 800314c:	10008200 	.word	0x10008200
 8003150:	40020880 	.word	0x40020880

08003154 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d04a      	beq.n	8003200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b08      	cmp	r3, #8
 800316e:	d847      	bhi.n	8003200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a25      	ldr	r2, [pc, #148]	@ (800320c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d022      	beq.n	80031c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a24      	ldr	r2, [pc, #144]	@ (8003210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d01d      	beq.n	80031c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a22      	ldr	r2, [pc, #136]	@ (8003214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d018      	beq.n	80031c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a21      	ldr	r2, [pc, #132]	@ (8003218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d013      	beq.n	80031c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1f      	ldr	r2, [pc, #124]	@ (800321c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00e      	beq.n	80031c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d009      	beq.n	80031c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d004      	beq.n	80031c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d101      	bne.n	80031c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80031c4:	2300      	movs	r3, #0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4b17      	ldr	r3, [pc, #92]	@ (800322c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80031ce:	4413      	add	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	461a      	mov	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a15      	ldr	r2, [pc, #84]	@ (8003230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80031dc:	671a      	str	r2, [r3, #112]	@ 0x70
 80031de:	e009      	b.n	80031f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4b14      	ldr	r3, [pc, #80]	@ (8003234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	461a      	mov	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a11      	ldr	r2, [pc, #68]	@ (8003238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80031f2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	2201      	movs	r2, #1
 80031fa:	409a      	lsls	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	58025408 	.word	0x58025408
 8003210:	5802541c 	.word	0x5802541c
 8003214:	58025430 	.word	0x58025430
 8003218:	58025444 	.word	0x58025444
 800321c:	58025458 	.word	0x58025458
 8003220:	5802546c 	.word	0x5802546c
 8003224:	58025480 	.word	0x58025480
 8003228:	58025494 	.word	0x58025494
 800322c:	1600963f 	.word	0x1600963f
 8003230:	58025940 	.word	0x58025940
 8003234:	1000823f 	.word	0x1000823f
 8003238:	40020940 	.word	0x40020940

0800323c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800323c:	b480      	push	{r7}
 800323e:	b089      	sub	sp, #36	@ 0x24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003246:	2300      	movs	r3, #0
 8003248:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800324a:	4b89      	ldr	r3, [pc, #548]	@ (8003470 <HAL_GPIO_Init+0x234>)
 800324c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800324e:	e194      	b.n	800357a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	2101      	movs	r1, #1
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	fa01 f303 	lsl.w	r3, r1, r3
 800325c:	4013      	ands	r3, r2
 800325e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 8186 	beq.w	8003574 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d005      	beq.n	8003280 <HAL_GPIO_Init+0x44>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d130      	bne.n	80032e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	2203      	movs	r2, #3
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032b6:	2201      	movs	r2, #1
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4013      	ands	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	091b      	lsrs	r3, r3, #4
 80032cc:	f003 0201 	and.w	r2, r3, #1
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d017      	beq.n	800331e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	2203      	movs	r2, #3
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4013      	ands	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4313      	orrs	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d123      	bne.n	8003372 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	08da      	lsrs	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3208      	adds	r2, #8
 8003332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	220f      	movs	r2, #15
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4313      	orrs	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	08da      	lsrs	r2, r3, #3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3208      	adds	r2, #8
 800336c:	69b9      	ldr	r1, [r7, #24]
 800336e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	2203      	movs	r2, #3
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43db      	mvns	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 0203 	and.w	r2, r3, #3
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 80e0 	beq.w	8003574 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003474 <HAL_GPIO_Init+0x238>)
 80033b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80033ba:	4a2e      	ldr	r2, [pc, #184]	@ (8003474 <HAL_GPIO_Init+0x238>)
 80033bc:	f043 0302 	orr.w	r3, r3, #2
 80033c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80033c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003474 <HAL_GPIO_Init+0x238>)
 80033c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033d2:	4a29      	ldr	r2, [pc, #164]	@ (8003478 <HAL_GPIO_Init+0x23c>)
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	089b      	lsrs	r3, r3, #2
 80033d8:	3302      	adds	r3, #2
 80033da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	220f      	movs	r2, #15
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a20      	ldr	r2, [pc, #128]	@ (800347c <HAL_GPIO_Init+0x240>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d052      	beq.n	80034a4 <HAL_GPIO_Init+0x268>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a1f      	ldr	r2, [pc, #124]	@ (8003480 <HAL_GPIO_Init+0x244>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d031      	beq.n	800346a <HAL_GPIO_Init+0x22e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a1e      	ldr	r2, [pc, #120]	@ (8003484 <HAL_GPIO_Init+0x248>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d02b      	beq.n	8003466 <HAL_GPIO_Init+0x22a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a1d      	ldr	r2, [pc, #116]	@ (8003488 <HAL_GPIO_Init+0x24c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d025      	beq.n	8003462 <HAL_GPIO_Init+0x226>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a1c      	ldr	r2, [pc, #112]	@ (800348c <HAL_GPIO_Init+0x250>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d01f      	beq.n	800345e <HAL_GPIO_Init+0x222>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1b      	ldr	r2, [pc, #108]	@ (8003490 <HAL_GPIO_Init+0x254>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d019      	beq.n	800345a <HAL_GPIO_Init+0x21e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a1a      	ldr	r2, [pc, #104]	@ (8003494 <HAL_GPIO_Init+0x258>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d013      	beq.n	8003456 <HAL_GPIO_Init+0x21a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a19      	ldr	r2, [pc, #100]	@ (8003498 <HAL_GPIO_Init+0x25c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d00d      	beq.n	8003452 <HAL_GPIO_Init+0x216>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a18      	ldr	r2, [pc, #96]	@ (800349c <HAL_GPIO_Init+0x260>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d007      	beq.n	800344e <HAL_GPIO_Init+0x212>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a17      	ldr	r2, [pc, #92]	@ (80034a0 <HAL_GPIO_Init+0x264>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d101      	bne.n	800344a <HAL_GPIO_Init+0x20e>
 8003446:	2309      	movs	r3, #9
 8003448:	e02d      	b.n	80034a6 <HAL_GPIO_Init+0x26a>
 800344a:	230a      	movs	r3, #10
 800344c:	e02b      	b.n	80034a6 <HAL_GPIO_Init+0x26a>
 800344e:	2308      	movs	r3, #8
 8003450:	e029      	b.n	80034a6 <HAL_GPIO_Init+0x26a>
 8003452:	2307      	movs	r3, #7
 8003454:	e027      	b.n	80034a6 <HAL_GPIO_Init+0x26a>
 8003456:	2306      	movs	r3, #6
 8003458:	e025      	b.n	80034a6 <HAL_GPIO_Init+0x26a>
 800345a:	2305      	movs	r3, #5
 800345c:	e023      	b.n	80034a6 <HAL_GPIO_Init+0x26a>
 800345e:	2304      	movs	r3, #4
 8003460:	e021      	b.n	80034a6 <HAL_GPIO_Init+0x26a>
 8003462:	2303      	movs	r3, #3
 8003464:	e01f      	b.n	80034a6 <HAL_GPIO_Init+0x26a>
 8003466:	2302      	movs	r3, #2
 8003468:	e01d      	b.n	80034a6 <HAL_GPIO_Init+0x26a>
 800346a:	2301      	movs	r3, #1
 800346c:	e01b      	b.n	80034a6 <HAL_GPIO_Init+0x26a>
 800346e:	bf00      	nop
 8003470:	58000080 	.word	0x58000080
 8003474:	58024400 	.word	0x58024400
 8003478:	58000400 	.word	0x58000400
 800347c:	58020000 	.word	0x58020000
 8003480:	58020400 	.word	0x58020400
 8003484:	58020800 	.word	0x58020800
 8003488:	58020c00 	.word	0x58020c00
 800348c:	58021000 	.word	0x58021000
 8003490:	58021400 	.word	0x58021400
 8003494:	58021800 	.word	0x58021800
 8003498:	58021c00 	.word	0x58021c00
 800349c:	58022000 	.word	0x58022000
 80034a0:	58022400 	.word	0x58022400
 80034a4:	2300      	movs	r3, #0
 80034a6:	69fa      	ldr	r2, [r7, #28]
 80034a8:	f002 0203 	and.w	r2, r2, #3
 80034ac:	0092      	lsls	r2, r2, #2
 80034ae:	4093      	lsls	r3, r2
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034b6:	4938      	ldr	r1, [pc, #224]	@ (8003598 <HAL_GPIO_Init+0x35c>)
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	089b      	lsrs	r3, r3, #2
 80034bc:	3302      	adds	r3, #2
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	43db      	mvns	r3, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4013      	ands	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80034ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003518:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	43db      	mvns	r3, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4013      	ands	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	43db      	mvns	r3, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4013      	ands	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4313      	orrs	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	3301      	adds	r3, #1
 8003578:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	f47f ae63 	bne.w	8003250 <HAL_GPIO_Init+0x14>
  }
}
 800358a:	bf00      	nop
 800358c:	bf00      	nop
 800358e:	3724      	adds	r7, #36	@ 0x24
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	58000400 	.word	0x58000400

0800359c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	807b      	strh	r3, [r7, #2]
 80035a8:	4613      	mov	r3, r2
 80035aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035ac:	787b      	ldrb	r3, [r7, #1]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035b2:	887a      	ldrh	r2, [r7, #2]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80035b8:	e003      	b.n	80035c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80035ba:	887b      	ldrh	r3, [r7, #2]
 80035bc:	041a      	lsls	r2, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	619a      	str	r2, [r3, #24]
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	4603      	mov	r3, r0
 80035d6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80035d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d008      	beq.n	80035fa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 f804 	bl	8003602 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	4603      	mov	r3, r0
 800360a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003620:	4b19      	ldr	r3, [pc, #100]	@ (8003688 <HAL_PWREx_ConfigSupply+0x70>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b04      	cmp	r3, #4
 800362a:	d00a      	beq.n	8003642 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800362c:	4b16      	ldr	r3, [pc, #88]	@ (8003688 <HAL_PWREx_ConfigSupply+0x70>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	429a      	cmp	r2, r3
 8003638:	d001      	beq.n	800363e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e01f      	b.n	800367e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e01d      	b.n	800367e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003642:	4b11      	ldr	r3, [pc, #68]	@ (8003688 <HAL_PWREx_ConfigSupply+0x70>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f023 0207 	bic.w	r2, r3, #7
 800364a:	490f      	ldr	r1, [pc, #60]	@ (8003688 <HAL_PWREx_ConfigSupply+0x70>)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4313      	orrs	r3, r2
 8003650:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003652:	f7fd ff87 	bl	8001564 <HAL_GetTick>
 8003656:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003658:	e009      	b.n	800366e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800365a:	f7fd ff83 	bl	8001564 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003668:	d901      	bls.n	800366e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e007      	b.n	800367e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800366e:	4b06      	ldr	r3, [pc, #24]	@ (8003688 <HAL_PWREx_ConfigSupply+0x70>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800367a:	d1ee      	bne.n	800365a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	58024800 	.word	0x58024800

0800368c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08c      	sub	sp, #48	@ 0x30
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d102      	bne.n	80036a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	f000 bc48 	b.w	8003f30 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 8088 	beq.w	80037be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ae:	4b99      	ldr	r3, [pc, #612]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036b8:	4b96      	ldr	r3, [pc, #600]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 80036ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80036be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036c0:	2b10      	cmp	r3, #16
 80036c2:	d007      	beq.n	80036d4 <HAL_RCC_OscConfig+0x48>
 80036c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036c6:	2b18      	cmp	r3, #24
 80036c8:	d111      	bne.n	80036ee <HAL_RCC_OscConfig+0x62>
 80036ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d10c      	bne.n	80036ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d4:	4b8f      	ldr	r3, [pc, #572]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d06d      	beq.n	80037bc <HAL_RCC_OscConfig+0x130>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d169      	bne.n	80037bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f000 bc21 	b.w	8003f30 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036f6:	d106      	bne.n	8003706 <HAL_RCC_OscConfig+0x7a>
 80036f8:	4b86      	ldr	r3, [pc, #536]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a85      	ldr	r2, [pc, #532]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 80036fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	e02e      	b.n	8003764 <HAL_RCC_OscConfig+0xd8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10c      	bne.n	8003728 <HAL_RCC_OscConfig+0x9c>
 800370e:	4b81      	ldr	r3, [pc, #516]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a80      	ldr	r2, [pc, #512]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 8003714:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	4b7e      	ldr	r3, [pc, #504]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a7d      	ldr	r2, [pc, #500]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 8003720:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	e01d      	b.n	8003764 <HAL_RCC_OscConfig+0xd8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003730:	d10c      	bne.n	800374c <HAL_RCC_OscConfig+0xc0>
 8003732:	4b78      	ldr	r3, [pc, #480]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a77      	ldr	r2, [pc, #476]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 8003738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	4b75      	ldr	r3, [pc, #468]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a74      	ldr	r2, [pc, #464]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 8003744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	e00b      	b.n	8003764 <HAL_RCC_OscConfig+0xd8>
 800374c:	4b71      	ldr	r3, [pc, #452]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a70      	ldr	r2, [pc, #448]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 8003752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	4b6e      	ldr	r3, [pc, #440]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a6d      	ldr	r2, [pc, #436]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 800375e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d013      	beq.n	8003794 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376c:	f7fd fefa 	bl	8001564 <HAL_GetTick>
 8003770:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003774:	f7fd fef6 	bl	8001564 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	@ 0x64
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e3d4      	b.n	8003f30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003786:	4b63      	ldr	r3, [pc, #396]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0xe8>
 8003792:	e014      	b.n	80037be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7fd fee6 	bl	8001564 <HAL_GetTick>
 8003798:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800379c:	f7fd fee2 	bl	8001564 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b64      	cmp	r3, #100	@ 0x64
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e3c0      	b.n	8003f30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037ae:	4b59      	ldr	r3, [pc, #356]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f0      	bne.n	800379c <HAL_RCC_OscConfig+0x110>
 80037ba:	e000      	b.n	80037be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 80ca 	beq.w	8003960 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037cc:	4b51      	ldr	r3, [pc, #324]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037d6:	4b4f      	ldr	r3, [pc, #316]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 80037d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037da:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <HAL_RCC_OscConfig+0x166>
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	2b18      	cmp	r3, #24
 80037e6:	d156      	bne.n	8003896 <HAL_RCC_OscConfig+0x20a>
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d151      	bne.n	8003896 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037f2:	4b48      	ldr	r3, [pc, #288]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <HAL_RCC_OscConfig+0x17e>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e392      	b.n	8003f30 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800380a:	4b42      	ldr	r3, [pc, #264]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 0219 	bic.w	r2, r3, #25
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	493f      	ldr	r1, [pc, #252]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 8003818:	4313      	orrs	r3, r2
 800381a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381c:	f7fd fea2 	bl	8001564 <HAL_GetTick>
 8003820:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003824:	f7fd fe9e 	bl	8001564 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e37c      	b.n	8003f30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003836:	4b37      	ldr	r3, [pc, #220]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003842:	f7fd fe9b 	bl	800157c <HAL_GetREVID>
 8003846:	4603      	mov	r3, r0
 8003848:	f241 0203 	movw	r2, #4099	@ 0x1003
 800384c:	4293      	cmp	r3, r2
 800384e:	d817      	bhi.n	8003880 <HAL_RCC_OscConfig+0x1f4>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	2b40      	cmp	r3, #64	@ 0x40
 8003856:	d108      	bne.n	800386a <HAL_RCC_OscConfig+0x1de>
 8003858:	4b2e      	ldr	r3, [pc, #184]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003860:	4a2c      	ldr	r2, [pc, #176]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 8003862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003866:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003868:	e07a      	b.n	8003960 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386a:	4b2a      	ldr	r3, [pc, #168]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	031b      	lsls	r3, r3, #12
 8003878:	4926      	ldr	r1, [pc, #152]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 800387a:	4313      	orrs	r3, r2
 800387c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800387e:	e06f      	b.n	8003960 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003880:	4b24      	ldr	r3, [pc, #144]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	061b      	lsls	r3, r3, #24
 800388e:	4921      	ldr	r1, [pc, #132]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003894:	e064      	b.n	8003960 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d047      	beq.n	800392e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800389e:	4b1d      	ldr	r3, [pc, #116]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f023 0219 	bic.w	r2, r3, #25
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	491a      	ldr	r1, [pc, #104]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fd fe58 	bl	8001564 <HAL_GetTick>
 80038b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b8:	f7fd fe54 	bl	8001564 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e332      	b.n	8003f30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038ca:	4b12      	ldr	r3, [pc, #72]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d6:	f7fd fe51 	bl	800157c <HAL_GetREVID>
 80038da:	4603      	mov	r3, r0
 80038dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d819      	bhi.n	8003918 <HAL_RCC_OscConfig+0x28c>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	2b40      	cmp	r3, #64	@ 0x40
 80038ea:	d108      	bne.n	80038fe <HAL_RCC_OscConfig+0x272>
 80038ec:	4b09      	ldr	r3, [pc, #36]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80038f4:	4a07      	ldr	r2, [pc, #28]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 80038f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038fa:	6053      	str	r3, [r2, #4]
 80038fc:	e030      	b.n	8003960 <HAL_RCC_OscConfig+0x2d4>
 80038fe:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	031b      	lsls	r3, r3, #12
 800390c:	4901      	ldr	r1, [pc, #4]	@ (8003914 <HAL_RCC_OscConfig+0x288>)
 800390e:	4313      	orrs	r3, r2
 8003910:	604b      	str	r3, [r1, #4]
 8003912:	e025      	b.n	8003960 <HAL_RCC_OscConfig+0x2d4>
 8003914:	58024400 	.word	0x58024400
 8003918:	4b9a      	ldr	r3, [pc, #616]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	061b      	lsls	r3, r3, #24
 8003926:	4997      	ldr	r1, [pc, #604]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]
 800392c:	e018      	b.n	8003960 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800392e:	4b95      	ldr	r3, [pc, #596]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a94      	ldr	r2, [pc, #592]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003934:	f023 0301 	bic.w	r3, r3, #1
 8003938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393a:	f7fd fe13 	bl	8001564 <HAL_GetTick>
 800393e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003942:	f7fd fe0f 	bl	8001564 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e2ed      	b.n	8003f30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003954:	4b8b      	ldr	r3, [pc, #556]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f0      	bne.n	8003942 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80a9 	beq.w	8003ac0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800396e:	4b85      	ldr	r3, [pc, #532]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003976:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003978:	4b82      	ldr	r3, [pc, #520]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 800397a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800397c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b08      	cmp	r3, #8
 8003982:	d007      	beq.n	8003994 <HAL_RCC_OscConfig+0x308>
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	2b18      	cmp	r3, #24
 8003988:	d13a      	bne.n	8003a00 <HAL_RCC_OscConfig+0x374>
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d135      	bne.n	8003a00 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003994:	4b7b      	ldr	r3, [pc, #492]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <HAL_RCC_OscConfig+0x320>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	2b80      	cmp	r3, #128	@ 0x80
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e2c1      	b.n	8003f30 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039ac:	f7fd fde6 	bl	800157c <HAL_GetREVID>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d817      	bhi.n	80039ea <HAL_RCC_OscConfig+0x35e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d108      	bne.n	80039d4 <HAL_RCC_OscConfig+0x348>
 80039c2:	4b70      	ldr	r3, [pc, #448]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80039ca:	4a6e      	ldr	r2, [pc, #440]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 80039cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80039d0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039d2:	e075      	b.n	8003ac0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	069b      	lsls	r3, r3, #26
 80039e2:	4968      	ldr	r1, [pc, #416]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039e8:	e06a      	b.n	8003ac0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039ea:	4b66      	ldr	r3, [pc, #408]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	061b      	lsls	r3, r3, #24
 80039f8:	4962      	ldr	r1, [pc, #392]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039fe:	e05f      	b.n	8003ac0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d042      	beq.n	8003a8e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a08:	4b5e      	ldr	r3, [pc, #376]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a5d      	ldr	r2, [pc, #372]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a14:	f7fd fda6 	bl	8001564 <HAL_GetTick>
 8003a18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a1c:	f7fd fda2 	bl	8001564 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e280      	b.n	8003f30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a2e:	4b55      	ldr	r3, [pc, #340]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a3a:	f7fd fd9f 	bl	800157c <HAL_GetREVID>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d817      	bhi.n	8003a78 <HAL_RCC_OscConfig+0x3ec>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d108      	bne.n	8003a62 <HAL_RCC_OscConfig+0x3d6>
 8003a50:	4b4c      	ldr	r3, [pc, #304]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003a58:	4a4a      	ldr	r2, [pc, #296]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003a5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a5e:	6053      	str	r3, [r2, #4]
 8003a60:	e02e      	b.n	8003ac0 <HAL_RCC_OscConfig+0x434>
 8003a62:	4b48      	ldr	r3, [pc, #288]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	069b      	lsls	r3, r3, #26
 8003a70:	4944      	ldr	r1, [pc, #272]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	604b      	str	r3, [r1, #4]
 8003a76:	e023      	b.n	8003ac0 <HAL_RCC_OscConfig+0x434>
 8003a78:	4b42      	ldr	r3, [pc, #264]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	061b      	lsls	r3, r3, #24
 8003a86:	493f      	ldr	r1, [pc, #252]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60cb      	str	r3, [r1, #12]
 8003a8c:	e018      	b.n	8003ac0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a8e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a3c      	ldr	r2, [pc, #240]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003a94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9a:	f7fd fd63 	bl	8001564 <HAL_GetTick>
 8003a9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003aa2:	f7fd fd5f 	bl	8001564 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e23d      	b.n	8003f30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ab4:	4b33      	ldr	r3, [pc, #204]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1f0      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d036      	beq.n	8003b3a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d019      	beq.n	8003b08 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003ad6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ad8:	4a2a      	ldr	r2, [pc, #168]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003ada:	f043 0301 	orr.w	r3, r3, #1
 8003ade:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae0:	f7fd fd40 	bl	8001564 <HAL_GetTick>
 8003ae4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae8:	f7fd fd3c 	bl	8001564 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e21a      	b.n	8003f30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003afa:	4b22      	ldr	r3, [pc, #136]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x45c>
 8003b06:	e018      	b.n	8003b3a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b08:	4b1e      	ldr	r3, [pc, #120]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003b0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
 8003b12:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fd fd26 	bl	8001564 <HAL_GetTick>
 8003b18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b1c:	f7fd fd22 	bl	8001564 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e200      	b.n	8003f30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b2e:	4b15      	ldr	r3, [pc, #84]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003b30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d039      	beq.n	8003bba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01c      	beq.n	8003b88 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a0c      	ldr	r2, [pc, #48]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003b54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b5a:	f7fd fd03 	bl	8001564 <HAL_GetTick>
 8003b5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b62:	f7fd fcff 	bl	8001564 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e1dd      	b.n	8003f30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b74:	4b03      	ldr	r3, [pc, #12]	@ (8003b84 <HAL_RCC_OscConfig+0x4f8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x4d6>
 8003b80:	e01b      	b.n	8003bba <HAL_RCC_OscConfig+0x52e>
 8003b82:	bf00      	nop
 8003b84:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b88:	4b9b      	ldr	r3, [pc, #620]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a9a      	ldr	r2, [pc, #616]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003b8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b92:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b94:	f7fd fce6 	bl	8001564 <HAL_GetTick>
 8003b98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b9c:	f7fd fce2 	bl	8001564 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e1c0      	b.n	8003f30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bae:	4b92      	ldr	r3, [pc, #584]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 8081 	beq.w	8003cca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bc8:	4b8c      	ldr	r3, [pc, #560]	@ (8003dfc <HAL_RCC_OscConfig+0x770>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a8b      	ldr	r2, [pc, #556]	@ (8003dfc <HAL_RCC_OscConfig+0x770>)
 8003bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bd4:	f7fd fcc6 	bl	8001564 <HAL_GetTick>
 8003bd8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bdc:	f7fd fcc2 	bl	8001564 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	@ 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e1a0      	b.n	8003f30 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bee:	4b83      	ldr	r3, [pc, #524]	@ (8003dfc <HAL_RCC_OscConfig+0x770>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d106      	bne.n	8003c10 <HAL_RCC_OscConfig+0x584>
 8003c02:	4b7d      	ldr	r3, [pc, #500]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c06:	4a7c      	ldr	r2, [pc, #496]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c0e:	e02d      	b.n	8003c6c <HAL_RCC_OscConfig+0x5e0>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10c      	bne.n	8003c32 <HAL_RCC_OscConfig+0x5a6>
 8003c18:	4b77      	ldr	r3, [pc, #476]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1c:	4a76      	ldr	r2, [pc, #472]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c24:	4b74      	ldr	r3, [pc, #464]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c28:	4a73      	ldr	r2, [pc, #460]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003c2a:	f023 0304 	bic.w	r3, r3, #4
 8003c2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c30:	e01c      	b.n	8003c6c <HAL_RCC_OscConfig+0x5e0>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b05      	cmp	r3, #5
 8003c38:	d10c      	bne.n	8003c54 <HAL_RCC_OscConfig+0x5c8>
 8003c3a:	4b6f      	ldr	r3, [pc, #444]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3e:	4a6e      	ldr	r2, [pc, #440]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003c40:	f043 0304 	orr.w	r3, r3, #4
 8003c44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c46:	4b6c      	ldr	r3, [pc, #432]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4a:	4a6b      	ldr	r2, [pc, #428]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c52:	e00b      	b.n	8003c6c <HAL_RCC_OscConfig+0x5e0>
 8003c54:	4b68      	ldr	r3, [pc, #416]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c58:	4a67      	ldr	r2, [pc, #412]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003c5a:	f023 0301 	bic.w	r3, r3, #1
 8003c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c60:	4b65      	ldr	r3, [pc, #404]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c64:	4a64      	ldr	r2, [pc, #400]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003c66:	f023 0304 	bic.w	r3, r3, #4
 8003c6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d015      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c74:	f7fd fc76 	bl	8001564 <HAL_GetTick>
 8003c78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7c:	f7fd fc72 	bl	8001564 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e14e      	b.n	8003f30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c92:	4b59      	ldr	r3, [pc, #356]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0ee      	beq.n	8003c7c <HAL_RCC_OscConfig+0x5f0>
 8003c9e:	e014      	b.n	8003cca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca0:	f7fd fc60 	bl	8001564 <HAL_GetTick>
 8003ca4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ca6:	e00a      	b.n	8003cbe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca8:	f7fd fc5c 	bl	8001564 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e138      	b.n	8003f30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cbe:	4b4e      	ldr	r3, [pc, #312]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1ee      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 812d 	beq.w	8003f2e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003cd4:	4b48      	ldr	r3, [pc, #288]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cdc:	2b18      	cmp	r3, #24
 8003cde:	f000 80bd 	beq.w	8003e5c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	f040 809e 	bne.w	8003e28 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cec:	4b42      	ldr	r3, [pc, #264]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a41      	ldr	r2, [pc, #260]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003cf2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fd fc34 	bl	8001564 <HAL_GetTick>
 8003cfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fd fc30 	bl	8001564 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e10e      	b.n	8003f30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d12:	4b39      	ldr	r3, [pc, #228]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d1e:	4b36      	ldr	r3, [pc, #216]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003d20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d22:	4b37      	ldr	r3, [pc, #220]	@ (8003e00 <HAL_RCC_OscConfig+0x774>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d2e:	0112      	lsls	r2, r2, #4
 8003d30:	430a      	orrs	r2, r1
 8003d32:	4931      	ldr	r1, [pc, #196]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	628b      	str	r3, [r1, #40]	@ 0x28
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d46:	3b01      	subs	r3, #1
 8003d48:	025b      	lsls	r3, r3, #9
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d52:	3b01      	subs	r3, #1
 8003d54:	041b      	lsls	r3, r3, #16
 8003d56:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d60:	3b01      	subs	r3, #1
 8003d62:	061b      	lsls	r3, r3, #24
 8003d64:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003d68:	4923      	ldr	r1, [pc, #140]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003d6e:	4b22      	ldr	r3, [pc, #136]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d72:	4a21      	ldr	r2, [pc, #132]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d7e:	4b21      	ldr	r3, [pc, #132]	@ (8003e04 <HAL_RCC_OscConfig+0x778>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d86:	00d2      	lsls	r2, r2, #3
 8003d88:	491b      	ldr	r1, [pc, #108]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d92:	f023 020c 	bic.w	r2, r3, #12
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9a:	4917      	ldr	r1, [pc, #92]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003da0:	4b15      	ldr	r3, [pc, #84]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da4:	f023 0202 	bic.w	r2, r3, #2
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dac:	4912      	ldr	r1, [pc, #72]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003db2:	4b11      	ldr	r3, [pc, #68]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	4a10      	ldr	r2, [pc, #64]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc2:	4a0d      	ldr	r2, [pc, #52]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003dca:	4b0b      	ldr	r3, [pc, #44]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dce:	4a0a      	ldr	r2, [pc, #40]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003dd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003dd6:	4b08      	ldr	r3, [pc, #32]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dda:	4a07      	ldr	r2, [pc, #28]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de2:	4b05      	ldr	r3, [pc, #20]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a04      	ldr	r2, [pc, #16]	@ (8003df8 <HAL_RCC_OscConfig+0x76c>)
 8003de8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dee:	f7fd fbb9 	bl	8001564 <HAL_GetTick>
 8003df2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003df4:	e011      	b.n	8003e1a <HAL_RCC_OscConfig+0x78e>
 8003df6:	bf00      	nop
 8003df8:	58024400 	.word	0x58024400
 8003dfc:	58024800 	.word	0x58024800
 8003e00:	fffffc0c 	.word	0xfffffc0c
 8003e04:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e08:	f7fd fbac 	bl	8001564 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e08a      	b.n	8003f30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e1a:	4b47      	ldr	r3, [pc, #284]	@ (8003f38 <HAL_RCC_OscConfig+0x8ac>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x77c>
 8003e26:	e082      	b.n	8003f2e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e28:	4b43      	ldr	r3, [pc, #268]	@ (8003f38 <HAL_RCC_OscConfig+0x8ac>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a42      	ldr	r2, [pc, #264]	@ (8003f38 <HAL_RCC_OscConfig+0x8ac>)
 8003e2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fd fb96 	bl	8001564 <HAL_GetTick>
 8003e38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e3c:	f7fd fb92 	bl	8001564 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e070      	b.n	8003f30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e4e:	4b3a      	ldr	r3, [pc, #232]	@ (8003f38 <HAL_RCC_OscConfig+0x8ac>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x7b0>
 8003e5a:	e068      	b.n	8003f2e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e5c:	4b36      	ldr	r3, [pc, #216]	@ (8003f38 <HAL_RCC_OscConfig+0x8ac>)
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e60:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e62:	4b35      	ldr	r3, [pc, #212]	@ (8003f38 <HAL_RCC_OscConfig+0x8ac>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e66:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d031      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f003 0203 	and.w	r2, r3, #3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d12a      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d122      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e98:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d11a      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	0a5b      	lsrs	r3, r3, #9
 8003ea2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eaa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d111      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	0c1b      	lsrs	r3, r3, #16
 8003eb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ebc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d108      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	0e1b      	lsrs	r3, r3, #24
 8003ec6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ece:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d001      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e02b      	b.n	8003f30 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003ed8:	4b17      	ldr	r3, [pc, #92]	@ (8003f38 <HAL_RCC_OscConfig+0x8ac>)
 8003eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003edc:	08db      	lsrs	r3, r3, #3
 8003ede:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ee2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d01f      	beq.n	8003f2e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003eee:	4b12      	ldr	r3, [pc, #72]	@ (8003f38 <HAL_RCC_OscConfig+0x8ac>)
 8003ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef2:	4a11      	ldr	r2, [pc, #68]	@ (8003f38 <HAL_RCC_OscConfig+0x8ac>)
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003efa:	f7fd fb33 	bl	8001564 <HAL_GetTick>
 8003efe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003f00:	bf00      	nop
 8003f02:	f7fd fb2f 	bl	8001564 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d0f9      	beq.n	8003f02 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f38 <HAL_RCC_OscConfig+0x8ac>)
 8003f10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f12:	4b0a      	ldr	r3, [pc, #40]	@ (8003f3c <HAL_RCC_OscConfig+0x8b0>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f1a:	00d2      	lsls	r2, r2, #3
 8003f1c:	4906      	ldr	r1, [pc, #24]	@ (8003f38 <HAL_RCC_OscConfig+0x8ac>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003f22:	4b05      	ldr	r3, [pc, #20]	@ (8003f38 <HAL_RCC_OscConfig+0x8ac>)
 8003f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f26:	4a04      	ldr	r2, [pc, #16]	@ (8003f38 <HAL_RCC_OscConfig+0x8ac>)
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3730      	adds	r7, #48	@ 0x30
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	58024400 	.word	0x58024400
 8003f3c:	ffff0007 	.word	0xffff0007

08003f40 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e19c      	b.n	800428e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f54:	4b8a      	ldr	r3, [pc, #552]	@ (8004180 <HAL_RCC_ClockConfig+0x240>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 030f 	and.w	r3, r3, #15
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d910      	bls.n	8003f84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f62:	4b87      	ldr	r3, [pc, #540]	@ (8004180 <HAL_RCC_ClockConfig+0x240>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 020f 	bic.w	r2, r3, #15
 8003f6a:	4985      	ldr	r1, [pc, #532]	@ (8004180 <HAL_RCC_ClockConfig+0x240>)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f72:	4b83      	ldr	r3, [pc, #524]	@ (8004180 <HAL_RCC_ClockConfig+0x240>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d001      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e184      	b.n	800428e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d010      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	4b7b      	ldr	r3, [pc, #492]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d908      	bls.n	8003fb2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fa0:	4b78      	ldr	r3, [pc, #480]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	4975      	ldr	r1, [pc, #468]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d010      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695a      	ldr	r2, [r3, #20]
 8003fc2:	4b70      	ldr	r3, [pc, #448]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d908      	bls.n	8003fe0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003fce:	4b6d      	ldr	r3, [pc, #436]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	496a      	ldr	r1, [pc, #424]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d010      	beq.n	800400e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	699a      	ldr	r2, [r3, #24]
 8003ff0:	4b64      	ldr	r3, [pc, #400]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d908      	bls.n	800400e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ffc:	4b61      	ldr	r3, [pc, #388]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	495e      	ldr	r1, [pc, #376]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 800400a:	4313      	orrs	r3, r2
 800400c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b00      	cmp	r3, #0
 8004018:	d010      	beq.n	800403c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69da      	ldr	r2, [r3, #28]
 800401e:	4b59      	ldr	r3, [pc, #356]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004026:	429a      	cmp	r2, r3
 8004028:	d908      	bls.n	800403c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800402a:	4b56      	ldr	r3, [pc, #344]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	4953      	ldr	r1, [pc, #332]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 8004038:	4313      	orrs	r3, r2
 800403a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d010      	beq.n	800406a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	4b4d      	ldr	r3, [pc, #308]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	f003 030f 	and.w	r3, r3, #15
 8004054:	429a      	cmp	r2, r3
 8004056:	d908      	bls.n	800406a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004058:	4b4a      	ldr	r3, [pc, #296]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	f023 020f 	bic.w	r2, r3, #15
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4947      	ldr	r1, [pc, #284]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 8004066:	4313      	orrs	r3, r2
 8004068:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d055      	beq.n	8004122 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004076:	4b43      	ldr	r3, [pc, #268]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	4940      	ldr	r1, [pc, #256]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 8004084:	4313      	orrs	r3, r2
 8004086:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b02      	cmp	r3, #2
 800408e:	d107      	bne.n	80040a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004090:	4b3c      	ldr	r3, [pc, #240]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d121      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0f6      	b.n	800428e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d107      	bne.n	80040b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040a8:	4b36      	ldr	r3, [pc, #216]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d115      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0ea      	b.n	800428e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d107      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040c0:	4b30      	ldr	r3, [pc, #192]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d109      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e0de      	b.n	800428e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040d0:	4b2c      	ldr	r3, [pc, #176]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0d6      	b.n	800428e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040e0:	4b28      	ldr	r3, [pc, #160]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f023 0207 	bic.w	r2, r3, #7
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	4925      	ldr	r1, [pc, #148]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f2:	f7fd fa37 	bl	8001564 <HAL_GetTick>
 80040f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f8:	e00a      	b.n	8004110 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040fa:	f7fd fa33 	bl	8001564 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004108:	4293      	cmp	r3, r2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e0be      	b.n	800428e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004110:	4b1c      	ldr	r3, [pc, #112]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	429a      	cmp	r2, r3
 8004120:	d1eb      	bne.n	80040fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d010      	beq.n	8004150 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	4b14      	ldr	r3, [pc, #80]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	429a      	cmp	r2, r3
 800413c:	d208      	bcs.n	8004150 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800413e:	4b11      	ldr	r3, [pc, #68]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	f023 020f 	bic.w	r2, r3, #15
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	490e      	ldr	r1, [pc, #56]	@ (8004184 <HAL_RCC_ClockConfig+0x244>)
 800414c:	4313      	orrs	r3, r2
 800414e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004150:	4b0b      	ldr	r3, [pc, #44]	@ (8004180 <HAL_RCC_ClockConfig+0x240>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 030f 	and.w	r3, r3, #15
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d214      	bcs.n	8004188 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415e:	4b08      	ldr	r3, [pc, #32]	@ (8004180 <HAL_RCC_ClockConfig+0x240>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f023 020f 	bic.w	r2, r3, #15
 8004166:	4906      	ldr	r1, [pc, #24]	@ (8004180 <HAL_RCC_ClockConfig+0x240>)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	4313      	orrs	r3, r2
 800416c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800416e:	4b04      	ldr	r3, [pc, #16]	@ (8004180 <HAL_RCC_ClockConfig+0x240>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d005      	beq.n	8004188 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e086      	b.n	800428e <HAL_RCC_ClockConfig+0x34e>
 8004180:	52002000 	.word	0x52002000
 8004184:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d010      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	4b3f      	ldr	r3, [pc, #252]	@ (8004298 <HAL_RCC_ClockConfig+0x358>)
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d208      	bcs.n	80041b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041a4:	4b3c      	ldr	r3, [pc, #240]	@ (8004298 <HAL_RCC_ClockConfig+0x358>)
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	4939      	ldr	r1, [pc, #228]	@ (8004298 <HAL_RCC_ClockConfig+0x358>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d010      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695a      	ldr	r2, [r3, #20]
 80041c6:	4b34      	ldr	r3, [pc, #208]	@ (8004298 <HAL_RCC_ClockConfig+0x358>)
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d208      	bcs.n	80041e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041d2:	4b31      	ldr	r3, [pc, #196]	@ (8004298 <HAL_RCC_ClockConfig+0x358>)
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	492e      	ldr	r1, [pc, #184]	@ (8004298 <HAL_RCC_ClockConfig+0x358>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0310 	and.w	r3, r3, #16
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d010      	beq.n	8004212 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699a      	ldr	r2, [r3, #24]
 80041f4:	4b28      	ldr	r3, [pc, #160]	@ (8004298 <HAL_RCC_ClockConfig+0x358>)
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d208      	bcs.n	8004212 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004200:	4b25      	ldr	r3, [pc, #148]	@ (8004298 <HAL_RCC_ClockConfig+0x358>)
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	4922      	ldr	r1, [pc, #136]	@ (8004298 <HAL_RCC_ClockConfig+0x358>)
 800420e:	4313      	orrs	r3, r2
 8004210:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b00      	cmp	r3, #0
 800421c:	d010      	beq.n	8004240 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69da      	ldr	r2, [r3, #28]
 8004222:	4b1d      	ldr	r3, [pc, #116]	@ (8004298 <HAL_RCC_ClockConfig+0x358>)
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800422a:	429a      	cmp	r2, r3
 800422c:	d208      	bcs.n	8004240 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800422e:	4b1a      	ldr	r3, [pc, #104]	@ (8004298 <HAL_RCC_ClockConfig+0x358>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	4917      	ldr	r1, [pc, #92]	@ (8004298 <HAL_RCC_ClockConfig+0x358>)
 800423c:	4313      	orrs	r3, r2
 800423e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004240:	f000 f834 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 8004244:	4602      	mov	r2, r0
 8004246:	4b14      	ldr	r3, [pc, #80]	@ (8004298 <HAL_RCC_ClockConfig+0x358>)
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	0a1b      	lsrs	r3, r3, #8
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	4912      	ldr	r1, [pc, #72]	@ (800429c <HAL_RCC_ClockConfig+0x35c>)
 8004252:	5ccb      	ldrb	r3, [r1, r3]
 8004254:	f003 031f 	and.w	r3, r3, #31
 8004258:	fa22 f303 	lsr.w	r3, r2, r3
 800425c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800425e:	4b0e      	ldr	r3, [pc, #56]	@ (8004298 <HAL_RCC_ClockConfig+0x358>)
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	4a0d      	ldr	r2, [pc, #52]	@ (800429c <HAL_RCC_ClockConfig+0x35c>)
 8004268:	5cd3      	ldrb	r3, [r2, r3]
 800426a:	f003 031f 	and.w	r3, r3, #31
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	fa22 f303 	lsr.w	r3, r2, r3
 8004274:	4a0a      	ldr	r2, [pc, #40]	@ (80042a0 <HAL_RCC_ClockConfig+0x360>)
 8004276:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004278:	4a0a      	ldr	r2, [pc, #40]	@ (80042a4 <HAL_RCC_ClockConfig+0x364>)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800427e:	4b0a      	ldr	r3, [pc, #40]	@ (80042a8 <HAL_RCC_ClockConfig+0x368>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7fd f924 	bl	80014d0 <HAL_InitTick>
 8004288:	4603      	mov	r3, r0
 800428a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800428c:	7bfb      	ldrb	r3, [r7, #15]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	58024400 	.word	0x58024400
 800429c:	08008594 	.word	0x08008594
 80042a0:	24000004 	.word	0x24000004
 80042a4:	24000000 	.word	0x24000000
 80042a8:	24000008 	.word	0x24000008

080042ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b089      	sub	sp, #36	@ 0x24
 80042b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042b2:	4bb3      	ldr	r3, [pc, #716]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042ba:	2b18      	cmp	r3, #24
 80042bc:	f200 8155 	bhi.w	800456a <HAL_RCC_GetSysClockFreq+0x2be>
 80042c0:	a201      	add	r2, pc, #4	@ (adr r2, 80042c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80042c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c6:	bf00      	nop
 80042c8:	0800432d 	.word	0x0800432d
 80042cc:	0800456b 	.word	0x0800456b
 80042d0:	0800456b 	.word	0x0800456b
 80042d4:	0800456b 	.word	0x0800456b
 80042d8:	0800456b 	.word	0x0800456b
 80042dc:	0800456b 	.word	0x0800456b
 80042e0:	0800456b 	.word	0x0800456b
 80042e4:	0800456b 	.word	0x0800456b
 80042e8:	08004353 	.word	0x08004353
 80042ec:	0800456b 	.word	0x0800456b
 80042f0:	0800456b 	.word	0x0800456b
 80042f4:	0800456b 	.word	0x0800456b
 80042f8:	0800456b 	.word	0x0800456b
 80042fc:	0800456b 	.word	0x0800456b
 8004300:	0800456b 	.word	0x0800456b
 8004304:	0800456b 	.word	0x0800456b
 8004308:	08004359 	.word	0x08004359
 800430c:	0800456b 	.word	0x0800456b
 8004310:	0800456b 	.word	0x0800456b
 8004314:	0800456b 	.word	0x0800456b
 8004318:	0800456b 	.word	0x0800456b
 800431c:	0800456b 	.word	0x0800456b
 8004320:	0800456b 	.word	0x0800456b
 8004324:	0800456b 	.word	0x0800456b
 8004328:	0800435f 	.word	0x0800435f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800432c:	4b94      	ldr	r3, [pc, #592]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b00      	cmp	r3, #0
 8004336:	d009      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004338:	4b91      	ldr	r3, [pc, #580]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	08db      	lsrs	r3, r3, #3
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	4a90      	ldr	r2, [pc, #576]	@ (8004584 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
 8004348:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800434a:	e111      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800434c:	4b8d      	ldr	r3, [pc, #564]	@ (8004584 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800434e:	61bb      	str	r3, [r7, #24]
      break;
 8004350:	e10e      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004352:	4b8d      	ldr	r3, [pc, #564]	@ (8004588 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004354:	61bb      	str	r3, [r7, #24]
      break;
 8004356:	e10b      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004358:	4b8c      	ldr	r3, [pc, #560]	@ (800458c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800435a:	61bb      	str	r3, [r7, #24]
      break;
 800435c:	e108      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800435e:	4b88      	ldr	r3, [pc, #544]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004368:	4b85      	ldr	r3, [pc, #532]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800436a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436c:	091b      	lsrs	r3, r3, #4
 800436e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004372:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004374:	4b82      	ldr	r3, [pc, #520]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800437e:	4b80      	ldr	r3, [pc, #512]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004382:	08db      	lsrs	r3, r3, #3
 8004384:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	fb02 f303 	mul.w	r3, r2, r3
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004396:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 80e1 	beq.w	8004564 <HAL_RCC_GetSysClockFreq+0x2b8>
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	f000 8083 	beq.w	80044b0 <HAL_RCC_GetSysClockFreq+0x204>
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	f200 80a1 	bhi.w	80044f4 <HAL_RCC_GetSysClockFreq+0x248>
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <HAL_RCC_GetSysClockFreq+0x114>
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d056      	beq.n	800446c <HAL_RCC_GetSysClockFreq+0x1c0>
 80043be:	e099      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043c0:	4b6f      	ldr	r3, [pc, #444]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d02d      	beq.n	8004428 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043cc:	4b6c      	ldr	r3, [pc, #432]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	08db      	lsrs	r3, r3, #3
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	4a6b      	ldr	r2, [pc, #428]	@ (8004584 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043d8:	fa22 f303 	lsr.w	r3, r2, r3
 80043dc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	ee07 3a90 	vmov	s15, r3
 80043e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043f6:	4b62      	ldr	r3, [pc, #392]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004406:	ed97 6a02 	vldr	s12, [r7, #8]
 800440a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004590 <HAL_RCC_GetSysClockFreq+0x2e4>
 800440e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800441a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800441e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004422:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004426:	e087      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004432:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004594 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800443a:	4b51      	ldr	r3, [pc, #324]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800443c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800444a:	ed97 6a02 	vldr	s12, [r7, #8]
 800444e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004590 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800445a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800445e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004466:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800446a:	e065      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004476:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004598 <HAL_RCC_GetSysClockFreq+0x2ec>
 800447a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800447e:	4b40      	ldr	r3, [pc, #256]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800448e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004492:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004590 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800449a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800449e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044ae:	e043      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800459c <HAL_RCC_GetSysClockFreq+0x2f0>
 80044be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044c2:	4b2f      	ldr	r3, [pc, #188]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ca:	ee07 3a90 	vmov	s15, r3
 80044ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80044d6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004590 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044f2:	e021      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	ee07 3a90 	vmov	s15, r3
 80044fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004598 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004506:	4b1e      	ldr	r3, [pc, #120]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450e:	ee07 3a90 	vmov	s15, r3
 8004512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004516:	ed97 6a02 	vldr	s12, [r7, #8]
 800451a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004590 <HAL_RCC_GetSysClockFreq+0x2e4>
 800451e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800452a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800452e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004532:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004536:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004538:	4b11      	ldr	r3, [pc, #68]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800453a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453c:	0a5b      	lsrs	r3, r3, #9
 800453e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004542:	3301      	adds	r3, #1
 8004544:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	ee07 3a90 	vmov	s15, r3
 800454c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004550:	edd7 6a07 	vldr	s13, [r7, #28]
 8004554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800455c:	ee17 3a90 	vmov	r3, s15
 8004560:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004562:	e005      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	61bb      	str	r3, [r7, #24]
      break;
 8004568:	e002      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800456a:	4b07      	ldr	r3, [pc, #28]	@ (8004588 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800456c:	61bb      	str	r3, [r7, #24]
      break;
 800456e:	bf00      	nop
  }

  return sysclockfreq;
 8004570:	69bb      	ldr	r3, [r7, #24]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3724      	adds	r7, #36	@ 0x24
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	58024400 	.word	0x58024400
 8004584:	03d09000 	.word	0x03d09000
 8004588:	003d0900 	.word	0x003d0900
 800458c:	007a1200 	.word	0x007a1200
 8004590:	46000000 	.word	0x46000000
 8004594:	4c742400 	.word	0x4c742400
 8004598:	4a742400 	.word	0x4a742400
 800459c:	4af42400 	.word	0x4af42400

080045a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80045a6:	f7ff fe81 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 80045aa:	4602      	mov	r2, r0
 80045ac:	4b10      	ldr	r3, [pc, #64]	@ (80045f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	0a1b      	lsrs	r3, r3, #8
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	490f      	ldr	r1, [pc, #60]	@ (80045f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80045b8:	5ccb      	ldrb	r3, [r1, r3]
 80045ba:	f003 031f 	and.w	r3, r3, #31
 80045be:	fa22 f303 	lsr.w	r3, r2, r3
 80045c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045c4:	4b0a      	ldr	r3, [pc, #40]	@ (80045f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	f003 030f 	and.w	r3, r3, #15
 80045cc:	4a09      	ldr	r2, [pc, #36]	@ (80045f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80045ce:	5cd3      	ldrb	r3, [r2, r3]
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	fa22 f303 	lsr.w	r3, r2, r3
 80045da:	4a07      	ldr	r2, [pc, #28]	@ (80045f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80045dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045de:	4a07      	ldr	r2, [pc, #28]	@ (80045fc <HAL_RCC_GetHCLKFreq+0x5c>)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80045e4:	4b04      	ldr	r3, [pc, #16]	@ (80045f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80045e6:	681b      	ldr	r3, [r3, #0]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	58024400 	.word	0x58024400
 80045f4:	08008594 	.word	0x08008594
 80045f8:	24000004 	.word	0x24000004
 80045fc:	24000000 	.word	0x24000000

08004600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004604:	f7ff ffcc 	bl	80045a0 <HAL_RCC_GetHCLKFreq>
 8004608:	4602      	mov	r2, r0
 800460a:	4b06      	ldr	r3, [pc, #24]	@ (8004624 <HAL_RCC_GetPCLK1Freq+0x24>)
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	091b      	lsrs	r3, r3, #4
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	4904      	ldr	r1, [pc, #16]	@ (8004628 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004616:	5ccb      	ldrb	r3, [r1, r3]
 8004618:	f003 031f 	and.w	r3, r3, #31
 800461c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004620:	4618      	mov	r0, r3
 8004622:	bd80      	pop	{r7, pc}
 8004624:	58024400 	.word	0x58024400
 8004628:	08008594 	.word	0x08008594

0800462c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004630:	f7ff ffb6 	bl	80045a0 <HAL_RCC_GetHCLKFreq>
 8004634:	4602      	mov	r2, r0
 8004636:	4b06      	ldr	r3, [pc, #24]	@ (8004650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	0a1b      	lsrs	r3, r3, #8
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	4904      	ldr	r1, [pc, #16]	@ (8004654 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004642:	5ccb      	ldrb	r3, [r1, r3]
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800464c:	4618      	mov	r0, r3
 800464e:	bd80      	pop	{r7, pc}
 8004650:	58024400 	.word	0x58024400
 8004654:	08008594 	.word	0x08008594

08004658 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800465c:	b0ca      	sub	sp, #296	@ 0x128
 800465e:	af00      	add	r7, sp, #0
 8004660:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004664:	2300      	movs	r3, #0
 8004666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800466a:	2300      	movs	r3, #0
 800466c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800467c:	2500      	movs	r5, #0
 800467e:	ea54 0305 	orrs.w	r3, r4, r5
 8004682:	d049      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004688:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800468a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800468e:	d02f      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004690:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004694:	d828      	bhi.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004696:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800469a:	d01a      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800469c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046a0:	d822      	bhi.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 80046a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046aa:	d007      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046ac:	e01c      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046ae:	4bb8      	ldr	r3, [pc, #736]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b2:	4ab7      	ldr	r2, [pc, #732]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046ba:	e01a      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c0:	3308      	adds	r3, #8
 80046c2:	2102      	movs	r1, #2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f002 fb61 	bl	8006d8c <RCCEx_PLL2_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046d0:	e00f      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d6:	3328      	adds	r3, #40	@ 0x28
 80046d8:	2102      	movs	r1, #2
 80046da:	4618      	mov	r0, r3
 80046dc:	f002 fc08 	bl	8006ef0 <RCCEx_PLL3_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046e6:	e004      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046ee:	e000      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80046f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10a      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80046fa:	4ba5      	ldr	r3, [pc, #660]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046fe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004706:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004708:	4aa1      	ldr	r2, [pc, #644]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800470a:	430b      	orrs	r3, r1
 800470c:	6513      	str	r3, [r2, #80]	@ 0x50
 800470e:	e003      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004710:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004714:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004720:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004724:	f04f 0900 	mov.w	r9, #0
 8004728:	ea58 0309 	orrs.w	r3, r8, r9
 800472c:	d047      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800472e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004734:	2b04      	cmp	r3, #4
 8004736:	d82a      	bhi.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004738:	a201      	add	r2, pc, #4	@ (adr r2, 8004740 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800473a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473e:	bf00      	nop
 8004740:	08004755 	.word	0x08004755
 8004744:	08004763 	.word	0x08004763
 8004748:	08004779 	.word	0x08004779
 800474c:	08004797 	.word	0x08004797
 8004750:	08004797 	.word	0x08004797
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004754:	4b8e      	ldr	r3, [pc, #568]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004758:	4a8d      	ldr	r2, [pc, #564]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800475a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800475e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004760:	e01a      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004766:	3308      	adds	r3, #8
 8004768:	2100      	movs	r1, #0
 800476a:	4618      	mov	r0, r3
 800476c:	f002 fb0e 	bl	8006d8c <RCCEx_PLL2_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004776:	e00f      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477c:	3328      	adds	r3, #40	@ 0x28
 800477e:	2100      	movs	r1, #0
 8004780:	4618      	mov	r0, r3
 8004782:	f002 fbb5 	bl	8006ef0 <RCCEx_PLL3_Config>
 8004786:	4603      	mov	r3, r0
 8004788:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800478c:	e004      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004794:	e000      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10a      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047a0:	4b7b      	ldr	r3, [pc, #492]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047a4:	f023 0107 	bic.w	r1, r3, #7
 80047a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ae:	4a78      	ldr	r2, [pc, #480]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047b0:	430b      	orrs	r3, r1
 80047b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80047b4:	e003      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80047be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80047ca:	f04f 0b00 	mov.w	fp, #0
 80047ce:	ea5a 030b 	orrs.w	r3, sl, fp
 80047d2:	d04c      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80047d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047de:	d030      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80047e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047e4:	d829      	bhi.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80047e8:	d02d      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80047ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80047ec:	d825      	bhi.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047ee:	2b80      	cmp	r3, #128	@ 0x80
 80047f0:	d018      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80047f2:	2b80      	cmp	r3, #128	@ 0x80
 80047f4:	d821      	bhi.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80047fa:	2b40      	cmp	r3, #64	@ 0x40
 80047fc:	d007      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80047fe:	e01c      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004800:	4b63      	ldr	r3, [pc, #396]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004804:	4a62      	ldr	r2, [pc, #392]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800480a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800480c:	e01c      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800480e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004812:	3308      	adds	r3, #8
 8004814:	2100      	movs	r1, #0
 8004816:	4618      	mov	r0, r3
 8004818:	f002 fab8 	bl	8006d8c <RCCEx_PLL2_Config>
 800481c:	4603      	mov	r3, r0
 800481e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004822:	e011      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004828:	3328      	adds	r3, #40	@ 0x28
 800482a:	2100      	movs	r1, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f002 fb5f 	bl	8006ef0 <RCCEx_PLL3_Config>
 8004832:	4603      	mov	r3, r0
 8004834:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004838:	e006      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004840:	e002      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004842:	bf00      	nop
 8004844:	e000      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004846:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10a      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004850:	4b4f      	ldr	r3, [pc, #316]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004854:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485e:	4a4c      	ldr	r2, [pc, #304]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004860:	430b      	orrs	r3, r1
 8004862:	6513      	str	r3, [r2, #80]	@ 0x50
 8004864:	e003      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800486a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800487a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800487e:	2300      	movs	r3, #0
 8004880:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004884:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004888:	460b      	mov	r3, r1
 800488a:	4313      	orrs	r3, r2
 800488c:	d053      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800488e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004892:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004896:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800489a:	d035      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800489c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048a0:	d82e      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80048a2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80048a6:	d031      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80048a8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80048ac:	d828      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80048ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048b2:	d01a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x292>
 80048b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048b8:	d822      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80048be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048c2:	d007      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80048c4:	e01c      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c6:	4b32      	ldr	r3, [pc, #200]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ca:	4a31      	ldr	r2, [pc, #196]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048d2:	e01c      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d8:	3308      	adds	r3, #8
 80048da:	2100      	movs	r1, #0
 80048dc:	4618      	mov	r0, r3
 80048de:	f002 fa55 	bl	8006d8c <RCCEx_PLL2_Config>
 80048e2:	4603      	mov	r3, r0
 80048e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80048e8:	e011      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ee:	3328      	adds	r3, #40	@ 0x28
 80048f0:	2100      	movs	r1, #0
 80048f2:	4618      	mov	r0, r3
 80048f4:	f002 fafc 	bl	8006ef0 <RCCEx_PLL3_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048fe:	e006      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004906:	e002      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004908:	bf00      	nop
 800490a:	e000      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800490c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800490e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10b      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004916:	4b1e      	ldr	r3, [pc, #120]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800491e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004922:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004926:	4a1a      	ldr	r2, [pc, #104]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004928:	430b      	orrs	r3, r1
 800492a:	6593      	str	r3, [r2, #88]	@ 0x58
 800492c:	e003      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004932:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004942:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004946:	2300      	movs	r3, #0
 8004948:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800494c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004950:	460b      	mov	r3, r1
 8004952:	4313      	orrs	r3, r2
 8004954:	d056      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800495a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800495e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004962:	d038      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004964:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004968:	d831      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800496a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800496e:	d034      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004970:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004974:	d82b      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004976:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800497a:	d01d      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800497c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004980:	d825      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004982:	2b00      	cmp	r3, #0
 8004984:	d006      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004986:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800498c:	e01f      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800498e:	bf00      	nop
 8004990:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004994:	4ba2      	ldr	r3, [pc, #648]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004998:	4aa1      	ldr	r2, [pc, #644]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800499a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800499e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049a0:	e01c      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a6:	3308      	adds	r3, #8
 80049a8:	2100      	movs	r1, #0
 80049aa:	4618      	mov	r0, r3
 80049ac:	f002 f9ee 	bl	8006d8c <RCCEx_PLL2_Config>
 80049b0:	4603      	mov	r3, r0
 80049b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80049b6:	e011      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049bc:	3328      	adds	r3, #40	@ 0x28
 80049be:	2100      	movs	r1, #0
 80049c0:	4618      	mov	r0, r3
 80049c2:	f002 fa95 	bl	8006ef0 <RCCEx_PLL3_Config>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049cc:	e006      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049d4:	e002      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80049d6:	bf00      	nop
 80049d8:	e000      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80049da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10b      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80049e4:	4b8e      	ldr	r3, [pc, #568]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80049ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80049f4:	4a8a      	ldr	r2, [pc, #552]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049f6:	430b      	orrs	r3, r1
 80049f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80049fa:	e003      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004a10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004a14:	2300      	movs	r3, #0
 8004a16:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004a1a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4313      	orrs	r3, r2
 8004a22:	d03a      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a2a:	2b30      	cmp	r3, #48	@ 0x30
 8004a2c:	d01f      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004a2e:	2b30      	cmp	r3, #48	@ 0x30
 8004a30:	d819      	bhi.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	d00c      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004a36:	2b20      	cmp	r3, #32
 8004a38:	d815      	bhi.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d019      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004a3e:	2b10      	cmp	r3, #16
 8004a40:	d111      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a42:	4b77      	ldr	r3, [pc, #476]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a46:	4a76      	ldr	r2, [pc, #472]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a4e:	e011      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a54:	3308      	adds	r3, #8
 8004a56:	2102      	movs	r1, #2
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f002 f997 	bl	8006d8c <RCCEx_PLL2_Config>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a64:	e006      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a6c:	e002      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a6e:	bf00      	nop
 8004a70:	e000      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10a      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a7c:	4b68      	ldr	r3, [pc, #416]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a80:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a8a:	4a65      	ldr	r2, [pc, #404]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a90:	e003      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004aa6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004aaa:	2300      	movs	r3, #0
 8004aac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004ab0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	d051      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ac0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ac4:	d035      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004ac6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004aca:	d82e      	bhi.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004acc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ad0:	d031      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004ad2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ad6:	d828      	bhi.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ad8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004adc:	d01a      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004ade:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ae2:	d822      	bhi.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004ae8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aec:	d007      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004aee:	e01c      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004af0:	4b4b      	ldr	r3, [pc, #300]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af4:	4a4a      	ldr	r2, [pc, #296]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004af6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004afa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004afc:	e01c      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b02:	3308      	adds	r3, #8
 8004b04:	2100      	movs	r1, #0
 8004b06:	4618      	mov	r0, r3
 8004b08:	f002 f940 	bl	8006d8c <RCCEx_PLL2_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b12:	e011      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b18:	3328      	adds	r3, #40	@ 0x28
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f002 f9e7 	bl	8006ef0 <RCCEx_PLL3_Config>
 8004b22:	4603      	mov	r3, r0
 8004b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b28:	e006      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b30:	e002      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004b32:	bf00      	nop
 8004b34:	e000      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10a      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004b40:	4b37      	ldr	r3, [pc, #220]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b44:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b4e:	4a34      	ldr	r2, [pc, #208]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b50:	430b      	orrs	r3, r1
 8004b52:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b54:	e003      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b66:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004b6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004b74:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	d056      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b88:	d033      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004b8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b8e:	d82c      	bhi.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b94:	d02f      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004b96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b9a:	d826      	bhi.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ba0:	d02b      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004ba2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ba6:	d820      	bhi.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ba8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bac:	d012      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004bae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bb2:	d81a      	bhi.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d022      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bbc:	d115      	bne.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc2:	3308      	adds	r3, #8
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f002 f8e0 	bl	8006d8c <RCCEx_PLL2_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004bd2:	e015      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd8:	3328      	adds	r3, #40	@ 0x28
 8004bda:	2101      	movs	r1, #1
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f002 f987 	bl	8006ef0 <RCCEx_PLL3_Config>
 8004be2:	4603      	mov	r3, r0
 8004be4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004be8:	e00a      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bf0:	e006      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bf2:	bf00      	nop
 8004bf4:	e004      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bf6:	bf00      	nop
 8004bf8:	e002      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bfa:	bf00      	nop
 8004bfc:	e000      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10d      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004c08:	4b05      	ldr	r3, [pc, #20]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c0c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c16:	4a02      	ldr	r2, [pc, #8]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c1c:	e006      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004c1e:	bf00      	nop
 8004c20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c34:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004c38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c42:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	d055      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c58:	d033      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c5e:	d82c      	bhi.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c64:	d02f      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c6a:	d826      	bhi.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c70:	d02b      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004c72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c76:	d820      	bhi.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c7c:	d012      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004c7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c82:	d81a      	bhi.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d022      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004c88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c8c:	d115      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c92:	3308      	adds	r3, #8
 8004c94:	2101      	movs	r1, #1
 8004c96:	4618      	mov	r0, r3
 8004c98:	f002 f878 	bl	8006d8c <RCCEx_PLL2_Config>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ca2:	e015      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca8:	3328      	adds	r3, #40	@ 0x28
 8004caa:	2101      	movs	r1, #1
 8004cac:	4618      	mov	r0, r3
 8004cae:	f002 f91f 	bl	8006ef0 <RCCEx_PLL3_Config>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004cb8:	e00a      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cc0:	e006      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004cc2:	bf00      	nop
 8004cc4:	e004      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004cc6:	bf00      	nop
 8004cc8:	e002      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004cca:	bf00      	nop
 8004ccc:	e000      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10b      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004cd8:	4ba3      	ldr	r3, [pc, #652]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cdc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004ce8:	4a9f      	ldr	r2, [pc, #636]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cea:	430b      	orrs	r3, r1
 8004cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cee:	e003      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004d04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004d0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d12:	460b      	mov	r3, r1
 8004d14:	4313      	orrs	r3, r2
 8004d16:	d037      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d22:	d00e      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004d24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d28:	d816      	bhi.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d018      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004d2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d32:	d111      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d34:	4b8c      	ldr	r3, [pc, #560]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d38:	4a8b      	ldr	r2, [pc, #556]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d40:	e00f      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d46:	3308      	adds	r3, #8
 8004d48:	2101      	movs	r1, #1
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f002 f81e 	bl	8006d8c <RCCEx_PLL2_Config>
 8004d50:	4603      	mov	r3, r0
 8004d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d56:	e004      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d5e:	e000      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10a      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d6a:	4b7f      	ldr	r3, [pc, #508]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d6e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d78:	4a7b      	ldr	r2, [pc, #492]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d7a:	430b      	orrs	r3, r1
 8004d7c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d7e:	e003      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d90:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004d94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004d9e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4313      	orrs	r3, r2
 8004da6:	d039      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d81c      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004db2:	a201      	add	r2, pc, #4	@ (adr r2, 8004db8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db8:	08004df5 	.word	0x08004df5
 8004dbc:	08004dc9 	.word	0x08004dc9
 8004dc0:	08004dd7 	.word	0x08004dd7
 8004dc4:	08004df5 	.word	0x08004df5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dc8:	4b67      	ldr	r3, [pc, #412]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dcc:	4a66      	ldr	r2, [pc, #408]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004dd4:	e00f      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dda:	3308      	adds	r3, #8
 8004ddc:	2102      	movs	r1, #2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f001 ffd4 	bl	8006d8c <RCCEx_PLL2_Config>
 8004de4:	4603      	mov	r3, r0
 8004de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004dea:	e004      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004df2:	e000      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10a      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004dfe:	4b5a      	ldr	r3, [pc, #360]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e02:	f023 0103 	bic.w	r1, r3, #3
 8004e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e0c:	4a56      	ldr	r2, [pc, #344]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e0e:	430b      	orrs	r3, r1
 8004e10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e12:	e003      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e24:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004e28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e32:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004e36:	460b      	mov	r3, r1
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f000 809f 	beq.w	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e3e:	4b4b      	ldr	r3, [pc, #300]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a4a      	ldr	r2, [pc, #296]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e4a:	f7fc fb8b 	bl	8001564 <HAL_GetTick>
 8004e4e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e52:	e00b      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e54:	f7fc fb86 	bl	8001564 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b64      	cmp	r3, #100	@ 0x64
 8004e62:	d903      	bls.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e6a:	e005      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e6c:	4b3f      	ldr	r3, [pc, #252]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0ed      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004e78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d179      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e80:	4b39      	ldr	r3, [pc, #228]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e8c:	4053      	eors	r3, r2
 8004e8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d015      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e96:	4b34      	ldr	r3, [pc, #208]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e9e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ea2:	4b31      	ldr	r3, [pc, #196]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea6:	4a30      	ldr	r2, [pc, #192]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eac:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004eae:	4b2e      	ldr	r3, [pc, #184]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb2:	4a2d      	ldr	r2, [pc, #180]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eb8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004eba:	4a2b      	ldr	r2, [pc, #172]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ebc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ec0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ece:	d118      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed0:	f7fc fb48 	bl	8001564 <HAL_GetTick>
 8004ed4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ed8:	e00d      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eda:	f7fc fb43 	bl	8001564 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004ee4:	1ad2      	subs	r2, r2, r3
 8004ee6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d903      	bls.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004ef4:	e005      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0eb      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d129      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f1a:	d10e      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004f1c:	4b12      	ldr	r3, [pc, #72]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f2c:	091a      	lsrs	r2, r3, #4
 8004f2e:	4b10      	ldr	r3, [pc, #64]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	4a0d      	ldr	r2, [pc, #52]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f34:	430b      	orrs	r3, r1
 8004f36:	6113      	str	r3, [r2, #16]
 8004f38:	e005      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f44:	6113      	str	r3, [r2, #16]
 8004f46:	4b08      	ldr	r3, [pc, #32]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f48:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f56:	4a04      	ldr	r2, [pc, #16]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f5c:	e00e      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004f66:	e009      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004f68:	58024400 	.word	0x58024400
 8004f6c:	58024800 	.word	0x58024800
 8004f70:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f84:	f002 0301 	and.w	r3, r2, #1
 8004f88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f92:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f000 8089 	beq.w	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fa4:	2b28      	cmp	r3, #40	@ 0x28
 8004fa6:	d86b      	bhi.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fae:	bf00      	nop
 8004fb0:	08005089 	.word	0x08005089
 8004fb4:	08005081 	.word	0x08005081
 8004fb8:	08005081 	.word	0x08005081
 8004fbc:	08005081 	.word	0x08005081
 8004fc0:	08005081 	.word	0x08005081
 8004fc4:	08005081 	.word	0x08005081
 8004fc8:	08005081 	.word	0x08005081
 8004fcc:	08005081 	.word	0x08005081
 8004fd0:	08005055 	.word	0x08005055
 8004fd4:	08005081 	.word	0x08005081
 8004fd8:	08005081 	.word	0x08005081
 8004fdc:	08005081 	.word	0x08005081
 8004fe0:	08005081 	.word	0x08005081
 8004fe4:	08005081 	.word	0x08005081
 8004fe8:	08005081 	.word	0x08005081
 8004fec:	08005081 	.word	0x08005081
 8004ff0:	0800506b 	.word	0x0800506b
 8004ff4:	08005081 	.word	0x08005081
 8004ff8:	08005081 	.word	0x08005081
 8004ffc:	08005081 	.word	0x08005081
 8005000:	08005081 	.word	0x08005081
 8005004:	08005081 	.word	0x08005081
 8005008:	08005081 	.word	0x08005081
 800500c:	08005081 	.word	0x08005081
 8005010:	08005089 	.word	0x08005089
 8005014:	08005081 	.word	0x08005081
 8005018:	08005081 	.word	0x08005081
 800501c:	08005081 	.word	0x08005081
 8005020:	08005081 	.word	0x08005081
 8005024:	08005081 	.word	0x08005081
 8005028:	08005081 	.word	0x08005081
 800502c:	08005081 	.word	0x08005081
 8005030:	08005089 	.word	0x08005089
 8005034:	08005081 	.word	0x08005081
 8005038:	08005081 	.word	0x08005081
 800503c:	08005081 	.word	0x08005081
 8005040:	08005081 	.word	0x08005081
 8005044:	08005081 	.word	0x08005081
 8005048:	08005081 	.word	0x08005081
 800504c:	08005081 	.word	0x08005081
 8005050:	08005089 	.word	0x08005089
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005058:	3308      	adds	r3, #8
 800505a:	2101      	movs	r1, #1
 800505c:	4618      	mov	r0, r3
 800505e:	f001 fe95 	bl	8006d8c <RCCEx_PLL2_Config>
 8005062:	4603      	mov	r3, r0
 8005064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005068:	e00f      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800506a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800506e:	3328      	adds	r3, #40	@ 0x28
 8005070:	2101      	movs	r1, #1
 8005072:	4618      	mov	r0, r3
 8005074:	f001 ff3c 	bl	8006ef0 <RCCEx_PLL3_Config>
 8005078:	4603      	mov	r3, r0
 800507a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800507e:	e004      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005086:	e000      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800508a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10a      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005092:	4bbf      	ldr	r3, [pc, #764]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005096:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800509a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800509e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050a0:	4abb      	ldr	r2, [pc, #748]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050a2:	430b      	orrs	r3, r1
 80050a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80050a6:	e003      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80050b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b8:	f002 0302 	and.w	r3, r2, #2
 80050bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050c0:	2300      	movs	r3, #0
 80050c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80050c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80050ca:	460b      	mov	r3, r1
 80050cc:	4313      	orrs	r3, r2
 80050ce:	d041      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80050d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050d6:	2b05      	cmp	r3, #5
 80050d8:	d824      	bhi.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80050da:	a201      	add	r2, pc, #4	@ (adr r2, 80050e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80050dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e0:	0800512d 	.word	0x0800512d
 80050e4:	080050f9 	.word	0x080050f9
 80050e8:	0800510f 	.word	0x0800510f
 80050ec:	0800512d 	.word	0x0800512d
 80050f0:	0800512d 	.word	0x0800512d
 80050f4:	0800512d 	.word	0x0800512d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050fc:	3308      	adds	r3, #8
 80050fe:	2101      	movs	r1, #1
 8005100:	4618      	mov	r0, r3
 8005102:	f001 fe43 	bl	8006d8c <RCCEx_PLL2_Config>
 8005106:	4603      	mov	r3, r0
 8005108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800510c:	e00f      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800510e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005112:	3328      	adds	r3, #40	@ 0x28
 8005114:	2101      	movs	r1, #1
 8005116:	4618      	mov	r0, r3
 8005118:	f001 feea 	bl	8006ef0 <RCCEx_PLL3_Config>
 800511c:	4603      	mov	r3, r0
 800511e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005122:	e004      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800512a:	e000      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800512c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800512e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10a      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005136:	4b96      	ldr	r3, [pc, #600]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800513a:	f023 0107 	bic.w	r1, r3, #7
 800513e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005142:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005144:	4a92      	ldr	r2, [pc, #584]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005146:	430b      	orrs	r3, r1
 8005148:	6553      	str	r3, [r2, #84]	@ 0x54
 800514a:	e003      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f002 0304 	and.w	r3, r2, #4
 8005160:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005164:	2300      	movs	r3, #0
 8005166:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800516a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800516e:	460b      	mov	r3, r1
 8005170:	4313      	orrs	r3, r2
 8005172:	d044      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005178:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800517c:	2b05      	cmp	r3, #5
 800517e:	d825      	bhi.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005180:	a201      	add	r2, pc, #4	@ (adr r2, 8005188 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005186:	bf00      	nop
 8005188:	080051d5 	.word	0x080051d5
 800518c:	080051a1 	.word	0x080051a1
 8005190:	080051b7 	.word	0x080051b7
 8005194:	080051d5 	.word	0x080051d5
 8005198:	080051d5 	.word	0x080051d5
 800519c:	080051d5 	.word	0x080051d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a4:	3308      	adds	r3, #8
 80051a6:	2101      	movs	r1, #1
 80051a8:	4618      	mov	r0, r3
 80051aa:	f001 fdef 	bl	8006d8c <RCCEx_PLL2_Config>
 80051ae:	4603      	mov	r3, r0
 80051b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80051b4:	e00f      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ba:	3328      	adds	r3, #40	@ 0x28
 80051bc:	2101      	movs	r1, #1
 80051be:	4618      	mov	r0, r3
 80051c0:	f001 fe96 	bl	8006ef0 <RCCEx_PLL3_Config>
 80051c4:	4603      	mov	r3, r0
 80051c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80051ca:	e004      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051d2:	e000      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80051d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10b      	bne.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051de:	4b6c      	ldr	r3, [pc, #432]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e2:	f023 0107 	bic.w	r1, r3, #7
 80051e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051ee:	4a68      	ldr	r2, [pc, #416]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051f0:	430b      	orrs	r3, r1
 80051f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80051f4:	e003      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005206:	f002 0320 	and.w	r3, r2, #32
 800520a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800520e:	2300      	movs	r3, #0
 8005210:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005214:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005218:	460b      	mov	r3, r1
 800521a:	4313      	orrs	r3, r2
 800521c:	d055      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800521e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005226:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800522a:	d033      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800522c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005230:	d82c      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005236:	d02f      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800523c:	d826      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800523e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005242:	d02b      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005244:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005248:	d820      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800524a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800524e:	d012      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005250:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005254:	d81a      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005256:	2b00      	cmp	r3, #0
 8005258:	d022      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800525a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800525e:	d115      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005264:	3308      	adds	r3, #8
 8005266:	2100      	movs	r1, #0
 8005268:	4618      	mov	r0, r3
 800526a:	f001 fd8f 	bl	8006d8c <RCCEx_PLL2_Config>
 800526e:	4603      	mov	r3, r0
 8005270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005274:	e015      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800527a:	3328      	adds	r3, #40	@ 0x28
 800527c:	2102      	movs	r1, #2
 800527e:	4618      	mov	r0, r3
 8005280:	f001 fe36 	bl	8006ef0 <RCCEx_PLL3_Config>
 8005284:	4603      	mov	r3, r0
 8005286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800528a:	e00a      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005292:	e006      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005294:	bf00      	nop
 8005296:	e004      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005298:	bf00      	nop
 800529a:	e002      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800529c:	bf00      	nop
 800529e:	e000      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80052a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10b      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052aa:	4b39      	ldr	r3, [pc, #228]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80052b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ba:	4a35      	ldr	r2, [pc, #212]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052bc:	430b      	orrs	r3, r1
 80052be:	6553      	str	r3, [r2, #84]	@ 0x54
 80052c0:	e003      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80052ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80052d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052da:	2300      	movs	r3, #0
 80052dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80052e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4313      	orrs	r3, r2
 80052e8:	d058      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80052ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052f2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80052f6:	d033      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80052f8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80052fc:	d82c      	bhi.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005302:	d02f      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005308:	d826      	bhi.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800530a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800530e:	d02b      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005310:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005314:	d820      	bhi.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005316:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800531a:	d012      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800531c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005320:	d81a      	bhi.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005322:	2b00      	cmp	r3, #0
 8005324:	d022      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800532a:	d115      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800532c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005330:	3308      	adds	r3, #8
 8005332:	2100      	movs	r1, #0
 8005334:	4618      	mov	r0, r3
 8005336:	f001 fd29 	bl	8006d8c <RCCEx_PLL2_Config>
 800533a:	4603      	mov	r3, r0
 800533c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005340:	e015      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005346:	3328      	adds	r3, #40	@ 0x28
 8005348:	2102      	movs	r1, #2
 800534a:	4618      	mov	r0, r3
 800534c:	f001 fdd0 	bl	8006ef0 <RCCEx_PLL3_Config>
 8005350:	4603      	mov	r3, r0
 8005352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005356:	e00a      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800535e:	e006      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005360:	bf00      	nop
 8005362:	e004      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005364:	bf00      	nop
 8005366:	e002      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005368:	bf00      	nop
 800536a:	e000      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800536c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800536e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10e      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005376:	4b06      	ldr	r3, [pc, #24]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800537a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800537e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005382:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005386:	4a02      	ldr	r2, [pc, #8]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005388:	430b      	orrs	r3, r1
 800538a:	6593      	str	r3, [r2, #88]	@ 0x58
 800538c:	e006      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800538e:	bf00      	nop
 8005390:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005394:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005398:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800539c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80053a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053ac:	2300      	movs	r3, #0
 80053ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80053b2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80053b6:	460b      	mov	r3, r1
 80053b8:	4313      	orrs	r3, r2
 80053ba:	d055      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80053bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80053c4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80053c8:	d033      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80053ca:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80053ce:	d82c      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053d4:	d02f      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80053d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053da:	d826      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053dc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80053e0:	d02b      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80053e2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80053e6:	d820      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053ec:	d012      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80053ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053f2:	d81a      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d022      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80053f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053fc:	d115      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005402:	3308      	adds	r3, #8
 8005404:	2100      	movs	r1, #0
 8005406:	4618      	mov	r0, r3
 8005408:	f001 fcc0 	bl	8006d8c <RCCEx_PLL2_Config>
 800540c:	4603      	mov	r3, r0
 800540e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005412:	e015      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005418:	3328      	adds	r3, #40	@ 0x28
 800541a:	2102      	movs	r1, #2
 800541c:	4618      	mov	r0, r3
 800541e:	f001 fd67 	bl	8006ef0 <RCCEx_PLL3_Config>
 8005422:	4603      	mov	r3, r0
 8005424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005428:	e00a      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005430:	e006      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005432:	bf00      	nop
 8005434:	e004      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005436:	bf00      	nop
 8005438:	e002      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800543a:	bf00      	nop
 800543c:	e000      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800543e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10b      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005448:	4ba1      	ldr	r3, [pc, #644]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800544a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800544c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005454:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005458:	4a9d      	ldr	r2, [pc, #628]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800545a:	430b      	orrs	r3, r1
 800545c:	6593      	str	r3, [r2, #88]	@ 0x58
 800545e:	e003      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005460:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005464:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005470:	f002 0308 	and.w	r3, r2, #8
 8005474:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005478:	2300      	movs	r3, #0
 800547a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800547e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005482:	460b      	mov	r3, r1
 8005484:	4313      	orrs	r3, r2
 8005486:	d01e      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005494:	d10c      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800549a:	3328      	adds	r3, #40	@ 0x28
 800549c:	2102      	movs	r1, #2
 800549e:	4618      	mov	r0, r3
 80054a0:	f001 fd26 	bl	8006ef0 <RCCEx_PLL3_Config>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80054b0:	4b87      	ldr	r3, [pc, #540]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054c0:	4a83      	ldr	r2, [pc, #524]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054c2:	430b      	orrs	r3, r1
 80054c4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ce:	f002 0310 	and.w	r3, r2, #16
 80054d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054d6:	2300      	movs	r3, #0
 80054d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80054dc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80054e0:	460b      	mov	r3, r1
 80054e2:	4313      	orrs	r3, r2
 80054e4:	d01e      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80054e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054f2:	d10c      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f8:	3328      	adds	r3, #40	@ 0x28
 80054fa:	2102      	movs	r1, #2
 80054fc:	4618      	mov	r0, r3
 80054fe:	f001 fcf7 	bl	8006ef0 <RCCEx_PLL3_Config>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800550e:	4b70      	ldr	r3, [pc, #448]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005512:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800551e:	4a6c      	ldr	r2, [pc, #432]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005520:	430b      	orrs	r3, r1
 8005522:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005530:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005534:	2300      	movs	r3, #0
 8005536:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800553a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800553e:	460b      	mov	r3, r1
 8005540:	4313      	orrs	r3, r2
 8005542:	d03e      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005548:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800554c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005550:	d022      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005552:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005556:	d81b      	bhi.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800555c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005560:	d00b      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005562:	e015      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005568:	3308      	adds	r3, #8
 800556a:	2100      	movs	r1, #0
 800556c:	4618      	mov	r0, r3
 800556e:	f001 fc0d 	bl	8006d8c <RCCEx_PLL2_Config>
 8005572:	4603      	mov	r3, r0
 8005574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005578:	e00f      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800557a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800557e:	3328      	adds	r3, #40	@ 0x28
 8005580:	2102      	movs	r1, #2
 8005582:	4618      	mov	r0, r3
 8005584:	f001 fcb4 	bl	8006ef0 <RCCEx_PLL3_Config>
 8005588:	4603      	mov	r3, r0
 800558a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800558e:	e004      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005596:	e000      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800559a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10b      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055a2:	4b4b      	ldr	r3, [pc, #300]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80055aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80055b2:	4a47      	ldr	r2, [pc, #284]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055b4:	430b      	orrs	r3, r1
 80055b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80055b8:	e003      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80055ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055d0:	2300      	movs	r3, #0
 80055d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80055d8:	460b      	mov	r3, r1
 80055da:	4313      	orrs	r3, r2
 80055dc:	d03b      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80055de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055ea:	d01f      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80055ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055f0:	d818      	bhi.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80055f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055f6:	d003      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80055f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055fc:	d007      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80055fe:	e011      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005600:	4b33      	ldr	r3, [pc, #204]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005604:	4a32      	ldr	r2, [pc, #200]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005606:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800560a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800560c:	e00f      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800560e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005612:	3328      	adds	r3, #40	@ 0x28
 8005614:	2101      	movs	r1, #1
 8005616:	4618      	mov	r0, r3
 8005618:	f001 fc6a 	bl	8006ef0 <RCCEx_PLL3_Config>
 800561c:	4603      	mov	r3, r0
 800561e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005622:	e004      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800562a:	e000      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800562c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800562e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10b      	bne.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005636:	4b26      	ldr	r3, [pc, #152]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800563a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800563e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005646:	4a22      	ldr	r2, [pc, #136]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005648:	430b      	orrs	r3, r1
 800564a:	6553      	str	r3, [r2, #84]	@ 0x54
 800564c:	e003      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005652:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005662:	673b      	str	r3, [r7, #112]	@ 0x70
 8005664:	2300      	movs	r3, #0
 8005666:	677b      	str	r3, [r7, #116]	@ 0x74
 8005668:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800566c:	460b      	mov	r3, r1
 800566e:	4313      	orrs	r3, r2
 8005670:	d034      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800567c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005680:	d007      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005682:	e011      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005684:	4b12      	ldr	r3, [pc, #72]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005688:	4a11      	ldr	r2, [pc, #68]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800568a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800568e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005690:	e00e      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005696:	3308      	adds	r3, #8
 8005698:	2102      	movs	r1, #2
 800569a:	4618      	mov	r0, r3
 800569c:	f001 fb76 	bl	8006d8c <RCCEx_PLL2_Config>
 80056a0:	4603      	mov	r3, r0
 80056a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80056a6:	e003      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10d      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80056b8:	4b05      	ldr	r3, [pc, #20]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80056c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056c6:	4a02      	ldr	r2, [pc, #8]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056c8:	430b      	orrs	r3, r1
 80056ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80056cc:	e006      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80056ce:	bf00      	nop
 80056d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80056e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056ea:	2300      	movs	r3, #0
 80056ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80056f2:	460b      	mov	r3, r1
 80056f4:	4313      	orrs	r3, r2
 80056f6:	d00c      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fc:	3328      	adds	r3, #40	@ 0x28
 80056fe:	2102      	movs	r1, #2
 8005700:	4618      	mov	r0, r3
 8005702:	f001 fbf5 	bl	8006ef0 <RCCEx_PLL3_Config>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800571e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005720:	2300      	movs	r3, #0
 8005722:	667b      	str	r3, [r7, #100]	@ 0x64
 8005724:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005728:	460b      	mov	r3, r1
 800572a:	4313      	orrs	r3, r2
 800572c:	d038      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800572e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005736:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800573a:	d018      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800573c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005740:	d811      	bhi.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005742:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005746:	d014      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005748:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800574c:	d80b      	bhi.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d011      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005752:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005756:	d106      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005758:	4bc3      	ldr	r3, [pc, #780]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800575a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575c:	4ac2      	ldr	r2, [pc, #776]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800575e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005762:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005764:	e008      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800576c:	e004      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800576e:	bf00      	nop
 8005770:	e002      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005772:	bf00      	nop
 8005774:	e000      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005778:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10b      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005780:	4bb9      	ldr	r3, [pc, #740]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005784:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005790:	4ab5      	ldr	r2, [pc, #724]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005792:	430b      	orrs	r3, r1
 8005794:	6553      	str	r3, [r2, #84]	@ 0x54
 8005796:	e003      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800579c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80057ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057ae:	2300      	movs	r3, #0
 80057b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057b2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80057b6:	460b      	mov	r3, r1
 80057b8:	4313      	orrs	r3, r2
 80057ba:	d009      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057bc:	4baa      	ldr	r3, [pc, #680]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80057c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ca:	4aa7      	ldr	r2, [pc, #668]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057cc:	430b      	orrs	r3, r1
 80057ce:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80057d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80057dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80057de:	2300      	movs	r3, #0
 80057e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80057e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80057e6:	460b      	mov	r3, r1
 80057e8:	4313      	orrs	r3, r2
 80057ea:	d00a      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80057ec:	4b9e      	ldr	r3, [pc, #632]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80057f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80057fc:	4a9a      	ldr	r2, [pc, #616]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057fe:	430b      	orrs	r3, r1
 8005800:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800580e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005810:	2300      	movs	r3, #0
 8005812:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005814:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005818:	460b      	mov	r3, r1
 800581a:	4313      	orrs	r3, r2
 800581c:	d009      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800581e:	4b92      	ldr	r3, [pc, #584]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005822:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800582c:	4a8e      	ldr	r2, [pc, #568]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800582e:	430b      	orrs	r3, r1
 8005830:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800583e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005840:	2300      	movs	r3, #0
 8005842:	647b      	str	r3, [r7, #68]	@ 0x44
 8005844:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005848:	460b      	mov	r3, r1
 800584a:	4313      	orrs	r3, r2
 800584c:	d00e      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800584e:	4b86      	ldr	r3, [pc, #536]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	4a85      	ldr	r2, [pc, #532]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005854:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005858:	6113      	str	r3, [r2, #16]
 800585a:	4b83      	ldr	r3, [pc, #524]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800585c:	6919      	ldr	r1, [r3, #16]
 800585e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005862:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005866:	4a80      	ldr	r2, [pc, #512]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005868:	430b      	orrs	r3, r1
 800586a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800586c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005878:	63bb      	str	r3, [r7, #56]	@ 0x38
 800587a:	2300      	movs	r3, #0
 800587c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800587e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005882:	460b      	mov	r3, r1
 8005884:	4313      	orrs	r3, r2
 8005886:	d009      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005888:	4b77      	ldr	r3, [pc, #476]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800588a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800588c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005896:	4a74      	ldr	r2, [pc, #464]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005898:	430b      	orrs	r3, r1
 800589a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800589c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80058a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80058aa:	2300      	movs	r3, #0
 80058ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80058b2:	460b      	mov	r3, r1
 80058b4:	4313      	orrs	r3, r2
 80058b6:	d00a      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80058b8:	4b6b      	ldr	r3, [pc, #428]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058bc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80058c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058c8:	4a67      	ldr	r2, [pc, #412]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058ca:	430b      	orrs	r3, r1
 80058cc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80058ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	2100      	movs	r1, #0
 80058d8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058e0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80058e4:	460b      	mov	r3, r1
 80058e6:	4313      	orrs	r3, r2
 80058e8:	d011      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ee:	3308      	adds	r3, #8
 80058f0:	2100      	movs	r1, #0
 80058f2:	4618      	mov	r0, r3
 80058f4:	f001 fa4a 	bl	8006d8c <RCCEx_PLL2_Config>
 80058f8:	4603      	mov	r3, r0
 80058fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80058fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800590a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800590e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005916:	2100      	movs	r1, #0
 8005918:	6239      	str	r1, [r7, #32]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005920:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005924:	460b      	mov	r3, r1
 8005926:	4313      	orrs	r3, r2
 8005928:	d011      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800592a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592e:	3308      	adds	r3, #8
 8005930:	2101      	movs	r1, #1
 8005932:	4618      	mov	r0, r3
 8005934:	f001 fa2a 	bl	8006d8c <RCCEx_PLL2_Config>
 8005938:	4603      	mov	r3, r0
 800593a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800593e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800594a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800594e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005956:	2100      	movs	r1, #0
 8005958:	61b9      	str	r1, [r7, #24]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	61fb      	str	r3, [r7, #28]
 8005960:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005964:	460b      	mov	r3, r1
 8005966:	4313      	orrs	r3, r2
 8005968:	d011      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800596a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800596e:	3308      	adds	r3, #8
 8005970:	2102      	movs	r1, #2
 8005972:	4618      	mov	r0, r3
 8005974:	f001 fa0a 	bl	8006d8c <RCCEx_PLL2_Config>
 8005978:	4603      	mov	r3, r0
 800597a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800597e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800598a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800598e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005996:	2100      	movs	r1, #0
 8005998:	6139      	str	r1, [r7, #16]
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80059a4:	460b      	mov	r3, r1
 80059a6:	4313      	orrs	r3, r2
 80059a8:	d011      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ae:	3328      	adds	r3, #40	@ 0x28
 80059b0:	2100      	movs	r1, #0
 80059b2:	4618      	mov	r0, r3
 80059b4:	f001 fa9c 	bl	8006ef0 <RCCEx_PLL3_Config>
 80059b8:	4603      	mov	r3, r0
 80059ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80059be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80059ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d6:	2100      	movs	r1, #0
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	f003 0310 	and.w	r3, r3, #16
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80059e4:	460b      	mov	r3, r1
 80059e6:	4313      	orrs	r3, r2
 80059e8:	d011      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ee:	3328      	adds	r3, #40	@ 0x28
 80059f0:	2101      	movs	r1, #1
 80059f2:	4618      	mov	r0, r3
 80059f4:	f001 fa7c 	bl	8006ef0 <RCCEx_PLL3_Config>
 80059f8:	4603      	mov	r3, r0
 80059fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80059fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a16:	2100      	movs	r1, #0
 8005a18:	6039      	str	r1, [r7, #0]
 8005a1a:	f003 0320 	and.w	r3, r3, #32
 8005a1e:	607b      	str	r3, [r7, #4]
 8005a20:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005a24:	460b      	mov	r3, r1
 8005a26:	4313      	orrs	r3, r2
 8005a28:	d011      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a2e:	3328      	adds	r3, #40	@ 0x28
 8005a30:	2102      	movs	r1, #2
 8005a32:	4618      	mov	r0, r3
 8005a34:	f001 fa5c 	bl	8006ef0 <RCCEx_PLL3_Config>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005a4e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	e000      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005a62:	46bd      	mov	sp, r7
 8005a64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a68:	58024400 	.word	0x58024400

08005a6c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b090      	sub	sp, #64	@ 0x40
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a7a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005a7e:	430b      	orrs	r3, r1
 8005a80:	f040 8094 	bne.w	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005a84:	4b9e      	ldr	r3, [pc, #632]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	f200 8087 	bhi.w	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005a96:	a201      	add	r2, pc, #4	@ (adr r2, 8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9c:	08005ab1 	.word	0x08005ab1
 8005aa0:	08005ad9 	.word	0x08005ad9
 8005aa4:	08005b01 	.word	0x08005b01
 8005aa8:	08005b9d 	.word	0x08005b9d
 8005aac:	08005b29 	.word	0x08005b29
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ab0:	4b93      	ldr	r3, [pc, #588]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ab8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005abc:	d108      	bne.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005abe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f001 f810 	bl	8006ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005acc:	f000 bd45 	b.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ad4:	f000 bd41 	b.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ad8:	4b89      	ldr	r3, [pc, #548]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ae0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ae4:	d108      	bne.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ae6:	f107 0318 	add.w	r3, r7, #24
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 fd54 	bl	8006598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005af4:	f000 bd31 	b.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005af8:	2300      	movs	r3, #0
 8005afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005afc:	f000 bd2d 	b.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b00:	4b7f      	ldr	r3, [pc, #508]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b0c:	d108      	bne.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b0e:	f107 030c 	add.w	r3, r7, #12
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 fe94 	bl	8006840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b1c:	f000 bd1d 	b.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b20:	2300      	movs	r3, #0
 8005b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b24:	f000 bd19 	b.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005b28:	4b75      	ldr	r3, [pc, #468]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b30:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b32:	4b73      	ldr	r3, [pc, #460]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0304 	and.w	r3, r3, #4
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	d10c      	bne.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d109      	bne.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b44:	4b6e      	ldr	r3, [pc, #440]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	08db      	lsrs	r3, r3, #3
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	4a6d      	ldr	r2, [pc, #436]	@ (8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005b50:	fa22 f303 	lsr.w	r3, r2, r3
 8005b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b56:	e01f      	b.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b58:	4b69      	ldr	r3, [pc, #420]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b64:	d106      	bne.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b6c:	d102      	bne.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005b6e:	4b66      	ldr	r3, [pc, #408]	@ (8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b72:	e011      	b.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b74:	4b62      	ldr	r3, [pc, #392]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b80:	d106      	bne.n	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b88:	d102      	bne.n	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005b8a:	4b60      	ldr	r3, [pc, #384]	@ (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b8e:	e003      	b.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005b94:	f000 bce1 	b.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b98:	f000 bcdf 	b.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b9c:	4b5c      	ldr	r3, [pc, #368]	@ (8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ba0:	f000 bcdb 	b.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ba8:	f000 bcd7 	b.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bb0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	f040 80ad 	bne.w	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005bba:	4b51      	ldr	r3, [pc, #324]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bbe:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005bc2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bca:	d056      	beq.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bd2:	f200 8090 	bhi.w	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd8:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bda:	f000 8088 	beq.w	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8005bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be0:	2bc0      	cmp	r3, #192	@ 0xc0
 8005be2:	f200 8088 	bhi.w	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be8:	2b80      	cmp	r3, #128	@ 0x80
 8005bea:	d032      	beq.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bee:	2b80      	cmp	r3, #128	@ 0x80
 8005bf0:	f200 8081 	bhi.w	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfc:	2b40      	cmp	r3, #64	@ 0x40
 8005bfe:	d014      	beq.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005c00:	e079      	b.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c02:	4b3f      	ldr	r3, [pc, #252]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c0e:	d108      	bne.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 ff67 	bl	8006ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c1e:	f000 bc9c 	b.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c22:	2300      	movs	r3, #0
 8005c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c26:	f000 bc98 	b.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c2a:	4b35      	ldr	r3, [pc, #212]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c36:	d108      	bne.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c38:	f107 0318 	add.w	r3, r7, #24
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 fcab 	bl	8006598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c46:	f000 bc88 	b.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c4e:	f000 bc84 	b.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c52:	4b2b      	ldr	r3, [pc, #172]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c5e:	d108      	bne.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c60:	f107 030c 	add.w	r3, r7, #12
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fdeb 	bl	8006840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c6e:	f000 bc74 	b.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c72:	2300      	movs	r3, #0
 8005c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c76:	f000 bc70 	b.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c7a:	4b21      	ldr	r3, [pc, #132]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c82:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c84:	4b1e      	ldr	r3, [pc, #120]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d10c      	bne.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d109      	bne.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c96:	4b1a      	ldr	r3, [pc, #104]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	08db      	lsrs	r3, r3, #3
 8005c9c:	f003 0303 	and.w	r3, r3, #3
 8005ca0:	4a18      	ldr	r2, [pc, #96]	@ (8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ca8:	e01f      	b.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005caa:	4b15      	ldr	r3, [pc, #84]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cb6:	d106      	bne.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cbe:	d102      	bne.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005cc0:	4b11      	ldr	r3, [pc, #68]	@ (8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cc4:	e011      	b.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cd2:	d106      	bne.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cda:	d102      	bne.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ce0:	e003      	b.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005ce6:	f000 bc38 	b.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005cea:	f000 bc36 	b.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005cee:	4b08      	ldr	r3, [pc, #32]	@ (8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cf2:	f000 bc32 	b.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cfa:	f000 bc2e 	b.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005cfe:	bf00      	nop
 8005d00:	58024400 	.word	0x58024400
 8005d04:	03d09000 	.word	0x03d09000
 8005d08:	003d0900 	.word	0x003d0900
 8005d0c:	007a1200 	.word	0x007a1200
 8005d10:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d18:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005d1c:	430b      	orrs	r3, r1
 8005d1e:	f040 809c 	bne.w	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005d22:	4b9e      	ldr	r3, [pc, #632]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d26:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8005d2a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d32:	d054      	beq.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d3a:	f200 808b 	bhi.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d40:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005d44:	f000 8083 	beq.w	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005d4e:	f200 8081 	bhi.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d58:	d02f      	beq.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d60:	d878      	bhi.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d004      	beq.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d6e:	d012      	beq.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005d70:	e070      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d72:	4b8a      	ldr	r3, [pc, #552]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d7e:	d107      	bne.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 feaf 	bl	8006ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d8e:	e3e4      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d90:	2300      	movs	r3, #0
 8005d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d94:	e3e1      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d96:	4b81      	ldr	r3, [pc, #516]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005da2:	d107      	bne.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005da4:	f107 0318 	add.w	r3, r7, #24
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 fbf5 	bl	8006598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005db2:	e3d2      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005db4:	2300      	movs	r3, #0
 8005db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005db8:	e3cf      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005dba:	4b78      	ldr	r3, [pc, #480]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005dc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dc6:	d107      	bne.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dc8:	f107 030c 	add.w	r3, r7, #12
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 fd37 	bl	8006840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dd6:	e3c0      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ddc:	e3bd      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005dde:	4b6f      	ldr	r3, [pc, #444]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005de2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005de6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005de8:	4b6c      	ldr	r3, [pc, #432]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b04      	cmp	r3, #4
 8005df2:	d10c      	bne.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d109      	bne.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dfa:	4b68      	ldr	r3, [pc, #416]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	08db      	lsrs	r3, r3, #3
 8005e00:	f003 0303 	and.w	r3, r3, #3
 8005e04:	4a66      	ldr	r2, [pc, #408]	@ (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005e06:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e0c:	e01e      	b.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e0e:	4b63      	ldr	r3, [pc, #396]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e1a:	d106      	bne.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e22:	d102      	bne.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005e24:	4b5f      	ldr	r3, [pc, #380]	@ (8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e28:	e010      	b.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e2a:	4b5c      	ldr	r3, [pc, #368]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e36:	d106      	bne.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e3e:	d102      	bne.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005e40:	4b59      	ldr	r3, [pc, #356]	@ (8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e44:	e002      	b.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005e46:	2300      	movs	r3, #0
 8005e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005e4a:	e386      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005e4c:	e385      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005e4e:	4b57      	ldr	r3, [pc, #348]	@ (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e52:	e382      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005e54:	2300      	movs	r3, #0
 8005e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e58:	e37f      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005e5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e5e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005e62:	430b      	orrs	r3, r1
 8005e64:	f040 80a7 	bne.w	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005e68:	4b4c      	ldr	r3, [pc, #304]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e6c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005e70:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e78:	d055      	beq.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e80:	f200 8096 	bhi.w	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e8a:	f000 8084 	beq.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e94:	f200 808c 	bhi.w	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e9e:	d030      	beq.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ea6:	f200 8083 	bhi.w	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d004      	beq.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005eb6:	d012      	beq.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005eb8:	e07a      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005eba:	4b38      	ldr	r3, [pc, #224]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ec2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ec6:	d107      	bne.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 fe0b 	bl	8006ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ed6:	e340      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005edc:	e33d      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ede:	4b2f      	ldr	r3, [pc, #188]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ee6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005eea:	d107      	bne.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eec:	f107 0318 	add.w	r3, r7, #24
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 fb51 	bl	8006598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005efa:	e32e      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f00:	e32b      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f02:	4b26      	ldr	r3, [pc, #152]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f0e:	d107      	bne.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f10:	f107 030c 	add.w	r3, r7, #12
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 fc93 	bl	8006840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f1e:	e31c      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f20:	2300      	movs	r3, #0
 8005f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f24:	e319      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f26:	4b1d      	ldr	r3, [pc, #116]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f2e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f30:	4b1a      	ldr	r3, [pc, #104]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b04      	cmp	r3, #4
 8005f3a:	d10c      	bne.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d109      	bne.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f42:	4b16      	ldr	r3, [pc, #88]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	08db      	lsrs	r3, r3, #3
 8005f48:	f003 0303 	and.w	r3, r3, #3
 8005f4c:	4a14      	ldr	r2, [pc, #80]	@ (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f54:	e01e      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f56:	4b11      	ldr	r3, [pc, #68]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f62:	d106      	bne.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f6a:	d102      	bne.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f70:	e010      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f72:	4b0a      	ldr	r3, [pc, #40]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f7e:	d106      	bne.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f86:	d102      	bne.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005f88:	4b07      	ldr	r3, [pc, #28]	@ (8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f8c:	e002      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005f92:	e2e2      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f94:	e2e1      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005f96:	4b05      	ldr	r3, [pc, #20]	@ (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f9a:	e2de      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f9c:	58024400 	.word	0x58024400
 8005fa0:	03d09000 	.word	0x03d09000
 8005fa4:	003d0900 	.word	0x003d0900
 8005fa8:	007a1200 	.word	0x007a1200
 8005fac:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fb4:	e2d1      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005fb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fba:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005fbe:	430b      	orrs	r3, r1
 8005fc0:	f040 809c 	bne.w	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005fc4:	4b93      	ldr	r3, [pc, #588]	@ (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fc8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005fcc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fd4:	d054      	beq.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fdc:	f200 808b 	bhi.w	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fe6:	f000 8083 	beq.w	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ff0:	f200 8081 	bhi.w	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ffa:	d02f      	beq.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006002:	d878      	bhi.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006006:	2b00      	cmp	r3, #0
 8006008:	d004      	beq.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800600a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006010:	d012      	beq.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006012:	e070      	b.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006014:	4b7f      	ldr	r3, [pc, #508]	@ (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800601c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006020:	d107      	bne.n	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fd5e 	bl	8006ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800602c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800602e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006030:	e293      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006032:	2300      	movs	r3, #0
 8006034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006036:	e290      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006038:	4b76      	ldr	r3, [pc, #472]	@ (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006040:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006044:	d107      	bne.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006046:	f107 0318 	add.w	r3, r7, #24
 800604a:	4618      	mov	r0, r3
 800604c:	f000 faa4 	bl	8006598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006054:	e281      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006056:	2300      	movs	r3, #0
 8006058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800605a:	e27e      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800605c:	4b6d      	ldr	r3, [pc, #436]	@ (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006064:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006068:	d107      	bne.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800606a:	f107 030c 	add.w	r3, r7, #12
 800606e:	4618      	mov	r0, r3
 8006070:	f000 fbe6 	bl	8006840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006078:	e26f      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800607a:	2300      	movs	r3, #0
 800607c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800607e:	e26c      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006080:	4b64      	ldr	r3, [pc, #400]	@ (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006084:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006088:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800608a:	4b62      	ldr	r3, [pc, #392]	@ (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0304 	and.w	r3, r3, #4
 8006092:	2b04      	cmp	r3, #4
 8006094:	d10c      	bne.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006098:	2b00      	cmp	r3, #0
 800609a:	d109      	bne.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800609c:	4b5d      	ldr	r3, [pc, #372]	@ (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	08db      	lsrs	r3, r3, #3
 80060a2:	f003 0303 	and.w	r3, r3, #3
 80060a6:	4a5c      	ldr	r2, [pc, #368]	@ (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80060a8:	fa22 f303 	lsr.w	r3, r2, r3
 80060ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060ae:	e01e      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80060b0:	4b58      	ldr	r3, [pc, #352]	@ (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060bc:	d106      	bne.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80060be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060c4:	d102      	bne.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80060c6:	4b55      	ldr	r3, [pc, #340]	@ (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80060c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060ca:	e010      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060cc:	4b51      	ldr	r3, [pc, #324]	@ (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060d8:	d106      	bne.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80060da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060e0:	d102      	bne.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80060e2:	4b4f      	ldr	r3, [pc, #316]	@ (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80060e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060e6:	e002      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80060e8:	2300      	movs	r3, #0
 80060ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80060ec:	e235      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80060ee:	e234      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80060f0:	4b4c      	ldr	r3, [pc, #304]	@ (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80060f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060f4:	e231      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060fa:	e22e      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80060fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006100:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006104:	430b      	orrs	r3, r1
 8006106:	f040 808f 	bne.w	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800610a:	4b42      	ldr	r3, [pc, #264]	@ (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800610c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800610e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006112:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006116:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800611a:	d06b      	beq.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800611c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006122:	d874      	bhi.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006126:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800612a:	d056      	beq.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800612c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800612e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006132:	d86c      	bhi.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006136:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800613a:	d03b      	beq.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800613c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800613e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006142:	d864      	bhi.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006146:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800614a:	d021      	beq.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800614c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006152:	d85c      	bhi.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006156:	2b00      	cmp	r3, #0
 8006158:	d004      	beq.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800615a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800615c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006160:	d004      	beq.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006162:	e054      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006164:	f7fe fa4c 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
 8006168:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800616a:	e1f6      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800616c:	4b29      	ldr	r3, [pc, #164]	@ (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006174:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006178:	d107      	bne.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800617a:	f107 0318 	add.w	r3, r7, #24
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fa0a 	bl	8006598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006188:	e1e7      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800618a:	2300      	movs	r3, #0
 800618c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800618e:	e1e4      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006190:	4b20      	ldr	r3, [pc, #128]	@ (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800619c:	d107      	bne.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800619e:	f107 030c 	add.w	r3, r7, #12
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 fb4c 	bl	8006840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061ac:	e1d5      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061ae:	2300      	movs	r3, #0
 80061b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061b2:	e1d2      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061b4:	4b17      	ldr	r3, [pc, #92]	@ (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b04      	cmp	r3, #4
 80061be:	d109      	bne.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061c0:	4b14      	ldr	r3, [pc, #80]	@ (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	08db      	lsrs	r3, r3, #3
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	4a13      	ldr	r2, [pc, #76]	@ (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80061cc:	fa22 f303 	lsr.w	r3, r2, r3
 80061d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061d2:	e1c2      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061d4:	2300      	movs	r3, #0
 80061d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d8:	e1bf      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80061da:	4b0e      	ldr	r3, [pc, #56]	@ (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061e6:	d102      	bne.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80061e8:	4b0c      	ldr	r3, [pc, #48]	@ (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80061ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061ec:	e1b5      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061ee:	2300      	movs	r3, #0
 80061f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061f2:	e1b2      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061f4:	4b07      	ldr	r3, [pc, #28]	@ (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006200:	d102      	bne.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006202:	4b07      	ldr	r3, [pc, #28]	@ (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006206:	e1a8      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006208:	2300      	movs	r3, #0
 800620a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800620c:	e1a5      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800620e:	2300      	movs	r3, #0
 8006210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006212:	e1a2      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006214:	58024400 	.word	0x58024400
 8006218:	03d09000 	.word	0x03d09000
 800621c:	003d0900 	.word	0x003d0900
 8006220:	007a1200 	.word	0x007a1200
 8006224:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800622c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006230:	430b      	orrs	r3, r1
 8006232:	d173      	bne.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006234:	4b9c      	ldr	r3, [pc, #624]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006238:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800623c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800623e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006240:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006244:	d02f      	beq.n	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006248:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800624c:	d863      	bhi.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800624e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006250:	2b00      	cmp	r3, #0
 8006252:	d004      	beq.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800625a:	d012      	beq.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800625c:	e05b      	b.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800625e:	4b92      	ldr	r3, [pc, #584]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006266:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800626a:	d107      	bne.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800626c:	f107 0318 	add.w	r3, r7, #24
 8006270:	4618      	mov	r0, r3
 8006272:	f000 f991 	bl	8006598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800627a:	e16e      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800627c:	2300      	movs	r3, #0
 800627e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006280:	e16b      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006282:	4b89      	ldr	r3, [pc, #548]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800628a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800628e:	d107      	bne.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006290:	f107 030c 	add.w	r3, r7, #12
 8006294:	4618      	mov	r0, r3
 8006296:	f000 fad3 	bl	8006840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800629e:	e15c      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80062a0:	2300      	movs	r3, #0
 80062a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062a4:	e159      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80062a6:	4b80      	ldr	r3, [pc, #512]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80062a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80062ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062b0:	4b7d      	ldr	r3, [pc, #500]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d10c      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80062bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d109      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062c2:	4b79      	ldr	r3, [pc, #484]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	08db      	lsrs	r3, r3, #3
 80062c8:	f003 0303 	and.w	r3, r3, #3
 80062cc:	4a77      	ldr	r2, [pc, #476]	@ (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80062ce:	fa22 f303 	lsr.w	r3, r2, r3
 80062d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062d4:	e01e      	b.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062d6:	4b74      	ldr	r3, [pc, #464]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062e2:	d106      	bne.n	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80062e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062ea:	d102      	bne.n	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80062ec:	4b70      	ldr	r3, [pc, #448]	@ (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80062ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062f0:	e010      	b.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062f2:	4b6d      	ldr	r3, [pc, #436]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062fe:	d106      	bne.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006302:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006306:	d102      	bne.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006308:	4b6a      	ldr	r3, [pc, #424]	@ (80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800630a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800630c:	e002      	b.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800630e:	2300      	movs	r3, #0
 8006310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006312:	e122      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006314:	e121      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800631a:	e11e      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800631c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006320:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006324:	430b      	orrs	r3, r1
 8006326:	d133      	bne.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006328:	4b5f      	ldr	r3, [pc, #380]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800632a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800632c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006330:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006334:	2b00      	cmp	r3, #0
 8006336:	d004      	beq.n	8006342 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800633e:	d012      	beq.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006340:	e023      	b.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006342:	4b59      	ldr	r3, [pc, #356]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800634a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800634e:	d107      	bne.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006350:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006354:	4618      	mov	r0, r3
 8006356:	f000 fbc7 	bl	8006ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800635a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800635e:	e0fc      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006360:	2300      	movs	r3, #0
 8006362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006364:	e0f9      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006366:	4b50      	ldr	r3, [pc, #320]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800636e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006372:	d107      	bne.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006374:	f107 0318 	add.w	r3, r7, #24
 8006378:	4618      	mov	r0, r3
 800637a:	f000 f90d 	bl	8006598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006382:	e0ea      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006384:	2300      	movs	r3, #0
 8006386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006388:	e0e7      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800638a:	2300      	movs	r3, #0
 800638c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800638e:	e0e4      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006394:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006398:	430b      	orrs	r3, r1
 800639a:	f040 808d 	bne.w	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800639e:	4b42      	ldr	r3, [pc, #264]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80063a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063a2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80063a6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80063a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063ae:	d06b      	beq.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80063b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063b6:	d874      	bhi.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80063b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063be:	d056      	beq.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80063c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063c6:	d86c      	bhi.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80063c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80063ce:	d03b      	beq.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80063d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80063d6:	d864      	bhi.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80063d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063de:	d021      	beq.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80063e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063e6:	d85c      	bhi.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80063e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d004      	beq.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80063ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063f4:	d004      	beq.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80063f6:	e054      	b.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80063f8:	f000 f8b8 	bl	800656c <HAL_RCCEx_GetD3PCLK1Freq>
 80063fc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063fe:	e0ac      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006400:	4b29      	ldr	r3, [pc, #164]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006408:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800640c:	d107      	bne.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800640e:	f107 0318 	add.w	r3, r7, #24
 8006412:	4618      	mov	r0, r3
 8006414:	f000 f8c0 	bl	8006598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800641c:	e09d      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800641e:	2300      	movs	r3, #0
 8006420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006422:	e09a      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006424:	4b20      	ldr	r3, [pc, #128]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800642c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006430:	d107      	bne.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006432:	f107 030c 	add.w	r3, r7, #12
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fa02 	bl	8006840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006440:	e08b      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006442:	2300      	movs	r3, #0
 8006444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006446:	e088      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006448:	4b17      	ldr	r3, [pc, #92]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b04      	cmp	r3, #4
 8006452:	d109      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006454:	4b14      	ldr	r3, [pc, #80]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	08db      	lsrs	r3, r3, #3
 800645a:	f003 0303 	and.w	r3, r3, #3
 800645e:	4a13      	ldr	r2, [pc, #76]	@ (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006460:	fa22 f303 	lsr.w	r3, r2, r3
 8006464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006466:	e078      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006468:	2300      	movs	r3, #0
 800646a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800646c:	e075      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800646e:	4b0e      	ldr	r3, [pc, #56]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800647a:	d102      	bne.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800647c:	4b0c      	ldr	r3, [pc, #48]	@ (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800647e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006480:	e06b      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006482:	2300      	movs	r3, #0
 8006484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006486:	e068      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006488:	4b07      	ldr	r3, [pc, #28]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006490:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006494:	d102      	bne.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006496:	4b07      	ldr	r3, [pc, #28]	@ (80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800649a:	e05e      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800649c:	2300      	movs	r3, #0
 800649e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064a0:	e05b      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80064a2:	2300      	movs	r3, #0
 80064a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064a6:	e058      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80064a8:	58024400 	.word	0x58024400
 80064ac:	03d09000 	.word	0x03d09000
 80064b0:	003d0900 	.word	0x003d0900
 80064b4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80064b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064bc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80064c0:	430b      	orrs	r3, r1
 80064c2:	d148      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80064c4:	4b27      	ldr	r3, [pc, #156]	@ (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80064cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80064ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064d4:	d02a      	beq.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80064d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064dc:	d838      	bhi.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80064de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d004      	beq.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80064e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064ea:	d00d      	beq.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80064ec:	e030      	b.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80064ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064fa:	d102      	bne.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80064fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80064fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006500:	e02b      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006506:	e028      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006508:	4b16      	ldr	r3, [pc, #88]	@ (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006510:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006514:	d107      	bne.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006516:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fae4 	bl	8006ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006524:	e019      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006526:	2300      	movs	r3, #0
 8006528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800652a:	e016      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800652c:	4b0d      	ldr	r3, [pc, #52]	@ (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006534:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006538:	d107      	bne.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800653a:	f107 0318 	add.w	r3, r7, #24
 800653e:	4618      	mov	r0, r3
 8006540:	f000 f82a 	bl	8006598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006548:	e007      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800654a:	2300      	movs	r3, #0
 800654c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800654e:	e004      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006550:	2300      	movs	r3, #0
 8006552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006554:	e001      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006556:	2300      	movs	r3, #0
 8006558:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800655a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800655c:	4618      	mov	r0, r3
 800655e:	3740      	adds	r7, #64	@ 0x40
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	58024400 	.word	0x58024400
 8006568:	007a1200 	.word	0x007a1200

0800656c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006570:	f7fe f816 	bl	80045a0 <HAL_RCC_GetHCLKFreq>
 8006574:	4602      	mov	r2, r0
 8006576:	4b06      	ldr	r3, [pc, #24]	@ (8006590 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	091b      	lsrs	r3, r3, #4
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	4904      	ldr	r1, [pc, #16]	@ (8006594 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006582:	5ccb      	ldrb	r3, [r1, r3]
 8006584:	f003 031f 	and.w	r3, r3, #31
 8006588:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800658c:	4618      	mov	r0, r3
 800658e:	bd80      	pop	{r7, pc}
 8006590:	58024400 	.word	0x58024400
 8006594:	08008594 	.word	0x08008594

08006598 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006598:	b480      	push	{r7}
 800659a:	b089      	sub	sp, #36	@ 0x24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065a0:	4ba1      	ldr	r3, [pc, #644]	@ (8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a4:	f003 0303 	and.w	r3, r3, #3
 80065a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80065aa:	4b9f      	ldr	r3, [pc, #636]	@ (8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ae:	0b1b      	lsrs	r3, r3, #12
 80065b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80065b6:	4b9c      	ldr	r3, [pc, #624]	@ (8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ba:	091b      	lsrs	r3, r3, #4
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80065c2:	4b99      	ldr	r3, [pc, #612]	@ (8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c6:	08db      	lsrs	r3, r3, #3
 80065c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	fb02 f303 	mul.w	r3, r2, r3
 80065d2:	ee07 3a90 	vmov	s15, r3
 80065d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 8111 	beq.w	8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	f000 8083 	beq.w	80066f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	f200 80a1 	bhi.w	8006738 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d056      	beq.n	80066b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006602:	e099      	b.n	8006738 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006604:	4b88      	ldr	r3, [pc, #544]	@ (8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b00      	cmp	r3, #0
 800660e:	d02d      	beq.n	800666c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006610:	4b85      	ldr	r3, [pc, #532]	@ (8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	08db      	lsrs	r3, r3, #3
 8006616:	f003 0303 	and.w	r3, r3, #3
 800661a:	4a84      	ldr	r2, [pc, #528]	@ (800682c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800661c:	fa22 f303 	lsr.w	r3, r2, r3
 8006620:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	ee07 3a90 	vmov	s15, r3
 8006628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	ee07 3a90 	vmov	s15, r3
 8006632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800663a:	4b7b      	ldr	r3, [pc, #492]	@ (8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800663c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006642:	ee07 3a90 	vmov	s15, r3
 8006646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800664a:	ed97 6a03 	vldr	s12, [r7, #12]
 800664e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800665a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800665e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006666:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800666a:	e087      	b.n	800677c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	ee07 3a90 	vmov	s15, r3
 8006672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006676:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006834 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800667a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800667e:	4b6a      	ldr	r3, [pc, #424]	@ (8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800668e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006692:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800669a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800669e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066ae:	e065      	b.n	800677c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	ee07 3a90 	vmov	s15, r3
 80066b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006838 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80066be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066c2:	4b59      	ldr	r3, [pc, #356]	@ (8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ca:	ee07 3a90 	vmov	s15, r3
 80066ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80066d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066f2:	e043      	b.n	800677c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	ee07 3a90 	vmov	s15, r3
 80066fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800683c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006706:	4b48      	ldr	r3, [pc, #288]	@ (8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800670e:	ee07 3a90 	vmov	s15, r3
 8006712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006716:	ed97 6a03 	vldr	s12, [r7, #12]
 800671a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800671e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800672a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800672e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006736:	e021      	b.n	800677c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	ee07 3a90 	vmov	s15, r3
 800673e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006742:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006838 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800674a:	4b37      	ldr	r3, [pc, #220]	@ (8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800674c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800674e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006752:	ee07 3a90 	vmov	s15, r3
 8006756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800675a:	ed97 6a03 	vldr	s12, [r7, #12]
 800675e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800676a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800676e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800677a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800677c:	4b2a      	ldr	r3, [pc, #168]	@ (8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800677e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006780:	0a5b      	lsrs	r3, r3, #9
 8006782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006786:	ee07 3a90 	vmov	s15, r3
 800678a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006792:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006796:	edd7 6a07 	vldr	s13, [r7, #28]
 800679a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800679e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067a2:	ee17 2a90 	vmov	r2, s15
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80067aa:	4b1f      	ldr	r3, [pc, #124]	@ (8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ae:	0c1b      	lsrs	r3, r3, #16
 80067b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067b4:	ee07 3a90 	vmov	s15, r3
 80067b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80067c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067d0:	ee17 2a90 	vmov	r2, s15
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80067d8:	4b13      	ldr	r3, [pc, #76]	@ (8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067dc:	0e1b      	lsrs	r3, r3, #24
 80067de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80067f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067fe:	ee17 2a90 	vmov	r2, s15
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006806:	e008      	b.n	800681a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	609a      	str	r2, [r3, #8]
}
 800681a:	bf00      	nop
 800681c:	3724      	adds	r7, #36	@ 0x24
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	58024400 	.word	0x58024400
 800682c:	03d09000 	.word	0x03d09000
 8006830:	46000000 	.word	0x46000000
 8006834:	4c742400 	.word	0x4c742400
 8006838:	4a742400 	.word	0x4a742400
 800683c:	4af42400 	.word	0x4af42400

08006840 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006840:	b480      	push	{r7}
 8006842:	b089      	sub	sp, #36	@ 0x24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006848:	4ba1      	ldr	r3, [pc, #644]	@ (8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800684a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684c:	f003 0303 	and.w	r3, r3, #3
 8006850:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006852:	4b9f      	ldr	r3, [pc, #636]	@ (8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006856:	0d1b      	lsrs	r3, r3, #20
 8006858:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800685c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800685e:	4b9c      	ldr	r3, [pc, #624]	@ (8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006862:	0a1b      	lsrs	r3, r3, #8
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800686a:	4b99      	ldr	r3, [pc, #612]	@ (8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800686c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800686e:	08db      	lsrs	r3, r3, #3
 8006870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	fb02 f303 	mul.w	r3, r2, r3
 800687a:	ee07 3a90 	vmov	s15, r3
 800687e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006882:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 8111 	beq.w	8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	2b02      	cmp	r3, #2
 8006892:	f000 8083 	beq.w	800699c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	2b02      	cmp	r3, #2
 800689a:	f200 80a1 	bhi.w	80069e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d003      	beq.n	80068ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d056      	beq.n	8006958 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80068aa:	e099      	b.n	80069e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068ac:	4b88      	ldr	r3, [pc, #544]	@ (8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0320 	and.w	r3, r3, #32
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d02d      	beq.n	8006914 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068b8:	4b85      	ldr	r3, [pc, #532]	@ (8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	08db      	lsrs	r3, r3, #3
 80068be:	f003 0303 	and.w	r3, r3, #3
 80068c2:	4a84      	ldr	r2, [pc, #528]	@ (8006ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80068c4:	fa22 f303 	lsr.w	r3, r2, r3
 80068c8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	ee07 3a90 	vmov	s15, r3
 80068d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	ee07 3a90 	vmov	s15, r3
 80068da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068e2:	4b7b      	ldr	r3, [pc, #492]	@ (8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ea:	ee07 3a90 	vmov	s15, r3
 80068ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80068f6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800690a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800690e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006912:	e087      	b.n	8006a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	ee07 3a90 	vmov	s15, r3
 800691a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800691e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006adc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006926:	4b6a      	ldr	r3, [pc, #424]	@ (8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800692e:	ee07 3a90 	vmov	s15, r3
 8006932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006936:	ed97 6a03 	vldr	s12, [r7, #12]
 800693a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800693e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800694a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800694e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006956:	e065      	b.n	8006a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	ee07 3a90 	vmov	s15, r3
 800695e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006962:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800696a:	4b59      	ldr	r3, [pc, #356]	@ (8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800696c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006972:	ee07 3a90 	vmov	s15, r3
 8006976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800697a:	ed97 6a03 	vldr	s12, [r7, #12]
 800697e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800698a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800698e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800699a:	e043      	b.n	8006a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	ee07 3a90 	vmov	s15, r3
 80069a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80069aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ae:	4b48      	ldr	r3, [pc, #288]	@ (8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b6:	ee07 3a90 	vmov	s15, r3
 80069ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069be:	ed97 6a03 	vldr	s12, [r7, #12]
 80069c2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069de:	e021      	b.n	8006a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	ee07 3a90 	vmov	s15, r3
 80069e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80069ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069f2:	4b37      	ldr	r3, [pc, #220]	@ (8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069fa:	ee07 3a90 	vmov	s15, r3
 80069fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006a24:	4b2a      	ldr	r3, [pc, #168]	@ (8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a28:	0a5b      	lsrs	r3, r3, #9
 8006a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a4a:	ee17 2a90 	vmov	r2, s15
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006a52:	4b1f      	ldr	r3, [pc, #124]	@ (8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a56:	0c1b      	lsrs	r3, r3, #16
 8006a58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a5c:	ee07 3a90 	vmov	s15, r3
 8006a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a78:	ee17 2a90 	vmov	r2, s15
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006a80:	4b13      	ldr	r3, [pc, #76]	@ (8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a84:	0e1b      	lsrs	r3, r3, #24
 8006a86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006aa6:	ee17 2a90 	vmov	r2, s15
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006aae:	e008      	b.n	8006ac2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	609a      	str	r2, [r3, #8]
}
 8006ac2:	bf00      	nop
 8006ac4:	3724      	adds	r7, #36	@ 0x24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	58024400 	.word	0x58024400
 8006ad4:	03d09000 	.word	0x03d09000
 8006ad8:	46000000 	.word	0x46000000
 8006adc:	4c742400 	.word	0x4c742400
 8006ae0:	4a742400 	.word	0x4a742400
 8006ae4:	4af42400 	.word	0x4af42400

08006ae8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b089      	sub	sp, #36	@ 0x24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006af0:	4ba0      	ldr	r3, [pc, #640]	@ (8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af4:	f003 0303 	and.w	r3, r3, #3
 8006af8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006afa:	4b9e      	ldr	r3, [pc, #632]	@ (8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afe:	091b      	lsrs	r3, r3, #4
 8006b00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b04:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006b06:	4b9b      	ldr	r3, [pc, #620]	@ (8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b10:	4b98      	ldr	r3, [pc, #608]	@ (8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b14:	08db      	lsrs	r3, r3, #3
 8006b16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	fb02 f303 	mul.w	r3, r2, r3
 8006b20:	ee07 3a90 	vmov	s15, r3
 8006b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b28:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 8111 	beq.w	8006d56 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	f000 8083 	beq.w	8006c42 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	f200 80a1 	bhi.w	8006c86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d056      	beq.n	8006bfe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006b50:	e099      	b.n	8006c86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b52:	4b88      	ldr	r3, [pc, #544]	@ (8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0320 	and.w	r3, r3, #32
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d02d      	beq.n	8006bba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b5e:	4b85      	ldr	r3, [pc, #532]	@ (8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	08db      	lsrs	r3, r3, #3
 8006b64:	f003 0303 	and.w	r3, r3, #3
 8006b68:	4a83      	ldr	r2, [pc, #524]	@ (8006d78 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	ee07 3a90 	vmov	s15, r3
 8006b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	ee07 3a90 	vmov	s15, r3
 8006b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b88:	4b7a      	ldr	r3, [pc, #488]	@ (8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b90:	ee07 3a90 	vmov	s15, r3
 8006b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b98:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b9c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ba0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ba4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ba8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006bb8:	e087      	b.n	8006cca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	ee07 3a90 	vmov	s15, r3
 8006bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006d80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006bc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bcc:	4b69      	ldr	r3, [pc, #420]	@ (8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd4:	ee07 3a90 	vmov	s15, r3
 8006bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006be0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006be4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006be8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bf8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bfc:	e065      	b.n	8006cca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	ee07 3a90 	vmov	s15, r3
 8006c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c08:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006d84 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c10:	4b58      	ldr	r3, [pc, #352]	@ (8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c18:	ee07 3a90 	vmov	s15, r3
 8006c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c20:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c24:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c40:	e043      	b.n	8006cca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	ee07 3a90 	vmov	s15, r3
 8006c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006d88 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006c50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c54:	4b47      	ldr	r3, [pc, #284]	@ (8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5c:	ee07 3a90 	vmov	s15, r3
 8006c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c64:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c68:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c84:	e021      	b.n	8006cca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	ee07 3a90 	vmov	s15, r3
 8006c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c90:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006d80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c98:	4b36      	ldr	r3, [pc, #216]	@ (8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca0:	ee07 3a90 	vmov	s15, r3
 8006ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cac:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006cb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cc8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006cca:	4b2a      	ldr	r3, [pc, #168]	@ (8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cce:	0a5b      	lsrs	r3, r3, #9
 8006cd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cd4:	ee07 3a90 	vmov	s15, r3
 8006cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ce0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ce4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cf0:	ee17 2a90 	vmov	r2, s15
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cfc:	0c1b      	lsrs	r3, r3, #16
 8006cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d02:	ee07 3a90 	vmov	s15, r3
 8006d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d12:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d1e:	ee17 2a90 	vmov	r2, s15
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006d26:	4b13      	ldr	r3, [pc, #76]	@ (8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d2a:	0e1b      	lsrs	r3, r3, #24
 8006d2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d30:	ee07 3a90 	vmov	s15, r3
 8006d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d40:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d4c:	ee17 2a90 	vmov	r2, s15
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006d54:	e008      	b.n	8006d68 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	609a      	str	r2, [r3, #8]
}
 8006d68:	bf00      	nop
 8006d6a:	3724      	adds	r7, #36	@ 0x24
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	58024400 	.word	0x58024400
 8006d78:	03d09000 	.word	0x03d09000
 8006d7c:	46000000 	.word	0x46000000
 8006d80:	4c742400 	.word	0x4c742400
 8006d84:	4a742400 	.word	0x4a742400
 8006d88:	4af42400 	.word	0x4af42400

08006d8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d9a:	4b53      	ldr	r3, [pc, #332]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9e:	f003 0303 	and.w	r3, r3, #3
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d101      	bne.n	8006daa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e099      	b.n	8006ede <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006daa:	4b4f      	ldr	r3, [pc, #316]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a4e      	ldr	r2, [pc, #312]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006db0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006db6:	f7fa fbd5 	bl	8001564 <HAL_GetTick>
 8006dba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dbc:	e008      	b.n	8006dd0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006dbe:	f7fa fbd1 	bl	8001564 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d901      	bls.n	8006dd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e086      	b.n	8006ede <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dd0:	4b45      	ldr	r3, [pc, #276]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1f0      	bne.n	8006dbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006ddc:	4b42      	ldr	r3, [pc, #264]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	031b      	lsls	r3, r3, #12
 8006dea:	493f      	ldr	r1, [pc, #252]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	628b      	str	r3, [r1, #40]	@ 0x28
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	3b01      	subs	r3, #1
 8006df6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	025b      	lsls	r3, r3, #9
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	431a      	orrs	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	041b      	lsls	r3, r3, #16
 8006e0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e12:	431a      	orrs	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	061b      	lsls	r3, r3, #24
 8006e1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e20:	4931      	ldr	r1, [pc, #196]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006e26:	4b30      	ldr	r3, [pc, #192]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	492d      	ldr	r1, [pc, #180]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006e38:	4b2b      	ldr	r3, [pc, #172]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3c:	f023 0220 	bic.w	r2, r3, #32
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	4928      	ldr	r1, [pc, #160]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006e4a:	4b27      	ldr	r3, [pc, #156]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4e:	4a26      	ldr	r2, [pc, #152]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006e50:	f023 0310 	bic.w	r3, r3, #16
 8006e54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006e56:	4b24      	ldr	r3, [pc, #144]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006e58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e5a:	4b24      	ldr	r3, [pc, #144]	@ (8006eec <RCCEx_PLL2_Config+0x160>)
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	69d2      	ldr	r2, [r2, #28]
 8006e62:	00d2      	lsls	r2, r2, #3
 8006e64:	4920      	ldr	r1, [pc, #128]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006e70:	f043 0310 	orr.w	r3, r3, #16
 8006e74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d106      	bne.n	8006e8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e80:	4a19      	ldr	r2, [pc, #100]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006e82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e88:	e00f      	b.n	8006eaa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d106      	bne.n	8006e9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e90:	4b15      	ldr	r3, [pc, #84]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e94:	4a14      	ldr	r2, [pc, #80]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e9c:	e005      	b.n	8006eaa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e9e:	4b12      	ldr	r3, [pc, #72]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea2:	4a11      	ldr	r2, [pc, #68]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006ea4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a0e      	ldr	r2, [pc, #56]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006eb0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eb6:	f7fa fb55 	bl	8001564 <HAL_GetTick>
 8006eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ebc:	e008      	b.n	8006ed0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006ebe:	f7fa fb51 	bl	8001564 <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d901      	bls.n	8006ed0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e006      	b.n	8006ede <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ed0:	4b05      	ldr	r3, [pc, #20]	@ (8006ee8 <RCCEx_PLL2_Config+0x15c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d0f0      	beq.n	8006ebe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	58024400 	.word	0x58024400
 8006eec:	ffff0007 	.word	0xffff0007

08006ef0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006efe:	4b53      	ldr	r3, [pc, #332]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8006f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f02:	f003 0303 	and.w	r3, r3, #3
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d101      	bne.n	8006f0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e099      	b.n	8007042 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006f0e:	4b4f      	ldr	r3, [pc, #316]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a4e      	ldr	r2, [pc, #312]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8006f14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f1a:	f7fa fb23 	bl	8001564 <HAL_GetTick>
 8006f1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f20:	e008      	b.n	8006f34 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f22:	f7fa fb1f 	bl	8001564 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d901      	bls.n	8006f34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e086      	b.n	8007042 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f34:	4b45      	ldr	r3, [pc, #276]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1f0      	bne.n	8006f22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006f40:	4b42      	ldr	r3, [pc, #264]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8006f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f44:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	051b      	lsls	r3, r3, #20
 8006f4e:	493f      	ldr	r1, [pc, #252]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	025b      	lsls	r3, r3, #9
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	041b      	lsls	r3, r3, #16
 8006f72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f76:	431a      	orrs	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	061b      	lsls	r3, r3, #24
 8006f80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f84:	4931      	ldr	r1, [pc, #196]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f8a:	4b30      	ldr	r3, [pc, #192]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8006f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	492d      	ldr	r1, [pc, #180]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8006f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	4928      	ldr	r1, [pc, #160]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006fae:	4b27      	ldr	r3, [pc, #156]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8006fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb2:	4a26      	ldr	r2, [pc, #152]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8006fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006fba:	4b24      	ldr	r3, [pc, #144]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8006fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fbe:	4b24      	ldr	r3, [pc, #144]	@ (8007050 <RCCEx_PLL3_Config+0x160>)
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	69d2      	ldr	r2, [r2, #28]
 8006fc6:	00d2      	lsls	r2, r2, #3
 8006fc8:	4920      	ldr	r1, [pc, #128]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006fce:	4b1f      	ldr	r3, [pc, #124]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8006fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8006fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d106      	bne.n	8006fee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8006fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe4:	4a19      	ldr	r2, [pc, #100]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8006fe6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006fea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006fec:	e00f      	b.n	800700e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d106      	bne.n	8007002 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006ff4:	4b15      	ldr	r3, [pc, #84]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8006ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff8:	4a14      	ldr	r2, [pc, #80]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8006ffa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007000:	e005      	b.n	800700e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007002:	4b12      	ldr	r3, [pc, #72]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8007004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007006:	4a11      	ldr	r2, [pc, #68]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8007008:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800700c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800700e:	4b0f      	ldr	r3, [pc, #60]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a0e      	ldr	r2, [pc, #56]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8007014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800701a:	f7fa faa3 	bl	8001564 <HAL_GetTick>
 800701e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007020:	e008      	b.n	8007034 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007022:	f7fa fa9f 	bl	8001564 <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	2b02      	cmp	r3, #2
 800702e:	d901      	bls.n	8007034 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e006      	b.n	8007042 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007034:	4b05      	ldr	r3, [pc, #20]	@ (800704c <RCCEx_PLL3_Config+0x15c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d0f0      	beq.n	8007022 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007040:	7bfb      	ldrb	r3, [r7, #15]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	58024400 	.word	0x58024400
 8007050:	ffff0007 	.word	0xffff0007

08007054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e049      	b.n	80070fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d106      	bne.n	8007080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7fa f820 	bl	80010c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	3304      	adds	r3, #4
 8007090:	4619      	mov	r1, r3
 8007092:	4610      	mov	r0, r2
 8007094:	f000 f836 	bl	8007104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
	...

08007104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a46      	ldr	r2, [pc, #280]	@ (8007230 <TIM_Base_SetConfig+0x12c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d013      	beq.n	8007144 <TIM_Base_SetConfig+0x40>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007122:	d00f      	beq.n	8007144 <TIM_Base_SetConfig+0x40>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a43      	ldr	r2, [pc, #268]	@ (8007234 <TIM_Base_SetConfig+0x130>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00b      	beq.n	8007144 <TIM_Base_SetConfig+0x40>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a42      	ldr	r2, [pc, #264]	@ (8007238 <TIM_Base_SetConfig+0x134>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d007      	beq.n	8007144 <TIM_Base_SetConfig+0x40>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a41      	ldr	r2, [pc, #260]	@ (800723c <TIM_Base_SetConfig+0x138>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d003      	beq.n	8007144 <TIM_Base_SetConfig+0x40>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a40      	ldr	r2, [pc, #256]	@ (8007240 <TIM_Base_SetConfig+0x13c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d108      	bne.n	8007156 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800714a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a35      	ldr	r2, [pc, #212]	@ (8007230 <TIM_Base_SetConfig+0x12c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d01f      	beq.n	800719e <TIM_Base_SetConfig+0x9a>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007164:	d01b      	beq.n	800719e <TIM_Base_SetConfig+0x9a>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a32      	ldr	r2, [pc, #200]	@ (8007234 <TIM_Base_SetConfig+0x130>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d017      	beq.n	800719e <TIM_Base_SetConfig+0x9a>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a31      	ldr	r2, [pc, #196]	@ (8007238 <TIM_Base_SetConfig+0x134>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d013      	beq.n	800719e <TIM_Base_SetConfig+0x9a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a30      	ldr	r2, [pc, #192]	@ (800723c <TIM_Base_SetConfig+0x138>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d00f      	beq.n	800719e <TIM_Base_SetConfig+0x9a>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a2f      	ldr	r2, [pc, #188]	@ (8007240 <TIM_Base_SetConfig+0x13c>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d00b      	beq.n	800719e <TIM_Base_SetConfig+0x9a>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a2e      	ldr	r2, [pc, #184]	@ (8007244 <TIM_Base_SetConfig+0x140>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d007      	beq.n	800719e <TIM_Base_SetConfig+0x9a>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a2d      	ldr	r2, [pc, #180]	@ (8007248 <TIM_Base_SetConfig+0x144>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d003      	beq.n	800719e <TIM_Base_SetConfig+0x9a>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a2c      	ldr	r2, [pc, #176]	@ (800724c <TIM_Base_SetConfig+0x148>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d108      	bne.n	80071b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a16      	ldr	r2, [pc, #88]	@ (8007230 <TIM_Base_SetConfig+0x12c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d00f      	beq.n	80071fc <TIM_Base_SetConfig+0xf8>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a18      	ldr	r2, [pc, #96]	@ (8007240 <TIM_Base_SetConfig+0x13c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d00b      	beq.n	80071fc <TIM_Base_SetConfig+0xf8>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a17      	ldr	r2, [pc, #92]	@ (8007244 <TIM_Base_SetConfig+0x140>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d007      	beq.n	80071fc <TIM_Base_SetConfig+0xf8>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a16      	ldr	r2, [pc, #88]	@ (8007248 <TIM_Base_SetConfig+0x144>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d003      	beq.n	80071fc <TIM_Base_SetConfig+0xf8>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a15      	ldr	r2, [pc, #84]	@ (800724c <TIM_Base_SetConfig+0x148>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d103      	bne.n	8007204 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	691a      	ldr	r2, [r3, #16]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b01      	cmp	r3, #1
 8007214:	d105      	bne.n	8007222 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	f023 0201 	bic.w	r2, r3, #1
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	611a      	str	r2, [r3, #16]
  }
}
 8007222:	bf00      	nop
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	40010000 	.word	0x40010000
 8007234:	40000400 	.word	0x40000400
 8007238:	40000800 	.word	0x40000800
 800723c:	40000c00 	.word	0x40000c00
 8007240:	40010400 	.word	0x40010400
 8007244:	40014000 	.word	0x40014000
 8007248:	40014400 	.word	0x40014400
 800724c:	40014800 	.word	0x40014800

08007250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007260:	2b01      	cmp	r3, #1
 8007262:	d101      	bne.n	8007268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007264:	2302      	movs	r3, #2
 8007266:	e06d      	b.n	8007344 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a30      	ldr	r2, [pc, #192]	@ (8007350 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d004      	beq.n	800729c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a2f      	ldr	r2, [pc, #188]	@ (8007354 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d108      	bne.n	80072ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80072a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	4313      	orrs	r3, r2
 80072be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a20      	ldr	r2, [pc, #128]	@ (8007350 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d022      	beq.n	8007318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072da:	d01d      	beq.n	8007318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007358 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d018      	beq.n	8007318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a1c      	ldr	r2, [pc, #112]	@ (800735c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d013      	beq.n	8007318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a1a      	ldr	r2, [pc, #104]	@ (8007360 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d00e      	beq.n	8007318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a15      	ldr	r2, [pc, #84]	@ (8007354 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d009      	beq.n	8007318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a16      	ldr	r2, [pc, #88]	@ (8007364 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d004      	beq.n	8007318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a15      	ldr	r2, [pc, #84]	@ (8007368 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d10c      	bne.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800731e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	4313      	orrs	r3, r2
 8007328:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	40010000 	.word	0x40010000
 8007354:	40010400 	.word	0x40010400
 8007358:	40000400 	.word	0x40000400
 800735c:	40000800 	.word	0x40000800
 8007360:	40000c00 	.word	0x40000c00
 8007364:	40001800 	.word	0x40001800
 8007368:	40014000 	.word	0x40014000

0800736c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d101      	bne.n	800737e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e042      	b.n	8007404 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007384:	2b00      	cmp	r3, #0
 8007386:	d106      	bne.n	8007396 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7f9 feb7 	bl	8001104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2224      	movs	r2, #36	@ 0x24
 800739a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f022 0201 	bic.w	r2, r2, #1
 80073ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d002      	beq.n	80073bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fd90 	bl	8007edc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f825 	bl	800740c <UART_SetConfig>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d101      	bne.n	80073cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e01b      	b.n	8007404 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689a      	ldr	r2, [r3, #8]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f042 0201 	orr.w	r2, r2, #1
 80073fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fe0f 	bl	8008020 <UART_CheckIdleState>
 8007402:	4603      	mov	r3, r0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800740c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007410:	b092      	sub	sp, #72	@ 0x48
 8007412:	af00      	add	r7, sp, #0
 8007414:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	689a      	ldr	r2, [r3, #8]
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	431a      	orrs	r2, r3
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	431a      	orrs	r2, r3
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	4313      	orrs	r3, r2
 8007432:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	4bbe      	ldr	r3, [pc, #760]	@ (8007734 <UART_SetConfig+0x328>)
 800743c:	4013      	ands	r3, r2
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	6812      	ldr	r2, [r2, #0]
 8007442:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007444:	430b      	orrs	r3, r1
 8007446:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	68da      	ldr	r2, [r3, #12]
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	430a      	orrs	r2, r1
 800745c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4ab3      	ldr	r2, [pc, #716]	@ (8007738 <UART_SetConfig+0x32c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d004      	beq.n	8007478 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007474:	4313      	orrs	r3, r2
 8007476:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	4baf      	ldr	r3, [pc, #700]	@ (800773c <UART_SetConfig+0x330>)
 8007480:	4013      	ands	r3, r2
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	6812      	ldr	r2, [r2, #0]
 8007486:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007488:	430b      	orrs	r3, r1
 800748a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007492:	f023 010f 	bic.w	r1, r3, #15
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4aa6      	ldr	r2, [pc, #664]	@ (8007740 <UART_SetConfig+0x334>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d177      	bne.n	800759c <UART_SetConfig+0x190>
 80074ac:	4ba5      	ldr	r3, [pc, #660]	@ (8007744 <UART_SetConfig+0x338>)
 80074ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074b4:	2b28      	cmp	r3, #40	@ 0x28
 80074b6:	d86d      	bhi.n	8007594 <UART_SetConfig+0x188>
 80074b8:	a201      	add	r2, pc, #4	@ (adr r2, 80074c0 <UART_SetConfig+0xb4>)
 80074ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074be:	bf00      	nop
 80074c0:	08007565 	.word	0x08007565
 80074c4:	08007595 	.word	0x08007595
 80074c8:	08007595 	.word	0x08007595
 80074cc:	08007595 	.word	0x08007595
 80074d0:	08007595 	.word	0x08007595
 80074d4:	08007595 	.word	0x08007595
 80074d8:	08007595 	.word	0x08007595
 80074dc:	08007595 	.word	0x08007595
 80074e0:	0800756d 	.word	0x0800756d
 80074e4:	08007595 	.word	0x08007595
 80074e8:	08007595 	.word	0x08007595
 80074ec:	08007595 	.word	0x08007595
 80074f0:	08007595 	.word	0x08007595
 80074f4:	08007595 	.word	0x08007595
 80074f8:	08007595 	.word	0x08007595
 80074fc:	08007595 	.word	0x08007595
 8007500:	08007575 	.word	0x08007575
 8007504:	08007595 	.word	0x08007595
 8007508:	08007595 	.word	0x08007595
 800750c:	08007595 	.word	0x08007595
 8007510:	08007595 	.word	0x08007595
 8007514:	08007595 	.word	0x08007595
 8007518:	08007595 	.word	0x08007595
 800751c:	08007595 	.word	0x08007595
 8007520:	0800757d 	.word	0x0800757d
 8007524:	08007595 	.word	0x08007595
 8007528:	08007595 	.word	0x08007595
 800752c:	08007595 	.word	0x08007595
 8007530:	08007595 	.word	0x08007595
 8007534:	08007595 	.word	0x08007595
 8007538:	08007595 	.word	0x08007595
 800753c:	08007595 	.word	0x08007595
 8007540:	08007585 	.word	0x08007585
 8007544:	08007595 	.word	0x08007595
 8007548:	08007595 	.word	0x08007595
 800754c:	08007595 	.word	0x08007595
 8007550:	08007595 	.word	0x08007595
 8007554:	08007595 	.word	0x08007595
 8007558:	08007595 	.word	0x08007595
 800755c:	08007595 	.word	0x08007595
 8007560:	0800758d 	.word	0x0800758d
 8007564:	2301      	movs	r3, #1
 8007566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800756a:	e222      	b.n	80079b2 <UART_SetConfig+0x5a6>
 800756c:	2304      	movs	r3, #4
 800756e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007572:	e21e      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007574:	2308      	movs	r3, #8
 8007576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800757a:	e21a      	b.n	80079b2 <UART_SetConfig+0x5a6>
 800757c:	2310      	movs	r3, #16
 800757e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007582:	e216      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007584:	2320      	movs	r3, #32
 8007586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800758a:	e212      	b.n	80079b2 <UART_SetConfig+0x5a6>
 800758c:	2340      	movs	r3, #64	@ 0x40
 800758e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007592:	e20e      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007594:	2380      	movs	r3, #128	@ 0x80
 8007596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759a:	e20a      	b.n	80079b2 <UART_SetConfig+0x5a6>
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a69      	ldr	r2, [pc, #420]	@ (8007748 <UART_SetConfig+0x33c>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d130      	bne.n	8007608 <UART_SetConfig+0x1fc>
 80075a6:	4b67      	ldr	r3, [pc, #412]	@ (8007744 <UART_SetConfig+0x338>)
 80075a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075aa:	f003 0307 	and.w	r3, r3, #7
 80075ae:	2b05      	cmp	r3, #5
 80075b0:	d826      	bhi.n	8007600 <UART_SetConfig+0x1f4>
 80075b2:	a201      	add	r2, pc, #4	@ (adr r2, 80075b8 <UART_SetConfig+0x1ac>)
 80075b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b8:	080075d1 	.word	0x080075d1
 80075bc:	080075d9 	.word	0x080075d9
 80075c0:	080075e1 	.word	0x080075e1
 80075c4:	080075e9 	.word	0x080075e9
 80075c8:	080075f1 	.word	0x080075f1
 80075cc:	080075f9 	.word	0x080075f9
 80075d0:	2300      	movs	r3, #0
 80075d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075d6:	e1ec      	b.n	80079b2 <UART_SetConfig+0x5a6>
 80075d8:	2304      	movs	r3, #4
 80075da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075de:	e1e8      	b.n	80079b2 <UART_SetConfig+0x5a6>
 80075e0:	2308      	movs	r3, #8
 80075e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075e6:	e1e4      	b.n	80079b2 <UART_SetConfig+0x5a6>
 80075e8:	2310      	movs	r3, #16
 80075ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ee:	e1e0      	b.n	80079b2 <UART_SetConfig+0x5a6>
 80075f0:	2320      	movs	r3, #32
 80075f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075f6:	e1dc      	b.n	80079b2 <UART_SetConfig+0x5a6>
 80075f8:	2340      	movs	r3, #64	@ 0x40
 80075fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075fe:	e1d8      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007600:	2380      	movs	r3, #128	@ 0x80
 8007602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007606:	e1d4      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a4f      	ldr	r2, [pc, #316]	@ (800774c <UART_SetConfig+0x340>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d130      	bne.n	8007674 <UART_SetConfig+0x268>
 8007612:	4b4c      	ldr	r3, [pc, #304]	@ (8007744 <UART_SetConfig+0x338>)
 8007614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007616:	f003 0307 	and.w	r3, r3, #7
 800761a:	2b05      	cmp	r3, #5
 800761c:	d826      	bhi.n	800766c <UART_SetConfig+0x260>
 800761e:	a201      	add	r2, pc, #4	@ (adr r2, 8007624 <UART_SetConfig+0x218>)
 8007620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007624:	0800763d 	.word	0x0800763d
 8007628:	08007645 	.word	0x08007645
 800762c:	0800764d 	.word	0x0800764d
 8007630:	08007655 	.word	0x08007655
 8007634:	0800765d 	.word	0x0800765d
 8007638:	08007665 	.word	0x08007665
 800763c:	2300      	movs	r3, #0
 800763e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007642:	e1b6      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007644:	2304      	movs	r3, #4
 8007646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800764a:	e1b2      	b.n	80079b2 <UART_SetConfig+0x5a6>
 800764c:	2308      	movs	r3, #8
 800764e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007652:	e1ae      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007654:	2310      	movs	r3, #16
 8007656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800765a:	e1aa      	b.n	80079b2 <UART_SetConfig+0x5a6>
 800765c:	2320      	movs	r3, #32
 800765e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007662:	e1a6      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007664:	2340      	movs	r3, #64	@ 0x40
 8007666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800766a:	e1a2      	b.n	80079b2 <UART_SetConfig+0x5a6>
 800766c:	2380      	movs	r3, #128	@ 0x80
 800766e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007672:	e19e      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a35      	ldr	r2, [pc, #212]	@ (8007750 <UART_SetConfig+0x344>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d130      	bne.n	80076e0 <UART_SetConfig+0x2d4>
 800767e:	4b31      	ldr	r3, [pc, #196]	@ (8007744 <UART_SetConfig+0x338>)
 8007680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007682:	f003 0307 	and.w	r3, r3, #7
 8007686:	2b05      	cmp	r3, #5
 8007688:	d826      	bhi.n	80076d8 <UART_SetConfig+0x2cc>
 800768a:	a201      	add	r2, pc, #4	@ (adr r2, 8007690 <UART_SetConfig+0x284>)
 800768c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007690:	080076a9 	.word	0x080076a9
 8007694:	080076b1 	.word	0x080076b1
 8007698:	080076b9 	.word	0x080076b9
 800769c:	080076c1 	.word	0x080076c1
 80076a0:	080076c9 	.word	0x080076c9
 80076a4:	080076d1 	.word	0x080076d1
 80076a8:	2300      	movs	r3, #0
 80076aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ae:	e180      	b.n	80079b2 <UART_SetConfig+0x5a6>
 80076b0:	2304      	movs	r3, #4
 80076b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076b6:	e17c      	b.n	80079b2 <UART_SetConfig+0x5a6>
 80076b8:	2308      	movs	r3, #8
 80076ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076be:	e178      	b.n	80079b2 <UART_SetConfig+0x5a6>
 80076c0:	2310      	movs	r3, #16
 80076c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076c6:	e174      	b.n	80079b2 <UART_SetConfig+0x5a6>
 80076c8:	2320      	movs	r3, #32
 80076ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ce:	e170      	b.n	80079b2 <UART_SetConfig+0x5a6>
 80076d0:	2340      	movs	r3, #64	@ 0x40
 80076d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076d6:	e16c      	b.n	80079b2 <UART_SetConfig+0x5a6>
 80076d8:	2380      	movs	r3, #128	@ 0x80
 80076da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076de:	e168      	b.n	80079b2 <UART_SetConfig+0x5a6>
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a1b      	ldr	r2, [pc, #108]	@ (8007754 <UART_SetConfig+0x348>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d142      	bne.n	8007770 <UART_SetConfig+0x364>
 80076ea:	4b16      	ldr	r3, [pc, #88]	@ (8007744 <UART_SetConfig+0x338>)
 80076ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	2b05      	cmp	r3, #5
 80076f4:	d838      	bhi.n	8007768 <UART_SetConfig+0x35c>
 80076f6:	a201      	add	r2, pc, #4	@ (adr r2, 80076fc <UART_SetConfig+0x2f0>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	08007715 	.word	0x08007715
 8007700:	0800771d 	.word	0x0800771d
 8007704:	08007725 	.word	0x08007725
 8007708:	0800772d 	.word	0x0800772d
 800770c:	08007759 	.word	0x08007759
 8007710:	08007761 	.word	0x08007761
 8007714:	2300      	movs	r3, #0
 8007716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800771a:	e14a      	b.n	80079b2 <UART_SetConfig+0x5a6>
 800771c:	2304      	movs	r3, #4
 800771e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007722:	e146      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007724:	2308      	movs	r3, #8
 8007726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800772a:	e142      	b.n	80079b2 <UART_SetConfig+0x5a6>
 800772c:	2310      	movs	r3, #16
 800772e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007732:	e13e      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007734:	cfff69f3 	.word	0xcfff69f3
 8007738:	58000c00 	.word	0x58000c00
 800773c:	11fff4ff 	.word	0x11fff4ff
 8007740:	40011000 	.word	0x40011000
 8007744:	58024400 	.word	0x58024400
 8007748:	40004400 	.word	0x40004400
 800774c:	40004800 	.word	0x40004800
 8007750:	40004c00 	.word	0x40004c00
 8007754:	40005000 	.word	0x40005000
 8007758:	2320      	movs	r3, #32
 800775a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800775e:	e128      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007760:	2340      	movs	r3, #64	@ 0x40
 8007762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007766:	e124      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007768:	2380      	movs	r3, #128	@ 0x80
 800776a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800776e:	e120      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4acb      	ldr	r2, [pc, #812]	@ (8007aa4 <UART_SetConfig+0x698>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d176      	bne.n	8007868 <UART_SetConfig+0x45c>
 800777a:	4bcb      	ldr	r3, [pc, #812]	@ (8007aa8 <UART_SetConfig+0x69c>)
 800777c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800777e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007782:	2b28      	cmp	r3, #40	@ 0x28
 8007784:	d86c      	bhi.n	8007860 <UART_SetConfig+0x454>
 8007786:	a201      	add	r2, pc, #4	@ (adr r2, 800778c <UART_SetConfig+0x380>)
 8007788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778c:	08007831 	.word	0x08007831
 8007790:	08007861 	.word	0x08007861
 8007794:	08007861 	.word	0x08007861
 8007798:	08007861 	.word	0x08007861
 800779c:	08007861 	.word	0x08007861
 80077a0:	08007861 	.word	0x08007861
 80077a4:	08007861 	.word	0x08007861
 80077a8:	08007861 	.word	0x08007861
 80077ac:	08007839 	.word	0x08007839
 80077b0:	08007861 	.word	0x08007861
 80077b4:	08007861 	.word	0x08007861
 80077b8:	08007861 	.word	0x08007861
 80077bc:	08007861 	.word	0x08007861
 80077c0:	08007861 	.word	0x08007861
 80077c4:	08007861 	.word	0x08007861
 80077c8:	08007861 	.word	0x08007861
 80077cc:	08007841 	.word	0x08007841
 80077d0:	08007861 	.word	0x08007861
 80077d4:	08007861 	.word	0x08007861
 80077d8:	08007861 	.word	0x08007861
 80077dc:	08007861 	.word	0x08007861
 80077e0:	08007861 	.word	0x08007861
 80077e4:	08007861 	.word	0x08007861
 80077e8:	08007861 	.word	0x08007861
 80077ec:	08007849 	.word	0x08007849
 80077f0:	08007861 	.word	0x08007861
 80077f4:	08007861 	.word	0x08007861
 80077f8:	08007861 	.word	0x08007861
 80077fc:	08007861 	.word	0x08007861
 8007800:	08007861 	.word	0x08007861
 8007804:	08007861 	.word	0x08007861
 8007808:	08007861 	.word	0x08007861
 800780c:	08007851 	.word	0x08007851
 8007810:	08007861 	.word	0x08007861
 8007814:	08007861 	.word	0x08007861
 8007818:	08007861 	.word	0x08007861
 800781c:	08007861 	.word	0x08007861
 8007820:	08007861 	.word	0x08007861
 8007824:	08007861 	.word	0x08007861
 8007828:	08007861 	.word	0x08007861
 800782c:	08007859 	.word	0x08007859
 8007830:	2301      	movs	r3, #1
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007836:	e0bc      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007838:	2304      	movs	r3, #4
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783e:	e0b8      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007840:	2308      	movs	r3, #8
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007846:	e0b4      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007848:	2310      	movs	r3, #16
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800784e:	e0b0      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007850:	2320      	movs	r3, #32
 8007852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007856:	e0ac      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007858:	2340      	movs	r3, #64	@ 0x40
 800785a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785e:	e0a8      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007860:	2380      	movs	r3, #128	@ 0x80
 8007862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007866:	e0a4      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a8f      	ldr	r2, [pc, #572]	@ (8007aac <UART_SetConfig+0x6a0>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d130      	bne.n	80078d4 <UART_SetConfig+0x4c8>
 8007872:	4b8d      	ldr	r3, [pc, #564]	@ (8007aa8 <UART_SetConfig+0x69c>)
 8007874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007876:	f003 0307 	and.w	r3, r3, #7
 800787a:	2b05      	cmp	r3, #5
 800787c:	d826      	bhi.n	80078cc <UART_SetConfig+0x4c0>
 800787e:	a201      	add	r2, pc, #4	@ (adr r2, 8007884 <UART_SetConfig+0x478>)
 8007880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007884:	0800789d 	.word	0x0800789d
 8007888:	080078a5 	.word	0x080078a5
 800788c:	080078ad 	.word	0x080078ad
 8007890:	080078b5 	.word	0x080078b5
 8007894:	080078bd 	.word	0x080078bd
 8007898:	080078c5 	.word	0x080078c5
 800789c:	2300      	movs	r3, #0
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a2:	e086      	b.n	80079b2 <UART_SetConfig+0x5a6>
 80078a4:	2304      	movs	r3, #4
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078aa:	e082      	b.n	80079b2 <UART_SetConfig+0x5a6>
 80078ac:	2308      	movs	r3, #8
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b2:	e07e      	b.n	80079b2 <UART_SetConfig+0x5a6>
 80078b4:	2310      	movs	r3, #16
 80078b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ba:	e07a      	b.n	80079b2 <UART_SetConfig+0x5a6>
 80078bc:	2320      	movs	r3, #32
 80078be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078c2:	e076      	b.n	80079b2 <UART_SetConfig+0x5a6>
 80078c4:	2340      	movs	r3, #64	@ 0x40
 80078c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ca:	e072      	b.n	80079b2 <UART_SetConfig+0x5a6>
 80078cc:	2380      	movs	r3, #128	@ 0x80
 80078ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078d2:	e06e      	b.n	80079b2 <UART_SetConfig+0x5a6>
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a75      	ldr	r2, [pc, #468]	@ (8007ab0 <UART_SetConfig+0x6a4>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d130      	bne.n	8007940 <UART_SetConfig+0x534>
 80078de:	4b72      	ldr	r3, [pc, #456]	@ (8007aa8 <UART_SetConfig+0x69c>)
 80078e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	2b05      	cmp	r3, #5
 80078e8:	d826      	bhi.n	8007938 <UART_SetConfig+0x52c>
 80078ea:	a201      	add	r2, pc, #4	@ (adr r2, 80078f0 <UART_SetConfig+0x4e4>)
 80078ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f0:	08007909 	.word	0x08007909
 80078f4:	08007911 	.word	0x08007911
 80078f8:	08007919 	.word	0x08007919
 80078fc:	08007921 	.word	0x08007921
 8007900:	08007929 	.word	0x08007929
 8007904:	08007931 	.word	0x08007931
 8007908:	2300      	movs	r3, #0
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790e:	e050      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007910:	2304      	movs	r3, #4
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007916:	e04c      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007918:	2308      	movs	r3, #8
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791e:	e048      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007920:	2310      	movs	r3, #16
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007926:	e044      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007928:	2320      	movs	r3, #32
 800792a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800792e:	e040      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007930:	2340      	movs	r3, #64	@ 0x40
 8007932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007936:	e03c      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007938:	2380      	movs	r3, #128	@ 0x80
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793e:	e038      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a5b      	ldr	r2, [pc, #364]	@ (8007ab4 <UART_SetConfig+0x6a8>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d130      	bne.n	80079ac <UART_SetConfig+0x5a0>
 800794a:	4b57      	ldr	r3, [pc, #348]	@ (8007aa8 <UART_SetConfig+0x69c>)
 800794c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	2b05      	cmp	r3, #5
 8007954:	d826      	bhi.n	80079a4 <UART_SetConfig+0x598>
 8007956:	a201      	add	r2, pc, #4	@ (adr r2, 800795c <UART_SetConfig+0x550>)
 8007958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795c:	08007975 	.word	0x08007975
 8007960:	0800797d 	.word	0x0800797d
 8007964:	08007985 	.word	0x08007985
 8007968:	0800798d 	.word	0x0800798d
 800796c:	08007995 	.word	0x08007995
 8007970:	0800799d 	.word	0x0800799d
 8007974:	2302      	movs	r3, #2
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797a:	e01a      	b.n	80079b2 <UART_SetConfig+0x5a6>
 800797c:	2304      	movs	r3, #4
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007982:	e016      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007984:	2308      	movs	r3, #8
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798a:	e012      	b.n	80079b2 <UART_SetConfig+0x5a6>
 800798c:	2310      	movs	r3, #16
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007992:	e00e      	b.n	80079b2 <UART_SetConfig+0x5a6>
 8007994:	2320      	movs	r3, #32
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799a:	e00a      	b.n	80079b2 <UART_SetConfig+0x5a6>
 800799c:	2340      	movs	r3, #64	@ 0x40
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a2:	e006      	b.n	80079b2 <UART_SetConfig+0x5a6>
 80079a4:	2380      	movs	r3, #128	@ 0x80
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079aa:	e002      	b.n	80079b2 <UART_SetConfig+0x5a6>
 80079ac:	2380      	movs	r3, #128	@ 0x80
 80079ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a3f      	ldr	r2, [pc, #252]	@ (8007ab4 <UART_SetConfig+0x6a8>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	f040 80f8 	bne.w	8007bae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80079c2:	2b20      	cmp	r3, #32
 80079c4:	dc46      	bgt.n	8007a54 <UART_SetConfig+0x648>
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	f2c0 8082 	blt.w	8007ad0 <UART_SetConfig+0x6c4>
 80079cc:	3b02      	subs	r3, #2
 80079ce:	2b1e      	cmp	r3, #30
 80079d0:	d87e      	bhi.n	8007ad0 <UART_SetConfig+0x6c4>
 80079d2:	a201      	add	r2, pc, #4	@ (adr r2, 80079d8 <UART_SetConfig+0x5cc>)
 80079d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d8:	08007a5b 	.word	0x08007a5b
 80079dc:	08007ad1 	.word	0x08007ad1
 80079e0:	08007a63 	.word	0x08007a63
 80079e4:	08007ad1 	.word	0x08007ad1
 80079e8:	08007ad1 	.word	0x08007ad1
 80079ec:	08007ad1 	.word	0x08007ad1
 80079f0:	08007a73 	.word	0x08007a73
 80079f4:	08007ad1 	.word	0x08007ad1
 80079f8:	08007ad1 	.word	0x08007ad1
 80079fc:	08007ad1 	.word	0x08007ad1
 8007a00:	08007ad1 	.word	0x08007ad1
 8007a04:	08007ad1 	.word	0x08007ad1
 8007a08:	08007ad1 	.word	0x08007ad1
 8007a0c:	08007ad1 	.word	0x08007ad1
 8007a10:	08007a83 	.word	0x08007a83
 8007a14:	08007ad1 	.word	0x08007ad1
 8007a18:	08007ad1 	.word	0x08007ad1
 8007a1c:	08007ad1 	.word	0x08007ad1
 8007a20:	08007ad1 	.word	0x08007ad1
 8007a24:	08007ad1 	.word	0x08007ad1
 8007a28:	08007ad1 	.word	0x08007ad1
 8007a2c:	08007ad1 	.word	0x08007ad1
 8007a30:	08007ad1 	.word	0x08007ad1
 8007a34:	08007ad1 	.word	0x08007ad1
 8007a38:	08007ad1 	.word	0x08007ad1
 8007a3c:	08007ad1 	.word	0x08007ad1
 8007a40:	08007ad1 	.word	0x08007ad1
 8007a44:	08007ad1 	.word	0x08007ad1
 8007a48:	08007ad1 	.word	0x08007ad1
 8007a4c:	08007ad1 	.word	0x08007ad1
 8007a50:	08007ac3 	.word	0x08007ac3
 8007a54:	2b40      	cmp	r3, #64	@ 0x40
 8007a56:	d037      	beq.n	8007ac8 <UART_SetConfig+0x6bc>
 8007a58:	e03a      	b.n	8007ad0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a5a:	f7fe fd87 	bl	800656c <HAL_RCCEx_GetD3PCLK1Freq>
 8007a5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a60:	e03c      	b.n	8007adc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fe fd96 	bl	8006598 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a70:	e034      	b.n	8007adc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a72:	f107 0318 	add.w	r3, r7, #24
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fe fee2 	bl	8006840 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a80:	e02c      	b.n	8007adc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a82:	4b09      	ldr	r3, [pc, #36]	@ (8007aa8 <UART_SetConfig+0x69c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0320 	and.w	r3, r3, #32
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d016      	beq.n	8007abc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a8e:	4b06      	ldr	r3, [pc, #24]	@ (8007aa8 <UART_SetConfig+0x69c>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	08db      	lsrs	r3, r3, #3
 8007a94:	f003 0303 	and.w	r3, r3, #3
 8007a98:	4a07      	ldr	r2, [pc, #28]	@ (8007ab8 <UART_SetConfig+0x6ac>)
 8007a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007aa0:	e01c      	b.n	8007adc <UART_SetConfig+0x6d0>
 8007aa2:	bf00      	nop
 8007aa4:	40011400 	.word	0x40011400
 8007aa8:	58024400 	.word	0x58024400
 8007aac:	40007800 	.word	0x40007800
 8007ab0:	40007c00 	.word	0x40007c00
 8007ab4:	58000c00 	.word	0x58000c00
 8007ab8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007abc:	4b9d      	ldr	r3, [pc, #628]	@ (8007d34 <UART_SetConfig+0x928>)
 8007abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ac0:	e00c      	b.n	8007adc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ac2:	4b9d      	ldr	r3, [pc, #628]	@ (8007d38 <UART_SetConfig+0x92c>)
 8007ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ac6:	e009      	b.n	8007adc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ac8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ace:	e005      	b.n	8007adc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007ada:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 81de 	beq.w	8007ea0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae8:	4a94      	ldr	r2, [pc, #592]	@ (8007d3c <UART_SetConfig+0x930>)
 8007aea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aee:	461a      	mov	r2, r3
 8007af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007af2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007af6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	4613      	mov	r3, r2
 8007afe:	005b      	lsls	r3, r3, #1
 8007b00:	4413      	add	r3, r2
 8007b02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d305      	bcc.n	8007b14 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d903      	bls.n	8007b1c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b1a:	e1c1      	b.n	8007ea0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b1e:	2200      	movs	r2, #0
 8007b20:	60bb      	str	r3, [r7, #8]
 8007b22:	60fa      	str	r2, [r7, #12]
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b28:	4a84      	ldr	r2, [pc, #528]	@ (8007d3c <UART_SetConfig+0x930>)
 8007b2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	2200      	movs	r2, #0
 8007b32:	603b      	str	r3, [r7, #0]
 8007b34:	607a      	str	r2, [r7, #4]
 8007b36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b3e:	f7f8 fbcb 	bl	80002d8 <__aeabi_uldivmod>
 8007b42:	4602      	mov	r2, r0
 8007b44:	460b      	mov	r3, r1
 8007b46:	4610      	mov	r0, r2
 8007b48:	4619      	mov	r1, r3
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	f04f 0300 	mov.w	r3, #0
 8007b52:	020b      	lsls	r3, r1, #8
 8007b54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b58:	0202      	lsls	r2, r0, #8
 8007b5a:	6979      	ldr	r1, [r7, #20]
 8007b5c:	6849      	ldr	r1, [r1, #4]
 8007b5e:	0849      	lsrs	r1, r1, #1
 8007b60:	2000      	movs	r0, #0
 8007b62:	460c      	mov	r4, r1
 8007b64:	4605      	mov	r5, r0
 8007b66:	eb12 0804 	adds.w	r8, r2, r4
 8007b6a:	eb43 0905 	adc.w	r9, r3, r5
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	469a      	mov	sl, r3
 8007b76:	4693      	mov	fp, r2
 8007b78:	4652      	mov	r2, sl
 8007b7a:	465b      	mov	r3, fp
 8007b7c:	4640      	mov	r0, r8
 8007b7e:	4649      	mov	r1, r9
 8007b80:	f7f8 fbaa 	bl	80002d8 <__aeabi_uldivmod>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4613      	mov	r3, r2
 8007b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b92:	d308      	bcc.n	8007ba6 <UART_SetConfig+0x79a>
 8007b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b9a:	d204      	bcs.n	8007ba6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ba2:	60da      	str	r2, [r3, #12]
 8007ba4:	e17c      	b.n	8007ea0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007bac:	e178      	b.n	8007ea0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bb6:	f040 80c5 	bne.w	8007d44 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007bba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007bbe:	2b20      	cmp	r3, #32
 8007bc0:	dc48      	bgt.n	8007c54 <UART_SetConfig+0x848>
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	db7b      	blt.n	8007cbe <UART_SetConfig+0x8b2>
 8007bc6:	2b20      	cmp	r3, #32
 8007bc8:	d879      	bhi.n	8007cbe <UART_SetConfig+0x8b2>
 8007bca:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd0 <UART_SetConfig+0x7c4>)
 8007bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd0:	08007c5b 	.word	0x08007c5b
 8007bd4:	08007c63 	.word	0x08007c63
 8007bd8:	08007cbf 	.word	0x08007cbf
 8007bdc:	08007cbf 	.word	0x08007cbf
 8007be0:	08007c6b 	.word	0x08007c6b
 8007be4:	08007cbf 	.word	0x08007cbf
 8007be8:	08007cbf 	.word	0x08007cbf
 8007bec:	08007cbf 	.word	0x08007cbf
 8007bf0:	08007c7b 	.word	0x08007c7b
 8007bf4:	08007cbf 	.word	0x08007cbf
 8007bf8:	08007cbf 	.word	0x08007cbf
 8007bfc:	08007cbf 	.word	0x08007cbf
 8007c00:	08007cbf 	.word	0x08007cbf
 8007c04:	08007cbf 	.word	0x08007cbf
 8007c08:	08007cbf 	.word	0x08007cbf
 8007c0c:	08007cbf 	.word	0x08007cbf
 8007c10:	08007c8b 	.word	0x08007c8b
 8007c14:	08007cbf 	.word	0x08007cbf
 8007c18:	08007cbf 	.word	0x08007cbf
 8007c1c:	08007cbf 	.word	0x08007cbf
 8007c20:	08007cbf 	.word	0x08007cbf
 8007c24:	08007cbf 	.word	0x08007cbf
 8007c28:	08007cbf 	.word	0x08007cbf
 8007c2c:	08007cbf 	.word	0x08007cbf
 8007c30:	08007cbf 	.word	0x08007cbf
 8007c34:	08007cbf 	.word	0x08007cbf
 8007c38:	08007cbf 	.word	0x08007cbf
 8007c3c:	08007cbf 	.word	0x08007cbf
 8007c40:	08007cbf 	.word	0x08007cbf
 8007c44:	08007cbf 	.word	0x08007cbf
 8007c48:	08007cbf 	.word	0x08007cbf
 8007c4c:	08007cbf 	.word	0x08007cbf
 8007c50:	08007cb1 	.word	0x08007cb1
 8007c54:	2b40      	cmp	r3, #64	@ 0x40
 8007c56:	d02e      	beq.n	8007cb6 <UART_SetConfig+0x8aa>
 8007c58:	e031      	b.n	8007cbe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c5a:	f7fc fcd1 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
 8007c5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c60:	e033      	b.n	8007cca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c62:	f7fc fce3 	bl	800462c <HAL_RCC_GetPCLK2Freq>
 8007c66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c68:	e02f      	b.n	8007cca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fe fc92 	bl	8006598 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c78:	e027      	b.n	8007cca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c7a:	f107 0318 	add.w	r3, r7, #24
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fe fdde 	bl	8006840 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c88:	e01f      	b.n	8007cca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8007d40 <UART_SetConfig+0x934>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0320 	and.w	r3, r3, #32
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d009      	beq.n	8007caa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c96:	4b2a      	ldr	r3, [pc, #168]	@ (8007d40 <UART_SetConfig+0x934>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	08db      	lsrs	r3, r3, #3
 8007c9c:	f003 0303 	and.w	r3, r3, #3
 8007ca0:	4a24      	ldr	r2, [pc, #144]	@ (8007d34 <UART_SetConfig+0x928>)
 8007ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ca8:	e00f      	b.n	8007cca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007caa:	4b22      	ldr	r3, [pc, #136]	@ (8007d34 <UART_SetConfig+0x928>)
 8007cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cae:	e00c      	b.n	8007cca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cb0:	4b21      	ldr	r3, [pc, #132]	@ (8007d38 <UART_SetConfig+0x92c>)
 8007cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cb4:	e009      	b.n	8007cca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cbc:	e005      	b.n	8007cca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007cc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f000 80e7 	beq.w	8007ea0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd6:	4a19      	ldr	r2, [pc, #100]	@ (8007d3c <UART_SetConfig+0x930>)
 8007cd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ce0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ce4:	005a      	lsls	r2, r3, #1
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	085b      	lsrs	r3, r3, #1
 8007cec:	441a      	add	r2, r3
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfa:	2b0f      	cmp	r3, #15
 8007cfc:	d916      	bls.n	8007d2c <UART_SetConfig+0x920>
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d04:	d212      	bcs.n	8007d2c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	f023 030f 	bic.w	r3, r3, #15
 8007d0e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d12:	085b      	lsrs	r3, r3, #1
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	f003 0307 	and.w	r3, r3, #7
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007d28:	60da      	str	r2, [r3, #12]
 8007d2a:	e0b9      	b.n	8007ea0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d32:	e0b5      	b.n	8007ea0 <UART_SetConfig+0xa94>
 8007d34:	03d09000 	.word	0x03d09000
 8007d38:	003d0900 	.word	0x003d0900
 8007d3c:	080085ac 	.word	0x080085ac
 8007d40:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d44:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	dc49      	bgt.n	8007de0 <UART_SetConfig+0x9d4>
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	db7c      	blt.n	8007e4a <UART_SetConfig+0xa3e>
 8007d50:	2b20      	cmp	r3, #32
 8007d52:	d87a      	bhi.n	8007e4a <UART_SetConfig+0xa3e>
 8007d54:	a201      	add	r2, pc, #4	@ (adr r2, 8007d5c <UART_SetConfig+0x950>)
 8007d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5a:	bf00      	nop
 8007d5c:	08007de7 	.word	0x08007de7
 8007d60:	08007def 	.word	0x08007def
 8007d64:	08007e4b 	.word	0x08007e4b
 8007d68:	08007e4b 	.word	0x08007e4b
 8007d6c:	08007df7 	.word	0x08007df7
 8007d70:	08007e4b 	.word	0x08007e4b
 8007d74:	08007e4b 	.word	0x08007e4b
 8007d78:	08007e4b 	.word	0x08007e4b
 8007d7c:	08007e07 	.word	0x08007e07
 8007d80:	08007e4b 	.word	0x08007e4b
 8007d84:	08007e4b 	.word	0x08007e4b
 8007d88:	08007e4b 	.word	0x08007e4b
 8007d8c:	08007e4b 	.word	0x08007e4b
 8007d90:	08007e4b 	.word	0x08007e4b
 8007d94:	08007e4b 	.word	0x08007e4b
 8007d98:	08007e4b 	.word	0x08007e4b
 8007d9c:	08007e17 	.word	0x08007e17
 8007da0:	08007e4b 	.word	0x08007e4b
 8007da4:	08007e4b 	.word	0x08007e4b
 8007da8:	08007e4b 	.word	0x08007e4b
 8007dac:	08007e4b 	.word	0x08007e4b
 8007db0:	08007e4b 	.word	0x08007e4b
 8007db4:	08007e4b 	.word	0x08007e4b
 8007db8:	08007e4b 	.word	0x08007e4b
 8007dbc:	08007e4b 	.word	0x08007e4b
 8007dc0:	08007e4b 	.word	0x08007e4b
 8007dc4:	08007e4b 	.word	0x08007e4b
 8007dc8:	08007e4b 	.word	0x08007e4b
 8007dcc:	08007e4b 	.word	0x08007e4b
 8007dd0:	08007e4b 	.word	0x08007e4b
 8007dd4:	08007e4b 	.word	0x08007e4b
 8007dd8:	08007e4b 	.word	0x08007e4b
 8007ddc:	08007e3d 	.word	0x08007e3d
 8007de0:	2b40      	cmp	r3, #64	@ 0x40
 8007de2:	d02e      	beq.n	8007e42 <UART_SetConfig+0xa36>
 8007de4:	e031      	b.n	8007e4a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007de6:	f7fc fc0b 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
 8007dea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007dec:	e033      	b.n	8007e56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dee:	f7fc fc1d 	bl	800462c <HAL_RCC_GetPCLK2Freq>
 8007df2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007df4:	e02f      	b.n	8007e56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007df6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fe fbcc 	bl	8006598 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e04:	e027      	b.n	8007e56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e06:	f107 0318 	add.w	r3, r7, #24
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fe fd18 	bl	8006840 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e14:	e01f      	b.n	8007e56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e16:	4b2d      	ldr	r3, [pc, #180]	@ (8007ecc <UART_SetConfig+0xac0>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0320 	and.w	r3, r3, #32
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d009      	beq.n	8007e36 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e22:	4b2a      	ldr	r3, [pc, #168]	@ (8007ecc <UART_SetConfig+0xac0>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	08db      	lsrs	r3, r3, #3
 8007e28:	f003 0303 	and.w	r3, r3, #3
 8007e2c:	4a28      	ldr	r2, [pc, #160]	@ (8007ed0 <UART_SetConfig+0xac4>)
 8007e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e34:	e00f      	b.n	8007e56 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007e36:	4b26      	ldr	r3, [pc, #152]	@ (8007ed0 <UART_SetConfig+0xac4>)
 8007e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e3a:	e00c      	b.n	8007e56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e3c:	4b25      	ldr	r3, [pc, #148]	@ (8007ed4 <UART_SetConfig+0xac8>)
 8007e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e40:	e009      	b.n	8007e56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e48:	e005      	b.n	8007e56 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007e54:	bf00      	nop
    }

    if (pclk != 0U)
 8007e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d021      	beq.n	8007ea0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e60:	4a1d      	ldr	r2, [pc, #116]	@ (8007ed8 <UART_SetConfig+0xacc>)
 8007e62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e66:	461a      	mov	r2, r3
 8007e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	085b      	lsrs	r3, r3, #1
 8007e74:	441a      	add	r2, r3
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e82:	2b0f      	cmp	r3, #15
 8007e84:	d909      	bls.n	8007e9a <UART_SetConfig+0xa8e>
 8007e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e8c:	d205      	bcs.n	8007e9a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	60da      	str	r2, [r3, #12]
 8007e98:	e002      	b.n	8007ea0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007ebc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3748      	adds	r7, #72	@ 0x48
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eca:	bf00      	nop
 8007ecc:	58024400 	.word	0x58024400
 8007ed0:	03d09000 	.word	0x03d09000
 8007ed4:	003d0900 	.word	0x003d0900
 8007ed8:	080085ac 	.word	0x080085ac

08007edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee8:	f003 0308 	and.w	r3, r3, #8
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00a      	beq.n	8007f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	430a      	orrs	r2, r1
 8007f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00a      	beq.n	8007f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	430a      	orrs	r2, r1
 8007f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f2c:	f003 0302 	and.w	r3, r3, #2
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00a      	beq.n	8007f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	430a      	orrs	r2, r1
 8007f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f4e:	f003 0304 	and.w	r3, r3, #4
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00a      	beq.n	8007f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	430a      	orrs	r2, r1
 8007f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f70:	f003 0310 	and.w	r3, r3, #16
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00a      	beq.n	8007f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f92:	f003 0320 	and.w	r3, r3, #32
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00a      	beq.n	8007fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d01a      	beq.n	8007ff2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fda:	d10a      	bne.n	8007ff2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00a      	beq.n	8008014 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	430a      	orrs	r2, r1
 8008012:	605a      	str	r2, [r3, #4]
  }
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b098      	sub	sp, #96	@ 0x60
 8008024:	af02      	add	r7, sp, #8
 8008026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008030:	f7f9 fa98 	bl	8001564 <HAL_GetTick>
 8008034:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0308 	and.w	r3, r3, #8
 8008040:	2b08      	cmp	r3, #8
 8008042:	d12f      	bne.n	80080a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008044:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800804c:	2200      	movs	r2, #0
 800804e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f88e 	bl	8008174 <UART_WaitOnFlagUntilTimeout>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d022      	beq.n	80080a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008066:	e853 3f00 	ldrex	r3, [r3]
 800806a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800806c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800806e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008072:	653b      	str	r3, [r7, #80]	@ 0x50
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	461a      	mov	r2, r3
 800807a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800807c:	647b      	str	r3, [r7, #68]	@ 0x44
 800807e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008080:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008082:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008084:	e841 2300 	strex	r3, r2, [r1]
 8008088:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800808a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1e6      	bne.n	800805e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2220      	movs	r2, #32
 8008094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e063      	b.n	800816c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0304 	and.w	r3, r3, #4
 80080ae:	2b04      	cmp	r3, #4
 80080b0:	d149      	bne.n	8008146 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080ba:	2200      	movs	r2, #0
 80080bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f857 	bl	8008174 <UART_WaitOnFlagUntilTimeout>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d03c      	beq.n	8008146 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d4:	e853 3f00 	ldrex	r3, [r3]
 80080d8:	623b      	str	r3, [r7, #32]
   return(result);
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80080ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080f2:	e841 2300 	strex	r3, r2, [r1]
 80080f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1e6      	bne.n	80080cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3308      	adds	r3, #8
 8008104:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	e853 3f00 	ldrex	r3, [r3]
 800810c:	60fb      	str	r3, [r7, #12]
   return(result);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f023 0301 	bic.w	r3, r3, #1
 8008114:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3308      	adds	r3, #8
 800811c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800811e:	61fa      	str	r2, [r7, #28]
 8008120:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008122:	69b9      	ldr	r1, [r7, #24]
 8008124:	69fa      	ldr	r2, [r7, #28]
 8008126:	e841 2300 	strex	r3, r2, [r1]
 800812a:	617b      	str	r3, [r7, #20]
   return(result);
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1e5      	bne.n	80080fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2220      	movs	r2, #32
 8008136:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e012      	b.n	800816c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2220      	movs	r2, #32
 800814a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2220      	movs	r2, #32
 8008152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3758      	adds	r7, #88	@ 0x58
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	603b      	str	r3, [r7, #0]
 8008180:	4613      	mov	r3, r2
 8008182:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008184:	e04f      	b.n	8008226 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818c:	d04b      	beq.n	8008226 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800818e:	f7f9 f9e9 	bl	8001564 <HAL_GetTick>
 8008192:	4602      	mov	r2, r0
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	69ba      	ldr	r2, [r7, #24]
 800819a:	429a      	cmp	r2, r3
 800819c:	d302      	bcc.n	80081a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d101      	bne.n	80081a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e04e      	b.n	8008246 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0304 	and.w	r3, r3, #4
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d037      	beq.n	8008226 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2b80      	cmp	r3, #128	@ 0x80
 80081ba:	d034      	beq.n	8008226 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2b40      	cmp	r3, #64	@ 0x40
 80081c0:	d031      	beq.n	8008226 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	69db      	ldr	r3, [r3, #28]
 80081c8:	f003 0308 	and.w	r3, r3, #8
 80081cc:	2b08      	cmp	r3, #8
 80081ce:	d110      	bne.n	80081f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2208      	movs	r2, #8
 80081d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f000 f839 	bl	8008250 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2208      	movs	r2, #8
 80081e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e029      	b.n	8008246 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008200:	d111      	bne.n	8008226 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800820a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 f81f 	bl	8008250 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2220      	movs	r2, #32
 8008216:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	e00f      	b.n	8008246 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	69da      	ldr	r2, [r3, #28]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	4013      	ands	r3, r2
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	429a      	cmp	r2, r3
 8008234:	bf0c      	ite	eq
 8008236:	2301      	moveq	r3, #1
 8008238:	2300      	movne	r3, #0
 800823a:	b2db      	uxtb	r3, r3
 800823c:	461a      	mov	r2, r3
 800823e:	79fb      	ldrb	r3, [r7, #7]
 8008240:	429a      	cmp	r2, r3
 8008242:	d0a0      	beq.n	8008186 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
	...

08008250 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008250:	b480      	push	{r7}
 8008252:	b095      	sub	sp, #84	@ 0x54
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008260:	e853 3f00 	ldrex	r3, [r3]
 8008264:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008268:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800826c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	461a      	mov	r2, r3
 8008274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008276:	643b      	str	r3, [r7, #64]	@ 0x40
 8008278:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800827c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800827e:	e841 2300 	strex	r3, r2, [r1]
 8008282:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1e6      	bne.n	8008258 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3308      	adds	r3, #8
 8008290:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008292:	6a3b      	ldr	r3, [r7, #32]
 8008294:	e853 3f00 	ldrex	r3, [r3]
 8008298:	61fb      	str	r3, [r7, #28]
   return(result);
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	4b1e      	ldr	r3, [pc, #120]	@ (8008318 <UART_EndRxTransfer+0xc8>)
 800829e:	4013      	ands	r3, r2
 80082a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3308      	adds	r3, #8
 80082a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082b2:	e841 2300 	strex	r3, r2, [r1]
 80082b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1e5      	bne.n	800828a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d118      	bne.n	80082f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	e853 3f00 	ldrex	r3, [r3]
 80082d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	f023 0310 	bic.w	r3, r3, #16
 80082da:	647b      	str	r3, [r7, #68]	@ 0x44
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	461a      	mov	r2, r3
 80082e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082e4:	61bb      	str	r3, [r7, #24]
 80082e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e8:	6979      	ldr	r1, [r7, #20]
 80082ea:	69ba      	ldr	r2, [r7, #24]
 80082ec:	e841 2300 	strex	r3, r2, [r1]
 80082f0:	613b      	str	r3, [r7, #16]
   return(result);
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d1e6      	bne.n	80082c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2220      	movs	r2, #32
 80082fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800830c:	bf00      	nop
 800830e:	3754      	adds	r7, #84	@ 0x54
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr
 8008318:	effffffe 	.word	0xeffffffe

0800831c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800832a:	2b01      	cmp	r3, #1
 800832c:	d101      	bne.n	8008332 <HAL_UARTEx_DisableFifoMode+0x16>
 800832e:	2302      	movs	r3, #2
 8008330:	e027      	b.n	8008382 <HAL_UARTEx_DisableFifoMode+0x66>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2224      	movs	r2, #36	@ 0x24
 800833e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 0201 	bic.w	r2, r2, #1
 8008358:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008360:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2220      	movs	r2, #32
 8008374:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b084      	sub	sp, #16
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d101      	bne.n	80083a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80083a2:	2302      	movs	r3, #2
 80083a4:	e02d      	b.n	8008402 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2224      	movs	r2, #36	@ 0x24
 80083b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 0201 	bic.w	r2, r2, #1
 80083cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	430a      	orrs	r2, r1
 80083e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f850 	bl	8008488 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2220      	movs	r2, #32
 80083f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b084      	sub	sp, #16
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800841a:	2b01      	cmp	r3, #1
 800841c:	d101      	bne.n	8008422 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800841e:	2302      	movs	r3, #2
 8008420:	e02d      	b.n	800847e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2224      	movs	r2, #36	@ 0x24
 800842e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f022 0201 	bic.w	r2, r2, #1
 8008448:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	430a      	orrs	r2, r1
 800845c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f812 	bl	8008488 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2220      	movs	r2, #32
 8008470:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
	...

08008488 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008494:	2b00      	cmp	r3, #0
 8008496:	d108      	bne.n	80084aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80084a8:	e031      	b.n	800850e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80084aa:	2310      	movs	r3, #16
 80084ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80084ae:	2310      	movs	r3, #16
 80084b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	0e5b      	lsrs	r3, r3, #25
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	f003 0307 	and.w	r3, r3, #7
 80084c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	0f5b      	lsrs	r3, r3, #29
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	f003 0307 	and.w	r3, r3, #7
 80084d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084d2:	7bbb      	ldrb	r3, [r7, #14]
 80084d4:	7b3a      	ldrb	r2, [r7, #12]
 80084d6:	4911      	ldr	r1, [pc, #68]	@ (800851c <UARTEx_SetNbDataToProcess+0x94>)
 80084d8:	5c8a      	ldrb	r2, [r1, r2]
 80084da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084de:	7b3a      	ldrb	r2, [r7, #12]
 80084e0:	490f      	ldr	r1, [pc, #60]	@ (8008520 <UARTEx_SetNbDataToProcess+0x98>)
 80084e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
 80084f2:	7b7a      	ldrb	r2, [r7, #13]
 80084f4:	4909      	ldr	r1, [pc, #36]	@ (800851c <UARTEx_SetNbDataToProcess+0x94>)
 80084f6:	5c8a      	ldrb	r2, [r1, r2]
 80084f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084fc:	7b7a      	ldrb	r2, [r7, #13]
 80084fe:	4908      	ldr	r1, [pc, #32]	@ (8008520 <UARTEx_SetNbDataToProcess+0x98>)
 8008500:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008502:	fb93 f3f2 	sdiv	r3, r3, r2
 8008506:	b29a      	uxth	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800850e:	bf00      	nop
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	080085c4 	.word	0x080085c4
 8008520:	080085cc 	.word	0x080085cc

08008524 <memset>:
 8008524:	4402      	add	r2, r0
 8008526:	4603      	mov	r3, r0
 8008528:	4293      	cmp	r3, r2
 800852a:	d100      	bne.n	800852e <memset+0xa>
 800852c:	4770      	bx	lr
 800852e:	f803 1b01 	strb.w	r1, [r3], #1
 8008532:	e7f9      	b.n	8008528 <memset+0x4>

08008534 <__libc_init_array>:
 8008534:	b570      	push	{r4, r5, r6, lr}
 8008536:	4d0d      	ldr	r5, [pc, #52]	@ (800856c <__libc_init_array+0x38>)
 8008538:	4c0d      	ldr	r4, [pc, #52]	@ (8008570 <__libc_init_array+0x3c>)
 800853a:	1b64      	subs	r4, r4, r5
 800853c:	10a4      	asrs	r4, r4, #2
 800853e:	2600      	movs	r6, #0
 8008540:	42a6      	cmp	r6, r4
 8008542:	d109      	bne.n	8008558 <__libc_init_array+0x24>
 8008544:	4d0b      	ldr	r5, [pc, #44]	@ (8008574 <__libc_init_array+0x40>)
 8008546:	4c0c      	ldr	r4, [pc, #48]	@ (8008578 <__libc_init_array+0x44>)
 8008548:	f000 f818 	bl	800857c <_init>
 800854c:	1b64      	subs	r4, r4, r5
 800854e:	10a4      	asrs	r4, r4, #2
 8008550:	2600      	movs	r6, #0
 8008552:	42a6      	cmp	r6, r4
 8008554:	d105      	bne.n	8008562 <__libc_init_array+0x2e>
 8008556:	bd70      	pop	{r4, r5, r6, pc}
 8008558:	f855 3b04 	ldr.w	r3, [r5], #4
 800855c:	4798      	blx	r3
 800855e:	3601      	adds	r6, #1
 8008560:	e7ee      	b.n	8008540 <__libc_init_array+0xc>
 8008562:	f855 3b04 	ldr.w	r3, [r5], #4
 8008566:	4798      	blx	r3
 8008568:	3601      	adds	r6, #1
 800856a:	e7f2      	b.n	8008552 <__libc_init_array+0x1e>
 800856c:	080085dc 	.word	0x080085dc
 8008570:	080085dc 	.word	0x080085dc
 8008574:	080085dc 	.word	0x080085dc
 8008578:	080085e0 	.word	0x080085e0

0800857c <_init>:
 800857c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857e:	bf00      	nop
 8008580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008582:	bc08      	pop	{r3}
 8008584:	469e      	mov	lr, r3
 8008586:	4770      	bx	lr

08008588 <_fini>:
 8008588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858a:	bf00      	nop
 800858c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800858e:	bc08      	pop	{r3}
 8008590:	469e      	mov	lr, r3
 8008592:	4770      	bx	lr
