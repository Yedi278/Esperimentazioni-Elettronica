
Dual ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000932c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080095c4  080095c4  0000a5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009604  08009604  0000a604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800960c  0800960c  0000a60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009610  08009610  0000a610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08009614  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a34  24000010  08009624  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000a44  08009624  0000ba44  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d0ca  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000335e  00000000  00000000  00028108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016c8  00000000  00000000  0002b468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000011bb  00000000  00000000  0002cb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a65a  00000000  00000000  0002dceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f83c  00000000  00000000  00068345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017c69e  00000000  00000000  00087b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020421f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006184  00000000  00000000  00204264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008e  00000000  00000000  0020a3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080095ac 	.word	0x080095ac

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080095ac 	.word	0x080095ac

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ADCx_custom_init>:
 */

#include "Custom_ADC.h"


void ADCx_custom_init(ADC_TypeDef *ADCx, uint8_t INx_Pin){
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]

//	ADCx->CR &= ~ADC_CR_ADSTART;

	ADCx->SQR1 = 0; // per azzerare la configurazione dell'ide
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2200      	movs	r2, #0
 80005d8:	631a      	str	r2, [r3, #48]	@ 0x30

	ADCx->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere 0=1
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	631a      	str	r2, [r3, #48]	@ 0x30

	ADCx->SQR1 |= (INx_Pin << ADC_SQR1_SQ1_Pos);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005e6:	78fb      	ldrb	r3, [r7, #3]
 80005e8:	019b      	lsls	r3, r3, #6
 80005ea:	431a      	orrs	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	631a      	str	r2, [r3, #48]	@ 0x30

	ADCx->PCSEL = 0;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
	ADCx->PCSEL |= (1 << (ADC_PCSEL_PCSEL_Pos + INx_Pin)); // Dichiaro quali canali leggere : 18 e 19
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	78fa      	ldrb	r2, [r7, #3]
 80005fc:	2101      	movs	r1, #1
 80005fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000602:	431a      	orrs	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	61da      	str	r2, [r3, #28]

	/* Calibrazione */
	ADCx->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	609a      	str	r2, [r3, #8]
	ADCx->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	609a      	str	r2, [r3, #8]
	ADCx->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	f023 0201 	bic.w	r2, r3, #1
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	609a      	str	r2, [r3, #8]
	ADCx->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	609a      	str	r2, [r3, #8]


	while((ADCx->CR & ADC_CR_ADCAL) != 0){};
 8000638:	bf00      	nop
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	2b00      	cmp	r3, #0
 8000640:	dbfb      	blt.n	800063a <ADCx_custom_init+0x72>
	// FIne calibrazione

	ADCx->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f043 0201 	orr.w	r2, r3, #1
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	601a      	str	r2, [r3, #0]
	ADCx->CR |= ADC_CR_ADEN;		// Accendo l' ADC
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	f043 0201 	orr.w	r2, r3, #1
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	609a      	str	r2, [r3, #8]

	while((ADCx->ISR & ADC_ISR_ADRDY) != 0){}
 800065a:	bf00      	nop
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f9      	bne.n	800065c <ADCx_custom_init+0x94>

	ADCx->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f043 0201 	orr.w	r2, r3, #1
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	601a      	str	r2, [r3, #0]
	// Fine accensione

	/* ADR INIZIALIZZATO */
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <ADC_custom_init>:

void ADC_custom_init(){
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

	/*	PRIMO ADC	*/

	/*	IN0 -> PIN PC2 o A4 */
	ADCx_custom_init(ADC3, 0);
 8000684:	2100      	movs	r1, #0
 8000686:	481c      	ldr	r0, [pc, #112]	@ (80006f8 <ADC_custom_init+0x78>)
 8000688:	f7ff ff9e 	bl	80005c8 <ADCx_custom_init>
	ADC3->IER &= ~ADC_IER_EOCIE;	// interrupt ADC
 800068c:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <ADC_custom_init+0x78>)
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	4a19      	ldr	r2, [pc, #100]	@ (80006f8 <ADC_custom_init+0x78>)
 8000692:	f023 0304 	bic.w	r3, r3, #4
 8000696:	6053      	str	r3, [r2, #4]
	ADCx_custom_init(ADC1, 19);
 8000698:	2113      	movs	r1, #19
 800069a:	4818      	ldr	r0, [pc, #96]	@ (80006fc <ADC_custom_init+0x7c>)
 800069c:	f7ff ff94 	bl	80005c8 <ADCx_custom_init>
	ADC1->IER &= ~ADC_IER_EOCIE;	// interrupt ADC
 80006a0:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <ADC_custom_init+0x7c>)
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	4a15      	ldr	r2, [pc, #84]	@ (80006fc <ADC_custom_init+0x7c>)
 80006a6:	f023 0304 	bic.w	r3, r3, #4
 80006aa:	6053      	str	r3, [r2, #4]


	// TIM6 set to 240Mhz
	TIM6->PSC = 1; // TIM6 CLOCK/PSC
 80006ac:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <ADC_custom_init+0x80>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 1;	// TIM6 CLOCK/PSC/ARR
 80006b2:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <ADC_custom_init+0x80>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->CNT = 0;
 80006b8:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <ADC_custom_init+0x80>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->DIER &= ~TIM_DIER_UIE;
 80006be:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <ADC_custom_init+0x80>)
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000700 <ADC_custom_init+0x80>)
 80006c4:	f023 0301 	bic.w	r3, r3, #1
 80006c8:	60d3      	str	r3, [r2, #12]

	TIM7->PSC = 1;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <ADC_custom_init+0x84>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM7->ARR = 1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <ADC_custom_init+0x84>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM7->CNT = 0;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <ADC_custom_init+0x84>)
 80006d8:	2200      	movs	r2, #0
 80006da:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM7->DIER |= TIM_DIER_UIE;
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <ADC_custom_init+0x84>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	4a08      	ldr	r2, [pc, #32]	@ (8000704 <ADC_custom_init+0x84>)
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	60d3      	str	r3, [r2, #12]
	TIM7->CR1 &= ~TIM_CR1_CEN;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <ADC_custom_init+0x84>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a05      	ldr	r2, [pc, #20]	@ (8000704 <ADC_custom_init+0x84>)
 80006ee:	f023 0301 	bic.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	58026000 	.word	0x58026000
 80006fc:	40022000 	.word	0x40022000
 8000700:	40001000 	.word	0x40001000
 8000704:	40001400 	.word	0x40001400

08000708 <COMP_custom_init>:
bool acquiring = false;
bool acquiring_2 = false;
bool enable = 	 false;
bool pre_triggd = false;

void COMP_custom_init(){
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

	DAC1->CR |= DAC_CR_EN1;			// attivo DAC
 800070c:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <COMP_custom_init+0x60>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a15      	ldr	r2, [pc, #84]	@ (8000768 <COMP_custom_init+0x60>)
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	6013      	str	r3, [r2, #0]

	DAC1->DHR12R1 = V_to_uint12_t(0.8);			// imposto soglia del comparatore IN 12 BIT NON 16
 8000718:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <COMP_custom_init+0x60>)
 800071a:	f44f 4204 	mov.w	r2, #33792	@ 0x8400
 800071e:	609a      	str	r2, [r3, #8]

	DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 8000720:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <COMP_custom_init+0x60>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	4a10      	ldr	r2, [pc, #64]	@ (8000768 <COMP_custom_init+0x60>)
 8000726:	f043 0301 	orr.w	r3, r3, #1
 800072a:	6053      	str	r3, [r2, #4]

	COMP2->CFGR |= COMP_CFGRx_EN;	// attivo il comparatore
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <COMP_custom_init+0x64>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a0e      	ldr	r2, [pc, #56]	@ (800076c <COMP_custom_init+0x64>)
 8000732:	f043 0301 	orr.w	r3, r3, #1
 8000736:	6013      	str	r3, [r2, #0]
	COMP1->CFGR |= COMP_CFGRx_EN;
 8000738:	4b0d      	ldr	r3, [pc, #52]	@ (8000770 <COMP_custom_init+0x68>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a0c      	ldr	r2, [pc, #48]	@ (8000770 <COMP_custom_init+0x68>)
 800073e:	f043 0301 	orr.w	r3, r3, #1
 8000742:	6013      	str	r3, [r2, #0]

	triggd = false;
 8000744:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <COMP_custom_init+0x6c>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
	acquiring = false;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <COMP_custom_init+0x70>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
	enable = false;
 8000750:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <COMP_custom_init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
	pre_triggd = false;
 8000756:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <COMP_custom_init+0x78>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40007400 	.word	0x40007400
 800076c:	58003810 	.word	0x58003810
 8000770:	5800380c 	.word	0x5800380c
 8000774:	2400002c 	.word	0x2400002c
 8000778:	2400002d 	.word	0x2400002d
 800077c:	2400002e 	.word	0x2400002e
 8000780:	2400002f 	.word	0x2400002f

08000784 <TIM7_custom_interrupt>:

void TIM7_custom_interrupt(){
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

	if(!acquiring){
 8000788:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <TIM7_custom_interrupt+0x68>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	f083 0301 	eor.w	r3, r3, #1
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d026      	beq.n	80007e4 <TIM7_custom_interrupt+0x60>
		if( (COMP12->SR&COMP_SR_C1VAL) && (COMP12->SR&COMP_SR_C2VAL) ){
 8000796:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <TIM7_custom_interrupt+0x6c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d01c      	beq.n	80007dc <TIM7_custom_interrupt+0x58>
 80007a2:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <TIM7_custom_interrupt+0x6c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d016      	beq.n	80007dc <TIM7_custom_interrupt+0x58>
			if(pre_triggd){
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <TIM7_custom_interrupt+0x70>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d016      	beq.n	80007e4 <TIM7_custom_interrupt+0x60>
				acquiring = true;
 80007b6:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <TIM7_custom_interrupt+0x68>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
				TIM6->CR1 |= TIM_CR1_CEN;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <TIM7_custom_interrupt+0x74>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a0d      	ldr	r2, [pc, #52]	@ (80007f8 <TIM7_custom_interrupt+0x74>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	6013      	str	r3, [r2, #0]
				TIM7->CR1 &= ~TIM_CR1_CEN;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <TIM7_custom_interrupt+0x78>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a0b      	ldr	r2, [pc, #44]	@ (80007fc <TIM7_custom_interrupt+0x78>)
 80007ce:	f023 0301 	bic.w	r3, r3, #1
 80007d2:	6013      	str	r3, [r2, #0]
				pre_triggd = false;
 80007d4:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <TIM7_custom_interrupt+0x70>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
				return;
 80007da:	e003      	b.n	80007e4 <TIM7_custom_interrupt+0x60>
			}
		}else{
			pre_triggd = true;
 80007dc:	4b05      	ldr	r3, [pc, #20]	@ (80007f4 <TIM7_custom_interrupt+0x70>)
 80007de:	2201      	movs	r2, #1
 80007e0:	701a      	strb	r2, [r3, #0]
			return;
 80007e2:	bf00      	nop
		}
	}
}
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	2400002d 	.word	0x2400002d
 80007f0:	58003800 	.word	0x58003800
 80007f4:	2400002f 	.word	0x2400002f
 80007f8:	40001000 	.word	0x40001000
 80007fc:	40001400 	.word	0x40001400

08000800 <DMA_custom_init>:

uint16_t DMA_data_buffer[2*DATA_LENGTH];

uint16_t data_index=0;

void DMA_custom_init(){
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

	data_index = 0;
 8000804:	4b30      	ldr	r3, [pc, #192]	@ (80008c8 <DMA_custom_init+0xc8>)
 8000806:	2200      	movs	r2, #0
 8000808:	801a      	strh	r2, [r3, #0]

	DMA1_Stream0->M0AR = (uint32_t) (&DMA_data_buffer[0]);	// inidico l'indirizzo dello storarge di dati
 800080a:	4b30      	ldr	r3, [pc, #192]	@ (80008cc <DMA_custom_init+0xcc>)
 800080c:	4a30      	ldr	r2, [pc, #192]	@ (80008d0 <DMA_custom_init+0xd0>)
 800080e:	60da      	str	r2, [r3, #12]
	DMA1_Stream1->M0AR = (uint32_t) (&DMA_data_buffer[0]);
 8000810:	4b30      	ldr	r3, [pc, #192]	@ (80008d4 <DMA_custom_init+0xd4>)
 8000812:	4a2f      	ldr	r2, [pc, #188]	@ (80008d0 <DMA_custom_init+0xd0>)
 8000814:	60da      	str	r2, [r3, #12]
	DMA2_Stream0->M0AR = (uint32_t) (&DMA_data_buffer[DATA_LENGTH]);	// inidico l'indirizzo dello storarge di dati
 8000816:	4b30      	ldr	r3, [pc, #192]	@ (80008d8 <DMA_custom_init+0xd8>)
 8000818:	4a30      	ldr	r2, [pc, #192]	@ (80008dc <DMA_custom_init+0xdc>)
 800081a:	60da      	str	r2, [r3, #12]

	DMA1_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
 800081c:	4b2b      	ldr	r3, [pc, #172]	@ (80008cc <DMA_custom_init+0xcc>)
 800081e:	4a30      	ldr	r2, [pc, #192]	@ (80008e0 <DMA_custom_init+0xe0>)
 8000820:	609a      	str	r2, [r3, #8]
	DMA1_Stream1->PAR = (uint32_t) (&USART3->TDR);
 8000822:	4b2c      	ldr	r3, [pc, #176]	@ (80008d4 <DMA_custom_init+0xd4>)
 8000824:	4a2f      	ldr	r2, [pc, #188]	@ (80008e4 <DMA_custom_init+0xe4>)
 8000826:	609a      	str	r2, [r3, #8]
	DMA2_Stream0->PAR = (uint32_t) (&ADC1->DR);
 8000828:	4b2b      	ldr	r3, [pc, #172]	@ (80008d8 <DMA_custom_init+0xd8>)
 800082a:	4a2f      	ldr	r2, [pc, #188]	@ (80008e8 <DMA_custom_init+0xe8>)
 800082c:	609a      	str	r2, [r3, #8]

	DMA2_Stream0->NDTR = DATA_LENGTH;
 800082e:	4b2a      	ldr	r3, [pc, #168]	@ (80008d8 <DMA_custom_init+0xd8>)
 8000830:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000834:	605a      	str	r2, [r3, #4]
	DMA1_Stream0->NDTR = DATA_LENGTH;			// numero elementi da prendere da ADC3
 8000836:	4b25      	ldr	r3, [pc, #148]	@ (80008cc <DMA_custom_init+0xcc>)
 8000838:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800083c:	605a      	str	r2, [r3, #4]
	DMA1_Stream1->NDTR = 2* (2*DATA_LENGTH);			// numero elementi da mandare a USART3
 800083e:	4b25      	ldr	r3, [pc, #148]	@ (80008d4 <DMA_custom_init+0xd4>)
 8000840:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000844:	605a      	str	r2, [r3, #4]

	DMA1_Stream0->CR |= DMA_SxCR_TCIE;		// ablilito interrupt di fine ricezione
 8000846:	4b21      	ldr	r3, [pc, #132]	@ (80008cc <DMA_custom_init+0xcc>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a20      	ldr	r2, [pc, #128]	@ (80008cc <DMA_custom_init+0xcc>)
 800084c:	f043 0310 	orr.w	r3, r3, #16
 8000850:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_TCIE;		// abilito interrupt di fine trasmissione
 8000852:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <DMA_custom_init+0xd4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a1f      	ldr	r2, [pc, #124]	@ (80008d4 <DMA_custom_init+0xd4>)
 8000858:	f043 0310 	orr.w	r3, r3, #16
 800085c:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_TCIE;
 800085e:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <DMA_custom_init+0xd8>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a1d      	ldr	r2, [pc, #116]	@ (80008d8 <DMA_custom_init+0xd8>)
 8000864:	f023 0310 	bic.w	r3, r3, #16
 8000868:	6013      	str	r3, [r2, #0]

	ADC3->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);	// DMA in cont mode
 800086a:	4b20      	ldr	r3, [pc, #128]	@ (80008ec <DMA_custom_init+0xec>)
 800086c:	68db      	ldr	r3, [r3, #12]
 800086e:	4a1f      	ldr	r2, [pc, #124]	@ (80008ec <DMA_custom_init+0xec>)
 8000870:	f043 0303 	orr.w	r3, r3, #3
 8000874:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);
 8000876:	4b1e      	ldr	r3, [pc, #120]	@ (80008f0 <DMA_custom_init+0xf0>)
 8000878:	68db      	ldr	r3, [r3, #12]
 800087a:	4a1d      	ldr	r2, [pc, #116]	@ (80008f0 <DMA_custom_init+0xf0>)
 800087c:	f043 0303 	orr.w	r3, r3, #3
 8000880:	60d3      	str	r3, [r2, #12]

	DMA1_Stream0->CR |= DMA_SxCR_EN;
 8000882:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <DMA_custom_init+0xcc>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a11      	ldr	r2, [pc, #68]	@ (80008cc <DMA_custom_init+0xcc>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR &= ~DMA_SxCR_EN;
 800088e:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <DMA_custom_init+0xd4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a10      	ldr	r2, [pc, #64]	@ (80008d4 <DMA_custom_init+0xd4>)
 8000894:	f023 0301 	bic.w	r3, r3, #1
 8000898:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_SxCR_EN;
 800089a:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <DMA_custom_init+0xd8>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a0e      	ldr	r2, [pc, #56]	@ (80008d8 <DMA_custom_init+0xd8>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6013      	str	r3, [r2, #0]

	ADC1->CR |= ADC_CR_ADSTART;
 80008a6:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <DMA_custom_init+0xf0>)
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	4a11      	ldr	r2, [pc, #68]	@ (80008f0 <DMA_custom_init+0xf0>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADSTART;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <DMA_custom_init+0xec>)
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	4a0d      	ldr	r2, [pc, #52]	@ (80008ec <DMA_custom_init+0xec>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	6093      	str	r3, [r2, #8]
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	24000670 	.word	0x24000670
 80008cc:	40020010 	.word	0x40020010
 80008d0:	24000030 	.word	0x24000030
 80008d4:	40020028 	.word	0x40020028
 80008d8:	40020410 	.word	0x40020410
 80008dc:	24000350 	.word	0x24000350
 80008e0:	58026040 	.word	0x58026040
 80008e4:	40004828 	.word	0x40004828
 80008e8:	40022040 	.word	0x40022040
 80008ec:	58026000 	.word	0x58026000
 80008f0:	40022000 	.word	0x40022000

080008f4 <DMA_custom_interrupt_tx>:

void DMA_custom_interrupt_tx(){
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

	USART3->CR3 &= ~USART_CR3_DMAT;			  // SPENGO trasmissione usart
 80008f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <DMA_custom_interrupt_tx+0x70>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	4a19      	ldr	r2, [pc, #100]	@ (8000964 <DMA_custom_interrupt_tx+0x70>)
 80008fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000902:	6093      	str	r3, [r2, #8]

	DMA1->LIFCR = 0xffffffff;
 8000904:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <DMA_custom_interrupt_tx+0x74>)
 8000906:	f04f 32ff 	mov.w	r2, #4294967295
 800090a:	609a      	str	r2, [r3, #8]
	DMA1->HIFCR = 0xffffffff;
 800090c:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <DMA_custom_interrupt_tx+0x74>)
 800090e:	f04f 32ff 	mov.w	r2, #4294967295
 8000912:	60da      	str	r2, [r3, #12]

	DMA1_Stream0->NDTR = DATA_LENGTH;			// numero elementi da prendere da ADC3
 8000914:	4b15      	ldr	r3, [pc, #84]	@ (800096c <DMA_custom_interrupt_tx+0x78>)
 8000916:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800091a:	605a      	str	r2, [r3, #4]
	DMA2_Stream0->NDTR = DATA_LENGTH;
 800091c:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <DMA_custom_interrupt_tx+0x7c>)
 800091e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000922:	605a      	str	r2, [r3, #4]

	DMA1_Stream0->CR |= DMA_SxCR_EN;
 8000924:	4b11      	ldr	r3, [pc, #68]	@ (800096c <DMA_custom_interrupt_tx+0x78>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a10      	ldr	r2, [pc, #64]	@ (800096c <DMA_custom_interrupt_tx+0x78>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	6013      	str	r3, [r2, #0]

	DMA2->LIFCR = 0xffffffff;
 8000930:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <DMA_custom_interrupt_tx+0x80>)
 8000932:	f04f 32ff 	mov.w	r2, #4294967295
 8000936:	609a      	str	r2, [r3, #8]
	DMA2->HIFCR = 0xffffffff;
 8000938:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <DMA_custom_interrupt_tx+0x80>)
 800093a:	f04f 32ff 	mov.w	r2, #4294967295
 800093e:	60da      	str	r2, [r3, #12]

	DMA2_Stream0->CR |= DMA_SxCR_EN;
 8000940:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <DMA_custom_interrupt_tx+0x7c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0a      	ldr	r2, [pc, #40]	@ (8000970 <DMA_custom_interrupt_tx+0x7c>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	6013      	str	r3, [r2, #0]

	pre_triggd = false;
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <DMA_custom_interrupt_tx+0x84>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
	acquiring = false;
 8000952:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <DMA_custom_interrupt_tx+0x88>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40004800 	.word	0x40004800
 8000968:	40020000 	.word	0x40020000
 800096c:	40020010 	.word	0x40020010
 8000970:	40020410 	.word	0x40020410
 8000974:	40020400 	.word	0x40020400
 8000978:	2400002f 	.word	0x2400002f
 800097c:	2400002d 	.word	0x2400002d

08000980 <DMA_custom_interrupt_rx>:

void DMA_custom_interrupt_rx(){
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

	TIM6->CR1 &= ~TIM_CR1_CEN;
 8000984:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <DMA_custom_interrupt_rx+0x54>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a12      	ldr	r2, [pc, #72]	@ (80009d4 <DMA_custom_interrupt_rx+0x54>)
 800098a:	f023 0301 	bic.w	r3, r3, #1
 800098e:	6013      	str	r3, [r2, #0]

	DMA1->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 8000990:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <DMA_custom_interrupt_rx+0x58>)
 8000992:	f04f 32ff 	mov.w	r2, #4294967295
 8000996:	609a      	str	r2, [r3, #8]
	DMA1->HIFCR = 0xffffffff;
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <DMA_custom_interrupt_rx+0x58>)
 800099a:	f04f 32ff 	mov.w	r2, #4294967295
 800099e:	60da      	str	r2, [r3, #12]

	while(DMA2_Stream0->NDTR != 0);
 80009a0:	bf00      	nop
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <DMA_custom_interrupt_rx+0x5c>)
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d1fb      	bne.n	80009a2 <DMA_custom_interrupt_rx+0x22>

	DMA1_Stream1->NDTR = 2*2*DATA_LENGTH;
 80009aa:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <DMA_custom_interrupt_rx+0x60>)
 80009ac:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80009b0:	605a      	str	r2, [r3, #4]
	DMA1_Stream1->CR |= DMA_SxCR_EN;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <DMA_custom_interrupt_rx+0x60>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <DMA_custom_interrupt_rx+0x60>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6013      	str	r3, [r2, #0]
	USART3->CR3 |= USART_CR3_DMAT;
 80009be:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <DMA_custom_interrupt_rx+0x64>)
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	4a08      	ldr	r2, [pc, #32]	@ (80009e4 <DMA_custom_interrupt_rx+0x64>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009c8:	6093      	str	r3, [r2, #8]
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	40001000 	.word	0x40001000
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020410 	.word	0x40020410
 80009e0:	40020028 	.word	0x40020028
 80009e4:	40004800 	.word	0x40004800

080009e8 <DMA2_custom_interrupt>:

void DMA2_custom_interrupt(){
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

	DMA2->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <DMA2_custom_interrupt+0x20>)
 80009ee:	f04f 32ff 	mov.w	r2, #4294967295
 80009f2:	609a      	str	r2, [r3, #8]
	DMA2->HIFCR = 0xffffffff;
 80009f4:	4b04      	ldr	r3, [pc, #16]	@ (8000a08 <DMA2_custom_interrupt+0x20>)
 80009f6:	f04f 32ff 	mov.w	r2, #4294967295
 80009fa:	60da      	str	r2, [r3, #12]

}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40020400 	.word	0x40020400

08000a0c <USART_custom_init>:
 *      Author: yehan
 */

#include "Custom_USART.h"

void USART_custom_init(){
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

	USART3->CR1 |= USART_CR1_TE;
 8000a10:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <USART_custom_init+0x4c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a10      	ldr	r2, [pc, #64]	@ (8000a58 <USART_custom_init+0x4c>)
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_RE;
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <USART_custom_init+0x4c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <USART_custom_init+0x4c>)
 8000a22:	f043 0304 	orr.w	r3, r3, #4
 8000a26:	6013      	str	r3, [r2, #0]

	USART3->CR1 &= ~USART_CR1_TXEIE;
 8000a28:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <USART_custom_init+0x4c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a58 <USART_custom_init+0x4c>)
 8000a2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000a32:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_RXNEIE;
 8000a34:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <USART_custom_init+0x4c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a07      	ldr	r2, [pc, #28]	@ (8000a58 <USART_custom_init+0x4c>)
 8000a3a:	f043 0320 	orr.w	r3, r3, #32
 8000a3e:	6013      	str	r3, [r2, #0]

	USART3->CR1 |= USART_CR1_UE;
 8000a40:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <USART_custom_init+0x4c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a04      	ldr	r2, [pc, #16]	@ (8000a58 <USART_custom_init+0x4c>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	6013      	str	r3, [r2, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40004800 	.word	0x40004800

08000a5c <USART_custom_interrupt>:

void USART_custom_interrupt(){
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0

	char data = USART3->RDR;
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <USART_custom_interrupt+0x5c>)
 8000a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a66:	71fb      	strb	r3, [r7, #7]

	if(data == '?'){
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a6c:	d10b      	bne.n	8000a86 <USART_custom_interrupt+0x2a>
		if((TIM7->CR1 & TIM_CR1_CEN) == 0){
 8000a6e:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <USART_custom_interrupt+0x60>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d105      	bne.n	8000a86 <USART_custom_interrupt+0x2a>
			TIM7->CR1 |= TIM_CR1_CEN;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <USART_custom_interrupt+0x60>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000abc <USART_custom_interrupt+0x60>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6013      	str	r3, [r2, #0]
		}
	}

	USART3->ICR |= USART_ICR_ORECF;  //Cancella l'overrun. Capita quando si entra in debug
 8000a86:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <USART_custom_interrupt+0x5c>)
 8000a88:	6a1b      	ldr	r3, [r3, #32]
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ab8 <USART_custom_interrupt+0x5c>)
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF;   //Azzeramento flag interrupt trasmissione
 8000a92:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <USART_custom_interrupt+0x5c>)
 8000a94:	6a1b      	ldr	r3, [r3, #32]
 8000a96:	4a08      	ldr	r2, [pc, #32]	@ (8000ab8 <USART_custom_interrupt+0x5c>)
 8000a98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a9c:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <USART_custom_interrupt+0x5c>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	4a05      	ldr	r2, [pc, #20]	@ (8000ab8 <USART_custom_interrupt+0x5c>)
 8000aa4:	f043 0308 	orr.w	r3, r3, #8
 8000aa8:	6193      	str	r3, [r2, #24]
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40004800 	.word	0x40004800
 8000abc:	40001400 	.word	0x40001400

08000ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac4:	f001 f80c 	bl	8001ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac8:	f000 f820 	bl	8000b0c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000acc:	f000 f898 	bl	8000c00 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad0:	f000 fb30 	bl	8001134 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ad4:	f000 faee 	bl	80010b4 <MX_DMA_Init>
  MX_ADC3_Init();
 8000ad8:	f000 f940 	bl	8000d5c <MX_ADC3_Init>
  MX_COMP2_Init();
 8000adc:	f000 f9d2 	bl	8000e84 <MX_COMP2_Init>
  MX_DAC1_Init();
 8000ae0:	f000 f9fc 	bl	8000edc <MX_DAC1_Init>
  MX_TIM6_Init();
 8000ae4:	f000 fa2c 	bl	8000f40 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000ae8:	f000 fa60 	bl	8000fac <MX_TIM7_Init>
  MX_USART3_UART_Init();
 8000aec:	f000 fa94 	bl	8001018 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000af0:	f000 f8b6 	bl	8000c60 <MX_ADC1_Init>
  MX_COMP1_Init();
 8000af4:	f000 f998 	bl	8000e28 <MX_COMP1_Init>
  /* USER CODE BEGIN 2 */

  COMP_custom_init();
 8000af8:	f7ff fe06 	bl	8000708 <COMP_custom_init>
  ADC_custom_init();
 8000afc:	f7ff fdc0 	bl	8000680 <ADC_custom_init>
  USART_custom_init();
 8000b00:	f7ff ff84 	bl	8000a0c <USART_custom_init>
  DMA_custom_init();
 8000b04:	f7ff fe7c 	bl	8000800 <DMA_custom_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <main+0x48>

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b09c      	sub	sp, #112	@ 0x70
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b16:	224c      	movs	r2, #76	@ 0x4c
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f008 fd1a 	bl	8009554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2220      	movs	r2, #32
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f008 fd14 	bl	8009554 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	f003 fc3b 	bl	80043a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b32:	2300      	movs	r3, #0
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	4b30      	ldr	r3, [pc, #192]	@ (8000bf8 <SystemClock_Config+0xec>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000bf8 <SystemClock_Config+0xec>)
 8000b3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b40:	6193      	str	r3, [r2, #24]
 8000b42:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf8 <SystemClock_Config+0xec>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bfc <SystemClock_Config+0xf0>)
 8000b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b50:	4a2a      	ldr	r2, [pc, #168]	@ (8000bfc <SystemClock_Config+0xf0>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b58:	4b28      	ldr	r3, [pc, #160]	@ (8000bfc <SystemClock_Config+0xf0>)
 8000b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b64:	bf00      	nop
 8000b66:	4b24      	ldr	r3, [pc, #144]	@ (8000bf8 <SystemClock_Config+0xec>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b72:	d1f8      	bne.n	8000b66 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b74:	2301      	movs	r3, #1
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b78:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b82:	2302      	movs	r3, #2
 8000b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b86:	2301      	movs	r3, #1
 8000b88:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000b8a:	2378      	movs	r3, #120	@ 0x78
 8000b8c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b92:	2304      	movs	r3, #4
 8000b94:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b96:	2302      	movs	r3, #2
 8000b98:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b9a:	230c      	movs	r3, #12
 8000b9c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000baa:	4618      	mov	r0, r3
 8000bac:	f003 fc36 	bl	800441c <HAL_RCC_OscConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bb6:	f000 fbed 	bl	8001394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bba:	233f      	movs	r3, #63	@ 0x3f
 8000bbc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bc6:	2308      	movs	r3, #8
 8000bc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bca:	2340      	movs	r3, #64	@ 0x40
 8000bcc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bce:	2340      	movs	r3, #64	@ 0x40
 8000bd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bd6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bd8:	2340      	movs	r3, #64	@ 0x40
 8000bda:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2104      	movs	r1, #4
 8000be0:	4618      	mov	r0, r3
 8000be2:	f004 f875 	bl	8004cd0 <HAL_RCC_ClockConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000bec:	f000 fbd2 	bl	8001394 <Error_Handler>
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	3770      	adds	r7, #112	@ 0x70
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	58024800 	.word	0x58024800
 8000bfc:	58000400 	.word	0x58000400

08000c00 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b0b0      	sub	sp, #192	@ 0xc0
 8000c04:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c06:	463b      	mov	r3, r7
 8000c08:	22c0      	movs	r2, #192	@ 0xc0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f008 fca1 	bl	8009554 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c12:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 50;
 8000c22:	2332      	movs	r3, #50	@ 0x32
 8000c24:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000c32:	2380      	movs	r3, #128	@ 0x80
 8000c34:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c44:	463b      	mov	r3, r7
 8000c46:	4618      	mov	r0, r3
 8000c48:	f004 fbce 	bl	80053e8 <HAL_RCCEx_PeriphCLKConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000c52:	f000 fb9f 	bl	8001394 <Error_Handler>
  }
}
 8000c56:	bf00      	nop
 8000c58:	37c0      	adds	r7, #192	@ 0xc0
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	@ 0x28
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c72:	463b      	mov	r3, r7
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
 8000c80:	615a      	str	r2, [r3, #20]
 8000c82:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c84:	4b32      	ldr	r3, [pc, #200]	@ (8000d50 <MX_ADC1_Init+0xf0>)
 8000c86:	4a33      	ldr	r2, [pc, #204]	@ (8000d54 <MX_ADC1_Init+0xf4>)
 8000c88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c8a:	4b31      	ldr	r3, [pc, #196]	@ (8000d50 <MX_ADC1_Init+0xf0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c90:	4b2f      	ldr	r3, [pc, #188]	@ (8000d50 <MX_ADC1_Init+0xf0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c96:	4b2e      	ldr	r3, [pc, #184]	@ (8000d50 <MX_ADC1_Init+0xf0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d50 <MX_ADC1_Init+0xf0>)
 8000c9e:	2204      	movs	r2, #4
 8000ca0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8000d50 <MX_ADC1_Init+0xf0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ca8:	4b29      	ldr	r3, [pc, #164]	@ (8000d50 <MX_ADC1_Init+0xf0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000cae:	4b28      	ldr	r3, [pc, #160]	@ (8000d50 <MX_ADC1_Init+0xf0>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cb4:	4b26      	ldr	r3, [pc, #152]	@ (8000d50 <MX_ADC1_Init+0xf0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000cba:	4b25      	ldr	r3, [pc, #148]	@ (8000d50 <MX_ADC1_Init+0xf0>)
 8000cbc:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000cc0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000cc2:	4b23      	ldr	r3, [pc, #140]	@ (8000d50 <MX_ADC1_Init+0xf0>)
 8000cc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cca:	4b21      	ldr	r3, [pc, #132]	@ (8000d50 <MX_ADC1_Init+0xf0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d50 <MX_ADC1_Init+0xf0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d50 <MX_ADC1_Init+0xf0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <MX_ADC1_Init+0xf0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <MX_ADC1_Init+0xf0>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cea:	4819      	ldr	r0, [pc, #100]	@ (8000d50 <MX_ADC1_Init+0xf0>)
 8000cec:	f001 f9b6 	bl	800205c <HAL_ADC_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000cf6:	f000 fb4d 	bl	8001394 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4619      	mov	r1, r3
 8000d04:	4812      	ldr	r0, [pc, #72]	@ (8000d50 <MX_ADC1_Init+0xf0>)
 8000d06:	f001 ff6d 	bl	8002be4 <HAL_ADCEx_MultiModeConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000d10:	f000 fb40 	bl	8001394 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000d14:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <MX_ADC1_Init+0xf8>)
 8000d16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d18:	2306      	movs	r3, #6
 8000d1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d20:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000d24:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d26:	2304      	movs	r3, #4
 8000d28:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d32:	463b      	mov	r3, r7
 8000d34:	4619      	mov	r1, r3
 8000d36:	4806      	ldr	r0, [pc, #24]	@ (8000d50 <MX_ADC1_Init+0xf0>)
 8000d38:	f001 fb32 	bl	80023a0 <HAL_ADC_ConfigChannel>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000d42:	f000 fb27 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	3728      	adds	r7, #40	@ 0x28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	24000674 	.word	0x24000674
 8000d54:	40022000 	.word	0x40022000
 8000d58:	4fb80000 	.word	0x4fb80000

08000d5c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
 8000d70:	615a      	str	r2, [r3, #20]
 8000d72:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000d74:	4b2a      	ldr	r3, [pc, #168]	@ (8000e20 <MX_ADC3_Init+0xc4>)
 8000d76:	4a2b      	ldr	r2, [pc, #172]	@ (8000e24 <MX_ADC3_Init+0xc8>)
 8000d78:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d7a:	4b29      	ldr	r3, [pc, #164]	@ (8000e20 <MX_ADC3_Init+0xc4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d80:	4b27      	ldr	r3, [pc, #156]	@ (8000e20 <MX_ADC3_Init+0xc4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d86:	4b26      	ldr	r3, [pc, #152]	@ (8000e20 <MX_ADC3_Init+0xc4>)
 8000d88:	2204      	movs	r2, #4
 8000d8a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000d8c:	4b24      	ldr	r3, [pc, #144]	@ (8000e20 <MX_ADC3_Init+0xc4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d92:	4b23      	ldr	r3, [pc, #140]	@ (8000e20 <MX_ADC3_Init+0xc4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000d98:	4b21      	ldr	r3, [pc, #132]	@ (8000e20 <MX_ADC3_Init+0xc4>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d9e:	4b20      	ldr	r3, [pc, #128]	@ (8000e20 <MX_ADC3_Init+0xc4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000da4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e20 <MX_ADC3_Init+0xc4>)
 8000da6:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000daa:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000dac:	4b1c      	ldr	r3, [pc, #112]	@ (8000e20 <MX_ADC3_Init+0xc4>)
 8000dae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000db2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000db4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <MX_ADC3_Init+0xc4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dba:	4b19      	ldr	r3, [pc, #100]	@ (8000e20 <MX_ADC3_Init+0xc4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dc0:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <MX_ADC3_Init+0xc4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000dc6:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <MX_ADC3_Init+0xc4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000dce:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <MX_ADC3_Init+0xc4>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000dd4:	4812      	ldr	r0, [pc, #72]	@ (8000e20 <MX_ADC3_Init+0xc4>)
 8000dd6:	f001 f941 	bl	800205c <HAL_ADC_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000de0:	f000 fad8 	bl	8001394 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000de4:	2301      	movs	r3, #1
 8000de6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de8:	2306      	movs	r3, #6
 8000dea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000df0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000df4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000df6:	2304      	movs	r3, #4
 8000df8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	4619      	mov	r1, r3
 8000e06:	4806      	ldr	r0, [pc, #24]	@ (8000e20 <MX_ADC3_Init+0xc4>)
 8000e08:	f001 faca 	bl	80023a0 <HAL_ADC_ConfigChannel>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 8000e12:	f000 fabf 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	3720      	adds	r7, #32
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	240006d8 	.word	0x240006d8
 8000e24:	58026000 	.word	0x58026000

08000e28 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000e2c:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <MX_COMP1_Init+0x54>)
 8000e2e:	4a14      	ldr	r2, [pc, #80]	@ (8000e80 <MX_COMP1_Init+0x58>)
 8000e30:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000e32:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <MX_COMP1_Init+0x54>)
 8000e34:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000e38:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000e3a:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <MX_COMP1_Init+0x54>)
 8000e3c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000e40:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	@ (8000e7c <MX_COMP1_Init+0x54>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	@ (8000e7c <MX_COMP1_Init+0x54>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e7c <MX_COMP1_Init+0x54>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000e54:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <MX_COMP1_Init+0x54>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <MX_COMP1_Init+0x54>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000e60:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <MX_COMP1_Init+0x54>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000e66:	4805      	ldr	r0, [pc, #20]	@ (8000e7c <MX_COMP1_Init+0x54>)
 8000e68:	f001 ff9a 	bl	8002da0 <HAL_COMP_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_COMP1_Init+0x4e>
  {
    Error_Handler();
 8000e72:	f000 fa8f 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2400082c 	.word	0x2400082c
 8000e80:	5800380c 	.word	0x5800380c

08000e84 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000e88:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <MX_COMP2_Init+0x50>)
 8000e8a:	4a13      	ldr	r2, [pc, #76]	@ (8000ed8 <MX_COMP2_Init+0x54>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <MX_COMP2_Init+0x50>)
 8000e90:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000e94:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8000e96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <MX_COMP2_Init+0x50>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed4 <MX_COMP2_Init+0x50>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <MX_COMP2_Init+0x50>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <MX_COMP2_Init+0x50>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000eae:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <MX_COMP2_Init+0x50>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	@ (8000ed4 <MX_COMP2_Init+0x50>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000eba:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <MX_COMP2_Init+0x50>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000ec0:	4804      	ldr	r0, [pc, #16]	@ (8000ed4 <MX_COMP2_Init+0x50>)
 8000ec2:	f001 ff6d 	bl	8002da0 <HAL_COMP_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 8000ecc:	f000 fa62 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	24000858 	.word	0x24000858
 8000ed8:	58003810 	.word	0x58003810

08000edc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	@ 0x28
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2224      	movs	r2, #36	@ 0x24
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f008 fb33 	bl	8009554 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000eee:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <MX_DAC1_Init+0x5c>)
 8000ef0:	4a12      	ldr	r2, [pc, #72]	@ (8000f3c <MX_DAC1_Init+0x60>)
 8000ef2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ef4:	4810      	ldr	r0, [pc, #64]	@ (8000f38 <MX_DAC1_Init+0x5c>)
 8000ef6:	f002 f98c 	bl	8003212 <HAL_DAC_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000f00:	f000 fa48 	bl	8001394 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000f10:	2302      	movs	r3, #2
 8000f12:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4806      	ldr	r0, [pc, #24]	@ (8000f38 <MX_DAC1_Init+0x5c>)
 8000f20:	f002 f99a 	bl	8003258 <HAL_DAC_ConfigChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000f2a:	f000 fa33 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	@ 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	24000884 	.word	0x24000884
 8000f3c:	40007400 	.word	0x40007400

08000f40 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f50:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <MX_TIM6_Init+0x64>)
 8000f52:	4a15      	ldr	r2, [pc, #84]	@ (8000fa8 <MX_TIM6_Init+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <MX_TIM6_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <MX_TIM6_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <MX_TIM6_Init+0x64>)
 8000f64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f68:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <MX_TIM6_Init+0x64>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f70:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <MX_TIM6_Init+0x64>)
 8000f72:	f006 ff37 	bl	8007de4 <HAL_TIM_Base_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f7c:	f000 fa0a 	bl	8001394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f80:	2320      	movs	r3, #32
 8000f82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <MX_TIM6_Init+0x64>)
 8000f8e:	f007 f959 	bl	8008244 <HAL_TIMEx_MasterConfigSynchronization>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f98:	f000 f9fc 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	24000898 	.word	0x24000898
 8000fa8:	40001000 	.word	0x40001000

08000fac <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_TIM7_Init+0x64>)
 8000fbe:	4a15      	ldr	r2, [pc, #84]	@ (8001014 <MX_TIM7_Init+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000fc2:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <MX_TIM7_Init+0x64>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <MX_TIM7_Init+0x64>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000fce:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <MX_TIM7_Init+0x64>)
 8000fd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fd4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <MX_TIM7_Init+0x64>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000fdc:	480c      	ldr	r0, [pc, #48]	@ (8001010 <MX_TIM7_Init+0x64>)
 8000fde:	f006 ff01 	bl	8007de4 <HAL_TIM_Base_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000fe8:	f000 f9d4 	bl	8001394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	@ (8001010 <MX_TIM7_Init+0x64>)
 8000ffa:	f007 f923 	bl	8008244 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001004:	f000 f9c6 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	240008e4 	.word	0x240008e4
 8001014:	40001400 	.word	0x40001400

08001018 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800101c:	4b22      	ldr	r3, [pc, #136]	@ (80010a8 <MX_USART3_UART_Init+0x90>)
 800101e:	4a23      	ldr	r2, [pc, #140]	@ (80010ac <MX_USART3_UART_Init+0x94>)
 8001020:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8001022:	4b21      	ldr	r3, [pc, #132]	@ (80010a8 <MX_USART3_UART_Init+0x90>)
 8001024:	4a22      	ldr	r2, [pc, #136]	@ (80010b0 <MX_USART3_UART_Init+0x98>)
 8001026:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001028:	4b1f      	ldr	r3, [pc, #124]	@ (80010a8 <MX_USART3_UART_Init+0x90>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800102e:	4b1e      	ldr	r3, [pc, #120]	@ (80010a8 <MX_USART3_UART_Init+0x90>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001034:	4b1c      	ldr	r3, [pc, #112]	@ (80010a8 <MX_USART3_UART_Init+0x90>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800103a:	4b1b      	ldr	r3, [pc, #108]	@ (80010a8 <MX_USART3_UART_Init+0x90>)
 800103c:	220c      	movs	r2, #12
 800103e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001040:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <MX_USART3_UART_Init+0x90>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001046:	4b18      	ldr	r3, [pc, #96]	@ (80010a8 <MX_USART3_UART_Init+0x90>)
 8001048:	2200      	movs	r2, #0
 800104a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800104c:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <MX_USART3_UART_Init+0x90>)
 800104e:	2200      	movs	r2, #0
 8001050:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001052:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <MX_USART3_UART_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001058:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <MX_USART3_UART_Init+0x90>)
 800105a:	2200      	movs	r2, #0
 800105c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800105e:	4812      	ldr	r0, [pc, #72]	@ (80010a8 <MX_USART3_UART_Init+0x90>)
 8001060:	f007 f99c 	bl	800839c <HAL_UART_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800106a:	f000 f993 	bl	8001394 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800106e:	2100      	movs	r1, #0
 8001070:	480d      	ldr	r0, [pc, #52]	@ (80010a8 <MX_USART3_UART_Init+0x90>)
 8001072:	f008 f9a4 	bl	80093be <HAL_UARTEx_SetTxFifoThreshold>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 800107c:	f000 f98a 	bl	8001394 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001080:	2100      	movs	r1, #0
 8001082:	4809      	ldr	r0, [pc, #36]	@ (80010a8 <MX_USART3_UART_Init+0x90>)
 8001084:	f008 f9d9 	bl	800943a <HAL_UARTEx_SetRxFifoThreshold>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800108e:	f000 f981 	bl	8001394 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001092:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <MX_USART3_UART_Init+0x90>)
 8001094:	f008 f95a 	bl	800934c <HAL_UARTEx_DisableFifoMode>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800109e:	f000 f979 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	24000930 	.word	0x24000930
 80010ac:	40004800 	.word	0x40004800
 80010b0:	000f4240 	.word	0x000f4240

080010b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001130 <MX_DMA_Init+0x7c>)
 80010bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001130 <MX_DMA_Init+0x7c>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010ca:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <MX_DMA_Init+0x7c>)
 80010cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010d8:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <MX_DMA_Init+0x7c>)
 80010da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010de:	4a14      	ldr	r2, [pc, #80]	@ (8001130 <MX_DMA_Init+0x7c>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <MX_DMA_Init+0x7c>)
 80010ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	200b      	movs	r0, #11
 80010fc:	f002 f855 	bl	80031aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001100:	200b      	movs	r0, #11
 8001102:	f002 f86c 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	200c      	movs	r0, #12
 800110c:	f002 f84d 	bl	80031aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001110:	200c      	movs	r0, #12
 8001112:	f002 f864 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	2038      	movs	r0, #56	@ 0x38
 800111c:	f002 f845 	bl	80031aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001120:	2038      	movs	r0, #56	@ 0x38
 8001122:	f002 f85c 	bl	80031de <HAL_NVIC_EnableIRQ>

}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	58024400 	.word	0x58024400

08001134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	@ 0x30
 8001138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	4b8b      	ldr	r3, [pc, #556]	@ (8001378 <MX_GPIO_Init+0x244>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001150:	4a89      	ldr	r2, [pc, #548]	@ (8001378 <MX_GPIO_Init+0x244>)
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800115a:	4b87      	ldr	r3, [pc, #540]	@ (8001378 <MX_GPIO_Init+0x244>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
 8001166:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001168:	4b83      	ldr	r3, [pc, #524]	@ (8001378 <MX_GPIO_Init+0x244>)
 800116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800116e:	4a82      	ldr	r2, [pc, #520]	@ (8001378 <MX_GPIO_Init+0x244>)
 8001170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001174:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001178:	4b7f      	ldr	r3, [pc, #508]	@ (8001378 <MX_GPIO_Init+0x244>)
 800117a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800117e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	4b7c      	ldr	r3, [pc, #496]	@ (8001378 <MX_GPIO_Init+0x244>)
 8001188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800118c:	4a7a      	ldr	r2, [pc, #488]	@ (8001378 <MX_GPIO_Init+0x244>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001196:	4b78      	ldr	r3, [pc, #480]	@ (8001378 <MX_GPIO_Init+0x244>)
 8001198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a4:	4b74      	ldr	r3, [pc, #464]	@ (8001378 <MX_GPIO_Init+0x244>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011aa:	4a73      	ldr	r2, [pc, #460]	@ (8001378 <MX_GPIO_Init+0x244>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b4:	4b70      	ldr	r3, [pc, #448]	@ (8001378 <MX_GPIO_Init+0x244>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001378 <MX_GPIO_Init+0x244>)
 80011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c8:	4a6b      	ldr	r2, [pc, #428]	@ (8001378 <MX_GPIO_Init+0x244>)
 80011ca:	f043 0310 	orr.w	r3, r3, #16
 80011ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011d2:	4b69      	ldr	r3, [pc, #420]	@ (8001378 <MX_GPIO_Init+0x244>)
 80011d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d8:	f003 0310 	and.w	r3, r3, #16
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e0:	4b65      	ldr	r3, [pc, #404]	@ (8001378 <MX_GPIO_Init+0x244>)
 80011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e6:	4a64      	ldr	r2, [pc, #400]	@ (8001378 <MX_GPIO_Init+0x244>)
 80011e8:	f043 0308 	orr.w	r3, r3, #8
 80011ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011f0:	4b61      	ldr	r3, [pc, #388]	@ (8001378 <MX_GPIO_Init+0x244>)
 80011f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011fe:	4b5e      	ldr	r3, [pc, #376]	@ (8001378 <MX_GPIO_Init+0x244>)
 8001200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001204:	4a5c      	ldr	r2, [pc, #368]	@ (8001378 <MX_GPIO_Init+0x244>)
 8001206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800120a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800120e:	4b5a      	ldr	r3, [pc, #360]	@ (8001378 <MX_GPIO_Init+0x244>)
 8001210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001222:	4856      	ldr	r0, [pc, #344]	@ (800137c <MX_GPIO_Init+0x248>)
 8001224:	f003 f8a6 	bl	8004374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800122e:	4854      	ldr	r0, [pc, #336]	@ (8001380 <MX_GPIO_Init+0x24c>)
 8001230:	f003 f8a0 	bl	8004374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	2102      	movs	r1, #2
 8001238:	4852      	ldr	r0, [pc, #328]	@ (8001384 <MX_GPIO_Init+0x250>)
 800123a:	f003 f89b 	bl	8004374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800123e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001244:	2300      	movs	r3, #0
 8001246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	4619      	mov	r1, r3
 8001252:	484d      	ldr	r0, [pc, #308]	@ (8001388 <MX_GPIO_Init+0x254>)
 8001254:	f002 fede 	bl	8004014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001258:	2332      	movs	r3, #50	@ 0x32
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001268:	230b      	movs	r3, #11
 800126a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4619      	mov	r1, r3
 8001272:	4845      	ldr	r0, [pc, #276]	@ (8001388 <MX_GPIO_Init+0x254>)
 8001274:	f002 fece 	bl	8004014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001278:	2386      	movs	r3, #134	@ 0x86
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001288:	230b      	movs	r3, #11
 800128a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4619      	mov	r1, r3
 8001292:	483e      	ldr	r0, [pc, #248]	@ (800138c <MX_GPIO_Init+0x258>)
 8001294:	f002 febe 	bl	8004014 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001298:	f244 0301 	movw	r3, #16385	@ 0x4001
 800129c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	4619      	mov	r1, r3
 80012b0:	4832      	ldr	r0, [pc, #200]	@ (800137c <MX_GPIO_Init+0x248>)
 80012b2:	f002 feaf 	bl	8004014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012c8:	230b      	movs	r3, #11
 80012ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4619      	mov	r1, r3
 80012d2:	482a      	ldr	r0, [pc, #168]	@ (800137c <MX_GPIO_Init+0x248>)
 80012d4:	f002 fe9e 	bl	8004014 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80012d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4823      	ldr	r0, [pc, #140]	@ (8001380 <MX_GPIO_Init+0x24c>)
 80012f2:	f002 fe8f 	bl	8004014 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80012f6:	2380      	movs	r3, #128	@ 0x80
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	4821      	ldr	r0, [pc, #132]	@ (8001390 <MX_GPIO_Init+0x25c>)
 800130c:	f002 fe82 	bl	8004014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001310:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001322:	230a      	movs	r3, #10
 8001324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	4817      	ldr	r0, [pc, #92]	@ (800138c <MX_GPIO_Init+0x258>)
 800132e:	f002 fe71 	bl	8004014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001332:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001344:	230b      	movs	r3, #11
 8001346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	4810      	ldr	r0, [pc, #64]	@ (8001390 <MX_GPIO_Init+0x25c>)
 8001350:	f002 fe60 	bl	8004014 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001354:	2302      	movs	r3, #2
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	4806      	ldr	r0, [pc, #24]	@ (8001384 <MX_GPIO_Init+0x250>)
 800136c:	f002 fe52 	bl	8004014 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001370:	bf00      	nop
 8001372:	3730      	adds	r7, #48	@ 0x30
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	58024400 	.word	0x58024400
 800137c:	58020400 	.word	0x58020400
 8001380:	58020c00 	.word	0x58020c00
 8001384:	58021000 	.word	0x58021000
 8001388:	58020800 	.word	0x58020800
 800138c:	58020000 	.word	0x58020000
 8001390:	58021800 	.word	0x58021800

08001394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
}
 800139a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <Error_Handler+0x8>

080013a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <HAL_MspInit+0x5c>)
 80013a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013ac:	4a13      	ldr	r2, [pc, #76]	@ (80013fc <HAL_MspInit+0x5c>)
 80013ae:	f043 0302 	orr.w	r3, r3, #2
 80013b2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013b6:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <HAL_MspInit+0x5c>)
 80013b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80013c4:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <HAL_MspInit+0x5c>)
 80013c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013ca:	4a0c      	ldr	r2, [pc, #48]	@ (80013fc <HAL_MspInit+0x5c>)
 80013cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013d0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013d4:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <HAL_MspInit+0x5c>)
 80013d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 fc1a 	bl	8001c1c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80013e8:	f000 fc40 	bl	8001c6c <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80013ec:	2000      	movs	r0, #0
 80013ee:	f000 fc29 	bl	8001c44 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	58024400 	.word	0x58024400

08001400 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	@ 0x30
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a5c      	ldr	r2, [pc, #368]	@ (8001590 <HAL_ADC_MspInit+0x190>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d159      	bne.n	80014d6 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001422:	4b5c      	ldr	r3, [pc, #368]	@ (8001594 <HAL_ADC_MspInit+0x194>)
 8001424:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001428:	4a5a      	ldr	r2, [pc, #360]	@ (8001594 <HAL_ADC_MspInit+0x194>)
 800142a:	f043 0320 	orr.w	r3, r3, #32
 800142e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001432:	4b58      	ldr	r3, [pc, #352]	@ (8001594 <HAL_ADC_MspInit+0x194>)
 8001434:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001438:	f003 0320 	and.w	r3, r3, #32
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	4b54      	ldr	r3, [pc, #336]	@ (8001594 <HAL_ADC_MspInit+0x194>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001446:	4a53      	ldr	r2, [pc, #332]	@ (8001594 <HAL_ADC_MspInit+0x194>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001450:	4b50      	ldr	r3, [pc, #320]	@ (8001594 <HAL_ADC_MspInit+0x194>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_INP19
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800145e:	2320      	movs	r3, #32
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001462:	2303      	movs	r3, #3
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4619      	mov	r1, r3
 8001470:	4849      	ldr	r0, [pc, #292]	@ (8001598 <HAL_ADC_MspInit+0x198>)
 8001472:	f002 fdcf 	bl	8004014 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001476:	4b49      	ldr	r3, [pc, #292]	@ (800159c <HAL_ADC_MspInit+0x19c>)
 8001478:	4a49      	ldr	r2, [pc, #292]	@ (80015a0 <HAL_ADC_MspInit+0x1a0>)
 800147a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800147c:	4b47      	ldr	r3, [pc, #284]	@ (800159c <HAL_ADC_MspInit+0x19c>)
 800147e:	2209      	movs	r2, #9
 8001480:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001482:	4b46      	ldr	r3, [pc, #280]	@ (800159c <HAL_ADC_MspInit+0x19c>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001488:	4b44      	ldr	r3, [pc, #272]	@ (800159c <HAL_ADC_MspInit+0x19c>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800148e:	4b43      	ldr	r3, [pc, #268]	@ (800159c <HAL_ADC_MspInit+0x19c>)
 8001490:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001494:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001496:	4b41      	ldr	r3, [pc, #260]	@ (800159c <HAL_ADC_MspInit+0x19c>)
 8001498:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800149c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800149e:	4b3f      	ldr	r3, [pc, #252]	@ (800159c <HAL_ADC_MspInit+0x19c>)
 80014a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80014a6:	4b3d      	ldr	r3, [pc, #244]	@ (800159c <HAL_ADC_MspInit+0x19c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014ac:	4b3b      	ldr	r3, [pc, #236]	@ (800159c <HAL_ADC_MspInit+0x19c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014b2:	4b3a      	ldr	r3, [pc, #232]	@ (800159c <HAL_ADC_MspInit+0x19c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014b8:	4838      	ldr	r0, [pc, #224]	@ (800159c <HAL_ADC_MspInit+0x19c>)
 80014ba:	f002 f813 	bl	80034e4 <HAL_DMA_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80014c4:	f7ff ff66 	bl	8001394 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a34      	ldr	r2, [pc, #208]	@ (800159c <HAL_ADC_MspInit+0x19c>)
 80014cc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014ce:	4a33      	ldr	r2, [pc, #204]	@ (800159c <HAL_ADC_MspInit+0x19c>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80014d4:	e057      	b.n	8001586 <HAL_ADC_MspInit+0x186>
  else if(hadc->Instance==ADC3)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a32      	ldr	r2, [pc, #200]	@ (80015a4 <HAL_ADC_MspInit+0x1a4>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d152      	bne.n	8001586 <HAL_ADC_MspInit+0x186>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80014e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001594 <HAL_ADC_MspInit+0x194>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001594 <HAL_ADC_MspInit+0x194>)
 80014e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014f0:	4b28      	ldr	r3, [pc, #160]	@ (8001594 <HAL_ADC_MspInit+0x194>)
 80014f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	4b25      	ldr	r3, [pc, #148]	@ (8001594 <HAL_ADC_MspInit+0x194>)
 8001500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001504:	4a23      	ldr	r2, [pc, #140]	@ (8001594 <HAL_ADC_MspInit+0x194>)
 8001506:	f043 0304 	orr.w	r3, r3, #4
 800150a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800150e:	4b21      	ldr	r3, [pc, #132]	@ (8001594 <HAL_ADC_MspInit+0x194>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800151c:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001520:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001524:	f000 fbc6 	bl	8001cb4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream0;
 8001528:	4b1f      	ldr	r3, [pc, #124]	@ (80015a8 <HAL_ADC_MspInit+0x1a8>)
 800152a:	4a20      	ldr	r2, [pc, #128]	@ (80015ac <HAL_ADC_MspInit+0x1ac>)
 800152c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800152e:	4b1e      	ldr	r3, [pc, #120]	@ (80015a8 <HAL_ADC_MspInit+0x1a8>)
 8001530:	2273      	movs	r2, #115	@ 0x73
 8001532:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001534:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <HAL_ADC_MspInit+0x1a8>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800153a:	4b1b      	ldr	r3, [pc, #108]	@ (80015a8 <HAL_ADC_MspInit+0x1a8>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001540:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <HAL_ADC_MspInit+0x1a8>)
 8001542:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001546:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001548:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <HAL_ADC_MspInit+0x1a8>)
 800154a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800154e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001550:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <HAL_ADC_MspInit+0x1a8>)
 8001552:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001556:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001558:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <HAL_ADC_MspInit+0x1a8>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800155e:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <HAL_ADC_MspInit+0x1a8>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001564:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <HAL_ADC_MspInit+0x1a8>)
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800156a:	480f      	ldr	r0, [pc, #60]	@ (80015a8 <HAL_ADC_MspInit+0x1a8>)
 800156c:	f001 ffba 	bl	80034e4 <HAL_DMA_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_ADC_MspInit+0x17a>
      Error_Handler();
 8001576:	f7ff ff0d 	bl	8001394 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <HAL_ADC_MspInit+0x1a8>)
 800157e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001580:	4a09      	ldr	r2, [pc, #36]	@ (80015a8 <HAL_ADC_MspInit+0x1a8>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001586:	bf00      	nop
 8001588:	3730      	adds	r7, #48	@ 0x30
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40022000 	.word	0x40022000
 8001594:	58024400 	.word	0x58024400
 8001598:	58020000 	.word	0x58020000
 800159c:	2400073c 	.word	0x2400073c
 80015a0:	40020410 	.word	0x40020410
 80015a4:	58026000 	.word	0x58026000
 80015a8:	240007b4 	.word	0x240007b4
 80015ac:	40020010 	.word	0x40020010

080015b0 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08c      	sub	sp, #48	@ 0x30
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a39      	ldr	r2, [pc, #228]	@ (80016b4 <HAL_COMP_MspInit+0x104>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d133      	bne.n	800163a <HAL_COMP_MspInit+0x8a>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_COMP12_CLK_ENABLED++;
 80015d2:	4b39      	ldr	r3, [pc, #228]	@ (80016b8 <HAL_COMP_MspInit+0x108>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	4a37      	ldr	r2, [pc, #220]	@ (80016b8 <HAL_COMP_MspInit+0x108>)
 80015da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_COMP12_CLK_ENABLED==1){
 80015dc:	4b36      	ldr	r3, [pc, #216]	@ (80016b8 <HAL_COMP_MspInit+0x108>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d10e      	bne.n	8001602 <HAL_COMP_MspInit+0x52>
      __HAL_RCC_COMP12_CLK_ENABLE();
 80015e4:	4b35      	ldr	r3, [pc, #212]	@ (80016bc <HAL_COMP_MspInit+0x10c>)
 80015e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015ea:	4a34      	ldr	r2, [pc, #208]	@ (80016bc <HAL_COMP_MspInit+0x10c>)
 80015ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015f4:	4b31      	ldr	r3, [pc, #196]	@ (80016bc <HAL_COMP_MspInit+0x10c>)
 80015f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015fe:	61bb      	str	r3, [r7, #24]
 8001600:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	4b2e      	ldr	r3, [pc, #184]	@ (80016bc <HAL_COMP_MspInit+0x10c>)
 8001604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001608:	4a2c      	ldr	r2, [pc, #176]	@ (80016bc <HAL_COMP_MspInit+0x10c>)
 800160a:	f043 0302 	orr.w	r3, r3, #2
 800160e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001612:	4b2a      	ldr	r3, [pc, #168]	@ (80016bc <HAL_COMP_MspInit+0x10c>)
 8001614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697b      	ldr	r3, [r7, #20]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001620:	2304      	movs	r3, #4
 8001622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001624:	2303      	movs	r3, #3
 8001626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	4619      	mov	r1, r3
 8001632:	4823      	ldr	r0, [pc, #140]	@ (80016c0 <HAL_COMP_MspInit+0x110>)
 8001634:	f002 fcee 	bl	8004014 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8001638:	e038      	b.n	80016ac <HAL_COMP_MspInit+0xfc>
  else if(hcomp->Instance==COMP2)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a21      	ldr	r2, [pc, #132]	@ (80016c4 <HAL_COMP_MspInit+0x114>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d133      	bne.n	80016ac <HAL_COMP_MspInit+0xfc>
    HAL_RCC_COMP12_CLK_ENABLED++;
 8001644:	4b1c      	ldr	r3, [pc, #112]	@ (80016b8 <HAL_COMP_MspInit+0x108>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3301      	adds	r3, #1
 800164a:	4a1b      	ldr	r2, [pc, #108]	@ (80016b8 <HAL_COMP_MspInit+0x108>)
 800164c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_COMP12_CLK_ENABLED==1){
 800164e:	4b1a      	ldr	r3, [pc, #104]	@ (80016b8 <HAL_COMP_MspInit+0x108>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d10e      	bne.n	8001674 <HAL_COMP_MspInit+0xc4>
      __HAL_RCC_COMP12_CLK_ENABLE();
 8001656:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <HAL_COMP_MspInit+0x10c>)
 8001658:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800165c:	4a17      	ldr	r2, [pc, #92]	@ (80016bc <HAL_COMP_MspInit+0x10c>)
 800165e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001662:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <HAL_COMP_MspInit+0x10c>)
 8001668:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800166c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <HAL_COMP_MspInit+0x10c>)
 8001676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167a:	4a10      	ldr	r2, [pc, #64]	@ (80016bc <HAL_COMP_MspInit+0x10c>)
 800167c:	f043 0310 	orr.w	r3, r3, #16
 8001680:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001684:	4b0d      	ldr	r3, [pc, #52]	@ (80016bc <HAL_COMP_MspInit+0x10c>)
 8001686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001692:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001698:	2303      	movs	r3, #3
 800169a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a0:	f107 031c 	add.w	r3, r7, #28
 80016a4:	4619      	mov	r1, r3
 80016a6:	4808      	ldr	r0, [pc, #32]	@ (80016c8 <HAL_COMP_MspInit+0x118>)
 80016a8:	f002 fcb4 	bl	8004014 <HAL_GPIO_Init>
}
 80016ac:	bf00      	nop
 80016ae:	3730      	adds	r7, #48	@ 0x30
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	5800380c 	.word	0x5800380c
 80016b8:	24000a3c 	.word	0x24000a3c
 80016bc:	58024400 	.word	0x58024400
 80016c0:	58020400 	.word	0x58020400
 80016c4:	58003810 	.word	0x58003810
 80016c8:	58021000 	.word	0x58021000

080016cc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001708 <HAL_DAC_MspInit+0x3c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d10e      	bne.n	80016fc <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <HAL_DAC_MspInit+0x40>)
 80016e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016e4:	4a09      	ldr	r2, [pc, #36]	@ (800170c <HAL_DAC_MspInit+0x40>)
 80016e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80016ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016ee:	4b07      	ldr	r3, [pc, #28]	@ (800170c <HAL_DAC_MspInit+0x40>)
 80016f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	40007400 	.word	0x40007400
 800170c:	58024400 	.word	0x58024400

08001710 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a19      	ldr	r2, [pc, #100]	@ (8001784 <HAL_TIM_Base_MspInit+0x74>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d10f      	bne.n	8001742 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001722:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <HAL_TIM_Base_MspInit+0x78>)
 8001724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001728:	4a17      	ldr	r2, [pc, #92]	@ (8001788 <HAL_TIM_Base_MspInit+0x78>)
 800172a:	f043 0310 	orr.w	r3, r3, #16
 800172e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001732:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <HAL_TIM_Base_MspInit+0x78>)
 8001734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001738:	f003 0310 	and.w	r3, r3, #16
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001740:	e01b      	b.n	800177a <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM7)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a11      	ldr	r2, [pc, #68]	@ (800178c <HAL_TIM_Base_MspInit+0x7c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d116      	bne.n	800177a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800174c:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <HAL_TIM_Base_MspInit+0x78>)
 800174e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001752:	4a0d      	ldr	r2, [pc, #52]	@ (8001788 <HAL_TIM_Base_MspInit+0x78>)
 8001754:	f043 0320 	orr.w	r3, r3, #32
 8001758:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800175c:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <HAL_TIM_Base_MspInit+0x78>)
 800175e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001762:	f003 0320 	and.w	r3, r3, #32
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	2037      	movs	r0, #55	@ 0x37
 8001770:	f001 fd1b 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001774:	2037      	movs	r0, #55	@ 0x37
 8001776:	f001 fd32 	bl	80031de <HAL_NVIC_EnableIRQ>
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40001000 	.word	0x40001000
 8001788:	58024400 	.word	0x58024400
 800178c:	40001400 	.word	0x40001400

08001790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b0ba      	sub	sp, #232	@ 0xe8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	22c0      	movs	r2, #192	@ 0xc0
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f007 fecf 	bl	8009554 <memset>
  if(huart->Instance==USART3)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a41      	ldr	r2, [pc, #260]	@ (80018c0 <HAL_UART_MspInit+0x130>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d17b      	bne.n	80018b8 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017c0:	f04f 0202 	mov.w	r2, #2
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d2:	f107 0310 	add.w	r3, r7, #16
 80017d6:	4618      	mov	r0, r3
 80017d8:	f003 fe06 	bl	80053e8 <HAL_RCCEx_PeriphCLKConfig>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80017e2:	f7ff fdd7 	bl	8001394 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017e6:	4b37      	ldr	r3, [pc, #220]	@ (80018c4 <HAL_UART_MspInit+0x134>)
 80017e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017ec:	4a35      	ldr	r2, [pc, #212]	@ (80018c4 <HAL_UART_MspInit+0x134>)
 80017ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017f6:	4b33      	ldr	r3, [pc, #204]	@ (80018c4 <HAL_UART_MspInit+0x134>)
 80017f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001804:	4b2f      	ldr	r3, [pc, #188]	@ (80018c4 <HAL_UART_MspInit+0x134>)
 8001806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800180a:	4a2e      	ldr	r2, [pc, #184]	@ (80018c4 <HAL_UART_MspInit+0x134>)
 800180c:	f043 0308 	orr.w	r3, r3, #8
 8001810:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001814:	4b2b      	ldr	r3, [pc, #172]	@ (80018c4 <HAL_UART_MspInit+0x134>)
 8001816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001822:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001826:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800183c:	2307      	movs	r3, #7
 800183e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001842:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001846:	4619      	mov	r1, r3
 8001848:	481f      	ldr	r0, [pc, #124]	@ (80018c8 <HAL_UART_MspInit+0x138>)
 800184a:	f002 fbe3 	bl	8004014 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 800184e:	4b1f      	ldr	r3, [pc, #124]	@ (80018cc <HAL_UART_MspInit+0x13c>)
 8001850:	4a1f      	ldr	r2, [pc, #124]	@ (80018d0 <HAL_UART_MspInit+0x140>)
 8001852:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001854:	4b1d      	ldr	r3, [pc, #116]	@ (80018cc <HAL_UART_MspInit+0x13c>)
 8001856:	222e      	movs	r2, #46	@ 0x2e
 8001858:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800185a:	4b1c      	ldr	r3, [pc, #112]	@ (80018cc <HAL_UART_MspInit+0x13c>)
 800185c:	2240      	movs	r2, #64	@ 0x40
 800185e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001860:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <HAL_UART_MspInit+0x13c>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001866:	4b19      	ldr	r3, [pc, #100]	@ (80018cc <HAL_UART_MspInit+0x13c>)
 8001868:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800186c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800186e:	4b17      	ldr	r3, [pc, #92]	@ (80018cc <HAL_UART_MspInit+0x13c>)
 8001870:	2200      	movs	r2, #0
 8001872:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001874:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <HAL_UART_MspInit+0x13c>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800187a:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <HAL_UART_MspInit+0x13c>)
 800187c:	2200      	movs	r2, #0
 800187e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <HAL_UART_MspInit+0x13c>)
 8001882:	2200      	movs	r2, #0
 8001884:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001886:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <HAL_UART_MspInit+0x13c>)
 8001888:	2200      	movs	r2, #0
 800188a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800188c:	480f      	ldr	r0, [pc, #60]	@ (80018cc <HAL_UART_MspInit+0x13c>)
 800188e:	f001 fe29 	bl	80034e4 <HAL_DMA_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001898:	f7ff fd7c 	bl	8001394 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a0b      	ldr	r2, [pc, #44]	@ (80018cc <HAL_UART_MspInit+0x13c>)
 80018a0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80018a2:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <HAL_UART_MspInit+0x13c>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2100      	movs	r1, #0
 80018ac:	2027      	movs	r0, #39	@ 0x27
 80018ae:	f001 fc7c 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018b2:	2027      	movs	r0, #39	@ 0x27
 80018b4:	f001 fc93 	bl	80031de <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80018b8:	bf00      	nop
 80018ba:	37e8      	adds	r7, #232	@ 0xe8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40004800 	.word	0x40004800
 80018c4:	58024400 	.word	0x58024400
 80018c8:	58020c00 	.word	0x58020c00
 80018cc:	240009c4 	.word	0x240009c4
 80018d0:	40020028 	.word	0x40020028

080018d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <NMI_Handler+0x4>

080018dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <HardFault_Handler+0x4>

080018e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <MemManage_Handler+0x4>

080018ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <BusFault_Handler+0x4>

080018f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <UsageFault_Handler+0x4>

080018fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800192a:	f000 f94b 	bl	8001bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}

08001932 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	DMA_custom_interrupt_rx();
 8001936:	f7ff f823 	bl	8000980 <DMA_custom_interrupt_rx>
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}

0800193e <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
	DMA_custom_interrupt_tx();
 8001942:	f7fe ffd7 	bl	80008f4 <DMA_custom_interrupt_tx>
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}

0800194a <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	USART_custom_interrupt();
 800194e:	f7ff f885 	bl	8000a5c <USART_custom_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	TIM7_custom_interrupt();
 800195c:	f7fe ff12 	bl	8000784 <TIM7_custom_interrupt>

	if(1)
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <TIM7_IRQHandler+0x14>)
 8001962:	f006 fa96 	bl	8007e92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	240008e4 	.word	0x240008e4

08001970 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	DMA2_custom_interrupt();
 8001974:	f7ff f838 	bl	80009e8 <DMA2_custom_interrupt>
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}

0800197c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001980:	4b37      	ldr	r3, [pc, #220]	@ (8001a60 <SystemInit+0xe4>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001986:	4a36      	ldr	r2, [pc, #216]	@ (8001a60 <SystemInit+0xe4>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001990:	4b34      	ldr	r3, [pc, #208]	@ (8001a64 <SystemInit+0xe8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 030f 	and.w	r3, r3, #15
 8001998:	2b06      	cmp	r3, #6
 800199a:	d807      	bhi.n	80019ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800199c:	4b31      	ldr	r3, [pc, #196]	@ (8001a64 <SystemInit+0xe8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f023 030f 	bic.w	r3, r3, #15
 80019a4:	4a2f      	ldr	r2, [pc, #188]	@ (8001a64 <SystemInit+0xe8>)
 80019a6:	f043 0307 	orr.w	r3, r3, #7
 80019aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001a68 <SystemInit+0xec>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a2d      	ldr	r2, [pc, #180]	@ (8001a68 <SystemInit+0xec>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a68 <SystemInit+0xec>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019be:	4b2a      	ldr	r3, [pc, #168]	@ (8001a68 <SystemInit+0xec>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4929      	ldr	r1, [pc, #164]	@ (8001a68 <SystemInit+0xec>)
 80019c4:	4b29      	ldr	r3, [pc, #164]	@ (8001a6c <SystemInit+0xf0>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019ca:	4b26      	ldr	r3, [pc, #152]	@ (8001a64 <SystemInit+0xe8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019d6:	4b23      	ldr	r3, [pc, #140]	@ (8001a64 <SystemInit+0xe8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 030f 	bic.w	r3, r3, #15
 80019de:	4a21      	ldr	r2, [pc, #132]	@ (8001a64 <SystemInit+0xe8>)
 80019e0:	f043 0307 	orr.w	r3, r3, #7
 80019e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019e6:	4b20      	ldr	r3, [pc, #128]	@ (8001a68 <SystemInit+0xec>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001a68 <SystemInit+0xec>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <SystemInit+0xec>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <SystemInit+0xec>)
 80019fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001a70 <SystemInit+0xf4>)
 80019fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001a68 <SystemInit+0xec>)
 8001a00:	4a1c      	ldr	r2, [pc, #112]	@ (8001a74 <SystemInit+0xf8>)
 8001a02:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a04:	4b18      	ldr	r3, [pc, #96]	@ (8001a68 <SystemInit+0xec>)
 8001a06:	4a1c      	ldr	r2, [pc, #112]	@ (8001a78 <SystemInit+0xfc>)
 8001a08:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a0a:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <SystemInit+0xec>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a10:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <SystemInit+0xec>)
 8001a12:	4a19      	ldr	r2, [pc, #100]	@ (8001a78 <SystemInit+0xfc>)
 8001a14:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a16:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <SystemInit+0xec>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a1c:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <SystemInit+0xec>)
 8001a1e:	4a16      	ldr	r2, [pc, #88]	@ (8001a78 <SystemInit+0xfc>)
 8001a20:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a22:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <SystemInit+0xec>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <SystemInit+0xec>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8001a68 <SystemInit+0xec>)
 8001a2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <SystemInit+0xec>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a3a:	4b10      	ldr	r3, [pc, #64]	@ (8001a7c <SystemInit+0x100>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <SystemInit+0x104>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a46:	d202      	bcs.n	8001a4e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a48:	4b0e      	ldr	r3, [pc, #56]	@ (8001a84 <SystemInit+0x108>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a88 <SystemInit+0x10c>)
 8001a50:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001a54:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00
 8001a64:	52002000 	.word	0x52002000
 8001a68:	58024400 	.word	0x58024400
 8001a6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a70:	02020200 	.word	0x02020200
 8001a74:	01ff0000 	.word	0x01ff0000
 8001a78:	01010280 	.word	0x01010280
 8001a7c:	5c001000 	.word	0x5c001000
 8001a80:	ffff0000 	.word	0xffff0000
 8001a84:	51008108 	.word	0x51008108
 8001a88:	52004000 	.word	0x52004000

08001a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ac4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a90:	f7ff ff74 	bl	800197c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a94:	480c      	ldr	r0, [pc, #48]	@ (8001ac8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a96:	490d      	ldr	r1, [pc, #52]	@ (8001acc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a98:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a9c:	e002      	b.n	8001aa4 <LoopCopyDataInit>

08001a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa2:	3304      	adds	r3, #4

08001aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa8:	d3f9      	bcc.n	8001a9e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aac:	4c0a      	ldr	r4, [pc, #40]	@ (8001ad8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab0:	e001      	b.n	8001ab6 <LoopFillZerobss>

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab4:	3204      	adds	r2, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aba:	f007 fd53 	bl	8009564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001abe:	f7fe ffff 	bl	8000ac0 <main>
  bx  lr
 8001ac2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ac4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ac8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001acc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001ad0:	08009614 	.word	0x08009614
  ldr r2, =_sbss
 8001ad4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001ad8:	24000a44 	.word	0x24000a44

08001adc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001adc:	e7fe      	b.n	8001adc <ADC3_IRQHandler>
	...

08001ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae6:	2003      	movs	r0, #3
 8001ae8:	f001 fb54 	bl	8003194 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001aec:	f003 faa6 	bl	800503c <HAL_RCC_GetSysClockFreq>
 8001af0:	4602      	mov	r2, r0
 8001af2:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <HAL_Init+0x68>)
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	0a1b      	lsrs	r3, r3, #8
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	4913      	ldr	r1, [pc, #76]	@ (8001b4c <HAL_Init+0x6c>)
 8001afe:	5ccb      	ldrb	r3, [r1, r3]
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	fa22 f303 	lsr.w	r3, r2, r3
 8001b08:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <HAL_Init+0x68>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	4a0e      	ldr	r2, [pc, #56]	@ (8001b4c <HAL_Init+0x6c>)
 8001b14:	5cd3      	ldrb	r3, [r2, r3]
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b20:	4a0b      	ldr	r2, [pc, #44]	@ (8001b50 <HAL_Init+0x70>)
 8001b22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b24:	4a0b      	ldr	r2, [pc, #44]	@ (8001b54 <HAL_Init+0x74>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f000 f814 	bl	8001b58 <HAL_InitTick>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e002      	b.n	8001b40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b3a:	f7ff fc31 	bl	80013a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	58024400 	.word	0x58024400
 8001b4c:	080095c4 	.word	0x080095c4
 8001b50:	24000004 	.word	0x24000004
 8001b54:	24000000 	.word	0x24000000

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b60:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <HAL_InitTick+0x60>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e021      	b.n	8001bb0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <HAL_InitTick+0x64>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <HAL_InitTick+0x60>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f001 fb39 	bl	80031fa <HAL_SYSTICK_Config>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00e      	b.n	8001bb0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b0f      	cmp	r3, #15
 8001b96:	d80a      	bhi.n	8001bae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba0:	f001 fb03 	bl	80031aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba4:	4a06      	ldr	r2, [pc, #24]	@ (8001bc0 <HAL_InitTick+0x68>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e000      	b.n	8001bb0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	2400000c 	.word	0x2400000c
 8001bbc:	24000000 	.word	0x24000000
 8001bc0:	24000008 	.word	0x24000008

08001bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_IncTick+0x20>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_IncTick+0x24>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a04      	ldr	r2, [pc, #16]	@ (8001be8 <HAL_IncTick+0x24>)
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	2400000c 	.word	0x2400000c
 8001be8:	24000a40 	.word	0x24000a40

08001bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	@ (8001c00 <HAL_GetTick+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	24000a40 	.word	0x24000a40

08001c04 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c08:	4b03      	ldr	r3, [pc, #12]	@ (8001c18 <HAL_GetREVID+0x14>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	0c1b      	lsrs	r3, r3, #16
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	5c001000 	.word	0x5c001000

08001c1c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c2c:	4904      	ldr	r1, [pc, #16]	@ (8001c40 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	600b      	str	r3, [r1, #0]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	58003c00 	.word	0x58003c00

08001c44 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001c4c:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f023 0202 	bic.w	r2, r3, #2
 8001c54:	4904      	ldr	r1, [pc, #16]	@ (8001c68 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	58003c00 	.word	0x58003c00

08001c6c <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001c72:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a0e      	ldr	r2, [pc, #56]	@ (8001cb0 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001c7e:	f7ff ffb5 	bl	8001bec <HAL_GetTick>
 8001c82:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001c84:	e008      	b.n	8001c98 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001c86:	f7ff ffb1 	bl	8001bec <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b0a      	cmp	r3, #10
 8001c92:	d901      	bls.n	8001c98 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e006      	b.n	8001ca6 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001c98:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	58003c00 	.word	0x58003c00

08001cb4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001cbe:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	4904      	ldr	r1, [pc, #16]	@ (8001cdc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	58000400 	.word	0x58000400

08001ce0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d107      	bne.n	8001d6c <LL_ADC_SetChannelPreselection+0x24>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	0e9b      	lsrs	r3, r3, #26
 8001d60:	f003 031f 	and.w	r3, r3, #31
 8001d64:	2201      	movs	r2, #1
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	e015      	b.n	8001d98 <LL_ADC_SetChannelPreselection+0x50>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	fa93 f3a3 	rbit	r3, r3
 8001d76:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8001d82:	2320      	movs	r3, #32
 8001d84:	e003      	b.n	8001d8e <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	f003 031f 	and.w	r3, r3, #31
 8001d92:	2201      	movs	r2, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	69d2      	ldr	r2, [r2, #28]
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8001da2:	bf00      	nop
 8001da4:	371c      	adds	r7, #28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b087      	sub	sp, #28
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3360      	adds	r3, #96	@ 0x60
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	430b      	orrs	r3, r1
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001de2:	bf00      	nop
 8001de4:	371c      	adds	r7, #28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	f003 031f 	and.w	r3, r3, #31
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	611a      	str	r2, [r3, #16]
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3360      	adds	r3, #96	@ 0x60
 8001e30:	461a      	mov	r2, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	431a      	orrs	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	601a      	str	r2, [r3, #0]
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	371c      	adds	r7, #28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b087      	sub	sp, #28
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	3330      	adds	r3, #48	@ 0x30
 8001e66:	461a      	mov	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	0a1b      	lsrs	r3, r3, #8
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	4413      	add	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	211f      	movs	r1, #31
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	401a      	ands	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	0e9b      	lsrs	r3, r3, #26
 8001e8e:	f003 011f 	and.w	r1, r3, #31
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ea2:	bf00      	nop
 8001ea4:	371c      	adds	r7, #28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b087      	sub	sp, #28
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	3314      	adds	r3, #20
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	0e5b      	lsrs	r3, r3, #25
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	4413      	add	r3, r2
 8001ecc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	0d1b      	lsrs	r3, r3, #20
 8001ed6:	f003 031f 	and.w	r3, r3, #31
 8001eda:	2107      	movs	r1, #7
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	0d1b      	lsrs	r3, r3, #20
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ef8:	bf00      	nop
 8001efa:	371c      	adds	r7, #28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	401a      	ands	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0318 	and.w	r3, r3, #24
 8001f26:	4908      	ldr	r1, [pc, #32]	@ (8001f48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f28:	40d9      	lsrs	r1, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	400b      	ands	r3, r1
 8001f2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f32:	431a      	orrs	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	000fffff 	.word	0x000fffff

08001f4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	4b04      	ldr	r3, [pc, #16]	@ (8001f6c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6093      	str	r3, [r2, #8]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	5fffffc0 	.word	0x5fffffc0

08001f70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f84:	d101      	bne.n	8001f8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <LL_ADC_EnableInternalRegulator+0x24>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	6fffffc0 	.word	0x6fffffc0

08001fc0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fd4:	d101      	bne.n	8001fda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <LL_ADC_IsEnabled+0x18>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <LL_ADC_IsEnabled+0x1a>
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	2b04      	cmp	r3, #4
 8002020:	d101      	bne.n	8002026 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b08      	cmp	r3, #8
 8002046:	d101      	bne.n	800204c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800205c:	b590      	push	{r4, r7, lr}
 800205e:	b089      	sub	sp, #36	@ 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e18f      	b.n	8002396 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002080:	2b00      	cmp	r3, #0
 8002082:	d109      	bne.n	8002098 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff f9bb 	bl	8001400 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff67 	bl	8001f70 <LL_ADC_IsDeepPowerDownEnabled>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d004      	beq.n	80020b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff4d 	bl	8001f4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ff82 	bl	8001fc0 <LL_ADC_IsInternalRegulatorEnabled>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d114      	bne.n	80020ec <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ff66 	bl	8001f98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020cc:	4b87      	ldr	r3, [pc, #540]	@ (80022ec <HAL_ADC_Init+0x290>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	099b      	lsrs	r3, r3, #6
 80020d2:	4a87      	ldr	r2, [pc, #540]	@ (80022f0 <HAL_ADC_Init+0x294>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	099b      	lsrs	r3, r3, #6
 80020da:	3301      	adds	r3, #1
 80020dc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020de:	e002      	b.n	80020e6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f9      	bne.n	80020e0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff65 	bl	8001fc0 <LL_ADC_IsInternalRegulatorEnabled>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10d      	bne.n	8002118 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002100:	f043 0210 	orr.w	r2, r3, #16
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210c:	f043 0201 	orr.w	r2, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff76 	bl	800200e <LL_ADC_REG_IsConversionOngoing>
 8002122:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	2b00      	cmp	r3, #0
 800212e:	f040 8129 	bne.w	8002384 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2b00      	cmp	r3, #0
 8002136:	f040 8125 	bne.w	8002384 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800213e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002142:	f043 0202 	orr.w	r2, r3, #2
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff4a 	bl	8001fe8 <LL_ADC_IsEnabled>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d136      	bne.n	80021c8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a65      	ldr	r2, [pc, #404]	@ (80022f4 <HAL_ADC_Init+0x298>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d004      	beq.n	800216e <HAL_ADC_Init+0x112>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a63      	ldr	r2, [pc, #396]	@ (80022f8 <HAL_ADC_Init+0x29c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d10e      	bne.n	800218c <HAL_ADC_Init+0x130>
 800216e:	4861      	ldr	r0, [pc, #388]	@ (80022f4 <HAL_ADC_Init+0x298>)
 8002170:	f7ff ff3a 	bl	8001fe8 <LL_ADC_IsEnabled>
 8002174:	4604      	mov	r4, r0
 8002176:	4860      	ldr	r0, [pc, #384]	@ (80022f8 <HAL_ADC_Init+0x29c>)
 8002178:	f7ff ff36 	bl	8001fe8 <LL_ADC_IsEnabled>
 800217c:	4603      	mov	r3, r0
 800217e:	4323      	orrs	r3, r4
 8002180:	2b00      	cmp	r3, #0
 8002182:	bf0c      	ite	eq
 8002184:	2301      	moveq	r3, #1
 8002186:	2300      	movne	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	e008      	b.n	800219e <HAL_ADC_Init+0x142>
 800218c:	485b      	ldr	r0, [pc, #364]	@ (80022fc <HAL_ADC_Init+0x2a0>)
 800218e:	f7ff ff2b 	bl	8001fe8 <LL_ADC_IsEnabled>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf0c      	ite	eq
 8002198:	2301      	moveq	r3, #1
 800219a:	2300      	movne	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d012      	beq.n	80021c8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a53      	ldr	r2, [pc, #332]	@ (80022f4 <HAL_ADC_Init+0x298>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d004      	beq.n	80021b6 <HAL_ADC_Init+0x15a>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a51      	ldr	r2, [pc, #324]	@ (80022f8 <HAL_ADC_Init+0x29c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d101      	bne.n	80021ba <HAL_ADC_Init+0x15e>
 80021b6:	4a52      	ldr	r2, [pc, #328]	@ (8002300 <HAL_ADC_Init+0x2a4>)
 80021b8:	e000      	b.n	80021bc <HAL_ADC_Init+0x160>
 80021ba:	4a52      	ldr	r2, [pc, #328]	@ (8002304 <HAL_ADC_Init+0x2a8>)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	4619      	mov	r1, r3
 80021c2:	4610      	mov	r0, r2
 80021c4:	f7ff fd8c 	bl	8001ce0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80021c8:	f7ff fd1c 	bl	8001c04 <HAL_GetREVID>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d914      	bls.n	8002200 <HAL_ADC_Init+0x1a4>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b10      	cmp	r3, #16
 80021dc:	d110      	bne.n	8002200 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	7d5b      	ldrb	r3, [r3, #21]
 80021e2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021e8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80021ee:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	7f1b      	ldrb	r3, [r3, #28]
 80021f4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80021f6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021f8:	f043 030c 	orr.w	r3, r3, #12
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	e00d      	b.n	800221c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	7d5b      	ldrb	r3, [r3, #21]
 8002204:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800220a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002210:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	7f1b      	ldrb	r3, [r3, #28]
 8002216:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7f1b      	ldrb	r3, [r3, #28]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d106      	bne.n	8002232 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	3b01      	subs	r3, #1
 800222a:	045b      	lsls	r3, r3, #17
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002236:	2b00      	cmp	r3, #0
 8002238:	d009      	beq.n	800224e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002246:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	4b2c      	ldr	r3, [pc, #176]	@ (8002308 <HAL_ADC_Init+0x2ac>)
 8002256:	4013      	ands	r3, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	69b9      	ldr	r1, [r7, #24]
 800225e:	430b      	orrs	r3, r1
 8002260:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fed1 	bl	800200e <LL_ADC_REG_IsConversionOngoing>
 800226c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fede 	bl	8002034 <LL_ADC_INJ_IsConversionOngoing>
 8002278:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d15f      	bne.n	8002340 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d15c      	bne.n	8002340 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	7d1b      	ldrb	r3, [r3, #20]
 800228a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	4b1c      	ldr	r3, [pc, #112]	@ (800230c <HAL_ADC_Init+0x2b0>)
 800229c:	4013      	ands	r3, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	69b9      	ldr	r1, [r7, #24]
 80022a4:	430b      	orrs	r3, r1
 80022a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d130      	bne.n	8002314 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	4b14      	ldr	r3, [pc, #80]	@ (8002310 <HAL_ADC_Init+0x2b4>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80022c6:	3a01      	subs	r2, #1
 80022c8:	0411      	lsls	r1, r2, #16
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022ce:	4311      	orrs	r1, r2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80022d4:	4311      	orrs	r1, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022da:	430a      	orrs	r2, r1
 80022dc:	431a      	orrs	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	611a      	str	r2, [r3, #16]
 80022e8:	e01c      	b.n	8002324 <HAL_ADC_Init+0x2c8>
 80022ea:	bf00      	nop
 80022ec:	24000000 	.word	0x24000000
 80022f0:	053e2d63 	.word	0x053e2d63
 80022f4:	40022000 	.word	0x40022000
 80022f8:	40022100 	.word	0x40022100
 80022fc:	58026000 	.word	0x58026000
 8002300:	40022300 	.word	0x40022300
 8002304:	58026300 	.word	0x58026300
 8002308:	fff0c003 	.word	0xfff0c003
 800230c:	ffffbffc 	.word	0xffffbffc
 8002310:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0201 	bic.w	r2, r2, #1
 8002322:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 fb20 	bl	8002980 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d10c      	bne.n	8002362 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	f023 010f 	bic.w	r1, r3, #15
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	1e5a      	subs	r2, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002360:	e007      	b.n	8002372 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 020f 	bic.w	r2, r2, #15
 8002370:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002376:	f023 0303 	bic.w	r3, r3, #3
 800237a:	f043 0201 	orr.w	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	655a      	str	r2, [r3, #84]	@ 0x54
 8002382:	e007      	b.n	8002394 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002388:	f043 0210 	orr.w	r2, r3, #16
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002394:	7ffb      	ldrb	r3, [r7, #31]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3724      	adds	r7, #36	@ 0x24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd90      	pop	{r4, r7, pc}
 800239e:	bf00      	nop

080023a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b08d      	sub	sp, #52	@ 0x34
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4a65      	ldr	r2, [pc, #404]	@ (8002550 <HAL_ADC_ConfigChannel+0x1b0>)
 80023ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x2a>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e2c7      	b.n	800295a <HAL_ADC_ConfigChannel+0x5ba>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fe19 	bl	800200e <LL_ADC_REG_IsConversionOngoing>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f040 82ac 	bne.w	800293c <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db2c      	blt.n	8002446 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d108      	bne.n	800240a <HAL_ADC_ConfigChannel+0x6a>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	0e9b      	lsrs	r3, r3, #26
 80023fe:	f003 031f 	and.w	r3, r3, #31
 8002402:	2201      	movs	r2, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	e016      	b.n	8002438 <HAL_ADC_ConfigChannel+0x98>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	613b      	str	r3, [r7, #16]
  return result;
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8002422:	2320      	movs	r3, #32
 8002424:	e003      	b.n	800242e <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	fab3 f383 	clz	r3, r3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	2201      	movs	r2, #1
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	69d1      	ldr	r1, [r2, #28]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	430b      	orrs	r3, r1
 8002444:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6859      	ldr	r1, [r3, #4]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	f7ff fcff 	bl	8001e56 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fdd6 	bl	800200e <LL_ADC_REG_IsConversionOngoing>
 8002462:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fde3 	bl	8002034 <LL_ADC_INJ_IsConversionOngoing>
 800246e:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 80b8 	bne.w	80025e8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	2b00      	cmp	r3, #0
 800247c:	f040 80b4 	bne.w	80025e8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	6819      	ldr	r1, [r3, #0]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	461a      	mov	r2, r3
 800248e:	f7ff fd0e 	bl	8001eae <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002492:	4b30      	ldr	r3, [pc, #192]	@ (8002554 <HAL_ADC_ConfigChannel+0x1b4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800249a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800249e:	d10b      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x118>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	695a      	ldr	r2, [r3, #20]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	e01d      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x154>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_ADC_ConfigChannel+0x13e>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	089b      	lsrs	r3, r3, #2
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	e00a      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x154>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	089b      	lsrs	r3, r3, #2
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d02c      	beq.n	8002558 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	6919      	ldr	r1, [r3, #16]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	f7ff fc4f 	bl	8001dae <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	6919      	ldr	r1, [r3, #16]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	7e5b      	ldrb	r3, [r3, #25]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d102      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x186>
 8002520:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002524:	e000      	b.n	8002528 <HAL_ADC_ConfigChannel+0x188>
 8002526:	2300      	movs	r3, #0
 8002528:	461a      	mov	r2, r3
 800252a:	f7ff fc79 	bl	8001e20 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6919      	ldr	r1, [r3, #16]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	7e1b      	ldrb	r3, [r3, #24]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d102      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x1a4>
 800253e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002542:	e000      	b.n	8002546 <HAL_ADC_ConfigChannel+0x1a6>
 8002544:	2300      	movs	r3, #0
 8002546:	461a      	mov	r2, r3
 8002548:	f7ff fc51 	bl	8001dee <LL_ADC_SetDataRightShift>
 800254c:	e04c      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x248>
 800254e:	bf00      	nop
 8002550:	47ff0000 	.word	0x47ff0000
 8002554:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	069b      	lsls	r3, r3, #26
 8002568:	429a      	cmp	r2, r3
 800256a:	d107      	bne.n	800257c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800257a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002582:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	069b      	lsls	r3, r3, #26
 800258c:	429a      	cmp	r2, r3
 800258e:	d107      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800259e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	069b      	lsls	r3, r3, #26
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d107      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025c2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	069b      	lsls	r3, r3, #26
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d107      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025e6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fcfb 	bl	8001fe8 <LL_ADC_IsEnabled>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f040 81aa 	bne.w	800294e <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6819      	ldr	r1, [r3, #0]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	461a      	mov	r2, r3
 8002608:	f7ff fc7c 	bl	8001f04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	4a87      	ldr	r2, [pc, #540]	@ (8002830 <HAL_ADC_ConfigChannel+0x490>)
 8002612:	4293      	cmp	r3, r2
 8002614:	f040 809a 	bne.w	800274c <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4984      	ldr	r1, [pc, #528]	@ (8002834 <HAL_ADC_ConfigChannel+0x494>)
 8002622:	428b      	cmp	r3, r1
 8002624:	d147      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x316>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4983      	ldr	r1, [pc, #524]	@ (8002838 <HAL_ADC_ConfigChannel+0x498>)
 800262c:	428b      	cmp	r3, r1
 800262e:	d040      	beq.n	80026b2 <HAL_ADC_ConfigChannel+0x312>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4981      	ldr	r1, [pc, #516]	@ (800283c <HAL_ADC_ConfigChannel+0x49c>)
 8002636:	428b      	cmp	r3, r1
 8002638:	d039      	beq.n	80026ae <HAL_ADC_ConfigChannel+0x30e>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4980      	ldr	r1, [pc, #512]	@ (8002840 <HAL_ADC_ConfigChannel+0x4a0>)
 8002640:	428b      	cmp	r3, r1
 8002642:	d032      	beq.n	80026aa <HAL_ADC_ConfigChannel+0x30a>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	497e      	ldr	r1, [pc, #504]	@ (8002844 <HAL_ADC_ConfigChannel+0x4a4>)
 800264a:	428b      	cmp	r3, r1
 800264c:	d02b      	beq.n	80026a6 <HAL_ADC_ConfigChannel+0x306>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	497d      	ldr	r1, [pc, #500]	@ (8002848 <HAL_ADC_ConfigChannel+0x4a8>)
 8002654:	428b      	cmp	r3, r1
 8002656:	d024      	beq.n	80026a2 <HAL_ADC_ConfigChannel+0x302>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	497b      	ldr	r1, [pc, #492]	@ (800284c <HAL_ADC_ConfigChannel+0x4ac>)
 800265e:	428b      	cmp	r3, r1
 8002660:	d01d      	beq.n	800269e <HAL_ADC_ConfigChannel+0x2fe>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	497a      	ldr	r1, [pc, #488]	@ (8002850 <HAL_ADC_ConfigChannel+0x4b0>)
 8002668:	428b      	cmp	r3, r1
 800266a:	d016      	beq.n	800269a <HAL_ADC_ConfigChannel+0x2fa>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4978      	ldr	r1, [pc, #480]	@ (8002854 <HAL_ADC_ConfigChannel+0x4b4>)
 8002672:	428b      	cmp	r3, r1
 8002674:	d00f      	beq.n	8002696 <HAL_ADC_ConfigChannel+0x2f6>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4977      	ldr	r1, [pc, #476]	@ (8002858 <HAL_ADC_ConfigChannel+0x4b8>)
 800267c:	428b      	cmp	r3, r1
 800267e:	d008      	beq.n	8002692 <HAL_ADC_ConfigChannel+0x2f2>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4975      	ldr	r1, [pc, #468]	@ (800285c <HAL_ADC_ConfigChannel+0x4bc>)
 8002686:	428b      	cmp	r3, r1
 8002688:	d101      	bne.n	800268e <HAL_ADC_ConfigChannel+0x2ee>
 800268a:	4b75      	ldr	r3, [pc, #468]	@ (8002860 <HAL_ADC_ConfigChannel+0x4c0>)
 800268c:	e05a      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3a4>
 800268e:	2300      	movs	r3, #0
 8002690:	e058      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3a4>
 8002692:	4b74      	ldr	r3, [pc, #464]	@ (8002864 <HAL_ADC_ConfigChannel+0x4c4>)
 8002694:	e056      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3a4>
 8002696:	4b74      	ldr	r3, [pc, #464]	@ (8002868 <HAL_ADC_ConfigChannel+0x4c8>)
 8002698:	e054      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3a4>
 800269a:	4b6e      	ldr	r3, [pc, #440]	@ (8002854 <HAL_ADC_ConfigChannel+0x4b4>)
 800269c:	e052      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3a4>
 800269e:	4b6c      	ldr	r3, [pc, #432]	@ (8002850 <HAL_ADC_ConfigChannel+0x4b0>)
 80026a0:	e050      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3a4>
 80026a2:	4b72      	ldr	r3, [pc, #456]	@ (800286c <HAL_ADC_ConfigChannel+0x4cc>)
 80026a4:	e04e      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3a4>
 80026a6:	4b72      	ldr	r3, [pc, #456]	@ (8002870 <HAL_ADC_ConfigChannel+0x4d0>)
 80026a8:	e04c      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3a4>
 80026aa:	4b72      	ldr	r3, [pc, #456]	@ (8002874 <HAL_ADC_ConfigChannel+0x4d4>)
 80026ac:	e04a      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3a4>
 80026ae:	4b72      	ldr	r3, [pc, #456]	@ (8002878 <HAL_ADC_ConfigChannel+0x4d8>)
 80026b0:	e048      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3a4>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e046      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3a4>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4970      	ldr	r1, [pc, #448]	@ (800287c <HAL_ADC_ConfigChannel+0x4dc>)
 80026bc:	428b      	cmp	r3, r1
 80026be:	d140      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x3a2>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	495c      	ldr	r1, [pc, #368]	@ (8002838 <HAL_ADC_ConfigChannel+0x498>)
 80026c6:	428b      	cmp	r3, r1
 80026c8:	d039      	beq.n	800273e <HAL_ADC_ConfigChannel+0x39e>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	495b      	ldr	r1, [pc, #364]	@ (800283c <HAL_ADC_ConfigChannel+0x49c>)
 80026d0:	428b      	cmp	r3, r1
 80026d2:	d032      	beq.n	800273a <HAL_ADC_ConfigChannel+0x39a>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4959      	ldr	r1, [pc, #356]	@ (8002840 <HAL_ADC_ConfigChannel+0x4a0>)
 80026da:	428b      	cmp	r3, r1
 80026dc:	d02b      	beq.n	8002736 <HAL_ADC_ConfigChannel+0x396>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4958      	ldr	r1, [pc, #352]	@ (8002844 <HAL_ADC_ConfigChannel+0x4a4>)
 80026e4:	428b      	cmp	r3, r1
 80026e6:	d024      	beq.n	8002732 <HAL_ADC_ConfigChannel+0x392>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4956      	ldr	r1, [pc, #344]	@ (8002848 <HAL_ADC_ConfigChannel+0x4a8>)
 80026ee:	428b      	cmp	r3, r1
 80026f0:	d01d      	beq.n	800272e <HAL_ADC_ConfigChannel+0x38e>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4955      	ldr	r1, [pc, #340]	@ (800284c <HAL_ADC_ConfigChannel+0x4ac>)
 80026f8:	428b      	cmp	r3, r1
 80026fa:	d016      	beq.n	800272a <HAL_ADC_ConfigChannel+0x38a>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4953      	ldr	r1, [pc, #332]	@ (8002850 <HAL_ADC_ConfigChannel+0x4b0>)
 8002702:	428b      	cmp	r3, r1
 8002704:	d00f      	beq.n	8002726 <HAL_ADC_ConfigChannel+0x386>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4952      	ldr	r1, [pc, #328]	@ (8002854 <HAL_ADC_ConfigChannel+0x4b4>)
 800270c:	428b      	cmp	r3, r1
 800270e:	d008      	beq.n	8002722 <HAL_ADC_ConfigChannel+0x382>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4951      	ldr	r1, [pc, #324]	@ (800285c <HAL_ADC_ConfigChannel+0x4bc>)
 8002716:	428b      	cmp	r3, r1
 8002718:	d101      	bne.n	800271e <HAL_ADC_ConfigChannel+0x37e>
 800271a:	4b51      	ldr	r3, [pc, #324]	@ (8002860 <HAL_ADC_ConfigChannel+0x4c0>)
 800271c:	e012      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3a4>
 800271e:	2300      	movs	r3, #0
 8002720:	e010      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3a4>
 8002722:	4b51      	ldr	r3, [pc, #324]	@ (8002868 <HAL_ADC_ConfigChannel+0x4c8>)
 8002724:	e00e      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3a4>
 8002726:	4b4b      	ldr	r3, [pc, #300]	@ (8002854 <HAL_ADC_ConfigChannel+0x4b4>)
 8002728:	e00c      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3a4>
 800272a:	4b49      	ldr	r3, [pc, #292]	@ (8002850 <HAL_ADC_ConfigChannel+0x4b0>)
 800272c:	e00a      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3a4>
 800272e:	4b4f      	ldr	r3, [pc, #316]	@ (800286c <HAL_ADC_ConfigChannel+0x4cc>)
 8002730:	e008      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3a4>
 8002732:	4b4f      	ldr	r3, [pc, #316]	@ (8002870 <HAL_ADC_ConfigChannel+0x4d0>)
 8002734:	e006      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3a4>
 8002736:	4b4f      	ldr	r3, [pc, #316]	@ (8002874 <HAL_ADC_ConfigChannel+0x4d4>)
 8002738:	e004      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3a4>
 800273a:	4b4f      	ldr	r3, [pc, #316]	@ (8002878 <HAL_ADC_ConfigChannel+0x4d8>)
 800273c:	e002      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3a4>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3a4>
 8002742:	2300      	movs	r3, #0
 8002744:	4619      	mov	r1, r3
 8002746:	4610      	mov	r0, r2
 8002748:	f7ff fafe 	bl	8001d48 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	f280 80fc 	bge.w	800294e <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a36      	ldr	r2, [pc, #216]	@ (8002834 <HAL_ADC_ConfigChannel+0x494>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d004      	beq.n	800276a <HAL_ADC_ConfigChannel+0x3ca>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a45      	ldr	r2, [pc, #276]	@ (800287c <HAL_ADC_ConfigChannel+0x4dc>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d101      	bne.n	800276e <HAL_ADC_ConfigChannel+0x3ce>
 800276a:	4b45      	ldr	r3, [pc, #276]	@ (8002880 <HAL_ADC_ConfigChannel+0x4e0>)
 800276c:	e000      	b.n	8002770 <HAL_ADC_ConfigChannel+0x3d0>
 800276e:	4b45      	ldr	r3, [pc, #276]	@ (8002884 <HAL_ADC_ConfigChannel+0x4e4>)
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fadb 	bl	8001d2c <LL_ADC_GetCommonPathInternalCh>
 8002776:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a2d      	ldr	r2, [pc, #180]	@ (8002834 <HAL_ADC_ConfigChannel+0x494>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d004      	beq.n	800278c <HAL_ADC_ConfigChannel+0x3ec>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a3d      	ldr	r2, [pc, #244]	@ (800287c <HAL_ADC_ConfigChannel+0x4dc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d10e      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x40a>
 800278c:	4829      	ldr	r0, [pc, #164]	@ (8002834 <HAL_ADC_ConfigChannel+0x494>)
 800278e:	f7ff fc2b 	bl	8001fe8 <LL_ADC_IsEnabled>
 8002792:	4604      	mov	r4, r0
 8002794:	4839      	ldr	r0, [pc, #228]	@ (800287c <HAL_ADC_ConfigChannel+0x4dc>)
 8002796:	f7ff fc27 	bl	8001fe8 <LL_ADC_IsEnabled>
 800279a:	4603      	mov	r3, r0
 800279c:	4323      	orrs	r3, r4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bf0c      	ite	eq
 80027a2:	2301      	moveq	r3, #1
 80027a4:	2300      	movne	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	e008      	b.n	80027bc <HAL_ADC_ConfigChannel+0x41c>
 80027aa:	4837      	ldr	r0, [pc, #220]	@ (8002888 <HAL_ADC_ConfigChannel+0x4e8>)
 80027ac:	f7ff fc1c 	bl	8001fe8 <LL_ADC_IsEnabled>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	bf0c      	ite	eq
 80027b6:	2301      	moveq	r3, #1
 80027b8:	2300      	movne	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80b3 	beq.w	8002928 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a31      	ldr	r2, [pc, #196]	@ (800288c <HAL_ADC_ConfigChannel+0x4ec>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d165      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x4f8>
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d160      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a2b      	ldr	r2, [pc, #172]	@ (8002888 <HAL_ADC_ConfigChannel+0x4e8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	f040 80b6 	bne.w	800294e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a13      	ldr	r2, [pc, #76]	@ (8002834 <HAL_ADC_ConfigChannel+0x494>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d004      	beq.n	80027f6 <HAL_ADC_ConfigChannel+0x456>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a22      	ldr	r2, [pc, #136]	@ (800287c <HAL_ADC_ConfigChannel+0x4dc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x45a>
 80027f6:	4a22      	ldr	r2, [pc, #136]	@ (8002880 <HAL_ADC_ConfigChannel+0x4e0>)
 80027f8:	e000      	b.n	80027fc <HAL_ADC_ConfigChannel+0x45c>
 80027fa:	4a22      	ldr	r2, [pc, #136]	@ (8002884 <HAL_ADC_ConfigChannel+0x4e4>)
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002802:	4619      	mov	r1, r3
 8002804:	4610      	mov	r0, r2
 8002806:	f7ff fa7e 	bl	8001d06 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800280a:	4b21      	ldr	r3, [pc, #132]	@ (8002890 <HAL_ADC_ConfigChannel+0x4f0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	099b      	lsrs	r3, r3, #6
 8002810:	4a20      	ldr	r2, [pc, #128]	@ (8002894 <HAL_ADC_ConfigChannel+0x4f4>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	099b      	lsrs	r3, r3, #6
 8002818:	3301      	adds	r3, #1
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800281e:	e002      	b.n	8002826 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	3b01      	subs	r3, #1
 8002824:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f9      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800282c:	e08f      	b.n	800294e <HAL_ADC_ConfigChannel+0x5ae>
 800282e:	bf00      	nop
 8002830:	47ff0000 	.word	0x47ff0000
 8002834:	40022000 	.word	0x40022000
 8002838:	04300002 	.word	0x04300002
 800283c:	08600004 	.word	0x08600004
 8002840:	0c900008 	.word	0x0c900008
 8002844:	10c00010 	.word	0x10c00010
 8002848:	14f00020 	.word	0x14f00020
 800284c:	2a000400 	.word	0x2a000400
 8002850:	2e300800 	.word	0x2e300800
 8002854:	32601000 	.word	0x32601000
 8002858:	43210000 	.word	0x43210000
 800285c:	4b840000 	.word	0x4b840000
 8002860:	4fb80000 	.word	0x4fb80000
 8002864:	47520000 	.word	0x47520000
 8002868:	36902000 	.word	0x36902000
 800286c:	25b00200 	.word	0x25b00200
 8002870:	21800100 	.word	0x21800100
 8002874:	1d500080 	.word	0x1d500080
 8002878:	19200040 	.word	0x19200040
 800287c:	40022100 	.word	0x40022100
 8002880:	40022300 	.word	0x40022300
 8002884:	58026300 	.word	0x58026300
 8002888:	58026000 	.word	0x58026000
 800288c:	cb840000 	.word	0xcb840000
 8002890:	24000000 	.word	0x24000000
 8002894:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a31      	ldr	r2, [pc, #196]	@ (8002964 <HAL_ADC_ConfigChannel+0x5c4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d11e      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x540>
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d119      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002968 <HAL_ADC_ConfigChannel+0x5c8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d14b      	bne.n	800294e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a2c      	ldr	r2, [pc, #176]	@ (800296c <HAL_ADC_ConfigChannel+0x5cc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d004      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x52a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002970 <HAL_ADC_ConfigChannel+0x5d0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x52e>
 80028ca:	4a2a      	ldr	r2, [pc, #168]	@ (8002974 <HAL_ADC_ConfigChannel+0x5d4>)
 80028cc:	e000      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x530>
 80028ce:	4a2a      	ldr	r2, [pc, #168]	@ (8002978 <HAL_ADC_ConfigChannel+0x5d8>)
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028d6:	4619      	mov	r1, r3
 80028d8:	4610      	mov	r0, r2
 80028da:	f7ff fa14 	bl	8001d06 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028de:	e036      	b.n	800294e <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a25      	ldr	r2, [pc, #148]	@ (800297c <HAL_ADC_ConfigChannel+0x5dc>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d131      	bne.n	800294e <HAL_ADC_ConfigChannel+0x5ae>
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d12c      	bne.n	800294e <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002968 <HAL_ADC_ConfigChannel+0x5c8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d127      	bne.n	800294e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a1a      	ldr	r2, [pc, #104]	@ (800296c <HAL_ADC_ConfigChannel+0x5cc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d004      	beq.n	8002912 <HAL_ADC_ConfigChannel+0x572>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a18      	ldr	r2, [pc, #96]	@ (8002970 <HAL_ADC_ConfigChannel+0x5d0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d101      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x576>
 8002912:	4a18      	ldr	r2, [pc, #96]	@ (8002974 <HAL_ADC_ConfigChannel+0x5d4>)
 8002914:	e000      	b.n	8002918 <HAL_ADC_ConfigChannel+0x578>
 8002916:	4a18      	ldr	r2, [pc, #96]	@ (8002978 <HAL_ADC_ConfigChannel+0x5d8>)
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800291e:	4619      	mov	r1, r3
 8002920:	4610      	mov	r0, r2
 8002922:	f7ff f9f0 	bl	8001d06 <LL_ADC_SetCommonPathInternalCh>
 8002926:	e012      	b.n	800294e <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292c:	f043 0220 	orr.w	r2, r3, #32
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800293a:	e008      	b.n	800294e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002956:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800295a:	4618      	mov	r0, r3
 800295c:	3734      	adds	r7, #52	@ 0x34
 800295e:	46bd      	mov	sp, r7
 8002960:	bd90      	pop	{r4, r7, pc}
 8002962:	bf00      	nop
 8002964:	c7520000 	.word	0xc7520000
 8002968:	58026000 	.word	0x58026000
 800296c:	40022000 	.word	0x40022000
 8002970:	40022100 	.word	0x40022100
 8002974:	40022300 	.word	0x40022300
 8002978:	58026300 	.word	0x58026300
 800297c:	cfb80000 	.word	0xcfb80000

08002980 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a7a      	ldr	r2, [pc, #488]	@ (8002b78 <ADC_ConfigureBoostMode+0x1f8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d004      	beq.n	800299c <ADC_ConfigureBoostMode+0x1c>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a79      	ldr	r2, [pc, #484]	@ (8002b7c <ADC_ConfigureBoostMode+0x1fc>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d109      	bne.n	80029b0 <ADC_ConfigureBoostMode+0x30>
 800299c:	4b78      	ldr	r3, [pc, #480]	@ (8002b80 <ADC_ConfigureBoostMode+0x200>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	bf14      	ite	ne
 80029a8:	2301      	movne	r3, #1
 80029aa:	2300      	moveq	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	e008      	b.n	80029c2 <ADC_ConfigureBoostMode+0x42>
 80029b0:	4b74      	ldr	r3, [pc, #464]	@ (8002b84 <ADC_ConfigureBoostMode+0x204>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bf14      	ite	ne
 80029bc:	2301      	movne	r3, #1
 80029be:	2300      	moveq	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d01c      	beq.n	8002a00 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80029c6:	f002 fcb3 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 80029ca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80029d4:	d010      	beq.n	80029f8 <ADC_ConfigureBoostMode+0x78>
 80029d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80029da:	d873      	bhi.n	8002ac4 <ADC_ConfigureBoostMode+0x144>
 80029dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029e0:	d002      	beq.n	80029e8 <ADC_ConfigureBoostMode+0x68>
 80029e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029e6:	d16d      	bne.n	8002ac4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	0c1b      	lsrs	r3, r3, #16
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f4:	60fb      	str	r3, [r7, #12]
        break;
 80029f6:	e068      	b.n	8002aca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	089b      	lsrs	r3, r3, #2
 80029fc:	60fb      	str	r3, [r7, #12]
        break;
 80029fe:	e064      	b.n	8002aca <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002a00:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002a04:	f04f 0100 	mov.w	r1, #0
 8002a08:	f003 fef8 	bl	80067fc <HAL_RCCEx_GetPeriphCLKFreq>
 8002a0c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002a16:	d051      	beq.n	8002abc <ADC_ConfigureBoostMode+0x13c>
 8002a18:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002a1c:	d854      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x148>
 8002a1e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002a22:	d047      	beq.n	8002ab4 <ADC_ConfigureBoostMode+0x134>
 8002a24:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002a28:	d84e      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x148>
 8002a2a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002a2e:	d03d      	beq.n	8002aac <ADC_ConfigureBoostMode+0x12c>
 8002a30:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002a34:	d848      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x148>
 8002a36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a3a:	d033      	beq.n	8002aa4 <ADC_ConfigureBoostMode+0x124>
 8002a3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a40:	d842      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x148>
 8002a42:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002a46:	d029      	beq.n	8002a9c <ADC_ConfigureBoostMode+0x11c>
 8002a48:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002a4c:	d83c      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x148>
 8002a4e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002a52:	d01a      	beq.n	8002a8a <ADC_ConfigureBoostMode+0x10a>
 8002a54:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002a58:	d836      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x148>
 8002a5a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a5e:	d014      	beq.n	8002a8a <ADC_ConfigureBoostMode+0x10a>
 8002a60:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a64:	d830      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x148>
 8002a66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a6a:	d00e      	beq.n	8002a8a <ADC_ConfigureBoostMode+0x10a>
 8002a6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a70:	d82a      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x148>
 8002a72:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a76:	d008      	beq.n	8002a8a <ADC_ConfigureBoostMode+0x10a>
 8002a78:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a7c:	d824      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x148>
 8002a7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a82:	d002      	beq.n	8002a8a <ADC_ConfigureBoostMode+0x10a>
 8002a84:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a88:	d11e      	bne.n	8002ac8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	0c9b      	lsrs	r3, r3, #18
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a98:	60fb      	str	r3, [r7, #12]
        break;
 8002a9a:	e016      	b.n	8002aca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	091b      	lsrs	r3, r3, #4
 8002aa0:	60fb      	str	r3, [r7, #12]
        break;
 8002aa2:	e012      	b.n	8002aca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	60fb      	str	r3, [r7, #12]
        break;
 8002aaa:	e00e      	b.n	8002aca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	099b      	lsrs	r3, r3, #6
 8002ab0:	60fb      	str	r3, [r7, #12]
        break;
 8002ab2:	e00a      	b.n	8002aca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	09db      	lsrs	r3, r3, #7
 8002ab8:	60fb      	str	r3, [r7, #12]
        break;
 8002aba:	e006      	b.n	8002aca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	0a1b      	lsrs	r3, r3, #8
 8002ac0:	60fb      	str	r3, [r7, #12]
        break;
 8002ac2:	e002      	b.n	8002aca <ADC_ConfigureBoostMode+0x14a>
        break;
 8002ac4:	bf00      	nop
 8002ac6:	e000      	b.n	8002aca <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002ac8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002aca:	f7ff f89b 	bl	8001c04 <HAL_GetREVID>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d815      	bhi.n	8002b04 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4a2b      	ldr	r2, [pc, #172]	@ (8002b88 <ADC_ConfigureBoostMode+0x208>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d908      	bls.n	8002af2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aee:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002af0:	e03e      	b.n	8002b70 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b00:	609a      	str	r2, [r3, #8]
}
 8002b02:	e035      	b.n	8002b70 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	085b      	lsrs	r3, r3, #1
 8002b08:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8002b8c <ADC_ConfigureBoostMode+0x20c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d808      	bhi.n	8002b24 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002b20:	609a      	str	r2, [r3, #8]
}
 8002b22:	e025      	b.n	8002b70 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4a1a      	ldr	r2, [pc, #104]	@ (8002b90 <ADC_ConfigureBoostMode+0x210>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d80a      	bhi.n	8002b42 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b3e:	609a      	str	r2, [r3, #8]
}
 8002b40:	e016      	b.n	8002b70 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4a13      	ldr	r2, [pc, #76]	@ (8002b94 <ADC_ConfigureBoostMode+0x214>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d80a      	bhi.n	8002b60 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b5c:	609a      	str	r2, [r3, #8]
}
 8002b5e:	e007      	b.n	8002b70 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002b6e:	609a      	str	r2, [r3, #8]
}
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40022000 	.word	0x40022000
 8002b7c:	40022100 	.word	0x40022100
 8002b80:	40022300 	.word	0x40022300
 8002b84:	58026300 	.word	0x58026300
 8002b88:	01312d00 	.word	0x01312d00
 8002b8c:	005f5e10 	.word	0x005f5e10
 8002b90:	00bebc20 	.word	0x00bebc20
 8002b94:	017d7840 	.word	0x017d7840

08002b98 <LL_ADC_IsEnabled>:
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <LL_ADC_IsEnabled+0x18>
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <LL_ADC_IsEnabled+0x1a>
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <LL_ADC_REG_IsConversionOngoing>:
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d101      	bne.n	8002bd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b09f      	sub	sp, #124	@ 0x7c
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e0be      	b.n	8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a5c      	ldr	r2, [pc, #368]	@ (8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d102      	bne.n	8002c22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c1c:	4b5b      	ldr	r3, [pc, #364]	@ (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	e001      	b.n	8002c26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10b      	bne.n	8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c30:	f043 0220 	orr.w	r2, r3, #32
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e09d      	b.n	8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff ffb9 	bl	8002bbe <LL_ADC_REG_IsConversionOngoing>
 8002c4c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff ffb3 	bl	8002bbe <LL_ADC_REG_IsConversionOngoing>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d17f      	bne.n	8002d5e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d17c      	bne.n	8002d5e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a47      	ldr	r2, [pc, #284]	@ (8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d004      	beq.n	8002c78 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a46      	ldr	r2, [pc, #280]	@ (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d101      	bne.n	8002c7c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002c78:	4b45      	ldr	r3, [pc, #276]	@ (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c7a:	e000      	b.n	8002c7e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002c7c:	4b45      	ldr	r3, [pc, #276]	@ (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c7e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d039      	beq.n	8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002c88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c98:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a3a      	ldr	r2, [pc, #232]	@ (8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d004      	beq.n	8002cae <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a38      	ldr	r2, [pc, #224]	@ (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d10e      	bne.n	8002ccc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002cae:	4836      	ldr	r0, [pc, #216]	@ (8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002cb0:	f7ff ff72 	bl	8002b98 <LL_ADC_IsEnabled>
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	4835      	ldr	r0, [pc, #212]	@ (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002cb8:	f7ff ff6e 	bl	8002b98 <LL_ADC_IsEnabled>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4323      	orrs	r3, r4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf0c      	ite	eq
 8002cc4:	2301      	moveq	r3, #1
 8002cc6:	2300      	movne	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	e008      	b.n	8002cde <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002ccc:	4832      	ldr	r0, [pc, #200]	@ (8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002cce:	f7ff ff63 	bl	8002b98 <LL_ADC_IsEnabled>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2301      	moveq	r3, #1
 8002cda:	2300      	movne	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d047      	beq.n	8002d72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ce2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	4b2d      	ldr	r3, [pc, #180]	@ (8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	6811      	ldr	r1, [r2, #0]
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	6892      	ldr	r2, [r2, #8]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cf8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cfa:	e03a      	b.n	8002d72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002cfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d06:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a1e      	ldr	r2, [pc, #120]	@ (8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d004      	beq.n	8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a1d      	ldr	r2, [pc, #116]	@ (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d10e      	bne.n	8002d3a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002d1c:	481a      	ldr	r0, [pc, #104]	@ (8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d1e:	f7ff ff3b 	bl	8002b98 <LL_ADC_IsEnabled>
 8002d22:	4604      	mov	r4, r0
 8002d24:	4819      	ldr	r0, [pc, #100]	@ (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d26:	f7ff ff37 	bl	8002b98 <LL_ADC_IsEnabled>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4323      	orrs	r3, r4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	bf0c      	ite	eq
 8002d32:	2301      	moveq	r3, #1
 8002d34:	2300      	movne	r3, #0
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	e008      	b.n	8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002d3a:	4817      	ldr	r0, [pc, #92]	@ (8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002d3c:	f7ff ff2c 	bl	8002b98 <LL_ADC_IsEnabled>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	bf0c      	ite	eq
 8002d46:	2301      	moveq	r3, #1
 8002d48:	2300      	movne	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d010      	beq.n	8002d72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	4b11      	ldr	r3, [pc, #68]	@ (8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d5a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d5c:	e009      	b.n	8002d72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d62:	f043 0220 	orr.w	r2, r3, #32
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002d70:	e000      	b.n	8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d72:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d7c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	377c      	adds	r7, #124	@ 0x7c
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd90      	pop	{r4, r7, pc}
 8002d88:	40022000 	.word	0x40022000
 8002d8c:	40022100 	.word	0x40022100
 8002d90:	40022300 	.word	0x40022300
 8002d94:	58026300 	.word	0x58026300
 8002d98:	58026000 	.word	0x58026000
 8002d9c:	fffff0e0 	.word	0xfffff0e0

08002da0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d102      	bne.n	8002dbc <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	77fb      	strb	r3, [r7, #31]
 8002dba:	e10e      	b.n	8002fda <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dca:	d102      	bne.n	8002dd2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	77fb      	strb	r3, [r7, #31]
 8002dd0:	e103      	b.n	8002fda <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7fe fbdf 	bl	80015b0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8002e06:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8002e0c:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 8002e12:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8002e18:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b6e      	ldr	r3, [pc, #440]	@ (8002fe4 <HAL_COMP_Init+0x244>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	6979      	ldr	r1, [r7, #20]
 8002e32:	430b      	orrs	r3, r1
 8002e34:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b10      	cmp	r3, #16
 8002e3c:	d108      	bne.n	8002e50 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0210 	orr.w	r2, r2, #16
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	e007      	b.n	8002e60 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0210 	bic.w	r2, r2, #16
 8002e5e:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d016      	beq.n	8002e9c <HAL_COMP_Init+0xfc>
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d013      	beq.n	8002e9c <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e74:	4b5c      	ldr	r3, [pc, #368]	@ (8002fe8 <HAL_COMP_Init+0x248>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	099b      	lsrs	r3, r3, #6
 8002e7a:	4a5c      	ldr	r2, [pc, #368]	@ (8002fec <HAL_COMP_Init+0x24c>)
 8002e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e80:	099b      	lsrs	r3, r3, #6
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 8002e8e:	e002      	b.n	8002e96 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f9      	bne.n	8002e90 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a53      	ldr	r2, [pc, #332]	@ (8002ff0 <HAL_COMP_Init+0x250>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d102      	bne.n	8002eac <HAL_COMP_Init+0x10c>
 8002ea6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002eaa:	e001      	b.n	8002eb0 <HAL_COMP_Init+0x110>
 8002eac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002eb0:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d06d      	beq.n	8002f9a <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d008      	beq.n	8002edc <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 8002eca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]
 8002eda:	e008      	b.n	8002eee <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8002edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002eea:	4013      	ands	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d008      	beq.n	8002f0c <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8002efa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	604b      	str	r3, [r1, #4]
 8002f0a:	e008      	b.n	8002f1e <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8002f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 8002f1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8002f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f38:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002f3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8002f48:	e00a      	b.n	8002f60 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8002f4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f4e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00a      	beq.n	8002f82 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f70:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002f74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8002f80:	e021      	b.n	8002fc6 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 8002f82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f86:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f92:	4013      	ands	r3, r2
 8002f94:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8002f98:	e015      	b.n	8002fc6 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8002f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f9e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002faa:	4013      	ands	r3, r2
 8002fac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8002fb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fb4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d103      	bne.n	8002fda <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 8002fda:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3720      	adds	r7, #32
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	f0e8cce1 	.word	0xf0e8cce1
 8002fe8:	24000000 	.word	0x24000000
 8002fec:	053e2d63 	.word	0x053e2d63
 8002ff0:	5800380c 	.word	0x5800380c

08002ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003004:	4b0b      	ldr	r3, [pc, #44]	@ (8003034 <__NVIC_SetPriorityGrouping+0x40>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003010:	4013      	ands	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800301c:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <__NVIC_SetPriorityGrouping+0x44>)
 800301e:	4313      	orrs	r3, r2
 8003020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003022:	4a04      	ldr	r2, [pc, #16]	@ (8003034 <__NVIC_SetPriorityGrouping+0x40>)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	60d3      	str	r3, [r2, #12]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000ed00 	.word	0xe000ed00
 8003038:	05fa0000 	.word	0x05fa0000

0800303c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003040:	4b04      	ldr	r3, [pc, #16]	@ (8003054 <__NVIC_GetPriorityGrouping+0x18>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	f003 0307 	and.w	r3, r3, #7
}
 800304a:	4618      	mov	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003066:	2b00      	cmp	r3, #0
 8003068:	db0b      	blt.n	8003082 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800306a:	88fb      	ldrh	r3, [r7, #6]
 800306c:	f003 021f 	and.w	r2, r3, #31
 8003070:	4907      	ldr	r1, [pc, #28]	@ (8003090 <__NVIC_EnableIRQ+0x38>)
 8003072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	2001      	movs	r0, #1
 800307a:	fa00 f202 	lsl.w	r2, r0, r2
 800307e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e000e100 	.word	0xe000e100

08003094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	6039      	str	r1, [r7, #0]
 800309e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	db0a      	blt.n	80030be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	490c      	ldr	r1, [pc, #48]	@ (80030e0 <__NVIC_SetPriority+0x4c>)
 80030ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030b2:	0112      	lsls	r2, r2, #4
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	440b      	add	r3, r1
 80030b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030bc:	e00a      	b.n	80030d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	4908      	ldr	r1, [pc, #32]	@ (80030e4 <__NVIC_SetPriority+0x50>)
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	3b04      	subs	r3, #4
 80030cc:	0112      	lsls	r2, r2, #4
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	440b      	add	r3, r1
 80030d2:	761a      	strb	r2, [r3, #24]
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000e100 	.word	0xe000e100
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b089      	sub	sp, #36	@ 0x24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f1c3 0307 	rsb	r3, r3, #7
 8003102:	2b04      	cmp	r3, #4
 8003104:	bf28      	it	cs
 8003106:	2304      	movcs	r3, #4
 8003108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3304      	adds	r3, #4
 800310e:	2b06      	cmp	r3, #6
 8003110:	d902      	bls.n	8003118 <NVIC_EncodePriority+0x30>
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3b03      	subs	r3, #3
 8003116:	e000      	b.n	800311a <NVIC_EncodePriority+0x32>
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800311c:	f04f 32ff 	mov.w	r2, #4294967295
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43da      	mvns	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	401a      	ands	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003130:	f04f 31ff 	mov.w	r1, #4294967295
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	43d9      	mvns	r1, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003140:	4313      	orrs	r3, r2
         );
}
 8003142:	4618      	mov	r0, r3
 8003144:	3724      	adds	r7, #36	@ 0x24
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3b01      	subs	r3, #1
 800315c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003160:	d301      	bcc.n	8003166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003162:	2301      	movs	r3, #1
 8003164:	e00f      	b.n	8003186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003166:	4a0a      	ldr	r2, [pc, #40]	@ (8003190 <SysTick_Config+0x40>)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3b01      	subs	r3, #1
 800316c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316e:	210f      	movs	r1, #15
 8003170:	f04f 30ff 	mov.w	r0, #4294967295
 8003174:	f7ff ff8e 	bl	8003094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003178:	4b05      	ldr	r3, [pc, #20]	@ (8003190 <SysTick_Config+0x40>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317e:	4b04      	ldr	r3, [pc, #16]	@ (8003190 <SysTick_Config+0x40>)
 8003180:	2207      	movs	r2, #7
 8003182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	e000e010 	.word	0xe000e010

08003194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff ff29 	bl	8002ff4 <__NVIC_SetPriorityGrouping>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b086      	sub	sp, #24
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	4603      	mov	r3, r0
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	607a      	str	r2, [r7, #4]
 80031b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031b8:	f7ff ff40 	bl	800303c <__NVIC_GetPriorityGrouping>
 80031bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	6978      	ldr	r0, [r7, #20]
 80031c4:	f7ff ff90 	bl	80030e8 <NVIC_EncodePriority>
 80031c8:	4602      	mov	r2, r0
 80031ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff5f 	bl	8003094 <__NVIC_SetPriority>
}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	4603      	mov	r3, r0
 80031e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff33 	bl	8003058 <__NVIC_EnableIRQ>
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff ffa4 	bl	8003150 <SysTick_Config>
 8003208:	4603      	mov	r3, r0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b082      	sub	sp, #8
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e014      	b.n	800324e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	791b      	ldrb	r3, [r3, #4]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d105      	bne.n	800323a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7fe fa49 	bl	80016cc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2202      	movs	r2, #2
 800323e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08a      	sub	sp, #40	@ 0x28
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <HAL_DAC_ConfigChannel+0x1e>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e12d      	b.n	80034d6 <HAL_DAC_ConfigChannel+0x27e>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b04      	cmp	r3, #4
    }
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	795b      	ldrb	r3, [r3, #5]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_DAC_ConfigChannel+0x34>
 8003288:	2302      	movs	r3, #2
 800328a:	e124      	b.n	80034d6 <HAL_DAC_ConfigChannel+0x27e>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2202      	movs	r2, #2
 8003296:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b04      	cmp	r3, #4
 800329e:	d17a      	bne.n	8003396 <HAL_DAC_ConfigChannel+0x13e>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80032a0:	f7fe fca4 	bl	8001bec <HAL_GetTick>
 80032a4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d13d      	bne.n	8003328 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032ac:	e018      	b.n	80032e0 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80032ae:	f7fe fc9d 	bl	8001bec <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d911      	bls.n	80032e0 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032c2:	4b87      	ldr	r3, [pc, #540]	@ (80034e0 <HAL_DAC_ConfigChannel+0x288>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f043 0208 	orr.w	r2, r3, #8
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2203      	movs	r2, #3
 80032da:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e0fa      	b.n	80034d6 <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032e6:	4b7e      	ldr	r3, [pc, #504]	@ (80034e0 <HAL_DAC_ConfigChannel+0x288>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1df      	bne.n	80032ae <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	6992      	ldr	r2, [r2, #24]
 80032f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80032f8:	e020      	b.n	800333c <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80032fa:	f7fe fc77 	bl	8001bec <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	d90f      	bls.n	8003328 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330e:	2b00      	cmp	r3, #0
 8003310:	da0a      	bge.n	8003328 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f043 0208 	orr.w	r2, r3, #8
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2203      	movs	r2, #3
 8003322:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e0d6      	b.n	80034d6 <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800332e:	2b00      	cmp	r3, #0
 8003330:	dbe3      	blt.n	80032fa <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	6992      	ldr	r2, [r2, #24]
 800333a:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800334c:	fa01 f303 	lsl.w	r3, r1, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	ea02 0103 	and.w	r1, r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	69da      	ldr	r2, [r3, #28]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	409a      	lsls	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f003 0310 	and.w	r3, r3, #16
 8003376:	21ff      	movs	r1, #255	@ 0xff
 8003378:	fa01 f303 	lsl.w	r3, r1, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	ea02 0103 	and.w	r1, r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	6a1a      	ldr	r2, [r3, #32]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	409a      	lsls	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d11d      	bne.n	80033da <HAL_DAC_ConfigChannel+0x182>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a4:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	221f      	movs	r2, #31
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4013      	ands	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e0:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	2207      	movs	r2, #7
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d102      	bne.n	8003404 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = 0x00000000UL;
 80033fe:	2300      	movs	r3, #0
 8003400:	627b      	str	r3, [r7, #36]	@ 0x24
 8003402:	e00f      	b.n	8003424 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d102      	bne.n	8003412 <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800340c:	2301      	movs	r3, #1
 800340e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003410:	e008      	b.n	8003424 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d102      	bne.n	8003420 <HAL_DAC_ConfigChannel+0x1c8>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800341a:	2301      	movs	r3, #1
 800341c:	627b      	str	r3, [r7, #36]	@ 0x24
 800341e:	e001      	b.n	8003424 <HAL_DAC_ConfigChannel+0x1cc>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003420:	2300      	movs	r3, #0
 8003422:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	4313      	orrs	r3, r2
 800342e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6819      	ldr	r1, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f003 0310 	and.w	r3, r3, #16
 800345a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43da      	mvns	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	400a      	ands	r2, r1
 800346a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4013      	ands	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6819      	ldr	r1, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	22c0      	movs	r2, #192	@ 0xc0
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43da      	mvns	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	400a      	ands	r2, r1
 80034c4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80034d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3728      	adds	r7, #40	@ 0x28
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20008000 	.word	0x20008000

080034e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80034ec:	f7fe fb7e 	bl	8001bec <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e316      	b.n	8003b2a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a66      	ldr	r2, [pc, #408]	@ (800369c <HAL_DMA_Init+0x1b8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d04a      	beq.n	800359c <HAL_DMA_Init+0xb8>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a65      	ldr	r2, [pc, #404]	@ (80036a0 <HAL_DMA_Init+0x1bc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d045      	beq.n	800359c <HAL_DMA_Init+0xb8>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a63      	ldr	r2, [pc, #396]	@ (80036a4 <HAL_DMA_Init+0x1c0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d040      	beq.n	800359c <HAL_DMA_Init+0xb8>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a62      	ldr	r2, [pc, #392]	@ (80036a8 <HAL_DMA_Init+0x1c4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d03b      	beq.n	800359c <HAL_DMA_Init+0xb8>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a60      	ldr	r2, [pc, #384]	@ (80036ac <HAL_DMA_Init+0x1c8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d036      	beq.n	800359c <HAL_DMA_Init+0xb8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a5f      	ldr	r2, [pc, #380]	@ (80036b0 <HAL_DMA_Init+0x1cc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d031      	beq.n	800359c <HAL_DMA_Init+0xb8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a5d      	ldr	r2, [pc, #372]	@ (80036b4 <HAL_DMA_Init+0x1d0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d02c      	beq.n	800359c <HAL_DMA_Init+0xb8>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a5c      	ldr	r2, [pc, #368]	@ (80036b8 <HAL_DMA_Init+0x1d4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d027      	beq.n	800359c <HAL_DMA_Init+0xb8>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a5a      	ldr	r2, [pc, #360]	@ (80036bc <HAL_DMA_Init+0x1d8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d022      	beq.n	800359c <HAL_DMA_Init+0xb8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a59      	ldr	r2, [pc, #356]	@ (80036c0 <HAL_DMA_Init+0x1dc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d01d      	beq.n	800359c <HAL_DMA_Init+0xb8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a57      	ldr	r2, [pc, #348]	@ (80036c4 <HAL_DMA_Init+0x1e0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d018      	beq.n	800359c <HAL_DMA_Init+0xb8>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a56      	ldr	r2, [pc, #344]	@ (80036c8 <HAL_DMA_Init+0x1e4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d013      	beq.n	800359c <HAL_DMA_Init+0xb8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a54      	ldr	r2, [pc, #336]	@ (80036cc <HAL_DMA_Init+0x1e8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00e      	beq.n	800359c <HAL_DMA_Init+0xb8>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a53      	ldr	r2, [pc, #332]	@ (80036d0 <HAL_DMA_Init+0x1ec>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d009      	beq.n	800359c <HAL_DMA_Init+0xb8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a51      	ldr	r2, [pc, #324]	@ (80036d4 <HAL_DMA_Init+0x1f0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d004      	beq.n	800359c <HAL_DMA_Init+0xb8>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a50      	ldr	r2, [pc, #320]	@ (80036d8 <HAL_DMA_Init+0x1f4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d101      	bne.n	80035a0 <HAL_DMA_Init+0xbc>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <HAL_DMA_Init+0xbe>
 80035a0:	2300      	movs	r3, #0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 813b 	beq.w	800381e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a37      	ldr	r2, [pc, #220]	@ (800369c <HAL_DMA_Init+0x1b8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d04a      	beq.n	8003658 <HAL_DMA_Init+0x174>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a36      	ldr	r2, [pc, #216]	@ (80036a0 <HAL_DMA_Init+0x1bc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d045      	beq.n	8003658 <HAL_DMA_Init+0x174>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a34      	ldr	r2, [pc, #208]	@ (80036a4 <HAL_DMA_Init+0x1c0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d040      	beq.n	8003658 <HAL_DMA_Init+0x174>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a33      	ldr	r2, [pc, #204]	@ (80036a8 <HAL_DMA_Init+0x1c4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d03b      	beq.n	8003658 <HAL_DMA_Init+0x174>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a31      	ldr	r2, [pc, #196]	@ (80036ac <HAL_DMA_Init+0x1c8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d036      	beq.n	8003658 <HAL_DMA_Init+0x174>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a30      	ldr	r2, [pc, #192]	@ (80036b0 <HAL_DMA_Init+0x1cc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d031      	beq.n	8003658 <HAL_DMA_Init+0x174>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a2e      	ldr	r2, [pc, #184]	@ (80036b4 <HAL_DMA_Init+0x1d0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d02c      	beq.n	8003658 <HAL_DMA_Init+0x174>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a2d      	ldr	r2, [pc, #180]	@ (80036b8 <HAL_DMA_Init+0x1d4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d027      	beq.n	8003658 <HAL_DMA_Init+0x174>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a2b      	ldr	r2, [pc, #172]	@ (80036bc <HAL_DMA_Init+0x1d8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d022      	beq.n	8003658 <HAL_DMA_Init+0x174>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a2a      	ldr	r2, [pc, #168]	@ (80036c0 <HAL_DMA_Init+0x1dc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d01d      	beq.n	8003658 <HAL_DMA_Init+0x174>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a28      	ldr	r2, [pc, #160]	@ (80036c4 <HAL_DMA_Init+0x1e0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d018      	beq.n	8003658 <HAL_DMA_Init+0x174>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a27      	ldr	r2, [pc, #156]	@ (80036c8 <HAL_DMA_Init+0x1e4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d013      	beq.n	8003658 <HAL_DMA_Init+0x174>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a25      	ldr	r2, [pc, #148]	@ (80036cc <HAL_DMA_Init+0x1e8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00e      	beq.n	8003658 <HAL_DMA_Init+0x174>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a24      	ldr	r2, [pc, #144]	@ (80036d0 <HAL_DMA_Init+0x1ec>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d009      	beq.n	8003658 <HAL_DMA_Init+0x174>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a22      	ldr	r2, [pc, #136]	@ (80036d4 <HAL_DMA_Init+0x1f0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d004      	beq.n	8003658 <HAL_DMA_Init+0x174>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a21      	ldr	r2, [pc, #132]	@ (80036d8 <HAL_DMA_Init+0x1f4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d108      	bne.n	800366a <HAL_DMA_Init+0x186>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0201 	bic.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	e007      	b.n	800367a <HAL_DMA_Init+0x196>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0201 	bic.w	r2, r2, #1
 8003678:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800367a:	e02f      	b.n	80036dc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800367c:	f7fe fab6 	bl	8001bec <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b05      	cmp	r3, #5
 8003688:	d928      	bls.n	80036dc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2220      	movs	r2, #32
 800368e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2203      	movs	r2, #3
 8003694:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e246      	b.n	8003b2a <HAL_DMA_Init+0x646>
 800369c:	40020010 	.word	0x40020010
 80036a0:	40020028 	.word	0x40020028
 80036a4:	40020040 	.word	0x40020040
 80036a8:	40020058 	.word	0x40020058
 80036ac:	40020070 	.word	0x40020070
 80036b0:	40020088 	.word	0x40020088
 80036b4:	400200a0 	.word	0x400200a0
 80036b8:	400200b8 	.word	0x400200b8
 80036bc:	40020410 	.word	0x40020410
 80036c0:	40020428 	.word	0x40020428
 80036c4:	40020440 	.word	0x40020440
 80036c8:	40020458 	.word	0x40020458
 80036cc:	40020470 	.word	0x40020470
 80036d0:	40020488 	.word	0x40020488
 80036d4:	400204a0 	.word	0x400204a0
 80036d8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1c8      	bne.n	800367c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4b83      	ldr	r3, [pc, #524]	@ (8003904 <HAL_DMA_Init+0x420>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003702:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800371a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372c:	2b04      	cmp	r3, #4
 800372e:	d107      	bne.n	8003740 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003738:	4313      	orrs	r3, r2
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003740:	4b71      	ldr	r3, [pc, #452]	@ (8003908 <HAL_DMA_Init+0x424>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4b71      	ldr	r3, [pc, #452]	@ (800390c <HAL_DMA_Init+0x428>)
 8003746:	4013      	ands	r3, r2
 8003748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800374c:	d328      	bcc.n	80037a0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b28      	cmp	r3, #40	@ 0x28
 8003754:	d903      	bls.n	800375e <HAL_DMA_Init+0x27a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b2e      	cmp	r3, #46	@ 0x2e
 800375c:	d917      	bls.n	800378e <HAL_DMA_Init+0x2aa>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b3e      	cmp	r3, #62	@ 0x3e
 8003764:	d903      	bls.n	800376e <HAL_DMA_Init+0x28a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b42      	cmp	r3, #66	@ 0x42
 800376c:	d90f      	bls.n	800378e <HAL_DMA_Init+0x2aa>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b46      	cmp	r3, #70	@ 0x46
 8003774:	d903      	bls.n	800377e <HAL_DMA_Init+0x29a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b48      	cmp	r3, #72	@ 0x48
 800377c:	d907      	bls.n	800378e <HAL_DMA_Init+0x2aa>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b4e      	cmp	r3, #78	@ 0x4e
 8003784:	d905      	bls.n	8003792 <HAL_DMA_Init+0x2ae>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b52      	cmp	r3, #82	@ 0x52
 800378c:	d801      	bhi.n	8003792 <HAL_DMA_Init+0x2ae>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <HAL_DMA_Init+0x2b0>
 8003792:	2300      	movs	r3, #0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800379e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f023 0307 	bic.w	r3, r3, #7
 80037b6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d117      	bne.n	80037fa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00e      	beq.n	80037fa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 fa8f 	bl	8003d00 <DMA_CheckFifoParam>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2240      	movs	r2, #64	@ 0x40
 80037ec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e197      	b.n	8003b2a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f9ca 	bl	8003b9c <DMA_CalcBaseAndBitshift>
 8003808:	4603      	mov	r3, r0
 800380a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	223f      	movs	r2, #63	@ 0x3f
 8003816:	409a      	lsls	r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	e0cd      	b.n	80039ba <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a3b      	ldr	r2, [pc, #236]	@ (8003910 <HAL_DMA_Init+0x42c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d022      	beq.n	800386e <HAL_DMA_Init+0x38a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a39      	ldr	r2, [pc, #228]	@ (8003914 <HAL_DMA_Init+0x430>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d01d      	beq.n	800386e <HAL_DMA_Init+0x38a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a38      	ldr	r2, [pc, #224]	@ (8003918 <HAL_DMA_Init+0x434>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d018      	beq.n	800386e <HAL_DMA_Init+0x38a>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a36      	ldr	r2, [pc, #216]	@ (800391c <HAL_DMA_Init+0x438>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d013      	beq.n	800386e <HAL_DMA_Init+0x38a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a35      	ldr	r2, [pc, #212]	@ (8003920 <HAL_DMA_Init+0x43c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00e      	beq.n	800386e <HAL_DMA_Init+0x38a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a33      	ldr	r2, [pc, #204]	@ (8003924 <HAL_DMA_Init+0x440>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d009      	beq.n	800386e <HAL_DMA_Init+0x38a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a32      	ldr	r2, [pc, #200]	@ (8003928 <HAL_DMA_Init+0x444>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d004      	beq.n	800386e <HAL_DMA_Init+0x38a>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a30      	ldr	r2, [pc, #192]	@ (800392c <HAL_DMA_Init+0x448>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <HAL_DMA_Init+0x38e>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <HAL_DMA_Init+0x390>
 8003872:	2300      	movs	r3, #0
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 8097 	beq.w	80039a8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a24      	ldr	r2, [pc, #144]	@ (8003910 <HAL_DMA_Init+0x42c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d021      	beq.n	80038c8 <HAL_DMA_Init+0x3e4>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a22      	ldr	r2, [pc, #136]	@ (8003914 <HAL_DMA_Init+0x430>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d01c      	beq.n	80038c8 <HAL_DMA_Init+0x3e4>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a21      	ldr	r2, [pc, #132]	@ (8003918 <HAL_DMA_Init+0x434>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d017      	beq.n	80038c8 <HAL_DMA_Init+0x3e4>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a1f      	ldr	r2, [pc, #124]	@ (800391c <HAL_DMA_Init+0x438>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d012      	beq.n	80038c8 <HAL_DMA_Init+0x3e4>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003920 <HAL_DMA_Init+0x43c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00d      	beq.n	80038c8 <HAL_DMA_Init+0x3e4>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003924 <HAL_DMA_Init+0x440>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d008      	beq.n	80038c8 <HAL_DMA_Init+0x3e4>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003928 <HAL_DMA_Init+0x444>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d003      	beq.n	80038c8 <HAL_DMA_Init+0x3e4>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a19      	ldr	r2, [pc, #100]	@ (800392c <HAL_DMA_Init+0x448>)
 80038c6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	4b13      	ldr	r3, [pc, #76]	@ (8003930 <HAL_DMA_Init+0x44c>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2b40      	cmp	r3, #64	@ 0x40
 80038ee:	d021      	beq.n	8003934 <HAL_DMA_Init+0x450>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2b80      	cmp	r3, #128	@ 0x80
 80038f6:	d102      	bne.n	80038fe <HAL_DMA_Init+0x41a>
 80038f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80038fc:	e01b      	b.n	8003936 <HAL_DMA_Init+0x452>
 80038fe:	2300      	movs	r3, #0
 8003900:	e019      	b.n	8003936 <HAL_DMA_Init+0x452>
 8003902:	bf00      	nop
 8003904:	fe10803f 	.word	0xfe10803f
 8003908:	5c001000 	.word	0x5c001000
 800390c:	ffff0000 	.word	0xffff0000
 8003910:	58025408 	.word	0x58025408
 8003914:	5802541c 	.word	0x5802541c
 8003918:	58025430 	.word	0x58025430
 800391c:	58025444 	.word	0x58025444
 8003920:	58025458 	.word	0x58025458
 8003924:	5802546c 	.word	0x5802546c
 8003928:	58025480 	.word	0x58025480
 800392c:	58025494 	.word	0x58025494
 8003930:	fffe000f 	.word	0xfffe000f
 8003934:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	68d2      	ldr	r2, [r2, #12]
 800393a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800393c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003944:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800394c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003954:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800395c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003964:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	4b6e      	ldr	r3, [pc, #440]	@ (8003b34 <HAL_DMA_Init+0x650>)
 800397c:	4413      	add	r3, r2
 800397e:	4a6e      	ldr	r2, [pc, #440]	@ (8003b38 <HAL_DMA_Init+0x654>)
 8003980:	fba2 2303 	umull	r2, r3, r2, r3
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	009a      	lsls	r2, r3, #2
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f905 	bl	8003b9c <DMA_CalcBaseAndBitshift>
 8003992:	4603      	mov	r3, r0
 8003994:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399a:	f003 031f 	and.w	r3, r3, #31
 800399e:	2201      	movs	r2, #1
 80039a0:	409a      	lsls	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	e008      	b.n	80039ba <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2240      	movs	r2, #64	@ 0x40
 80039ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2203      	movs	r2, #3
 80039b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e0b7      	b.n	8003b2a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a5f      	ldr	r2, [pc, #380]	@ (8003b3c <HAL_DMA_Init+0x658>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d072      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003b40 <HAL_DMA_Init+0x65c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d06d      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a5c      	ldr	r2, [pc, #368]	@ (8003b44 <HAL_DMA_Init+0x660>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d068      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a5a      	ldr	r2, [pc, #360]	@ (8003b48 <HAL_DMA_Init+0x664>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d063      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a59      	ldr	r2, [pc, #356]	@ (8003b4c <HAL_DMA_Init+0x668>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d05e      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a57      	ldr	r2, [pc, #348]	@ (8003b50 <HAL_DMA_Init+0x66c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d059      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a56      	ldr	r2, [pc, #344]	@ (8003b54 <HAL_DMA_Init+0x670>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d054      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a54      	ldr	r2, [pc, #336]	@ (8003b58 <HAL_DMA_Init+0x674>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d04f      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a53      	ldr	r2, [pc, #332]	@ (8003b5c <HAL_DMA_Init+0x678>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d04a      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a51      	ldr	r2, [pc, #324]	@ (8003b60 <HAL_DMA_Init+0x67c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d045      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a50      	ldr	r2, [pc, #320]	@ (8003b64 <HAL_DMA_Init+0x680>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d040      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a4e      	ldr	r2, [pc, #312]	@ (8003b68 <HAL_DMA_Init+0x684>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d03b      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a4d      	ldr	r2, [pc, #308]	@ (8003b6c <HAL_DMA_Init+0x688>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d036      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a4b      	ldr	r2, [pc, #300]	@ (8003b70 <HAL_DMA_Init+0x68c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d031      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a4a      	ldr	r2, [pc, #296]	@ (8003b74 <HAL_DMA_Init+0x690>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d02c      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a48      	ldr	r2, [pc, #288]	@ (8003b78 <HAL_DMA_Init+0x694>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d027      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a47      	ldr	r2, [pc, #284]	@ (8003b7c <HAL_DMA_Init+0x698>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d022      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a45      	ldr	r2, [pc, #276]	@ (8003b80 <HAL_DMA_Init+0x69c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d01d      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a44      	ldr	r2, [pc, #272]	@ (8003b84 <HAL_DMA_Init+0x6a0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d018      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a42      	ldr	r2, [pc, #264]	@ (8003b88 <HAL_DMA_Init+0x6a4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a41      	ldr	r2, [pc, #260]	@ (8003b8c <HAL_DMA_Init+0x6a8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00e      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a3f      	ldr	r2, [pc, #252]	@ (8003b90 <HAL_DMA_Init+0x6ac>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d009      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a3e      	ldr	r2, [pc, #248]	@ (8003b94 <HAL_DMA_Init+0x6b0>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d004      	beq.n	8003aaa <HAL_DMA_Init+0x5c6>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a3c      	ldr	r2, [pc, #240]	@ (8003b98 <HAL_DMA_Init+0x6b4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d101      	bne.n	8003aae <HAL_DMA_Init+0x5ca>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <HAL_DMA_Init+0x5cc>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d032      	beq.n	8003b1a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f99f 	bl	8003df8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	2b80      	cmp	r3, #128	@ 0x80
 8003ac0:	d102      	bne.n	8003ac8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003adc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d010      	beq.n	8003b08 <HAL_DMA_Init+0x624>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d80c      	bhi.n	8003b08 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fa1c 	bl	8003f2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003b04:	605a      	str	r2, [r3, #4]
 8003b06:	e008      	b.n	8003b1a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	a7fdabf8 	.word	0xa7fdabf8
 8003b38:	cccccccd 	.word	0xcccccccd
 8003b3c:	40020010 	.word	0x40020010
 8003b40:	40020028 	.word	0x40020028
 8003b44:	40020040 	.word	0x40020040
 8003b48:	40020058 	.word	0x40020058
 8003b4c:	40020070 	.word	0x40020070
 8003b50:	40020088 	.word	0x40020088
 8003b54:	400200a0 	.word	0x400200a0
 8003b58:	400200b8 	.word	0x400200b8
 8003b5c:	40020410 	.word	0x40020410
 8003b60:	40020428 	.word	0x40020428
 8003b64:	40020440 	.word	0x40020440
 8003b68:	40020458 	.word	0x40020458
 8003b6c:	40020470 	.word	0x40020470
 8003b70:	40020488 	.word	0x40020488
 8003b74:	400204a0 	.word	0x400204a0
 8003b78:	400204b8 	.word	0x400204b8
 8003b7c:	58025408 	.word	0x58025408
 8003b80:	5802541c 	.word	0x5802541c
 8003b84:	58025430 	.word	0x58025430
 8003b88:	58025444 	.word	0x58025444
 8003b8c:	58025458 	.word	0x58025458
 8003b90:	5802546c 	.word	0x5802546c
 8003b94:	58025480 	.word	0x58025480
 8003b98:	58025494 	.word	0x58025494

08003b9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a42      	ldr	r2, [pc, #264]	@ (8003cb4 <DMA_CalcBaseAndBitshift+0x118>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d04a      	beq.n	8003c44 <DMA_CalcBaseAndBitshift+0xa8>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a41      	ldr	r2, [pc, #260]	@ (8003cb8 <DMA_CalcBaseAndBitshift+0x11c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d045      	beq.n	8003c44 <DMA_CalcBaseAndBitshift+0xa8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a3f      	ldr	r2, [pc, #252]	@ (8003cbc <DMA_CalcBaseAndBitshift+0x120>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d040      	beq.n	8003c44 <DMA_CalcBaseAndBitshift+0xa8>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a3e      	ldr	r2, [pc, #248]	@ (8003cc0 <DMA_CalcBaseAndBitshift+0x124>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d03b      	beq.n	8003c44 <DMA_CalcBaseAndBitshift+0xa8>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a3c      	ldr	r2, [pc, #240]	@ (8003cc4 <DMA_CalcBaseAndBitshift+0x128>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d036      	beq.n	8003c44 <DMA_CalcBaseAndBitshift+0xa8>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a3b      	ldr	r2, [pc, #236]	@ (8003cc8 <DMA_CalcBaseAndBitshift+0x12c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d031      	beq.n	8003c44 <DMA_CalcBaseAndBitshift+0xa8>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a39      	ldr	r2, [pc, #228]	@ (8003ccc <DMA_CalcBaseAndBitshift+0x130>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d02c      	beq.n	8003c44 <DMA_CalcBaseAndBitshift+0xa8>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a38      	ldr	r2, [pc, #224]	@ (8003cd0 <DMA_CalcBaseAndBitshift+0x134>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d027      	beq.n	8003c44 <DMA_CalcBaseAndBitshift+0xa8>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a36      	ldr	r2, [pc, #216]	@ (8003cd4 <DMA_CalcBaseAndBitshift+0x138>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d022      	beq.n	8003c44 <DMA_CalcBaseAndBitshift+0xa8>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a35      	ldr	r2, [pc, #212]	@ (8003cd8 <DMA_CalcBaseAndBitshift+0x13c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d01d      	beq.n	8003c44 <DMA_CalcBaseAndBitshift+0xa8>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a33      	ldr	r2, [pc, #204]	@ (8003cdc <DMA_CalcBaseAndBitshift+0x140>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d018      	beq.n	8003c44 <DMA_CalcBaseAndBitshift+0xa8>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a32      	ldr	r2, [pc, #200]	@ (8003ce0 <DMA_CalcBaseAndBitshift+0x144>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d013      	beq.n	8003c44 <DMA_CalcBaseAndBitshift+0xa8>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a30      	ldr	r2, [pc, #192]	@ (8003ce4 <DMA_CalcBaseAndBitshift+0x148>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00e      	beq.n	8003c44 <DMA_CalcBaseAndBitshift+0xa8>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ce8 <DMA_CalcBaseAndBitshift+0x14c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d009      	beq.n	8003c44 <DMA_CalcBaseAndBitshift+0xa8>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a2d      	ldr	r2, [pc, #180]	@ (8003cec <DMA_CalcBaseAndBitshift+0x150>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d004      	beq.n	8003c44 <DMA_CalcBaseAndBitshift+0xa8>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a2c      	ldr	r2, [pc, #176]	@ (8003cf0 <DMA_CalcBaseAndBitshift+0x154>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d101      	bne.n	8003c48 <DMA_CalcBaseAndBitshift+0xac>
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <DMA_CalcBaseAndBitshift+0xae>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d024      	beq.n	8003c98 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	3b10      	subs	r3, #16
 8003c56:	4a27      	ldr	r2, [pc, #156]	@ (8003cf4 <DMA_CalcBaseAndBitshift+0x158>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	091b      	lsrs	r3, r3, #4
 8003c5e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	4a24      	ldr	r2, [pc, #144]	@ (8003cf8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003c68:	5cd3      	ldrb	r3, [r2, r3]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d908      	bls.n	8003c88 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003cfc <DMA_CalcBaseAndBitshift+0x160>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	1d1a      	adds	r2, r3, #4
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c86:	e00d      	b.n	8003ca4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cfc <DMA_CalcBaseAndBitshift+0x160>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c96:	e005      	b.n	8003ca4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	40020010 	.word	0x40020010
 8003cb8:	40020028 	.word	0x40020028
 8003cbc:	40020040 	.word	0x40020040
 8003cc0:	40020058 	.word	0x40020058
 8003cc4:	40020070 	.word	0x40020070
 8003cc8:	40020088 	.word	0x40020088
 8003ccc:	400200a0 	.word	0x400200a0
 8003cd0:	400200b8 	.word	0x400200b8
 8003cd4:	40020410 	.word	0x40020410
 8003cd8:	40020428 	.word	0x40020428
 8003cdc:	40020440 	.word	0x40020440
 8003ce0:	40020458 	.word	0x40020458
 8003ce4:	40020470 	.word	0x40020470
 8003ce8:	40020488 	.word	0x40020488
 8003cec:	400204a0 	.word	0x400204a0
 8003cf0:	400204b8 	.word	0x400204b8
 8003cf4:	aaaaaaab 	.word	0xaaaaaaab
 8003cf8:	080095d4 	.word	0x080095d4
 8003cfc:	fffffc00 	.word	0xfffffc00

08003d00 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d120      	bne.n	8003d56 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d858      	bhi.n	8003dce <DMA_CheckFifoParam+0xce>
 8003d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d24 <DMA_CheckFifoParam+0x24>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003d35 	.word	0x08003d35
 8003d28:	08003d47 	.word	0x08003d47
 8003d2c:	08003d35 	.word	0x08003d35
 8003d30:	08003dcf 	.word	0x08003dcf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d048      	beq.n	8003dd2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d44:	e045      	b.n	8003dd2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d4e:	d142      	bne.n	8003dd6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d54:	e03f      	b.n	8003dd6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d5e:	d123      	bne.n	8003da8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d838      	bhi.n	8003dda <DMA_CheckFifoParam+0xda>
 8003d68:	a201      	add	r2, pc, #4	@ (adr r2, 8003d70 <DMA_CheckFifoParam+0x70>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003d81 	.word	0x08003d81
 8003d74:	08003d87 	.word	0x08003d87
 8003d78:	08003d81 	.word	0x08003d81
 8003d7c:	08003d99 	.word	0x08003d99
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
        break;
 8003d84:	e030      	b.n	8003de8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d025      	beq.n	8003dde <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d96:	e022      	b.n	8003dde <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003da0:	d11f      	bne.n	8003de2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003da6:	e01c      	b.n	8003de2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d902      	bls.n	8003db6 <DMA_CheckFifoParam+0xb6>
 8003db0:	2b03      	cmp	r3, #3
 8003db2:	d003      	beq.n	8003dbc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003db4:	e018      	b.n	8003de8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	73fb      	strb	r3, [r7, #15]
        break;
 8003dba:	e015      	b.n	8003de8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00e      	beq.n	8003de6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
    break;
 8003dcc:	e00b      	b.n	8003de6 <DMA_CheckFifoParam+0xe6>
        break;
 8003dce:	bf00      	nop
 8003dd0:	e00a      	b.n	8003de8 <DMA_CheckFifoParam+0xe8>
        break;
 8003dd2:	bf00      	nop
 8003dd4:	e008      	b.n	8003de8 <DMA_CheckFifoParam+0xe8>
        break;
 8003dd6:	bf00      	nop
 8003dd8:	e006      	b.n	8003de8 <DMA_CheckFifoParam+0xe8>
        break;
 8003dda:	bf00      	nop
 8003ddc:	e004      	b.n	8003de8 <DMA_CheckFifoParam+0xe8>
        break;
 8003dde:	bf00      	nop
 8003de0:	e002      	b.n	8003de8 <DMA_CheckFifoParam+0xe8>
        break;
 8003de2:	bf00      	nop
 8003de4:	e000      	b.n	8003de8 <DMA_CheckFifoParam+0xe8>
    break;
 8003de6:	bf00      	nop
    }
  }

  return status;
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop

08003df8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a38      	ldr	r2, [pc, #224]	@ (8003eec <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d022      	beq.n	8003e56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a36      	ldr	r2, [pc, #216]	@ (8003ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d01d      	beq.n	8003e56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a35      	ldr	r2, [pc, #212]	@ (8003ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d018      	beq.n	8003e56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a33      	ldr	r2, [pc, #204]	@ (8003ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d013      	beq.n	8003e56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a32      	ldr	r2, [pc, #200]	@ (8003efc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00e      	beq.n	8003e56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a30      	ldr	r2, [pc, #192]	@ (8003f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d009      	beq.n	8003e56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a2f      	ldr	r2, [pc, #188]	@ (8003f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d004      	beq.n	8003e56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a2d      	ldr	r2, [pc, #180]	@ (8003f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d101      	bne.n	8003e5a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01a      	beq.n	8003e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	3b08      	subs	r3, #8
 8003e68:	4a28      	ldr	r2, [pc, #160]	@ (8003f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	091b      	lsrs	r3, r3, #4
 8003e70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4b26      	ldr	r3, [pc, #152]	@ (8003f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a24      	ldr	r2, [pc, #144]	@ (8003f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003e84:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003e94:	e024      	b.n	8003ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	3b10      	subs	r3, #16
 8003e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8003f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8003f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d806      	bhi.n	8003ebe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d902      	bls.n	8003ebe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	3308      	adds	r3, #8
 8003ebc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4b18      	ldr	r3, [pc, #96]	@ (8003f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a16      	ldr	r2, [pc, #88]	@ (8003f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003ed0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	2201      	movs	r2, #1
 8003eda:	409a      	lsls	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	58025408 	.word	0x58025408
 8003ef0:	5802541c 	.word	0x5802541c
 8003ef4:	58025430 	.word	0x58025430
 8003ef8:	58025444 	.word	0x58025444
 8003efc:	58025458 	.word	0x58025458
 8003f00:	5802546c 	.word	0x5802546c
 8003f04:	58025480 	.word	0x58025480
 8003f08:	58025494 	.word	0x58025494
 8003f0c:	cccccccd 	.word	0xcccccccd
 8003f10:	16009600 	.word	0x16009600
 8003f14:	58025880 	.word	0x58025880
 8003f18:	aaaaaaab 	.word	0xaaaaaaab
 8003f1c:	400204b8 	.word	0x400204b8
 8003f20:	4002040f 	.word	0x4002040f
 8003f24:	10008200 	.word	0x10008200
 8003f28:	40020880 	.word	0x40020880

08003f2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d04a      	beq.n	8003fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d847      	bhi.n	8003fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a25      	ldr	r2, [pc, #148]	@ (8003fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d022      	beq.n	8003f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a24      	ldr	r2, [pc, #144]	@ (8003fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d01d      	beq.n	8003f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a22      	ldr	r2, [pc, #136]	@ (8003fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d018      	beq.n	8003f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a21      	ldr	r2, [pc, #132]	@ (8003ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d013      	beq.n	8003f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1f      	ldr	r2, [pc, #124]	@ (8003ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00e      	beq.n	8003f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d009      	beq.n	8003f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a1c      	ldr	r2, [pc, #112]	@ (8003ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d004      	beq.n	8003f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a1b      	ldr	r2, [pc, #108]	@ (8004000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d101      	bne.n	8003f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	4b17      	ldr	r3, [pc, #92]	@ (8004004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	461a      	mov	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a15      	ldr	r2, [pc, #84]	@ (8004008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003fb4:	671a      	str	r2, [r3, #112]	@ 0x70
 8003fb6:	e009      	b.n	8003fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4b14      	ldr	r3, [pc, #80]	@ (800400c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a11      	ldr	r2, [pc, #68]	@ (8004010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003fca:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	58025408 	.word	0x58025408
 8003fe8:	5802541c 	.word	0x5802541c
 8003fec:	58025430 	.word	0x58025430
 8003ff0:	58025444 	.word	0x58025444
 8003ff4:	58025458 	.word	0x58025458
 8003ff8:	5802546c 	.word	0x5802546c
 8003ffc:	58025480 	.word	0x58025480
 8004000:	58025494 	.word	0x58025494
 8004004:	1600963f 	.word	0x1600963f
 8004008:	58025940 	.word	0x58025940
 800400c:	1000823f 	.word	0x1000823f
 8004010:	40020940 	.word	0x40020940

08004014 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004014:	b480      	push	{r7}
 8004016:	b089      	sub	sp, #36	@ 0x24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800401e:	2300      	movs	r3, #0
 8004020:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004022:	4b89      	ldr	r3, [pc, #548]	@ (8004248 <HAL_GPIO_Init+0x234>)
 8004024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004026:	e194      	b.n	8004352 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	2101      	movs	r1, #1
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	fa01 f303 	lsl.w	r3, r1, r3
 8004034:	4013      	ands	r3, r2
 8004036:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 8186 	beq.w	800434c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	2b01      	cmp	r3, #1
 800404a:	d005      	beq.n	8004058 <HAL_GPIO_Init+0x44>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 0303 	and.w	r3, r3, #3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d130      	bne.n	80040ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	2203      	movs	r2, #3
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	43db      	mvns	r3, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800408e:	2201      	movs	r2, #1
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43db      	mvns	r3, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4013      	ands	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	091b      	lsrs	r3, r3, #4
 80040a4:	f003 0201 	and.w	r2, r3, #1
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d017      	beq.n	80040f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	2203      	movs	r2, #3
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	43db      	mvns	r3, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4013      	ands	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d123      	bne.n	800414a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	08da      	lsrs	r2, r3, #3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3208      	adds	r2, #8
 800410a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800410e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	220f      	movs	r2, #15
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	43db      	mvns	r3, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4013      	ands	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	691a      	ldr	r2, [r3, #16]
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	4313      	orrs	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	08da      	lsrs	r2, r3, #3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3208      	adds	r2, #8
 8004144:	69b9      	ldr	r1, [r7, #24]
 8004146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	2203      	movs	r2, #3
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	43db      	mvns	r3, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4013      	ands	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f003 0203 	and.w	r2, r3, #3
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	4313      	orrs	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 80e0 	beq.w	800434c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800418c:	4b2f      	ldr	r3, [pc, #188]	@ (800424c <HAL_GPIO_Init+0x238>)
 800418e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004192:	4a2e      	ldr	r2, [pc, #184]	@ (800424c <HAL_GPIO_Init+0x238>)
 8004194:	f043 0302 	orr.w	r3, r3, #2
 8004198:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800419c:	4b2b      	ldr	r3, [pc, #172]	@ (800424c <HAL_GPIO_Init+0x238>)
 800419e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041aa:	4a29      	ldr	r2, [pc, #164]	@ (8004250 <HAL_GPIO_Init+0x23c>)
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	089b      	lsrs	r3, r3, #2
 80041b0:	3302      	adds	r3, #2
 80041b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	220f      	movs	r2, #15
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43db      	mvns	r3, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4013      	ands	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a20      	ldr	r2, [pc, #128]	@ (8004254 <HAL_GPIO_Init+0x240>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d052      	beq.n	800427c <HAL_GPIO_Init+0x268>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004258 <HAL_GPIO_Init+0x244>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d031      	beq.n	8004242 <HAL_GPIO_Init+0x22e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a1e      	ldr	r2, [pc, #120]	@ (800425c <HAL_GPIO_Init+0x248>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d02b      	beq.n	800423e <HAL_GPIO_Init+0x22a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004260 <HAL_GPIO_Init+0x24c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d025      	beq.n	800423a <HAL_GPIO_Init+0x226>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004264 <HAL_GPIO_Init+0x250>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d01f      	beq.n	8004236 <HAL_GPIO_Init+0x222>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004268 <HAL_GPIO_Init+0x254>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d019      	beq.n	8004232 <HAL_GPIO_Init+0x21e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a1a      	ldr	r2, [pc, #104]	@ (800426c <HAL_GPIO_Init+0x258>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d013      	beq.n	800422e <HAL_GPIO_Init+0x21a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a19      	ldr	r2, [pc, #100]	@ (8004270 <HAL_GPIO_Init+0x25c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00d      	beq.n	800422a <HAL_GPIO_Init+0x216>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a18      	ldr	r2, [pc, #96]	@ (8004274 <HAL_GPIO_Init+0x260>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d007      	beq.n	8004226 <HAL_GPIO_Init+0x212>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a17      	ldr	r2, [pc, #92]	@ (8004278 <HAL_GPIO_Init+0x264>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d101      	bne.n	8004222 <HAL_GPIO_Init+0x20e>
 800421e:	2309      	movs	r3, #9
 8004220:	e02d      	b.n	800427e <HAL_GPIO_Init+0x26a>
 8004222:	230a      	movs	r3, #10
 8004224:	e02b      	b.n	800427e <HAL_GPIO_Init+0x26a>
 8004226:	2308      	movs	r3, #8
 8004228:	e029      	b.n	800427e <HAL_GPIO_Init+0x26a>
 800422a:	2307      	movs	r3, #7
 800422c:	e027      	b.n	800427e <HAL_GPIO_Init+0x26a>
 800422e:	2306      	movs	r3, #6
 8004230:	e025      	b.n	800427e <HAL_GPIO_Init+0x26a>
 8004232:	2305      	movs	r3, #5
 8004234:	e023      	b.n	800427e <HAL_GPIO_Init+0x26a>
 8004236:	2304      	movs	r3, #4
 8004238:	e021      	b.n	800427e <HAL_GPIO_Init+0x26a>
 800423a:	2303      	movs	r3, #3
 800423c:	e01f      	b.n	800427e <HAL_GPIO_Init+0x26a>
 800423e:	2302      	movs	r3, #2
 8004240:	e01d      	b.n	800427e <HAL_GPIO_Init+0x26a>
 8004242:	2301      	movs	r3, #1
 8004244:	e01b      	b.n	800427e <HAL_GPIO_Init+0x26a>
 8004246:	bf00      	nop
 8004248:	58000080 	.word	0x58000080
 800424c:	58024400 	.word	0x58024400
 8004250:	58000400 	.word	0x58000400
 8004254:	58020000 	.word	0x58020000
 8004258:	58020400 	.word	0x58020400
 800425c:	58020800 	.word	0x58020800
 8004260:	58020c00 	.word	0x58020c00
 8004264:	58021000 	.word	0x58021000
 8004268:	58021400 	.word	0x58021400
 800426c:	58021800 	.word	0x58021800
 8004270:	58021c00 	.word	0x58021c00
 8004274:	58022000 	.word	0x58022000
 8004278:	58022400 	.word	0x58022400
 800427c:	2300      	movs	r3, #0
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	f002 0203 	and.w	r2, r2, #3
 8004284:	0092      	lsls	r2, r2, #2
 8004286:	4093      	lsls	r3, r2
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4313      	orrs	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800428e:	4938      	ldr	r1, [pc, #224]	@ (8004370 <HAL_GPIO_Init+0x35c>)
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	089b      	lsrs	r3, r3, #2
 8004294:	3302      	adds	r3, #2
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800429c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	43db      	mvns	r3, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4013      	ands	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80042c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80042ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	43db      	mvns	r3, r3
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4013      	ands	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80042f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	43db      	mvns	r3, r3
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	4013      	ands	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	43db      	mvns	r3, r3
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4013      	ands	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	3301      	adds	r3, #1
 8004350:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	f47f ae63 	bne.w	8004028 <HAL_GPIO_Init+0x14>
  }
}
 8004362:	bf00      	nop
 8004364:	bf00      	nop
 8004366:	3724      	adds	r7, #36	@ 0x24
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	58000400 	.word	0x58000400

08004374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	807b      	strh	r3, [r7, #2]
 8004380:	4613      	mov	r3, r2
 8004382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004384:	787b      	ldrb	r3, [r7, #1]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800438a:	887a      	ldrh	r2, [r7, #2]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004390:	e003      	b.n	800439a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004392:	887b      	ldrh	r3, [r7, #2]
 8004394:	041a      	lsls	r2, r3, #16
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	619a      	str	r2, [r3, #24]
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80043b0:	4b19      	ldr	r3, [pc, #100]	@ (8004418 <HAL_PWREx_ConfigSupply+0x70>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d00a      	beq.n	80043d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80043bc:	4b16      	ldr	r3, [pc, #88]	@ (8004418 <HAL_PWREx_ConfigSupply+0x70>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d001      	beq.n	80043ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e01f      	b.n	800440e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e01d      	b.n	800440e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80043d2:	4b11      	ldr	r3, [pc, #68]	@ (8004418 <HAL_PWREx_ConfigSupply+0x70>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f023 0207 	bic.w	r2, r3, #7
 80043da:	490f      	ldr	r1, [pc, #60]	@ (8004418 <HAL_PWREx_ConfigSupply+0x70>)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80043e2:	f7fd fc03 	bl	8001bec <HAL_GetTick>
 80043e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043e8:	e009      	b.n	80043fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043ea:	f7fd fbff 	bl	8001bec <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043f8:	d901      	bls.n	80043fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e007      	b.n	800440e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043fe:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <HAL_PWREx_ConfigSupply+0x70>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004406:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800440a:	d1ee      	bne.n	80043ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	58024800 	.word	0x58024800

0800441c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08c      	sub	sp, #48	@ 0x30
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d102      	bne.n	8004430 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	f000 bc48 	b.w	8004cc0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8088 	beq.w	800454e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800443e:	4b99      	ldr	r3, [pc, #612]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004446:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004448:	4b96      	ldr	r3, [pc, #600]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 800444a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800444e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004450:	2b10      	cmp	r3, #16
 8004452:	d007      	beq.n	8004464 <HAL_RCC_OscConfig+0x48>
 8004454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004456:	2b18      	cmp	r3, #24
 8004458:	d111      	bne.n	800447e <HAL_RCC_OscConfig+0x62>
 800445a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445c:	f003 0303 	and.w	r3, r3, #3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d10c      	bne.n	800447e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004464:	4b8f      	ldr	r3, [pc, #572]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d06d      	beq.n	800454c <HAL_RCC_OscConfig+0x130>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d169      	bne.n	800454c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	f000 bc21 	b.w	8004cc0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004486:	d106      	bne.n	8004496 <HAL_RCC_OscConfig+0x7a>
 8004488:	4b86      	ldr	r3, [pc, #536]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a85      	ldr	r2, [pc, #532]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 800448e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	e02e      	b.n	80044f4 <HAL_RCC_OscConfig+0xd8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10c      	bne.n	80044b8 <HAL_RCC_OscConfig+0x9c>
 800449e:	4b81      	ldr	r3, [pc, #516]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a80      	ldr	r2, [pc, #512]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 80044a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	4b7e      	ldr	r3, [pc, #504]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a7d      	ldr	r2, [pc, #500]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 80044b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	e01d      	b.n	80044f4 <HAL_RCC_OscConfig+0xd8>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044c0:	d10c      	bne.n	80044dc <HAL_RCC_OscConfig+0xc0>
 80044c2:	4b78      	ldr	r3, [pc, #480]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a77      	ldr	r2, [pc, #476]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 80044c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	4b75      	ldr	r3, [pc, #468]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a74      	ldr	r2, [pc, #464]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 80044d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	e00b      	b.n	80044f4 <HAL_RCC_OscConfig+0xd8>
 80044dc:	4b71      	ldr	r3, [pc, #452]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a70      	ldr	r2, [pc, #448]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 80044e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	4b6e      	ldr	r3, [pc, #440]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a6d      	ldr	r2, [pc, #436]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 80044ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d013      	beq.n	8004524 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fd fb76 	bl	8001bec <HAL_GetTick>
 8004500:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004504:	f7fd fb72 	bl	8001bec <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b64      	cmp	r3, #100	@ 0x64
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e3d4      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004516:	4b63      	ldr	r3, [pc, #396]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0f0      	beq.n	8004504 <HAL_RCC_OscConfig+0xe8>
 8004522:	e014      	b.n	800454e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004524:	f7fd fb62 	bl	8001bec <HAL_GetTick>
 8004528:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800452c:	f7fd fb5e 	bl	8001bec <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b64      	cmp	r3, #100	@ 0x64
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e3c0      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800453e:	4b59      	ldr	r3, [pc, #356]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x110>
 800454a:	e000      	b.n	800454e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800454c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 80ca 	beq.w	80046f0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800455c:	4b51      	ldr	r3, [pc, #324]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004564:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004566:	4b4f      	ldr	r3, [pc, #316]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 8004568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d007      	beq.n	8004582 <HAL_RCC_OscConfig+0x166>
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	2b18      	cmp	r3, #24
 8004576:	d156      	bne.n	8004626 <HAL_RCC_OscConfig+0x20a>
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d151      	bne.n	8004626 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004582:	4b48      	ldr	r3, [pc, #288]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b00      	cmp	r3, #0
 800458c:	d005      	beq.n	800459a <HAL_RCC_OscConfig+0x17e>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e392      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800459a:	4b42      	ldr	r3, [pc, #264]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f023 0219 	bic.w	r2, r3, #25
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	493f      	ldr	r1, [pc, #252]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fd fb1e 	bl	8001bec <HAL_GetTick>
 80045b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b4:	f7fd fb1a 	bl	8001bec <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e37c      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045c6:	4b37      	ldr	r3, [pc, #220]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0f0      	beq.n	80045b4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d2:	f7fd fb17 	bl	8001c04 <HAL_GetREVID>
 80045d6:	4603      	mov	r3, r0
 80045d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80045dc:	4293      	cmp	r3, r2
 80045de:	d817      	bhi.n	8004610 <HAL_RCC_OscConfig+0x1f4>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	2b40      	cmp	r3, #64	@ 0x40
 80045e6:	d108      	bne.n	80045fa <HAL_RCC_OscConfig+0x1de>
 80045e8:	4b2e      	ldr	r3, [pc, #184]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80045f0:	4a2c      	ldr	r2, [pc, #176]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 80045f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045f6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045f8:	e07a      	b.n	80046f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fa:	4b2a      	ldr	r3, [pc, #168]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	031b      	lsls	r3, r3, #12
 8004608:	4926      	ldr	r1, [pc, #152]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 800460a:	4313      	orrs	r3, r2
 800460c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800460e:	e06f      	b.n	80046f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004610:	4b24      	ldr	r3, [pc, #144]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	061b      	lsls	r3, r3, #24
 800461e:	4921      	ldr	r1, [pc, #132]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 8004620:	4313      	orrs	r3, r2
 8004622:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004624:	e064      	b.n	80046f0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d047      	beq.n	80046be <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800462e:	4b1d      	ldr	r3, [pc, #116]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f023 0219 	bic.w	r2, r3, #25
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	491a      	ldr	r1, [pc, #104]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 800463c:	4313      	orrs	r3, r2
 800463e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004640:	f7fd fad4 	bl	8001bec <HAL_GetTick>
 8004644:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004648:	f7fd fad0 	bl	8001bec <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e332      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800465a:	4b12      	ldr	r3, [pc, #72]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0f0      	beq.n	8004648 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004666:	f7fd facd 	bl	8001c04 <HAL_GetREVID>
 800466a:	4603      	mov	r3, r0
 800466c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004670:	4293      	cmp	r3, r2
 8004672:	d819      	bhi.n	80046a8 <HAL_RCC_OscConfig+0x28c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	2b40      	cmp	r3, #64	@ 0x40
 800467a:	d108      	bne.n	800468e <HAL_RCC_OscConfig+0x272>
 800467c:	4b09      	ldr	r3, [pc, #36]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004684:	4a07      	ldr	r2, [pc, #28]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 8004686:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800468a:	6053      	str	r3, [r2, #4]
 800468c:	e030      	b.n	80046f0 <HAL_RCC_OscConfig+0x2d4>
 800468e:	4b05      	ldr	r3, [pc, #20]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	031b      	lsls	r3, r3, #12
 800469c:	4901      	ldr	r1, [pc, #4]	@ (80046a4 <HAL_RCC_OscConfig+0x288>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	604b      	str	r3, [r1, #4]
 80046a2:	e025      	b.n	80046f0 <HAL_RCC_OscConfig+0x2d4>
 80046a4:	58024400 	.word	0x58024400
 80046a8:	4b9a      	ldr	r3, [pc, #616]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	061b      	lsls	r3, r3, #24
 80046b6:	4997      	ldr	r1, [pc, #604]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	604b      	str	r3, [r1, #4]
 80046bc:	e018      	b.n	80046f0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046be:	4b95      	ldr	r3, [pc, #596]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a94      	ldr	r2, [pc, #592]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 80046c4:	f023 0301 	bic.w	r3, r3, #1
 80046c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fd fa8f 	bl	8001bec <HAL_GetTick>
 80046ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d2:	f7fd fa8b 	bl	8001bec <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e2ed      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046e4:	4b8b      	ldr	r3, [pc, #556]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f0      	bne.n	80046d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80a9 	beq.w	8004850 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046fe:	4b85      	ldr	r3, [pc, #532]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004706:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004708:	4b82      	ldr	r3, [pc, #520]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 800470a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	2b08      	cmp	r3, #8
 8004712:	d007      	beq.n	8004724 <HAL_RCC_OscConfig+0x308>
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	2b18      	cmp	r3, #24
 8004718:	d13a      	bne.n	8004790 <HAL_RCC_OscConfig+0x374>
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f003 0303 	and.w	r3, r3, #3
 8004720:	2b01      	cmp	r3, #1
 8004722:	d135      	bne.n	8004790 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004724:	4b7b      	ldr	r3, [pc, #492]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_RCC_OscConfig+0x320>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	2b80      	cmp	r3, #128	@ 0x80
 8004736:	d001      	beq.n	800473c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e2c1      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800473c:	f7fd fa62 	bl	8001c04 <HAL_GetREVID>
 8004740:	4603      	mov	r3, r0
 8004742:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004746:	4293      	cmp	r3, r2
 8004748:	d817      	bhi.n	800477a <HAL_RCC_OscConfig+0x35e>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	2b20      	cmp	r3, #32
 8004750:	d108      	bne.n	8004764 <HAL_RCC_OscConfig+0x348>
 8004752:	4b70      	ldr	r3, [pc, #448]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800475a:	4a6e      	ldr	r2, [pc, #440]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 800475c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004760:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004762:	e075      	b.n	8004850 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004764:	4b6b      	ldr	r3, [pc, #428]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	069b      	lsls	r3, r3, #26
 8004772:	4968      	ldr	r1, [pc, #416]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 8004774:	4313      	orrs	r3, r2
 8004776:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004778:	e06a      	b.n	8004850 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800477a:	4b66      	ldr	r3, [pc, #408]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	061b      	lsls	r3, r3, #24
 8004788:	4962      	ldr	r1, [pc, #392]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 800478a:	4313      	orrs	r3, r2
 800478c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800478e:	e05f      	b.n	8004850 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d042      	beq.n	800481e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004798:	4b5e      	ldr	r3, [pc, #376]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a5d      	ldr	r2, [pc, #372]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 800479e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a4:	f7fd fa22 	bl	8001bec <HAL_GetTick>
 80047a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80047ac:	f7fd fa1e 	bl	8001bec <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e280      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047be:	4b55      	ldr	r3, [pc, #340]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047ca:	f7fd fa1b 	bl	8001c04 <HAL_GetREVID>
 80047ce:	4603      	mov	r3, r0
 80047d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d817      	bhi.n	8004808 <HAL_RCC_OscConfig+0x3ec>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d108      	bne.n	80047f2 <HAL_RCC_OscConfig+0x3d6>
 80047e0:	4b4c      	ldr	r3, [pc, #304]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80047e8:	4a4a      	ldr	r2, [pc, #296]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 80047ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80047ee:	6053      	str	r3, [r2, #4]
 80047f0:	e02e      	b.n	8004850 <HAL_RCC_OscConfig+0x434>
 80047f2:	4b48      	ldr	r3, [pc, #288]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	069b      	lsls	r3, r3, #26
 8004800:	4944      	ldr	r1, [pc, #272]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 8004802:	4313      	orrs	r3, r2
 8004804:	604b      	str	r3, [r1, #4]
 8004806:	e023      	b.n	8004850 <HAL_RCC_OscConfig+0x434>
 8004808:	4b42      	ldr	r3, [pc, #264]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	061b      	lsls	r3, r3, #24
 8004816:	493f      	ldr	r1, [pc, #252]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 8004818:	4313      	orrs	r3, r2
 800481a:	60cb      	str	r3, [r1, #12]
 800481c:	e018      	b.n	8004850 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800481e:	4b3d      	ldr	r3, [pc, #244]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a3c      	ldr	r2, [pc, #240]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 8004824:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482a:	f7fd f9df 	bl	8001bec <HAL_GetTick>
 800482e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004832:	f7fd f9db 	bl	8001bec <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e23d      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004844:	4b33      	ldr	r3, [pc, #204]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1f0      	bne.n	8004832 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b00      	cmp	r3, #0
 800485a:	d036      	beq.n	80048ca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d019      	beq.n	8004898 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004864:	4b2b      	ldr	r3, [pc, #172]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 8004866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004868:	4a2a      	ldr	r2, [pc, #168]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 800486a:	f043 0301 	orr.w	r3, r3, #1
 800486e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004870:	f7fd f9bc 	bl	8001bec <HAL_GetTick>
 8004874:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004878:	f7fd f9b8 	bl	8001bec <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e21a      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800488a:	4b22      	ldr	r3, [pc, #136]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 800488c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0x45c>
 8004896:	e018      	b.n	80048ca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004898:	4b1e      	ldr	r3, [pc, #120]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 800489a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800489c:	4a1d      	ldr	r2, [pc, #116]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 800489e:	f023 0301 	bic.w	r3, r3, #1
 80048a2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a4:	f7fd f9a2 	bl	8001bec <HAL_GetTick>
 80048a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ac:	f7fd f99e 	bl	8001bec <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e200      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048be:	4b15      	ldr	r3, [pc, #84]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 80048c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0320 	and.w	r3, r3, #32
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d039      	beq.n	800494a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d01c      	beq.n	8004918 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048de:	4b0d      	ldr	r3, [pc, #52]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 80048e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80048e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048ea:	f7fd f97f 	bl	8001bec <HAL_GetTick>
 80048ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048f2:	f7fd f97b 	bl	8001bec <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e1dd      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004904:	4b03      	ldr	r3, [pc, #12]	@ (8004914 <HAL_RCC_OscConfig+0x4f8>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0f0      	beq.n	80048f2 <HAL_RCC_OscConfig+0x4d6>
 8004910:	e01b      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
 8004912:	bf00      	nop
 8004914:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004918:	4b9b      	ldr	r3, [pc, #620]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a9a      	ldr	r2, [pc, #616]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 800491e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004922:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004924:	f7fd f962 	bl	8001bec <HAL_GetTick>
 8004928:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800492c:	f7fd f95e 	bl	8001bec <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e1c0      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800493e:	4b92      	ldr	r3, [pc, #584]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1f0      	bne.n	800492c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 8081 	beq.w	8004a5a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004958:	4b8c      	ldr	r3, [pc, #560]	@ (8004b8c <HAL_RCC_OscConfig+0x770>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a8b      	ldr	r2, [pc, #556]	@ (8004b8c <HAL_RCC_OscConfig+0x770>)
 800495e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004962:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004964:	f7fd f942 	bl	8001bec <HAL_GetTick>
 8004968:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496c:	f7fd f93e 	bl	8001bec <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b64      	cmp	r3, #100	@ 0x64
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e1a0      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800497e:	4b83      	ldr	r3, [pc, #524]	@ (8004b8c <HAL_RCC_OscConfig+0x770>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0f0      	beq.n	800496c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d106      	bne.n	80049a0 <HAL_RCC_OscConfig+0x584>
 8004992:	4b7d      	ldr	r3, [pc, #500]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004996:	4a7c      	ldr	r2, [pc, #496]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	6713      	str	r3, [r2, #112]	@ 0x70
 800499e:	e02d      	b.n	80049fc <HAL_RCC_OscConfig+0x5e0>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10c      	bne.n	80049c2 <HAL_RCC_OscConfig+0x5a6>
 80049a8:	4b77      	ldr	r3, [pc, #476]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 80049aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ac:	4a76      	ldr	r2, [pc, #472]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049b4:	4b74      	ldr	r3, [pc, #464]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 80049b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b8:	4a73      	ldr	r2, [pc, #460]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 80049ba:	f023 0304 	bic.w	r3, r3, #4
 80049be:	6713      	str	r3, [r2, #112]	@ 0x70
 80049c0:	e01c      	b.n	80049fc <HAL_RCC_OscConfig+0x5e0>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b05      	cmp	r3, #5
 80049c8:	d10c      	bne.n	80049e4 <HAL_RCC_OscConfig+0x5c8>
 80049ca:	4b6f      	ldr	r3, [pc, #444]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 80049cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ce:	4a6e      	ldr	r2, [pc, #440]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 80049d0:	f043 0304 	orr.w	r3, r3, #4
 80049d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80049d6:	4b6c      	ldr	r3, [pc, #432]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049da:	4a6b      	ldr	r2, [pc, #428]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80049e2:	e00b      	b.n	80049fc <HAL_RCC_OscConfig+0x5e0>
 80049e4:	4b68      	ldr	r3, [pc, #416]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 80049e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e8:	4a67      	ldr	r2, [pc, #412]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 80049ea:	f023 0301 	bic.w	r3, r3, #1
 80049ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80049f0:	4b65      	ldr	r3, [pc, #404]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 80049f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f4:	4a64      	ldr	r2, [pc, #400]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 80049f6:	f023 0304 	bic.w	r3, r3, #4
 80049fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d015      	beq.n	8004a30 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a04:	f7fd f8f2 	bl	8001bec <HAL_GetTick>
 8004a08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a0a:	e00a      	b.n	8004a22 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0c:	f7fd f8ee 	bl	8001bec <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e14e      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a22:	4b59      	ldr	r3, [pc, #356]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0ee      	beq.n	8004a0c <HAL_RCC_OscConfig+0x5f0>
 8004a2e:	e014      	b.n	8004a5a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a30:	f7fd f8dc 	bl	8001bec <HAL_GetTick>
 8004a34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a36:	e00a      	b.n	8004a4e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a38:	f7fd f8d8 	bl	8001bec <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e138      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a4e:	4b4e      	ldr	r3, [pc, #312]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1ee      	bne.n	8004a38 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 812d 	beq.w	8004cbe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a64:	4b48      	ldr	r3, [pc, #288]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a6c:	2b18      	cmp	r3, #24
 8004a6e:	f000 80bd 	beq.w	8004bec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	f040 809e 	bne.w	8004bb8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7c:	4b42      	ldr	r3, [pc, #264]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a41      	ldr	r2, [pc, #260]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004a82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a88:	f7fd f8b0 	bl	8001bec <HAL_GetTick>
 8004a8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a90:	f7fd f8ac 	bl	8001bec <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e10e      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004aa2:	4b39      	ldr	r3, [pc, #228]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f0      	bne.n	8004a90 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aae:	4b36      	ldr	r3, [pc, #216]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004ab0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ab2:	4b37      	ldr	r3, [pc, #220]	@ (8004b90 <HAL_RCC_OscConfig+0x774>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004abe:	0112      	lsls	r2, r2, #4
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	4931      	ldr	r1, [pc, #196]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004acc:	3b01      	subs	r3, #1
 8004ace:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	025b      	lsls	r3, r3, #9
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	041b      	lsls	r3, r3, #16
 8004ae6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af0:	3b01      	subs	r3, #1
 8004af2:	061b      	lsls	r3, r3, #24
 8004af4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004af8:	4923      	ldr	r1, [pc, #140]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004afe:	4b22      	ldr	r3, [pc, #136]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b02:	4a21      	ldr	r2, [pc, #132]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b0a:	4b1f      	ldr	r3, [pc, #124]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004b0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b0e:	4b21      	ldr	r3, [pc, #132]	@ (8004b94 <HAL_RCC_OscConfig+0x778>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b16:	00d2      	lsls	r2, r2, #3
 8004b18:	491b      	ldr	r1, [pc, #108]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b22:	f023 020c 	bic.w	r2, r3, #12
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2a:	4917      	ldr	r1, [pc, #92]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b30:	4b15      	ldr	r3, [pc, #84]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b34:	f023 0202 	bic.w	r2, r3, #2
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3c:	4912      	ldr	r1, [pc, #72]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b42:	4b11      	ldr	r3, [pc, #68]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b46:	4a10      	ldr	r2, [pc, #64]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004b48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b52:	4a0d      	ldr	r2, [pc, #52]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004b60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004b66:	4b08      	ldr	r3, [pc, #32]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6a:	4a07      	ldr	r2, [pc, #28]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004b6c:	f043 0301 	orr.w	r3, r3, #1
 8004b70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b72:	4b05      	ldr	r3, [pc, #20]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a04      	ldr	r2, [pc, #16]	@ (8004b88 <HAL_RCC_OscConfig+0x76c>)
 8004b78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7e:	f7fd f835 	bl	8001bec <HAL_GetTick>
 8004b82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b84:	e011      	b.n	8004baa <HAL_RCC_OscConfig+0x78e>
 8004b86:	bf00      	nop
 8004b88:	58024400 	.word	0x58024400
 8004b8c:	58024800 	.word	0x58024800
 8004b90:	fffffc0c 	.word	0xfffffc0c
 8004b94:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b98:	f7fd f828 	bl	8001bec <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e08a      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004baa:	4b47      	ldr	r3, [pc, #284]	@ (8004cc8 <HAL_RCC_OscConfig+0x8ac>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0f0      	beq.n	8004b98 <HAL_RCC_OscConfig+0x77c>
 8004bb6:	e082      	b.n	8004cbe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb8:	4b43      	ldr	r3, [pc, #268]	@ (8004cc8 <HAL_RCC_OscConfig+0x8ac>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a42      	ldr	r2, [pc, #264]	@ (8004cc8 <HAL_RCC_OscConfig+0x8ac>)
 8004bbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc4:	f7fd f812 	bl	8001bec <HAL_GetTick>
 8004bc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bcc:	f7fd f80e 	bl	8001bec <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e070      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bde:	4b3a      	ldr	r3, [pc, #232]	@ (8004cc8 <HAL_RCC_OscConfig+0x8ac>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f0      	bne.n	8004bcc <HAL_RCC_OscConfig+0x7b0>
 8004bea:	e068      	b.n	8004cbe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004bec:	4b36      	ldr	r3, [pc, #216]	@ (8004cc8 <HAL_RCC_OscConfig+0x8ac>)
 8004bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004bf2:	4b35      	ldr	r3, [pc, #212]	@ (8004cc8 <HAL_RCC_OscConfig+0x8ac>)
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d031      	beq.n	8004c64 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f003 0203 	and.w	r2, r3, #3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d12a      	bne.n	8004c64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	091b      	lsrs	r3, r3, #4
 8004c12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d122      	bne.n	8004c64 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c28:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d11a      	bne.n	8004c64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	0a5b      	lsrs	r3, r3, #9
 8004c32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c3a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d111      	bne.n	8004c64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	0c1b      	lsrs	r3, r3, #16
 8004c44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d108      	bne.n	8004c64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	0e1b      	lsrs	r3, r3, #24
 8004c56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d001      	beq.n	8004c68 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e02b      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004c68:	4b17      	ldr	r3, [pc, #92]	@ (8004cc8 <HAL_RCC_OscConfig+0x8ac>)
 8004c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c6c:	08db      	lsrs	r3, r3, #3
 8004c6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c72:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d01f      	beq.n	8004cbe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004c7e:	4b12      	ldr	r3, [pc, #72]	@ (8004cc8 <HAL_RCC_OscConfig+0x8ac>)
 8004c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c82:	4a11      	ldr	r2, [pc, #68]	@ (8004cc8 <HAL_RCC_OscConfig+0x8ac>)
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c8a:	f7fc ffaf 	bl	8001bec <HAL_GetTick>
 8004c8e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004c90:	bf00      	nop
 8004c92:	f7fc ffab 	bl	8001bec <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d0f9      	beq.n	8004c92 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <HAL_RCC_OscConfig+0x8ac>)
 8004ca0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ccc <HAL_RCC_OscConfig+0x8b0>)
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004caa:	00d2      	lsls	r2, r2, #3
 8004cac:	4906      	ldr	r1, [pc, #24]	@ (8004cc8 <HAL_RCC_OscConfig+0x8ac>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004cb2:	4b05      	ldr	r3, [pc, #20]	@ (8004cc8 <HAL_RCC_OscConfig+0x8ac>)
 8004cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb6:	4a04      	ldr	r2, [pc, #16]	@ (8004cc8 <HAL_RCC_OscConfig+0x8ac>)
 8004cb8:	f043 0301 	orr.w	r3, r3, #1
 8004cbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3730      	adds	r7, #48	@ 0x30
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	58024400 	.word	0x58024400
 8004ccc:	ffff0007 	.word	0xffff0007

08004cd0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e19c      	b.n	800501e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce4:	4b8a      	ldr	r3, [pc, #552]	@ (8004f10 <HAL_RCC_ClockConfig+0x240>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 030f 	and.w	r3, r3, #15
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d910      	bls.n	8004d14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf2:	4b87      	ldr	r3, [pc, #540]	@ (8004f10 <HAL_RCC_ClockConfig+0x240>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f023 020f 	bic.w	r2, r3, #15
 8004cfa:	4985      	ldr	r1, [pc, #532]	@ (8004f10 <HAL_RCC_ClockConfig+0x240>)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d02:	4b83      	ldr	r3, [pc, #524]	@ (8004f10 <HAL_RCC_ClockConfig+0x240>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 030f 	and.w	r3, r3, #15
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d001      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e184      	b.n	800501e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d010      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	4b7b      	ldr	r3, [pc, #492]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d908      	bls.n	8004d42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d30:	4b78      	ldr	r3, [pc, #480]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	4975      	ldr	r1, [pc, #468]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d010      	beq.n	8004d70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695a      	ldr	r2, [r3, #20]
 8004d52:	4b70      	ldr	r3, [pc, #448]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d908      	bls.n	8004d70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d5e:	4b6d      	ldr	r3, [pc, #436]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	496a      	ldr	r1, [pc, #424]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d010      	beq.n	8004d9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699a      	ldr	r2, [r3, #24]
 8004d80:	4b64      	ldr	r3, [pc, #400]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d908      	bls.n	8004d9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d8c:	4b61      	ldr	r3, [pc, #388]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	495e      	ldr	r1, [pc, #376]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d010      	beq.n	8004dcc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69da      	ldr	r2, [r3, #28]
 8004dae:	4b59      	ldr	r3, [pc, #356]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d908      	bls.n	8004dcc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004dba:	4b56      	ldr	r3, [pc, #344]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	4953      	ldr	r1, [pc, #332]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d010      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	4b4d      	ldr	r3, [pc, #308]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	f003 030f 	and.w	r3, r3, #15
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d908      	bls.n	8004dfa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004de8:	4b4a      	ldr	r3, [pc, #296]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	f023 020f 	bic.w	r2, r3, #15
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	4947      	ldr	r1, [pc, #284]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d055      	beq.n	8004eb2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004e06:	4b43      	ldr	r3, [pc, #268]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	4940      	ldr	r1, [pc, #256]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d107      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e20:	4b3c      	ldr	r3, [pc, #240]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d121      	bne.n	8004e70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e0f6      	b.n	800501e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b03      	cmp	r3, #3
 8004e36:	d107      	bne.n	8004e48 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e38:	4b36      	ldr	r3, [pc, #216]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d115      	bne.n	8004e70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e0ea      	b.n	800501e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d107      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e50:	4b30      	ldr	r3, [pc, #192]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d109      	bne.n	8004e70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e0de      	b.n	800501e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e60:	4b2c      	ldr	r3, [pc, #176]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e0d6      	b.n	800501e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e70:	4b28      	ldr	r3, [pc, #160]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	f023 0207 	bic.w	r2, r3, #7
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	4925      	ldr	r1, [pc, #148]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e82:	f7fc feb3 	bl	8001bec <HAL_GetTick>
 8004e86:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e88:	e00a      	b.n	8004ea0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e8a:	f7fc feaf 	bl	8001bec <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e0be      	b.n	800501e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d1eb      	bne.n	8004e8a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d010      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	4b14      	ldr	r3, [pc, #80]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d208      	bcs.n	8004ee0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ece:	4b11      	ldr	r3, [pc, #68]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	f023 020f 	bic.w	r2, r3, #15
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	490e      	ldr	r1, [pc, #56]	@ (8004f14 <HAL_RCC_ClockConfig+0x244>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8004f10 <HAL_RCC_ClockConfig+0x240>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d214      	bcs.n	8004f18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eee:	4b08      	ldr	r3, [pc, #32]	@ (8004f10 <HAL_RCC_ClockConfig+0x240>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f023 020f 	bic.w	r2, r3, #15
 8004ef6:	4906      	ldr	r1, [pc, #24]	@ (8004f10 <HAL_RCC_ClockConfig+0x240>)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efe:	4b04      	ldr	r3, [pc, #16]	@ (8004f10 <HAL_RCC_ClockConfig+0x240>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d005      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e086      	b.n	800501e <HAL_RCC_ClockConfig+0x34e>
 8004f10:	52002000 	.word	0x52002000
 8004f14:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d010      	beq.n	8004f46 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	4b3f      	ldr	r3, [pc, #252]	@ (8005028 <HAL_RCC_ClockConfig+0x358>)
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d208      	bcs.n	8004f46 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f34:	4b3c      	ldr	r3, [pc, #240]	@ (8005028 <HAL_RCC_ClockConfig+0x358>)
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	4939      	ldr	r1, [pc, #228]	@ (8005028 <HAL_RCC_ClockConfig+0x358>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0308 	and.w	r3, r3, #8
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d010      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695a      	ldr	r2, [r3, #20]
 8004f56:	4b34      	ldr	r3, [pc, #208]	@ (8005028 <HAL_RCC_ClockConfig+0x358>)
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d208      	bcs.n	8004f74 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f62:	4b31      	ldr	r3, [pc, #196]	@ (8005028 <HAL_RCC_ClockConfig+0x358>)
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	492e      	ldr	r1, [pc, #184]	@ (8005028 <HAL_RCC_ClockConfig+0x358>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d010      	beq.n	8004fa2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699a      	ldr	r2, [r3, #24]
 8004f84:	4b28      	ldr	r3, [pc, #160]	@ (8005028 <HAL_RCC_ClockConfig+0x358>)
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d208      	bcs.n	8004fa2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f90:	4b25      	ldr	r3, [pc, #148]	@ (8005028 <HAL_RCC_ClockConfig+0x358>)
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	4922      	ldr	r1, [pc, #136]	@ (8005028 <HAL_RCC_ClockConfig+0x358>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0320 	and.w	r3, r3, #32
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d010      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	69da      	ldr	r2, [r3, #28]
 8004fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8005028 <HAL_RCC_ClockConfig+0x358>)
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d208      	bcs.n	8004fd0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8005028 <HAL_RCC_ClockConfig+0x358>)
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	4917      	ldr	r1, [pc, #92]	@ (8005028 <HAL_RCC_ClockConfig+0x358>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004fd0:	f000 f834 	bl	800503c <HAL_RCC_GetSysClockFreq>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	4b14      	ldr	r3, [pc, #80]	@ (8005028 <HAL_RCC_ClockConfig+0x358>)
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	0a1b      	lsrs	r3, r3, #8
 8004fdc:	f003 030f 	and.w	r3, r3, #15
 8004fe0:	4912      	ldr	r1, [pc, #72]	@ (800502c <HAL_RCC_ClockConfig+0x35c>)
 8004fe2:	5ccb      	ldrb	r3, [r1, r3]
 8004fe4:	f003 031f 	and.w	r3, r3, #31
 8004fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fee:	4b0e      	ldr	r3, [pc, #56]	@ (8005028 <HAL_RCC_ClockConfig+0x358>)
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	4a0d      	ldr	r2, [pc, #52]	@ (800502c <HAL_RCC_ClockConfig+0x35c>)
 8004ff8:	5cd3      	ldrb	r3, [r2, r3]
 8004ffa:	f003 031f 	and.w	r3, r3, #31
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	fa22 f303 	lsr.w	r3, r2, r3
 8005004:	4a0a      	ldr	r2, [pc, #40]	@ (8005030 <HAL_RCC_ClockConfig+0x360>)
 8005006:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005008:	4a0a      	ldr	r2, [pc, #40]	@ (8005034 <HAL_RCC_ClockConfig+0x364>)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800500e:	4b0a      	ldr	r3, [pc, #40]	@ (8005038 <HAL_RCC_ClockConfig+0x368>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4618      	mov	r0, r3
 8005014:	f7fc fda0 	bl	8001b58 <HAL_InitTick>
 8005018:	4603      	mov	r3, r0
 800501a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800501c:	7bfb      	ldrb	r3, [r7, #15]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	58024400 	.word	0x58024400
 800502c:	080095c4 	.word	0x080095c4
 8005030:	24000004 	.word	0x24000004
 8005034:	24000000 	.word	0x24000000
 8005038:	24000008 	.word	0x24000008

0800503c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800503c:	b480      	push	{r7}
 800503e:	b089      	sub	sp, #36	@ 0x24
 8005040:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005042:	4bb3      	ldr	r3, [pc, #716]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800504a:	2b18      	cmp	r3, #24
 800504c:	f200 8155 	bhi.w	80052fa <HAL_RCC_GetSysClockFreq+0x2be>
 8005050:	a201      	add	r2, pc, #4	@ (adr r2, 8005058 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005056:	bf00      	nop
 8005058:	080050bd 	.word	0x080050bd
 800505c:	080052fb 	.word	0x080052fb
 8005060:	080052fb 	.word	0x080052fb
 8005064:	080052fb 	.word	0x080052fb
 8005068:	080052fb 	.word	0x080052fb
 800506c:	080052fb 	.word	0x080052fb
 8005070:	080052fb 	.word	0x080052fb
 8005074:	080052fb 	.word	0x080052fb
 8005078:	080050e3 	.word	0x080050e3
 800507c:	080052fb 	.word	0x080052fb
 8005080:	080052fb 	.word	0x080052fb
 8005084:	080052fb 	.word	0x080052fb
 8005088:	080052fb 	.word	0x080052fb
 800508c:	080052fb 	.word	0x080052fb
 8005090:	080052fb 	.word	0x080052fb
 8005094:	080052fb 	.word	0x080052fb
 8005098:	080050e9 	.word	0x080050e9
 800509c:	080052fb 	.word	0x080052fb
 80050a0:	080052fb 	.word	0x080052fb
 80050a4:	080052fb 	.word	0x080052fb
 80050a8:	080052fb 	.word	0x080052fb
 80050ac:	080052fb 	.word	0x080052fb
 80050b0:	080052fb 	.word	0x080052fb
 80050b4:	080052fb 	.word	0x080052fb
 80050b8:	080050ef 	.word	0x080050ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050bc:	4b94      	ldr	r3, [pc, #592]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d009      	beq.n	80050dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050c8:	4b91      	ldr	r3, [pc, #580]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	08db      	lsrs	r3, r3, #3
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	4a90      	ldr	r2, [pc, #576]	@ (8005314 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
 80050d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80050da:	e111      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80050dc:	4b8d      	ldr	r3, [pc, #564]	@ (8005314 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050de:	61bb      	str	r3, [r7, #24]
      break;
 80050e0:	e10e      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80050e2:	4b8d      	ldr	r3, [pc, #564]	@ (8005318 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050e4:	61bb      	str	r3, [r7, #24]
      break;
 80050e6:	e10b      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80050e8:	4b8c      	ldr	r3, [pc, #560]	@ (800531c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80050ea:	61bb      	str	r3, [r7, #24]
      break;
 80050ec:	e108      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050ee:	4b88      	ldr	r3, [pc, #544]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80050f8:	4b85      	ldr	r3, [pc, #532]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fc:	091b      	lsrs	r3, r3, #4
 80050fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005102:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005104:	4b82      	ldr	r3, [pc, #520]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800510e:	4b80      	ldr	r3, [pc, #512]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005112:	08db      	lsrs	r3, r3, #3
 8005114:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	fb02 f303 	mul.w	r3, r2, r3
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005126:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80e1 	beq.w	80052f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b02      	cmp	r3, #2
 8005136:	f000 8083 	beq.w	8005240 <HAL_RCC_GetSysClockFreq+0x204>
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2b02      	cmp	r3, #2
 800513e:	f200 80a1 	bhi.w	8005284 <HAL_RCC_GetSysClockFreq+0x248>
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <HAL_RCC_GetSysClockFreq+0x114>
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d056      	beq.n	80051fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800514e:	e099      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005150:	4b6f      	ldr	r3, [pc, #444]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	d02d      	beq.n	80051b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800515c:	4b6c      	ldr	r3, [pc, #432]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	08db      	lsrs	r3, r3, #3
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	4a6b      	ldr	r2, [pc, #428]	@ (8005314 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005168:	fa22 f303 	lsr.w	r3, r2, r3
 800516c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	ee07 3a90 	vmov	s15, r3
 8005174:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	ee07 3a90 	vmov	s15, r3
 800517e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005186:	4b62      	ldr	r3, [pc, #392]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005196:	ed97 6a02 	vldr	s12, [r7, #8]
 800519a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005320 <HAL_RCC_GetSysClockFreq+0x2e4>
 800519e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80051b6:	e087      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005324 <HAL_RCC_GetSysClockFreq+0x2e8>
 80051c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ca:	4b51      	ldr	r3, [pc, #324]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d2:	ee07 3a90 	vmov	s15, r3
 80051d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051da:	ed97 6a02 	vldr	s12, [r7, #8]
 80051de:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005320 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051fa:	e065      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005206:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005328 <HAL_RCC_GetSysClockFreq+0x2ec>
 800520a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800520e:	4b40      	ldr	r3, [pc, #256]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800521e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005222:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005320 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800522a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800522e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800523a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800523e:	e043      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	ee07 3a90 	vmov	s15, r3
 8005246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800524a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800532c <HAL_RCC_GetSysClockFreq+0x2f0>
 800524e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005252:	4b2f      	ldr	r3, [pc, #188]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005262:	ed97 6a02 	vldr	s12, [r7, #8]
 8005266:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005320 <HAL_RCC_GetSysClockFreq+0x2e4>
 800526a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800526e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800527a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800527e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005282:	e021      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005328 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005296:	4b1e      	ldr	r3, [pc, #120]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800529a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529e:	ee07 3a90 	vmov	s15, r3
 80052a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80052aa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005320 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80052c8:	4b11      	ldr	r3, [pc, #68]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052cc:	0a5b      	lsrs	r3, r3, #9
 80052ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052d2:	3301      	adds	r3, #1
 80052d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	ee07 3a90 	vmov	s15, r3
 80052dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80052e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ec:	ee17 3a90 	vmov	r3, s15
 80052f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80052f2:	e005      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	61bb      	str	r3, [r7, #24]
      break;
 80052f8:	e002      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80052fa:	4b07      	ldr	r3, [pc, #28]	@ (8005318 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052fc:	61bb      	str	r3, [r7, #24]
      break;
 80052fe:	bf00      	nop
  }

  return sysclockfreq;
 8005300:	69bb      	ldr	r3, [r7, #24]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3724      	adds	r7, #36	@ 0x24
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	58024400 	.word	0x58024400
 8005314:	03d09000 	.word	0x03d09000
 8005318:	003d0900 	.word	0x003d0900
 800531c:	007a1200 	.word	0x007a1200
 8005320:	46000000 	.word	0x46000000
 8005324:	4c742400 	.word	0x4c742400
 8005328:	4a742400 	.word	0x4a742400
 800532c:	4af42400 	.word	0x4af42400

08005330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005336:	f7ff fe81 	bl	800503c <HAL_RCC_GetSysClockFreq>
 800533a:	4602      	mov	r2, r0
 800533c:	4b10      	ldr	r3, [pc, #64]	@ (8005380 <HAL_RCC_GetHCLKFreq+0x50>)
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	0a1b      	lsrs	r3, r3, #8
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	490f      	ldr	r1, [pc, #60]	@ (8005384 <HAL_RCC_GetHCLKFreq+0x54>)
 8005348:	5ccb      	ldrb	r3, [r1, r3]
 800534a:	f003 031f 	and.w	r3, r3, #31
 800534e:	fa22 f303 	lsr.w	r3, r2, r3
 8005352:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005354:	4b0a      	ldr	r3, [pc, #40]	@ (8005380 <HAL_RCC_GetHCLKFreq+0x50>)
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	4a09      	ldr	r2, [pc, #36]	@ (8005384 <HAL_RCC_GetHCLKFreq+0x54>)
 800535e:	5cd3      	ldrb	r3, [r2, r3]
 8005360:	f003 031f 	and.w	r3, r3, #31
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	fa22 f303 	lsr.w	r3, r2, r3
 800536a:	4a07      	ldr	r2, [pc, #28]	@ (8005388 <HAL_RCC_GetHCLKFreq+0x58>)
 800536c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800536e:	4a07      	ldr	r2, [pc, #28]	@ (800538c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005374:	4b04      	ldr	r3, [pc, #16]	@ (8005388 <HAL_RCC_GetHCLKFreq+0x58>)
 8005376:	681b      	ldr	r3, [r3, #0]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	58024400 	.word	0x58024400
 8005384:	080095c4 	.word	0x080095c4
 8005388:	24000004 	.word	0x24000004
 800538c:	24000000 	.word	0x24000000

08005390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005394:	f7ff ffcc 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 8005398:	4602      	mov	r2, r0
 800539a:	4b06      	ldr	r3, [pc, #24]	@ (80053b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	091b      	lsrs	r3, r3, #4
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	4904      	ldr	r1, [pc, #16]	@ (80053b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053a6:	5ccb      	ldrb	r3, [r1, r3]
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	58024400 	.word	0x58024400
 80053b8:	080095c4 	.word	0x080095c4

080053bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80053c0:	f7ff ffb6 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 80053c4:	4602      	mov	r2, r0
 80053c6:	4b06      	ldr	r3, [pc, #24]	@ (80053e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	0a1b      	lsrs	r3, r3, #8
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	4904      	ldr	r1, [pc, #16]	@ (80053e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053d2:	5ccb      	ldrb	r3, [r1, r3]
 80053d4:	f003 031f 	and.w	r3, r3, #31
 80053d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80053dc:	4618      	mov	r0, r3
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	58024400 	.word	0x58024400
 80053e4:	080095c4 	.word	0x080095c4

080053e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053ec:	b0ca      	sub	sp, #296	@ 0x128
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053f4:	2300      	movs	r3, #0
 80053f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053fa:	2300      	movs	r3, #0
 80053fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800540c:	2500      	movs	r5, #0
 800540e:	ea54 0305 	orrs.w	r3, r4, r5
 8005412:	d049      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005418:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800541a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800541e:	d02f      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005420:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005424:	d828      	bhi.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005426:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800542a:	d01a      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800542c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005430:	d822      	bhi.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005436:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800543a:	d007      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800543c:	e01c      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800543e:	4bb8      	ldr	r3, [pc, #736]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005442:	4ab7      	ldr	r2, [pc, #732]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005444:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005448:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800544a:	e01a      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800544c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005450:	3308      	adds	r3, #8
 8005452:	2102      	movs	r1, #2
 8005454:	4618      	mov	r0, r3
 8005456:	f002 fb61 	bl	8007b1c <RCCEx_PLL2_Config>
 800545a:	4603      	mov	r3, r0
 800545c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005460:	e00f      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005466:	3328      	adds	r3, #40	@ 0x28
 8005468:	2102      	movs	r1, #2
 800546a:	4618      	mov	r0, r3
 800546c:	f002 fc08 	bl	8007c80 <RCCEx_PLL3_Config>
 8005470:	4603      	mov	r3, r0
 8005472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005476:	e004      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800547e:	e000      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10a      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800548a:	4ba5      	ldr	r3, [pc, #660]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800548c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800548e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005496:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005498:	4aa1      	ldr	r2, [pc, #644]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800549a:	430b      	orrs	r3, r1
 800549c:	6513      	str	r3, [r2, #80]	@ 0x50
 800549e:	e003      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80054b4:	f04f 0900 	mov.w	r9, #0
 80054b8:	ea58 0309 	orrs.w	r3, r8, r9
 80054bc:	d047      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80054be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d82a      	bhi.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80054c8:	a201      	add	r2, pc, #4	@ (adr r2, 80054d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80054ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ce:	bf00      	nop
 80054d0:	080054e5 	.word	0x080054e5
 80054d4:	080054f3 	.word	0x080054f3
 80054d8:	08005509 	.word	0x08005509
 80054dc:	08005527 	.word	0x08005527
 80054e0:	08005527 	.word	0x08005527
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054e4:	4b8e      	ldr	r3, [pc, #568]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e8:	4a8d      	ldr	r2, [pc, #564]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054f0:	e01a      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f6:	3308      	adds	r3, #8
 80054f8:	2100      	movs	r1, #0
 80054fa:	4618      	mov	r0, r3
 80054fc:	f002 fb0e 	bl	8007b1c <RCCEx_PLL2_Config>
 8005500:	4603      	mov	r3, r0
 8005502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005506:	e00f      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800550c:	3328      	adds	r3, #40	@ 0x28
 800550e:	2100      	movs	r1, #0
 8005510:	4618      	mov	r0, r3
 8005512:	f002 fbb5 	bl	8007c80 <RCCEx_PLL3_Config>
 8005516:	4603      	mov	r3, r0
 8005518:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800551c:	e004      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005524:	e000      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005526:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005528:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10a      	bne.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005530:	4b7b      	ldr	r3, [pc, #492]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005534:	f023 0107 	bic.w	r1, r3, #7
 8005538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800553c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800553e:	4a78      	ldr	r2, [pc, #480]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005540:	430b      	orrs	r3, r1
 8005542:	6513      	str	r3, [r2, #80]	@ 0x50
 8005544:	e003      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005546:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800554a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800554e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005556:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800555a:	f04f 0b00 	mov.w	fp, #0
 800555e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005562:	d04c      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800556a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800556e:	d030      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005574:	d829      	bhi.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005576:	2bc0      	cmp	r3, #192	@ 0xc0
 8005578:	d02d      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800557a:	2bc0      	cmp	r3, #192	@ 0xc0
 800557c:	d825      	bhi.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800557e:	2b80      	cmp	r3, #128	@ 0x80
 8005580:	d018      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005582:	2b80      	cmp	r3, #128	@ 0x80
 8005584:	d821      	bhi.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800558a:	2b40      	cmp	r3, #64	@ 0x40
 800558c:	d007      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800558e:	e01c      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005590:	4b63      	ldr	r3, [pc, #396]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005594:	4a62      	ldr	r2, [pc, #392]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800559a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800559c:	e01c      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800559e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a2:	3308      	adds	r3, #8
 80055a4:	2100      	movs	r1, #0
 80055a6:	4618      	mov	r0, r3
 80055a8:	f002 fab8 	bl	8007b1c <RCCEx_PLL2_Config>
 80055ac:	4603      	mov	r3, r0
 80055ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80055b2:	e011      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b8:	3328      	adds	r3, #40	@ 0x28
 80055ba:	2100      	movs	r1, #0
 80055bc:	4618      	mov	r0, r3
 80055be:	f002 fb5f 	bl	8007c80 <RCCEx_PLL3_Config>
 80055c2:	4603      	mov	r3, r0
 80055c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80055c8:	e006      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055d0:	e002      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80055d2:	bf00      	nop
 80055d4:	e000      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80055d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10a      	bne.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80055e0:	4b4f      	ldr	r3, [pc, #316]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055e4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80055e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ee:	4a4c      	ldr	r2, [pc, #304]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055f0:	430b      	orrs	r3, r1
 80055f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80055f4:	e003      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80055fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005606:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800560a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800560e:	2300      	movs	r3, #0
 8005610:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005614:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005618:	460b      	mov	r3, r1
 800561a:	4313      	orrs	r3, r2
 800561c:	d053      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800561e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005622:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005626:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800562a:	d035      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800562c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005630:	d82e      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005632:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005636:	d031      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005638:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800563c:	d828      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800563e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005642:	d01a      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005644:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005648:	d822      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800564e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005652:	d007      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005654:	e01c      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005656:	4b32      	ldr	r3, [pc, #200]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565a:	4a31      	ldr	r2, [pc, #196]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800565c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005660:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005662:	e01c      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005668:	3308      	adds	r3, #8
 800566a:	2100      	movs	r1, #0
 800566c:	4618      	mov	r0, r3
 800566e:	f002 fa55 	bl	8007b1c <RCCEx_PLL2_Config>
 8005672:	4603      	mov	r3, r0
 8005674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005678:	e011      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800567a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800567e:	3328      	adds	r3, #40	@ 0x28
 8005680:	2100      	movs	r1, #0
 8005682:	4618      	mov	r0, r3
 8005684:	f002 fafc 	bl	8007c80 <RCCEx_PLL3_Config>
 8005688:	4603      	mov	r3, r0
 800568a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800568e:	e006      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005696:	e002      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005698:	bf00      	nop
 800569a:	e000      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800569c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800569e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10b      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80056a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056aa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80056ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80056b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056b8:	430b      	orrs	r3, r1
 80056ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80056bc:	e003      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80056c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ce:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80056d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80056d6:	2300      	movs	r3, #0
 80056d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80056dc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80056e0:	460b      	mov	r3, r1
 80056e2:	4313      	orrs	r3, r2
 80056e4:	d056      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80056e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056f2:	d038      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80056f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056f8:	d831      	bhi.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80056fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80056fe:	d034      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005700:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005704:	d82b      	bhi.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005706:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800570a:	d01d      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800570c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005710:	d825      	bhi.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d006      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005716:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800571a:	d00a      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800571c:	e01f      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800571e:	bf00      	nop
 8005720:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005724:	4ba2      	ldr	r3, [pc, #648]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005728:	4aa1      	ldr	r2, [pc, #644]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800572a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800572e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005730:	e01c      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005736:	3308      	adds	r3, #8
 8005738:	2100      	movs	r1, #0
 800573a:	4618      	mov	r0, r3
 800573c:	f002 f9ee 	bl	8007b1c <RCCEx_PLL2_Config>
 8005740:	4603      	mov	r3, r0
 8005742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005746:	e011      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574c:	3328      	adds	r3, #40	@ 0x28
 800574e:	2100      	movs	r1, #0
 8005750:	4618      	mov	r0, r3
 8005752:	f002 fa95 	bl	8007c80 <RCCEx_PLL3_Config>
 8005756:	4603      	mov	r3, r0
 8005758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800575c:	e006      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005764:	e002      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005766:	bf00      	nop
 8005768:	e000      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800576a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800576c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10b      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005774:	4b8e      	ldr	r3, [pc, #568]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005778:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800577c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005780:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005784:	4a8a      	ldr	r2, [pc, #552]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005786:	430b      	orrs	r3, r1
 8005788:	6593      	str	r3, [r2, #88]	@ 0x58
 800578a:	e003      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800578c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005790:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80057a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80057a4:	2300      	movs	r3, #0
 80057a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80057aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80057ae:	460b      	mov	r3, r1
 80057b0:	4313      	orrs	r3, r2
 80057b2:	d03a      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80057b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ba:	2b30      	cmp	r3, #48	@ 0x30
 80057bc:	d01f      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x416>
 80057be:	2b30      	cmp	r3, #48	@ 0x30
 80057c0:	d819      	bhi.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d00c      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	d815      	bhi.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d019      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80057ce:	2b10      	cmp	r3, #16
 80057d0:	d111      	bne.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057d2:	4b77      	ldr	r3, [pc, #476]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d6:	4a76      	ldr	r2, [pc, #472]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80057de:	e011      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e4:	3308      	adds	r3, #8
 80057e6:	2102      	movs	r1, #2
 80057e8:	4618      	mov	r0, r3
 80057ea:	f002 f997 	bl	8007b1c <RCCEx_PLL2_Config>
 80057ee:	4603      	mov	r3, r0
 80057f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80057f4:	e006      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057fc:	e002      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80057fe:	bf00      	nop
 8005800:	e000      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10a      	bne.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800580c:	4b68      	ldr	r3, [pc, #416]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800580e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005810:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800581a:	4a65      	ldr	r2, [pc, #404]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800581c:	430b      	orrs	r3, r1
 800581e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005820:	e003      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005826:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800582a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005832:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005836:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800583a:	2300      	movs	r3, #0
 800583c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005840:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005844:	460b      	mov	r3, r1
 8005846:	4313      	orrs	r3, r2
 8005848:	d051      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800584a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800584e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005850:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005854:	d035      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005856:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800585a:	d82e      	bhi.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800585c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005860:	d031      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005862:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005866:	d828      	bhi.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005868:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800586c:	d01a      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800586e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005872:	d822      	bhi.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800587c:	d007      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800587e:	e01c      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005880:	4b4b      	ldr	r3, [pc, #300]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005884:	4a4a      	ldr	r2, [pc, #296]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800588a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800588c:	e01c      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800588e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005892:	3308      	adds	r3, #8
 8005894:	2100      	movs	r1, #0
 8005896:	4618      	mov	r0, r3
 8005898:	f002 f940 	bl	8007b1c <RCCEx_PLL2_Config>
 800589c:	4603      	mov	r3, r0
 800589e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058a2:	e011      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a8:	3328      	adds	r3, #40	@ 0x28
 80058aa:	2100      	movs	r1, #0
 80058ac:	4618      	mov	r0, r3
 80058ae:	f002 f9e7 	bl	8007c80 <RCCEx_PLL3_Config>
 80058b2:	4603      	mov	r3, r0
 80058b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058b8:	e006      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058c0:	e002      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80058c2:	bf00      	nop
 80058c4:	e000      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80058c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10a      	bne.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80058d0:	4b37      	ldr	r3, [pc, #220]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80058d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058de:	4a34      	ldr	r2, [pc, #208]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058e0:	430b      	orrs	r3, r1
 80058e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80058e4:	e003      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80058ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80058fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058fe:	2300      	movs	r3, #0
 8005900:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005904:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005908:	460b      	mov	r3, r1
 800590a:	4313      	orrs	r3, r2
 800590c:	d056      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800590e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005912:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005914:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005918:	d033      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800591a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800591e:	d82c      	bhi.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005920:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005924:	d02f      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005926:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800592a:	d826      	bhi.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800592c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005930:	d02b      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005932:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005936:	d820      	bhi.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005938:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800593c:	d012      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800593e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005942:	d81a      	bhi.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005944:	2b00      	cmp	r3, #0
 8005946:	d022      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800594c:	d115      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800594e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005952:	3308      	adds	r3, #8
 8005954:	2101      	movs	r1, #1
 8005956:	4618      	mov	r0, r3
 8005958:	f002 f8e0 	bl	8007b1c <RCCEx_PLL2_Config>
 800595c:	4603      	mov	r3, r0
 800595e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005962:	e015      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005968:	3328      	adds	r3, #40	@ 0x28
 800596a:	2101      	movs	r1, #1
 800596c:	4618      	mov	r0, r3
 800596e:	f002 f987 	bl	8007c80 <RCCEx_PLL3_Config>
 8005972:	4603      	mov	r3, r0
 8005974:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005978:	e00a      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005980:	e006      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005982:	bf00      	nop
 8005984:	e004      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005986:	bf00      	nop
 8005988:	e002      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800598a:	bf00      	nop
 800598c:	e000      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800598e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10d      	bne.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005998:	4b05      	ldr	r3, [pc, #20]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800599a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800599c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80059a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059a6:	4a02      	ldr	r2, [pc, #8]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059a8:	430b      	orrs	r3, r1
 80059aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80059ac:	e006      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80059ae:	bf00      	nop
 80059b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80059bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80059c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059cc:	2300      	movs	r3, #0
 80059ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059d2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4313      	orrs	r3, r2
 80059da:	d055      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80059dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80059e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059e8:	d033      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80059ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059ee:	d82c      	bhi.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80059f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059f4:	d02f      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80059f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059fa:	d826      	bhi.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80059fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a00:	d02b      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005a02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a06:	d820      	bhi.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a0c:	d012      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005a0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a12:	d81a      	bhi.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d022      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005a18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a1c:	d115      	bne.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a22:	3308      	adds	r3, #8
 8005a24:	2101      	movs	r1, #1
 8005a26:	4618      	mov	r0, r3
 8005a28:	f002 f878 	bl	8007b1c <RCCEx_PLL2_Config>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a32:	e015      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a38:	3328      	adds	r3, #40	@ 0x28
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f002 f91f 	bl	8007c80 <RCCEx_PLL3_Config>
 8005a42:	4603      	mov	r3, r0
 8005a44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a48:	e00a      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a50:	e006      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a52:	bf00      	nop
 8005a54:	e004      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a56:	bf00      	nop
 8005a58:	e002      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a5a:	bf00      	nop
 8005a5c:	e000      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10b      	bne.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005a68:	4ba3      	ldr	r3, [pc, #652]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a6c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a78:	4a9f      	ldr	r2, [pc, #636]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a7a:	430b      	orrs	r3, r1
 8005a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a7e:	e003      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a90:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005a94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a98:	2300      	movs	r3, #0
 8005a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005a9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	d037      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ab2:	d00e      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005ab4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ab8:	d816      	bhi.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d018      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005abe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ac2:	d111      	bne.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ac4:	4b8c      	ldr	r3, [pc, #560]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac8:	4a8b      	ldr	r2, [pc, #556]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005aca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ace:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ad0:	e00f      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	2101      	movs	r1, #1
 8005ada:	4618      	mov	r0, r3
 8005adc:	f002 f81e 	bl	8007b1c <RCCEx_PLL2_Config>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ae6:	e004      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005aee:	e000      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10a      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005afa:	4b7f      	ldr	r3, [pc, #508]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005afc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005afe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b08:	4a7b      	ldr	r2, [pc, #492]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b0a:	430b      	orrs	r3, r1
 8005b0c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b0e:	e003      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b20:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005b24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005b2e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4313      	orrs	r3, r2
 8005b36:	d039      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d81c      	bhi.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005b42:	a201      	add	r2, pc, #4	@ (adr r2, 8005b48 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b48:	08005b85 	.word	0x08005b85
 8005b4c:	08005b59 	.word	0x08005b59
 8005b50:	08005b67 	.word	0x08005b67
 8005b54:	08005b85 	.word	0x08005b85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b58:	4b67      	ldr	r3, [pc, #412]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5c:	4a66      	ldr	r2, [pc, #408]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b64:	e00f      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	2102      	movs	r1, #2
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f001 ffd4 	bl	8007b1c <RCCEx_PLL2_Config>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b7a:	e004      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b82:	e000      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b8e:	4b5a      	ldr	r3, [pc, #360]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b92:	f023 0103 	bic.w	r1, r3, #3
 8005b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b9c:	4a56      	ldr	r2, [pc, #344]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b9e:	430b      	orrs	r3, r1
 8005ba0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ba2:	e003      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ba8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005bb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005bc2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	f000 809f 	beq.w	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bce:	4b4b      	ldr	r3, [pc, #300]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a4a      	ldr	r2, [pc, #296]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bda:	f7fc f807 	bl	8001bec <HAL_GetTick>
 8005bde:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005be2:	e00b      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be4:	f7fc f802 	bl	8001bec <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b64      	cmp	r3, #100	@ 0x64
 8005bf2:	d903      	bls.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bfa:	e005      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bfc:	4b3f      	ldr	r3, [pc, #252]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0ed      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d179      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c10:	4b39      	ldr	r3, [pc, #228]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c1c:	4053      	eors	r3, r2
 8005c1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d015      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c26:	4b34      	ldr	r3, [pc, #208]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c2e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c32:	4b31      	ldr	r3, [pc, #196]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c36:	4a30      	ldr	r2, [pc, #192]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c3c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c3e:	4b2e      	ldr	r3, [pc, #184]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c42:	4a2d      	ldr	r2, [pc, #180]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c48:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c50:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c5e:	d118      	bne.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c60:	f7fb ffc4 	bl	8001bec <HAL_GetTick>
 8005c64:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c68:	e00d      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c6a:	f7fb ffbf 	bl	8001bec <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005c74:	1ad2      	subs	r2, r2, r3
 8005c76:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d903      	bls.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005c84:	e005      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c86:	4b1c      	ldr	r3, [pc, #112]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0eb      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d129      	bne.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ca6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005caa:	d10e      	bne.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005cac:	4b12      	ldr	r3, [pc, #72]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cbc:	091a      	lsrs	r2, r3, #4
 8005cbe:	4b10      	ldr	r3, [pc, #64]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	4a0d      	ldr	r2, [pc, #52]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cc4:	430b      	orrs	r3, r1
 8005cc6:	6113      	str	r3, [r2, #16]
 8005cc8:	e005      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005cca:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	4a0a      	ldr	r2, [pc, #40]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cd0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005cd4:	6113      	str	r3, [r2, #16]
 8005cd6:	4b08      	ldr	r3, [pc, #32]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cd8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ce6:	4a04      	ldr	r2, [pc, #16]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cec:	e00e      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005cf6:	e009      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005cf8:	58024400 	.word	0x58024400
 8005cfc:	58024800 	.word	0x58024800
 8005d00:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	f002 0301 	and.w	r3, r2, #1
 8005d18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d22:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d26:	460b      	mov	r3, r1
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	f000 8089 	beq.w	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d34:	2b28      	cmp	r3, #40	@ 0x28
 8005d36:	d86b      	bhi.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005d38:	a201      	add	r2, pc, #4	@ (adr r2, 8005d40 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3e:	bf00      	nop
 8005d40:	08005e19 	.word	0x08005e19
 8005d44:	08005e11 	.word	0x08005e11
 8005d48:	08005e11 	.word	0x08005e11
 8005d4c:	08005e11 	.word	0x08005e11
 8005d50:	08005e11 	.word	0x08005e11
 8005d54:	08005e11 	.word	0x08005e11
 8005d58:	08005e11 	.word	0x08005e11
 8005d5c:	08005e11 	.word	0x08005e11
 8005d60:	08005de5 	.word	0x08005de5
 8005d64:	08005e11 	.word	0x08005e11
 8005d68:	08005e11 	.word	0x08005e11
 8005d6c:	08005e11 	.word	0x08005e11
 8005d70:	08005e11 	.word	0x08005e11
 8005d74:	08005e11 	.word	0x08005e11
 8005d78:	08005e11 	.word	0x08005e11
 8005d7c:	08005e11 	.word	0x08005e11
 8005d80:	08005dfb 	.word	0x08005dfb
 8005d84:	08005e11 	.word	0x08005e11
 8005d88:	08005e11 	.word	0x08005e11
 8005d8c:	08005e11 	.word	0x08005e11
 8005d90:	08005e11 	.word	0x08005e11
 8005d94:	08005e11 	.word	0x08005e11
 8005d98:	08005e11 	.word	0x08005e11
 8005d9c:	08005e11 	.word	0x08005e11
 8005da0:	08005e19 	.word	0x08005e19
 8005da4:	08005e11 	.word	0x08005e11
 8005da8:	08005e11 	.word	0x08005e11
 8005dac:	08005e11 	.word	0x08005e11
 8005db0:	08005e11 	.word	0x08005e11
 8005db4:	08005e11 	.word	0x08005e11
 8005db8:	08005e11 	.word	0x08005e11
 8005dbc:	08005e11 	.word	0x08005e11
 8005dc0:	08005e19 	.word	0x08005e19
 8005dc4:	08005e11 	.word	0x08005e11
 8005dc8:	08005e11 	.word	0x08005e11
 8005dcc:	08005e11 	.word	0x08005e11
 8005dd0:	08005e11 	.word	0x08005e11
 8005dd4:	08005e11 	.word	0x08005e11
 8005dd8:	08005e11 	.word	0x08005e11
 8005ddc:	08005e11 	.word	0x08005e11
 8005de0:	08005e19 	.word	0x08005e19
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de8:	3308      	adds	r3, #8
 8005dea:	2101      	movs	r1, #1
 8005dec:	4618      	mov	r0, r3
 8005dee:	f001 fe95 	bl	8007b1c <RCCEx_PLL2_Config>
 8005df2:	4603      	mov	r3, r0
 8005df4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005df8:	e00f      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfe:	3328      	adds	r3, #40	@ 0x28
 8005e00:	2101      	movs	r1, #1
 8005e02:	4618      	mov	r0, r3
 8005e04:	f001 ff3c 	bl	8007c80 <RCCEx_PLL3_Config>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e0e:	e004      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e16:	e000      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10a      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005e22:	4bbf      	ldr	r3, [pc, #764]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e26:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e30:	4abb      	ldr	r2, [pc, #748]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e32:	430b      	orrs	r3, r1
 8005e34:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e36:	e003      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e48:	f002 0302 	and.w	r3, r2, #2
 8005e4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e50:	2300      	movs	r3, #0
 8005e52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005e56:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	d041      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e66:	2b05      	cmp	r3, #5
 8005e68:	d824      	bhi.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e70 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e70:	08005ebd 	.word	0x08005ebd
 8005e74:	08005e89 	.word	0x08005e89
 8005e78:	08005e9f 	.word	0x08005e9f
 8005e7c:	08005ebd 	.word	0x08005ebd
 8005e80:	08005ebd 	.word	0x08005ebd
 8005e84:	08005ebd 	.word	0x08005ebd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8c:	3308      	adds	r3, #8
 8005e8e:	2101      	movs	r1, #1
 8005e90:	4618      	mov	r0, r3
 8005e92:	f001 fe43 	bl	8007b1c <RCCEx_PLL2_Config>
 8005e96:	4603      	mov	r3, r0
 8005e98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e9c:	e00f      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea2:	3328      	adds	r3, #40	@ 0x28
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f001 feea 	bl	8007c80 <RCCEx_PLL3_Config>
 8005eac:	4603      	mov	r3, r0
 8005eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005eb2:	e004      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005eba:	e000      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10a      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005ec6:	4b96      	ldr	r3, [pc, #600]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eca:	f023 0107 	bic.w	r1, r3, #7
 8005ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ed4:	4a92      	ldr	r2, [pc, #584]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ed6:	430b      	orrs	r3, r1
 8005ed8:	6553      	str	r3, [r2, #84]	@ 0x54
 8005eda:	e003      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005edc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ee0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eec:	f002 0304 	and.w	r3, r2, #4
 8005ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005efa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4313      	orrs	r3, r2
 8005f02:	d044      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f0c:	2b05      	cmp	r3, #5
 8005f0e:	d825      	bhi.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005f10:	a201      	add	r2, pc, #4	@ (adr r2, 8005f18 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005f65 	.word	0x08005f65
 8005f1c:	08005f31 	.word	0x08005f31
 8005f20:	08005f47 	.word	0x08005f47
 8005f24:	08005f65 	.word	0x08005f65
 8005f28:	08005f65 	.word	0x08005f65
 8005f2c:	08005f65 	.word	0x08005f65
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f34:	3308      	adds	r3, #8
 8005f36:	2101      	movs	r1, #1
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f001 fdef 	bl	8007b1c <RCCEx_PLL2_Config>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f44:	e00f      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f4a:	3328      	adds	r3, #40	@ 0x28
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f001 fe96 	bl	8007c80 <RCCEx_PLL3_Config>
 8005f54:	4603      	mov	r3, r0
 8005f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f5a:	e004      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f62:	e000      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10b      	bne.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f6e:	4b6c      	ldr	r3, [pc, #432]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f72:	f023 0107 	bic.w	r1, r3, #7
 8005f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f7e:	4a68      	ldr	r2, [pc, #416]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f80:	430b      	orrs	r3, r1
 8005f82:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f84:	e003      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	f002 0320 	and.w	r3, r2, #32
 8005f9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005fa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4313      	orrs	r3, r2
 8005fac:	d055      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fba:	d033      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fc0:	d82c      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fc6:	d02f      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fcc:	d826      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fd2:	d02b      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005fd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fd8:	d820      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fde:	d012      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005fe0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fe4:	d81a      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d022      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005fea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fee:	d115      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f001 fd8f 	bl	8007b1c <RCCEx_PLL2_Config>
 8005ffe:	4603      	mov	r3, r0
 8006000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006004:	e015      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800600a:	3328      	adds	r3, #40	@ 0x28
 800600c:	2102      	movs	r1, #2
 800600e:	4618      	mov	r0, r3
 8006010:	f001 fe36 	bl	8007c80 <RCCEx_PLL3_Config>
 8006014:	4603      	mov	r3, r0
 8006016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800601a:	e00a      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006022:	e006      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006024:	bf00      	nop
 8006026:	e004      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006028:	bf00      	nop
 800602a:	e002      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800602c:	bf00      	nop
 800602e:	e000      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10b      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800603a:	4b39      	ldr	r3, [pc, #228]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800603c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800604a:	4a35      	ldr	r2, [pc, #212]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800604c:	430b      	orrs	r3, r1
 800604e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006050:	e003      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006056:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800605a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006066:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800606a:	2300      	movs	r3, #0
 800606c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006070:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006074:	460b      	mov	r3, r1
 8006076:	4313      	orrs	r3, r2
 8006078:	d058      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800607a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006082:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006086:	d033      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006088:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800608c:	d82c      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800608e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006092:	d02f      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006098:	d826      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800609a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800609e:	d02b      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80060a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060a4:	d820      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060aa:	d012      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80060ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060b0:	d81a      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d022      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80060b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060ba:	d115      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c0:	3308      	adds	r3, #8
 80060c2:	2100      	movs	r1, #0
 80060c4:	4618      	mov	r0, r3
 80060c6:	f001 fd29 	bl	8007b1c <RCCEx_PLL2_Config>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80060d0:	e015      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d6:	3328      	adds	r3, #40	@ 0x28
 80060d8:	2102      	movs	r1, #2
 80060da:	4618      	mov	r0, r3
 80060dc:	f001 fdd0 	bl	8007c80 <RCCEx_PLL3_Config>
 80060e0:	4603      	mov	r3, r0
 80060e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80060e6:	e00a      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060ee:	e006      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060f0:	bf00      	nop
 80060f2:	e004      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060f4:	bf00      	nop
 80060f6:	e002      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060f8:	bf00      	nop
 80060fa:	e000      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10e      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006106:	4b06      	ldr	r3, [pc, #24]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800610a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800610e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006112:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006116:	4a02      	ldr	r2, [pc, #8]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006118:	430b      	orrs	r3, r1
 800611a:	6593      	str	r3, [r2, #88]	@ 0x58
 800611c:	e006      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800611e:	bf00      	nop
 8006120:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006128:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800612c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006138:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800613c:	2300      	movs	r3, #0
 800613e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006142:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006146:	460b      	mov	r3, r1
 8006148:	4313      	orrs	r3, r2
 800614a:	d055      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800614c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006150:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006154:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006158:	d033      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800615a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800615e:	d82c      	bhi.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006164:	d02f      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006166:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800616a:	d826      	bhi.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800616c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006170:	d02b      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006172:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006176:	d820      	bhi.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006178:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800617c:	d012      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800617e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006182:	d81a      	bhi.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006184:	2b00      	cmp	r3, #0
 8006186:	d022      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006188:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800618c:	d115      	bne.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800618e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006192:	3308      	adds	r3, #8
 8006194:	2100      	movs	r1, #0
 8006196:	4618      	mov	r0, r3
 8006198:	f001 fcc0 	bl	8007b1c <RCCEx_PLL2_Config>
 800619c:	4603      	mov	r3, r0
 800619e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80061a2:	e015      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a8:	3328      	adds	r3, #40	@ 0x28
 80061aa:	2102      	movs	r1, #2
 80061ac:	4618      	mov	r0, r3
 80061ae:	f001 fd67 	bl	8007c80 <RCCEx_PLL3_Config>
 80061b2:	4603      	mov	r3, r0
 80061b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80061b8:	e00a      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061c0:	e006      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061c2:	bf00      	nop
 80061c4:	e004      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061c6:	bf00      	nop
 80061c8:	e002      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061ca:	bf00      	nop
 80061cc:	e000      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10b      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80061d8:	4ba1      	ldr	r3, [pc, #644]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061dc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80061e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80061e8:	4a9d      	ldr	r2, [pc, #628]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061ea:	430b      	orrs	r3, r1
 80061ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80061ee:	e003      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80061f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	f002 0308 	and.w	r3, r2, #8
 8006204:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006208:	2300      	movs	r3, #0
 800620a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800620e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006212:	460b      	mov	r3, r1
 8006214:	4313      	orrs	r3, r2
 8006216:	d01e      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800621c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006224:	d10c      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800622a:	3328      	adds	r3, #40	@ 0x28
 800622c:	2102      	movs	r1, #2
 800622e:	4618      	mov	r0, r3
 8006230:	f001 fd26 	bl	8007c80 <RCCEx_PLL3_Config>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d002      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006240:	4b87      	ldr	r3, [pc, #540]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006244:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800624c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006250:	4a83      	ldr	r2, [pc, #524]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006252:	430b      	orrs	r3, r1
 8006254:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	f002 0310 	and.w	r3, r2, #16
 8006262:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006266:	2300      	movs	r3, #0
 8006268:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800626c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006270:	460b      	mov	r3, r1
 8006272:	4313      	orrs	r3, r2
 8006274:	d01e      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800627a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800627e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006282:	d10c      	bne.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006288:	3328      	adds	r3, #40	@ 0x28
 800628a:	2102      	movs	r1, #2
 800628c:	4618      	mov	r0, r3
 800628e:	f001 fcf7 	bl	8007c80 <RCCEx_PLL3_Config>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800629e:	4b70      	ldr	r3, [pc, #448]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80062a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062ae:	4a6c      	ldr	r2, [pc, #432]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062b0:	430b      	orrs	r3, r1
 80062b2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80062c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80062c4:	2300      	movs	r3, #0
 80062c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062ca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80062ce:	460b      	mov	r3, r1
 80062d0:	4313      	orrs	r3, r2
 80062d2:	d03e      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80062d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80062dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062e0:	d022      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80062e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062e6:	d81b      	bhi.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80062ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062f0:	d00b      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80062f2:	e015      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f8:	3308      	adds	r3, #8
 80062fa:	2100      	movs	r1, #0
 80062fc:	4618      	mov	r0, r3
 80062fe:	f001 fc0d 	bl	8007b1c <RCCEx_PLL2_Config>
 8006302:	4603      	mov	r3, r0
 8006304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006308:	e00f      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800630a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630e:	3328      	adds	r3, #40	@ 0x28
 8006310:	2102      	movs	r1, #2
 8006312:	4618      	mov	r0, r3
 8006314:	f001 fcb4 	bl	8007c80 <RCCEx_PLL3_Config>
 8006318:	4603      	mov	r3, r0
 800631a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800631e:	e004      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006326:	e000      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800632a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10b      	bne.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006332:	4b4b      	ldr	r3, [pc, #300]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006336:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800633a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006342:	4a47      	ldr	r2, [pc, #284]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006344:	430b      	orrs	r3, r1
 8006346:	6593      	str	r3, [r2, #88]	@ 0x58
 8006348:	e003      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800634e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800635e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006360:	2300      	movs	r3, #0
 8006362:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006364:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006368:	460b      	mov	r3, r1
 800636a:	4313      	orrs	r3, r2
 800636c:	d03b      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800636e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006376:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800637a:	d01f      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800637c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006380:	d818      	bhi.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006382:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006386:	d003      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006388:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800638c:	d007      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800638e:	e011      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006390:	4b33      	ldr	r3, [pc, #204]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006394:	4a32      	ldr	r2, [pc, #200]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006396:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800639a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800639c:	e00f      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800639e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a2:	3328      	adds	r3, #40	@ 0x28
 80063a4:	2101      	movs	r1, #1
 80063a6:	4618      	mov	r0, r3
 80063a8:	f001 fc6a 	bl	8007c80 <RCCEx_PLL3_Config>
 80063ac:	4603      	mov	r3, r0
 80063ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80063b2:	e004      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063ba:	e000      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80063bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10b      	bne.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063c6:	4b26      	ldr	r3, [pc, #152]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80063ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d6:	4a22      	ldr	r2, [pc, #136]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063d8:	430b      	orrs	r3, r1
 80063da:	6553      	str	r3, [r2, #84]	@ 0x54
 80063dc:	e003      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80063e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80063f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80063f4:	2300      	movs	r3, #0
 80063f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80063f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80063fc:	460b      	mov	r3, r1
 80063fe:	4313      	orrs	r3, r2
 8006400:	d034      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800640c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006410:	d007      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006412:	e011      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006414:	4b12      	ldr	r3, [pc, #72]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006418:	4a11      	ldr	r2, [pc, #68]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800641a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800641e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006420:	e00e      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006426:	3308      	adds	r3, #8
 8006428:	2102      	movs	r1, #2
 800642a:	4618      	mov	r0, r3
 800642c:	f001 fb76 	bl	8007b1c <RCCEx_PLL2_Config>
 8006430:	4603      	mov	r3, r0
 8006432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006436:	e003      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800643e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10d      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006448:	4b05      	ldr	r3, [pc, #20]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800644a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800644c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006456:	4a02      	ldr	r2, [pc, #8]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006458:	430b      	orrs	r3, r1
 800645a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800645c:	e006      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800645e:	bf00      	nop
 8006460:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006464:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006468:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800646c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006474:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006478:	66bb      	str	r3, [r7, #104]	@ 0x68
 800647a:	2300      	movs	r3, #0
 800647c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800647e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006482:	460b      	mov	r3, r1
 8006484:	4313      	orrs	r3, r2
 8006486:	d00c      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648c:	3328      	adds	r3, #40	@ 0x28
 800648e:	2102      	movs	r1, #2
 8006490:	4618      	mov	r0, r3
 8006492:	f001 fbf5 	bl	8007c80 <RCCEx_PLL3_Config>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80064a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064aa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80064ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80064b0:	2300      	movs	r3, #0
 80064b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80064b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80064b8:	460b      	mov	r3, r1
 80064ba:	4313      	orrs	r3, r2
 80064bc:	d038      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80064be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064ca:	d018      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80064cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064d0:	d811      	bhi.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80064d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064d6:	d014      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80064d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064dc:	d80b      	bhi.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d011      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80064e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064e6:	d106      	bne.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064e8:	4bc3      	ldr	r3, [pc, #780]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ec:	4ac2      	ldr	r2, [pc, #776]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80064f4:	e008      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064fc:	e004      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80064fe:	bf00      	nop
 8006500:	e002      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006502:	bf00      	nop
 8006504:	e000      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006506:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006508:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10b      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006510:	4bb9      	ldr	r3, [pc, #740]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006514:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006520:	4ab5      	ldr	r2, [pc, #724]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006522:	430b      	orrs	r3, r1
 8006524:	6553      	str	r3, [r2, #84]	@ 0x54
 8006526:	e003      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006528:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800652c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006538:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800653c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800653e:	2300      	movs	r3, #0
 8006540:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006542:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006546:	460b      	mov	r3, r1
 8006548:	4313      	orrs	r3, r2
 800654a:	d009      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800654c:	4baa      	ldr	r3, [pc, #680]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800654e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006550:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800655a:	4aa7      	ldr	r2, [pc, #668]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800655c:	430b      	orrs	r3, r1
 800655e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006568:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800656c:	653b      	str	r3, [r7, #80]	@ 0x50
 800656e:	2300      	movs	r3, #0
 8006570:	657b      	str	r3, [r7, #84]	@ 0x54
 8006572:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006576:	460b      	mov	r3, r1
 8006578:	4313      	orrs	r3, r2
 800657a:	d00a      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800657c:	4b9e      	ldr	r3, [pc, #632]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006588:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800658c:	4a9a      	ldr	r2, [pc, #616]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800658e:	430b      	orrs	r3, r1
 8006590:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800659e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065a0:	2300      	movs	r3, #0
 80065a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80065a8:	460b      	mov	r3, r1
 80065aa:	4313      	orrs	r3, r2
 80065ac:	d009      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065ae:	4b92      	ldr	r3, [pc, #584]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065b2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80065b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065bc:	4a8e      	ldr	r2, [pc, #568]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065be:	430b      	orrs	r3, r1
 80065c0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80065c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ca:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80065ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80065d0:	2300      	movs	r3, #0
 80065d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80065d4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80065d8:	460b      	mov	r3, r1
 80065da:	4313      	orrs	r3, r2
 80065dc:	d00e      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065de:	4b86      	ldr	r3, [pc, #536]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	4a85      	ldr	r2, [pc, #532]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80065e8:	6113      	str	r3, [r2, #16]
 80065ea:	4b83      	ldr	r3, [pc, #524]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065ec:	6919      	ldr	r1, [r3, #16]
 80065ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80065f6:	4a80      	ldr	r2, [pc, #512]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065f8:	430b      	orrs	r3, r1
 80065fa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80065fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006604:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006608:	63bb      	str	r3, [r7, #56]	@ 0x38
 800660a:	2300      	movs	r3, #0
 800660c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800660e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006612:	460b      	mov	r3, r1
 8006614:	4313      	orrs	r3, r2
 8006616:	d009      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006618:	4b77      	ldr	r3, [pc, #476]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800661a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800661c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006626:	4a74      	ldr	r2, [pc, #464]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006628:	430b      	orrs	r3, r1
 800662a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800662c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006634:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006638:	633b      	str	r3, [r7, #48]	@ 0x30
 800663a:	2300      	movs	r3, #0
 800663c:	637b      	str	r3, [r7, #52]	@ 0x34
 800663e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006642:	460b      	mov	r3, r1
 8006644:	4313      	orrs	r3, r2
 8006646:	d00a      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006648:	4b6b      	ldr	r3, [pc, #428]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800664a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800664c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006654:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006658:	4a67      	ldr	r2, [pc, #412]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800665a:	430b      	orrs	r3, r1
 800665c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800665e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006666:	2100      	movs	r1, #0
 8006668:	62b9      	str	r1, [r7, #40]	@ 0x28
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006670:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006674:	460b      	mov	r3, r1
 8006676:	4313      	orrs	r3, r2
 8006678:	d011      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800667a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667e:	3308      	adds	r3, #8
 8006680:	2100      	movs	r1, #0
 8006682:	4618      	mov	r0, r3
 8006684:	f001 fa4a 	bl	8007b1c <RCCEx_PLL2_Config>
 8006688:	4603      	mov	r3, r0
 800668a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800668e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800669a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800669e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	2100      	movs	r1, #0
 80066a8:	6239      	str	r1, [r7, #32]
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80066b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80066b4:	460b      	mov	r3, r1
 80066b6:	4313      	orrs	r3, r2
 80066b8:	d011      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066be:	3308      	adds	r3, #8
 80066c0:	2101      	movs	r1, #1
 80066c2:	4618      	mov	r0, r3
 80066c4:	f001 fa2a 	bl	8007b1c <RCCEx_PLL2_Config>
 80066c8:	4603      	mov	r3, r0
 80066ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80066ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80066de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	2100      	movs	r1, #0
 80066e8:	61b9      	str	r1, [r7, #24]
 80066ea:	f003 0304 	and.w	r3, r3, #4
 80066ee:	61fb      	str	r3, [r7, #28]
 80066f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80066f4:	460b      	mov	r3, r1
 80066f6:	4313      	orrs	r3, r2
 80066f8:	d011      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80066fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fe:	3308      	adds	r3, #8
 8006700:	2102      	movs	r1, #2
 8006702:	4618      	mov	r0, r3
 8006704:	f001 fa0a 	bl	8007b1c <RCCEx_PLL2_Config>
 8006708:	4603      	mov	r3, r0
 800670a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800670e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800671a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800671e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	2100      	movs	r1, #0
 8006728:	6139      	str	r1, [r7, #16]
 800672a:	f003 0308 	and.w	r3, r3, #8
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006734:	460b      	mov	r3, r1
 8006736:	4313      	orrs	r3, r2
 8006738:	d011      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800673a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673e:	3328      	adds	r3, #40	@ 0x28
 8006740:	2100      	movs	r1, #0
 8006742:	4618      	mov	r0, r3
 8006744:	f001 fa9c 	bl	8007c80 <RCCEx_PLL3_Config>
 8006748:	4603      	mov	r3, r0
 800674a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800674e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800675a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800675e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	2100      	movs	r1, #0
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	f003 0310 	and.w	r3, r3, #16
 800676e:	60fb      	str	r3, [r7, #12]
 8006770:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006774:	460b      	mov	r3, r1
 8006776:	4313      	orrs	r3, r2
 8006778:	d011      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800677a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677e:	3328      	adds	r3, #40	@ 0x28
 8006780:	2101      	movs	r1, #1
 8006782:	4618      	mov	r0, r3
 8006784:	f001 fa7c 	bl	8007c80 <RCCEx_PLL3_Config>
 8006788:	4603      	mov	r3, r0
 800678a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800678e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800679a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800679e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a6:	2100      	movs	r1, #0
 80067a8:	6039      	str	r1, [r7, #0]
 80067aa:	f003 0320 	and.w	r3, r3, #32
 80067ae:	607b      	str	r3, [r7, #4]
 80067b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80067b4:	460b      	mov	r3, r1
 80067b6:	4313      	orrs	r3, r2
 80067b8:	d011      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067be:	3328      	adds	r3, #40	@ 0x28
 80067c0:	2102      	movs	r1, #2
 80067c2:	4618      	mov	r0, r3
 80067c4:	f001 fa5c 	bl	8007c80 <RCCEx_PLL3_Config>
 80067c8:	4603      	mov	r3, r0
 80067ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80067ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80067de:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	e000      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80067f2:	46bd      	mov	sp, r7
 80067f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067f8:	58024400 	.word	0x58024400

080067fc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b090      	sub	sp, #64	@ 0x40
 8006800:	af00      	add	r7, sp, #0
 8006802:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006806:	e9d7 2300 	ldrd	r2, r3, [r7]
 800680a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800680e:	430b      	orrs	r3, r1
 8006810:	f040 8094 	bne.w	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006814:	4b9e      	ldr	r3, [pc, #632]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800681e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006820:	2b04      	cmp	r3, #4
 8006822:	f200 8087 	bhi.w	8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006826:	a201      	add	r2, pc, #4	@ (adr r2, 800682c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682c:	08006841 	.word	0x08006841
 8006830:	08006869 	.word	0x08006869
 8006834:	08006891 	.word	0x08006891
 8006838:	0800692d 	.word	0x0800692d
 800683c:	080068b9 	.word	0x080068b9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006840:	4b93      	ldr	r3, [pc, #588]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006848:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800684c:	d108      	bne.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800684e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006852:	4618      	mov	r0, r3
 8006854:	f001 f810 	bl	8007878 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800685a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800685c:	f000 bd45 	b.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006864:	f000 bd41 	b.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006868:	4b89      	ldr	r3, [pc, #548]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006870:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006874:	d108      	bne.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006876:	f107 0318 	add.w	r3, r7, #24
 800687a:	4618      	mov	r0, r3
 800687c:	f000 fd54 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006884:	f000 bd31 	b.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006888:	2300      	movs	r3, #0
 800688a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800688c:	f000 bd2d 	b.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006890:	4b7f      	ldr	r3, [pc, #508]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006898:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800689c:	d108      	bne.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800689e:	f107 030c 	add.w	r3, r7, #12
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fe94 	bl	80075d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068ac:	f000 bd1d 	b.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068b0:	2300      	movs	r3, #0
 80068b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068b4:	f000 bd19 	b.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068b8:	4b75      	ldr	r3, [pc, #468]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80068c0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068c2:	4b73      	ldr	r3, [pc, #460]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d10c      	bne.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80068ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d109      	bne.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068d4:	4b6e      	ldr	r3, [pc, #440]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	08db      	lsrs	r3, r3, #3
 80068da:	f003 0303 	and.w	r3, r3, #3
 80068de:	4a6d      	ldr	r2, [pc, #436]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80068e0:	fa22 f303 	lsr.w	r3, r2, r3
 80068e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068e6:	e01f      	b.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068e8:	4b69      	ldr	r3, [pc, #420]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068f4:	d106      	bne.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80068f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068fc:	d102      	bne.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80068fe:	4b66      	ldr	r3, [pc, #408]	@ (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006900:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006902:	e011      	b.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006904:	4b62      	ldr	r3, [pc, #392]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800690c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006910:	d106      	bne.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006914:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006918:	d102      	bne.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800691a:	4b60      	ldr	r3, [pc, #384]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800691c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800691e:	e003      	b.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006920:	2300      	movs	r3, #0
 8006922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006924:	f000 bce1 	b.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006928:	f000 bcdf 	b.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800692c:	4b5c      	ldr	r3, [pc, #368]	@ (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800692e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006930:	f000 bcdb 	b.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006934:	2300      	movs	r3, #0
 8006936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006938:	f000 bcd7 	b.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800693c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006940:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006944:	430b      	orrs	r3, r1
 8006946:	f040 80ad 	bne.w	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800694a:	4b51      	ldr	r3, [pc, #324]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800694c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800694e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006952:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800695a:	d056      	beq.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800695c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006962:	f200 8090 	bhi.w	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006968:	2bc0      	cmp	r3, #192	@ 0xc0
 800696a:	f000 8088 	beq.w	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800696e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006970:	2bc0      	cmp	r3, #192	@ 0xc0
 8006972:	f200 8088 	bhi.w	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006978:	2b80      	cmp	r3, #128	@ 0x80
 800697a:	d032      	beq.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800697c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697e:	2b80      	cmp	r3, #128	@ 0x80
 8006980:	f200 8081 	bhi.w	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800698a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698c:	2b40      	cmp	r3, #64	@ 0x40
 800698e:	d014      	beq.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006990:	e079      	b.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006992:	4b3f      	ldr	r3, [pc, #252]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800699a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800699e:	d108      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 ff67 	bl	8007878 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069ae:	f000 bc9c 	b.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069b2:	2300      	movs	r3, #0
 80069b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069b6:	f000 bc98 	b.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069ba:	4b35      	ldr	r3, [pc, #212]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069c6:	d108      	bne.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069c8:	f107 0318 	add.w	r3, r7, #24
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 fcab 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069d6:	f000 bc88 	b.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069de:	f000 bc84 	b.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069e2:	4b2b      	ldr	r3, [pc, #172]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069ee:	d108      	bne.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069f0:	f107 030c 	add.w	r3, r7, #12
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 fdeb 	bl	80075d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069fe:	f000 bc74 	b.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a02:	2300      	movs	r3, #0
 8006a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a06:	f000 bc70 	b.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a0a:	4b21      	ldr	r3, [pc, #132]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006a12:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a14:	4b1e      	ldr	r3, [pc, #120]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	d10c      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d109      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a26:	4b1a      	ldr	r3, [pc, #104]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	08db      	lsrs	r3, r3, #3
 8006a2c:	f003 0303 	and.w	r3, r3, #3
 8006a30:	4a18      	ldr	r2, [pc, #96]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006a32:	fa22 f303 	lsr.w	r3, r2, r3
 8006a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a38:	e01f      	b.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a3a:	4b15      	ldr	r3, [pc, #84]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a46:	d106      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a4e:	d102      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a50:	4b11      	ldr	r3, [pc, #68]	@ (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a54:	e011      	b.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a56:	4b0e      	ldr	r3, [pc, #56]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a62:	d106      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a6a:	d102      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a70:	e003      	b.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006a76:	f000 bc38 	b.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a7a:	f000 bc36 	b.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a7e:	4b08      	ldr	r3, [pc, #32]	@ (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a82:	f000 bc32 	b.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006a86:	2300      	movs	r3, #0
 8006a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a8a:	f000 bc2e 	b.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a8e:	bf00      	nop
 8006a90:	58024400 	.word	0x58024400
 8006a94:	03d09000 	.word	0x03d09000
 8006a98:	003d0900 	.word	0x003d0900
 8006a9c:	007a1200 	.word	0x007a1200
 8006aa0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006aa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aa8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006aac:	430b      	orrs	r3, r1
 8006aae:	f040 809c 	bne.w	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006ab2:	4b9e      	ldr	r3, [pc, #632]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006aba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ac2:	d054      	beq.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006aca:	f200 808b 	bhi.w	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006ad4:	f000 8083 	beq.w	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ada:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006ade:	f200 8081 	bhi.w	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ae8:	d02f      	beq.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006af0:	d878      	bhi.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d004      	beq.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006afe:	d012      	beq.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006b00:	e070      	b.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b02:	4b8a      	ldr	r3, [pc, #552]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b0e:	d107      	bne.n	8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 feaf 	bl	8007878 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b1e:	e3e4      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b20:	2300      	movs	r3, #0
 8006b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b24:	e3e1      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b26:	4b81      	ldr	r3, [pc, #516]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b32:	d107      	bne.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b34:	f107 0318 	add.w	r3, r7, #24
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 fbf5 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b42:	e3d2      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b48:	e3cf      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b4a:	4b78      	ldr	r3, [pc, #480]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b56:	d107      	bne.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b58:	f107 030c 	add.w	r3, r7, #12
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 fd37 	bl	80075d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b66:	e3c0      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b6c:	e3bd      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b6e:	4b6f      	ldr	r3, [pc, #444]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006b76:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b78:	4b6c      	ldr	r3, [pc, #432]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d10c      	bne.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d109      	bne.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b8a:	4b68      	ldr	r3, [pc, #416]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	08db      	lsrs	r3, r3, #3
 8006b90:	f003 0303 	and.w	r3, r3, #3
 8006b94:	4a66      	ldr	r2, [pc, #408]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006b96:	fa22 f303 	lsr.w	r3, r2, r3
 8006b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b9c:	e01e      	b.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b9e:	4b63      	ldr	r3, [pc, #396]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006baa:	d106      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bb2:	d102      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006bb4:	4b5f      	ldr	r3, [pc, #380]	@ (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bb8:	e010      	b.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bba:	4b5c      	ldr	r3, [pc, #368]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bc6:	d106      	bne.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bce:	d102      	bne.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006bd0:	4b59      	ldr	r3, [pc, #356]	@ (8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bd4:	e002      	b.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006bda:	e386      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bdc:	e385      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006bde:	4b57      	ldr	r3, [pc, #348]	@ (8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006be2:	e382      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006be4:	2300      	movs	r3, #0
 8006be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006be8:	e37f      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bee:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006bf2:	430b      	orrs	r3, r1
 8006bf4:	f040 80a7 	bne.w	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006bf8:	4b4c      	ldr	r3, [pc, #304]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bfc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006c00:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c08:	d055      	beq.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c10:	f200 8096 	bhi.w	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c1a:	f000 8084 	beq.w	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c24:	f200 808c 	bhi.w	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c2e:	d030      	beq.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c36:	f200 8083 	bhi.w	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d004      	beq.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c46:	d012      	beq.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006c48:	e07a      	b.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c4a:	4b38      	ldr	r3, [pc, #224]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c56:	d107      	bne.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 fe0b 	bl	8007878 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c66:	e340      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c6c:	e33d      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c7a:	d107      	bne.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c7c:	f107 0318 	add.w	r3, r7, #24
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fb51 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c8a:	e32e      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c90:	e32b      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c92:	4b26      	ldr	r3, [pc, #152]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c9e:	d107      	bne.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ca0:	f107 030c 	add.w	r3, r7, #12
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 fc93 	bl	80075d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cae:	e31c      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cb4:	e319      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006cbe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b04      	cmp	r3, #4
 8006cca:	d10c      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d109      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cd2:	4b16      	ldr	r3, [pc, #88]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	08db      	lsrs	r3, r3, #3
 8006cd8:	f003 0303 	and.w	r3, r3, #3
 8006cdc:	4a14      	ldr	r2, [pc, #80]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006cde:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ce4:	e01e      	b.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ce6:	4b11      	ldr	r3, [pc, #68]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cf2:	d106      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cfa:	d102      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d00:	e010      	b.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d02:	4b0a      	ldr	r3, [pc, #40]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d0e:	d106      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d16:	d102      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d18:	4b07      	ldr	r3, [pc, #28]	@ (8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d1c:	e002      	b.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006d22:	e2e2      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d24:	e2e1      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d26:	4b05      	ldr	r3, [pc, #20]	@ (8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d2a:	e2de      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d2c:	58024400 	.word	0x58024400
 8006d30:	03d09000 	.word	0x03d09000
 8006d34:	003d0900 	.word	0x003d0900
 8006d38:	007a1200 	.word	0x007a1200
 8006d3c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006d40:	2300      	movs	r3, #0
 8006d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d44:	e2d1      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006d46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d4a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006d4e:	430b      	orrs	r3, r1
 8006d50:	f040 809c 	bne.w	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006d54:	4b93      	ldr	r3, [pc, #588]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d58:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006d5c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d64:	d054      	beq.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d6c:	f200 808b 	bhi.w	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d76:	f000 8083 	beq.w	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d80:	f200 8081 	bhi.w	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d8a:	d02f      	beq.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d92:	d878      	bhi.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d004      	beq.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006da0:	d012      	beq.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006da2:	e070      	b.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006da4:	4b7f      	ldr	r3, [pc, #508]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006db0:	d107      	bne.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 fd5e 	bl	8007878 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dc0:	e293      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dc6:	e290      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006dc8:	4b76      	ldr	r3, [pc, #472]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dd4:	d107      	bne.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dd6:	f107 0318 	add.w	r3, r7, #24
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 faa4 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006de4:	e281      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dea:	e27e      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dec:	4b6d      	ldr	r3, [pc, #436]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006df4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006df8:	d107      	bne.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dfa:	f107 030c 	add.w	r3, r7, #12
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 fbe6 	bl	80075d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e08:	e26f      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e0e:	e26c      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e10:	4b64      	ldr	r3, [pc, #400]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e18:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e1a:	4b62      	ldr	r3, [pc, #392]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0304 	and.w	r3, r3, #4
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d10c      	bne.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d109      	bne.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e2c:	4b5d      	ldr	r3, [pc, #372]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	08db      	lsrs	r3, r3, #3
 8006e32:	f003 0303 	and.w	r3, r3, #3
 8006e36:	4a5c      	ldr	r2, [pc, #368]	@ (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006e38:	fa22 f303 	lsr.w	r3, r2, r3
 8006e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e3e:	e01e      	b.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e40:	4b58      	ldr	r3, [pc, #352]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e4c:	d106      	bne.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e54:	d102      	bne.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e56:	4b55      	ldr	r3, [pc, #340]	@ (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e5a:	e010      	b.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e5c:	4b51      	ldr	r3, [pc, #324]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e68:	d106      	bne.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e70:	d102      	bne.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e72:	4b4f      	ldr	r3, [pc, #316]	@ (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e76:	e002      	b.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006e7c:	e235      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e7e:	e234      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e80:	4b4c      	ldr	r3, [pc, #304]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e84:	e231      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e8a:	e22e      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e90:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006e94:	430b      	orrs	r3, r1
 8006e96:	f040 808f 	bne.w	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006e9a:	4b42      	ldr	r3, [pc, #264]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e9e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006eaa:	d06b      	beq.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006eb2:	d874      	bhi.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006eba:	d056      	beq.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ebe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ec2:	d86c      	bhi.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006eca:	d03b      	beq.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ece:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ed2:	d864      	bhi.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eda:	d021      	beq.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ede:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ee2:	d85c      	bhi.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d004      	beq.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ef0:	d004      	beq.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006ef2:	e054      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006ef4:	f7fe fa4c 	bl	8005390 <HAL_RCC_GetPCLK1Freq>
 8006ef8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006efa:	e1f6      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006efc:	4b29      	ldr	r3, [pc, #164]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f08:	d107      	bne.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f0a:	f107 0318 	add.w	r3, r7, #24
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 fa0a 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f18:	e1e7      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f1e:	e1e4      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f20:	4b20      	ldr	r3, [pc, #128]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f2c:	d107      	bne.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f2e:	f107 030c 	add.w	r3, r7, #12
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 fb4c 	bl	80075d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f3c:	e1d5      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f42:	e1d2      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f44:	4b17      	ldr	r3, [pc, #92]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d109      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f50:	4b14      	ldr	r3, [pc, #80]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	08db      	lsrs	r3, r3, #3
 8006f56:	f003 0303 	and.w	r3, r3, #3
 8006f5a:	4a13      	ldr	r2, [pc, #76]	@ (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f62:	e1c2      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f64:	2300      	movs	r3, #0
 8006f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f68:	e1bf      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f76:	d102      	bne.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006f78:	4b0c      	ldr	r3, [pc, #48]	@ (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f7c:	e1b5      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f82:	e1b2      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f84:	4b07      	ldr	r3, [pc, #28]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f90:	d102      	bne.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006f92:	4b07      	ldr	r3, [pc, #28]	@ (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f96:	e1a8      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f9c:	e1a5      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fa2:	e1a2      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006fa4:	58024400 	.word	0x58024400
 8006fa8:	03d09000 	.word	0x03d09000
 8006fac:	003d0900 	.word	0x003d0900
 8006fb0:	007a1200 	.word	0x007a1200
 8006fb4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fbc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006fc0:	430b      	orrs	r3, r1
 8006fc2:	d173      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006fc4:	4b9c      	ldr	r3, [pc, #624]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006fcc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fd4:	d02f      	beq.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fdc:	d863      	bhi.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d004      	beq.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fea:	d012      	beq.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006fec:	e05b      	b.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fee:	4b92      	ldr	r3, [pc, #584]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ff6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ffa:	d107      	bne.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ffc:	f107 0318 	add.w	r3, r7, #24
 8007000:	4618      	mov	r0, r3
 8007002:	f000 f991 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800700a:	e16e      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007010:	e16b      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007012:	4b89      	ldr	r3, [pc, #548]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800701a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800701e:	d107      	bne.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007020:	f107 030c 	add.w	r3, r7, #12
 8007024:	4618      	mov	r0, r3
 8007026:	f000 fad3 	bl	80075d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800702e:	e15c      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007030:	2300      	movs	r3, #0
 8007032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007034:	e159      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007036:	4b80      	ldr	r3, [pc, #512]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800703a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800703e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007040:	4b7d      	ldr	r3, [pc, #500]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0304 	and.w	r3, r3, #4
 8007048:	2b04      	cmp	r3, #4
 800704a:	d10c      	bne.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800704c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800704e:	2b00      	cmp	r3, #0
 8007050:	d109      	bne.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007052:	4b79      	ldr	r3, [pc, #484]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	08db      	lsrs	r3, r3, #3
 8007058:	f003 0303 	and.w	r3, r3, #3
 800705c:	4a77      	ldr	r2, [pc, #476]	@ (800723c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800705e:	fa22 f303 	lsr.w	r3, r2, r3
 8007062:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007064:	e01e      	b.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007066:	4b74      	ldr	r3, [pc, #464]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800706e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007072:	d106      	bne.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007076:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800707a:	d102      	bne.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800707c:	4b70      	ldr	r3, [pc, #448]	@ (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800707e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007080:	e010      	b.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007082:	4b6d      	ldr	r3, [pc, #436]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800708a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800708e:	d106      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007092:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007096:	d102      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007098:	4b6a      	ldr	r3, [pc, #424]	@ (8007244 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800709a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800709c:	e002      	b.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800709e:	2300      	movs	r3, #0
 80070a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80070a2:	e122      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070a4:	e121      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80070a6:	2300      	movs	r3, #0
 80070a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070aa:	e11e      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80070ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070b0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80070b4:	430b      	orrs	r3, r1
 80070b6:	d133      	bne.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80070b8:	4b5f      	ldr	r3, [pc, #380]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070c0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80070c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d004      	beq.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80070c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070ce:	d012      	beq.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80070d0:	e023      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070d2:	4b59      	ldr	r3, [pc, #356]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070de:	d107      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fbc7 	bl	8007878 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ee:	e0fc      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070f4:	e0f9      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070f6:	4b50      	ldr	r3, [pc, #320]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007102:	d107      	bne.n	8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007104:	f107 0318 	add.w	r3, r7, #24
 8007108:	4618      	mov	r0, r3
 800710a:	f000 f90d 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007112:	e0ea      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007114:	2300      	movs	r3, #0
 8007116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007118:	e0e7      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800711a:	2300      	movs	r3, #0
 800711c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800711e:	e0e4      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007124:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007128:	430b      	orrs	r3, r1
 800712a:	f040 808d 	bne.w	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800712e:	4b42      	ldr	r3, [pc, #264]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007132:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007136:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800713e:	d06b      	beq.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007142:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007146:	d874      	bhi.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800714e:	d056      	beq.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007156:	d86c      	bhi.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800715e:	d03b      	beq.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007162:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007166:	d864      	bhi.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800716e:	d021      	beq.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007176:	d85c      	bhi.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717a:	2b00      	cmp	r3, #0
 800717c:	d004      	beq.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800717e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007180:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007184:	d004      	beq.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007186:	e054      	b.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007188:	f000 f8b8 	bl	80072fc <HAL_RCCEx_GetD3PCLK1Freq>
 800718c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800718e:	e0ac      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007190:	4b29      	ldr	r3, [pc, #164]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007198:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800719c:	d107      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800719e:	f107 0318 	add.w	r3, r7, #24
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 f8c0 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071ac:	e09d      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071b2:	e09a      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071b4:	4b20      	ldr	r3, [pc, #128]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071c0:	d107      	bne.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071c2:	f107 030c 	add.w	r3, r7, #12
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 fa02 	bl	80075d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071d0:	e08b      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071d6:	e088      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071d8:	4b17      	ldr	r3, [pc, #92]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b04      	cmp	r3, #4
 80071e2:	d109      	bne.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071e4:	4b14      	ldr	r3, [pc, #80]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	08db      	lsrs	r3, r3, #3
 80071ea:	f003 0303 	and.w	r3, r3, #3
 80071ee:	4a13      	ldr	r2, [pc, #76]	@ (800723c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80071f0:	fa22 f303 	lsr.w	r3, r2, r3
 80071f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071f6:	e078      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071f8:	2300      	movs	r3, #0
 80071fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071fc:	e075      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80071fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800720a:	d102      	bne.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800720c:	4b0c      	ldr	r3, [pc, #48]	@ (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800720e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007210:	e06b      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007212:	2300      	movs	r3, #0
 8007214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007216:	e068      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007218:	4b07      	ldr	r3, [pc, #28]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007220:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007224:	d102      	bne.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007226:	4b07      	ldr	r3, [pc, #28]	@ (8007244 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800722a:	e05e      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800722c:	2300      	movs	r3, #0
 800722e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007230:	e05b      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007232:	2300      	movs	r3, #0
 8007234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007236:	e058      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007238:	58024400 	.word	0x58024400
 800723c:	03d09000 	.word	0x03d09000
 8007240:	003d0900 	.word	0x003d0900
 8007244:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007248:	e9d7 2300 	ldrd	r2, r3, [r7]
 800724c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007250:	430b      	orrs	r3, r1
 8007252:	d148      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007254:	4b27      	ldr	r3, [pc, #156]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007258:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800725c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800725e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007260:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007264:	d02a      	beq.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007268:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800726c:	d838      	bhi.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800726e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007270:	2b00      	cmp	r3, #0
 8007272:	d004      	beq.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007276:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800727a:	d00d      	beq.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800727c:	e030      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800727e:	4b1d      	ldr	r3, [pc, #116]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007286:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800728a:	d102      	bne.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800728c:	4b1a      	ldr	r3, [pc, #104]	@ (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800728e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007290:	e02b      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007296:	e028      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007298:	4b16      	ldr	r3, [pc, #88]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072a4:	d107      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80072aa:	4618      	mov	r0, r3
 80072ac:	f000 fae4 	bl	8007878 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072b4:	e019      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072b6:	2300      	movs	r3, #0
 80072b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072ba:	e016      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072bc:	4b0d      	ldr	r3, [pc, #52]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072c8:	d107      	bne.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072ca:	f107 0318 	add.w	r3, r7, #24
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 f82a 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072d8:	e007      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072da:	2300      	movs	r3, #0
 80072dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072de:	e004      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80072e0:	2300      	movs	r3, #0
 80072e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072e4:	e001      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80072ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3740      	adds	r7, #64	@ 0x40
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	58024400 	.word	0x58024400
 80072f8:	007a1200 	.word	0x007a1200

080072fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007300:	f7fe f816 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 8007304:	4602      	mov	r2, r0
 8007306:	4b06      	ldr	r3, [pc, #24]	@ (8007320 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	091b      	lsrs	r3, r3, #4
 800730c:	f003 0307 	and.w	r3, r3, #7
 8007310:	4904      	ldr	r1, [pc, #16]	@ (8007324 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007312:	5ccb      	ldrb	r3, [r1, r3]
 8007314:	f003 031f 	and.w	r3, r3, #31
 8007318:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800731c:	4618      	mov	r0, r3
 800731e:	bd80      	pop	{r7, pc}
 8007320:	58024400 	.word	0x58024400
 8007324:	080095c4 	.word	0x080095c4

08007328 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007328:	b480      	push	{r7}
 800732a:	b089      	sub	sp, #36	@ 0x24
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007330:	4ba1      	ldr	r3, [pc, #644]	@ (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007334:	f003 0303 	and.w	r3, r3, #3
 8007338:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800733a:	4b9f      	ldr	r3, [pc, #636]	@ (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800733c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733e:	0b1b      	lsrs	r3, r3, #12
 8007340:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007344:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007346:	4b9c      	ldr	r3, [pc, #624]	@ (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800734a:	091b      	lsrs	r3, r3, #4
 800734c:	f003 0301 	and.w	r3, r3, #1
 8007350:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007352:	4b99      	ldr	r3, [pc, #612]	@ (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007356:	08db      	lsrs	r3, r3, #3
 8007358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	fb02 f303 	mul.w	r3, r2, r3
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 8111 	beq.w	8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	2b02      	cmp	r3, #2
 800737a:	f000 8083 	beq.w	8007484 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	2b02      	cmp	r3, #2
 8007382:	f200 80a1 	bhi.w	80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d003      	beq.n	8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d056      	beq.n	8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007392:	e099      	b.n	80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007394:	4b88      	ldr	r3, [pc, #544]	@ (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0320 	and.w	r3, r3, #32
 800739c:	2b00      	cmp	r3, #0
 800739e:	d02d      	beq.n	80073fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073a0:	4b85      	ldr	r3, [pc, #532]	@ (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	08db      	lsrs	r3, r3, #3
 80073a6:	f003 0303 	and.w	r3, r3, #3
 80073aa:	4a84      	ldr	r2, [pc, #528]	@ (80075bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80073ac:	fa22 f303 	lsr.w	r3, r2, r3
 80073b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	ee07 3a90 	vmov	s15, r3
 80073b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ca:	4b7b      	ldr	r3, [pc, #492]	@ (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d2:	ee07 3a90 	vmov	s15, r3
 80073d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073da:	ed97 6a03 	vldr	s12, [r7, #12]
 80073de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80073fa:	e087      	b.n	800750c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007406:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80075c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800740a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800740e:	4b6a      	ldr	r3, [pc, #424]	@ (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007416:	ee07 3a90 	vmov	s15, r3
 800741a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007422:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800742a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800742e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800743a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800743e:	e065      	b.n	800750c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	ee07 3a90 	vmov	s15, r3
 8007446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800744e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007452:	4b59      	ldr	r3, [pc, #356]	@ (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800745a:	ee07 3a90 	vmov	s15, r3
 800745e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007462:	ed97 6a03 	vldr	s12, [r7, #12]
 8007466:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800746a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800746e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800747a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800747e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007482:	e043      	b.n	800750c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	ee07 3a90 	vmov	s15, r3
 800748a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80075cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007496:	4b48      	ldr	r3, [pc, #288]	@ (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800749a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749e:	ee07 3a90 	vmov	s15, r3
 80074a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074c6:	e021      	b.n	800750c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	ee07 3a90 	vmov	s15, r3
 80074ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80074d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074da:	4b37      	ldr	r3, [pc, #220]	@ (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e2:	ee07 3a90 	vmov	s15, r3
 80074e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800750a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800750c:	4b2a      	ldr	r3, [pc, #168]	@ (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800750e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007510:	0a5b      	lsrs	r3, r3, #9
 8007512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007522:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007526:	edd7 6a07 	vldr	s13, [r7, #28]
 800752a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800752e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007532:	ee17 2a90 	vmov	r2, s15
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800753a:	4b1f      	ldr	r3, [pc, #124]	@ (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800753c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800753e:	0c1b      	lsrs	r3, r3, #16
 8007540:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007544:	ee07 3a90 	vmov	s15, r3
 8007548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007550:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007554:	edd7 6a07 	vldr	s13, [r7, #28]
 8007558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800755c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007560:	ee17 2a90 	vmov	r2, s15
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007568:	4b13      	ldr	r3, [pc, #76]	@ (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800756a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800756c:	0e1b      	lsrs	r3, r3, #24
 800756e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007572:	ee07 3a90 	vmov	s15, r3
 8007576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800757e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007582:	edd7 6a07 	vldr	s13, [r7, #28]
 8007586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800758a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800758e:	ee17 2a90 	vmov	r2, s15
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007596:	e008      	b.n	80075aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	609a      	str	r2, [r3, #8]
}
 80075aa:	bf00      	nop
 80075ac:	3724      	adds	r7, #36	@ 0x24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	58024400 	.word	0x58024400
 80075bc:	03d09000 	.word	0x03d09000
 80075c0:	46000000 	.word	0x46000000
 80075c4:	4c742400 	.word	0x4c742400
 80075c8:	4a742400 	.word	0x4a742400
 80075cc:	4af42400 	.word	0x4af42400

080075d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b089      	sub	sp, #36	@ 0x24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075d8:	4ba1      	ldr	r3, [pc, #644]	@ (8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075dc:	f003 0303 	and.w	r3, r3, #3
 80075e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80075e2:	4b9f      	ldr	r3, [pc, #636]	@ (8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e6:	0d1b      	lsrs	r3, r3, #20
 80075e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80075ee:	4b9c      	ldr	r3, [pc, #624]	@ (8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f2:	0a1b      	lsrs	r3, r3, #8
 80075f4:	f003 0301 	and.w	r3, r3, #1
 80075f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80075fa:	4b99      	ldr	r3, [pc, #612]	@ (8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075fe:	08db      	lsrs	r3, r3, #3
 8007600:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	fb02 f303 	mul.w	r3, r2, r3
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007612:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 8111 	beq.w	8007840 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	2b02      	cmp	r3, #2
 8007622:	f000 8083 	beq.w	800772c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	2b02      	cmp	r3, #2
 800762a:	f200 80a1 	bhi.w	8007770 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d056      	beq.n	80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800763a:	e099      	b.n	8007770 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800763c:	4b88      	ldr	r3, [pc, #544]	@ (8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0320 	and.w	r3, r3, #32
 8007644:	2b00      	cmp	r3, #0
 8007646:	d02d      	beq.n	80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007648:	4b85      	ldr	r3, [pc, #532]	@ (8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	08db      	lsrs	r3, r3, #3
 800764e:	f003 0303 	and.w	r3, r3, #3
 8007652:	4a84      	ldr	r2, [pc, #528]	@ (8007864 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007654:	fa22 f303 	lsr.w	r3, r2, r3
 8007658:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	ee07 3a90 	vmov	s15, r3
 8007660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	ee07 3a90 	vmov	s15, r3
 800766a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007672:	4b7b      	ldr	r3, [pc, #492]	@ (8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007682:	ed97 6a03 	vldr	s12, [r7, #12]
 8007686:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800768a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800768e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800769a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80076a2:	e087      	b.n	80077b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800786c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80076b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b6:	4b6a      	ldr	r3, [pc, #424]	@ (8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076e6:	e065      	b.n	80077b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	ee07 3a90 	vmov	s15, r3
 80076ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076fa:	4b59      	ldr	r3, [pc, #356]	@ (8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007702:	ee07 3a90 	vmov	s15, r3
 8007706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800770a:	ed97 6a03 	vldr	s12, [r7, #12]
 800770e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800771a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800771e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800772a:	e043      	b.n	80077b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	ee07 3a90 	vmov	s15, r3
 8007732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007736:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007874 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800773a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800773e:	4b48      	ldr	r3, [pc, #288]	@ (8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007746:	ee07 3a90 	vmov	s15, r3
 800774a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007752:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800775a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800775e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800776a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800776e:	e021      	b.n	80077b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	ee07 3a90 	vmov	s15, r3
 8007776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800777e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007782:	4b37      	ldr	r3, [pc, #220]	@ (8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778a:	ee07 3a90 	vmov	s15, r3
 800778e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007792:	ed97 6a03 	vldr	s12, [r7, #12]
 8007796:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800779a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800779e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80077b4:	4b2a      	ldr	r3, [pc, #168]	@ (8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b8:	0a5b      	lsrs	r3, r3, #9
 80077ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077be:	ee07 3a90 	vmov	s15, r3
 80077c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80077d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077da:	ee17 2a90 	vmov	r2, s15
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80077e2:	4b1f      	ldr	r3, [pc, #124]	@ (8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e6:	0c1b      	lsrs	r3, r3, #16
 80077e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077ec:	ee07 3a90 	vmov	s15, r3
 80077f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007808:	ee17 2a90 	vmov	r2, s15
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007810:	4b13      	ldr	r3, [pc, #76]	@ (8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007814:	0e1b      	lsrs	r3, r3, #24
 8007816:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800781a:	ee07 3a90 	vmov	s15, r3
 800781e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007822:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007826:	ee37 7a87 	vadd.f32	s14, s15, s14
 800782a:	edd7 6a07 	vldr	s13, [r7, #28]
 800782e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007836:	ee17 2a90 	vmov	r2, s15
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800783e:	e008      	b.n	8007852 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	609a      	str	r2, [r3, #8]
}
 8007852:	bf00      	nop
 8007854:	3724      	adds	r7, #36	@ 0x24
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	58024400 	.word	0x58024400
 8007864:	03d09000 	.word	0x03d09000
 8007868:	46000000 	.word	0x46000000
 800786c:	4c742400 	.word	0x4c742400
 8007870:	4a742400 	.word	0x4a742400
 8007874:	4af42400 	.word	0x4af42400

08007878 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007878:	b480      	push	{r7}
 800787a:	b089      	sub	sp, #36	@ 0x24
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007880:	4ba0      	ldr	r3, [pc, #640]	@ (8007b04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007884:	f003 0303 	and.w	r3, r3, #3
 8007888:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800788a:	4b9e      	ldr	r3, [pc, #632]	@ (8007b04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800788c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800788e:	091b      	lsrs	r3, r3, #4
 8007890:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007894:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007896:	4b9b      	ldr	r3, [pc, #620]	@ (8007b04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80078a0:	4b98      	ldr	r3, [pc, #608]	@ (8007b04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078a4:	08db      	lsrs	r3, r3, #3
 80078a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	fb02 f303 	mul.w	r3, r2, r3
 80078b0:	ee07 3a90 	vmov	s15, r3
 80078b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 8111 	beq.w	8007ae6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	f000 8083 	beq.w	80079d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	f200 80a1 	bhi.w	8007a16 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d056      	beq.n	800798e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80078e0:	e099      	b.n	8007a16 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078e2:	4b88      	ldr	r3, [pc, #544]	@ (8007b04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0320 	and.w	r3, r3, #32
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d02d      	beq.n	800794a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078ee:	4b85      	ldr	r3, [pc, #532]	@ (8007b04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	08db      	lsrs	r3, r3, #3
 80078f4:	f003 0303 	and.w	r3, r3, #3
 80078f8:	4a83      	ldr	r2, [pc, #524]	@ (8007b08 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80078fa:	fa22 f303 	lsr.w	r3, r2, r3
 80078fe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	ee07 3a90 	vmov	s15, r3
 8007910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007914:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007918:	4b7a      	ldr	r3, [pc, #488]	@ (8007b04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800791a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800791c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007920:	ee07 3a90 	vmov	s15, r3
 8007924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007928:	ed97 6a03 	vldr	s12, [r7, #12]
 800792c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007930:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007934:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007938:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800793c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007944:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007948:	e087      	b.n	8007a5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	ee07 3a90 	vmov	s15, r3
 8007950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007954:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007b10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007958:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800795c:	4b69      	ldr	r3, [pc, #420]	@ (8007b04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800795e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007964:	ee07 3a90 	vmov	s15, r3
 8007968:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800796c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007970:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007974:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007978:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800797c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007980:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007988:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800798c:	e065      	b.n	8007a5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	ee07 3a90 	vmov	s15, r3
 8007994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007998:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800799c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079a0:	4b58      	ldr	r3, [pc, #352]	@ (8007b04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a8:	ee07 3a90 	vmov	s15, r3
 80079ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80079b4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079d0:	e043      	b.n	8007a5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	ee07 3a90 	vmov	s15, r3
 80079d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079dc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007b18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80079e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079e4:	4b47      	ldr	r3, [pc, #284]	@ (8007b04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ec:	ee07 3a90 	vmov	s15, r3
 80079f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80079f8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a14:	e021      	b.n	8007a5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	ee07 3a90 	vmov	s15, r3
 8007a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a20:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007b10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007a24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a28:	4b36      	ldr	r3, [pc, #216]	@ (8007b04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a30:	ee07 3a90 	vmov	s15, r3
 8007a34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a38:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a3c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a58:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8007b04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a5e:	0a5b      	lsrs	r3, r3, #9
 8007a60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a64:	ee07 3a90 	vmov	s15, r3
 8007a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a74:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a80:	ee17 2a90 	vmov	r2, s15
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007a88:	4b1e      	ldr	r3, [pc, #120]	@ (8007b04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a8c:	0c1b      	lsrs	r3, r3, #16
 8007a8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a92:	ee07 3a90 	vmov	s15, r3
 8007a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aae:	ee17 2a90 	vmov	r2, s15
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007ab6:	4b13      	ldr	r3, [pc, #76]	@ (8007b04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aba:	0e1b      	lsrs	r3, r3, #24
 8007abc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ac0:	ee07 3a90 	vmov	s15, r3
 8007ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007acc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ad0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007adc:	ee17 2a90 	vmov	r2, s15
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007ae4:	e008      	b.n	8007af8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	609a      	str	r2, [r3, #8]
}
 8007af8:	bf00      	nop
 8007afa:	3724      	adds	r7, #36	@ 0x24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	58024400 	.word	0x58024400
 8007b08:	03d09000 	.word	0x03d09000
 8007b0c:	46000000 	.word	0x46000000
 8007b10:	4c742400 	.word	0x4c742400
 8007b14:	4a742400 	.word	0x4a742400
 8007b18:	4af42400 	.word	0x4af42400

08007b1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b2a:	4b53      	ldr	r3, [pc, #332]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b2e:	f003 0303 	and.w	r3, r3, #3
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d101      	bne.n	8007b3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e099      	b.n	8007c6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b3a:	4b4f      	ldr	r3, [pc, #316]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a4e      	ldr	r2, [pc, #312]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007b40:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b46:	f7fa f851 	bl	8001bec <HAL_GetTick>
 8007b4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b4c:	e008      	b.n	8007b60 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b4e:	f7fa f84d 	bl	8001bec <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d901      	bls.n	8007b60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e086      	b.n	8007c6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b60:	4b45      	ldr	r3, [pc, #276]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1f0      	bne.n	8007b4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b6c:	4b42      	ldr	r3, [pc, #264]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b70:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	031b      	lsls	r3, r3, #12
 8007b7a:	493f      	ldr	r1, [pc, #252]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	025b      	lsls	r3, r3, #9
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	431a      	orrs	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	041b      	lsls	r3, r3, #16
 8007b9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007ba2:	431a      	orrs	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	061b      	lsls	r3, r3, #24
 8007bac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007bb0:	4931      	ldr	r1, [pc, #196]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007bb6:	4b30      	ldr	r3, [pc, #192]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	492d      	ldr	r1, [pc, #180]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bcc:	f023 0220 	bic.w	r2, r3, #32
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	4928      	ldr	r1, [pc, #160]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007bda:	4b27      	ldr	r3, [pc, #156]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bde:	4a26      	ldr	r2, [pc, #152]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007be0:	f023 0310 	bic.w	r3, r3, #16
 8007be4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007be6:	4b24      	ldr	r3, [pc, #144]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007be8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bea:	4b24      	ldr	r3, [pc, #144]	@ (8007c7c <RCCEx_PLL2_Config+0x160>)
 8007bec:	4013      	ands	r3, r2
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	69d2      	ldr	r2, [r2, #28]
 8007bf2:	00d2      	lsls	r2, r2, #3
 8007bf4:	4920      	ldr	r1, [pc, #128]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007c00:	f043 0310 	orr.w	r3, r3, #16
 8007c04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d106      	bne.n	8007c1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c10:	4a19      	ldr	r2, [pc, #100]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007c12:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c18:	e00f      	b.n	8007c3a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d106      	bne.n	8007c2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c20:	4b15      	ldr	r3, [pc, #84]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c24:	4a14      	ldr	r2, [pc, #80]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007c26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c2c:	e005      	b.n	8007c3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c2e:	4b12      	ldr	r3, [pc, #72]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c32:	4a11      	ldr	r2, [pc, #68]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007c34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007c40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c46:	f7f9 ffd1 	bl	8001bec <HAL_GetTick>
 8007c4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c4c:	e008      	b.n	8007c60 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c4e:	f7f9 ffcd 	bl	8001bec <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d901      	bls.n	8007c60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e006      	b.n	8007c6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c60:	4b05      	ldr	r3, [pc, #20]	@ (8007c78 <RCCEx_PLL2_Config+0x15c>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d0f0      	beq.n	8007c4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	58024400 	.word	0x58024400
 8007c7c:	ffff0007 	.word	0xffff0007

08007c80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c8e:	4b53      	ldr	r3, [pc, #332]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c92:	f003 0303 	and.w	r3, r3, #3
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	d101      	bne.n	8007c9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e099      	b.n	8007dd2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c9e:	4b4f      	ldr	r3, [pc, #316]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a4e      	ldr	r2, [pc, #312]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007ca4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007caa:	f7f9 ff9f 	bl	8001bec <HAL_GetTick>
 8007cae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cb0:	e008      	b.n	8007cc4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cb2:	f7f9 ff9b 	bl	8001bec <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d901      	bls.n	8007cc4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e086      	b.n	8007dd2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cc4:	4b45      	ldr	r3, [pc, #276]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1f0      	bne.n	8007cb2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007cd0:	4b42      	ldr	r3, [pc, #264]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	051b      	lsls	r3, r3, #20
 8007cde:	493f      	ldr	r1, [pc, #252]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	628b      	str	r3, [r1, #40]	@ 0x28
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	025b      	lsls	r3, r3, #9
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	431a      	orrs	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	041b      	lsls	r3, r3, #16
 8007d02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007d06:	431a      	orrs	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	061b      	lsls	r3, r3, #24
 8007d10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007d14:	4931      	ldr	r1, [pc, #196]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d1a:	4b30      	ldr	r3, [pc, #192]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	492d      	ldr	r1, [pc, #180]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d30:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	4928      	ldr	r1, [pc, #160]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d3e:	4b27      	ldr	r3, [pc, #156]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d42:	4a26      	ldr	r2, [pc, #152]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007d44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d4a:	4b24      	ldr	r3, [pc, #144]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007d4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d4e:	4b24      	ldr	r3, [pc, #144]	@ (8007de0 <RCCEx_PLL3_Config+0x160>)
 8007d50:	4013      	ands	r3, r2
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	69d2      	ldr	r2, [r2, #28]
 8007d56:	00d2      	lsls	r2, r2, #3
 8007d58:	4920      	ldr	r1, [pc, #128]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d62:	4a1e      	ldr	r2, [pc, #120]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d106      	bne.n	8007d7e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d70:	4b1a      	ldr	r3, [pc, #104]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d74:	4a19      	ldr	r2, [pc, #100]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007d76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d7c:	e00f      	b.n	8007d9e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d106      	bne.n	8007d92 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d84:	4b15      	ldr	r3, [pc, #84]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d88:	4a14      	ldr	r2, [pc, #80]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007d8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d90:	e005      	b.n	8007d9e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d92:	4b12      	ldr	r3, [pc, #72]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d96:	4a11      	ldr	r2, [pc, #68]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007d98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a0e      	ldr	r2, [pc, #56]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007da8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007daa:	f7f9 ff1f 	bl	8001bec <HAL_GetTick>
 8007dae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007db0:	e008      	b.n	8007dc4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007db2:	f7f9 ff1b 	bl	8001bec <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d901      	bls.n	8007dc4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e006      	b.n	8007dd2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007dc4:	4b05      	ldr	r3, [pc, #20]	@ (8007ddc <RCCEx_PLL3_Config+0x15c>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d0f0      	beq.n	8007db2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	58024400 	.word	0x58024400
 8007de0:	ffff0007 	.word	0xffff0007

08007de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e049      	b.n	8007e8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d106      	bne.n	8007e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7f9 fc80 	bl	8001710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2202      	movs	r2, #2
 8007e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	3304      	adds	r3, #4
 8007e20:	4619      	mov	r1, r3
 8007e22:	4610      	mov	r0, r2
 8007e24:	f000 f96e 	bl	8008104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b084      	sub	sp, #16
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	f003 0302 	and.w	r3, r3, #2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d020      	beq.n	8007ef6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f003 0302 	and.w	r3, r3, #2
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d01b      	beq.n	8007ef6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f06f 0202 	mvn.w	r2, #2
 8007ec6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	f003 0303 	and.w	r3, r3, #3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d003      	beq.n	8007ee4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f8f3 	bl	80080c8 <HAL_TIM_IC_CaptureCallback>
 8007ee2:	e005      	b.n	8007ef0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f8e5 	bl	80080b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f8f6 	bl	80080dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d020      	beq.n	8007f42 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f003 0304 	and.w	r3, r3, #4
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d01b      	beq.n	8007f42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f06f 0204 	mvn.w	r2, #4
 8007f12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d003      	beq.n	8007f30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f8cd 	bl	80080c8 <HAL_TIM_IC_CaptureCallback>
 8007f2e:	e005      	b.n	8007f3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f8bf 	bl	80080b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f8d0 	bl	80080dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	f003 0308 	and.w	r3, r3, #8
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d020      	beq.n	8007f8e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f003 0308 	and.w	r3, r3, #8
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d01b      	beq.n	8007f8e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f06f 0208 	mvn.w	r2, #8
 8007f5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2204      	movs	r2, #4
 8007f64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	69db      	ldr	r3, [r3, #28]
 8007f6c:	f003 0303 	and.w	r3, r3, #3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d003      	beq.n	8007f7c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f8a7 	bl	80080c8 <HAL_TIM_IC_CaptureCallback>
 8007f7a:	e005      	b.n	8007f88 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f899 	bl	80080b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f8aa 	bl	80080dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	f003 0310 	and.w	r3, r3, #16
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d020      	beq.n	8007fda <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f003 0310 	and.w	r3, r3, #16
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d01b      	beq.n	8007fda <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f06f 0210 	mvn.w	r2, #16
 8007faa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2208      	movs	r2, #8
 8007fb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	69db      	ldr	r3, [r3, #28]
 8007fb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d003      	beq.n	8007fc8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f881 	bl	80080c8 <HAL_TIM_IC_CaptureCallback>
 8007fc6:	e005      	b.n	8007fd4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f873 	bl	80080b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f884 	bl	80080dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00c      	beq.n	8007ffe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d007      	beq.n	8007ffe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f06f 0201 	mvn.w	r2, #1
 8007ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f851 	bl	80080a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008004:	2b00      	cmp	r3, #0
 8008006:	d104      	bne.n	8008012 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00c      	beq.n	800802c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008018:	2b00      	cmp	r3, #0
 800801a:	d007      	beq.n	800802c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f9a4 	bl	8008374 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00c      	beq.n	8008050 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800803c:	2b00      	cmp	r3, #0
 800803e:	d007      	beq.n	8008050 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f99c 	bl	8008388 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00c      	beq.n	8008074 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008060:	2b00      	cmp	r3, #0
 8008062:	d007      	beq.n	8008074 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800806c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f83e 	bl	80080f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00c      	beq.n	8008098 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f003 0320 	and.w	r3, r3, #32
 8008084:	2b00      	cmp	r3, #0
 8008086:	d007      	beq.n	8008098 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f06f 0220 	mvn.w	r2, #32
 8008090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f964 	bl	8008360 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008098:	bf00      	nop
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a43      	ldr	r2, [pc, #268]	@ (8008224 <TIM_Base_SetConfig+0x120>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d013      	beq.n	8008144 <TIM_Base_SetConfig+0x40>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008122:	d00f      	beq.n	8008144 <TIM_Base_SetConfig+0x40>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a40      	ldr	r2, [pc, #256]	@ (8008228 <TIM_Base_SetConfig+0x124>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d00b      	beq.n	8008144 <TIM_Base_SetConfig+0x40>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a3f      	ldr	r2, [pc, #252]	@ (800822c <TIM_Base_SetConfig+0x128>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d007      	beq.n	8008144 <TIM_Base_SetConfig+0x40>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a3e      	ldr	r2, [pc, #248]	@ (8008230 <TIM_Base_SetConfig+0x12c>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d003      	beq.n	8008144 <TIM_Base_SetConfig+0x40>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a3d      	ldr	r2, [pc, #244]	@ (8008234 <TIM_Base_SetConfig+0x130>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d108      	bne.n	8008156 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800814a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	4313      	orrs	r3, r2
 8008154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a32      	ldr	r2, [pc, #200]	@ (8008224 <TIM_Base_SetConfig+0x120>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d01f      	beq.n	800819e <TIM_Base_SetConfig+0x9a>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008164:	d01b      	beq.n	800819e <TIM_Base_SetConfig+0x9a>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a2f      	ldr	r2, [pc, #188]	@ (8008228 <TIM_Base_SetConfig+0x124>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d017      	beq.n	800819e <TIM_Base_SetConfig+0x9a>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a2e      	ldr	r2, [pc, #184]	@ (800822c <TIM_Base_SetConfig+0x128>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d013      	beq.n	800819e <TIM_Base_SetConfig+0x9a>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a2d      	ldr	r2, [pc, #180]	@ (8008230 <TIM_Base_SetConfig+0x12c>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d00f      	beq.n	800819e <TIM_Base_SetConfig+0x9a>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a2c      	ldr	r2, [pc, #176]	@ (8008234 <TIM_Base_SetConfig+0x130>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d00b      	beq.n	800819e <TIM_Base_SetConfig+0x9a>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a2b      	ldr	r2, [pc, #172]	@ (8008238 <TIM_Base_SetConfig+0x134>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d007      	beq.n	800819e <TIM_Base_SetConfig+0x9a>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a2a      	ldr	r2, [pc, #168]	@ (800823c <TIM_Base_SetConfig+0x138>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d003      	beq.n	800819e <TIM_Base_SetConfig+0x9a>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a29      	ldr	r2, [pc, #164]	@ (8008240 <TIM_Base_SetConfig+0x13c>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d108      	bne.n	80081b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	689a      	ldr	r2, [r3, #8]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a14      	ldr	r2, [pc, #80]	@ (8008224 <TIM_Base_SetConfig+0x120>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d00f      	beq.n	80081f6 <TIM_Base_SetConfig+0xf2>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a16      	ldr	r2, [pc, #88]	@ (8008234 <TIM_Base_SetConfig+0x130>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d00b      	beq.n	80081f6 <TIM_Base_SetConfig+0xf2>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a15      	ldr	r2, [pc, #84]	@ (8008238 <TIM_Base_SetConfig+0x134>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d007      	beq.n	80081f6 <TIM_Base_SetConfig+0xf2>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a14      	ldr	r2, [pc, #80]	@ (800823c <TIM_Base_SetConfig+0x138>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d003      	beq.n	80081f6 <TIM_Base_SetConfig+0xf2>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a13      	ldr	r2, [pc, #76]	@ (8008240 <TIM_Base_SetConfig+0x13c>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d103      	bne.n	80081fe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	691a      	ldr	r2, [r3, #16]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f043 0204 	orr.w	r2, r3, #4
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	601a      	str	r2, [r3, #0]
}
 8008216:	bf00      	nop
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	40010000 	.word	0x40010000
 8008228:	40000400 	.word	0x40000400
 800822c:	40000800 	.word	0x40000800
 8008230:	40000c00 	.word	0x40000c00
 8008234:	40010400 	.word	0x40010400
 8008238:	40014000 	.word	0x40014000
 800823c:	40014400 	.word	0x40014400
 8008240:	40014800 	.word	0x40014800

08008244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008254:	2b01      	cmp	r3, #1
 8008256:	d101      	bne.n	800825c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008258:	2302      	movs	r3, #2
 800825a:	e06d      	b.n	8008338 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2202      	movs	r2, #2
 8008268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a30      	ldr	r2, [pc, #192]	@ (8008344 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d004      	beq.n	8008290 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a2f      	ldr	r2, [pc, #188]	@ (8008348 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d108      	bne.n	80082a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008296:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a20      	ldr	r2, [pc, #128]	@ (8008344 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d022      	beq.n	800830c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082ce:	d01d      	beq.n	800830c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a1d      	ldr	r2, [pc, #116]	@ (800834c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d018      	beq.n	800830c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a1c      	ldr	r2, [pc, #112]	@ (8008350 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d013      	beq.n	800830c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a1a      	ldr	r2, [pc, #104]	@ (8008354 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d00e      	beq.n	800830c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a15      	ldr	r2, [pc, #84]	@ (8008348 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d009      	beq.n	800830c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a16      	ldr	r2, [pc, #88]	@ (8008358 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d004      	beq.n	800830c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a15      	ldr	r2, [pc, #84]	@ (800835c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d10c      	bne.n	8008326 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008312:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	4313      	orrs	r3, r2
 800831c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	40010000 	.word	0x40010000
 8008348:	40010400 	.word	0x40010400
 800834c:	40000400 	.word	0x40000400
 8008350:	40000800 	.word	0x40000800
 8008354:	40000c00 	.word	0x40000c00
 8008358:	40001800 	.word	0x40001800
 800835c:	40014000 	.word	0x40014000

08008360 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800837c:	bf00      	nop
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e042      	b.n	8008434 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d106      	bne.n	80083c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7f9 f9e5 	bl	8001790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2224      	movs	r2, #36	@ 0x24
 80083ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0201 	bic.w	r2, r2, #1
 80083dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d002      	beq.n	80083ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fd90 	bl	8008f0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f825 	bl	800843c <UART_SetConfig>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d101      	bne.n	80083fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e01b      	b.n	8008434 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800840a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	689a      	ldr	r2, [r3, #8]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800841a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f042 0201 	orr.w	r2, r2, #1
 800842a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fe0f 	bl	8009050 <UART_CheckIdleState>
 8008432:	4603      	mov	r3, r0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800843c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008440:	b092      	sub	sp, #72	@ 0x48
 8008442:	af00      	add	r7, sp, #0
 8008444:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	689a      	ldr	r2, [r3, #8]
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	431a      	orrs	r2, r3
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	431a      	orrs	r2, r3
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	69db      	ldr	r3, [r3, #28]
 8008460:	4313      	orrs	r3, r2
 8008462:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	4bbe      	ldr	r3, [pc, #760]	@ (8008764 <UART_SetConfig+0x328>)
 800846c:	4013      	ands	r3, r2
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	6812      	ldr	r2, [r2, #0]
 8008472:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008474:	430b      	orrs	r3, r1
 8008476:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	68da      	ldr	r2, [r3, #12]
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4ab3      	ldr	r2, [pc, #716]	@ (8008768 <UART_SetConfig+0x32c>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d004      	beq.n	80084a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084a4:	4313      	orrs	r3, r2
 80084a6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	689a      	ldr	r2, [r3, #8]
 80084ae:	4baf      	ldr	r3, [pc, #700]	@ (800876c <UART_SetConfig+0x330>)
 80084b0:	4013      	ands	r3, r2
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	6812      	ldr	r2, [r2, #0]
 80084b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80084b8:	430b      	orrs	r3, r1
 80084ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c2:	f023 010f 	bic.w	r1, r3, #15
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	430a      	orrs	r2, r1
 80084d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4aa6      	ldr	r2, [pc, #664]	@ (8008770 <UART_SetConfig+0x334>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d177      	bne.n	80085cc <UART_SetConfig+0x190>
 80084dc:	4ba5      	ldr	r3, [pc, #660]	@ (8008774 <UART_SetConfig+0x338>)
 80084de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084e4:	2b28      	cmp	r3, #40	@ 0x28
 80084e6:	d86d      	bhi.n	80085c4 <UART_SetConfig+0x188>
 80084e8:	a201      	add	r2, pc, #4	@ (adr r2, 80084f0 <UART_SetConfig+0xb4>)
 80084ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ee:	bf00      	nop
 80084f0:	08008595 	.word	0x08008595
 80084f4:	080085c5 	.word	0x080085c5
 80084f8:	080085c5 	.word	0x080085c5
 80084fc:	080085c5 	.word	0x080085c5
 8008500:	080085c5 	.word	0x080085c5
 8008504:	080085c5 	.word	0x080085c5
 8008508:	080085c5 	.word	0x080085c5
 800850c:	080085c5 	.word	0x080085c5
 8008510:	0800859d 	.word	0x0800859d
 8008514:	080085c5 	.word	0x080085c5
 8008518:	080085c5 	.word	0x080085c5
 800851c:	080085c5 	.word	0x080085c5
 8008520:	080085c5 	.word	0x080085c5
 8008524:	080085c5 	.word	0x080085c5
 8008528:	080085c5 	.word	0x080085c5
 800852c:	080085c5 	.word	0x080085c5
 8008530:	080085a5 	.word	0x080085a5
 8008534:	080085c5 	.word	0x080085c5
 8008538:	080085c5 	.word	0x080085c5
 800853c:	080085c5 	.word	0x080085c5
 8008540:	080085c5 	.word	0x080085c5
 8008544:	080085c5 	.word	0x080085c5
 8008548:	080085c5 	.word	0x080085c5
 800854c:	080085c5 	.word	0x080085c5
 8008550:	080085ad 	.word	0x080085ad
 8008554:	080085c5 	.word	0x080085c5
 8008558:	080085c5 	.word	0x080085c5
 800855c:	080085c5 	.word	0x080085c5
 8008560:	080085c5 	.word	0x080085c5
 8008564:	080085c5 	.word	0x080085c5
 8008568:	080085c5 	.word	0x080085c5
 800856c:	080085c5 	.word	0x080085c5
 8008570:	080085b5 	.word	0x080085b5
 8008574:	080085c5 	.word	0x080085c5
 8008578:	080085c5 	.word	0x080085c5
 800857c:	080085c5 	.word	0x080085c5
 8008580:	080085c5 	.word	0x080085c5
 8008584:	080085c5 	.word	0x080085c5
 8008588:	080085c5 	.word	0x080085c5
 800858c:	080085c5 	.word	0x080085c5
 8008590:	080085bd 	.word	0x080085bd
 8008594:	2301      	movs	r3, #1
 8008596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800859a:	e222      	b.n	80089e2 <UART_SetConfig+0x5a6>
 800859c:	2304      	movs	r3, #4
 800859e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a2:	e21e      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80085a4:	2308      	movs	r3, #8
 80085a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085aa:	e21a      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80085ac:	2310      	movs	r3, #16
 80085ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b2:	e216      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80085b4:	2320      	movs	r3, #32
 80085b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ba:	e212      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80085bc:	2340      	movs	r3, #64	@ 0x40
 80085be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085c2:	e20e      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80085c4:	2380      	movs	r3, #128	@ 0x80
 80085c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ca:	e20a      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a69      	ldr	r2, [pc, #420]	@ (8008778 <UART_SetConfig+0x33c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d130      	bne.n	8008638 <UART_SetConfig+0x1fc>
 80085d6:	4b67      	ldr	r3, [pc, #412]	@ (8008774 <UART_SetConfig+0x338>)
 80085d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085da:	f003 0307 	and.w	r3, r3, #7
 80085de:	2b05      	cmp	r3, #5
 80085e0:	d826      	bhi.n	8008630 <UART_SetConfig+0x1f4>
 80085e2:	a201      	add	r2, pc, #4	@ (adr r2, 80085e8 <UART_SetConfig+0x1ac>)
 80085e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e8:	08008601 	.word	0x08008601
 80085ec:	08008609 	.word	0x08008609
 80085f0:	08008611 	.word	0x08008611
 80085f4:	08008619 	.word	0x08008619
 80085f8:	08008621 	.word	0x08008621
 80085fc:	08008629 	.word	0x08008629
 8008600:	2300      	movs	r3, #0
 8008602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008606:	e1ec      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008608:	2304      	movs	r3, #4
 800860a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800860e:	e1e8      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008610:	2308      	movs	r3, #8
 8008612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008616:	e1e4      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008618:	2310      	movs	r3, #16
 800861a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800861e:	e1e0      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008620:	2320      	movs	r3, #32
 8008622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008626:	e1dc      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008628:	2340      	movs	r3, #64	@ 0x40
 800862a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800862e:	e1d8      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008630:	2380      	movs	r3, #128	@ 0x80
 8008632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008636:	e1d4      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a4f      	ldr	r2, [pc, #316]	@ (800877c <UART_SetConfig+0x340>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d130      	bne.n	80086a4 <UART_SetConfig+0x268>
 8008642:	4b4c      	ldr	r3, [pc, #304]	@ (8008774 <UART_SetConfig+0x338>)
 8008644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008646:	f003 0307 	and.w	r3, r3, #7
 800864a:	2b05      	cmp	r3, #5
 800864c:	d826      	bhi.n	800869c <UART_SetConfig+0x260>
 800864e:	a201      	add	r2, pc, #4	@ (adr r2, 8008654 <UART_SetConfig+0x218>)
 8008650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008654:	0800866d 	.word	0x0800866d
 8008658:	08008675 	.word	0x08008675
 800865c:	0800867d 	.word	0x0800867d
 8008660:	08008685 	.word	0x08008685
 8008664:	0800868d 	.word	0x0800868d
 8008668:	08008695 	.word	0x08008695
 800866c:	2300      	movs	r3, #0
 800866e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008672:	e1b6      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008674:	2304      	movs	r3, #4
 8008676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800867a:	e1b2      	b.n	80089e2 <UART_SetConfig+0x5a6>
 800867c:	2308      	movs	r3, #8
 800867e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008682:	e1ae      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008684:	2310      	movs	r3, #16
 8008686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800868a:	e1aa      	b.n	80089e2 <UART_SetConfig+0x5a6>
 800868c:	2320      	movs	r3, #32
 800868e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008692:	e1a6      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008694:	2340      	movs	r3, #64	@ 0x40
 8008696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800869a:	e1a2      	b.n	80089e2 <UART_SetConfig+0x5a6>
 800869c:	2380      	movs	r3, #128	@ 0x80
 800869e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086a2:	e19e      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a35      	ldr	r2, [pc, #212]	@ (8008780 <UART_SetConfig+0x344>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d130      	bne.n	8008710 <UART_SetConfig+0x2d4>
 80086ae:	4b31      	ldr	r3, [pc, #196]	@ (8008774 <UART_SetConfig+0x338>)
 80086b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086b2:	f003 0307 	and.w	r3, r3, #7
 80086b6:	2b05      	cmp	r3, #5
 80086b8:	d826      	bhi.n	8008708 <UART_SetConfig+0x2cc>
 80086ba:	a201      	add	r2, pc, #4	@ (adr r2, 80086c0 <UART_SetConfig+0x284>)
 80086bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c0:	080086d9 	.word	0x080086d9
 80086c4:	080086e1 	.word	0x080086e1
 80086c8:	080086e9 	.word	0x080086e9
 80086cc:	080086f1 	.word	0x080086f1
 80086d0:	080086f9 	.word	0x080086f9
 80086d4:	08008701 	.word	0x08008701
 80086d8:	2300      	movs	r3, #0
 80086da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086de:	e180      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80086e0:	2304      	movs	r3, #4
 80086e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086e6:	e17c      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80086e8:	2308      	movs	r3, #8
 80086ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ee:	e178      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80086f0:	2310      	movs	r3, #16
 80086f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086f6:	e174      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80086f8:	2320      	movs	r3, #32
 80086fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086fe:	e170      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008700:	2340      	movs	r3, #64	@ 0x40
 8008702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008706:	e16c      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008708:	2380      	movs	r3, #128	@ 0x80
 800870a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800870e:	e168      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a1b      	ldr	r2, [pc, #108]	@ (8008784 <UART_SetConfig+0x348>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d142      	bne.n	80087a0 <UART_SetConfig+0x364>
 800871a:	4b16      	ldr	r3, [pc, #88]	@ (8008774 <UART_SetConfig+0x338>)
 800871c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800871e:	f003 0307 	and.w	r3, r3, #7
 8008722:	2b05      	cmp	r3, #5
 8008724:	d838      	bhi.n	8008798 <UART_SetConfig+0x35c>
 8008726:	a201      	add	r2, pc, #4	@ (adr r2, 800872c <UART_SetConfig+0x2f0>)
 8008728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872c:	08008745 	.word	0x08008745
 8008730:	0800874d 	.word	0x0800874d
 8008734:	08008755 	.word	0x08008755
 8008738:	0800875d 	.word	0x0800875d
 800873c:	08008789 	.word	0x08008789
 8008740:	08008791 	.word	0x08008791
 8008744:	2300      	movs	r3, #0
 8008746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800874a:	e14a      	b.n	80089e2 <UART_SetConfig+0x5a6>
 800874c:	2304      	movs	r3, #4
 800874e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008752:	e146      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008754:	2308      	movs	r3, #8
 8008756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800875a:	e142      	b.n	80089e2 <UART_SetConfig+0x5a6>
 800875c:	2310      	movs	r3, #16
 800875e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008762:	e13e      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008764:	cfff69f3 	.word	0xcfff69f3
 8008768:	58000c00 	.word	0x58000c00
 800876c:	11fff4ff 	.word	0x11fff4ff
 8008770:	40011000 	.word	0x40011000
 8008774:	58024400 	.word	0x58024400
 8008778:	40004400 	.word	0x40004400
 800877c:	40004800 	.word	0x40004800
 8008780:	40004c00 	.word	0x40004c00
 8008784:	40005000 	.word	0x40005000
 8008788:	2320      	movs	r3, #32
 800878a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800878e:	e128      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008790:	2340      	movs	r3, #64	@ 0x40
 8008792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008796:	e124      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008798:	2380      	movs	r3, #128	@ 0x80
 800879a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800879e:	e120      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4acb      	ldr	r2, [pc, #812]	@ (8008ad4 <UART_SetConfig+0x698>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d176      	bne.n	8008898 <UART_SetConfig+0x45c>
 80087aa:	4bcb      	ldr	r3, [pc, #812]	@ (8008ad8 <UART_SetConfig+0x69c>)
 80087ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80087b2:	2b28      	cmp	r3, #40	@ 0x28
 80087b4:	d86c      	bhi.n	8008890 <UART_SetConfig+0x454>
 80087b6:	a201      	add	r2, pc, #4	@ (adr r2, 80087bc <UART_SetConfig+0x380>)
 80087b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087bc:	08008861 	.word	0x08008861
 80087c0:	08008891 	.word	0x08008891
 80087c4:	08008891 	.word	0x08008891
 80087c8:	08008891 	.word	0x08008891
 80087cc:	08008891 	.word	0x08008891
 80087d0:	08008891 	.word	0x08008891
 80087d4:	08008891 	.word	0x08008891
 80087d8:	08008891 	.word	0x08008891
 80087dc:	08008869 	.word	0x08008869
 80087e0:	08008891 	.word	0x08008891
 80087e4:	08008891 	.word	0x08008891
 80087e8:	08008891 	.word	0x08008891
 80087ec:	08008891 	.word	0x08008891
 80087f0:	08008891 	.word	0x08008891
 80087f4:	08008891 	.word	0x08008891
 80087f8:	08008891 	.word	0x08008891
 80087fc:	08008871 	.word	0x08008871
 8008800:	08008891 	.word	0x08008891
 8008804:	08008891 	.word	0x08008891
 8008808:	08008891 	.word	0x08008891
 800880c:	08008891 	.word	0x08008891
 8008810:	08008891 	.word	0x08008891
 8008814:	08008891 	.word	0x08008891
 8008818:	08008891 	.word	0x08008891
 800881c:	08008879 	.word	0x08008879
 8008820:	08008891 	.word	0x08008891
 8008824:	08008891 	.word	0x08008891
 8008828:	08008891 	.word	0x08008891
 800882c:	08008891 	.word	0x08008891
 8008830:	08008891 	.word	0x08008891
 8008834:	08008891 	.word	0x08008891
 8008838:	08008891 	.word	0x08008891
 800883c:	08008881 	.word	0x08008881
 8008840:	08008891 	.word	0x08008891
 8008844:	08008891 	.word	0x08008891
 8008848:	08008891 	.word	0x08008891
 800884c:	08008891 	.word	0x08008891
 8008850:	08008891 	.word	0x08008891
 8008854:	08008891 	.word	0x08008891
 8008858:	08008891 	.word	0x08008891
 800885c:	08008889 	.word	0x08008889
 8008860:	2301      	movs	r3, #1
 8008862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008866:	e0bc      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008868:	2304      	movs	r3, #4
 800886a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800886e:	e0b8      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008870:	2308      	movs	r3, #8
 8008872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008876:	e0b4      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008878:	2310      	movs	r3, #16
 800887a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800887e:	e0b0      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008880:	2320      	movs	r3, #32
 8008882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008886:	e0ac      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008888:	2340      	movs	r3, #64	@ 0x40
 800888a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800888e:	e0a8      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008890:	2380      	movs	r3, #128	@ 0x80
 8008892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008896:	e0a4      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a8f      	ldr	r2, [pc, #572]	@ (8008adc <UART_SetConfig+0x6a0>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d130      	bne.n	8008904 <UART_SetConfig+0x4c8>
 80088a2:	4b8d      	ldr	r3, [pc, #564]	@ (8008ad8 <UART_SetConfig+0x69c>)
 80088a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088a6:	f003 0307 	and.w	r3, r3, #7
 80088aa:	2b05      	cmp	r3, #5
 80088ac:	d826      	bhi.n	80088fc <UART_SetConfig+0x4c0>
 80088ae:	a201      	add	r2, pc, #4	@ (adr r2, 80088b4 <UART_SetConfig+0x478>)
 80088b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b4:	080088cd 	.word	0x080088cd
 80088b8:	080088d5 	.word	0x080088d5
 80088bc:	080088dd 	.word	0x080088dd
 80088c0:	080088e5 	.word	0x080088e5
 80088c4:	080088ed 	.word	0x080088ed
 80088c8:	080088f5 	.word	0x080088f5
 80088cc:	2300      	movs	r3, #0
 80088ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d2:	e086      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80088d4:	2304      	movs	r3, #4
 80088d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088da:	e082      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80088dc:	2308      	movs	r3, #8
 80088de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e2:	e07e      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80088e4:	2310      	movs	r3, #16
 80088e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ea:	e07a      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80088ec:	2320      	movs	r3, #32
 80088ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f2:	e076      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80088f4:	2340      	movs	r3, #64	@ 0x40
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fa:	e072      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80088fc:	2380      	movs	r3, #128	@ 0x80
 80088fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008902:	e06e      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a75      	ldr	r2, [pc, #468]	@ (8008ae0 <UART_SetConfig+0x6a4>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d130      	bne.n	8008970 <UART_SetConfig+0x534>
 800890e:	4b72      	ldr	r3, [pc, #456]	@ (8008ad8 <UART_SetConfig+0x69c>)
 8008910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008912:	f003 0307 	and.w	r3, r3, #7
 8008916:	2b05      	cmp	r3, #5
 8008918:	d826      	bhi.n	8008968 <UART_SetConfig+0x52c>
 800891a:	a201      	add	r2, pc, #4	@ (adr r2, 8008920 <UART_SetConfig+0x4e4>)
 800891c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008920:	08008939 	.word	0x08008939
 8008924:	08008941 	.word	0x08008941
 8008928:	08008949 	.word	0x08008949
 800892c:	08008951 	.word	0x08008951
 8008930:	08008959 	.word	0x08008959
 8008934:	08008961 	.word	0x08008961
 8008938:	2300      	movs	r3, #0
 800893a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893e:	e050      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008940:	2304      	movs	r3, #4
 8008942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008946:	e04c      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008948:	2308      	movs	r3, #8
 800894a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800894e:	e048      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008950:	2310      	movs	r3, #16
 8008952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008956:	e044      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008958:	2320      	movs	r3, #32
 800895a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895e:	e040      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008960:	2340      	movs	r3, #64	@ 0x40
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008966:	e03c      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008968:	2380      	movs	r3, #128	@ 0x80
 800896a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800896e:	e038      	b.n	80089e2 <UART_SetConfig+0x5a6>
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a5b      	ldr	r2, [pc, #364]	@ (8008ae4 <UART_SetConfig+0x6a8>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d130      	bne.n	80089dc <UART_SetConfig+0x5a0>
 800897a:	4b57      	ldr	r3, [pc, #348]	@ (8008ad8 <UART_SetConfig+0x69c>)
 800897c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800897e:	f003 0307 	and.w	r3, r3, #7
 8008982:	2b05      	cmp	r3, #5
 8008984:	d826      	bhi.n	80089d4 <UART_SetConfig+0x598>
 8008986:	a201      	add	r2, pc, #4	@ (adr r2, 800898c <UART_SetConfig+0x550>)
 8008988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800898c:	080089a5 	.word	0x080089a5
 8008990:	080089ad 	.word	0x080089ad
 8008994:	080089b5 	.word	0x080089b5
 8008998:	080089bd 	.word	0x080089bd
 800899c:	080089c5 	.word	0x080089c5
 80089a0:	080089cd 	.word	0x080089cd
 80089a4:	2302      	movs	r3, #2
 80089a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089aa:	e01a      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80089ac:	2304      	movs	r3, #4
 80089ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089b2:	e016      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80089b4:	2308      	movs	r3, #8
 80089b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ba:	e012      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80089bc:	2310      	movs	r3, #16
 80089be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089c2:	e00e      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80089c4:	2320      	movs	r3, #32
 80089c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ca:	e00a      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80089cc:	2340      	movs	r3, #64	@ 0x40
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089d2:	e006      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80089d4:	2380      	movs	r3, #128	@ 0x80
 80089d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089da:	e002      	b.n	80089e2 <UART_SetConfig+0x5a6>
 80089dc:	2380      	movs	r3, #128	@ 0x80
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a3f      	ldr	r2, [pc, #252]	@ (8008ae4 <UART_SetConfig+0x6a8>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	f040 80f8 	bne.w	8008bde <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089ee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80089f2:	2b20      	cmp	r3, #32
 80089f4:	dc46      	bgt.n	8008a84 <UART_SetConfig+0x648>
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	f2c0 8082 	blt.w	8008b00 <UART_SetConfig+0x6c4>
 80089fc:	3b02      	subs	r3, #2
 80089fe:	2b1e      	cmp	r3, #30
 8008a00:	d87e      	bhi.n	8008b00 <UART_SetConfig+0x6c4>
 8008a02:	a201      	add	r2, pc, #4	@ (adr r2, 8008a08 <UART_SetConfig+0x5cc>)
 8008a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a08:	08008a8b 	.word	0x08008a8b
 8008a0c:	08008b01 	.word	0x08008b01
 8008a10:	08008a93 	.word	0x08008a93
 8008a14:	08008b01 	.word	0x08008b01
 8008a18:	08008b01 	.word	0x08008b01
 8008a1c:	08008b01 	.word	0x08008b01
 8008a20:	08008aa3 	.word	0x08008aa3
 8008a24:	08008b01 	.word	0x08008b01
 8008a28:	08008b01 	.word	0x08008b01
 8008a2c:	08008b01 	.word	0x08008b01
 8008a30:	08008b01 	.word	0x08008b01
 8008a34:	08008b01 	.word	0x08008b01
 8008a38:	08008b01 	.word	0x08008b01
 8008a3c:	08008b01 	.word	0x08008b01
 8008a40:	08008ab3 	.word	0x08008ab3
 8008a44:	08008b01 	.word	0x08008b01
 8008a48:	08008b01 	.word	0x08008b01
 8008a4c:	08008b01 	.word	0x08008b01
 8008a50:	08008b01 	.word	0x08008b01
 8008a54:	08008b01 	.word	0x08008b01
 8008a58:	08008b01 	.word	0x08008b01
 8008a5c:	08008b01 	.word	0x08008b01
 8008a60:	08008b01 	.word	0x08008b01
 8008a64:	08008b01 	.word	0x08008b01
 8008a68:	08008b01 	.word	0x08008b01
 8008a6c:	08008b01 	.word	0x08008b01
 8008a70:	08008b01 	.word	0x08008b01
 8008a74:	08008b01 	.word	0x08008b01
 8008a78:	08008b01 	.word	0x08008b01
 8008a7c:	08008b01 	.word	0x08008b01
 8008a80:	08008af3 	.word	0x08008af3
 8008a84:	2b40      	cmp	r3, #64	@ 0x40
 8008a86:	d037      	beq.n	8008af8 <UART_SetConfig+0x6bc>
 8008a88:	e03a      	b.n	8008b00 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a8a:	f7fe fc37 	bl	80072fc <HAL_RCCEx_GetD3PCLK1Freq>
 8008a8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a90:	e03c      	b.n	8008b0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fe fc46 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aa0:	e034      	b.n	8008b0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aa2:	f107 0318 	add.w	r3, r7, #24
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fe fd92 	bl	80075d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ab0:	e02c      	b.n	8008b0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ab2:	4b09      	ldr	r3, [pc, #36]	@ (8008ad8 <UART_SetConfig+0x69c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 0320 	and.w	r3, r3, #32
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d016      	beq.n	8008aec <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008abe:	4b06      	ldr	r3, [pc, #24]	@ (8008ad8 <UART_SetConfig+0x69c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	08db      	lsrs	r3, r3, #3
 8008ac4:	f003 0303 	and.w	r3, r3, #3
 8008ac8:	4a07      	ldr	r2, [pc, #28]	@ (8008ae8 <UART_SetConfig+0x6ac>)
 8008aca:	fa22 f303 	lsr.w	r3, r2, r3
 8008ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ad0:	e01c      	b.n	8008b0c <UART_SetConfig+0x6d0>
 8008ad2:	bf00      	nop
 8008ad4:	40011400 	.word	0x40011400
 8008ad8:	58024400 	.word	0x58024400
 8008adc:	40007800 	.word	0x40007800
 8008ae0:	40007c00 	.word	0x40007c00
 8008ae4:	58000c00 	.word	0x58000c00
 8008ae8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008aec:	4b9d      	ldr	r3, [pc, #628]	@ (8008d64 <UART_SetConfig+0x928>)
 8008aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af0:	e00c      	b.n	8008b0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008af2:	4b9d      	ldr	r3, [pc, #628]	@ (8008d68 <UART_SetConfig+0x92c>)
 8008af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af6:	e009      	b.n	8008b0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008af8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008afe:	e005      	b.n	8008b0c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008b00:	2300      	movs	r3, #0
 8008b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008b0a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f000 81de 	beq.w	8008ed0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b18:	4a94      	ldr	r2, [pc, #592]	@ (8008d6c <UART_SetConfig+0x930>)
 8008b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b22:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b26:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	005b      	lsls	r3, r3, #1
 8008b30:	4413      	add	r3, r2
 8008b32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d305      	bcc.n	8008b44 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d903      	bls.n	8008b4c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008b4a:	e1c1      	b.n	8008ed0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b4e:	2200      	movs	r2, #0
 8008b50:	60bb      	str	r3, [r7, #8]
 8008b52:	60fa      	str	r2, [r7, #12]
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b58:	4a84      	ldr	r2, [pc, #528]	@ (8008d6c <UART_SetConfig+0x930>)
 8008b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	2200      	movs	r2, #0
 8008b62:	603b      	str	r3, [r7, #0]
 8008b64:	607a      	str	r2, [r7, #4]
 8008b66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b6e:	f7f7 fbb3 	bl	80002d8 <__aeabi_uldivmod>
 8008b72:	4602      	mov	r2, r0
 8008b74:	460b      	mov	r3, r1
 8008b76:	4610      	mov	r0, r2
 8008b78:	4619      	mov	r1, r3
 8008b7a:	f04f 0200 	mov.w	r2, #0
 8008b7e:	f04f 0300 	mov.w	r3, #0
 8008b82:	020b      	lsls	r3, r1, #8
 8008b84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b88:	0202      	lsls	r2, r0, #8
 8008b8a:	6979      	ldr	r1, [r7, #20]
 8008b8c:	6849      	ldr	r1, [r1, #4]
 8008b8e:	0849      	lsrs	r1, r1, #1
 8008b90:	2000      	movs	r0, #0
 8008b92:	460c      	mov	r4, r1
 8008b94:	4605      	mov	r5, r0
 8008b96:	eb12 0804 	adds.w	r8, r2, r4
 8008b9a:	eb43 0905 	adc.w	r9, r3, r5
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	469a      	mov	sl, r3
 8008ba6:	4693      	mov	fp, r2
 8008ba8:	4652      	mov	r2, sl
 8008baa:	465b      	mov	r3, fp
 8008bac:	4640      	mov	r0, r8
 8008bae:	4649      	mov	r1, r9
 8008bb0:	f7f7 fb92 	bl	80002d8 <__aeabi_uldivmod>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	4613      	mov	r3, r2
 8008bba:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bc2:	d308      	bcc.n	8008bd6 <UART_SetConfig+0x79a>
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bca:	d204      	bcs.n	8008bd6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008bd2:	60da      	str	r2, [r3, #12]
 8008bd4:	e17c      	b.n	8008ed0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008bdc:	e178      	b.n	8008ed0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	69db      	ldr	r3, [r3, #28]
 8008be2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008be6:	f040 80c5 	bne.w	8008d74 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008bea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008bee:	2b20      	cmp	r3, #32
 8008bf0:	dc48      	bgt.n	8008c84 <UART_SetConfig+0x848>
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	db7b      	blt.n	8008cee <UART_SetConfig+0x8b2>
 8008bf6:	2b20      	cmp	r3, #32
 8008bf8:	d879      	bhi.n	8008cee <UART_SetConfig+0x8b2>
 8008bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8008c00 <UART_SetConfig+0x7c4>)
 8008bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c00:	08008c8b 	.word	0x08008c8b
 8008c04:	08008c93 	.word	0x08008c93
 8008c08:	08008cef 	.word	0x08008cef
 8008c0c:	08008cef 	.word	0x08008cef
 8008c10:	08008c9b 	.word	0x08008c9b
 8008c14:	08008cef 	.word	0x08008cef
 8008c18:	08008cef 	.word	0x08008cef
 8008c1c:	08008cef 	.word	0x08008cef
 8008c20:	08008cab 	.word	0x08008cab
 8008c24:	08008cef 	.word	0x08008cef
 8008c28:	08008cef 	.word	0x08008cef
 8008c2c:	08008cef 	.word	0x08008cef
 8008c30:	08008cef 	.word	0x08008cef
 8008c34:	08008cef 	.word	0x08008cef
 8008c38:	08008cef 	.word	0x08008cef
 8008c3c:	08008cef 	.word	0x08008cef
 8008c40:	08008cbb 	.word	0x08008cbb
 8008c44:	08008cef 	.word	0x08008cef
 8008c48:	08008cef 	.word	0x08008cef
 8008c4c:	08008cef 	.word	0x08008cef
 8008c50:	08008cef 	.word	0x08008cef
 8008c54:	08008cef 	.word	0x08008cef
 8008c58:	08008cef 	.word	0x08008cef
 8008c5c:	08008cef 	.word	0x08008cef
 8008c60:	08008cef 	.word	0x08008cef
 8008c64:	08008cef 	.word	0x08008cef
 8008c68:	08008cef 	.word	0x08008cef
 8008c6c:	08008cef 	.word	0x08008cef
 8008c70:	08008cef 	.word	0x08008cef
 8008c74:	08008cef 	.word	0x08008cef
 8008c78:	08008cef 	.word	0x08008cef
 8008c7c:	08008cef 	.word	0x08008cef
 8008c80:	08008ce1 	.word	0x08008ce1
 8008c84:	2b40      	cmp	r3, #64	@ 0x40
 8008c86:	d02e      	beq.n	8008ce6 <UART_SetConfig+0x8aa>
 8008c88:	e031      	b.n	8008cee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c8a:	f7fc fb81 	bl	8005390 <HAL_RCC_GetPCLK1Freq>
 8008c8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c90:	e033      	b.n	8008cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c92:	f7fc fb93 	bl	80053bc <HAL_RCC_GetPCLK2Freq>
 8008c96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c98:	e02f      	b.n	8008cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fe fb42 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ca8:	e027      	b.n	8008cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008caa:	f107 0318 	add.w	r3, r7, #24
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fe fc8e 	bl	80075d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cb8:	e01f      	b.n	8008cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cba:	4b2d      	ldr	r3, [pc, #180]	@ (8008d70 <UART_SetConfig+0x934>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 0320 	and.w	r3, r3, #32
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d009      	beq.n	8008cda <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8008d70 <UART_SetConfig+0x934>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	08db      	lsrs	r3, r3, #3
 8008ccc:	f003 0303 	and.w	r3, r3, #3
 8008cd0:	4a24      	ldr	r2, [pc, #144]	@ (8008d64 <UART_SetConfig+0x928>)
 8008cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008cd8:	e00f      	b.n	8008cfa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008cda:	4b22      	ldr	r3, [pc, #136]	@ (8008d64 <UART_SetConfig+0x928>)
 8008cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cde:	e00c      	b.n	8008cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ce0:	4b21      	ldr	r3, [pc, #132]	@ (8008d68 <UART_SetConfig+0x92c>)
 8008ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ce4:	e009      	b.n	8008cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ce6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cec:	e005      	b.n	8008cfa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008cf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f000 80e7 	beq.w	8008ed0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d06:	4a19      	ldr	r2, [pc, #100]	@ (8008d6c <UART_SetConfig+0x930>)
 8008d08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d10:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d14:	005a      	lsls	r2, r3, #1
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	085b      	lsrs	r3, r3, #1
 8008d1c:	441a      	add	r2, r3
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d26:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2a:	2b0f      	cmp	r3, #15
 8008d2c:	d916      	bls.n	8008d5c <UART_SetConfig+0x920>
 8008d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d34:	d212      	bcs.n	8008d5c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	f023 030f 	bic.w	r3, r3, #15
 8008d3e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d42:	085b      	lsrs	r3, r3, #1
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	f003 0307 	and.w	r3, r3, #7
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008d58:	60da      	str	r2, [r3, #12]
 8008d5a:	e0b9      	b.n	8008ed0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008d62:	e0b5      	b.n	8008ed0 <UART_SetConfig+0xa94>
 8008d64:	03d09000 	.word	0x03d09000
 8008d68:	003d0900 	.word	0x003d0900
 8008d6c:	080095dc 	.word	0x080095dc
 8008d70:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d74:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008d78:	2b20      	cmp	r3, #32
 8008d7a:	dc49      	bgt.n	8008e10 <UART_SetConfig+0x9d4>
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	db7c      	blt.n	8008e7a <UART_SetConfig+0xa3e>
 8008d80:	2b20      	cmp	r3, #32
 8008d82:	d87a      	bhi.n	8008e7a <UART_SetConfig+0xa3e>
 8008d84:	a201      	add	r2, pc, #4	@ (adr r2, 8008d8c <UART_SetConfig+0x950>)
 8008d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8a:	bf00      	nop
 8008d8c:	08008e17 	.word	0x08008e17
 8008d90:	08008e1f 	.word	0x08008e1f
 8008d94:	08008e7b 	.word	0x08008e7b
 8008d98:	08008e7b 	.word	0x08008e7b
 8008d9c:	08008e27 	.word	0x08008e27
 8008da0:	08008e7b 	.word	0x08008e7b
 8008da4:	08008e7b 	.word	0x08008e7b
 8008da8:	08008e7b 	.word	0x08008e7b
 8008dac:	08008e37 	.word	0x08008e37
 8008db0:	08008e7b 	.word	0x08008e7b
 8008db4:	08008e7b 	.word	0x08008e7b
 8008db8:	08008e7b 	.word	0x08008e7b
 8008dbc:	08008e7b 	.word	0x08008e7b
 8008dc0:	08008e7b 	.word	0x08008e7b
 8008dc4:	08008e7b 	.word	0x08008e7b
 8008dc8:	08008e7b 	.word	0x08008e7b
 8008dcc:	08008e47 	.word	0x08008e47
 8008dd0:	08008e7b 	.word	0x08008e7b
 8008dd4:	08008e7b 	.word	0x08008e7b
 8008dd8:	08008e7b 	.word	0x08008e7b
 8008ddc:	08008e7b 	.word	0x08008e7b
 8008de0:	08008e7b 	.word	0x08008e7b
 8008de4:	08008e7b 	.word	0x08008e7b
 8008de8:	08008e7b 	.word	0x08008e7b
 8008dec:	08008e7b 	.word	0x08008e7b
 8008df0:	08008e7b 	.word	0x08008e7b
 8008df4:	08008e7b 	.word	0x08008e7b
 8008df8:	08008e7b 	.word	0x08008e7b
 8008dfc:	08008e7b 	.word	0x08008e7b
 8008e00:	08008e7b 	.word	0x08008e7b
 8008e04:	08008e7b 	.word	0x08008e7b
 8008e08:	08008e7b 	.word	0x08008e7b
 8008e0c:	08008e6d 	.word	0x08008e6d
 8008e10:	2b40      	cmp	r3, #64	@ 0x40
 8008e12:	d02e      	beq.n	8008e72 <UART_SetConfig+0xa36>
 8008e14:	e031      	b.n	8008e7a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e16:	f7fc fabb 	bl	8005390 <HAL_RCC_GetPCLK1Freq>
 8008e1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e1c:	e033      	b.n	8008e86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e1e:	f7fc facd 	bl	80053bc <HAL_RCC_GetPCLK2Freq>
 8008e22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e24:	e02f      	b.n	8008e86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fe fa7c 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e34:	e027      	b.n	8008e86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e36:	f107 0318 	add.w	r3, r7, #24
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fe fbc8 	bl	80075d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e44:	e01f      	b.n	8008e86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e46:	4b2d      	ldr	r3, [pc, #180]	@ (8008efc <UART_SetConfig+0xac0>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 0320 	and.w	r3, r3, #32
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d009      	beq.n	8008e66 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e52:	4b2a      	ldr	r3, [pc, #168]	@ (8008efc <UART_SetConfig+0xac0>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	08db      	lsrs	r3, r3, #3
 8008e58:	f003 0303 	and.w	r3, r3, #3
 8008e5c:	4a28      	ldr	r2, [pc, #160]	@ (8008f00 <UART_SetConfig+0xac4>)
 8008e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e64:	e00f      	b.n	8008e86 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008e66:	4b26      	ldr	r3, [pc, #152]	@ (8008f00 <UART_SetConfig+0xac4>)
 8008e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e6a:	e00c      	b.n	8008e86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e6c:	4b25      	ldr	r3, [pc, #148]	@ (8008f04 <UART_SetConfig+0xac8>)
 8008e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e70:	e009      	b.n	8008e86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e78:	e005      	b.n	8008e86 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008e84:	bf00      	nop
    }

    if (pclk != 0U)
 8008e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d021      	beq.n	8008ed0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e90:	4a1d      	ldr	r2, [pc, #116]	@ (8008f08 <UART_SetConfig+0xacc>)
 8008e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e96:	461a      	mov	r2, r3
 8008e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	085b      	lsrs	r3, r3, #1
 8008ea4:	441a      	add	r2, r3
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb2:	2b0f      	cmp	r3, #15
 8008eb4:	d909      	bls.n	8008eca <UART_SetConfig+0xa8e>
 8008eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ebc:	d205      	bcs.n	8008eca <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	60da      	str	r2, [r3, #12]
 8008ec8:	e002      	b.n	8008ed0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008eec:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3748      	adds	r7, #72	@ 0x48
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008efa:	bf00      	nop
 8008efc:	58024400 	.word	0x58024400
 8008f00:	03d09000 	.word	0x03d09000
 8008f04:	003d0900 	.word	0x003d0900
 8008f08:	080095dc 	.word	0x080095dc

08008f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f18:	f003 0308 	and.w	r3, r3, #8
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00a      	beq.n	8008f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f3a:	f003 0301 	and.w	r3, r3, #1
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00a      	beq.n	8008f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	430a      	orrs	r2, r1
 8008f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f5c:	f003 0302 	and.w	r3, r3, #2
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00a      	beq.n	8008f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	430a      	orrs	r2, r1
 8008f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f7e:	f003 0304 	and.w	r3, r3, #4
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00a      	beq.n	8008f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	430a      	orrs	r2, r1
 8008f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa0:	f003 0310 	and.w	r3, r3, #16
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00a      	beq.n	8008fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc2:	f003 0320 	and.w	r3, r3, #32
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00a      	beq.n	8008fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	430a      	orrs	r2, r1
 8008fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d01a      	beq.n	8009022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	430a      	orrs	r2, r1
 8009000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009006:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800900a:	d10a      	bne.n	8009022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	430a      	orrs	r2, r1
 8009020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00a      	beq.n	8009044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	430a      	orrs	r2, r1
 8009042:	605a      	str	r2, [r3, #4]
  }
}
 8009044:	bf00      	nop
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b098      	sub	sp, #96	@ 0x60
 8009054:	af02      	add	r7, sp, #8
 8009056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009060:	f7f8 fdc4 	bl	8001bec <HAL_GetTick>
 8009064:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0308 	and.w	r3, r3, #8
 8009070:	2b08      	cmp	r3, #8
 8009072:	d12f      	bne.n	80090d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009074:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800907c:	2200      	movs	r2, #0
 800907e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f88e 	bl	80091a4 <UART_WaitOnFlagUntilTimeout>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d022      	beq.n	80090d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009096:	e853 3f00 	ldrex	r3, [r3]
 800909a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800909c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800909e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	461a      	mov	r2, r3
 80090aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80090ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090b4:	e841 2300 	strex	r3, r2, [r1]
 80090b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1e6      	bne.n	800908e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2220      	movs	r2, #32
 80090c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090d0:	2303      	movs	r3, #3
 80090d2:	e063      	b.n	800919c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 0304 	and.w	r3, r3, #4
 80090de:	2b04      	cmp	r3, #4
 80090e0:	d149      	bne.n	8009176 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090ea:	2200      	movs	r2, #0
 80090ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f857 	bl	80091a4 <UART_WaitOnFlagUntilTimeout>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d03c      	beq.n	8009176 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009104:	e853 3f00 	ldrex	r3, [r3]
 8009108:	623b      	str	r3, [r7, #32]
   return(result);
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009110:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	461a      	mov	r2, r3
 8009118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800911a:	633b      	str	r3, [r7, #48]	@ 0x30
 800911c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009122:	e841 2300 	strex	r3, r2, [r1]
 8009126:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1e6      	bne.n	80090fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	3308      	adds	r3, #8
 8009134:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	e853 3f00 	ldrex	r3, [r3]
 800913c:	60fb      	str	r3, [r7, #12]
   return(result);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f023 0301 	bic.w	r3, r3, #1
 8009144:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3308      	adds	r3, #8
 800914c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800914e:	61fa      	str	r2, [r7, #28]
 8009150:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009152:	69b9      	ldr	r1, [r7, #24]
 8009154:	69fa      	ldr	r2, [r7, #28]
 8009156:	e841 2300 	strex	r3, r2, [r1]
 800915a:	617b      	str	r3, [r7, #20]
   return(result);
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1e5      	bne.n	800912e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2220      	movs	r2, #32
 8009166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	e012      	b.n	800919c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2220      	movs	r2, #32
 800917a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2220      	movs	r2, #32
 8009182:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3758      	adds	r7, #88	@ 0x58
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	603b      	str	r3, [r7, #0]
 80091b0:	4613      	mov	r3, r2
 80091b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091b4:	e04f      	b.n	8009256 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091bc:	d04b      	beq.n	8009256 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091be:	f7f8 fd15 	bl	8001bec <HAL_GetTick>
 80091c2:	4602      	mov	r2, r0
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	69ba      	ldr	r2, [r7, #24]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d302      	bcc.n	80091d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d101      	bne.n	80091d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80091d4:	2303      	movs	r3, #3
 80091d6:	e04e      	b.n	8009276 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 0304 	and.w	r3, r3, #4
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d037      	beq.n	8009256 <UART_WaitOnFlagUntilTimeout+0xb2>
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	2b80      	cmp	r3, #128	@ 0x80
 80091ea:	d034      	beq.n	8009256 <UART_WaitOnFlagUntilTimeout+0xb2>
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2b40      	cmp	r3, #64	@ 0x40
 80091f0:	d031      	beq.n	8009256 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	69db      	ldr	r3, [r3, #28]
 80091f8:	f003 0308 	and.w	r3, r3, #8
 80091fc:	2b08      	cmp	r3, #8
 80091fe:	d110      	bne.n	8009222 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2208      	movs	r2, #8
 8009206:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f000 f839 	bl	8009280 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2208      	movs	r2, #8
 8009212:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e029      	b.n	8009276 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	69db      	ldr	r3, [r3, #28]
 8009228:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800922c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009230:	d111      	bne.n	8009256 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800923a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f000 f81f 	bl	8009280 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2220      	movs	r2, #32
 8009246:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009252:	2303      	movs	r3, #3
 8009254:	e00f      	b.n	8009276 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	69da      	ldr	r2, [r3, #28]
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	4013      	ands	r3, r2
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	429a      	cmp	r2, r3
 8009264:	bf0c      	ite	eq
 8009266:	2301      	moveq	r3, #1
 8009268:	2300      	movne	r3, #0
 800926a:	b2db      	uxtb	r3, r3
 800926c:	461a      	mov	r2, r3
 800926e:	79fb      	ldrb	r3, [r7, #7]
 8009270:	429a      	cmp	r2, r3
 8009272:	d0a0      	beq.n	80091b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
	...

08009280 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009280:	b480      	push	{r7}
 8009282:	b095      	sub	sp, #84	@ 0x54
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009290:	e853 3f00 	ldrex	r3, [r3]
 8009294:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009298:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800929c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	461a      	mov	r2, r3
 80092a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80092a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80092ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80092ae:	e841 2300 	strex	r3, r2, [r1]
 80092b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1e6      	bne.n	8009288 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	3308      	adds	r3, #8
 80092c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c2:	6a3b      	ldr	r3, [r7, #32]
 80092c4:	e853 3f00 	ldrex	r3, [r3]
 80092c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80092ca:	69fa      	ldr	r2, [r7, #28]
 80092cc:	4b1e      	ldr	r3, [pc, #120]	@ (8009348 <UART_EndRxTransfer+0xc8>)
 80092ce:	4013      	ands	r3, r2
 80092d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3308      	adds	r3, #8
 80092d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092e2:	e841 2300 	strex	r3, r2, [r1]
 80092e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1e5      	bne.n	80092ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d118      	bne.n	8009328 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	e853 3f00 	ldrex	r3, [r3]
 8009302:	60bb      	str	r3, [r7, #8]
   return(result);
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	f023 0310 	bic.w	r3, r3, #16
 800930a:	647b      	str	r3, [r7, #68]	@ 0x44
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	461a      	mov	r2, r3
 8009312:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009314:	61bb      	str	r3, [r7, #24]
 8009316:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009318:	6979      	ldr	r1, [r7, #20]
 800931a:	69ba      	ldr	r2, [r7, #24]
 800931c:	e841 2300 	strex	r3, r2, [r1]
 8009320:	613b      	str	r3, [r7, #16]
   return(result);
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1e6      	bne.n	80092f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2220      	movs	r2, #32
 800932c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800933c:	bf00      	nop
 800933e:	3754      	adds	r7, #84	@ 0x54
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr
 8009348:	effffffe 	.word	0xeffffffe

0800934c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800935a:	2b01      	cmp	r3, #1
 800935c:	d101      	bne.n	8009362 <HAL_UARTEx_DisableFifoMode+0x16>
 800935e:	2302      	movs	r3, #2
 8009360:	e027      	b.n	80093b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2201      	movs	r2, #1
 8009366:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2224      	movs	r2, #36	@ 0x24
 800936e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f022 0201 	bic.w	r2, r2, #1
 8009388:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009390:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2220      	movs	r2, #32
 80093a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3714      	adds	r7, #20
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr

080093be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b084      	sub	sp, #16
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d101      	bne.n	80093d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80093d2:	2302      	movs	r3, #2
 80093d4:	e02d      	b.n	8009432 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2201      	movs	r2, #1
 80093da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2224      	movs	r2, #36	@ 0x24
 80093e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f022 0201 	bic.w	r2, r2, #1
 80093fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	430a      	orrs	r2, r1
 8009410:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f850 	bl	80094b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2220      	movs	r2, #32
 8009424:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b084      	sub	sp, #16
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800944a:	2b01      	cmp	r3, #1
 800944c:	d101      	bne.n	8009452 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800944e:	2302      	movs	r3, #2
 8009450:	e02d      	b.n	80094ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2201      	movs	r2, #1
 8009456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2224      	movs	r2, #36	@ 0x24
 800945e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f022 0201 	bic.w	r2, r2, #1
 8009478:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	683a      	ldr	r2, [r7, #0]
 800948a:	430a      	orrs	r2, r1
 800948c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f812 	bl	80094b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2220      	movs	r2, #32
 80094a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
	...

080094b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d108      	bne.n	80094da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80094d8:	e031      	b.n	800953e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80094da:	2310      	movs	r3, #16
 80094dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80094de:	2310      	movs	r3, #16
 80094e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	0e5b      	lsrs	r3, r3, #25
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	f003 0307 	and.w	r3, r3, #7
 80094f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	0f5b      	lsrs	r3, r3, #29
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	f003 0307 	and.w	r3, r3, #7
 8009500:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009502:	7bbb      	ldrb	r3, [r7, #14]
 8009504:	7b3a      	ldrb	r2, [r7, #12]
 8009506:	4911      	ldr	r1, [pc, #68]	@ (800954c <UARTEx_SetNbDataToProcess+0x94>)
 8009508:	5c8a      	ldrb	r2, [r1, r2]
 800950a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800950e:	7b3a      	ldrb	r2, [r7, #12]
 8009510:	490f      	ldr	r1, [pc, #60]	@ (8009550 <UARTEx_SetNbDataToProcess+0x98>)
 8009512:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009514:	fb93 f3f2 	sdiv	r3, r3, r2
 8009518:	b29a      	uxth	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009520:	7bfb      	ldrb	r3, [r7, #15]
 8009522:	7b7a      	ldrb	r2, [r7, #13]
 8009524:	4909      	ldr	r1, [pc, #36]	@ (800954c <UARTEx_SetNbDataToProcess+0x94>)
 8009526:	5c8a      	ldrb	r2, [r1, r2]
 8009528:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800952c:	7b7a      	ldrb	r2, [r7, #13]
 800952e:	4908      	ldr	r1, [pc, #32]	@ (8009550 <UARTEx_SetNbDataToProcess+0x98>)
 8009530:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009532:	fb93 f3f2 	sdiv	r3, r3, r2
 8009536:	b29a      	uxth	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800953e:	bf00      	nop
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	080095f4 	.word	0x080095f4
 8009550:	080095fc 	.word	0x080095fc

08009554 <memset>:
 8009554:	4402      	add	r2, r0
 8009556:	4603      	mov	r3, r0
 8009558:	4293      	cmp	r3, r2
 800955a:	d100      	bne.n	800955e <memset+0xa>
 800955c:	4770      	bx	lr
 800955e:	f803 1b01 	strb.w	r1, [r3], #1
 8009562:	e7f9      	b.n	8009558 <memset+0x4>

08009564 <__libc_init_array>:
 8009564:	b570      	push	{r4, r5, r6, lr}
 8009566:	4d0d      	ldr	r5, [pc, #52]	@ (800959c <__libc_init_array+0x38>)
 8009568:	4c0d      	ldr	r4, [pc, #52]	@ (80095a0 <__libc_init_array+0x3c>)
 800956a:	1b64      	subs	r4, r4, r5
 800956c:	10a4      	asrs	r4, r4, #2
 800956e:	2600      	movs	r6, #0
 8009570:	42a6      	cmp	r6, r4
 8009572:	d109      	bne.n	8009588 <__libc_init_array+0x24>
 8009574:	4d0b      	ldr	r5, [pc, #44]	@ (80095a4 <__libc_init_array+0x40>)
 8009576:	4c0c      	ldr	r4, [pc, #48]	@ (80095a8 <__libc_init_array+0x44>)
 8009578:	f000 f818 	bl	80095ac <_init>
 800957c:	1b64      	subs	r4, r4, r5
 800957e:	10a4      	asrs	r4, r4, #2
 8009580:	2600      	movs	r6, #0
 8009582:	42a6      	cmp	r6, r4
 8009584:	d105      	bne.n	8009592 <__libc_init_array+0x2e>
 8009586:	bd70      	pop	{r4, r5, r6, pc}
 8009588:	f855 3b04 	ldr.w	r3, [r5], #4
 800958c:	4798      	blx	r3
 800958e:	3601      	adds	r6, #1
 8009590:	e7ee      	b.n	8009570 <__libc_init_array+0xc>
 8009592:	f855 3b04 	ldr.w	r3, [r5], #4
 8009596:	4798      	blx	r3
 8009598:	3601      	adds	r6, #1
 800959a:	e7f2      	b.n	8009582 <__libc_init_array+0x1e>
 800959c:	0800960c 	.word	0x0800960c
 80095a0:	0800960c 	.word	0x0800960c
 80095a4:	0800960c 	.word	0x0800960c
 80095a8:	08009610 	.word	0x08009610

080095ac <_init>:
 80095ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ae:	bf00      	nop
 80095b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095b2:	bc08      	pop	{r3}
 80095b4:	469e      	mov	lr, r3
 80095b6:	4770      	bx	lr

080095b8 <_fini>:
 80095b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ba:	bf00      	nop
 80095bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095be:	bc08      	pop	{r3}
 80095c0:	469e      	mov	lr, r3
 80095c2:	4770      	bx	lr
