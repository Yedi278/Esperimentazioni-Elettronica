
Dual ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009328  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080095c0  080095c0  0000a5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009600  08009600  0000a600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009608  08009608  0000a608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800960c  0800960c  0000a60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08009610  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a34  24000010  08009620  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000a44  08009620  0000ba44  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d0ca  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000335e  00000000  00000000  00028108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016c8  00000000  00000000  0002b468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000011bb  00000000  00000000  0002cb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a65a  00000000  00000000  0002dceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f83c  00000000  00000000  00068345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017c69e  00000000  00000000  00087b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020421f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006184  00000000  00000000  00204264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008e  00000000  00000000  0020a3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080095a8 	.word	0x080095a8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080095a8 	.word	0x080095a8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ADCx_custom_init>:
 */

#include "Custom_ADC.h"


void ADCx_custom_init(ADC_TypeDef *ADCx, uint8_t INx_Pin){
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]

//	ADCx->CR &= ~ADC_CR_ADSTART;

	ADCx->SQR1 = 0; // per azzerare la configurazione dell'ide
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2200      	movs	r2, #0
 80005d8:	631a      	str	r2, [r3, #48]	@ 0x30

	ADCx->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere 0=1
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	631a      	str	r2, [r3, #48]	@ 0x30

	ADCx->SQR1 |= (INx_Pin << ADC_SQR1_SQ1_Pos);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005e6:	78fb      	ldrb	r3, [r7, #3]
 80005e8:	019b      	lsls	r3, r3, #6
 80005ea:	431a      	orrs	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	631a      	str	r2, [r3, #48]	@ 0x30

	ADCx->PCSEL = 0;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
	ADCx->PCSEL |= (1 << (ADC_PCSEL_PCSEL_Pos + INx_Pin)); // Dichiaro quali canali leggere : 18 e 19
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	78fa      	ldrb	r2, [r7, #3]
 80005fc:	2101      	movs	r1, #1
 80005fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000602:	431a      	orrs	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	61da      	str	r2, [r3, #28]

	/* Calibrazione */
	ADCx->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	609a      	str	r2, [r3, #8]
	ADCx->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	609a      	str	r2, [r3, #8]
	ADCx->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	f023 0201 	bic.w	r2, r3, #1
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	609a      	str	r2, [r3, #8]
	ADCx->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	609a      	str	r2, [r3, #8]


	while((ADCx->CR & ADC_CR_ADCAL) != 0){};
 8000638:	bf00      	nop
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	2b00      	cmp	r3, #0
 8000640:	dbfb      	blt.n	800063a <ADCx_custom_init+0x72>
	// FIne calibrazione

	ADCx->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f043 0201 	orr.w	r2, r3, #1
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	601a      	str	r2, [r3, #0]
	ADCx->CR |= ADC_CR_ADEN;		// Accendo l' ADC
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	f043 0201 	orr.w	r2, r3, #1
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	609a      	str	r2, [r3, #8]

	while((ADCx->ISR & ADC_ISR_ADRDY) != 0){}
 800065a:	bf00      	nop
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f9      	bne.n	800065c <ADCx_custom_init+0x94>

	ADCx->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f043 0201 	orr.w	r2, r3, #1
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	601a      	str	r2, [r3, #0]
	// Fine accensione

	/* ADR INIZIALIZZATO */
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <ADC_custom_init>:

void ADC_custom_init(){
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

	/*	PRIMO ADC	*/

	/*	IN0 -> PIN PC2 o A4 */
	ADCx_custom_init(ADC3, 0);
 8000684:	2100      	movs	r1, #0
 8000686:	481c      	ldr	r0, [pc, #112]	@ (80006f8 <ADC_custom_init+0x78>)
 8000688:	f7ff ff9e 	bl	80005c8 <ADCx_custom_init>
	ADC3->IER &= ~ADC_IER_EOCIE;	// interrupt ADC
 800068c:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <ADC_custom_init+0x78>)
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	4a19      	ldr	r2, [pc, #100]	@ (80006f8 <ADC_custom_init+0x78>)
 8000692:	f023 0304 	bic.w	r3, r3, #4
 8000696:	6053      	str	r3, [r2, #4]
	ADCx_custom_init(ADC1, 19);
 8000698:	2113      	movs	r1, #19
 800069a:	4818      	ldr	r0, [pc, #96]	@ (80006fc <ADC_custom_init+0x7c>)
 800069c:	f7ff ff94 	bl	80005c8 <ADCx_custom_init>
	ADC1->IER &= ~ADC_IER_EOCIE;	// interrupt ADC
 80006a0:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <ADC_custom_init+0x7c>)
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	4a15      	ldr	r2, [pc, #84]	@ (80006fc <ADC_custom_init+0x7c>)
 80006a6:	f023 0304 	bic.w	r3, r3, #4
 80006aa:	6053      	str	r3, [r2, #4]


	// TIM6 set to 240Mhz
	TIM6->PSC = 1; // TIM6 CLOCK/PSC
 80006ac:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <ADC_custom_init+0x80>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 1;	// TIM6 CLOCK/PSC/ARR
 80006b2:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <ADC_custom_init+0x80>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->CNT = 0;
 80006b8:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <ADC_custom_init+0x80>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->DIER &= ~TIM_DIER_UIE;
 80006be:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <ADC_custom_init+0x80>)
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000700 <ADC_custom_init+0x80>)
 80006c4:	f023 0301 	bic.w	r3, r3, #1
 80006c8:	60d3      	str	r3, [r2, #12]

	TIM7->PSC = 1;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <ADC_custom_init+0x84>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM7->ARR = 1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <ADC_custom_init+0x84>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM7->CNT = 0;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <ADC_custom_init+0x84>)
 80006d8:	2200      	movs	r2, #0
 80006da:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM7->DIER |= TIM_DIER_UIE;
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <ADC_custom_init+0x84>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	4a08      	ldr	r2, [pc, #32]	@ (8000704 <ADC_custom_init+0x84>)
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	60d3      	str	r3, [r2, #12]
	TIM7->CR1 &= ~TIM_CR1_CEN;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <ADC_custom_init+0x84>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a05      	ldr	r2, [pc, #20]	@ (8000704 <ADC_custom_init+0x84>)
 80006ee:	f023 0301 	bic.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	58026000 	.word	0x58026000
 80006fc:	40022000 	.word	0x40022000
 8000700:	40001000 	.word	0x40001000
 8000704:	40001400 	.word	0x40001400

08000708 <COMP_custom_init>:
bool acquiring = false;
bool acquiring_2 = false;
bool enable = 	 false;
bool pre_triggd = false;

void COMP_custom_init(){
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

	DAC1->CR |= DAC_CR_EN1;			// attivo DAC
 800070c:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <COMP_custom_init+0x5c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a14      	ldr	r2, [pc, #80]	@ (8000764 <COMP_custom_init+0x5c>)
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	6013      	str	r3, [r2, #0]

	DAC1->DHR12R1 = 150;			// imposto soglia del comparatore IN 12 BIT NON 16
 8000718:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <COMP_custom_init+0x5c>)
 800071a:	2296      	movs	r2, #150	@ 0x96
 800071c:	609a      	str	r2, [r3, #8]

	DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 800071e:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <COMP_custom_init+0x5c>)
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	4a10      	ldr	r2, [pc, #64]	@ (8000764 <COMP_custom_init+0x5c>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6053      	str	r3, [r2, #4]

	COMP2->CFGR |= COMP_CFGRx_EN;	// attivo il comparatore
 800072a:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <COMP_custom_init+0x60>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a0e      	ldr	r2, [pc, #56]	@ (8000768 <COMP_custom_init+0x60>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6013      	str	r3, [r2, #0]
	COMP1->CFGR |= COMP_CFGRx_EN;
 8000736:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <COMP_custom_init+0x64>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a0c      	ldr	r2, [pc, #48]	@ (800076c <COMP_custom_init+0x64>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6013      	str	r3, [r2, #0]

	triggd = false;
 8000742:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <COMP_custom_init+0x68>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
	acquiring = false;
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <COMP_custom_init+0x6c>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
	enable = false;
 800074e:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <COMP_custom_init+0x70>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
	pre_triggd = false;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <COMP_custom_init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	40007400 	.word	0x40007400
 8000768:	58003810 	.word	0x58003810
 800076c:	5800380c 	.word	0x5800380c
 8000770:	2400002c 	.word	0x2400002c
 8000774:	2400002d 	.word	0x2400002d
 8000778:	2400002e 	.word	0x2400002e
 800077c:	2400002f 	.word	0x2400002f

08000780 <TIM7_custom_interrupt>:

void TIM7_custom_interrupt(){
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0

	if(!acquiring){
 8000784:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <TIM7_custom_interrupt+0x68>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	f083 0301 	eor.w	r3, r3, #1
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d026      	beq.n	80007e0 <TIM7_custom_interrupt+0x60>
		if( (COMP12->SR&COMP_SR_C1VAL) && (COMP12->SR&COMP_SR_C2VAL) ){
 8000792:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <TIM7_custom_interrupt+0x6c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	2b00      	cmp	r3, #0
 800079c:	d01c      	beq.n	80007d8 <TIM7_custom_interrupt+0x58>
 800079e:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <TIM7_custom_interrupt+0x6c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d016      	beq.n	80007d8 <TIM7_custom_interrupt+0x58>
			if(pre_triggd){
 80007aa:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <TIM7_custom_interrupt+0x70>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d016      	beq.n	80007e0 <TIM7_custom_interrupt+0x60>
				acquiring = true;
 80007b2:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <TIM7_custom_interrupt+0x68>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	701a      	strb	r2, [r3, #0]
				TIM6->CR1 |= TIM_CR1_CEN;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <TIM7_custom_interrupt+0x74>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a0d      	ldr	r2, [pc, #52]	@ (80007f4 <TIM7_custom_interrupt+0x74>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	6013      	str	r3, [r2, #0]
				TIM7->CR1 &= ~TIM_CR1_CEN;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <TIM7_custom_interrupt+0x78>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0b      	ldr	r2, [pc, #44]	@ (80007f8 <TIM7_custom_interrupt+0x78>)
 80007ca:	f023 0301 	bic.w	r3, r3, #1
 80007ce:	6013      	str	r3, [r2, #0]
				pre_triggd = false;
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <TIM7_custom_interrupt+0x70>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
				return;
 80007d6:	e003      	b.n	80007e0 <TIM7_custom_interrupt+0x60>
			}
		}else{
			pre_triggd = true;
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <TIM7_custom_interrupt+0x70>)
 80007da:	2201      	movs	r2, #1
 80007dc:	701a      	strb	r2, [r3, #0]
			return;
 80007de:	bf00      	nop
		}
	}
}
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	2400002d 	.word	0x2400002d
 80007ec:	58003800 	.word	0x58003800
 80007f0:	2400002f 	.word	0x2400002f
 80007f4:	40001000 	.word	0x40001000
 80007f8:	40001400 	.word	0x40001400

080007fc <DMA_custom_init>:

uint16_t DMA_data_buffer[2*DATA_LENGTH];

uint16_t data_index=0;

void DMA_custom_init(){
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

	data_index = 0;
 8000800:	4b30      	ldr	r3, [pc, #192]	@ (80008c4 <DMA_custom_init+0xc8>)
 8000802:	2200      	movs	r2, #0
 8000804:	801a      	strh	r2, [r3, #0]

	DMA1_Stream0->M0AR = (uint32_t) (&DMA_data_buffer[0]);	// inidico l'indirizzo dello storarge di dati
 8000806:	4b30      	ldr	r3, [pc, #192]	@ (80008c8 <DMA_custom_init+0xcc>)
 8000808:	4a30      	ldr	r2, [pc, #192]	@ (80008cc <DMA_custom_init+0xd0>)
 800080a:	60da      	str	r2, [r3, #12]
	DMA1_Stream1->M0AR = (uint32_t) (&DMA_data_buffer[0]);
 800080c:	4b30      	ldr	r3, [pc, #192]	@ (80008d0 <DMA_custom_init+0xd4>)
 800080e:	4a2f      	ldr	r2, [pc, #188]	@ (80008cc <DMA_custom_init+0xd0>)
 8000810:	60da      	str	r2, [r3, #12]
	DMA2_Stream0->M0AR = (uint32_t) (&DMA_data_buffer[DATA_LENGTH]);	// inidico l'indirizzo dello storarge di dati
 8000812:	4b30      	ldr	r3, [pc, #192]	@ (80008d4 <DMA_custom_init+0xd8>)
 8000814:	4a30      	ldr	r2, [pc, #192]	@ (80008d8 <DMA_custom_init+0xdc>)
 8000816:	60da      	str	r2, [r3, #12]

	DMA1_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
 8000818:	4b2b      	ldr	r3, [pc, #172]	@ (80008c8 <DMA_custom_init+0xcc>)
 800081a:	4a30      	ldr	r2, [pc, #192]	@ (80008dc <DMA_custom_init+0xe0>)
 800081c:	609a      	str	r2, [r3, #8]
	DMA1_Stream1->PAR = (uint32_t) (&USART3->TDR);
 800081e:	4b2c      	ldr	r3, [pc, #176]	@ (80008d0 <DMA_custom_init+0xd4>)
 8000820:	4a2f      	ldr	r2, [pc, #188]	@ (80008e0 <DMA_custom_init+0xe4>)
 8000822:	609a      	str	r2, [r3, #8]
	DMA2_Stream0->PAR = (uint32_t) (&ADC1->DR);
 8000824:	4b2b      	ldr	r3, [pc, #172]	@ (80008d4 <DMA_custom_init+0xd8>)
 8000826:	4a2f      	ldr	r2, [pc, #188]	@ (80008e4 <DMA_custom_init+0xe8>)
 8000828:	609a      	str	r2, [r3, #8]

	DMA2_Stream0->NDTR = DATA_LENGTH;
 800082a:	4b2a      	ldr	r3, [pc, #168]	@ (80008d4 <DMA_custom_init+0xd8>)
 800082c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000830:	605a      	str	r2, [r3, #4]
	DMA1_Stream0->NDTR = DATA_LENGTH;			// numero elementi da prendere da ADC3
 8000832:	4b25      	ldr	r3, [pc, #148]	@ (80008c8 <DMA_custom_init+0xcc>)
 8000834:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000838:	605a      	str	r2, [r3, #4]
	DMA1_Stream1->NDTR = 2* (2*DATA_LENGTH);			// numero elementi da mandare a USART3
 800083a:	4b25      	ldr	r3, [pc, #148]	@ (80008d0 <DMA_custom_init+0xd4>)
 800083c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000840:	605a      	str	r2, [r3, #4]

	DMA1_Stream0->CR |= DMA_SxCR_TCIE;		// ablilito interrupt di fine ricezione
 8000842:	4b21      	ldr	r3, [pc, #132]	@ (80008c8 <DMA_custom_init+0xcc>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a20      	ldr	r2, [pc, #128]	@ (80008c8 <DMA_custom_init+0xcc>)
 8000848:	f043 0310 	orr.w	r3, r3, #16
 800084c:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_TCIE;		// abilito interrupt di fine trasmissione
 800084e:	4b20      	ldr	r3, [pc, #128]	@ (80008d0 <DMA_custom_init+0xd4>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a1f      	ldr	r2, [pc, #124]	@ (80008d0 <DMA_custom_init+0xd4>)
 8000854:	f043 0310 	orr.w	r3, r3, #16
 8000858:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_TCIE;
 800085a:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <DMA_custom_init+0xd8>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a1d      	ldr	r2, [pc, #116]	@ (80008d4 <DMA_custom_init+0xd8>)
 8000860:	f023 0310 	bic.w	r3, r3, #16
 8000864:	6013      	str	r3, [r2, #0]

	ADC3->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);	// DMA in cont mode
 8000866:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <DMA_custom_init+0xec>)
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	4a1f      	ldr	r2, [pc, #124]	@ (80008e8 <DMA_custom_init+0xec>)
 800086c:	f043 0303 	orr.w	r3, r3, #3
 8000870:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);
 8000872:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <DMA_custom_init+0xf0>)
 8000874:	68db      	ldr	r3, [r3, #12]
 8000876:	4a1d      	ldr	r2, [pc, #116]	@ (80008ec <DMA_custom_init+0xf0>)
 8000878:	f043 0303 	orr.w	r3, r3, #3
 800087c:	60d3      	str	r3, [r2, #12]

	DMA1_Stream0->CR |= DMA_SxCR_EN;
 800087e:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <DMA_custom_init+0xcc>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a11      	ldr	r2, [pc, #68]	@ (80008c8 <DMA_custom_init+0xcc>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR &= ~DMA_SxCR_EN;
 800088a:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <DMA_custom_init+0xd4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a10      	ldr	r2, [pc, #64]	@ (80008d0 <DMA_custom_init+0xd4>)
 8000890:	f023 0301 	bic.w	r3, r3, #1
 8000894:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_SxCR_EN;
 8000896:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <DMA_custom_init+0xd8>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a0e      	ldr	r2, [pc, #56]	@ (80008d4 <DMA_custom_init+0xd8>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6013      	str	r3, [r2, #0]

	ADC1->CR |= ADC_CR_ADSTART;
 80008a2:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <DMA_custom_init+0xf0>)
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	4a11      	ldr	r2, [pc, #68]	@ (80008ec <DMA_custom_init+0xf0>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADSTART;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <DMA_custom_init+0xec>)
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	4a0d      	ldr	r2, [pc, #52]	@ (80008e8 <DMA_custom_init+0xec>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6093      	str	r3, [r2, #8]
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	24000670 	.word	0x24000670
 80008c8:	40020010 	.word	0x40020010
 80008cc:	24000030 	.word	0x24000030
 80008d0:	40020028 	.word	0x40020028
 80008d4:	40020410 	.word	0x40020410
 80008d8:	24000350 	.word	0x24000350
 80008dc:	58026040 	.word	0x58026040
 80008e0:	40004828 	.word	0x40004828
 80008e4:	40022040 	.word	0x40022040
 80008e8:	58026000 	.word	0x58026000
 80008ec:	40022000 	.word	0x40022000

080008f0 <DMA_custom_interrupt_tx>:

void DMA_custom_interrupt_tx(){
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

	USART3->CR3 &= ~USART_CR3_DMAT;			  // SPENGO trasmissione usart
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <DMA_custom_interrupt_tx+0x70>)
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	4a19      	ldr	r2, [pc, #100]	@ (8000960 <DMA_custom_interrupt_tx+0x70>)
 80008fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80008fe:	6093      	str	r3, [r2, #8]

	DMA1->LIFCR = 0xffffffff;
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <DMA_custom_interrupt_tx+0x74>)
 8000902:	f04f 32ff 	mov.w	r2, #4294967295
 8000906:	609a      	str	r2, [r3, #8]
	DMA1->HIFCR = 0xffffffff;
 8000908:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <DMA_custom_interrupt_tx+0x74>)
 800090a:	f04f 32ff 	mov.w	r2, #4294967295
 800090e:	60da      	str	r2, [r3, #12]

	DMA1_Stream0->NDTR = DATA_LENGTH;			// numero elementi da prendere da ADC3
 8000910:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <DMA_custom_interrupt_tx+0x78>)
 8000912:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000916:	605a      	str	r2, [r3, #4]
	DMA2_Stream0->NDTR = DATA_LENGTH;
 8000918:	4b14      	ldr	r3, [pc, #80]	@ (800096c <DMA_custom_interrupt_tx+0x7c>)
 800091a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800091e:	605a      	str	r2, [r3, #4]

	DMA1_Stream0->CR |= DMA_SxCR_EN;
 8000920:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <DMA_custom_interrupt_tx+0x78>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a10      	ldr	r2, [pc, #64]	@ (8000968 <DMA_custom_interrupt_tx+0x78>)
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	6013      	str	r3, [r2, #0]

	DMA2->LIFCR = 0xffffffff;
 800092c:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <DMA_custom_interrupt_tx+0x80>)
 800092e:	f04f 32ff 	mov.w	r2, #4294967295
 8000932:	609a      	str	r2, [r3, #8]
	DMA2->HIFCR = 0xffffffff;
 8000934:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <DMA_custom_interrupt_tx+0x80>)
 8000936:	f04f 32ff 	mov.w	r2, #4294967295
 800093a:	60da      	str	r2, [r3, #12]

	DMA2_Stream0->CR |= DMA_SxCR_EN;
 800093c:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <DMA_custom_interrupt_tx+0x7c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0a      	ldr	r2, [pc, #40]	@ (800096c <DMA_custom_interrupt_tx+0x7c>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	6013      	str	r3, [r2, #0]

	pre_triggd = false;
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <DMA_custom_interrupt_tx+0x84>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
	acquiring = false;
 800094e:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <DMA_custom_interrupt_tx+0x88>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40004800 	.word	0x40004800
 8000964:	40020000 	.word	0x40020000
 8000968:	40020010 	.word	0x40020010
 800096c:	40020410 	.word	0x40020410
 8000970:	40020400 	.word	0x40020400
 8000974:	2400002f 	.word	0x2400002f
 8000978:	2400002d 	.word	0x2400002d

0800097c <DMA_custom_interrupt_rx>:

void DMA_custom_interrupt_rx(){
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

	TIM6->CR1 &= ~TIM_CR1_CEN;
 8000980:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <DMA_custom_interrupt_rx+0x54>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a12      	ldr	r2, [pc, #72]	@ (80009d0 <DMA_custom_interrupt_rx+0x54>)
 8000986:	f023 0301 	bic.w	r3, r3, #1
 800098a:	6013      	str	r3, [r2, #0]

	DMA1->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 800098c:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <DMA_custom_interrupt_rx+0x58>)
 800098e:	f04f 32ff 	mov.w	r2, #4294967295
 8000992:	609a      	str	r2, [r3, #8]
	DMA1->HIFCR = 0xffffffff;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <DMA_custom_interrupt_rx+0x58>)
 8000996:	f04f 32ff 	mov.w	r2, #4294967295
 800099a:	60da      	str	r2, [r3, #12]

	while(DMA2_Stream0->NDTR != 0);
 800099c:	bf00      	nop
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <DMA_custom_interrupt_rx+0x5c>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d1fb      	bne.n	800099e <DMA_custom_interrupt_rx+0x22>

	DMA1_Stream1->NDTR = 2*2*DATA_LENGTH;
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <DMA_custom_interrupt_rx+0x60>)
 80009a8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80009ac:	605a      	str	r2, [r3, #4]
	DMA1_Stream1->CR |= DMA_SxCR_EN;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <DMA_custom_interrupt_rx+0x60>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <DMA_custom_interrupt_rx+0x60>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6013      	str	r3, [r2, #0]
	USART3->CR3 |= USART_CR3_DMAT;
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <DMA_custom_interrupt_rx+0x64>)
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	4a08      	ldr	r2, [pc, #32]	@ (80009e0 <DMA_custom_interrupt_rx+0x64>)
 80009c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009c4:	6093      	str	r3, [r2, #8]
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	40001000 	.word	0x40001000
 80009d4:	40020000 	.word	0x40020000
 80009d8:	40020410 	.word	0x40020410
 80009dc:	40020028 	.word	0x40020028
 80009e0:	40004800 	.word	0x40004800

080009e4 <DMA2_custom_interrupt>:

void DMA2_custom_interrupt(){
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

	DMA2->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <DMA2_custom_interrupt+0x20>)
 80009ea:	f04f 32ff 	mov.w	r2, #4294967295
 80009ee:	609a      	str	r2, [r3, #8]
	DMA2->HIFCR = 0xffffffff;
 80009f0:	4b04      	ldr	r3, [pc, #16]	@ (8000a04 <DMA2_custom_interrupt+0x20>)
 80009f2:	f04f 32ff 	mov.w	r2, #4294967295
 80009f6:	60da      	str	r2, [r3, #12]

}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40020400 	.word	0x40020400

08000a08 <USART_custom_init>:
 *      Author: yehan
 */

#include "Custom_USART.h"

void USART_custom_init(){
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

	USART3->CR1 |= USART_CR1_TE;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <USART_custom_init+0x4c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a10      	ldr	r2, [pc, #64]	@ (8000a54 <USART_custom_init+0x4c>)
 8000a12:	f043 0308 	orr.w	r3, r3, #8
 8000a16:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_RE;
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <USART_custom_init+0x4c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <USART_custom_init+0x4c>)
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	6013      	str	r3, [r2, #0]

	USART3->CR1 &= ~USART_CR1_TXEIE;
 8000a24:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <USART_custom_init+0x4c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <USART_custom_init+0x4c>)
 8000a2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000a2e:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_RXNEIE;
 8000a30:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <USART_custom_init+0x4c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a07      	ldr	r2, [pc, #28]	@ (8000a54 <USART_custom_init+0x4c>)
 8000a36:	f043 0320 	orr.w	r3, r3, #32
 8000a3a:	6013      	str	r3, [r2, #0]

	USART3->CR1 |= USART_CR1_UE;
 8000a3c:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <USART_custom_init+0x4c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a04      	ldr	r2, [pc, #16]	@ (8000a54 <USART_custom_init+0x4c>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40004800 	.word	0x40004800

08000a58 <USART_custom_interrupt>:

void USART_custom_interrupt(){
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0

	char data = USART3->RDR;
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <USART_custom_interrupt+0x5c>)
 8000a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a62:	71fb      	strb	r3, [r7, #7]

	if(data == '?'){
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a68:	d10b      	bne.n	8000a82 <USART_custom_interrupt+0x2a>
		if((TIM7->CR1 & TIM_CR1_CEN) == 0){
 8000a6a:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <USART_custom_interrupt+0x60>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d105      	bne.n	8000a82 <USART_custom_interrupt+0x2a>
			TIM7->CR1 |= TIM_CR1_CEN;
 8000a76:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <USART_custom_interrupt+0x60>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab8 <USART_custom_interrupt+0x60>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6013      	str	r3, [r2, #0]
		}
	}

	USART3->ICR |= USART_ICR_ORECF;  //Cancella l'overrun. Capita quando si entra in debug
 8000a82:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <USART_custom_interrupt+0x5c>)
 8000a84:	6a1b      	ldr	r3, [r3, #32]
 8000a86:	4a0b      	ldr	r2, [pc, #44]	@ (8000ab4 <USART_custom_interrupt+0x5c>)
 8000a88:	f043 0308 	orr.w	r3, r3, #8
 8000a8c:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF;   //Azzeramento flag interrupt trasmissione
 8000a8e:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <USART_custom_interrupt+0x5c>)
 8000a90:	6a1b      	ldr	r3, [r3, #32]
 8000a92:	4a08      	ldr	r2, [pc, #32]	@ (8000ab4 <USART_custom_interrupt+0x5c>)
 8000a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a98:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <USART_custom_interrupt+0x5c>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	4a05      	ldr	r2, [pc, #20]	@ (8000ab4 <USART_custom_interrupt+0x5c>)
 8000aa0:	f043 0308 	orr.w	r3, r3, #8
 8000aa4:	6193      	str	r3, [r2, #24]
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40004800 	.word	0x40004800
 8000ab8:	40001400 	.word	0x40001400

08000abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac0:	f001 f80c 	bl	8001adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac4:	f000 f820 	bl	8000b08 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ac8:	f000 f898 	bl	8000bfc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000acc:	f000 fb30 	bl	8001130 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ad0:	f000 faee 	bl	80010b0 <MX_DMA_Init>
  MX_ADC3_Init();
 8000ad4:	f000 f940 	bl	8000d58 <MX_ADC3_Init>
  MX_COMP2_Init();
 8000ad8:	f000 f9d2 	bl	8000e80 <MX_COMP2_Init>
  MX_DAC1_Init();
 8000adc:	f000 f9fc 	bl	8000ed8 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000ae0:	f000 fa2c 	bl	8000f3c <MX_TIM6_Init>
  MX_TIM7_Init();
 8000ae4:	f000 fa60 	bl	8000fa8 <MX_TIM7_Init>
  MX_USART3_UART_Init();
 8000ae8:	f000 fa94 	bl	8001014 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000aec:	f000 f8b6 	bl	8000c5c <MX_ADC1_Init>
  MX_COMP1_Init();
 8000af0:	f000 f998 	bl	8000e24 <MX_COMP1_Init>
  /* USER CODE BEGIN 2 */

  COMP_custom_init();
 8000af4:	f7ff fe08 	bl	8000708 <COMP_custom_init>
  ADC_custom_init();
 8000af8:	f7ff fdc2 	bl	8000680 <ADC_custom_init>
  USART_custom_init();
 8000afc:	f7ff ff84 	bl	8000a08 <USART_custom_init>
  DMA_custom_init();
 8000b00:	f7ff fe7c 	bl	80007fc <DMA_custom_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <main+0x48>

08000b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b09c      	sub	sp, #112	@ 0x70
 8000b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b12:	224c      	movs	r2, #76	@ 0x4c
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f008 fd1a 	bl	8009550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2220      	movs	r2, #32
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f008 fd14 	bl	8009550 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b28:	2002      	movs	r0, #2
 8000b2a:	f003 fc3b 	bl	80043a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	4b30      	ldr	r3, [pc, #192]	@ (8000bf4 <SystemClock_Config+0xec>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	4a2f      	ldr	r2, [pc, #188]	@ (8000bf4 <SystemClock_Config+0xec>)
 8000b38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b3c:	6193      	str	r3, [r2, #24]
 8000b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf4 <SystemClock_Config+0xec>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf8 <SystemClock_Config+0xf0>)
 8000b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b4c:	4a2a      	ldr	r2, [pc, #168]	@ (8000bf8 <SystemClock_Config+0xf0>)
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b54:	4b28      	ldr	r3, [pc, #160]	@ (8000bf8 <SystemClock_Config+0xf0>)
 8000b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b60:	bf00      	nop
 8000b62:	4b24      	ldr	r3, [pc, #144]	@ (8000bf4 <SystemClock_Config+0xec>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b6e:	d1f8      	bne.n	8000b62 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b70:	2301      	movs	r3, #1
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b74:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000b86:	2378      	movs	r3, #120	@ 0x78
 8000b88:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b92:	2302      	movs	r3, #2
 8000b94:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b96:	230c      	movs	r3, #12
 8000b98:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f003 fc36 	bl	8004418 <HAL_RCC_OscConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bb2:	f000 fbed 	bl	8001390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb6:	233f      	movs	r3, #63	@ 0x3f
 8000bb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bc2:	2308      	movs	r3, #8
 8000bc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bc6:	2340      	movs	r3, #64	@ 0x40
 8000bc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bca:	2340      	movs	r3, #64	@ 0x40
 8000bcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bd2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bd4:	2340      	movs	r3, #64	@ 0x40
 8000bd6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2104      	movs	r1, #4
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f004 f875 	bl	8004ccc <HAL_RCC_ClockConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000be8:	f000 fbd2 	bl	8001390 <Error_Handler>
  }
}
 8000bec:	bf00      	nop
 8000bee:	3770      	adds	r7, #112	@ 0x70
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	58024800 	.word	0x58024800
 8000bf8:	58000400 	.word	0x58000400

08000bfc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0b0      	sub	sp, #192	@ 0xc0
 8000c00:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c02:	463b      	mov	r3, r7
 8000c04:	22c0      	movs	r2, #192	@ 0xc0
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f008 fca1 	bl	8009550 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c0e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000c12:	f04f 0300 	mov.w	r3, #0
 8000c16:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 50;
 8000c1e:	2332      	movs	r3, #50	@ 0x32
 8000c20:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c22:	2302      	movs	r3, #2
 8000c24:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000c2e:	2380      	movs	r3, #128	@ 0x80
 8000c30:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c40:	463b      	mov	r3, r7
 8000c42:	4618      	mov	r0, r3
 8000c44:	f004 fbce 	bl	80053e4 <HAL_RCCEx_PeriphCLKConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000c4e:	f000 fb9f 	bl	8001390 <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	37c0      	adds	r7, #192	@ 0xc0
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	@ 0x28
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c6e:	463b      	mov	r3, r7
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
 8000c7c:	615a      	str	r2, [r3, #20]
 8000c7e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c80:	4b32      	ldr	r3, [pc, #200]	@ (8000d4c <MX_ADC1_Init+0xf0>)
 8000c82:	4a33      	ldr	r2, [pc, #204]	@ (8000d50 <MX_ADC1_Init+0xf4>)
 8000c84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c86:	4b31      	ldr	r3, [pc, #196]	@ (8000d4c <MX_ADC1_Init+0xf0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d4c <MX_ADC1_Init+0xf0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c92:	4b2e      	ldr	r3, [pc, #184]	@ (8000d4c <MX_ADC1_Init+0xf0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c98:	4b2c      	ldr	r3, [pc, #176]	@ (8000d4c <MX_ADC1_Init+0xf0>)
 8000c9a:	2204      	movs	r2, #4
 8000c9c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d4c <MX_ADC1_Init+0xf0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ca4:	4b29      	ldr	r3, [pc, #164]	@ (8000d4c <MX_ADC1_Init+0xf0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000caa:	4b28      	ldr	r3, [pc, #160]	@ (8000d4c <MX_ADC1_Init+0xf0>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cb0:	4b26      	ldr	r3, [pc, #152]	@ (8000d4c <MX_ADC1_Init+0xf0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000cb6:	4b25      	ldr	r3, [pc, #148]	@ (8000d4c <MX_ADC1_Init+0xf0>)
 8000cb8:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000cbc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000cbe:	4b23      	ldr	r3, [pc, #140]	@ (8000d4c <MX_ADC1_Init+0xf0>)
 8000cc0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <MX_ADC1_Init+0xf0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <MX_ADC1_Init+0xf0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d4c <MX_ADC1_Init+0xf0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <MX_ADC1_Init+0xf0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <MX_ADC1_Init+0xf0>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ce6:	4819      	ldr	r0, [pc, #100]	@ (8000d4c <MX_ADC1_Init+0xf0>)
 8000ce8:	f001 f9b6 	bl	8002058 <HAL_ADC_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000cf2:	f000 fb4d 	bl	8001390 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4812      	ldr	r0, [pc, #72]	@ (8000d4c <MX_ADC1_Init+0xf0>)
 8000d02:	f001 ff6d 	bl	8002be0 <HAL_ADCEx_MultiModeConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000d0c:	f000 fb40 	bl	8001390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000d10:	4b10      	ldr	r3, [pc, #64]	@ (8000d54 <MX_ADC1_Init+0xf8>)
 8000d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d14:	2306      	movs	r3, #6
 8000d16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d1c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000d20:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d22:	2304      	movs	r3, #4
 8000d24:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	@ (8000d4c <MX_ADC1_Init+0xf0>)
 8000d34:	f001 fb32 	bl	800239c <HAL_ADC_ConfigChannel>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000d3e:	f000 fb27 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	3728      	adds	r7, #40	@ 0x28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	24000674 	.word	0x24000674
 8000d50:	40022000 	.word	0x40022000
 8000d54:	4fb80000 	.word	0x4fb80000

08000d58 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
 8000d6c:	615a      	str	r2, [r3, #20]
 8000d6e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000d70:	4b2a      	ldr	r3, [pc, #168]	@ (8000e1c <MX_ADC3_Init+0xc4>)
 8000d72:	4a2b      	ldr	r2, [pc, #172]	@ (8000e20 <MX_ADC3_Init+0xc8>)
 8000d74:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d76:	4b29      	ldr	r3, [pc, #164]	@ (8000e1c <MX_ADC3_Init+0xc4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d7c:	4b27      	ldr	r3, [pc, #156]	@ (8000e1c <MX_ADC3_Init+0xc4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d82:	4b26      	ldr	r3, [pc, #152]	@ (8000e1c <MX_ADC3_Init+0xc4>)
 8000d84:	2204      	movs	r2, #4
 8000d86:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000d88:	4b24      	ldr	r3, [pc, #144]	@ (8000e1c <MX_ADC3_Init+0xc4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d8e:	4b23      	ldr	r3, [pc, #140]	@ (8000e1c <MX_ADC3_Init+0xc4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000d94:	4b21      	ldr	r3, [pc, #132]	@ (8000e1c <MX_ADC3_Init+0xc4>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d9a:	4b20      	ldr	r3, [pc, #128]	@ (8000e1c <MX_ADC3_Init+0xc4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000da0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e1c <MX_ADC3_Init+0xc4>)
 8000da2:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000da6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000da8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e1c <MX_ADC3_Init+0xc4>)
 8000daa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dae:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000db0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e1c <MX_ADC3_Init+0xc4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000db6:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <MX_ADC3_Init+0xc4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dbc:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <MX_ADC3_Init+0xc4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000dc2:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <MX_ADC3_Init+0xc4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000dca:	4b14      	ldr	r3, [pc, #80]	@ (8000e1c <MX_ADC3_Init+0xc4>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000dd0:	4812      	ldr	r0, [pc, #72]	@ (8000e1c <MX_ADC3_Init+0xc4>)
 8000dd2:	f001 f941 	bl	8002058 <HAL_ADC_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000ddc:	f000 fad8 	bl	8001390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000de0:	2301      	movs	r3, #1
 8000de2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de4:	2306      	movs	r3, #6
 8000de6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dec:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000df0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000df2:	2304      	movs	r3, #4
 8000df4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	4619      	mov	r1, r3
 8000e02:	4806      	ldr	r0, [pc, #24]	@ (8000e1c <MX_ADC3_Init+0xc4>)
 8000e04:	f001 faca 	bl	800239c <HAL_ADC_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 8000e0e:	f000 fabf 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	3720      	adds	r7, #32
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	240006d8 	.word	0x240006d8
 8000e20:	58026000 	.word	0x58026000

08000e24 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000e28:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <MX_COMP1_Init+0x54>)
 8000e2a:	4a14      	ldr	r2, [pc, #80]	@ (8000e7c <MX_COMP1_Init+0x58>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000e2e:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <MX_COMP1_Init+0x54>)
 8000e30:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000e34:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000e36:	4b10      	ldr	r3, [pc, #64]	@ (8000e78 <MX_COMP1_Init+0x54>)
 8000e38:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000e3c:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <MX_COMP1_Init+0x54>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <MX_COMP1_Init+0x54>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <MX_COMP1_Init+0x54>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000e50:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <MX_COMP1_Init+0x54>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000e56:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <MX_COMP1_Init+0x54>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <MX_COMP1_Init+0x54>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000e62:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <MX_COMP1_Init+0x54>)
 8000e64:	f001 ff9a 	bl	8002d9c <HAL_COMP_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_COMP1_Init+0x4e>
  {
    Error_Handler();
 8000e6e:	f000 fa8f 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	2400082c 	.word	0x2400082c
 8000e7c:	5800380c 	.word	0x5800380c

08000e80 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000e84:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <MX_COMP2_Init+0x50>)
 8000e86:	4a13      	ldr	r2, [pc, #76]	@ (8000ed4 <MX_COMP2_Init+0x54>)
 8000e88:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <MX_COMP2_Init+0x50>)
 8000e8c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000e90:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8000e92:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <MX_COMP2_Init+0x50>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <MX_COMP2_Init+0x50>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <MX_COMP2_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <MX_COMP2_Init+0x50>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000eaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <MX_COMP2_Init+0x50>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000eb0:	4b07      	ldr	r3, [pc, #28]	@ (8000ed0 <MX_COMP2_Init+0x50>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <MX_COMP2_Init+0x50>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000ebc:	4804      	ldr	r0, [pc, #16]	@ (8000ed0 <MX_COMP2_Init+0x50>)
 8000ebe:	f001 ff6d 	bl	8002d9c <HAL_COMP_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 8000ec8:	f000 fa62 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	24000858 	.word	0x24000858
 8000ed4:	58003810 	.word	0x58003810

08000ed8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	@ 0x28
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2224      	movs	r2, #36	@ 0x24
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f008 fb33 	bl	8009550 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000eea:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <MX_DAC1_Init+0x5c>)
 8000eec:	4a12      	ldr	r2, [pc, #72]	@ (8000f38 <MX_DAC1_Init+0x60>)
 8000eee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ef0:	4810      	ldr	r0, [pc, #64]	@ (8000f34 <MX_DAC1_Init+0x5c>)
 8000ef2:	f002 f98c 	bl	800320e <HAL_DAC_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000efc:	f000 fa48 	bl	8001390 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4806      	ldr	r0, [pc, #24]	@ (8000f34 <MX_DAC1_Init+0x5c>)
 8000f1c:	f002 f99a 	bl	8003254 <HAL_DAC_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000f26:	f000 fa33 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	3728      	adds	r7, #40	@ 0x28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	24000884 	.word	0x24000884
 8000f38:	40007400 	.word	0x40007400

08000f3c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <MX_TIM6_Init+0x64>)
 8000f4e:	4a15      	ldr	r2, [pc, #84]	@ (8000fa4 <MX_TIM6_Init+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000f52:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <MX_TIM6_Init+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <MX_TIM6_Init+0x64>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000f5e:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <MX_TIM6_Init+0x64>)
 8000f60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f64:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <MX_TIM6_Init+0x64>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f6c:	480c      	ldr	r0, [pc, #48]	@ (8000fa0 <MX_TIM6_Init+0x64>)
 8000f6e:	f006 ff37 	bl	8007de0 <HAL_TIM_Base_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f78:	f000 fa0a 	bl	8001390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f7c:	2320      	movs	r3, #32
 8000f7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <MX_TIM6_Init+0x64>)
 8000f8a:	f007 f959 	bl	8008240 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f94:	f000 f9fc 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	24000898 	.word	0x24000898
 8000fa4:	40001000 	.word	0x40001000

08000fa8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	@ (800100c <MX_TIM7_Init+0x64>)
 8000fba:	4a15      	ldr	r2, [pc, #84]	@ (8001010 <MX_TIM7_Init+0x68>)
 8000fbc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	@ (800100c <MX_TIM7_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	@ (800100c <MX_TIM7_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000fca:	4b10      	ldr	r3, [pc, #64]	@ (800100c <MX_TIM7_Init+0x64>)
 8000fcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fd0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <MX_TIM7_Init+0x64>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000fd8:	480c      	ldr	r0, [pc, #48]	@ (800100c <MX_TIM7_Init+0x64>)
 8000fda:	f006 ff01 	bl	8007de0 <HAL_TIM_Base_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000fe4:	f000 f9d4 	bl	8001390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	@ (800100c <MX_TIM7_Init+0x64>)
 8000ff6:	f007 f923 	bl	8008240 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001000:	f000 f9c6 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	240008e4 	.word	0x240008e4
 8001010:	40001400 	.word	0x40001400

08001014 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001018:	4b22      	ldr	r3, [pc, #136]	@ (80010a4 <MX_USART3_UART_Init+0x90>)
 800101a:	4a23      	ldr	r2, [pc, #140]	@ (80010a8 <MX_USART3_UART_Init+0x94>)
 800101c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 800101e:	4b21      	ldr	r3, [pc, #132]	@ (80010a4 <MX_USART3_UART_Init+0x90>)
 8001020:	4a22      	ldr	r2, [pc, #136]	@ (80010ac <MX_USART3_UART_Init+0x98>)
 8001022:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001024:	4b1f      	ldr	r3, [pc, #124]	@ (80010a4 <MX_USART3_UART_Init+0x90>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800102a:	4b1e      	ldr	r3, [pc, #120]	@ (80010a4 <MX_USART3_UART_Init+0x90>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001030:	4b1c      	ldr	r3, [pc, #112]	@ (80010a4 <MX_USART3_UART_Init+0x90>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001036:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <MX_USART3_UART_Init+0x90>)
 8001038:	220c      	movs	r2, #12
 800103a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103c:	4b19      	ldr	r3, [pc, #100]	@ (80010a4 <MX_USART3_UART_Init+0x90>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001042:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <MX_USART3_UART_Init+0x90>)
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001048:	4b16      	ldr	r3, [pc, #88]	@ (80010a4 <MX_USART3_UART_Init+0x90>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <MX_USART3_UART_Init+0x90>)
 8001050:	2200      	movs	r2, #0
 8001052:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001054:	4b13      	ldr	r3, [pc, #76]	@ (80010a4 <MX_USART3_UART_Init+0x90>)
 8001056:	2200      	movs	r2, #0
 8001058:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800105a:	4812      	ldr	r0, [pc, #72]	@ (80010a4 <MX_USART3_UART_Init+0x90>)
 800105c:	f007 f99c 	bl	8008398 <HAL_UART_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001066:	f000 f993 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800106a:	2100      	movs	r1, #0
 800106c:	480d      	ldr	r0, [pc, #52]	@ (80010a4 <MX_USART3_UART_Init+0x90>)
 800106e:	f008 f9a4 	bl	80093ba <HAL_UARTEx_SetTxFifoThreshold>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001078:	f000 f98a 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800107c:	2100      	movs	r1, #0
 800107e:	4809      	ldr	r0, [pc, #36]	@ (80010a4 <MX_USART3_UART_Init+0x90>)
 8001080:	f008 f9d9 	bl	8009436 <HAL_UARTEx_SetRxFifoThreshold>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800108a:	f000 f981 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <MX_USART3_UART_Init+0x90>)
 8001090:	f008 f95a 	bl	8009348 <HAL_UARTEx_DisableFifoMode>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800109a:	f000 f979 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	24000930 	.word	0x24000930
 80010a8:	40004800 	.word	0x40004800
 80010ac:	000f4240 	.word	0x000f4240

080010b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010b6:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <MX_DMA_Init+0x7c>)
 80010b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010bc:	4a1b      	ldr	r2, [pc, #108]	@ (800112c <MX_DMA_Init+0x7c>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010c6:	4b19      	ldr	r3, [pc, #100]	@ (800112c <MX_DMA_Init+0x7c>)
 80010c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010d4:	4b15      	ldr	r3, [pc, #84]	@ (800112c <MX_DMA_Init+0x7c>)
 80010d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010da:	4a14      	ldr	r2, [pc, #80]	@ (800112c <MX_DMA_Init+0x7c>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010e4:	4b11      	ldr	r3, [pc, #68]	@ (800112c <MX_DMA_Init+0x7c>)
 80010e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	200b      	movs	r0, #11
 80010f8:	f002 f855 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010fc:	200b      	movs	r0, #11
 80010fe:	f002 f86c 	bl	80031da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	200c      	movs	r0, #12
 8001108:	f002 f84d 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800110c:	200c      	movs	r0, #12
 800110e:	f002 f864 	bl	80031da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	2038      	movs	r0, #56	@ 0x38
 8001118:	f002 f845 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800111c:	2038      	movs	r0, #56	@ 0x38
 800111e:	f002 f85c 	bl	80031da <HAL_NVIC_EnableIRQ>

}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	58024400 	.word	0x58024400

08001130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	@ 0x30
 8001134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	4b8b      	ldr	r3, [pc, #556]	@ (8001374 <MX_GPIO_Init+0x244>)
 8001148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800114c:	4a89      	ldr	r2, [pc, #548]	@ (8001374 <MX_GPIO_Init+0x244>)
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001156:	4b87      	ldr	r3, [pc, #540]	@ (8001374 <MX_GPIO_Init+0x244>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
 8001162:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001164:	4b83      	ldr	r3, [pc, #524]	@ (8001374 <MX_GPIO_Init+0x244>)
 8001166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800116a:	4a82      	ldr	r2, [pc, #520]	@ (8001374 <MX_GPIO_Init+0x244>)
 800116c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001170:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001174:	4b7f      	ldr	r3, [pc, #508]	@ (8001374 <MX_GPIO_Init+0x244>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800117a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b7c      	ldr	r3, [pc, #496]	@ (8001374 <MX_GPIO_Init+0x244>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001188:	4a7a      	ldr	r2, [pc, #488]	@ (8001374 <MX_GPIO_Init+0x244>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001192:	4b78      	ldr	r3, [pc, #480]	@ (8001374 <MX_GPIO_Init+0x244>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a0:	4b74      	ldr	r3, [pc, #464]	@ (8001374 <MX_GPIO_Init+0x244>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a6:	4a73      	ldr	r2, [pc, #460]	@ (8001374 <MX_GPIO_Init+0x244>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b0:	4b70      	ldr	r3, [pc, #448]	@ (8001374 <MX_GPIO_Init+0x244>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011be:	4b6d      	ldr	r3, [pc, #436]	@ (8001374 <MX_GPIO_Init+0x244>)
 80011c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c4:	4a6b      	ldr	r2, [pc, #428]	@ (8001374 <MX_GPIO_Init+0x244>)
 80011c6:	f043 0310 	orr.w	r3, r3, #16
 80011ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ce:	4b69      	ldr	r3, [pc, #420]	@ (8001374 <MX_GPIO_Init+0x244>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d4:	f003 0310 	and.w	r3, r3, #16
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011dc:	4b65      	ldr	r3, [pc, #404]	@ (8001374 <MX_GPIO_Init+0x244>)
 80011de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e2:	4a64      	ldr	r2, [pc, #400]	@ (8001374 <MX_GPIO_Init+0x244>)
 80011e4:	f043 0308 	orr.w	r3, r3, #8
 80011e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ec:	4b61      	ldr	r3, [pc, #388]	@ (8001374 <MX_GPIO_Init+0x244>)
 80011ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011fa:	4b5e      	ldr	r3, [pc, #376]	@ (8001374 <MX_GPIO_Init+0x244>)
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001200:	4a5c      	ldr	r2, [pc, #368]	@ (8001374 <MX_GPIO_Init+0x244>)
 8001202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001206:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800120a:	4b5a      	ldr	r3, [pc, #360]	@ (8001374 <MX_GPIO_Init+0x244>)
 800120c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f244 0101 	movw	r1, #16385	@ 0x4001
 800121e:	4856      	ldr	r0, [pc, #344]	@ (8001378 <MX_GPIO_Init+0x248>)
 8001220:	f003 f8a6 	bl	8004370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800122a:	4854      	ldr	r0, [pc, #336]	@ (800137c <MX_GPIO_Init+0x24c>)
 800122c:	f003 f8a0 	bl	8004370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	2102      	movs	r1, #2
 8001234:	4852      	ldr	r0, [pc, #328]	@ (8001380 <MX_GPIO_Init+0x250>)
 8001236:	f003 f89b 	bl	8004370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800123a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800123e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	484d      	ldr	r0, [pc, #308]	@ (8001384 <MX_GPIO_Init+0x254>)
 8001250:	f002 fede 	bl	8004010 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001254:	2332      	movs	r3, #50	@ 0x32
 8001256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001264:	230b      	movs	r3, #11
 8001266:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	4845      	ldr	r0, [pc, #276]	@ (8001384 <MX_GPIO_Init+0x254>)
 8001270:	f002 fece 	bl	8004010 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001274:	2386      	movs	r3, #134	@ 0x86
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001284:	230b      	movs	r3, #11
 8001286:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4619      	mov	r1, r3
 800128e:	483e      	ldr	r0, [pc, #248]	@ (8001388 <MX_GPIO_Init+0x258>)
 8001290:	f002 febe 	bl	8004010 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001294:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4832      	ldr	r0, [pc, #200]	@ (8001378 <MX_GPIO_Init+0x248>)
 80012ae:	f002 feaf 	bl	8004010 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012c4:	230b      	movs	r3, #11
 80012c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	482a      	ldr	r0, [pc, #168]	@ (8001378 <MX_GPIO_Init+0x248>)
 80012d0:	f002 fe9e 	bl	8004010 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80012d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4619      	mov	r1, r3
 80012ec:	4823      	ldr	r0, [pc, #140]	@ (800137c <MX_GPIO_Init+0x24c>)
 80012ee:	f002 fe8f 	bl	8004010 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80012f2:	2380      	movs	r3, #128	@ 0x80
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	4619      	mov	r1, r3
 8001306:	4821      	ldr	r0, [pc, #132]	@ (800138c <MX_GPIO_Init+0x25c>)
 8001308:	f002 fe82 	bl	8004010 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800130c:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800131e:	230a      	movs	r3, #10
 8001320:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4817      	ldr	r0, [pc, #92]	@ (8001388 <MX_GPIO_Init+0x258>)
 800132a:	f002 fe71 	bl	8004010 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800132e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001340:	230b      	movs	r3, #11
 8001342:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	4619      	mov	r1, r3
 800134a:	4810      	ldr	r0, [pc, #64]	@ (800138c <MX_GPIO_Init+0x25c>)
 800134c:	f002 fe60 	bl	8004010 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001350:	2302      	movs	r3, #2
 8001352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001354:	2301      	movs	r3, #1
 8001356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	4806      	ldr	r0, [pc, #24]	@ (8001380 <MX_GPIO_Init+0x250>)
 8001368:	f002 fe52 	bl	8004010 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800136c:	bf00      	nop
 800136e:	3730      	adds	r7, #48	@ 0x30
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	58024400 	.word	0x58024400
 8001378:	58020400 	.word	0x58020400
 800137c:	58020c00 	.word	0x58020c00
 8001380:	58021000 	.word	0x58021000
 8001384:	58020800 	.word	0x58020800
 8001388:	58020000 	.word	0x58020000
 800138c:	58021800 	.word	0x58021800

08001390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001394:	b672      	cpsid	i
}
 8001396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <Error_Handler+0x8>

0800139c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <HAL_MspInit+0x5c>)
 80013a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013a8:	4a13      	ldr	r2, [pc, #76]	@ (80013f8 <HAL_MspInit+0x5c>)
 80013aa:	f043 0302 	orr.w	r3, r3, #2
 80013ae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013b2:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <HAL_MspInit+0x5c>)
 80013b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80013c0:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <HAL_MspInit+0x5c>)
 80013c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013c6:	4a0c      	ldr	r2, [pc, #48]	@ (80013f8 <HAL_MspInit+0x5c>)
 80013c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013cc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013d0:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <HAL_MspInit+0x5c>)
 80013d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80013de:	2000      	movs	r0, #0
 80013e0:	f000 fc1a 	bl	8001c18 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80013e4:	f000 fc40 	bl	8001c68 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f000 fc29 	bl	8001c40 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	58024400 	.word	0x58024400

080013fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	@ 0x30
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a5c      	ldr	r2, [pc, #368]	@ (800158c <HAL_ADC_MspInit+0x190>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d159      	bne.n	80014d2 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800141e:	4b5c      	ldr	r3, [pc, #368]	@ (8001590 <HAL_ADC_MspInit+0x194>)
 8001420:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001424:	4a5a      	ldr	r2, [pc, #360]	@ (8001590 <HAL_ADC_MspInit+0x194>)
 8001426:	f043 0320 	orr.w	r3, r3, #32
 800142a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800142e:	4b58      	ldr	r3, [pc, #352]	@ (8001590 <HAL_ADC_MspInit+0x194>)
 8001430:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001434:	f003 0320 	and.w	r3, r3, #32
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143c:	4b54      	ldr	r3, [pc, #336]	@ (8001590 <HAL_ADC_MspInit+0x194>)
 800143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001442:	4a53      	ldr	r2, [pc, #332]	@ (8001590 <HAL_ADC_MspInit+0x194>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800144c:	4b50      	ldr	r3, [pc, #320]	@ (8001590 <HAL_ADC_MspInit+0x194>)
 800144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_INP19
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800145a:	2320      	movs	r3, #32
 800145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145e:	2303      	movs	r3, #3
 8001460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	4619      	mov	r1, r3
 800146c:	4849      	ldr	r0, [pc, #292]	@ (8001594 <HAL_ADC_MspInit+0x198>)
 800146e:	f002 fdcf 	bl	8004010 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001472:	4b49      	ldr	r3, [pc, #292]	@ (8001598 <HAL_ADC_MspInit+0x19c>)
 8001474:	4a49      	ldr	r2, [pc, #292]	@ (800159c <HAL_ADC_MspInit+0x1a0>)
 8001476:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001478:	4b47      	ldr	r3, [pc, #284]	@ (8001598 <HAL_ADC_MspInit+0x19c>)
 800147a:	2209      	movs	r2, #9
 800147c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800147e:	4b46      	ldr	r3, [pc, #280]	@ (8001598 <HAL_ADC_MspInit+0x19c>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001484:	4b44      	ldr	r3, [pc, #272]	@ (8001598 <HAL_ADC_MspInit+0x19c>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800148a:	4b43      	ldr	r3, [pc, #268]	@ (8001598 <HAL_ADC_MspInit+0x19c>)
 800148c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001490:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001492:	4b41      	ldr	r3, [pc, #260]	@ (8001598 <HAL_ADC_MspInit+0x19c>)
 8001494:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001498:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800149a:	4b3f      	ldr	r3, [pc, #252]	@ (8001598 <HAL_ADC_MspInit+0x19c>)
 800149c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80014a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001598 <HAL_ADC_MspInit+0x19c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001598 <HAL_ADC_MspInit+0x19c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001598 <HAL_ADC_MspInit+0x19c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014b4:	4838      	ldr	r0, [pc, #224]	@ (8001598 <HAL_ADC_MspInit+0x19c>)
 80014b6:	f002 f813 	bl	80034e0 <HAL_DMA_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80014c0:	f7ff ff66 	bl	8001390 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a34      	ldr	r2, [pc, #208]	@ (8001598 <HAL_ADC_MspInit+0x19c>)
 80014c8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014ca:	4a33      	ldr	r2, [pc, #204]	@ (8001598 <HAL_ADC_MspInit+0x19c>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80014d0:	e057      	b.n	8001582 <HAL_ADC_MspInit+0x186>
  else if(hadc->Instance==ADC3)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a32      	ldr	r2, [pc, #200]	@ (80015a0 <HAL_ADC_MspInit+0x1a4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d152      	bne.n	8001582 <HAL_ADC_MspInit+0x186>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80014dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001590 <HAL_ADC_MspInit+0x194>)
 80014de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e2:	4a2b      	ldr	r2, [pc, #172]	@ (8001590 <HAL_ADC_MspInit+0x194>)
 80014e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ec:	4b28      	ldr	r3, [pc, #160]	@ (8001590 <HAL_ADC_MspInit+0x194>)
 80014ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	4b25      	ldr	r3, [pc, #148]	@ (8001590 <HAL_ADC_MspInit+0x194>)
 80014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001500:	4a23      	ldr	r2, [pc, #140]	@ (8001590 <HAL_ADC_MspInit+0x194>)
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800150a:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <HAL_ADC_MspInit+0x194>)
 800150c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001518:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 800151c:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001520:	f000 fbc6 	bl	8001cb0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream0;
 8001524:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <HAL_ADC_MspInit+0x1a8>)
 8001526:	4a20      	ldr	r2, [pc, #128]	@ (80015a8 <HAL_ADC_MspInit+0x1ac>)
 8001528:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800152a:	4b1e      	ldr	r3, [pc, #120]	@ (80015a4 <HAL_ADC_MspInit+0x1a8>)
 800152c:	2273      	movs	r2, #115	@ 0x73
 800152e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001530:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <HAL_ADC_MspInit+0x1a8>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001536:	4b1b      	ldr	r3, [pc, #108]	@ (80015a4 <HAL_ADC_MspInit+0x1a8>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800153c:	4b19      	ldr	r3, [pc, #100]	@ (80015a4 <HAL_ADC_MspInit+0x1a8>)
 800153e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001542:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001544:	4b17      	ldr	r3, [pc, #92]	@ (80015a4 <HAL_ADC_MspInit+0x1a8>)
 8001546:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800154a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800154c:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <HAL_ADC_MspInit+0x1a8>)
 800154e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001552:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001554:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <HAL_ADC_MspInit+0x1a8>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800155a:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HAL_ADC_MspInit+0x1a8>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001560:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <HAL_ADC_MspInit+0x1a8>)
 8001562:	2200      	movs	r2, #0
 8001564:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001566:	480f      	ldr	r0, [pc, #60]	@ (80015a4 <HAL_ADC_MspInit+0x1a8>)
 8001568:	f001 ffba 	bl	80034e0 <HAL_DMA_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_ADC_MspInit+0x17a>
      Error_Handler();
 8001572:	f7ff ff0d 	bl	8001390 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <HAL_ADC_MspInit+0x1a8>)
 800157a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800157c:	4a09      	ldr	r2, [pc, #36]	@ (80015a4 <HAL_ADC_MspInit+0x1a8>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001582:	bf00      	nop
 8001584:	3730      	adds	r7, #48	@ 0x30
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40022000 	.word	0x40022000
 8001590:	58024400 	.word	0x58024400
 8001594:	58020000 	.word	0x58020000
 8001598:	2400073c 	.word	0x2400073c
 800159c:	40020410 	.word	0x40020410
 80015a0:	58026000 	.word	0x58026000
 80015a4:	240007b4 	.word	0x240007b4
 80015a8:	40020010 	.word	0x40020010

080015ac <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08c      	sub	sp, #48	@ 0x30
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 031c 	add.w	r3, r7, #28
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a39      	ldr	r2, [pc, #228]	@ (80016b0 <HAL_COMP_MspInit+0x104>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d133      	bne.n	8001636 <HAL_COMP_MspInit+0x8a>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_COMP12_CLK_ENABLED++;
 80015ce:	4b39      	ldr	r3, [pc, #228]	@ (80016b4 <HAL_COMP_MspInit+0x108>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	3301      	adds	r3, #1
 80015d4:	4a37      	ldr	r2, [pc, #220]	@ (80016b4 <HAL_COMP_MspInit+0x108>)
 80015d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_COMP12_CLK_ENABLED==1){
 80015d8:	4b36      	ldr	r3, [pc, #216]	@ (80016b4 <HAL_COMP_MspInit+0x108>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d10e      	bne.n	80015fe <HAL_COMP_MspInit+0x52>
      __HAL_RCC_COMP12_CLK_ENABLE();
 80015e0:	4b35      	ldr	r3, [pc, #212]	@ (80016b8 <HAL_COMP_MspInit+0x10c>)
 80015e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015e6:	4a34      	ldr	r2, [pc, #208]	@ (80016b8 <HAL_COMP_MspInit+0x10c>)
 80015e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015f0:	4b31      	ldr	r3, [pc, #196]	@ (80016b8 <HAL_COMP_MspInit+0x10c>)
 80015f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015fa:	61bb      	str	r3, [r7, #24]
 80015fc:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	4b2e      	ldr	r3, [pc, #184]	@ (80016b8 <HAL_COMP_MspInit+0x10c>)
 8001600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001604:	4a2c      	ldr	r2, [pc, #176]	@ (80016b8 <HAL_COMP_MspInit+0x10c>)
 8001606:	f043 0302 	orr.w	r3, r3, #2
 800160a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800160e:	4b2a      	ldr	r3, [pc, #168]	@ (80016b8 <HAL_COMP_MspInit+0x10c>)
 8001610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697b      	ldr	r3, [r7, #20]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800161c:	2304      	movs	r3, #4
 800161e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001620:	2303      	movs	r3, #3
 8001622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4619      	mov	r1, r3
 800162e:	4823      	ldr	r0, [pc, #140]	@ (80016bc <HAL_COMP_MspInit+0x110>)
 8001630:	f002 fcee 	bl	8004010 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8001634:	e038      	b.n	80016a8 <HAL_COMP_MspInit+0xfc>
  else if(hcomp->Instance==COMP2)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a21      	ldr	r2, [pc, #132]	@ (80016c0 <HAL_COMP_MspInit+0x114>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d133      	bne.n	80016a8 <HAL_COMP_MspInit+0xfc>
    HAL_RCC_COMP12_CLK_ENABLED++;
 8001640:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <HAL_COMP_MspInit+0x108>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	4a1b      	ldr	r2, [pc, #108]	@ (80016b4 <HAL_COMP_MspInit+0x108>)
 8001648:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_COMP12_CLK_ENABLED==1){
 800164a:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <HAL_COMP_MspInit+0x108>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d10e      	bne.n	8001670 <HAL_COMP_MspInit+0xc4>
      __HAL_RCC_COMP12_CLK_ENABLE();
 8001652:	4b19      	ldr	r3, [pc, #100]	@ (80016b8 <HAL_COMP_MspInit+0x10c>)
 8001654:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001658:	4a17      	ldr	r2, [pc, #92]	@ (80016b8 <HAL_COMP_MspInit+0x10c>)
 800165a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800165e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <HAL_COMP_MspInit+0x10c>)
 8001664:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001668:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <HAL_COMP_MspInit+0x10c>)
 8001672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001676:	4a10      	ldr	r2, [pc, #64]	@ (80016b8 <HAL_COMP_MspInit+0x10c>)
 8001678:	f043 0310 	orr.w	r3, r3, #16
 800167c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001680:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <HAL_COMP_MspInit+0x10c>)
 8001682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800168e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001694:	2303      	movs	r3, #3
 8001696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800169c:	f107 031c 	add.w	r3, r7, #28
 80016a0:	4619      	mov	r1, r3
 80016a2:	4808      	ldr	r0, [pc, #32]	@ (80016c4 <HAL_COMP_MspInit+0x118>)
 80016a4:	f002 fcb4 	bl	8004010 <HAL_GPIO_Init>
}
 80016a8:	bf00      	nop
 80016aa:	3730      	adds	r7, #48	@ 0x30
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	5800380c 	.word	0x5800380c
 80016b4:	24000a3c 	.word	0x24000a3c
 80016b8:	58024400 	.word	0x58024400
 80016bc:	58020400 	.word	0x58020400
 80016c0:	58003810 	.word	0x58003810
 80016c4:	58021000 	.word	0x58021000

080016c8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <HAL_DAC_MspInit+0x3c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d10e      	bne.n	80016f8 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80016da:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <HAL_DAC_MspInit+0x40>)
 80016dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016e0:	4a09      	ldr	r2, [pc, #36]	@ (8001708 <HAL_DAC_MspInit+0x40>)
 80016e2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80016e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016ea:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <HAL_DAC_MspInit+0x40>)
 80016ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	40007400 	.word	0x40007400
 8001708:	58024400 	.word	0x58024400

0800170c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a19      	ldr	r2, [pc, #100]	@ (8001780 <HAL_TIM_Base_MspInit+0x74>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d10f      	bne.n	800173e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800171e:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <HAL_TIM_Base_MspInit+0x78>)
 8001720:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001724:	4a17      	ldr	r2, [pc, #92]	@ (8001784 <HAL_TIM_Base_MspInit+0x78>)
 8001726:	f043 0310 	orr.w	r3, r3, #16
 800172a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <HAL_TIM_Base_MspInit+0x78>)
 8001730:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800173c:	e01b      	b.n	8001776 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM7)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a11      	ldr	r2, [pc, #68]	@ (8001788 <HAL_TIM_Base_MspInit+0x7c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d116      	bne.n	8001776 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001748:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <HAL_TIM_Base_MspInit+0x78>)
 800174a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800174e:	4a0d      	ldr	r2, [pc, #52]	@ (8001784 <HAL_TIM_Base_MspInit+0x78>)
 8001750:	f043 0320 	orr.w	r3, r3, #32
 8001754:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001758:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <HAL_TIM_Base_MspInit+0x78>)
 800175a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800175e:	f003 0320 	and.w	r3, r3, #32
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	2037      	movs	r0, #55	@ 0x37
 800176c:	f001 fd1b 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001770:	2037      	movs	r0, #55	@ 0x37
 8001772:	f001 fd32 	bl	80031da <HAL_NVIC_EnableIRQ>
}
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40001000 	.word	0x40001000
 8001784:	58024400 	.word	0x58024400
 8001788:	40001400 	.word	0x40001400

0800178c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b0ba      	sub	sp, #232	@ 0xe8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	22c0      	movs	r2, #192	@ 0xc0
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f007 fecf 	bl	8009550 <memset>
  if(huart->Instance==USART3)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a41      	ldr	r2, [pc, #260]	@ (80018bc <HAL_UART_MspInit+0x130>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d17b      	bne.n	80018b4 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017bc:	f04f 0202 	mov.w	r2, #2
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ce:	f107 0310 	add.w	r3, r7, #16
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 fe06 	bl	80053e4 <HAL_RCCEx_PeriphCLKConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80017de:	f7ff fdd7 	bl	8001390 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017e2:	4b37      	ldr	r3, [pc, #220]	@ (80018c0 <HAL_UART_MspInit+0x134>)
 80017e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017e8:	4a35      	ldr	r2, [pc, #212]	@ (80018c0 <HAL_UART_MspInit+0x134>)
 80017ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017f2:	4b33      	ldr	r3, [pc, #204]	@ (80018c0 <HAL_UART_MspInit+0x134>)
 80017f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001800:	4b2f      	ldr	r3, [pc, #188]	@ (80018c0 <HAL_UART_MspInit+0x134>)
 8001802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001806:	4a2e      	ldr	r2, [pc, #184]	@ (80018c0 <HAL_UART_MspInit+0x134>)
 8001808:	f043 0308 	orr.w	r3, r3, #8
 800180c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001810:	4b2b      	ldr	r3, [pc, #172]	@ (80018c0 <HAL_UART_MspInit+0x134>)
 8001812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800181e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001822:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001838:	2307      	movs	r3, #7
 800183a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800183e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001842:	4619      	mov	r1, r3
 8001844:	481f      	ldr	r0, [pc, #124]	@ (80018c4 <HAL_UART_MspInit+0x138>)
 8001846:	f002 fbe3 	bl	8004010 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 800184a:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <HAL_UART_MspInit+0x13c>)
 800184c:	4a1f      	ldr	r2, [pc, #124]	@ (80018cc <HAL_UART_MspInit+0x140>)
 800184e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001850:	4b1d      	ldr	r3, [pc, #116]	@ (80018c8 <HAL_UART_MspInit+0x13c>)
 8001852:	222e      	movs	r2, #46	@ 0x2e
 8001854:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001856:	4b1c      	ldr	r3, [pc, #112]	@ (80018c8 <HAL_UART_MspInit+0x13c>)
 8001858:	2240      	movs	r2, #64	@ 0x40
 800185a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800185c:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <HAL_UART_MspInit+0x13c>)
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001862:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <HAL_UART_MspInit+0x13c>)
 8001864:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001868:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800186a:	4b17      	ldr	r3, [pc, #92]	@ (80018c8 <HAL_UART_MspInit+0x13c>)
 800186c:	2200      	movs	r2, #0
 800186e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001870:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <HAL_UART_MspInit+0x13c>)
 8001872:	2200      	movs	r2, #0
 8001874:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001876:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <HAL_UART_MspInit+0x13c>)
 8001878:	2200      	movs	r2, #0
 800187a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800187c:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <HAL_UART_MspInit+0x13c>)
 800187e:	2200      	movs	r2, #0
 8001880:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001882:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <HAL_UART_MspInit+0x13c>)
 8001884:	2200      	movs	r2, #0
 8001886:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001888:	480f      	ldr	r0, [pc, #60]	@ (80018c8 <HAL_UART_MspInit+0x13c>)
 800188a:	f001 fe29 	bl	80034e0 <HAL_DMA_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001894:	f7ff fd7c 	bl	8001390 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a0b      	ldr	r2, [pc, #44]	@ (80018c8 <HAL_UART_MspInit+0x13c>)
 800189c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800189e:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <HAL_UART_MspInit+0x13c>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2100      	movs	r1, #0
 80018a8:	2027      	movs	r0, #39	@ 0x27
 80018aa:	f001 fc7c 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018ae:	2027      	movs	r0, #39	@ 0x27
 80018b0:	f001 fc93 	bl	80031da <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80018b4:	bf00      	nop
 80018b6:	37e8      	adds	r7, #232	@ 0xe8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40004800 	.word	0x40004800
 80018c0:	58024400 	.word	0x58024400
 80018c4:	58020c00 	.word	0x58020c00
 80018c8:	240009c4 	.word	0x240009c4
 80018cc:	40020028 	.word	0x40020028

080018d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <NMI_Handler+0x4>

080018d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <HardFault_Handler+0x4>

080018e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <MemManage_Handler+0x4>

080018e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <BusFault_Handler+0x4>

080018f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <UsageFault_Handler+0x4>

080018f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001926:	f000 f94b 	bl	8001bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}

0800192e <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	DMA_custom_interrupt_rx();
 8001932:	f7ff f823 	bl	800097c <DMA_custom_interrupt_rx>
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}

0800193a <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
	DMA_custom_interrupt_tx();
 800193e:	f7fe ffd7 	bl	80008f0 <DMA_custom_interrupt_tx>
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}

08001946 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	USART_custom_interrupt();
 800194a:	f7ff f885 	bl	8000a58 <USART_custom_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	TIM7_custom_interrupt();
 8001958:	f7fe ff12 	bl	8000780 <TIM7_custom_interrupt>

	if(1)
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800195c:	4802      	ldr	r0, [pc, #8]	@ (8001968 <TIM7_IRQHandler+0x14>)
 800195e:	f006 fa96 	bl	8007e8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	240008e4 	.word	0x240008e4

0800196c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	DMA2_custom_interrupt();
 8001970:	f7ff f838 	bl	80009e4 <DMA2_custom_interrupt>
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800197c:	4b37      	ldr	r3, [pc, #220]	@ (8001a5c <SystemInit+0xe4>)
 800197e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001982:	4a36      	ldr	r2, [pc, #216]	@ (8001a5c <SystemInit+0xe4>)
 8001984:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001988:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800198c:	4b34      	ldr	r3, [pc, #208]	@ (8001a60 <SystemInit+0xe8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 030f 	and.w	r3, r3, #15
 8001994:	2b06      	cmp	r3, #6
 8001996:	d807      	bhi.n	80019a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001998:	4b31      	ldr	r3, [pc, #196]	@ (8001a60 <SystemInit+0xe8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f023 030f 	bic.w	r3, r3, #15
 80019a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001a60 <SystemInit+0xe8>)
 80019a2:	f043 0307 	orr.w	r3, r3, #7
 80019a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a64 <SystemInit+0xec>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a2d      	ldr	r2, [pc, #180]	@ (8001a64 <SystemInit+0xec>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a64 <SystemInit+0xec>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001a64 <SystemInit+0xec>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4929      	ldr	r1, [pc, #164]	@ (8001a64 <SystemInit+0xec>)
 80019c0:	4b29      	ldr	r3, [pc, #164]	@ (8001a68 <SystemInit+0xf0>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019c6:	4b26      	ldr	r3, [pc, #152]	@ (8001a60 <SystemInit+0xe8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d007      	beq.n	80019e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019d2:	4b23      	ldr	r3, [pc, #140]	@ (8001a60 <SystemInit+0xe8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 030f 	bic.w	r3, r3, #15
 80019da:	4a21      	ldr	r2, [pc, #132]	@ (8001a60 <SystemInit+0xe8>)
 80019dc:	f043 0307 	orr.w	r3, r3, #7
 80019e0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019e2:	4b20      	ldr	r3, [pc, #128]	@ (8001a64 <SystemInit+0xec>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a64 <SystemInit+0xec>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001a64 <SystemInit+0xec>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <SystemInit+0xec>)
 80019f6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a6c <SystemInit+0xf4>)
 80019f8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001a64 <SystemInit+0xec>)
 80019fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001a70 <SystemInit+0xf8>)
 80019fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a00:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <SystemInit+0xec>)
 8001a02:	4a1c      	ldr	r2, [pc, #112]	@ (8001a74 <SystemInit+0xfc>)
 8001a04:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a06:	4b17      	ldr	r3, [pc, #92]	@ (8001a64 <SystemInit+0xec>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a0c:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <SystemInit+0xec>)
 8001a0e:	4a19      	ldr	r2, [pc, #100]	@ (8001a74 <SystemInit+0xfc>)
 8001a10:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a12:	4b14      	ldr	r3, [pc, #80]	@ (8001a64 <SystemInit+0xec>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a18:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <SystemInit+0xec>)
 8001a1a:	4a16      	ldr	r2, [pc, #88]	@ (8001a74 <SystemInit+0xfc>)
 8001a1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <SystemInit+0xec>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	@ (8001a64 <SystemInit+0xec>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0e      	ldr	r2, [pc, #56]	@ (8001a64 <SystemInit+0xec>)
 8001a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a30:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <SystemInit+0xec>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a36:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <SystemInit+0x100>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4b10      	ldr	r3, [pc, #64]	@ (8001a7c <SystemInit+0x104>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a42:	d202      	bcs.n	8001a4a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a44:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <SystemInit+0x108>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a84 <SystemInit+0x10c>)
 8001a4c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001a50:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00
 8001a60:	52002000 	.word	0x52002000
 8001a64:	58024400 	.word	0x58024400
 8001a68:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a6c:	02020200 	.word	0x02020200
 8001a70:	01ff0000 	.word	0x01ff0000
 8001a74:	01010280 	.word	0x01010280
 8001a78:	5c001000 	.word	0x5c001000
 8001a7c:	ffff0000 	.word	0xffff0000
 8001a80:	51008108 	.word	0x51008108
 8001a84:	52004000 	.word	0x52004000

08001a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ac0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a8c:	f7ff ff74 	bl	8001978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a90:	480c      	ldr	r0, [pc, #48]	@ (8001ac4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a92:	490d      	ldr	r1, [pc, #52]	@ (8001ac8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a94:	4a0d      	ldr	r2, [pc, #52]	@ (8001acc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a98:	e002      	b.n	8001aa0 <LoopCopyDataInit>

08001a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9e:	3304      	adds	r3, #4

08001aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa4:	d3f9      	bcc.n	8001a9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aa8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ad4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aac:	e001      	b.n	8001ab2 <LoopFillZerobss>

08001aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab0:	3204      	adds	r2, #4

08001ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab4:	d3fb      	bcc.n	8001aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ab6:	f007 fd53 	bl	8009560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aba:	f7fe ffff 	bl	8000abc <main>
  bx  lr
 8001abe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ac0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ac4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ac8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001acc:	08009610 	.word	0x08009610
  ldr r2, =_sbss
 8001ad0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001ad4:	24000a44 	.word	0x24000a44

08001ad8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC3_IRQHandler>
	...

08001adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae2:	2003      	movs	r0, #3
 8001ae4:	f001 fb54 	bl	8003190 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ae8:	f003 faa6 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8001aec:	4602      	mov	r2, r0
 8001aee:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <HAL_Init+0x68>)
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	0a1b      	lsrs	r3, r3, #8
 8001af4:	f003 030f 	and.w	r3, r3, #15
 8001af8:	4913      	ldr	r1, [pc, #76]	@ (8001b48 <HAL_Init+0x6c>)
 8001afa:	5ccb      	ldrb	r3, [r1, r3]
 8001afc:	f003 031f 	and.w	r3, r3, #31
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
 8001b04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b06:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <HAL_Init+0x68>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b48 <HAL_Init+0x6c>)
 8001b10:	5cd3      	ldrb	r3, [r2, r3]
 8001b12:	f003 031f 	and.w	r3, r3, #31
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b4c <HAL_Init+0x70>)
 8001b1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b20:	4a0b      	ldr	r2, [pc, #44]	@ (8001b50 <HAL_Init+0x74>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b26:	2000      	movs	r0, #0
 8001b28:	f000 f814 	bl	8001b54 <HAL_InitTick>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e002      	b.n	8001b3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b36:	f7ff fc31 	bl	800139c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	58024400 	.word	0x58024400
 8001b48:	080095c0 	.word	0x080095c0
 8001b4c:	24000004 	.word	0x24000004
 8001b50:	24000000 	.word	0x24000000

08001b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b5c:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <HAL_InitTick+0x60>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e021      	b.n	8001bac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b68:	4b13      	ldr	r3, [pc, #76]	@ (8001bb8 <HAL_InitTick+0x64>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <HAL_InitTick+0x60>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f001 fb39 	bl	80031f6 <HAL_SYSTICK_Config>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00e      	b.n	8001bac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b0f      	cmp	r3, #15
 8001b92:	d80a      	bhi.n	8001baa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b94:	2200      	movs	r2, #0
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f001 fb03 	bl	80031a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba0:	4a06      	ldr	r2, [pc, #24]	@ (8001bbc <HAL_InitTick+0x68>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e000      	b.n	8001bac <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	2400000c 	.word	0x2400000c
 8001bb8:	24000000 	.word	0x24000000
 8001bbc:	24000008 	.word	0x24000008

08001bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <HAL_IncTick+0x20>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_IncTick+0x24>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a04      	ldr	r2, [pc, #16]	@ (8001be4 <HAL_IncTick+0x24>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	2400000c 	.word	0x2400000c
 8001be4:	24000a40 	.word	0x24000a40

08001be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return uwTick;
 8001bec:	4b03      	ldr	r3, [pc, #12]	@ (8001bfc <HAL_GetTick+0x14>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	24000a40 	.word	0x24000a40

08001c00 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c04:	4b03      	ldr	r3, [pc, #12]	@ (8001c14 <HAL_GetREVID+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	0c1b      	lsrs	r3, r3, #16
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	5c001000 	.word	0x5c001000

08001c18 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c28:	4904      	ldr	r1, [pc, #16]	@ (8001c3c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	58003c00 	.word	0x58003c00

08001c40 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f023 0202 	bic.w	r2, r3, #2
 8001c50:	4904      	ldr	r1, [pc, #16]	@ (8001c64 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	58003c00 	.word	0x58003c00

08001c68 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cac <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a0e      	ldr	r2, [pc, #56]	@ (8001cac <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001c7a:	f7ff ffb5 	bl	8001be8 <HAL_GetTick>
 8001c7e:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001c80:	e008      	b.n	8001c94 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001c82:	f7ff ffb1 	bl	8001be8 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b0a      	cmp	r3, #10
 8001c8e:	d901      	bls.n	8001c94 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e006      	b.n	8001ca2 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	58003c00 	.word	0x58003c00

08001cb0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001cba:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	4904      	ldr	r1, [pc, #16]	@ (8001cd8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	58000400 	.word	0x58000400

08001cdc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d107      	bne.n	8001d68 <LL_ADC_SetChannelPreselection+0x24>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	0e9b      	lsrs	r3, r3, #26
 8001d5c:	f003 031f 	and.w	r3, r3, #31
 8001d60:	2201      	movs	r2, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	e015      	b.n	8001d94 <LL_ADC_SetChannelPreselection+0x50>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8001d7e:	2320      	movs	r3, #32
 8001d80:	e003      	b.n	8001d8a <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	f003 031f 	and.w	r3, r3, #31
 8001d8e:	2201      	movs	r2, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	69d2      	ldr	r2, [r2, #28]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8001d9e:	bf00      	nop
 8001da0:	371c      	adds	r7, #28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b087      	sub	sp, #28
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3360      	adds	r3, #96	@ 0x60
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	430b      	orrs	r3, r1
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001dde:	bf00      	nop
 8001de0:	371c      	adds	r7, #28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b085      	sub	sp, #20
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	3360      	adds	r3, #96	@ 0x60
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	431a      	orrs	r2, r3
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	601a      	str	r2, [r3, #0]
  }
}
 8001e46:	bf00      	nop
 8001e48:	371c      	adds	r7, #28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b087      	sub	sp, #28
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	3330      	adds	r3, #48	@ 0x30
 8001e62:	461a      	mov	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	4413      	add	r3, r2
 8001e70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	211f      	movs	r1, #31
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	401a      	ands	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	0e9b      	lsrs	r3, r3, #26
 8001e8a:	f003 011f 	and.w	r1, r3, #31
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	f003 031f 	and.w	r3, r3, #31
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e9e:	bf00      	nop
 8001ea0:	371c      	adds	r7, #28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b087      	sub	sp, #28
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	60f8      	str	r0, [r7, #12]
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	3314      	adds	r3, #20
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	0e5b      	lsrs	r3, r3, #25
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	4413      	add	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	0d1b      	lsrs	r3, r3, #20
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	2107      	movs	r1, #7
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	401a      	ands	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	0d1b      	lsrs	r3, r3, #20
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ef4:	bf00      	nop
 8001ef6:	371c      	adds	r7, #28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f003 0318 	and.w	r3, r3, #24
 8001f22:	4908      	ldr	r1, [pc, #32]	@ (8001f44 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f24:	40d9      	lsrs	r1, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	400b      	ands	r3, r1
 8001f2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001f36:	bf00      	nop
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	000fffff 	.word	0x000fffff

08001f48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	4b04      	ldr	r3, [pc, #16]	@ (8001f68 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6093      	str	r3, [r2, #8]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	5fffffc0 	.word	0x5fffffc0

08001f6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f80:	d101      	bne.n	8001f86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <LL_ADC_EnableInternalRegulator+0x24>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	6fffffc0 	.word	0x6fffffc0

08001fbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fd0:	d101      	bne.n	8001fd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <LL_ADC_IsEnabled+0x18>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <LL_ADC_IsEnabled+0x1a>
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b04      	cmp	r3, #4
 800201c:	d101      	bne.n	8002022 <LL_ADC_REG_IsConversionOngoing+0x18>
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b08      	cmp	r3, #8
 8002042:	d101      	bne.n	8002048 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002058:	b590      	push	{r4, r7, lr}
 800205a:	b089      	sub	sp, #36	@ 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002064:	2300      	movs	r3, #0
 8002066:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e18f      	b.n	8002392 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800207c:	2b00      	cmp	r3, #0
 800207e:	d109      	bne.n	8002094 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff f9bb 	bl	80013fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff67 	bl	8001f6c <LL_ADC_IsDeepPowerDownEnabled>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d004      	beq.n	80020ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff4d 	bl	8001f48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff ff82 	bl	8001fbc <LL_ADC_IsInternalRegulatorEnabled>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d114      	bne.n	80020e8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ff66 	bl	8001f94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020c8:	4b87      	ldr	r3, [pc, #540]	@ (80022e8 <HAL_ADC_Init+0x290>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	099b      	lsrs	r3, r3, #6
 80020ce:	4a87      	ldr	r2, [pc, #540]	@ (80022ec <HAL_ADC_Init+0x294>)
 80020d0:	fba2 2303 	umull	r2, r3, r2, r3
 80020d4:	099b      	lsrs	r3, r3, #6
 80020d6:	3301      	adds	r3, #1
 80020d8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020da:	e002      	b.n	80020e2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	3b01      	subs	r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f9      	bne.n	80020dc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff65 	bl	8001fbc <LL_ADC_IsInternalRegulatorEnabled>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10d      	bne.n	8002114 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fc:	f043 0210 	orr.w	r2, r3, #16
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002108:	f043 0201 	orr.w	r2, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff76 	bl	800200a <LL_ADC_REG_IsConversionOngoing>
 800211e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	2b00      	cmp	r3, #0
 800212a:	f040 8129 	bne.w	8002380 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2b00      	cmp	r3, #0
 8002132:	f040 8125 	bne.w	8002380 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800213a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800213e:	f043 0202 	orr.w	r2, r3, #2
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff ff4a 	bl	8001fe4 <LL_ADC_IsEnabled>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d136      	bne.n	80021c4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a65      	ldr	r2, [pc, #404]	@ (80022f0 <HAL_ADC_Init+0x298>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d004      	beq.n	800216a <HAL_ADC_Init+0x112>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a63      	ldr	r2, [pc, #396]	@ (80022f4 <HAL_ADC_Init+0x29c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d10e      	bne.n	8002188 <HAL_ADC_Init+0x130>
 800216a:	4861      	ldr	r0, [pc, #388]	@ (80022f0 <HAL_ADC_Init+0x298>)
 800216c:	f7ff ff3a 	bl	8001fe4 <LL_ADC_IsEnabled>
 8002170:	4604      	mov	r4, r0
 8002172:	4860      	ldr	r0, [pc, #384]	@ (80022f4 <HAL_ADC_Init+0x29c>)
 8002174:	f7ff ff36 	bl	8001fe4 <LL_ADC_IsEnabled>
 8002178:	4603      	mov	r3, r0
 800217a:	4323      	orrs	r3, r4
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	e008      	b.n	800219a <HAL_ADC_Init+0x142>
 8002188:	485b      	ldr	r0, [pc, #364]	@ (80022f8 <HAL_ADC_Init+0x2a0>)
 800218a:	f7ff ff2b 	bl	8001fe4 <LL_ADC_IsEnabled>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d012      	beq.n	80021c4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a53      	ldr	r2, [pc, #332]	@ (80022f0 <HAL_ADC_Init+0x298>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d004      	beq.n	80021b2 <HAL_ADC_Init+0x15a>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a51      	ldr	r2, [pc, #324]	@ (80022f4 <HAL_ADC_Init+0x29c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_Init+0x15e>
 80021b2:	4a52      	ldr	r2, [pc, #328]	@ (80022fc <HAL_ADC_Init+0x2a4>)
 80021b4:	e000      	b.n	80021b8 <HAL_ADC_Init+0x160>
 80021b6:	4a52      	ldr	r2, [pc, #328]	@ (8002300 <HAL_ADC_Init+0x2a8>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	4619      	mov	r1, r3
 80021be:	4610      	mov	r0, r2
 80021c0:	f7ff fd8c 	bl	8001cdc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80021c4:	f7ff fd1c 	bl	8001c00 <HAL_GetREVID>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f241 0203 	movw	r2, #4099	@ 0x1003
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d914      	bls.n	80021fc <HAL_ADC_Init+0x1a4>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b10      	cmp	r3, #16
 80021d8:	d110      	bne.n	80021fc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	7d5b      	ldrb	r3, [r3, #21]
 80021de:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021e4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80021ea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	7f1b      	ldrb	r3, [r3, #28]
 80021f0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80021f2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021f4:	f043 030c 	orr.w	r3, r3, #12
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	e00d      	b.n	8002218 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7d5b      	ldrb	r3, [r3, #21]
 8002200:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002206:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800220c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	7f1b      	ldrb	r3, [r3, #28]
 8002212:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	7f1b      	ldrb	r3, [r3, #28]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d106      	bne.n	800222e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	3b01      	subs	r3, #1
 8002226:	045b      	lsls	r3, r3, #17
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002232:	2b00      	cmp	r3, #0
 8002234:	d009      	beq.n	800224a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002242:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	4b2c      	ldr	r3, [pc, #176]	@ (8002304 <HAL_ADC_Init+0x2ac>)
 8002252:	4013      	ands	r3, r2
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	69b9      	ldr	r1, [r7, #24]
 800225a:	430b      	orrs	r3, r1
 800225c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fed1 	bl	800200a <LL_ADC_REG_IsConversionOngoing>
 8002268:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fede 	bl	8002030 <LL_ADC_INJ_IsConversionOngoing>
 8002274:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d15f      	bne.n	800233c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d15c      	bne.n	800233c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7d1b      	ldrb	r3, [r3, #20]
 8002286:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	4b1c      	ldr	r3, [pc, #112]	@ (8002308 <HAL_ADC_Init+0x2b0>)
 8002298:	4013      	ands	r3, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	69b9      	ldr	r1, [r7, #24]
 80022a0:	430b      	orrs	r3, r1
 80022a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d130      	bne.n	8002310 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691a      	ldr	r2, [r3, #16]
 80022ba:	4b14      	ldr	r3, [pc, #80]	@ (800230c <HAL_ADC_Init+0x2b4>)
 80022bc:	4013      	ands	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80022c2:	3a01      	subs	r2, #1
 80022c4:	0411      	lsls	r1, r2, #16
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022ca:	4311      	orrs	r1, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80022d0:	4311      	orrs	r1, r2
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022d6:	430a      	orrs	r2, r1
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	611a      	str	r2, [r3, #16]
 80022e4:	e01c      	b.n	8002320 <HAL_ADC_Init+0x2c8>
 80022e6:	bf00      	nop
 80022e8:	24000000 	.word	0x24000000
 80022ec:	053e2d63 	.word	0x053e2d63
 80022f0:	40022000 	.word	0x40022000
 80022f4:	40022100 	.word	0x40022100
 80022f8:	58026000 	.word	0x58026000
 80022fc:	40022300 	.word	0x40022300
 8002300:	58026300 	.word	0x58026300
 8002304:	fff0c003 	.word	0xfff0c003
 8002308:	ffffbffc 	.word	0xffffbffc
 800230c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0201 	bic.w	r2, r2, #1
 800231e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 fb20 	bl	800297c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d10c      	bne.n	800235e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f023 010f 	bic.w	r1, r3, #15
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	1e5a      	subs	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	631a      	str	r2, [r3, #48]	@ 0x30
 800235c:	e007      	b.n	800236e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 020f 	bic.w	r2, r2, #15
 800236c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002372:	f023 0303 	bic.w	r3, r3, #3
 8002376:	f043 0201 	orr.w	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	655a      	str	r2, [r3, #84]	@ 0x54
 800237e:	e007      	b.n	8002390 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002384:	f043 0210 	orr.w	r2, r3, #16
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002390:	7ffb      	ldrb	r3, [r7, #31]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	@ 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd90      	pop	{r4, r7, pc}
 800239a:	bf00      	nop

0800239c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b08d      	sub	sp, #52	@ 0x34
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4a65      	ldr	r2, [pc, #404]	@ (800254c <HAL_ADC_ConfigChannel+0x1b0>)
 80023b6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x2a>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e2c7      	b.n	8002956 <HAL_ADC_ConfigChannel+0x5ba>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fe19 	bl	800200a <LL_ADC_REG_IsConversionOngoing>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f040 82ac 	bne.w	8002938 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	db2c      	blt.n	8002442 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d108      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x6a>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	0e9b      	lsrs	r3, r3, #26
 80023fa:	f003 031f 	and.w	r3, r3, #31
 80023fe:	2201      	movs	r2, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	e016      	b.n	8002434 <HAL_ADC_ConfigChannel+0x98>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	613b      	str	r3, [r7, #16]
  return result;
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 800241e:	2320      	movs	r3, #32
 8002420:	e003      	b.n	800242a <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	fab3 f383 	clz	r3, r3
 8002428:	b2db      	uxtb	r3, r3
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	2201      	movs	r2, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	69d1      	ldr	r1, [r2, #28]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	430b      	orrs	r3, r1
 8002440:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6859      	ldr	r1, [r3, #4]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	f7ff fcff 	bl	8001e52 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fdd6 	bl	800200a <LL_ADC_REG_IsConversionOngoing>
 800245e:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fde3 	bl	8002030 <LL_ADC_INJ_IsConversionOngoing>
 800246a:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800246c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246e:	2b00      	cmp	r3, #0
 8002470:	f040 80b8 	bne.w	80025e4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002476:	2b00      	cmp	r3, #0
 8002478:	f040 80b4 	bne.w	80025e4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	6819      	ldr	r1, [r3, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	461a      	mov	r2, r3
 800248a:	f7ff fd0e 	bl	8001eaa <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800248e:	4b30      	ldr	r3, [pc, #192]	@ (8002550 <HAL_ADC_ConfigChannel+0x1b4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002496:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800249a:	d10b      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x118>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	e01d      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x154>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10b      	bne.n	80024da <HAL_ADC_ConfigChannel+0x13e>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	e00a      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x154>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d02c      	beq.n	8002554 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	6919      	ldr	r1, [r3, #16]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	f7ff fc4f 	bl	8001daa <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	6919      	ldr	r1, [r3, #16]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	7e5b      	ldrb	r3, [r3, #25]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d102      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x186>
 800251c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002520:	e000      	b.n	8002524 <HAL_ADC_ConfigChannel+0x188>
 8002522:	2300      	movs	r3, #0
 8002524:	461a      	mov	r2, r3
 8002526:	f7ff fc79 	bl	8001e1c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	6919      	ldr	r1, [r3, #16]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	7e1b      	ldrb	r3, [r3, #24]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d102      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x1a4>
 800253a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800253e:	e000      	b.n	8002542 <HAL_ADC_ConfigChannel+0x1a6>
 8002540:	2300      	movs	r3, #0
 8002542:	461a      	mov	r2, r3
 8002544:	f7ff fc51 	bl	8001dea <LL_ADC_SetDataRightShift>
 8002548:	e04c      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x248>
 800254a:	bf00      	nop
 800254c:	47ff0000 	.word	0x47ff0000
 8002550:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	069b      	lsls	r3, r3, #26
 8002564:	429a      	cmp	r2, r3
 8002566:	d107      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002576:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800257e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	069b      	lsls	r3, r3, #26
 8002588:	429a      	cmp	r2, r3
 800258a:	d107      	bne.n	800259c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800259a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	069b      	lsls	r3, r3, #26
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d107      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025be:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	069b      	lsls	r3, r3, #26
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d107      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025e2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fcfb 	bl	8001fe4 <LL_ADC_IsEnabled>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f040 81aa 	bne.w	800294a <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6819      	ldr	r1, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	461a      	mov	r2, r3
 8002604:	f7ff fc7c 	bl	8001f00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4a87      	ldr	r2, [pc, #540]	@ (800282c <HAL_ADC_ConfigChannel+0x490>)
 800260e:	4293      	cmp	r3, r2
 8002610:	f040 809a 	bne.w	8002748 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4984      	ldr	r1, [pc, #528]	@ (8002830 <HAL_ADC_ConfigChannel+0x494>)
 800261e:	428b      	cmp	r3, r1
 8002620:	d147      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x316>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4983      	ldr	r1, [pc, #524]	@ (8002834 <HAL_ADC_ConfigChannel+0x498>)
 8002628:	428b      	cmp	r3, r1
 800262a:	d040      	beq.n	80026ae <HAL_ADC_ConfigChannel+0x312>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4981      	ldr	r1, [pc, #516]	@ (8002838 <HAL_ADC_ConfigChannel+0x49c>)
 8002632:	428b      	cmp	r3, r1
 8002634:	d039      	beq.n	80026aa <HAL_ADC_ConfigChannel+0x30e>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4980      	ldr	r1, [pc, #512]	@ (800283c <HAL_ADC_ConfigChannel+0x4a0>)
 800263c:	428b      	cmp	r3, r1
 800263e:	d032      	beq.n	80026a6 <HAL_ADC_ConfigChannel+0x30a>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	497e      	ldr	r1, [pc, #504]	@ (8002840 <HAL_ADC_ConfigChannel+0x4a4>)
 8002646:	428b      	cmp	r3, r1
 8002648:	d02b      	beq.n	80026a2 <HAL_ADC_ConfigChannel+0x306>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	497d      	ldr	r1, [pc, #500]	@ (8002844 <HAL_ADC_ConfigChannel+0x4a8>)
 8002650:	428b      	cmp	r3, r1
 8002652:	d024      	beq.n	800269e <HAL_ADC_ConfigChannel+0x302>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	497b      	ldr	r1, [pc, #492]	@ (8002848 <HAL_ADC_ConfigChannel+0x4ac>)
 800265a:	428b      	cmp	r3, r1
 800265c:	d01d      	beq.n	800269a <HAL_ADC_ConfigChannel+0x2fe>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	497a      	ldr	r1, [pc, #488]	@ (800284c <HAL_ADC_ConfigChannel+0x4b0>)
 8002664:	428b      	cmp	r3, r1
 8002666:	d016      	beq.n	8002696 <HAL_ADC_ConfigChannel+0x2fa>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4978      	ldr	r1, [pc, #480]	@ (8002850 <HAL_ADC_ConfigChannel+0x4b4>)
 800266e:	428b      	cmp	r3, r1
 8002670:	d00f      	beq.n	8002692 <HAL_ADC_ConfigChannel+0x2f6>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4977      	ldr	r1, [pc, #476]	@ (8002854 <HAL_ADC_ConfigChannel+0x4b8>)
 8002678:	428b      	cmp	r3, r1
 800267a:	d008      	beq.n	800268e <HAL_ADC_ConfigChannel+0x2f2>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4975      	ldr	r1, [pc, #468]	@ (8002858 <HAL_ADC_ConfigChannel+0x4bc>)
 8002682:	428b      	cmp	r3, r1
 8002684:	d101      	bne.n	800268a <HAL_ADC_ConfigChannel+0x2ee>
 8002686:	4b75      	ldr	r3, [pc, #468]	@ (800285c <HAL_ADC_ConfigChannel+0x4c0>)
 8002688:	e05a      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3a4>
 800268a:	2300      	movs	r3, #0
 800268c:	e058      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3a4>
 800268e:	4b74      	ldr	r3, [pc, #464]	@ (8002860 <HAL_ADC_ConfigChannel+0x4c4>)
 8002690:	e056      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3a4>
 8002692:	4b74      	ldr	r3, [pc, #464]	@ (8002864 <HAL_ADC_ConfigChannel+0x4c8>)
 8002694:	e054      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3a4>
 8002696:	4b6e      	ldr	r3, [pc, #440]	@ (8002850 <HAL_ADC_ConfigChannel+0x4b4>)
 8002698:	e052      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3a4>
 800269a:	4b6c      	ldr	r3, [pc, #432]	@ (800284c <HAL_ADC_ConfigChannel+0x4b0>)
 800269c:	e050      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3a4>
 800269e:	4b72      	ldr	r3, [pc, #456]	@ (8002868 <HAL_ADC_ConfigChannel+0x4cc>)
 80026a0:	e04e      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3a4>
 80026a2:	4b72      	ldr	r3, [pc, #456]	@ (800286c <HAL_ADC_ConfigChannel+0x4d0>)
 80026a4:	e04c      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3a4>
 80026a6:	4b72      	ldr	r3, [pc, #456]	@ (8002870 <HAL_ADC_ConfigChannel+0x4d4>)
 80026a8:	e04a      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3a4>
 80026aa:	4b72      	ldr	r3, [pc, #456]	@ (8002874 <HAL_ADC_ConfigChannel+0x4d8>)
 80026ac:	e048      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3a4>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e046      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3a4>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4970      	ldr	r1, [pc, #448]	@ (8002878 <HAL_ADC_ConfigChannel+0x4dc>)
 80026b8:	428b      	cmp	r3, r1
 80026ba:	d140      	bne.n	800273e <HAL_ADC_ConfigChannel+0x3a2>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	495c      	ldr	r1, [pc, #368]	@ (8002834 <HAL_ADC_ConfigChannel+0x498>)
 80026c2:	428b      	cmp	r3, r1
 80026c4:	d039      	beq.n	800273a <HAL_ADC_ConfigChannel+0x39e>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	495b      	ldr	r1, [pc, #364]	@ (8002838 <HAL_ADC_ConfigChannel+0x49c>)
 80026cc:	428b      	cmp	r3, r1
 80026ce:	d032      	beq.n	8002736 <HAL_ADC_ConfigChannel+0x39a>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4959      	ldr	r1, [pc, #356]	@ (800283c <HAL_ADC_ConfigChannel+0x4a0>)
 80026d6:	428b      	cmp	r3, r1
 80026d8:	d02b      	beq.n	8002732 <HAL_ADC_ConfigChannel+0x396>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4958      	ldr	r1, [pc, #352]	@ (8002840 <HAL_ADC_ConfigChannel+0x4a4>)
 80026e0:	428b      	cmp	r3, r1
 80026e2:	d024      	beq.n	800272e <HAL_ADC_ConfigChannel+0x392>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4956      	ldr	r1, [pc, #344]	@ (8002844 <HAL_ADC_ConfigChannel+0x4a8>)
 80026ea:	428b      	cmp	r3, r1
 80026ec:	d01d      	beq.n	800272a <HAL_ADC_ConfigChannel+0x38e>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4955      	ldr	r1, [pc, #340]	@ (8002848 <HAL_ADC_ConfigChannel+0x4ac>)
 80026f4:	428b      	cmp	r3, r1
 80026f6:	d016      	beq.n	8002726 <HAL_ADC_ConfigChannel+0x38a>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4953      	ldr	r1, [pc, #332]	@ (800284c <HAL_ADC_ConfigChannel+0x4b0>)
 80026fe:	428b      	cmp	r3, r1
 8002700:	d00f      	beq.n	8002722 <HAL_ADC_ConfigChannel+0x386>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4952      	ldr	r1, [pc, #328]	@ (8002850 <HAL_ADC_ConfigChannel+0x4b4>)
 8002708:	428b      	cmp	r3, r1
 800270a:	d008      	beq.n	800271e <HAL_ADC_ConfigChannel+0x382>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4951      	ldr	r1, [pc, #324]	@ (8002858 <HAL_ADC_ConfigChannel+0x4bc>)
 8002712:	428b      	cmp	r3, r1
 8002714:	d101      	bne.n	800271a <HAL_ADC_ConfigChannel+0x37e>
 8002716:	4b51      	ldr	r3, [pc, #324]	@ (800285c <HAL_ADC_ConfigChannel+0x4c0>)
 8002718:	e012      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3a4>
 800271a:	2300      	movs	r3, #0
 800271c:	e010      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3a4>
 800271e:	4b51      	ldr	r3, [pc, #324]	@ (8002864 <HAL_ADC_ConfigChannel+0x4c8>)
 8002720:	e00e      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3a4>
 8002722:	4b4b      	ldr	r3, [pc, #300]	@ (8002850 <HAL_ADC_ConfigChannel+0x4b4>)
 8002724:	e00c      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3a4>
 8002726:	4b49      	ldr	r3, [pc, #292]	@ (800284c <HAL_ADC_ConfigChannel+0x4b0>)
 8002728:	e00a      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3a4>
 800272a:	4b4f      	ldr	r3, [pc, #316]	@ (8002868 <HAL_ADC_ConfigChannel+0x4cc>)
 800272c:	e008      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3a4>
 800272e:	4b4f      	ldr	r3, [pc, #316]	@ (800286c <HAL_ADC_ConfigChannel+0x4d0>)
 8002730:	e006      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3a4>
 8002732:	4b4f      	ldr	r3, [pc, #316]	@ (8002870 <HAL_ADC_ConfigChannel+0x4d4>)
 8002734:	e004      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3a4>
 8002736:	4b4f      	ldr	r3, [pc, #316]	@ (8002874 <HAL_ADC_ConfigChannel+0x4d8>)
 8002738:	e002      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3a4>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_ADC_ConfigChannel+0x3a4>
 800273e:	2300      	movs	r3, #0
 8002740:	4619      	mov	r1, r3
 8002742:	4610      	mov	r0, r2
 8002744:	f7ff fafe 	bl	8001d44 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	f280 80fc 	bge.w	800294a <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a36      	ldr	r2, [pc, #216]	@ (8002830 <HAL_ADC_ConfigChannel+0x494>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d004      	beq.n	8002766 <HAL_ADC_ConfigChannel+0x3ca>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a45      	ldr	r2, [pc, #276]	@ (8002878 <HAL_ADC_ConfigChannel+0x4dc>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d101      	bne.n	800276a <HAL_ADC_ConfigChannel+0x3ce>
 8002766:	4b45      	ldr	r3, [pc, #276]	@ (800287c <HAL_ADC_ConfigChannel+0x4e0>)
 8002768:	e000      	b.n	800276c <HAL_ADC_ConfigChannel+0x3d0>
 800276a:	4b45      	ldr	r3, [pc, #276]	@ (8002880 <HAL_ADC_ConfigChannel+0x4e4>)
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fadb 	bl	8001d28 <LL_ADC_GetCommonPathInternalCh>
 8002772:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a2d      	ldr	r2, [pc, #180]	@ (8002830 <HAL_ADC_ConfigChannel+0x494>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d004      	beq.n	8002788 <HAL_ADC_ConfigChannel+0x3ec>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a3d      	ldr	r2, [pc, #244]	@ (8002878 <HAL_ADC_ConfigChannel+0x4dc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d10e      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x40a>
 8002788:	4829      	ldr	r0, [pc, #164]	@ (8002830 <HAL_ADC_ConfigChannel+0x494>)
 800278a:	f7ff fc2b 	bl	8001fe4 <LL_ADC_IsEnabled>
 800278e:	4604      	mov	r4, r0
 8002790:	4839      	ldr	r0, [pc, #228]	@ (8002878 <HAL_ADC_ConfigChannel+0x4dc>)
 8002792:	f7ff fc27 	bl	8001fe4 <LL_ADC_IsEnabled>
 8002796:	4603      	mov	r3, r0
 8002798:	4323      	orrs	r3, r4
 800279a:	2b00      	cmp	r3, #0
 800279c:	bf0c      	ite	eq
 800279e:	2301      	moveq	r3, #1
 80027a0:	2300      	movne	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	e008      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x41c>
 80027a6:	4837      	ldr	r0, [pc, #220]	@ (8002884 <HAL_ADC_ConfigChannel+0x4e8>)
 80027a8:	f7ff fc1c 	bl	8001fe4 <LL_ADC_IsEnabled>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bf0c      	ite	eq
 80027b2:	2301      	moveq	r3, #1
 80027b4:	2300      	movne	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80b3 	beq.w	8002924 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a31      	ldr	r2, [pc, #196]	@ (8002888 <HAL_ADC_ConfigChannel+0x4ec>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d165      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x4f8>
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d160      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a2b      	ldr	r2, [pc, #172]	@ (8002884 <HAL_ADC_ConfigChannel+0x4e8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	f040 80b6 	bne.w	800294a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a13      	ldr	r2, [pc, #76]	@ (8002830 <HAL_ADC_ConfigChannel+0x494>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d004      	beq.n	80027f2 <HAL_ADC_ConfigChannel+0x456>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a22      	ldr	r2, [pc, #136]	@ (8002878 <HAL_ADC_ConfigChannel+0x4dc>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d101      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x45a>
 80027f2:	4a22      	ldr	r2, [pc, #136]	@ (800287c <HAL_ADC_ConfigChannel+0x4e0>)
 80027f4:	e000      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x45c>
 80027f6:	4a22      	ldr	r2, [pc, #136]	@ (8002880 <HAL_ADC_ConfigChannel+0x4e4>)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027fe:	4619      	mov	r1, r3
 8002800:	4610      	mov	r0, r2
 8002802:	f7ff fa7e 	bl	8001d02 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002806:	4b21      	ldr	r3, [pc, #132]	@ (800288c <HAL_ADC_ConfigChannel+0x4f0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	099b      	lsrs	r3, r3, #6
 800280c:	4a20      	ldr	r2, [pc, #128]	@ (8002890 <HAL_ADC_ConfigChannel+0x4f4>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	099b      	lsrs	r3, r3, #6
 8002814:	3301      	adds	r3, #1
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800281a:	e002      	b.n	8002822 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	3b01      	subs	r3, #1
 8002820:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f9      	bne.n	800281c <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002828:	e08f      	b.n	800294a <HAL_ADC_ConfigChannel+0x5ae>
 800282a:	bf00      	nop
 800282c:	47ff0000 	.word	0x47ff0000
 8002830:	40022000 	.word	0x40022000
 8002834:	04300002 	.word	0x04300002
 8002838:	08600004 	.word	0x08600004
 800283c:	0c900008 	.word	0x0c900008
 8002840:	10c00010 	.word	0x10c00010
 8002844:	14f00020 	.word	0x14f00020
 8002848:	2a000400 	.word	0x2a000400
 800284c:	2e300800 	.word	0x2e300800
 8002850:	32601000 	.word	0x32601000
 8002854:	43210000 	.word	0x43210000
 8002858:	4b840000 	.word	0x4b840000
 800285c:	4fb80000 	.word	0x4fb80000
 8002860:	47520000 	.word	0x47520000
 8002864:	36902000 	.word	0x36902000
 8002868:	25b00200 	.word	0x25b00200
 800286c:	21800100 	.word	0x21800100
 8002870:	1d500080 	.word	0x1d500080
 8002874:	19200040 	.word	0x19200040
 8002878:	40022100 	.word	0x40022100
 800287c:	40022300 	.word	0x40022300
 8002880:	58026300 	.word	0x58026300
 8002884:	58026000 	.word	0x58026000
 8002888:	cb840000 	.word	0xcb840000
 800288c:	24000000 	.word	0x24000000
 8002890:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a31      	ldr	r2, [pc, #196]	@ (8002960 <HAL_ADC_ConfigChannel+0x5c4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d11e      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x540>
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d119      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a2d      	ldr	r2, [pc, #180]	@ (8002964 <HAL_ADC_ConfigChannel+0x5c8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d14b      	bne.n	800294a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a2c      	ldr	r2, [pc, #176]	@ (8002968 <HAL_ADC_ConfigChannel+0x5cc>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d004      	beq.n	80028c6 <HAL_ADC_ConfigChannel+0x52a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a2a      	ldr	r2, [pc, #168]	@ (800296c <HAL_ADC_ConfigChannel+0x5d0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x52e>
 80028c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002970 <HAL_ADC_ConfigChannel+0x5d4>)
 80028c8:	e000      	b.n	80028cc <HAL_ADC_ConfigChannel+0x530>
 80028ca:	4a2a      	ldr	r2, [pc, #168]	@ (8002974 <HAL_ADC_ConfigChannel+0x5d8>)
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028d2:	4619      	mov	r1, r3
 80028d4:	4610      	mov	r0, r2
 80028d6:	f7ff fa14 	bl	8001d02 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028da:	e036      	b.n	800294a <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a25      	ldr	r2, [pc, #148]	@ (8002978 <HAL_ADC_ConfigChannel+0x5dc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d131      	bne.n	800294a <HAL_ADC_ConfigChannel+0x5ae>
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d12c      	bne.n	800294a <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002964 <HAL_ADC_ConfigChannel+0x5c8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d127      	bne.n	800294a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002968 <HAL_ADC_ConfigChannel+0x5cc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d004      	beq.n	800290e <HAL_ADC_ConfigChannel+0x572>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a18      	ldr	r2, [pc, #96]	@ (800296c <HAL_ADC_ConfigChannel+0x5d0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d101      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x576>
 800290e:	4a18      	ldr	r2, [pc, #96]	@ (8002970 <HAL_ADC_ConfigChannel+0x5d4>)
 8002910:	e000      	b.n	8002914 <HAL_ADC_ConfigChannel+0x578>
 8002912:	4a18      	ldr	r2, [pc, #96]	@ (8002974 <HAL_ADC_ConfigChannel+0x5d8>)
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800291a:	4619      	mov	r1, r3
 800291c:	4610      	mov	r0, r2
 800291e:	f7ff f9f0 	bl	8001d02 <LL_ADC_SetCommonPathInternalCh>
 8002922:	e012      	b.n	800294a <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002928:	f043 0220 	orr.w	r2, r3, #32
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002936:	e008      	b.n	800294a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293c:	f043 0220 	orr.w	r2, r3, #32
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002952:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002956:	4618      	mov	r0, r3
 8002958:	3734      	adds	r7, #52	@ 0x34
 800295a:	46bd      	mov	sp, r7
 800295c:	bd90      	pop	{r4, r7, pc}
 800295e:	bf00      	nop
 8002960:	c7520000 	.word	0xc7520000
 8002964:	58026000 	.word	0x58026000
 8002968:	40022000 	.word	0x40022000
 800296c:	40022100 	.word	0x40022100
 8002970:	40022300 	.word	0x40022300
 8002974:	58026300 	.word	0x58026300
 8002978:	cfb80000 	.word	0xcfb80000

0800297c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a7a      	ldr	r2, [pc, #488]	@ (8002b74 <ADC_ConfigureBoostMode+0x1f8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d004      	beq.n	8002998 <ADC_ConfigureBoostMode+0x1c>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a79      	ldr	r2, [pc, #484]	@ (8002b78 <ADC_ConfigureBoostMode+0x1fc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d109      	bne.n	80029ac <ADC_ConfigureBoostMode+0x30>
 8002998:	4b78      	ldr	r3, [pc, #480]	@ (8002b7c <ADC_ConfigureBoostMode+0x200>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf14      	ite	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2300      	moveq	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	e008      	b.n	80029be <ADC_ConfigureBoostMode+0x42>
 80029ac:	4b74      	ldr	r3, [pc, #464]	@ (8002b80 <ADC_ConfigureBoostMode+0x204>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	bf14      	ite	ne
 80029b8:	2301      	movne	r3, #1
 80029ba:	2300      	moveq	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d01c      	beq.n	80029fc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80029c2:	f002 fcb3 	bl	800532c <HAL_RCC_GetHCLKFreq>
 80029c6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80029d0:	d010      	beq.n	80029f4 <ADC_ConfigureBoostMode+0x78>
 80029d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80029d6:	d873      	bhi.n	8002ac0 <ADC_ConfigureBoostMode+0x144>
 80029d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029dc:	d002      	beq.n	80029e4 <ADC_ConfigureBoostMode+0x68>
 80029de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029e2:	d16d      	bne.n	8002ac0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	0c1b      	lsrs	r3, r3, #16
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f0:	60fb      	str	r3, [r7, #12]
        break;
 80029f2:	e068      	b.n	8002ac6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	089b      	lsrs	r3, r3, #2
 80029f8:	60fb      	str	r3, [r7, #12]
        break;
 80029fa:	e064      	b.n	8002ac6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80029fc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002a00:	f04f 0100 	mov.w	r1, #0
 8002a04:	f003 fef8 	bl	80067f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a08:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002a12:	d051      	beq.n	8002ab8 <ADC_ConfigureBoostMode+0x13c>
 8002a14:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002a18:	d854      	bhi.n	8002ac4 <ADC_ConfigureBoostMode+0x148>
 8002a1a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002a1e:	d047      	beq.n	8002ab0 <ADC_ConfigureBoostMode+0x134>
 8002a20:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002a24:	d84e      	bhi.n	8002ac4 <ADC_ConfigureBoostMode+0x148>
 8002a26:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002a2a:	d03d      	beq.n	8002aa8 <ADC_ConfigureBoostMode+0x12c>
 8002a2c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002a30:	d848      	bhi.n	8002ac4 <ADC_ConfigureBoostMode+0x148>
 8002a32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a36:	d033      	beq.n	8002aa0 <ADC_ConfigureBoostMode+0x124>
 8002a38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a3c:	d842      	bhi.n	8002ac4 <ADC_ConfigureBoostMode+0x148>
 8002a3e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002a42:	d029      	beq.n	8002a98 <ADC_ConfigureBoostMode+0x11c>
 8002a44:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002a48:	d83c      	bhi.n	8002ac4 <ADC_ConfigureBoostMode+0x148>
 8002a4a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002a4e:	d01a      	beq.n	8002a86 <ADC_ConfigureBoostMode+0x10a>
 8002a50:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002a54:	d836      	bhi.n	8002ac4 <ADC_ConfigureBoostMode+0x148>
 8002a56:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a5a:	d014      	beq.n	8002a86 <ADC_ConfigureBoostMode+0x10a>
 8002a5c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a60:	d830      	bhi.n	8002ac4 <ADC_ConfigureBoostMode+0x148>
 8002a62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a66:	d00e      	beq.n	8002a86 <ADC_ConfigureBoostMode+0x10a>
 8002a68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a6c:	d82a      	bhi.n	8002ac4 <ADC_ConfigureBoostMode+0x148>
 8002a6e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a72:	d008      	beq.n	8002a86 <ADC_ConfigureBoostMode+0x10a>
 8002a74:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a78:	d824      	bhi.n	8002ac4 <ADC_ConfigureBoostMode+0x148>
 8002a7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a7e:	d002      	beq.n	8002a86 <ADC_ConfigureBoostMode+0x10a>
 8002a80:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a84:	d11e      	bne.n	8002ac4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	0c9b      	lsrs	r3, r3, #18
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a94:	60fb      	str	r3, [r7, #12]
        break;
 8002a96:	e016      	b.n	8002ac6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	60fb      	str	r3, [r7, #12]
        break;
 8002a9e:	e012      	b.n	8002ac6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	60fb      	str	r3, [r7, #12]
        break;
 8002aa6:	e00e      	b.n	8002ac6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	099b      	lsrs	r3, r3, #6
 8002aac:	60fb      	str	r3, [r7, #12]
        break;
 8002aae:	e00a      	b.n	8002ac6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	09db      	lsrs	r3, r3, #7
 8002ab4:	60fb      	str	r3, [r7, #12]
        break;
 8002ab6:	e006      	b.n	8002ac6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	0a1b      	lsrs	r3, r3, #8
 8002abc:	60fb      	str	r3, [r7, #12]
        break;
 8002abe:	e002      	b.n	8002ac6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002ac0:	bf00      	nop
 8002ac2:	e000      	b.n	8002ac6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002ac4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002ac6:	f7ff f89b 	bl	8001c00 <HAL_GetREVID>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d815      	bhi.n	8002b00 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4a2b      	ldr	r2, [pc, #172]	@ (8002b84 <ADC_ConfigureBoostMode+0x208>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d908      	bls.n	8002aee <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aea:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002aec:	e03e      	b.n	8002b6c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002afc:	609a      	str	r2, [r3, #8]
}
 8002afe:	e035      	b.n	8002b6c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	085b      	lsrs	r3, r3, #1
 8002b04:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4a1f      	ldr	r2, [pc, #124]	@ (8002b88 <ADC_ConfigureBoostMode+0x20c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d808      	bhi.n	8002b20 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002b1c:	609a      	str	r2, [r3, #8]
}
 8002b1e:	e025      	b.n	8002b6c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4a1a      	ldr	r2, [pc, #104]	@ (8002b8c <ADC_ConfigureBoostMode+0x210>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d80a      	bhi.n	8002b3e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b3a:	609a      	str	r2, [r3, #8]
}
 8002b3c:	e016      	b.n	8002b6c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4a13      	ldr	r2, [pc, #76]	@ (8002b90 <ADC_ConfigureBoostMode+0x214>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d80a      	bhi.n	8002b5c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b58:	609a      	str	r2, [r3, #8]
}
 8002b5a:	e007      	b.n	8002b6c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002b6a:	609a      	str	r2, [r3, #8]
}
 8002b6c:	bf00      	nop
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40022000 	.word	0x40022000
 8002b78:	40022100 	.word	0x40022100
 8002b7c:	40022300 	.word	0x40022300
 8002b80:	58026300 	.word	0x58026300
 8002b84:	01312d00 	.word	0x01312d00
 8002b88:	005f5e10 	.word	0x005f5e10
 8002b8c:	00bebc20 	.word	0x00bebc20
 8002b90:	017d7840 	.word	0x017d7840

08002b94 <LL_ADC_IsEnabled>:
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <LL_ADC_IsEnabled+0x18>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <LL_ADC_IsEnabled+0x1a>
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <LL_ADC_REG_IsConversionOngoing>:
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d101      	bne.n	8002bd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b09f      	sub	sp, #124	@ 0x7c
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e0be      	b.n	8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a5c      	ldr	r2, [pc, #368]	@ (8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d102      	bne.n	8002c1e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c18:	4b5b      	ldr	r3, [pc, #364]	@ (8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	e001      	b.n	8002c22 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10b      	bne.n	8002c40 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2c:	f043 0220 	orr.w	r2, r3, #32
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e09d      	b.n	8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff ffb9 	bl	8002bba <LL_ADC_REG_IsConversionOngoing>
 8002c48:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff ffb3 	bl	8002bba <LL_ADC_REG_IsConversionOngoing>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d17f      	bne.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d17c      	bne.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a47      	ldr	r2, [pc, #284]	@ (8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d004      	beq.n	8002c74 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a46      	ldr	r2, [pc, #280]	@ (8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d101      	bne.n	8002c78 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002c74:	4b45      	ldr	r3, [pc, #276]	@ (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c76:	e000      	b.n	8002c7a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002c78:	4b45      	ldr	r3, [pc, #276]	@ (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c7a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d039      	beq.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002c84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c94:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a3a      	ldr	r2, [pc, #232]	@ (8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d004      	beq.n	8002caa <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a38      	ldr	r2, [pc, #224]	@ (8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d10e      	bne.n	8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002caa:	4836      	ldr	r0, [pc, #216]	@ (8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002cac:	f7ff ff72 	bl	8002b94 <LL_ADC_IsEnabled>
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	4835      	ldr	r0, [pc, #212]	@ (8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002cb4:	f7ff ff6e 	bl	8002b94 <LL_ADC_IsEnabled>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4323      	orrs	r3, r4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bf0c      	ite	eq
 8002cc0:	2301      	moveq	r3, #1
 8002cc2:	2300      	movne	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	e008      	b.n	8002cda <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002cc8:	4832      	ldr	r0, [pc, #200]	@ (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002cca:	f7ff ff63 	bl	8002b94 <LL_ADC_IsEnabled>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d047      	beq.n	8002d6e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002cde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	6811      	ldr	r1, [r2, #0]
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	6892      	ldr	r2, [r2, #8]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cf4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cf6:	e03a      	b.n	8002d6e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002cf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d02:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a1e      	ldr	r2, [pc, #120]	@ (8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d004      	beq.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a1d      	ldr	r2, [pc, #116]	@ (8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d10e      	bne.n	8002d36 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002d18:	481a      	ldr	r0, [pc, #104]	@ (8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d1a:	f7ff ff3b 	bl	8002b94 <LL_ADC_IsEnabled>
 8002d1e:	4604      	mov	r4, r0
 8002d20:	4819      	ldr	r0, [pc, #100]	@ (8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d22:	f7ff ff37 	bl	8002b94 <LL_ADC_IsEnabled>
 8002d26:	4603      	mov	r3, r0
 8002d28:	4323      	orrs	r3, r4
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	bf0c      	ite	eq
 8002d2e:	2301      	moveq	r3, #1
 8002d30:	2300      	movne	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	e008      	b.n	8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002d36:	4817      	ldr	r0, [pc, #92]	@ (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002d38:	f7ff ff2c 	bl	8002b94 <LL_ADC_IsEnabled>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	bf0c      	ite	eq
 8002d42:	2301      	moveq	r3, #1
 8002d44:	2300      	movne	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d010      	beq.n	8002d6e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	4b11      	ldr	r3, [pc, #68]	@ (8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d56:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d58:	e009      	b.n	8002d6e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5e:	f043 0220 	orr.w	r2, r3, #32
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002d6c:	e000      	b.n	8002d70 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d6e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d78:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	377c      	adds	r7, #124	@ 0x7c
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd90      	pop	{r4, r7, pc}
 8002d84:	40022000 	.word	0x40022000
 8002d88:	40022100 	.word	0x40022100
 8002d8c:	40022300 	.word	0x40022300
 8002d90:	58026300 	.word	0x58026300
 8002d94:	58026000 	.word	0x58026000
 8002d98:	fffff0e0 	.word	0xfffff0e0

08002d9c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d102      	bne.n	8002db8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	77fb      	strb	r3, [r7, #31]
 8002db6:	e10e      	b.n	8002fd6 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dc6:	d102      	bne.n	8002dce <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	77fb      	strb	r3, [r7, #31]
 8002dcc:	e103      	b.n	8002fd6 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7fe fbdf 	bl	80015ac <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8002e02:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8002e08:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 8002e0e:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8002e14:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b6e      	ldr	r3, [pc, #440]	@ (8002fe0 <HAL_COMP_Init+0x244>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	6979      	ldr	r1, [r7, #20]
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b10      	cmp	r3, #16
 8002e38:	d108      	bne.n	8002e4c <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0210 	orr.w	r2, r2, #16
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	e007      	b.n	8002e5c <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0210 	bic.w	r2, r2, #16
 8002e5a:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d016      	beq.n	8002e98 <HAL_COMP_Init+0xfc>
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d013      	beq.n	8002e98 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e70:	4b5c      	ldr	r3, [pc, #368]	@ (8002fe4 <HAL_COMP_Init+0x248>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	099b      	lsrs	r3, r3, #6
 8002e76:	4a5c      	ldr	r2, [pc, #368]	@ (8002fe8 <HAL_COMP_Init+0x24c>)
 8002e78:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7c:	099b      	lsrs	r3, r3, #6
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 8002e8a:	e002      	b.n	8002e92 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f9      	bne.n	8002e8c <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a53      	ldr	r2, [pc, #332]	@ (8002fec <HAL_COMP_Init+0x250>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d102      	bne.n	8002ea8 <HAL_COMP_Init+0x10c>
 8002ea2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002ea6:	e001      	b.n	8002eac <HAL_COMP_Init+0x110>
 8002ea8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002eac:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d06d      	beq.n	8002f96 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	f003 0310 	and.w	r3, r3, #16
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 8002ec6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]
 8002ed6:	e008      	b.n	8002eea <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8002ed8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d008      	beq.n	8002f08 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8002ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
 8002f06:	e008      	b.n	8002f1a <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8002f08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f16:	4013      	ands	r3, r2
 8002f18:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 8002f1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8002f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f34:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002f38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8002f44:	e00a      	b.n	8002f5c <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8002f46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f4a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f56:	4013      	ands	r3, r2
 8002f58:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8002f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f6c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002f70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8002f7c:	e021      	b.n	8002fc2 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 8002f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f82:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f8e:	4013      	ands	r3, r2
 8002f90:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8002f94:	e015      	b.n	8002fc2 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8002f96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f9a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8002fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fb0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d103      	bne.n	8002fd6 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 8002fd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3720      	adds	r7, #32
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	f0e8cce1 	.word	0xf0e8cce1
 8002fe4:	24000000 	.word	0x24000000
 8002fe8:	053e2d63 	.word	0x053e2d63
 8002fec:	5800380c 	.word	0x5800380c

08002ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003000:	4b0b      	ldr	r3, [pc, #44]	@ (8003030 <__NVIC_SetPriorityGrouping+0x40>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800300c:	4013      	ands	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003018:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 800301a:	4313      	orrs	r3, r2
 800301c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800301e:	4a04      	ldr	r2, [pc, #16]	@ (8003030 <__NVIC_SetPriorityGrouping+0x40>)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	60d3      	str	r3, [r2, #12]
}
 8003024:	bf00      	nop
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	e000ed00 	.word	0xe000ed00
 8003034:	05fa0000 	.word	0x05fa0000

08003038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800303c:	4b04      	ldr	r3, [pc, #16]	@ (8003050 <__NVIC_GetPriorityGrouping+0x18>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	f003 0307 	and.w	r3, r3, #7
}
 8003046:	4618      	mov	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800305e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003062:	2b00      	cmp	r3, #0
 8003064:	db0b      	blt.n	800307e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	f003 021f 	and.w	r2, r3, #31
 800306c:	4907      	ldr	r1, [pc, #28]	@ (800308c <__NVIC_EnableIRQ+0x38>)
 800306e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2001      	movs	r0, #1
 8003076:	fa00 f202 	lsl.w	r2, r0, r2
 800307a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000e100 	.word	0xe000e100

08003090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800309c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	db0a      	blt.n	80030ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	490c      	ldr	r1, [pc, #48]	@ (80030dc <__NVIC_SetPriority+0x4c>)
 80030aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030ae:	0112      	lsls	r2, r2, #4
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	440b      	add	r3, r1
 80030b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b8:	e00a      	b.n	80030d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4908      	ldr	r1, [pc, #32]	@ (80030e0 <__NVIC_SetPriority+0x50>)
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	3b04      	subs	r3, #4
 80030c8:	0112      	lsls	r2, r2, #4
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	440b      	add	r3, r1
 80030ce:	761a      	strb	r2, [r3, #24]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000e100 	.word	0xe000e100
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	@ 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f1c3 0307 	rsb	r3, r3, #7
 80030fe:	2b04      	cmp	r3, #4
 8003100:	bf28      	it	cs
 8003102:	2304      	movcs	r3, #4
 8003104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3304      	adds	r3, #4
 800310a:	2b06      	cmp	r3, #6
 800310c:	d902      	bls.n	8003114 <NVIC_EncodePriority+0x30>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3b03      	subs	r3, #3
 8003112:	e000      	b.n	8003116 <NVIC_EncodePriority+0x32>
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	401a      	ands	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	43d9      	mvns	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	4313      	orrs	r3, r2
         );
}
 800313e:	4618      	mov	r0, r3
 8003140:	3724      	adds	r7, #36	@ 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800315c:	d301      	bcc.n	8003162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315e:	2301      	movs	r3, #1
 8003160:	e00f      	b.n	8003182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003162:	4a0a      	ldr	r2, [pc, #40]	@ (800318c <SysTick_Config+0x40>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316a:	210f      	movs	r1, #15
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	f7ff ff8e 	bl	8003090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003174:	4b05      	ldr	r3, [pc, #20]	@ (800318c <SysTick_Config+0x40>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317a:	4b04      	ldr	r3, [pc, #16]	@ (800318c <SysTick_Config+0x40>)
 800317c:	2207      	movs	r2, #7
 800317e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	e000e010 	.word	0xe000e010

08003190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff29 	bl	8002ff0 <__NVIC_SetPriorityGrouping>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031b4:	f7ff ff40 	bl	8003038 <__NVIC_GetPriorityGrouping>
 80031b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	6978      	ldr	r0, [r7, #20]
 80031c0:	f7ff ff90 	bl	80030e4 <NVIC_EncodePriority>
 80031c4:	4602      	mov	r2, r0
 80031c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ff5f 	bl	8003090 <__NVIC_SetPriority>
}
 80031d2:	bf00      	nop
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	4603      	mov	r3, r0
 80031e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff ff33 	bl	8003054 <__NVIC_EnableIRQ>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff ffa4 	bl	800314c <SysTick_Config>
 8003204:	4603      	mov	r3, r0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e014      	b.n	800324a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	791b      	ldrb	r3, [r3, #4]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d105      	bne.n	8003236 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7fe fa49 	bl	80016c8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2202      	movs	r2, #2
 800323a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	@ 0x28
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <HAL_DAC_ConfigChannel+0x1e>
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e12d      	b.n	80034d2 <HAL_DAC_ConfigChannel+0x27e>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b04      	cmp	r3, #4
    }
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	795b      	ldrb	r3, [r3, #5]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_DAC_ConfigChannel+0x34>
 8003284:	2302      	movs	r3, #2
 8003286:	e124      	b.n	80034d2 <HAL_DAC_ConfigChannel+0x27e>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2202      	movs	r2, #2
 8003292:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b04      	cmp	r3, #4
 800329a:	d17a      	bne.n	8003392 <HAL_DAC_ConfigChannel+0x13e>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800329c:	f7fe fca4 	bl	8001be8 <HAL_GetTick>
 80032a0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d13d      	bne.n	8003324 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032a8:	e018      	b.n	80032dc <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80032aa:	f7fe fc9d 	bl	8001be8 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d911      	bls.n	80032dc <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032be:	4b87      	ldr	r3, [pc, #540]	@ (80034dc <HAL_DAC_ConfigChannel+0x288>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f043 0208 	orr.w	r2, r3, #8
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2203      	movs	r2, #3
 80032d6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e0fa      	b.n	80034d2 <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032e2:	4b7e      	ldr	r3, [pc, #504]	@ (80034dc <HAL_DAC_ConfigChannel+0x288>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1df      	bne.n	80032aa <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	6992      	ldr	r2, [r2, #24]
 80032f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80032f4:	e020      	b.n	8003338 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80032f6:	f7fe fc77 	bl	8001be8 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d90f      	bls.n	8003324 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330a:	2b00      	cmp	r3, #0
 800330c:	da0a      	bge.n	8003324 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f043 0208 	orr.w	r2, r3, #8
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2203      	movs	r2, #3
 800331e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e0d6      	b.n	80034d2 <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800332a:	2b00      	cmp	r3, #0
 800332c:	dbe3      	blt.n	80032f6 <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	6992      	ldr	r2, [r2, #24]
 8003336:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003348:	fa01 f303 	lsl.w	r3, r1, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	ea02 0103 	and.w	r1, r2, r3
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	69da      	ldr	r2, [r3, #28]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	409a      	lsls	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	21ff      	movs	r1, #255	@ 0xff
 8003374:	fa01 f303 	lsl.w	r3, r1, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	ea02 0103 	and.w	r1, r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	6a1a      	ldr	r2, [r3, #32]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	409a      	lsls	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d11d      	bne.n	80033d6 <HAL_DAC_ConfigChannel+0x182>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a0:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	221f      	movs	r2, #31
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033dc:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2207      	movs	r2, #7
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d102      	bne.n	8003400 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = 0x00000000UL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80033fe:	e00f      	b.n	8003420 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d102      	bne.n	800340e <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003408:	2301      	movs	r3, #1
 800340a:	627b      	str	r3, [r7, #36]	@ 0x24
 800340c:	e008      	b.n	8003420 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d102      	bne.n	800341c <HAL_DAC_ConfigChannel+0x1c8>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003416:	2301      	movs	r3, #1
 8003418:	627b      	str	r3, [r7, #36]	@ 0x24
 800341a:	e001      	b.n	8003420 <HAL_DAC_ConfigChannel+0x1cc>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800341c:	2300      	movs	r3, #0
 800341e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4313      	orrs	r3, r2
 800342a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800342c:	4313      	orrs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6819      	ldr	r1, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43da      	mvns	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	400a      	ands	r2, r1
 8003466:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f003 0310 	and.w	r3, r3, #16
 8003476:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f003 0310 	and.w	r3, r3, #16
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6819      	ldr	r1, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f003 0310 	and.w	r3, r3, #16
 80034b2:	22c0      	movs	r2, #192	@ 0xc0
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	43da      	mvns	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	400a      	ands	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80034ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3728      	adds	r7, #40	@ 0x28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20008000 	.word	0x20008000

080034e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80034e8:	f7fe fb7e 	bl	8001be8 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e316      	b.n	8003b26 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a66      	ldr	r2, [pc, #408]	@ (8003698 <HAL_DMA_Init+0x1b8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d04a      	beq.n	8003598 <HAL_DMA_Init+0xb8>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a65      	ldr	r2, [pc, #404]	@ (800369c <HAL_DMA_Init+0x1bc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d045      	beq.n	8003598 <HAL_DMA_Init+0xb8>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a63      	ldr	r2, [pc, #396]	@ (80036a0 <HAL_DMA_Init+0x1c0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d040      	beq.n	8003598 <HAL_DMA_Init+0xb8>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a62      	ldr	r2, [pc, #392]	@ (80036a4 <HAL_DMA_Init+0x1c4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d03b      	beq.n	8003598 <HAL_DMA_Init+0xb8>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a60      	ldr	r2, [pc, #384]	@ (80036a8 <HAL_DMA_Init+0x1c8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d036      	beq.n	8003598 <HAL_DMA_Init+0xb8>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a5f      	ldr	r2, [pc, #380]	@ (80036ac <HAL_DMA_Init+0x1cc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d031      	beq.n	8003598 <HAL_DMA_Init+0xb8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a5d      	ldr	r2, [pc, #372]	@ (80036b0 <HAL_DMA_Init+0x1d0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d02c      	beq.n	8003598 <HAL_DMA_Init+0xb8>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a5c      	ldr	r2, [pc, #368]	@ (80036b4 <HAL_DMA_Init+0x1d4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d027      	beq.n	8003598 <HAL_DMA_Init+0xb8>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a5a      	ldr	r2, [pc, #360]	@ (80036b8 <HAL_DMA_Init+0x1d8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d022      	beq.n	8003598 <HAL_DMA_Init+0xb8>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a59      	ldr	r2, [pc, #356]	@ (80036bc <HAL_DMA_Init+0x1dc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d01d      	beq.n	8003598 <HAL_DMA_Init+0xb8>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a57      	ldr	r2, [pc, #348]	@ (80036c0 <HAL_DMA_Init+0x1e0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d018      	beq.n	8003598 <HAL_DMA_Init+0xb8>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a56      	ldr	r2, [pc, #344]	@ (80036c4 <HAL_DMA_Init+0x1e4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d013      	beq.n	8003598 <HAL_DMA_Init+0xb8>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a54      	ldr	r2, [pc, #336]	@ (80036c8 <HAL_DMA_Init+0x1e8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00e      	beq.n	8003598 <HAL_DMA_Init+0xb8>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a53      	ldr	r2, [pc, #332]	@ (80036cc <HAL_DMA_Init+0x1ec>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d009      	beq.n	8003598 <HAL_DMA_Init+0xb8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a51      	ldr	r2, [pc, #324]	@ (80036d0 <HAL_DMA_Init+0x1f0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d004      	beq.n	8003598 <HAL_DMA_Init+0xb8>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a50      	ldr	r2, [pc, #320]	@ (80036d4 <HAL_DMA_Init+0x1f4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d101      	bne.n	800359c <HAL_DMA_Init+0xbc>
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <HAL_DMA_Init+0xbe>
 800359c:	2300      	movs	r3, #0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 813b 	beq.w	800381a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a37      	ldr	r2, [pc, #220]	@ (8003698 <HAL_DMA_Init+0x1b8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d04a      	beq.n	8003654 <HAL_DMA_Init+0x174>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a36      	ldr	r2, [pc, #216]	@ (800369c <HAL_DMA_Init+0x1bc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d045      	beq.n	8003654 <HAL_DMA_Init+0x174>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a34      	ldr	r2, [pc, #208]	@ (80036a0 <HAL_DMA_Init+0x1c0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d040      	beq.n	8003654 <HAL_DMA_Init+0x174>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a33      	ldr	r2, [pc, #204]	@ (80036a4 <HAL_DMA_Init+0x1c4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d03b      	beq.n	8003654 <HAL_DMA_Init+0x174>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a31      	ldr	r2, [pc, #196]	@ (80036a8 <HAL_DMA_Init+0x1c8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d036      	beq.n	8003654 <HAL_DMA_Init+0x174>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a30      	ldr	r2, [pc, #192]	@ (80036ac <HAL_DMA_Init+0x1cc>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d031      	beq.n	8003654 <HAL_DMA_Init+0x174>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a2e      	ldr	r2, [pc, #184]	@ (80036b0 <HAL_DMA_Init+0x1d0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d02c      	beq.n	8003654 <HAL_DMA_Init+0x174>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a2d      	ldr	r2, [pc, #180]	@ (80036b4 <HAL_DMA_Init+0x1d4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d027      	beq.n	8003654 <HAL_DMA_Init+0x174>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a2b      	ldr	r2, [pc, #172]	@ (80036b8 <HAL_DMA_Init+0x1d8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d022      	beq.n	8003654 <HAL_DMA_Init+0x174>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a2a      	ldr	r2, [pc, #168]	@ (80036bc <HAL_DMA_Init+0x1dc>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d01d      	beq.n	8003654 <HAL_DMA_Init+0x174>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a28      	ldr	r2, [pc, #160]	@ (80036c0 <HAL_DMA_Init+0x1e0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d018      	beq.n	8003654 <HAL_DMA_Init+0x174>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a27      	ldr	r2, [pc, #156]	@ (80036c4 <HAL_DMA_Init+0x1e4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d013      	beq.n	8003654 <HAL_DMA_Init+0x174>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a25      	ldr	r2, [pc, #148]	@ (80036c8 <HAL_DMA_Init+0x1e8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00e      	beq.n	8003654 <HAL_DMA_Init+0x174>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a24      	ldr	r2, [pc, #144]	@ (80036cc <HAL_DMA_Init+0x1ec>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d009      	beq.n	8003654 <HAL_DMA_Init+0x174>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a22      	ldr	r2, [pc, #136]	@ (80036d0 <HAL_DMA_Init+0x1f0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d004      	beq.n	8003654 <HAL_DMA_Init+0x174>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a21      	ldr	r2, [pc, #132]	@ (80036d4 <HAL_DMA_Init+0x1f4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d108      	bne.n	8003666 <HAL_DMA_Init+0x186>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0201 	bic.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	e007      	b.n	8003676 <HAL_DMA_Init+0x196>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0201 	bic.w	r2, r2, #1
 8003674:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003676:	e02f      	b.n	80036d8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003678:	f7fe fab6 	bl	8001be8 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b05      	cmp	r3, #5
 8003684:	d928      	bls.n	80036d8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2220      	movs	r2, #32
 800368a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2203      	movs	r2, #3
 8003690:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e246      	b.n	8003b26 <HAL_DMA_Init+0x646>
 8003698:	40020010 	.word	0x40020010
 800369c:	40020028 	.word	0x40020028
 80036a0:	40020040 	.word	0x40020040
 80036a4:	40020058 	.word	0x40020058
 80036a8:	40020070 	.word	0x40020070
 80036ac:	40020088 	.word	0x40020088
 80036b0:	400200a0 	.word	0x400200a0
 80036b4:	400200b8 	.word	0x400200b8
 80036b8:	40020410 	.word	0x40020410
 80036bc:	40020428 	.word	0x40020428
 80036c0:	40020440 	.word	0x40020440
 80036c4:	40020458 	.word	0x40020458
 80036c8:	40020470 	.word	0x40020470
 80036cc:	40020488 	.word	0x40020488
 80036d0:	400204a0 	.word	0x400204a0
 80036d4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1c8      	bne.n	8003678 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4b83      	ldr	r3, [pc, #524]	@ (8003900 <HAL_DMA_Init+0x420>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80036fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003716:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4313      	orrs	r3, r2
 8003722:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003728:	2b04      	cmp	r3, #4
 800372a:	d107      	bne.n	800373c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003734:	4313      	orrs	r3, r2
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800373c:	4b71      	ldr	r3, [pc, #452]	@ (8003904 <HAL_DMA_Init+0x424>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4b71      	ldr	r3, [pc, #452]	@ (8003908 <HAL_DMA_Init+0x428>)
 8003742:	4013      	ands	r3, r2
 8003744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003748:	d328      	bcc.n	800379c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b28      	cmp	r3, #40	@ 0x28
 8003750:	d903      	bls.n	800375a <HAL_DMA_Init+0x27a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b2e      	cmp	r3, #46	@ 0x2e
 8003758:	d917      	bls.n	800378a <HAL_DMA_Init+0x2aa>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003760:	d903      	bls.n	800376a <HAL_DMA_Init+0x28a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b42      	cmp	r3, #66	@ 0x42
 8003768:	d90f      	bls.n	800378a <HAL_DMA_Init+0x2aa>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b46      	cmp	r3, #70	@ 0x46
 8003770:	d903      	bls.n	800377a <HAL_DMA_Init+0x29a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b48      	cmp	r3, #72	@ 0x48
 8003778:	d907      	bls.n	800378a <HAL_DMA_Init+0x2aa>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003780:	d905      	bls.n	800378e <HAL_DMA_Init+0x2ae>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b52      	cmp	r3, #82	@ 0x52
 8003788:	d801      	bhi.n	800378e <HAL_DMA_Init+0x2ae>
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <HAL_DMA_Init+0x2b0>
 800378e:	2300      	movs	r3, #0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800379a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f023 0307 	bic.w	r3, r3, #7
 80037b2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d117      	bne.n	80037f6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00e      	beq.n	80037f6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fa8f 	bl	8003cfc <DMA_CheckFifoParam>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2240      	movs	r2, #64	@ 0x40
 80037e8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e197      	b.n	8003b26 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f9ca 	bl	8003b98 <DMA_CalcBaseAndBitshift>
 8003804:	4603      	mov	r3, r0
 8003806:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	223f      	movs	r2, #63	@ 0x3f
 8003812:	409a      	lsls	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	e0cd      	b.n	80039b6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a3b      	ldr	r2, [pc, #236]	@ (800390c <HAL_DMA_Init+0x42c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d022      	beq.n	800386a <HAL_DMA_Init+0x38a>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a39      	ldr	r2, [pc, #228]	@ (8003910 <HAL_DMA_Init+0x430>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01d      	beq.n	800386a <HAL_DMA_Init+0x38a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a38      	ldr	r2, [pc, #224]	@ (8003914 <HAL_DMA_Init+0x434>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d018      	beq.n	800386a <HAL_DMA_Init+0x38a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a36      	ldr	r2, [pc, #216]	@ (8003918 <HAL_DMA_Init+0x438>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d013      	beq.n	800386a <HAL_DMA_Init+0x38a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a35      	ldr	r2, [pc, #212]	@ (800391c <HAL_DMA_Init+0x43c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00e      	beq.n	800386a <HAL_DMA_Init+0x38a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a33      	ldr	r2, [pc, #204]	@ (8003920 <HAL_DMA_Init+0x440>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d009      	beq.n	800386a <HAL_DMA_Init+0x38a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a32      	ldr	r2, [pc, #200]	@ (8003924 <HAL_DMA_Init+0x444>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d004      	beq.n	800386a <HAL_DMA_Init+0x38a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a30      	ldr	r2, [pc, #192]	@ (8003928 <HAL_DMA_Init+0x448>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d101      	bne.n	800386e <HAL_DMA_Init+0x38e>
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <HAL_DMA_Init+0x390>
 800386e:	2300      	movs	r3, #0
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 8097 	beq.w	80039a4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a24      	ldr	r2, [pc, #144]	@ (800390c <HAL_DMA_Init+0x42c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d021      	beq.n	80038c4 <HAL_DMA_Init+0x3e4>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a22      	ldr	r2, [pc, #136]	@ (8003910 <HAL_DMA_Init+0x430>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d01c      	beq.n	80038c4 <HAL_DMA_Init+0x3e4>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a21      	ldr	r2, [pc, #132]	@ (8003914 <HAL_DMA_Init+0x434>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d017      	beq.n	80038c4 <HAL_DMA_Init+0x3e4>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a1f      	ldr	r2, [pc, #124]	@ (8003918 <HAL_DMA_Init+0x438>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d012      	beq.n	80038c4 <HAL_DMA_Init+0x3e4>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1e      	ldr	r2, [pc, #120]	@ (800391c <HAL_DMA_Init+0x43c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00d      	beq.n	80038c4 <HAL_DMA_Init+0x3e4>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003920 <HAL_DMA_Init+0x440>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d008      	beq.n	80038c4 <HAL_DMA_Init+0x3e4>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003924 <HAL_DMA_Init+0x444>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d003      	beq.n	80038c4 <HAL_DMA_Init+0x3e4>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a19      	ldr	r2, [pc, #100]	@ (8003928 <HAL_DMA_Init+0x448>)
 80038c2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4b13      	ldr	r3, [pc, #76]	@ (800392c <HAL_DMA_Init+0x44c>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b40      	cmp	r3, #64	@ 0x40
 80038ea:	d021      	beq.n	8003930 <HAL_DMA_Init+0x450>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2b80      	cmp	r3, #128	@ 0x80
 80038f2:	d102      	bne.n	80038fa <HAL_DMA_Init+0x41a>
 80038f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80038f8:	e01b      	b.n	8003932 <HAL_DMA_Init+0x452>
 80038fa:	2300      	movs	r3, #0
 80038fc:	e019      	b.n	8003932 <HAL_DMA_Init+0x452>
 80038fe:	bf00      	nop
 8003900:	fe10803f 	.word	0xfe10803f
 8003904:	5c001000 	.word	0x5c001000
 8003908:	ffff0000 	.word	0xffff0000
 800390c:	58025408 	.word	0x58025408
 8003910:	5802541c 	.word	0x5802541c
 8003914:	58025430 	.word	0x58025430
 8003918:	58025444 	.word	0x58025444
 800391c:	58025458 	.word	0x58025458
 8003920:	5802546c 	.word	0x5802546c
 8003924:	58025480 	.word	0x58025480
 8003928:	58025494 	.word	0x58025494
 800392c:	fffe000f 	.word	0xfffe000f
 8003930:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68d2      	ldr	r2, [r2, #12]
 8003936:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003938:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003940:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003948:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003950:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003958:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003960:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4313      	orrs	r3, r2
 8003966:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	461a      	mov	r2, r3
 8003976:	4b6e      	ldr	r3, [pc, #440]	@ (8003b30 <HAL_DMA_Init+0x650>)
 8003978:	4413      	add	r3, r2
 800397a:	4a6e      	ldr	r2, [pc, #440]	@ (8003b34 <HAL_DMA_Init+0x654>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	009a      	lsls	r2, r3, #2
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f905 	bl	8003b98 <DMA_CalcBaseAndBitshift>
 800398e:	4603      	mov	r3, r0
 8003990:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	2201      	movs	r2, #1
 800399c:	409a      	lsls	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	e008      	b.n	80039b6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2240      	movs	r2, #64	@ 0x40
 80039a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2203      	movs	r2, #3
 80039ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e0b7      	b.n	8003b26 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a5f      	ldr	r2, [pc, #380]	@ (8003b38 <HAL_DMA_Init+0x658>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d072      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a5d      	ldr	r2, [pc, #372]	@ (8003b3c <HAL_DMA_Init+0x65c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d06d      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a5c      	ldr	r2, [pc, #368]	@ (8003b40 <HAL_DMA_Init+0x660>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d068      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a5a      	ldr	r2, [pc, #360]	@ (8003b44 <HAL_DMA_Init+0x664>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d063      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a59      	ldr	r2, [pc, #356]	@ (8003b48 <HAL_DMA_Init+0x668>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d05e      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a57      	ldr	r2, [pc, #348]	@ (8003b4c <HAL_DMA_Init+0x66c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d059      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a56      	ldr	r2, [pc, #344]	@ (8003b50 <HAL_DMA_Init+0x670>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d054      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a54      	ldr	r2, [pc, #336]	@ (8003b54 <HAL_DMA_Init+0x674>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d04f      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a53      	ldr	r2, [pc, #332]	@ (8003b58 <HAL_DMA_Init+0x678>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d04a      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a51      	ldr	r2, [pc, #324]	@ (8003b5c <HAL_DMA_Init+0x67c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d045      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a50      	ldr	r2, [pc, #320]	@ (8003b60 <HAL_DMA_Init+0x680>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d040      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a4e      	ldr	r2, [pc, #312]	@ (8003b64 <HAL_DMA_Init+0x684>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d03b      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a4d      	ldr	r2, [pc, #308]	@ (8003b68 <HAL_DMA_Init+0x688>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d036      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a4b      	ldr	r2, [pc, #300]	@ (8003b6c <HAL_DMA_Init+0x68c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d031      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a4a      	ldr	r2, [pc, #296]	@ (8003b70 <HAL_DMA_Init+0x690>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d02c      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a48      	ldr	r2, [pc, #288]	@ (8003b74 <HAL_DMA_Init+0x694>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d027      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a47      	ldr	r2, [pc, #284]	@ (8003b78 <HAL_DMA_Init+0x698>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d022      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a45      	ldr	r2, [pc, #276]	@ (8003b7c <HAL_DMA_Init+0x69c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d01d      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a44      	ldr	r2, [pc, #272]	@ (8003b80 <HAL_DMA_Init+0x6a0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d018      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a42      	ldr	r2, [pc, #264]	@ (8003b84 <HAL_DMA_Init+0x6a4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d013      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a41      	ldr	r2, [pc, #260]	@ (8003b88 <HAL_DMA_Init+0x6a8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00e      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a3f      	ldr	r2, [pc, #252]	@ (8003b8c <HAL_DMA_Init+0x6ac>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d009      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a3e      	ldr	r2, [pc, #248]	@ (8003b90 <HAL_DMA_Init+0x6b0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d004      	beq.n	8003aa6 <HAL_DMA_Init+0x5c6>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a3c      	ldr	r2, [pc, #240]	@ (8003b94 <HAL_DMA_Init+0x6b4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d101      	bne.n	8003aaa <HAL_DMA_Init+0x5ca>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <HAL_DMA_Init+0x5cc>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d032      	beq.n	8003b16 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f99f 	bl	8003df4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b80      	cmp	r3, #128	@ 0x80
 8003abc:	d102      	bne.n	8003ac4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ad8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d010      	beq.n	8003b04 <HAL_DMA_Init+0x624>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d80c      	bhi.n	8003b04 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fa1c 	bl	8003f28 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	e008      	b.n	8003b16 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	a7fdabf8 	.word	0xa7fdabf8
 8003b34:	cccccccd 	.word	0xcccccccd
 8003b38:	40020010 	.word	0x40020010
 8003b3c:	40020028 	.word	0x40020028
 8003b40:	40020040 	.word	0x40020040
 8003b44:	40020058 	.word	0x40020058
 8003b48:	40020070 	.word	0x40020070
 8003b4c:	40020088 	.word	0x40020088
 8003b50:	400200a0 	.word	0x400200a0
 8003b54:	400200b8 	.word	0x400200b8
 8003b58:	40020410 	.word	0x40020410
 8003b5c:	40020428 	.word	0x40020428
 8003b60:	40020440 	.word	0x40020440
 8003b64:	40020458 	.word	0x40020458
 8003b68:	40020470 	.word	0x40020470
 8003b6c:	40020488 	.word	0x40020488
 8003b70:	400204a0 	.word	0x400204a0
 8003b74:	400204b8 	.word	0x400204b8
 8003b78:	58025408 	.word	0x58025408
 8003b7c:	5802541c 	.word	0x5802541c
 8003b80:	58025430 	.word	0x58025430
 8003b84:	58025444 	.word	0x58025444
 8003b88:	58025458 	.word	0x58025458
 8003b8c:	5802546c 	.word	0x5802546c
 8003b90:	58025480 	.word	0x58025480
 8003b94:	58025494 	.word	0x58025494

08003b98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a42      	ldr	r2, [pc, #264]	@ (8003cb0 <DMA_CalcBaseAndBitshift+0x118>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d04a      	beq.n	8003c40 <DMA_CalcBaseAndBitshift+0xa8>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a41      	ldr	r2, [pc, #260]	@ (8003cb4 <DMA_CalcBaseAndBitshift+0x11c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d045      	beq.n	8003c40 <DMA_CalcBaseAndBitshift+0xa8>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a3f      	ldr	r2, [pc, #252]	@ (8003cb8 <DMA_CalcBaseAndBitshift+0x120>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d040      	beq.n	8003c40 <DMA_CalcBaseAndBitshift+0xa8>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a3e      	ldr	r2, [pc, #248]	@ (8003cbc <DMA_CalcBaseAndBitshift+0x124>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d03b      	beq.n	8003c40 <DMA_CalcBaseAndBitshift+0xa8>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a3c      	ldr	r2, [pc, #240]	@ (8003cc0 <DMA_CalcBaseAndBitshift+0x128>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d036      	beq.n	8003c40 <DMA_CalcBaseAndBitshift+0xa8>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a3b      	ldr	r2, [pc, #236]	@ (8003cc4 <DMA_CalcBaseAndBitshift+0x12c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d031      	beq.n	8003c40 <DMA_CalcBaseAndBitshift+0xa8>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a39      	ldr	r2, [pc, #228]	@ (8003cc8 <DMA_CalcBaseAndBitshift+0x130>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d02c      	beq.n	8003c40 <DMA_CalcBaseAndBitshift+0xa8>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a38      	ldr	r2, [pc, #224]	@ (8003ccc <DMA_CalcBaseAndBitshift+0x134>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d027      	beq.n	8003c40 <DMA_CalcBaseAndBitshift+0xa8>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a36      	ldr	r2, [pc, #216]	@ (8003cd0 <DMA_CalcBaseAndBitshift+0x138>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d022      	beq.n	8003c40 <DMA_CalcBaseAndBitshift+0xa8>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a35      	ldr	r2, [pc, #212]	@ (8003cd4 <DMA_CalcBaseAndBitshift+0x13c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d01d      	beq.n	8003c40 <DMA_CalcBaseAndBitshift+0xa8>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a33      	ldr	r2, [pc, #204]	@ (8003cd8 <DMA_CalcBaseAndBitshift+0x140>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d018      	beq.n	8003c40 <DMA_CalcBaseAndBitshift+0xa8>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a32      	ldr	r2, [pc, #200]	@ (8003cdc <DMA_CalcBaseAndBitshift+0x144>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d013      	beq.n	8003c40 <DMA_CalcBaseAndBitshift+0xa8>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a30      	ldr	r2, [pc, #192]	@ (8003ce0 <DMA_CalcBaseAndBitshift+0x148>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00e      	beq.n	8003c40 <DMA_CalcBaseAndBitshift+0xa8>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a2f      	ldr	r2, [pc, #188]	@ (8003ce4 <DMA_CalcBaseAndBitshift+0x14c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d009      	beq.n	8003c40 <DMA_CalcBaseAndBitshift+0xa8>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a2d      	ldr	r2, [pc, #180]	@ (8003ce8 <DMA_CalcBaseAndBitshift+0x150>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d004      	beq.n	8003c40 <DMA_CalcBaseAndBitshift+0xa8>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a2c      	ldr	r2, [pc, #176]	@ (8003cec <DMA_CalcBaseAndBitshift+0x154>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d101      	bne.n	8003c44 <DMA_CalcBaseAndBitshift+0xac>
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <DMA_CalcBaseAndBitshift+0xae>
 8003c44:	2300      	movs	r3, #0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d024      	beq.n	8003c94 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	3b10      	subs	r3, #16
 8003c52:	4a27      	ldr	r2, [pc, #156]	@ (8003cf0 <DMA_CalcBaseAndBitshift+0x158>)
 8003c54:	fba2 2303 	umull	r2, r3, r2, r3
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	4a24      	ldr	r2, [pc, #144]	@ (8003cf4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003c64:	5cd3      	ldrb	r3, [r2, r3]
 8003c66:	461a      	mov	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d908      	bls.n	8003c84 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf8 <DMA_CalcBaseAndBitshift+0x160>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	1d1a      	adds	r2, r3, #4
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c82:	e00d      	b.n	8003ca0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf8 <DMA_CalcBaseAndBitshift+0x160>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c92:	e005      	b.n	8003ca0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	40020010 	.word	0x40020010
 8003cb4:	40020028 	.word	0x40020028
 8003cb8:	40020040 	.word	0x40020040
 8003cbc:	40020058 	.word	0x40020058
 8003cc0:	40020070 	.word	0x40020070
 8003cc4:	40020088 	.word	0x40020088
 8003cc8:	400200a0 	.word	0x400200a0
 8003ccc:	400200b8 	.word	0x400200b8
 8003cd0:	40020410 	.word	0x40020410
 8003cd4:	40020428 	.word	0x40020428
 8003cd8:	40020440 	.word	0x40020440
 8003cdc:	40020458 	.word	0x40020458
 8003ce0:	40020470 	.word	0x40020470
 8003ce4:	40020488 	.word	0x40020488
 8003ce8:	400204a0 	.word	0x400204a0
 8003cec:	400204b8 	.word	0x400204b8
 8003cf0:	aaaaaaab 	.word	0xaaaaaaab
 8003cf4:	080095d0 	.word	0x080095d0
 8003cf8:	fffffc00 	.word	0xfffffc00

08003cfc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d120      	bne.n	8003d52 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d858      	bhi.n	8003dca <DMA_CheckFifoParam+0xce>
 8003d18:	a201      	add	r2, pc, #4	@ (adr r2, 8003d20 <DMA_CheckFifoParam+0x24>)
 8003d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1e:	bf00      	nop
 8003d20:	08003d31 	.word	0x08003d31
 8003d24:	08003d43 	.word	0x08003d43
 8003d28:	08003d31 	.word	0x08003d31
 8003d2c:	08003dcb 	.word	0x08003dcb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d048      	beq.n	8003dce <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d40:	e045      	b.n	8003dce <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d46:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d4a:	d142      	bne.n	8003dd2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d50:	e03f      	b.n	8003dd2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d5a:	d123      	bne.n	8003da4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d838      	bhi.n	8003dd6 <DMA_CheckFifoParam+0xda>
 8003d64:	a201      	add	r2, pc, #4	@ (adr r2, 8003d6c <DMA_CheckFifoParam+0x70>)
 8003d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6a:	bf00      	nop
 8003d6c:	08003d7d 	.word	0x08003d7d
 8003d70:	08003d83 	.word	0x08003d83
 8003d74:	08003d7d 	.word	0x08003d7d
 8003d78:	08003d95 	.word	0x08003d95
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
        break;
 8003d80:	e030      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d025      	beq.n	8003dda <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d92:	e022      	b.n	8003dda <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d98:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d9c:	d11f      	bne.n	8003dde <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003da2:	e01c      	b.n	8003dde <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d902      	bls.n	8003db2 <DMA_CheckFifoParam+0xb6>
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d003      	beq.n	8003db8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003db0:	e018      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
        break;
 8003db6:	e015      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
    break;
 8003dc8:	e00b      	b.n	8003de2 <DMA_CheckFifoParam+0xe6>
        break;
 8003dca:	bf00      	nop
 8003dcc:	e00a      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
        break;
 8003dce:	bf00      	nop
 8003dd0:	e008      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
        break;
 8003dd2:	bf00      	nop
 8003dd4:	e006      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
        break;
 8003dd6:	bf00      	nop
 8003dd8:	e004      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
        break;
 8003dda:	bf00      	nop
 8003ddc:	e002      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
        break;
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
    break;
 8003de2:	bf00      	nop
    }
  }

  return status;
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop

08003df4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a38      	ldr	r2, [pc, #224]	@ (8003ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d022      	beq.n	8003e52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a36      	ldr	r2, [pc, #216]	@ (8003eec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d01d      	beq.n	8003e52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a35      	ldr	r2, [pc, #212]	@ (8003ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d018      	beq.n	8003e52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a33      	ldr	r2, [pc, #204]	@ (8003ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d013      	beq.n	8003e52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a32      	ldr	r2, [pc, #200]	@ (8003ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00e      	beq.n	8003e52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a30      	ldr	r2, [pc, #192]	@ (8003efc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d009      	beq.n	8003e52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a2f      	ldr	r2, [pc, #188]	@ (8003f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d004      	beq.n	8003e52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8003f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d101      	bne.n	8003e56 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003e56:	2300      	movs	r3, #0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01a      	beq.n	8003e92 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	3b08      	subs	r3, #8
 8003e64:	4a28      	ldr	r2, [pc, #160]	@ (8003f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	091b      	lsrs	r3, r3, #4
 8003e6c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4b26      	ldr	r3, [pc, #152]	@ (8003f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003e72:	4413      	add	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	461a      	mov	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a24      	ldr	r2, [pc, #144]	@ (8003f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003e80:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	2201      	movs	r2, #1
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003e90:	e024      	b.n	8003edc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	3b10      	subs	r3, #16
 8003e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea0:	091b      	lsrs	r3, r3, #4
 8003ea2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8003f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d806      	bhi.n	8003eba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4a1b      	ldr	r2, [pc, #108]	@ (8003f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d902      	bls.n	8003eba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4b18      	ldr	r3, [pc, #96]	@ (8003f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a16      	ldr	r2, [pc, #88]	@ (8003f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003ecc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	409a      	lsls	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003edc:	bf00      	nop
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	58025408 	.word	0x58025408
 8003eec:	5802541c 	.word	0x5802541c
 8003ef0:	58025430 	.word	0x58025430
 8003ef4:	58025444 	.word	0x58025444
 8003ef8:	58025458 	.word	0x58025458
 8003efc:	5802546c 	.word	0x5802546c
 8003f00:	58025480 	.word	0x58025480
 8003f04:	58025494 	.word	0x58025494
 8003f08:	cccccccd 	.word	0xcccccccd
 8003f0c:	16009600 	.word	0x16009600
 8003f10:	58025880 	.word	0x58025880
 8003f14:	aaaaaaab 	.word	0xaaaaaaab
 8003f18:	400204b8 	.word	0x400204b8
 8003f1c:	4002040f 	.word	0x4002040f
 8003f20:	10008200 	.word	0x10008200
 8003f24:	40020880 	.word	0x40020880

08003f28 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d04a      	beq.n	8003fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d847      	bhi.n	8003fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a25      	ldr	r2, [pc, #148]	@ (8003fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d022      	beq.n	8003f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a24      	ldr	r2, [pc, #144]	@ (8003fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d01d      	beq.n	8003f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a22      	ldr	r2, [pc, #136]	@ (8003fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d018      	beq.n	8003f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a21      	ldr	r2, [pc, #132]	@ (8003fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d013      	beq.n	8003f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a1f      	ldr	r2, [pc, #124]	@ (8003ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00e      	beq.n	8003f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d009      	beq.n	8003f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d004      	beq.n	8003f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8003ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d101      	bne.n	8003f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4b17      	ldr	r3, [pc, #92]	@ (8004000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a15      	ldr	r2, [pc, #84]	@ (8004004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003fb0:	671a      	str	r2, [r3, #112]	@ 0x70
 8003fb2:	e009      	b.n	8003fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4b14      	ldr	r3, [pc, #80]	@ (8004008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a11      	ldr	r2, [pc, #68]	@ (800400c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003fc6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	2201      	movs	r2, #1
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003fd4:	bf00      	nop
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	58025408 	.word	0x58025408
 8003fe4:	5802541c 	.word	0x5802541c
 8003fe8:	58025430 	.word	0x58025430
 8003fec:	58025444 	.word	0x58025444
 8003ff0:	58025458 	.word	0x58025458
 8003ff4:	5802546c 	.word	0x5802546c
 8003ff8:	58025480 	.word	0x58025480
 8003ffc:	58025494 	.word	0x58025494
 8004000:	1600963f 	.word	0x1600963f
 8004004:	58025940 	.word	0x58025940
 8004008:	1000823f 	.word	0x1000823f
 800400c:	40020940 	.word	0x40020940

08004010 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004010:	b480      	push	{r7}
 8004012:	b089      	sub	sp, #36	@ 0x24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800401e:	4b89      	ldr	r3, [pc, #548]	@ (8004244 <HAL_GPIO_Init+0x234>)
 8004020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004022:	e194      	b.n	800434e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	2101      	movs	r1, #1
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	fa01 f303 	lsl.w	r3, r1, r3
 8004030:	4013      	ands	r3, r2
 8004032:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 8186 	beq.w	8004348 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	2b01      	cmp	r3, #1
 8004046:	d005      	beq.n	8004054 <HAL_GPIO_Init+0x44>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 0303 	and.w	r3, r3, #3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d130      	bne.n	80040b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	2203      	movs	r2, #3
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43db      	mvns	r3, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4013      	ands	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	4313      	orrs	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800408a:	2201      	movs	r2, #1
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43db      	mvns	r3, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4013      	ands	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	091b      	lsrs	r3, r3, #4
 80040a0:	f003 0201 	and.w	r2, r3, #1
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d017      	beq.n	80040f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	2203      	movs	r2, #3
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	43db      	mvns	r3, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4013      	ands	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d123      	bne.n	8004146 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	08da      	lsrs	r2, r3, #3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3208      	adds	r2, #8
 8004106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800410a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	220f      	movs	r2, #15
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43db      	mvns	r3, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4013      	ands	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4313      	orrs	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	08da      	lsrs	r2, r3, #3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3208      	adds	r2, #8
 8004140:	69b9      	ldr	r1, [r7, #24]
 8004142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	2203      	movs	r2, #3
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	43db      	mvns	r3, r3
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4013      	ands	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f003 0203 	and.w	r2, r3, #3
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 80e0 	beq.w	8004348 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004188:	4b2f      	ldr	r3, [pc, #188]	@ (8004248 <HAL_GPIO_Init+0x238>)
 800418a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800418e:	4a2e      	ldr	r2, [pc, #184]	@ (8004248 <HAL_GPIO_Init+0x238>)
 8004190:	f043 0302 	orr.w	r3, r3, #2
 8004194:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004198:	4b2b      	ldr	r3, [pc, #172]	@ (8004248 <HAL_GPIO_Init+0x238>)
 800419a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041a6:	4a29      	ldr	r2, [pc, #164]	@ (800424c <HAL_GPIO_Init+0x23c>)
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	089b      	lsrs	r3, r3, #2
 80041ac:	3302      	adds	r3, #2
 80041ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	220f      	movs	r2, #15
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43db      	mvns	r3, r3
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	4013      	ands	r3, r2
 80041c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a20      	ldr	r2, [pc, #128]	@ (8004250 <HAL_GPIO_Init+0x240>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d052      	beq.n	8004278 <HAL_GPIO_Init+0x268>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004254 <HAL_GPIO_Init+0x244>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d031      	beq.n	800423e <HAL_GPIO_Init+0x22e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004258 <HAL_GPIO_Init+0x248>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d02b      	beq.n	800423a <HAL_GPIO_Init+0x22a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a1d      	ldr	r2, [pc, #116]	@ (800425c <HAL_GPIO_Init+0x24c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d025      	beq.n	8004236 <HAL_GPIO_Init+0x226>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004260 <HAL_GPIO_Init+0x250>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d01f      	beq.n	8004232 <HAL_GPIO_Init+0x222>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004264 <HAL_GPIO_Init+0x254>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d019      	beq.n	800422e <HAL_GPIO_Init+0x21e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004268 <HAL_GPIO_Init+0x258>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d013      	beq.n	800422a <HAL_GPIO_Init+0x21a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a19      	ldr	r2, [pc, #100]	@ (800426c <HAL_GPIO_Init+0x25c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00d      	beq.n	8004226 <HAL_GPIO_Init+0x216>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a18      	ldr	r2, [pc, #96]	@ (8004270 <HAL_GPIO_Init+0x260>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d007      	beq.n	8004222 <HAL_GPIO_Init+0x212>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a17      	ldr	r2, [pc, #92]	@ (8004274 <HAL_GPIO_Init+0x264>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d101      	bne.n	800421e <HAL_GPIO_Init+0x20e>
 800421a:	2309      	movs	r3, #9
 800421c:	e02d      	b.n	800427a <HAL_GPIO_Init+0x26a>
 800421e:	230a      	movs	r3, #10
 8004220:	e02b      	b.n	800427a <HAL_GPIO_Init+0x26a>
 8004222:	2308      	movs	r3, #8
 8004224:	e029      	b.n	800427a <HAL_GPIO_Init+0x26a>
 8004226:	2307      	movs	r3, #7
 8004228:	e027      	b.n	800427a <HAL_GPIO_Init+0x26a>
 800422a:	2306      	movs	r3, #6
 800422c:	e025      	b.n	800427a <HAL_GPIO_Init+0x26a>
 800422e:	2305      	movs	r3, #5
 8004230:	e023      	b.n	800427a <HAL_GPIO_Init+0x26a>
 8004232:	2304      	movs	r3, #4
 8004234:	e021      	b.n	800427a <HAL_GPIO_Init+0x26a>
 8004236:	2303      	movs	r3, #3
 8004238:	e01f      	b.n	800427a <HAL_GPIO_Init+0x26a>
 800423a:	2302      	movs	r3, #2
 800423c:	e01d      	b.n	800427a <HAL_GPIO_Init+0x26a>
 800423e:	2301      	movs	r3, #1
 8004240:	e01b      	b.n	800427a <HAL_GPIO_Init+0x26a>
 8004242:	bf00      	nop
 8004244:	58000080 	.word	0x58000080
 8004248:	58024400 	.word	0x58024400
 800424c:	58000400 	.word	0x58000400
 8004250:	58020000 	.word	0x58020000
 8004254:	58020400 	.word	0x58020400
 8004258:	58020800 	.word	0x58020800
 800425c:	58020c00 	.word	0x58020c00
 8004260:	58021000 	.word	0x58021000
 8004264:	58021400 	.word	0x58021400
 8004268:	58021800 	.word	0x58021800
 800426c:	58021c00 	.word	0x58021c00
 8004270:	58022000 	.word	0x58022000
 8004274:	58022400 	.word	0x58022400
 8004278:	2300      	movs	r3, #0
 800427a:	69fa      	ldr	r2, [r7, #28]
 800427c:	f002 0203 	and.w	r2, r2, #3
 8004280:	0092      	lsls	r2, r2, #2
 8004282:	4093      	lsls	r3, r2
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4313      	orrs	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800428a:	4938      	ldr	r1, [pc, #224]	@ (800436c <HAL_GPIO_Init+0x35c>)
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	089b      	lsrs	r3, r3, #2
 8004290:	3302      	adds	r3, #2
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	43db      	mvns	r3, r3
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	4013      	ands	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80042be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80042c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	43db      	mvns	r3, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4013      	ands	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80042ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	43db      	mvns	r3, r3
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	4013      	ands	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	4313      	orrs	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	43db      	mvns	r3, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4013      	ands	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	3301      	adds	r3, #1
 800434c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	fa22 f303 	lsr.w	r3, r2, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	f47f ae63 	bne.w	8004024 <HAL_GPIO_Init+0x14>
  }
}
 800435e:	bf00      	nop
 8004360:	bf00      	nop
 8004362:	3724      	adds	r7, #36	@ 0x24
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	58000400 	.word	0x58000400

08004370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	807b      	strh	r3, [r7, #2]
 800437c:	4613      	mov	r3, r2
 800437e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004380:	787b      	ldrb	r3, [r7, #1]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004386:	887a      	ldrh	r2, [r7, #2]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800438c:	e003      	b.n	8004396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800438e:	887b      	ldrh	r3, [r7, #2]
 8004390:	041a      	lsls	r2, r3, #16
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	619a      	str	r2, [r3, #24]
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
	...

080043a4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80043ac:	4b19      	ldr	r3, [pc, #100]	@ (8004414 <HAL_PWREx_ConfigSupply+0x70>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d00a      	beq.n	80043ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80043b8:	4b16      	ldr	r3, [pc, #88]	@ (8004414 <HAL_PWREx_ConfigSupply+0x70>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d001      	beq.n	80043ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e01f      	b.n	800440a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	e01d      	b.n	800440a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80043ce:	4b11      	ldr	r3, [pc, #68]	@ (8004414 <HAL_PWREx_ConfigSupply+0x70>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f023 0207 	bic.w	r2, r3, #7
 80043d6:	490f      	ldr	r1, [pc, #60]	@ (8004414 <HAL_PWREx_ConfigSupply+0x70>)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80043de:	f7fd fc03 	bl	8001be8 <HAL_GetTick>
 80043e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043e4:	e009      	b.n	80043fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043e6:	f7fd fbff 	bl	8001be8 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043f4:	d901      	bls.n	80043fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e007      	b.n	800440a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043fa:	4b06      	ldr	r3, [pc, #24]	@ (8004414 <HAL_PWREx_ConfigSupply+0x70>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004406:	d1ee      	bne.n	80043e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	58024800 	.word	0x58024800

08004418 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08c      	sub	sp, #48	@ 0x30
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d102      	bne.n	800442c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	f000 bc48 	b.w	8004cbc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 8088 	beq.w	800454a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800443a:	4b99      	ldr	r3, [pc, #612]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004442:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004444:	4b96      	ldr	r3, [pc, #600]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 8004446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004448:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800444a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800444c:	2b10      	cmp	r3, #16
 800444e:	d007      	beq.n	8004460 <HAL_RCC_OscConfig+0x48>
 8004450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004452:	2b18      	cmp	r3, #24
 8004454:	d111      	bne.n	800447a <HAL_RCC_OscConfig+0x62>
 8004456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d10c      	bne.n	800447a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004460:	4b8f      	ldr	r3, [pc, #572]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d06d      	beq.n	8004548 <HAL_RCC_OscConfig+0x130>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d169      	bne.n	8004548 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	f000 bc21 	b.w	8004cbc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004482:	d106      	bne.n	8004492 <HAL_RCC_OscConfig+0x7a>
 8004484:	4b86      	ldr	r3, [pc, #536]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a85      	ldr	r2, [pc, #532]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 800448a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	e02e      	b.n	80044f0 <HAL_RCC_OscConfig+0xd8>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10c      	bne.n	80044b4 <HAL_RCC_OscConfig+0x9c>
 800449a:	4b81      	ldr	r3, [pc, #516]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a80      	ldr	r2, [pc, #512]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 80044a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	4b7e      	ldr	r3, [pc, #504]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a7d      	ldr	r2, [pc, #500]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 80044ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	e01d      	b.n	80044f0 <HAL_RCC_OscConfig+0xd8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044bc:	d10c      	bne.n	80044d8 <HAL_RCC_OscConfig+0xc0>
 80044be:	4b78      	ldr	r3, [pc, #480]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a77      	ldr	r2, [pc, #476]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 80044c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	4b75      	ldr	r3, [pc, #468]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a74      	ldr	r2, [pc, #464]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 80044d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	e00b      	b.n	80044f0 <HAL_RCC_OscConfig+0xd8>
 80044d8:	4b71      	ldr	r3, [pc, #452]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a70      	ldr	r2, [pc, #448]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 80044de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	4b6e      	ldr	r3, [pc, #440]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a6d      	ldr	r2, [pc, #436]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 80044ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d013      	beq.n	8004520 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fd fb76 	bl	8001be8 <HAL_GetTick>
 80044fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004500:	f7fd fb72 	bl	8001be8 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b64      	cmp	r3, #100	@ 0x64
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e3d4      	b.n	8004cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004512:	4b63      	ldr	r3, [pc, #396]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0xe8>
 800451e:	e014      	b.n	800454a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fd fb62 	bl	8001be8 <HAL_GetTick>
 8004524:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004528:	f7fd fb5e 	bl	8001be8 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b64      	cmp	r3, #100	@ 0x64
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e3c0      	b.n	8004cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800453a:	4b59      	ldr	r3, [pc, #356]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x110>
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 80ca 	beq.w	80046ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004558:	4b51      	ldr	r3, [pc, #324]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004560:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004562:	4b4f      	ldr	r3, [pc, #316]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 8004564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004566:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d007      	beq.n	800457e <HAL_RCC_OscConfig+0x166>
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	2b18      	cmp	r3, #24
 8004572:	d156      	bne.n	8004622 <HAL_RCC_OscConfig+0x20a>
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d151      	bne.n	8004622 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800457e:	4b48      	ldr	r3, [pc, #288]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	2b00      	cmp	r3, #0
 8004588:	d005      	beq.n	8004596 <HAL_RCC_OscConfig+0x17e>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e392      	b.n	8004cbc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004596:	4b42      	ldr	r3, [pc, #264]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f023 0219 	bic.w	r2, r3, #25
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	493f      	ldr	r1, [pc, #252]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fd fb1e 	bl	8001be8 <HAL_GetTick>
 80045ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b0:	f7fd fb1a 	bl	8001be8 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e37c      	b.n	8004cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045c2:	4b37      	ldr	r3, [pc, #220]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ce:	f7fd fb17 	bl	8001c00 <HAL_GetREVID>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80045d8:	4293      	cmp	r3, r2
 80045da:	d817      	bhi.n	800460c <HAL_RCC_OscConfig+0x1f4>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	2b40      	cmp	r3, #64	@ 0x40
 80045e2:	d108      	bne.n	80045f6 <HAL_RCC_OscConfig+0x1de>
 80045e4:	4b2e      	ldr	r3, [pc, #184]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80045ec:	4a2c      	ldr	r2, [pc, #176]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 80045ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045f2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045f4:	e07a      	b.n	80046ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f6:	4b2a      	ldr	r3, [pc, #168]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	031b      	lsls	r3, r3, #12
 8004604:	4926      	ldr	r1, [pc, #152]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 8004606:	4313      	orrs	r3, r2
 8004608:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800460a:	e06f      	b.n	80046ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460c:	4b24      	ldr	r3, [pc, #144]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	061b      	lsls	r3, r3, #24
 800461a:	4921      	ldr	r1, [pc, #132]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 800461c:	4313      	orrs	r3, r2
 800461e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004620:	e064      	b.n	80046ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d047      	beq.n	80046ba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800462a:	4b1d      	ldr	r3, [pc, #116]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 0219 	bic.w	r2, r3, #25
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	491a      	ldr	r1, [pc, #104]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 8004638:	4313      	orrs	r3, r2
 800463a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fd fad4 	bl	8001be8 <HAL_GetTick>
 8004640:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004644:	f7fd fad0 	bl	8001be8 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e332      	b.n	8004cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004656:	4b12      	ldr	r3, [pc, #72]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004662:	f7fd facd 	bl	8001c00 <HAL_GetREVID>
 8004666:	4603      	mov	r3, r0
 8004668:	f241 0203 	movw	r2, #4099	@ 0x1003
 800466c:	4293      	cmp	r3, r2
 800466e:	d819      	bhi.n	80046a4 <HAL_RCC_OscConfig+0x28c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	2b40      	cmp	r3, #64	@ 0x40
 8004676:	d108      	bne.n	800468a <HAL_RCC_OscConfig+0x272>
 8004678:	4b09      	ldr	r3, [pc, #36]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004680:	4a07      	ldr	r2, [pc, #28]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 8004682:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004686:	6053      	str	r3, [r2, #4]
 8004688:	e030      	b.n	80046ec <HAL_RCC_OscConfig+0x2d4>
 800468a:	4b05      	ldr	r3, [pc, #20]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	031b      	lsls	r3, r3, #12
 8004698:	4901      	ldr	r1, [pc, #4]	@ (80046a0 <HAL_RCC_OscConfig+0x288>)
 800469a:	4313      	orrs	r3, r2
 800469c:	604b      	str	r3, [r1, #4]
 800469e:	e025      	b.n	80046ec <HAL_RCC_OscConfig+0x2d4>
 80046a0:	58024400 	.word	0x58024400
 80046a4:	4b9a      	ldr	r3, [pc, #616]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	061b      	lsls	r3, r3, #24
 80046b2:	4997      	ldr	r1, [pc, #604]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	604b      	str	r3, [r1, #4]
 80046b8:	e018      	b.n	80046ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ba:	4b95      	ldr	r3, [pc, #596]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a94      	ldr	r2, [pc, #592]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c6:	f7fd fa8f 	bl	8001be8 <HAL_GetTick>
 80046ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ce:	f7fd fa8b 	bl	8001be8 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e2ed      	b.n	8004cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046e0:	4b8b      	ldr	r3, [pc, #556]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1f0      	bne.n	80046ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0310 	and.w	r3, r3, #16
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80a9 	beq.w	800484c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046fa:	4b85      	ldr	r3, [pc, #532]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004702:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004704:	4b82      	ldr	r3, [pc, #520]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 8004706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004708:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	2b08      	cmp	r3, #8
 800470e:	d007      	beq.n	8004720 <HAL_RCC_OscConfig+0x308>
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	2b18      	cmp	r3, #24
 8004714:	d13a      	bne.n	800478c <HAL_RCC_OscConfig+0x374>
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	2b01      	cmp	r3, #1
 800471e:	d135      	bne.n	800478c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004720:	4b7b      	ldr	r3, [pc, #492]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <HAL_RCC_OscConfig+0x320>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	2b80      	cmp	r3, #128	@ 0x80
 8004732:	d001      	beq.n	8004738 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e2c1      	b.n	8004cbc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004738:	f7fd fa62 	bl	8001c00 <HAL_GetREVID>
 800473c:	4603      	mov	r3, r0
 800473e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004742:	4293      	cmp	r3, r2
 8004744:	d817      	bhi.n	8004776 <HAL_RCC_OscConfig+0x35e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	2b20      	cmp	r3, #32
 800474c:	d108      	bne.n	8004760 <HAL_RCC_OscConfig+0x348>
 800474e:	4b70      	ldr	r3, [pc, #448]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004756:	4a6e      	ldr	r2, [pc, #440]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 8004758:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800475c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800475e:	e075      	b.n	800484c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004760:	4b6b      	ldr	r3, [pc, #428]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	069b      	lsls	r3, r3, #26
 800476e:	4968      	ldr	r1, [pc, #416]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 8004770:	4313      	orrs	r3, r2
 8004772:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004774:	e06a      	b.n	800484c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004776:	4b66      	ldr	r3, [pc, #408]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	061b      	lsls	r3, r3, #24
 8004784:	4962      	ldr	r1, [pc, #392]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 8004786:	4313      	orrs	r3, r2
 8004788:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800478a:	e05f      	b.n	800484c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d042      	beq.n	800481a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004794:	4b5e      	ldr	r3, [pc, #376]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a5d      	ldr	r2, [pc, #372]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 800479a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800479e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fd fa22 	bl	8001be8 <HAL_GetTick>
 80047a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80047a8:	f7fd fa1e 	bl	8001be8 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e280      	b.n	8004cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047ba:	4b55      	ldr	r3, [pc, #340]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0f0      	beq.n	80047a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047c6:	f7fd fa1b 	bl	8001c00 <HAL_GetREVID>
 80047ca:	4603      	mov	r3, r0
 80047cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d817      	bhi.n	8004804 <HAL_RCC_OscConfig+0x3ec>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d108      	bne.n	80047ee <HAL_RCC_OscConfig+0x3d6>
 80047dc:	4b4c      	ldr	r3, [pc, #304]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80047e4:	4a4a      	ldr	r2, [pc, #296]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 80047e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80047ea:	6053      	str	r3, [r2, #4]
 80047ec:	e02e      	b.n	800484c <HAL_RCC_OscConfig+0x434>
 80047ee:	4b48      	ldr	r3, [pc, #288]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	069b      	lsls	r3, r3, #26
 80047fc:	4944      	ldr	r1, [pc, #272]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	604b      	str	r3, [r1, #4]
 8004802:	e023      	b.n	800484c <HAL_RCC_OscConfig+0x434>
 8004804:	4b42      	ldr	r3, [pc, #264]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	061b      	lsls	r3, r3, #24
 8004812:	493f      	ldr	r1, [pc, #252]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 8004814:	4313      	orrs	r3, r2
 8004816:	60cb      	str	r3, [r1, #12]
 8004818:	e018      	b.n	800484c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800481a:	4b3d      	ldr	r3, [pc, #244]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a3c      	ldr	r2, [pc, #240]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 8004820:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004826:	f7fd f9df 	bl	8001be8 <HAL_GetTick>
 800482a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800482e:	f7fd f9db 	bl	8001be8 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e23d      	b.n	8004cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004840:	4b33      	ldr	r3, [pc, #204]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1f0      	bne.n	800482e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0308 	and.w	r3, r3, #8
 8004854:	2b00      	cmp	r3, #0
 8004856:	d036      	beq.n	80048c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d019      	beq.n	8004894 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004860:	4b2b      	ldr	r3, [pc, #172]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 8004862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004864:	4a2a      	ldr	r2, [pc, #168]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 8004866:	f043 0301 	orr.w	r3, r3, #1
 800486a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486c:	f7fd f9bc 	bl	8001be8 <HAL_GetTick>
 8004870:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004874:	f7fd f9b8 	bl	8001be8 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e21a      	b.n	8004cbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004886:	4b22      	ldr	r3, [pc, #136]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 8004888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0f0      	beq.n	8004874 <HAL_RCC_OscConfig+0x45c>
 8004892:	e018      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004894:	4b1e      	ldr	r3, [pc, #120]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 8004896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004898:	4a1d      	ldr	r2, [pc, #116]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 800489a:	f023 0301 	bic.w	r3, r3, #1
 800489e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a0:	f7fd f9a2 	bl	8001be8 <HAL_GetTick>
 80048a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048a8:	f7fd f99e 	bl	8001be8 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e200      	b.n	8004cbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048ba:	4b15      	ldr	r3, [pc, #84]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 80048bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d039      	beq.n	8004946 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d01c      	beq.n	8004914 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048da:	4b0d      	ldr	r3, [pc, #52]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a0c      	ldr	r2, [pc, #48]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 80048e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80048e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048e6:	f7fd f97f 	bl	8001be8 <HAL_GetTick>
 80048ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ee:	f7fd f97b 	bl	8001be8 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e1dd      	b.n	8004cbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004900:	4b03      	ldr	r3, [pc, #12]	@ (8004910 <HAL_RCC_OscConfig+0x4f8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0f0      	beq.n	80048ee <HAL_RCC_OscConfig+0x4d6>
 800490c:	e01b      	b.n	8004946 <HAL_RCC_OscConfig+0x52e>
 800490e:	bf00      	nop
 8004910:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004914:	4b9b      	ldr	r3, [pc, #620]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a9a      	ldr	r2, [pc, #616]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 800491a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800491e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004920:	f7fd f962 	bl	8001be8 <HAL_GetTick>
 8004924:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004928:	f7fd f95e 	bl	8001be8 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e1c0      	b.n	8004cbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800493a:	4b92      	ldr	r3, [pc, #584]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f0      	bne.n	8004928 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0304 	and.w	r3, r3, #4
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 8081 	beq.w	8004a56 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004954:	4b8c      	ldr	r3, [pc, #560]	@ (8004b88 <HAL_RCC_OscConfig+0x770>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a8b      	ldr	r2, [pc, #556]	@ (8004b88 <HAL_RCC_OscConfig+0x770>)
 800495a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800495e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004960:	f7fd f942 	bl	8001be8 <HAL_GetTick>
 8004964:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004968:	f7fd f93e 	bl	8001be8 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b64      	cmp	r3, #100	@ 0x64
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e1a0      	b.n	8004cbc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800497a:	4b83      	ldr	r3, [pc, #524]	@ (8004b88 <HAL_RCC_OscConfig+0x770>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f0      	beq.n	8004968 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d106      	bne.n	800499c <HAL_RCC_OscConfig+0x584>
 800498e:	4b7d      	ldr	r3, [pc, #500]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004992:	4a7c      	ldr	r2, [pc, #496]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004994:	f043 0301 	orr.w	r3, r3, #1
 8004998:	6713      	str	r3, [r2, #112]	@ 0x70
 800499a:	e02d      	b.n	80049f8 <HAL_RCC_OscConfig+0x5e0>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10c      	bne.n	80049be <HAL_RCC_OscConfig+0x5a6>
 80049a4:	4b77      	ldr	r3, [pc, #476]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 80049a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a8:	4a76      	ldr	r2, [pc, #472]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 80049aa:	f023 0301 	bic.w	r3, r3, #1
 80049ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80049b0:	4b74      	ldr	r3, [pc, #464]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 80049b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b4:	4a73      	ldr	r2, [pc, #460]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 80049b6:	f023 0304 	bic.w	r3, r3, #4
 80049ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80049bc:	e01c      	b.n	80049f8 <HAL_RCC_OscConfig+0x5e0>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	2b05      	cmp	r3, #5
 80049c4:	d10c      	bne.n	80049e0 <HAL_RCC_OscConfig+0x5c8>
 80049c6:	4b6f      	ldr	r3, [pc, #444]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 80049c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ca:	4a6e      	ldr	r2, [pc, #440]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 80049cc:	f043 0304 	orr.w	r3, r3, #4
 80049d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80049d2:	4b6c      	ldr	r3, [pc, #432]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 80049d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d6:	4a6b      	ldr	r2, [pc, #428]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 80049d8:	f043 0301 	orr.w	r3, r3, #1
 80049dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80049de:	e00b      	b.n	80049f8 <HAL_RCC_OscConfig+0x5e0>
 80049e0:	4b68      	ldr	r3, [pc, #416]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 80049e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e4:	4a67      	ldr	r2, [pc, #412]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 80049e6:	f023 0301 	bic.w	r3, r3, #1
 80049ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80049ec:	4b65      	ldr	r3, [pc, #404]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 80049ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f0:	4a64      	ldr	r2, [pc, #400]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 80049f2:	f023 0304 	bic.w	r3, r3, #4
 80049f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d015      	beq.n	8004a2c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a00:	f7fd f8f2 	bl	8001be8 <HAL_GetTick>
 8004a04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a06:	e00a      	b.n	8004a1e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a08:	f7fd f8ee 	bl	8001be8 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e14e      	b.n	8004cbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a1e:	4b59      	ldr	r3, [pc, #356]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0ee      	beq.n	8004a08 <HAL_RCC_OscConfig+0x5f0>
 8004a2a:	e014      	b.n	8004a56 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2c:	f7fd f8dc 	bl	8001be8 <HAL_GetTick>
 8004a30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a32:	e00a      	b.n	8004a4a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a34:	f7fd f8d8 	bl	8001be8 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e138      	b.n	8004cbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a4a:	4b4e      	ldr	r3, [pc, #312]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1ee      	bne.n	8004a34 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 812d 	beq.w	8004cba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a60:	4b48      	ldr	r3, [pc, #288]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a68:	2b18      	cmp	r3, #24
 8004a6a:	f000 80bd 	beq.w	8004be8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	f040 809e 	bne.w	8004bb4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a78:	4b42      	ldr	r3, [pc, #264]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a41      	ldr	r2, [pc, #260]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004a7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a84:	f7fd f8b0 	bl	8001be8 <HAL_GetTick>
 8004a88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a8c:	f7fd f8ac 	bl	8001be8 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e10e      	b.n	8004cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a9e:	4b39      	ldr	r3, [pc, #228]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f0      	bne.n	8004a8c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aaa:	4b36      	ldr	r3, [pc, #216]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004aac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004aae:	4b37      	ldr	r3, [pc, #220]	@ (8004b8c <HAL_RCC_OscConfig+0x774>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004aba:	0112      	lsls	r2, r2, #4
 8004abc:	430a      	orrs	r2, r1
 8004abe:	4931      	ldr	r1, [pc, #196]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	025b      	lsls	r3, r3, #9
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	041b      	lsls	r3, r3, #16
 8004ae2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aec:	3b01      	subs	r3, #1
 8004aee:	061b      	lsls	r3, r3, #24
 8004af0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004af4:	4923      	ldr	r1, [pc, #140]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004afa:	4b22      	ldr	r3, [pc, #136]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afe:	4a21      	ldr	r2, [pc, #132]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004b00:	f023 0301 	bic.w	r3, r3, #1
 8004b04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b06:	4b1f      	ldr	r3, [pc, #124]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004b08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b0a:	4b21      	ldr	r3, [pc, #132]	@ (8004b90 <HAL_RCC_OscConfig+0x778>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b12:	00d2      	lsls	r2, r2, #3
 8004b14:	491b      	ldr	r1, [pc, #108]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1e:	f023 020c 	bic.w	r2, r3, #12
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b26:	4917      	ldr	r1, [pc, #92]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b2c:	4b15      	ldr	r3, [pc, #84]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b30:	f023 0202 	bic.w	r2, r3, #2
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b38:	4912      	ldr	r1, [pc, #72]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b3e:	4b11      	ldr	r3, [pc, #68]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b42:	4a10      	ldr	r2, [pc, #64]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4e:	4a0d      	ldr	r2, [pc, #52]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b56:	4b0b      	ldr	r3, [pc, #44]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004b62:	4b08      	ldr	r3, [pc, #32]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b66:	4a07      	ldr	r2, [pc, #28]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004b68:	f043 0301 	orr.w	r3, r3, #1
 8004b6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b6e:	4b05      	ldr	r3, [pc, #20]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a04      	ldr	r2, [pc, #16]	@ (8004b84 <HAL_RCC_OscConfig+0x76c>)
 8004b74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7a:	f7fd f835 	bl	8001be8 <HAL_GetTick>
 8004b7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b80:	e011      	b.n	8004ba6 <HAL_RCC_OscConfig+0x78e>
 8004b82:	bf00      	nop
 8004b84:	58024400 	.word	0x58024400
 8004b88:	58024800 	.word	0x58024800
 8004b8c:	fffffc0c 	.word	0xfffffc0c
 8004b90:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b94:	f7fd f828 	bl	8001be8 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e08a      	b.n	8004cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ba6:	4b47      	ldr	r3, [pc, #284]	@ (8004cc4 <HAL_RCC_OscConfig+0x8ac>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0x77c>
 8004bb2:	e082      	b.n	8004cba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb4:	4b43      	ldr	r3, [pc, #268]	@ (8004cc4 <HAL_RCC_OscConfig+0x8ac>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a42      	ldr	r2, [pc, #264]	@ (8004cc4 <HAL_RCC_OscConfig+0x8ac>)
 8004bba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc0:	f7fd f812 	bl	8001be8 <HAL_GetTick>
 8004bc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc8:	f7fd f80e 	bl	8001be8 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e070      	b.n	8004cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bda:	4b3a      	ldr	r3, [pc, #232]	@ (8004cc4 <HAL_RCC_OscConfig+0x8ac>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x7b0>
 8004be6:	e068      	b.n	8004cba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004be8:	4b36      	ldr	r3, [pc, #216]	@ (8004cc4 <HAL_RCC_OscConfig+0x8ac>)
 8004bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004bee:	4b35      	ldr	r3, [pc, #212]	@ (8004cc4 <HAL_RCC_OscConfig+0x8ac>)
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d031      	beq.n	8004c60 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f003 0203 	and.w	r2, r3, #3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d12a      	bne.n	8004c60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	091b      	lsrs	r3, r3, #4
 8004c0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d122      	bne.n	8004c60 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c24:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d11a      	bne.n	8004c60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	0a5b      	lsrs	r3, r3, #9
 8004c2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c36:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d111      	bne.n	8004c60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	0c1b      	lsrs	r3, r3, #16
 8004c40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c48:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d108      	bne.n	8004c60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	0e1b      	lsrs	r3, r3, #24
 8004c52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d001      	beq.n	8004c64 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e02b      	b.n	8004cbc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004c64:	4b17      	ldr	r3, [pc, #92]	@ (8004cc4 <HAL_RCC_OscConfig+0x8ac>)
 8004c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c68:	08db      	lsrs	r3, r3, #3
 8004c6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c6e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d01f      	beq.n	8004cba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004c7a:	4b12      	ldr	r3, [pc, #72]	@ (8004cc4 <HAL_RCC_OscConfig+0x8ac>)
 8004c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7e:	4a11      	ldr	r2, [pc, #68]	@ (8004cc4 <HAL_RCC_OscConfig+0x8ac>)
 8004c80:	f023 0301 	bic.w	r3, r3, #1
 8004c84:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c86:	f7fc ffaf 	bl	8001be8 <HAL_GetTick>
 8004c8a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004c8c:	bf00      	nop
 8004c8e:	f7fc ffab 	bl	8001be8 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d0f9      	beq.n	8004c8e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc4 <HAL_RCC_OscConfig+0x8ac>)
 8004c9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <HAL_RCC_OscConfig+0x8b0>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ca6:	00d2      	lsls	r2, r2, #3
 8004ca8:	4906      	ldr	r1, [pc, #24]	@ (8004cc4 <HAL_RCC_OscConfig+0x8ac>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004cae:	4b05      	ldr	r3, [pc, #20]	@ (8004cc4 <HAL_RCC_OscConfig+0x8ac>)
 8004cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb2:	4a04      	ldr	r2, [pc, #16]	@ (8004cc4 <HAL_RCC_OscConfig+0x8ac>)
 8004cb4:	f043 0301 	orr.w	r3, r3, #1
 8004cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3730      	adds	r7, #48	@ 0x30
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	58024400 	.word	0x58024400
 8004cc8:	ffff0007 	.word	0xffff0007

08004ccc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e19c      	b.n	800501a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce0:	4b8a      	ldr	r3, [pc, #552]	@ (8004f0c <HAL_RCC_ClockConfig+0x240>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 030f 	and.w	r3, r3, #15
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d910      	bls.n	8004d10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cee:	4b87      	ldr	r3, [pc, #540]	@ (8004f0c <HAL_RCC_ClockConfig+0x240>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f023 020f 	bic.w	r2, r3, #15
 8004cf6:	4985      	ldr	r1, [pc, #532]	@ (8004f0c <HAL_RCC_ClockConfig+0x240>)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfe:	4b83      	ldr	r3, [pc, #524]	@ (8004f0c <HAL_RCC_ClockConfig+0x240>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d001      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e184      	b.n	800501a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d010      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	4b7b      	ldr	r3, [pc, #492]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d908      	bls.n	8004d3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d2c:	4b78      	ldr	r3, [pc, #480]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	4975      	ldr	r1, [pc, #468]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d010      	beq.n	8004d6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	695a      	ldr	r2, [r3, #20]
 8004d4e:	4b70      	ldr	r3, [pc, #448]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d908      	bls.n	8004d6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d5a:	4b6d      	ldr	r3, [pc, #436]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	496a      	ldr	r1, [pc, #424]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0310 	and.w	r3, r3, #16
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d010      	beq.n	8004d9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699a      	ldr	r2, [r3, #24]
 8004d7c:	4b64      	ldr	r3, [pc, #400]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d908      	bls.n	8004d9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d88:	4b61      	ldr	r3, [pc, #388]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	495e      	ldr	r1, [pc, #376]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d010      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69da      	ldr	r2, [r3, #28]
 8004daa:	4b59      	ldr	r3, [pc, #356]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d908      	bls.n	8004dc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004db6:	4b56      	ldr	r3, [pc, #344]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	4953      	ldr	r1, [pc, #332]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d010      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	4b4d      	ldr	r3, [pc, #308]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d908      	bls.n	8004df6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004de4:	4b4a      	ldr	r3, [pc, #296]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	f023 020f 	bic.w	r2, r3, #15
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	4947      	ldr	r1, [pc, #284]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d055      	beq.n	8004eae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004e02:	4b43      	ldr	r3, [pc, #268]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	4940      	ldr	r1, [pc, #256]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d107      	bne.n	8004e2c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e1c:	4b3c      	ldr	r3, [pc, #240]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d121      	bne.n	8004e6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0f6      	b.n	800501a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d107      	bne.n	8004e44 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e34:	4b36      	ldr	r3, [pc, #216]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d115      	bne.n	8004e6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0ea      	b.n	800501a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d107      	bne.n	8004e5c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e4c:	4b30      	ldr	r3, [pc, #192]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d109      	bne.n	8004e6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0de      	b.n	800501a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e5c:	4b2c      	ldr	r3, [pc, #176]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0d6      	b.n	800501a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e6c:	4b28      	ldr	r3, [pc, #160]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	f023 0207 	bic.w	r2, r3, #7
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	4925      	ldr	r1, [pc, #148]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7e:	f7fc feb3 	bl	8001be8 <HAL_GetTick>
 8004e82:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e84:	e00a      	b.n	8004e9c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e86:	f7fc feaf 	bl	8001be8 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e0be      	b.n	800501a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d1eb      	bne.n	8004e86 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d010      	beq.n	8004edc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	4b14      	ldr	r3, [pc, #80]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d208      	bcs.n	8004edc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eca:	4b11      	ldr	r3, [pc, #68]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	f023 020f 	bic.w	r2, r3, #15
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	490e      	ldr	r1, [pc, #56]	@ (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004edc:	4b0b      	ldr	r3, [pc, #44]	@ (8004f0c <HAL_RCC_ClockConfig+0x240>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 030f 	and.w	r3, r3, #15
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d214      	bcs.n	8004f14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eea:	4b08      	ldr	r3, [pc, #32]	@ (8004f0c <HAL_RCC_ClockConfig+0x240>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 020f 	bic.w	r2, r3, #15
 8004ef2:	4906      	ldr	r1, [pc, #24]	@ (8004f0c <HAL_RCC_ClockConfig+0x240>)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efa:	4b04      	ldr	r3, [pc, #16]	@ (8004f0c <HAL_RCC_ClockConfig+0x240>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d005      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e086      	b.n	800501a <HAL_RCC_ClockConfig+0x34e>
 8004f0c:	52002000 	.word	0x52002000
 8004f10:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d010      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	4b3f      	ldr	r3, [pc, #252]	@ (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d208      	bcs.n	8004f42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f30:	4b3c      	ldr	r3, [pc, #240]	@ (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	4939      	ldr	r1, [pc, #228]	@ (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d010      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	695a      	ldr	r2, [r3, #20]
 8004f52:	4b34      	ldr	r3, [pc, #208]	@ (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d208      	bcs.n	8004f70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f5e:	4b31      	ldr	r3, [pc, #196]	@ (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	492e      	ldr	r1, [pc, #184]	@ (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d010      	beq.n	8004f9e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699a      	ldr	r2, [r3, #24]
 8004f80:	4b28      	ldr	r3, [pc, #160]	@ (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d208      	bcs.n	8004f9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f8c:	4b25      	ldr	r3, [pc, #148]	@ (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	4922      	ldr	r1, [pc, #136]	@ (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d010      	beq.n	8004fcc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69da      	ldr	r2, [r3, #28]
 8004fae:	4b1d      	ldr	r3, [pc, #116]	@ (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d208      	bcs.n	8004fcc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fba:	4b1a      	ldr	r3, [pc, #104]	@ (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	4917      	ldr	r1, [pc, #92]	@ (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004fcc:	f000 f834 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	4b14      	ldr	r3, [pc, #80]	@ (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	0a1b      	lsrs	r3, r3, #8
 8004fd8:	f003 030f 	and.w	r3, r3, #15
 8004fdc:	4912      	ldr	r1, [pc, #72]	@ (8005028 <HAL_RCC_ClockConfig+0x35c>)
 8004fde:	5ccb      	ldrb	r3, [r1, r3]
 8004fe0:	f003 031f 	and.w	r3, r3, #31
 8004fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fea:	4b0e      	ldr	r3, [pc, #56]	@ (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	4a0d      	ldr	r2, [pc, #52]	@ (8005028 <HAL_RCC_ClockConfig+0x35c>)
 8004ff4:	5cd3      	ldrb	r3, [r2, r3]
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8005000:	4a0a      	ldr	r2, [pc, #40]	@ (800502c <HAL_RCC_ClockConfig+0x360>)
 8005002:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005004:	4a0a      	ldr	r2, [pc, #40]	@ (8005030 <HAL_RCC_ClockConfig+0x364>)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800500a:	4b0a      	ldr	r3, [pc, #40]	@ (8005034 <HAL_RCC_ClockConfig+0x368>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f7fc fda0 	bl	8001b54 <HAL_InitTick>
 8005014:	4603      	mov	r3, r0
 8005016:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005018:	7bfb      	ldrb	r3, [r7, #15]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	58024400 	.word	0x58024400
 8005028:	080095c0 	.word	0x080095c0
 800502c:	24000004 	.word	0x24000004
 8005030:	24000000 	.word	0x24000000
 8005034:	24000008 	.word	0x24000008

08005038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005038:	b480      	push	{r7}
 800503a:	b089      	sub	sp, #36	@ 0x24
 800503c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800503e:	4bb3      	ldr	r3, [pc, #716]	@ (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005046:	2b18      	cmp	r3, #24
 8005048:	f200 8155 	bhi.w	80052f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800504c:	a201      	add	r2, pc, #4	@ (adr r2, 8005054 <HAL_RCC_GetSysClockFreq+0x1c>)
 800504e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005052:	bf00      	nop
 8005054:	080050b9 	.word	0x080050b9
 8005058:	080052f7 	.word	0x080052f7
 800505c:	080052f7 	.word	0x080052f7
 8005060:	080052f7 	.word	0x080052f7
 8005064:	080052f7 	.word	0x080052f7
 8005068:	080052f7 	.word	0x080052f7
 800506c:	080052f7 	.word	0x080052f7
 8005070:	080052f7 	.word	0x080052f7
 8005074:	080050df 	.word	0x080050df
 8005078:	080052f7 	.word	0x080052f7
 800507c:	080052f7 	.word	0x080052f7
 8005080:	080052f7 	.word	0x080052f7
 8005084:	080052f7 	.word	0x080052f7
 8005088:	080052f7 	.word	0x080052f7
 800508c:	080052f7 	.word	0x080052f7
 8005090:	080052f7 	.word	0x080052f7
 8005094:	080050e5 	.word	0x080050e5
 8005098:	080052f7 	.word	0x080052f7
 800509c:	080052f7 	.word	0x080052f7
 80050a0:	080052f7 	.word	0x080052f7
 80050a4:	080052f7 	.word	0x080052f7
 80050a8:	080052f7 	.word	0x080052f7
 80050ac:	080052f7 	.word	0x080052f7
 80050b0:	080052f7 	.word	0x080052f7
 80050b4:	080050eb 	.word	0x080050eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050b8:	4b94      	ldr	r3, [pc, #592]	@ (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d009      	beq.n	80050d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050c4:	4b91      	ldr	r3, [pc, #580]	@ (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	08db      	lsrs	r3, r3, #3
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	4a90      	ldr	r2, [pc, #576]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050d0:	fa22 f303 	lsr.w	r3, r2, r3
 80050d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80050d6:	e111      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80050d8:	4b8d      	ldr	r3, [pc, #564]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050da:	61bb      	str	r3, [r7, #24]
      break;
 80050dc:	e10e      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80050de:	4b8d      	ldr	r3, [pc, #564]	@ (8005314 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050e0:	61bb      	str	r3, [r7, #24]
      break;
 80050e2:	e10b      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80050e4:	4b8c      	ldr	r3, [pc, #560]	@ (8005318 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80050e6:	61bb      	str	r3, [r7, #24]
      break;
 80050e8:	e108      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050ea:	4b88      	ldr	r3, [pc, #544]	@ (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80050f4:	4b85      	ldr	r3, [pc, #532]	@ (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f8:	091b      	lsrs	r3, r3, #4
 80050fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005100:	4b82      	ldr	r3, [pc, #520]	@ (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800510a:	4b80      	ldr	r3, [pc, #512]	@ (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800510c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800510e:	08db      	lsrs	r3, r3, #3
 8005110:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	fb02 f303 	mul.w	r3, r2, r3
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005122:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 80e1 	beq.w	80052f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b02      	cmp	r3, #2
 8005132:	f000 8083 	beq.w	800523c <HAL_RCC_GetSysClockFreq+0x204>
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2b02      	cmp	r3, #2
 800513a:	f200 80a1 	bhi.w	8005280 <HAL_RCC_GetSysClockFreq+0x248>
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <HAL_RCC_GetSysClockFreq+0x114>
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d056      	beq.n	80051f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800514a:	e099      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800514c:	4b6f      	ldr	r3, [pc, #444]	@ (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b00      	cmp	r3, #0
 8005156:	d02d      	beq.n	80051b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005158:	4b6c      	ldr	r3, [pc, #432]	@ (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	08db      	lsrs	r3, r3, #3
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	4a6b      	ldr	r2, [pc, #428]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005164:	fa22 f303 	lsr.w	r3, r2, r3
 8005168:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	ee07 3a90 	vmov	s15, r3
 8005170:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800517e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005182:	4b62      	ldr	r3, [pc, #392]	@ (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518a:	ee07 3a90 	vmov	s15, r3
 800518e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005192:	ed97 6a02 	vldr	s12, [r7, #8]
 8005196:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800531c <HAL_RCC_GetSysClockFreq+0x2e4>
 800519a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800519e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80051b2:	e087      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	ee07 3a90 	vmov	s15, r3
 80051ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051be:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005320 <HAL_RCC_GetSysClockFreq+0x2e8>
 80051c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051c6:	4b51      	ldr	r3, [pc, #324]	@ (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80051da:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800531c <HAL_RCC_GetSysClockFreq+0x2e4>
 80051de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051f6:	e065      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005202:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005324 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800520a:	4b40      	ldr	r3, [pc, #256]	@ (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800520c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800521a:	ed97 6a02 	vldr	s12, [r7, #8]
 800521e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800531c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800522a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800522e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005236:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800523a:	e043      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005246:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005328 <HAL_RCC_GetSysClockFreq+0x2f0>
 800524a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800524e:	4b2f      	ldr	r3, [pc, #188]	@ (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005256:	ee07 3a90 	vmov	s15, r3
 800525a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800525e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005262:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800531c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800526a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800526e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800527a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800527e:	e021      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005324 <HAL_RCC_GetSysClockFreq+0x2ec>
 800528e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005292:	4b1e      	ldr	r3, [pc, #120]	@ (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80052a6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800531c <HAL_RCC_GetSysClockFreq+0x2e4>
 80052aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80052c4:	4b11      	ldr	r3, [pc, #68]	@ (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c8:	0a5b      	lsrs	r3, r3, #9
 80052ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052ce:	3301      	adds	r3, #1
 80052d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	ee07 3a90 	vmov	s15, r3
 80052d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80052e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052e8:	ee17 3a90 	vmov	r3, s15
 80052ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80052ee:	e005      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	61bb      	str	r3, [r7, #24]
      break;
 80052f4:	e002      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80052f6:	4b07      	ldr	r3, [pc, #28]	@ (8005314 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052f8:	61bb      	str	r3, [r7, #24]
      break;
 80052fa:	bf00      	nop
  }

  return sysclockfreq;
 80052fc:	69bb      	ldr	r3, [r7, #24]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3724      	adds	r7, #36	@ 0x24
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	58024400 	.word	0x58024400
 8005310:	03d09000 	.word	0x03d09000
 8005314:	003d0900 	.word	0x003d0900
 8005318:	007a1200 	.word	0x007a1200
 800531c:	46000000 	.word	0x46000000
 8005320:	4c742400 	.word	0x4c742400
 8005324:	4a742400 	.word	0x4a742400
 8005328:	4af42400 	.word	0x4af42400

0800532c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005332:	f7ff fe81 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8005336:	4602      	mov	r2, r0
 8005338:	4b10      	ldr	r3, [pc, #64]	@ (800537c <HAL_RCC_GetHCLKFreq+0x50>)
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	0a1b      	lsrs	r3, r3, #8
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	490f      	ldr	r1, [pc, #60]	@ (8005380 <HAL_RCC_GetHCLKFreq+0x54>)
 8005344:	5ccb      	ldrb	r3, [r1, r3]
 8005346:	f003 031f 	and.w	r3, r3, #31
 800534a:	fa22 f303 	lsr.w	r3, r2, r3
 800534e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005350:	4b0a      	ldr	r3, [pc, #40]	@ (800537c <HAL_RCC_GetHCLKFreq+0x50>)
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	4a09      	ldr	r2, [pc, #36]	@ (8005380 <HAL_RCC_GetHCLKFreq+0x54>)
 800535a:	5cd3      	ldrb	r3, [r2, r3]
 800535c:	f003 031f 	and.w	r3, r3, #31
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	fa22 f303 	lsr.w	r3, r2, r3
 8005366:	4a07      	ldr	r2, [pc, #28]	@ (8005384 <HAL_RCC_GetHCLKFreq+0x58>)
 8005368:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800536a:	4a07      	ldr	r2, [pc, #28]	@ (8005388 <HAL_RCC_GetHCLKFreq+0x5c>)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005370:	4b04      	ldr	r3, [pc, #16]	@ (8005384 <HAL_RCC_GetHCLKFreq+0x58>)
 8005372:	681b      	ldr	r3, [r3, #0]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	58024400 	.word	0x58024400
 8005380:	080095c0 	.word	0x080095c0
 8005384:	24000004 	.word	0x24000004
 8005388:	24000000 	.word	0x24000000

0800538c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005390:	f7ff ffcc 	bl	800532c <HAL_RCC_GetHCLKFreq>
 8005394:	4602      	mov	r2, r0
 8005396:	4b06      	ldr	r3, [pc, #24]	@ (80053b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	091b      	lsrs	r3, r3, #4
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	4904      	ldr	r1, [pc, #16]	@ (80053b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053a2:	5ccb      	ldrb	r3, [r1, r3]
 80053a4:	f003 031f 	and.w	r3, r3, #31
 80053a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	58024400 	.word	0x58024400
 80053b4:	080095c0 	.word	0x080095c0

080053b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80053bc:	f7ff ffb6 	bl	800532c <HAL_RCC_GetHCLKFreq>
 80053c0:	4602      	mov	r2, r0
 80053c2:	4b06      	ldr	r3, [pc, #24]	@ (80053dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	0a1b      	lsrs	r3, r3, #8
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	4904      	ldr	r1, [pc, #16]	@ (80053e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053ce:	5ccb      	ldrb	r3, [r1, r3]
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80053d8:	4618      	mov	r0, r3
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	58024400 	.word	0x58024400
 80053e0:	080095c0 	.word	0x080095c0

080053e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053e8:	b0ca      	sub	sp, #296	@ 0x128
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053f0:	2300      	movs	r3, #0
 80053f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053f6:	2300      	movs	r3, #0
 80053f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005404:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005408:	2500      	movs	r5, #0
 800540a:	ea54 0305 	orrs.w	r3, r4, r5
 800540e:	d049      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005414:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005416:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800541a:	d02f      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800541c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005420:	d828      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005422:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005426:	d01a      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005428:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800542c:	d822      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005432:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005436:	d007      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005438:	e01c      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800543a:	4bb8      	ldr	r3, [pc, #736]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800543c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543e:	4ab7      	ldr	r2, [pc, #732]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005444:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005446:	e01a      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800544c:	3308      	adds	r3, #8
 800544e:	2102      	movs	r1, #2
 8005450:	4618      	mov	r0, r3
 8005452:	f002 fb61 	bl	8007b18 <RCCEx_PLL2_Config>
 8005456:	4603      	mov	r3, r0
 8005458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800545c:	e00f      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800545e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005462:	3328      	adds	r3, #40	@ 0x28
 8005464:	2102      	movs	r1, #2
 8005466:	4618      	mov	r0, r3
 8005468:	f002 fc08 	bl	8007c7c <RCCEx_PLL3_Config>
 800546c:	4603      	mov	r3, r0
 800546e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005472:	e004      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800547a:	e000      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800547c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800547e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10a      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005486:	4ba5      	ldr	r3, [pc, #660]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800548a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800548e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005492:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005494:	4aa1      	ldr	r2, [pc, #644]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005496:	430b      	orrs	r3, r1
 8005498:	6513      	str	r3, [r2, #80]	@ 0x50
 800549a:	e003      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800549c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80054b0:	f04f 0900 	mov.w	r9, #0
 80054b4:	ea58 0309 	orrs.w	r3, r8, r9
 80054b8:	d047      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80054ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d82a      	bhi.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80054c4:	a201      	add	r2, pc, #4	@ (adr r2, 80054cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80054c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ca:	bf00      	nop
 80054cc:	080054e1 	.word	0x080054e1
 80054d0:	080054ef 	.word	0x080054ef
 80054d4:	08005505 	.word	0x08005505
 80054d8:	08005523 	.word	0x08005523
 80054dc:	08005523 	.word	0x08005523
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054e0:	4b8e      	ldr	r3, [pc, #568]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e4:	4a8d      	ldr	r2, [pc, #564]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054ec:	e01a      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f2:	3308      	adds	r3, #8
 80054f4:	2100      	movs	r1, #0
 80054f6:	4618      	mov	r0, r3
 80054f8:	f002 fb0e 	bl	8007b18 <RCCEx_PLL2_Config>
 80054fc:	4603      	mov	r3, r0
 80054fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005502:	e00f      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005508:	3328      	adds	r3, #40	@ 0x28
 800550a:	2100      	movs	r1, #0
 800550c:	4618      	mov	r0, r3
 800550e:	f002 fbb5 	bl	8007c7c <RCCEx_PLL3_Config>
 8005512:	4603      	mov	r3, r0
 8005514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005518:	e004      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005520:	e000      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10a      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800552c:	4b7b      	ldr	r3, [pc, #492]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800552e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005530:	f023 0107 	bic.w	r1, r3, #7
 8005534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800553a:	4a78      	ldr	r2, [pc, #480]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800553c:	430b      	orrs	r3, r1
 800553e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005540:	e003      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005546:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800554a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800554e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005552:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005556:	f04f 0b00 	mov.w	fp, #0
 800555a:	ea5a 030b 	orrs.w	r3, sl, fp
 800555e:	d04c      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800556a:	d030      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800556c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005570:	d829      	bhi.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005572:	2bc0      	cmp	r3, #192	@ 0xc0
 8005574:	d02d      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005576:	2bc0      	cmp	r3, #192	@ 0xc0
 8005578:	d825      	bhi.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800557a:	2b80      	cmp	r3, #128	@ 0x80
 800557c:	d018      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800557e:	2b80      	cmp	r3, #128	@ 0x80
 8005580:	d821      	bhi.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005586:	2b40      	cmp	r3, #64	@ 0x40
 8005588:	d007      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800558a:	e01c      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800558c:	4b63      	ldr	r3, [pc, #396]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800558e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005590:	4a62      	ldr	r2, [pc, #392]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005592:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005596:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005598:	e01c      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800559a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800559e:	3308      	adds	r3, #8
 80055a0:	2100      	movs	r1, #0
 80055a2:	4618      	mov	r0, r3
 80055a4:	f002 fab8 	bl	8007b18 <RCCEx_PLL2_Config>
 80055a8:	4603      	mov	r3, r0
 80055aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80055ae:	e011      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b4:	3328      	adds	r3, #40	@ 0x28
 80055b6:	2100      	movs	r1, #0
 80055b8:	4618      	mov	r0, r3
 80055ba:	f002 fb5f 	bl	8007c7c <RCCEx_PLL3_Config>
 80055be:	4603      	mov	r3, r0
 80055c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80055c4:	e006      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055cc:	e002      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80055ce:	bf00      	nop
 80055d0:	e000      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80055d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80055dc:	4b4f      	ldr	r3, [pc, #316]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055e0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80055e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ea:	4a4c      	ldr	r2, [pc, #304]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055ec:	430b      	orrs	r3, r1
 80055ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80055f0:	e003      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80055fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005602:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005606:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800560a:	2300      	movs	r3, #0
 800560c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005610:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005614:	460b      	mov	r3, r1
 8005616:	4313      	orrs	r3, r2
 8005618:	d053      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800561a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800561e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005622:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005626:	d035      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005628:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800562c:	d82e      	bhi.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800562e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005632:	d031      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005634:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005638:	d828      	bhi.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800563a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800563e:	d01a      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005640:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005644:	d822      	bhi.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800564a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800564e:	d007      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005650:	e01c      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005652:	4b32      	ldr	r3, [pc, #200]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005656:	4a31      	ldr	r2, [pc, #196]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800565c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800565e:	e01c      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005664:	3308      	adds	r3, #8
 8005666:	2100      	movs	r1, #0
 8005668:	4618      	mov	r0, r3
 800566a:	f002 fa55 	bl	8007b18 <RCCEx_PLL2_Config>
 800566e:	4603      	mov	r3, r0
 8005670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005674:	e011      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800567a:	3328      	adds	r3, #40	@ 0x28
 800567c:	2100      	movs	r1, #0
 800567e:	4618      	mov	r0, r3
 8005680:	f002 fafc 	bl	8007c7c <RCCEx_PLL3_Config>
 8005684:	4603      	mov	r3, r0
 8005686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800568a:	e006      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005692:	e002      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005694:	bf00      	nop
 8005696:	e000      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800569a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10b      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80056a2:	4b1e      	ldr	r3, [pc, #120]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056a6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80056aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80056b2:	4a1a      	ldr	r2, [pc, #104]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056b4:	430b      	orrs	r3, r1
 80056b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80056b8:	e003      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80056c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ca:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80056ce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80056d2:	2300      	movs	r3, #0
 80056d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80056d8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80056dc:	460b      	mov	r3, r1
 80056de:	4313      	orrs	r3, r2
 80056e0:	d056      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80056e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056ee:	d038      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80056f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056f4:	d831      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80056f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80056fa:	d034      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80056fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005700:	d82b      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005702:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005706:	d01d      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005708:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800570c:	d825      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800570e:	2b00      	cmp	r3, #0
 8005710:	d006      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005712:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005716:	d00a      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005718:	e01f      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800571a:	bf00      	nop
 800571c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005720:	4ba2      	ldr	r3, [pc, #648]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005724:	4aa1      	ldr	r2, [pc, #644]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800572a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800572c:	e01c      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800572e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005732:	3308      	adds	r3, #8
 8005734:	2100      	movs	r1, #0
 8005736:	4618      	mov	r0, r3
 8005738:	f002 f9ee 	bl	8007b18 <RCCEx_PLL2_Config>
 800573c:	4603      	mov	r3, r0
 800573e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005742:	e011      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005748:	3328      	adds	r3, #40	@ 0x28
 800574a:	2100      	movs	r1, #0
 800574c:	4618      	mov	r0, r3
 800574e:	f002 fa95 	bl	8007c7c <RCCEx_PLL3_Config>
 8005752:	4603      	mov	r3, r0
 8005754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005758:	e006      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005760:	e002      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005762:	bf00      	nop
 8005764:	e000      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10b      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005770:	4b8e      	ldr	r3, [pc, #568]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005774:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005780:	4a8a      	ldr	r2, [pc, #552]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005782:	430b      	orrs	r3, r1
 8005784:	6593      	str	r3, [r2, #88]	@ 0x58
 8005786:	e003      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005788:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800578c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005798:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800579c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80057a0:	2300      	movs	r3, #0
 80057a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80057a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80057aa:	460b      	mov	r3, r1
 80057ac:	4313      	orrs	r3, r2
 80057ae:	d03a      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80057b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057b6:	2b30      	cmp	r3, #48	@ 0x30
 80057b8:	d01f      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x416>
 80057ba:	2b30      	cmp	r3, #48	@ 0x30
 80057bc:	d819      	bhi.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80057be:	2b20      	cmp	r3, #32
 80057c0:	d00c      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d815      	bhi.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d019      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80057ca:	2b10      	cmp	r3, #16
 80057cc:	d111      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057ce:	4b77      	ldr	r3, [pc, #476]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d2:	4a76      	ldr	r2, [pc, #472]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80057da:	e011      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e0:	3308      	adds	r3, #8
 80057e2:	2102      	movs	r1, #2
 80057e4:	4618      	mov	r0, r3
 80057e6:	f002 f997 	bl	8007b18 <RCCEx_PLL2_Config>
 80057ea:	4603      	mov	r3, r0
 80057ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80057f0:	e006      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057f8:	e002      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80057fa:	bf00      	nop
 80057fc:	e000      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80057fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005800:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10a      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005808:	4b68      	ldr	r3, [pc, #416]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800580a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800580c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005816:	4a65      	ldr	r2, [pc, #404]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005818:	430b      	orrs	r3, r1
 800581a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800581c:	e003      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800581e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005822:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005832:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005836:	2300      	movs	r3, #0
 8005838:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800583c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005840:	460b      	mov	r3, r1
 8005842:	4313      	orrs	r3, r2
 8005844:	d051      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800584a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800584c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005850:	d035      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005852:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005856:	d82e      	bhi.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005858:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800585c:	d031      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800585e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005862:	d828      	bhi.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005868:	d01a      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800586a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800586e:	d822      	bhi.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005878:	d007      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800587a:	e01c      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800587c:	4b4b      	ldr	r3, [pc, #300]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800587e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005880:	4a4a      	ldr	r2, [pc, #296]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005886:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005888:	e01c      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800588a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588e:	3308      	adds	r3, #8
 8005890:	2100      	movs	r1, #0
 8005892:	4618      	mov	r0, r3
 8005894:	f002 f940 	bl	8007b18 <RCCEx_PLL2_Config>
 8005898:	4603      	mov	r3, r0
 800589a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800589e:	e011      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a4:	3328      	adds	r3, #40	@ 0x28
 80058a6:	2100      	movs	r1, #0
 80058a8:	4618      	mov	r0, r3
 80058aa:	f002 f9e7 	bl	8007c7c <RCCEx_PLL3_Config>
 80058ae:	4603      	mov	r3, r0
 80058b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058b4:	e006      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058bc:	e002      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80058be:	bf00      	nop
 80058c0:	e000      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80058c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10a      	bne.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80058cc:	4b37      	ldr	r3, [pc, #220]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80058d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058da:	4a34      	ldr	r2, [pc, #208]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058dc:	430b      	orrs	r3, r1
 80058de:	6513      	str	r3, [r2, #80]	@ 0x50
 80058e0:	e003      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80058ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80058f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058fa:	2300      	movs	r3, #0
 80058fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005900:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005904:	460b      	mov	r3, r1
 8005906:	4313      	orrs	r3, r2
 8005908:	d056      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800590a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005910:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005914:	d033      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005916:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800591a:	d82c      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800591c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005920:	d02f      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005922:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005926:	d826      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005928:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800592c:	d02b      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800592e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005932:	d820      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005934:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005938:	d012      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800593a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800593e:	d81a      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005940:	2b00      	cmp	r3, #0
 8005942:	d022      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005948:	d115      	bne.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800594a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594e:	3308      	adds	r3, #8
 8005950:	2101      	movs	r1, #1
 8005952:	4618      	mov	r0, r3
 8005954:	f002 f8e0 	bl	8007b18 <RCCEx_PLL2_Config>
 8005958:	4603      	mov	r3, r0
 800595a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800595e:	e015      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005964:	3328      	adds	r3, #40	@ 0x28
 8005966:	2101      	movs	r1, #1
 8005968:	4618      	mov	r0, r3
 800596a:	f002 f987 	bl	8007c7c <RCCEx_PLL3_Config>
 800596e:	4603      	mov	r3, r0
 8005970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005974:	e00a      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800597c:	e006      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800597e:	bf00      	nop
 8005980:	e004      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005982:	bf00      	nop
 8005984:	e002      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005986:	bf00      	nop
 8005988:	e000      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800598a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10d      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005994:	4b05      	ldr	r3, [pc, #20]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005998:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800599c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059a2:	4a02      	ldr	r2, [pc, #8]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059a4:	430b      	orrs	r3, r1
 80059a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80059a8:	e006      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80059aa:	bf00      	nop
 80059ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80059b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80059c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059c8:	2300      	movs	r3, #0
 80059ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059ce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80059d2:	460b      	mov	r3, r1
 80059d4:	4313      	orrs	r3, r2
 80059d6:	d055      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80059d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80059e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059e4:	d033      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80059e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059ea:	d82c      	bhi.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80059ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059f0:	d02f      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80059f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059f6:	d826      	bhi.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80059f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059fc:	d02b      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80059fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a02:	d820      	bhi.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a08:	d012      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005a0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a0e:	d81a      	bhi.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d022      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005a14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a18:	d115      	bne.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1e:	3308      	adds	r3, #8
 8005a20:	2101      	movs	r1, #1
 8005a22:	4618      	mov	r0, r3
 8005a24:	f002 f878 	bl	8007b18 <RCCEx_PLL2_Config>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a2e:	e015      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a34:	3328      	adds	r3, #40	@ 0x28
 8005a36:	2101      	movs	r1, #1
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f002 f91f 	bl	8007c7c <RCCEx_PLL3_Config>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a44:	e00a      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a4c:	e006      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a4e:	bf00      	nop
 8005a50:	e004      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a52:	bf00      	nop
 8005a54:	e002      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a56:	bf00      	nop
 8005a58:	e000      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10b      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005a64:	4ba3      	ldr	r3, [pc, #652]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a68:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a74:	4a9f      	ldr	r2, [pc, #636]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a76:	430b      	orrs	r3, r1
 8005a78:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a7a:	e003      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005a90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a94:	2300      	movs	r3, #0
 8005a96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005a9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	d037      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aae:	d00e      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005ab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ab4:	d816      	bhi.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d018      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005aba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005abe:	d111      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ac0:	4b8c      	ldr	r3, [pc, #560]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac4:	4a8b      	ldr	r2, [pc, #556]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005acc:	e00f      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f002 f81e 	bl	8007b18 <RCCEx_PLL2_Config>
 8005adc:	4603      	mov	r3, r0
 8005ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ae2:	e004      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005aea:	e000      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10a      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005af6:	4b7f      	ldr	r3, [pc, #508]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005afa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b04:	4a7b      	ldr	r2, [pc, #492]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b06:	430b      	orrs	r3, r1
 8005b08:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b0a:	e003      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005b20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b24:	2300      	movs	r3, #0
 8005b26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005b2a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4313      	orrs	r3, r2
 8005b32:	d039      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b3a:	2b03      	cmp	r3, #3
 8005b3c:	d81c      	bhi.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b44 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b44:	08005b81 	.word	0x08005b81
 8005b48:	08005b55 	.word	0x08005b55
 8005b4c:	08005b63 	.word	0x08005b63
 8005b50:	08005b81 	.word	0x08005b81
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b54:	4b67      	ldr	r3, [pc, #412]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b58:	4a66      	ldr	r2, [pc, #408]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b60:	e00f      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b66:	3308      	adds	r3, #8
 8005b68:	2102      	movs	r1, #2
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f001 ffd4 	bl	8007b18 <RCCEx_PLL2_Config>
 8005b70:	4603      	mov	r3, r0
 8005b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b76:	e004      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b7e:	e000      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10a      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b8a:	4b5a      	ldr	r3, [pc, #360]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b8e:	f023 0103 	bic.w	r1, r3, #3
 8005b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b98:	4a56      	ldr	r2, [pc, #344]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b9a:	430b      	orrs	r3, r1
 8005b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b9e:	e003      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ba4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005bb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005bbe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	f000 809f 	beq.w	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bca:	4b4b      	ldr	r3, [pc, #300]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a4a      	ldr	r2, [pc, #296]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bd6:	f7fc f807 	bl	8001be8 <HAL_GetTick>
 8005bda:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bde:	e00b      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be0:	f7fc f802 	bl	8001be8 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b64      	cmp	r3, #100	@ 0x64
 8005bee:	d903      	bls.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bf6:	e005      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bf8:	4b3f      	ldr	r3, [pc, #252]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0ed      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005c04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d179      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c0c:	4b39      	ldr	r3, [pc, #228]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c0e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c18:	4053      	eors	r3, r2
 8005c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d015      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c22:	4b34      	ldr	r3, [pc, #208]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c2a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c2e:	4b31      	ldr	r3, [pc, #196]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c32:	4a30      	ldr	r2, [pc, #192]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c38:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c3a:	4b2e      	ldr	r3, [pc, #184]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c44:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005c46:	4a2b      	ldr	r2, [pc, #172]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c4c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c5a:	d118      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5c:	f7fb ffc4 	bl	8001be8 <HAL_GetTick>
 8005c60:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c64:	e00d      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c66:	f7fb ffbf 	bl	8001be8 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005c70:	1ad2      	subs	r2, r2, r3
 8005c72:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d903      	bls.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005c80:	e005      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c82:	4b1c      	ldr	r3, [pc, #112]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0eb      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d129      	bne.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ca2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ca6:	d10e      	bne.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005ca8:	4b12      	ldr	r3, [pc, #72]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cb8:	091a      	lsrs	r2, r3, #4
 8005cba:	4b10      	ldr	r3, [pc, #64]	@ (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cc0:	430b      	orrs	r3, r1
 8005cc2:	6113      	str	r3, [r2, #16]
 8005cc4:	e005      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	4a0a      	ldr	r2, [pc, #40]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ccc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005cd0:	6113      	str	r3, [r2, #16]
 8005cd2:	4b08      	ldr	r3, [pc, #32]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cd4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ce2:	4a04      	ldr	r2, [pc, #16]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ce4:	430b      	orrs	r3, r1
 8005ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ce8:	e00e      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005cf2:	e009      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005cf4:	58024400 	.word	0x58024400
 8005cf8:	58024800 	.word	0x58024800
 8005cfc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	f002 0301 	and.w	r3, r2, #1
 8005d14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d18:	2300      	movs	r3, #0
 8005d1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d1e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d22:	460b      	mov	r3, r1
 8005d24:	4313      	orrs	r3, r2
 8005d26:	f000 8089 	beq.w	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d30:	2b28      	cmp	r3, #40	@ 0x28
 8005d32:	d86b      	bhi.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005d34:	a201      	add	r2, pc, #4	@ (adr r2, 8005d3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3a:	bf00      	nop
 8005d3c:	08005e15 	.word	0x08005e15
 8005d40:	08005e0d 	.word	0x08005e0d
 8005d44:	08005e0d 	.word	0x08005e0d
 8005d48:	08005e0d 	.word	0x08005e0d
 8005d4c:	08005e0d 	.word	0x08005e0d
 8005d50:	08005e0d 	.word	0x08005e0d
 8005d54:	08005e0d 	.word	0x08005e0d
 8005d58:	08005e0d 	.word	0x08005e0d
 8005d5c:	08005de1 	.word	0x08005de1
 8005d60:	08005e0d 	.word	0x08005e0d
 8005d64:	08005e0d 	.word	0x08005e0d
 8005d68:	08005e0d 	.word	0x08005e0d
 8005d6c:	08005e0d 	.word	0x08005e0d
 8005d70:	08005e0d 	.word	0x08005e0d
 8005d74:	08005e0d 	.word	0x08005e0d
 8005d78:	08005e0d 	.word	0x08005e0d
 8005d7c:	08005df7 	.word	0x08005df7
 8005d80:	08005e0d 	.word	0x08005e0d
 8005d84:	08005e0d 	.word	0x08005e0d
 8005d88:	08005e0d 	.word	0x08005e0d
 8005d8c:	08005e0d 	.word	0x08005e0d
 8005d90:	08005e0d 	.word	0x08005e0d
 8005d94:	08005e0d 	.word	0x08005e0d
 8005d98:	08005e0d 	.word	0x08005e0d
 8005d9c:	08005e15 	.word	0x08005e15
 8005da0:	08005e0d 	.word	0x08005e0d
 8005da4:	08005e0d 	.word	0x08005e0d
 8005da8:	08005e0d 	.word	0x08005e0d
 8005dac:	08005e0d 	.word	0x08005e0d
 8005db0:	08005e0d 	.word	0x08005e0d
 8005db4:	08005e0d 	.word	0x08005e0d
 8005db8:	08005e0d 	.word	0x08005e0d
 8005dbc:	08005e15 	.word	0x08005e15
 8005dc0:	08005e0d 	.word	0x08005e0d
 8005dc4:	08005e0d 	.word	0x08005e0d
 8005dc8:	08005e0d 	.word	0x08005e0d
 8005dcc:	08005e0d 	.word	0x08005e0d
 8005dd0:	08005e0d 	.word	0x08005e0d
 8005dd4:	08005e0d 	.word	0x08005e0d
 8005dd8:	08005e0d 	.word	0x08005e0d
 8005ddc:	08005e15 	.word	0x08005e15
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de4:	3308      	adds	r3, #8
 8005de6:	2101      	movs	r1, #1
 8005de8:	4618      	mov	r0, r3
 8005dea:	f001 fe95 	bl	8007b18 <RCCEx_PLL2_Config>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005df4:	e00f      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfa:	3328      	adds	r3, #40	@ 0x28
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f001 ff3c 	bl	8007c7c <RCCEx_PLL3_Config>
 8005e04:	4603      	mov	r3, r0
 8005e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e0a:	e004      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e12:	e000      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10a      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005e1e:	4bbf      	ldr	r3, [pc, #764]	@ (800611c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e22:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e2c:	4abb      	ldr	r2, [pc, #748]	@ (800611c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e2e:	430b      	orrs	r3, r1
 8005e30:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e32:	e003      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e44:	f002 0302 	and.w	r3, r2, #2
 8005e48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005e52:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005e56:	460b      	mov	r3, r1
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	d041      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e62:	2b05      	cmp	r3, #5
 8005e64:	d824      	bhi.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005e66:	a201      	add	r2, pc, #4	@ (adr r2, 8005e6c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6c:	08005eb9 	.word	0x08005eb9
 8005e70:	08005e85 	.word	0x08005e85
 8005e74:	08005e9b 	.word	0x08005e9b
 8005e78:	08005eb9 	.word	0x08005eb9
 8005e7c:	08005eb9 	.word	0x08005eb9
 8005e80:	08005eb9 	.word	0x08005eb9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e88:	3308      	adds	r3, #8
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f001 fe43 	bl	8007b18 <RCCEx_PLL2_Config>
 8005e92:	4603      	mov	r3, r0
 8005e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e98:	e00f      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9e:	3328      	adds	r3, #40	@ 0x28
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f001 feea 	bl	8007c7c <RCCEx_PLL3_Config>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005eae:	e004      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005eb6:	e000      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10a      	bne.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005ec2:	4b96      	ldr	r3, [pc, #600]	@ (800611c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec6:	f023 0107 	bic.w	r1, r3, #7
 8005eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ece:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ed0:	4a92      	ldr	r2, [pc, #584]	@ (800611c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ed2:	430b      	orrs	r3, r1
 8005ed4:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ed6:	e003      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005edc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee8:	f002 0304 	and.w	r3, r2, #4
 8005eec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ef6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4313      	orrs	r3, r2
 8005efe:	d044      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f08:	2b05      	cmp	r3, #5
 8005f0a:	d825      	bhi.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f14 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f12:	bf00      	nop
 8005f14:	08005f61 	.word	0x08005f61
 8005f18:	08005f2d 	.word	0x08005f2d
 8005f1c:	08005f43 	.word	0x08005f43
 8005f20:	08005f61 	.word	0x08005f61
 8005f24:	08005f61 	.word	0x08005f61
 8005f28:	08005f61 	.word	0x08005f61
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f30:	3308      	adds	r3, #8
 8005f32:	2101      	movs	r1, #1
 8005f34:	4618      	mov	r0, r3
 8005f36:	f001 fdef 	bl	8007b18 <RCCEx_PLL2_Config>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f40:	e00f      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f46:	3328      	adds	r3, #40	@ 0x28
 8005f48:	2101      	movs	r1, #1
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f001 fe96 	bl	8007c7c <RCCEx_PLL3_Config>
 8005f50:	4603      	mov	r3, r0
 8005f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f56:	e004      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f5e:	e000      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10b      	bne.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f6a:	4b6c      	ldr	r3, [pc, #432]	@ (800611c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f6e:	f023 0107 	bic.w	r1, r3, #7
 8005f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f7a:	4a68      	ldr	r2, [pc, #416]	@ (800611c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f7c:	430b      	orrs	r3, r1
 8005f7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f80:	e003      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f92:	f002 0320 	and.w	r3, r2, #32
 8005f96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005fa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	d055      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fb6:	d033      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fbc:	d82c      	bhi.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fc2:	d02f      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fc8:	d826      	bhi.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fce:	d02b      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005fd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fd4:	d820      	bhi.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fda:	d012      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005fdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fe0:	d81a      	bhi.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d022      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005fe6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fea:	d115      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff0:	3308      	adds	r3, #8
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f001 fd8f 	bl	8007b18 <RCCEx_PLL2_Config>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006000:	e015      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006006:	3328      	adds	r3, #40	@ 0x28
 8006008:	2102      	movs	r1, #2
 800600a:	4618      	mov	r0, r3
 800600c:	f001 fe36 	bl	8007c7c <RCCEx_PLL3_Config>
 8006010:	4603      	mov	r3, r0
 8006012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006016:	e00a      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800601e:	e006      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006020:	bf00      	nop
 8006022:	e004      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006024:	bf00      	nop
 8006026:	e002      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006028:	bf00      	nop
 800602a:	e000      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800602c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800602e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10b      	bne.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006036:	4b39      	ldr	r3, [pc, #228]	@ (800611c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800603e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006046:	4a35      	ldr	r2, [pc, #212]	@ (800611c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006048:	430b      	orrs	r3, r1
 800604a:	6553      	str	r3, [r2, #84]	@ 0x54
 800604c:	e003      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800604e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006052:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006062:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006066:	2300      	movs	r3, #0
 8006068:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800606c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006070:	460b      	mov	r3, r1
 8006072:	4313      	orrs	r3, r2
 8006074:	d058      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800607e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006082:	d033      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006084:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006088:	d82c      	bhi.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800608a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800608e:	d02f      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006090:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006094:	d826      	bhi.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006096:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800609a:	d02b      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800609c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060a0:	d820      	bhi.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060a6:	d012      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80060a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060ac:	d81a      	bhi.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d022      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80060b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060b6:	d115      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060bc:	3308      	adds	r3, #8
 80060be:	2100      	movs	r1, #0
 80060c0:	4618      	mov	r0, r3
 80060c2:	f001 fd29 	bl	8007b18 <RCCEx_PLL2_Config>
 80060c6:	4603      	mov	r3, r0
 80060c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80060cc:	e015      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d2:	3328      	adds	r3, #40	@ 0x28
 80060d4:	2102      	movs	r1, #2
 80060d6:	4618      	mov	r0, r3
 80060d8:	f001 fdd0 	bl	8007c7c <RCCEx_PLL3_Config>
 80060dc:	4603      	mov	r3, r0
 80060de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80060e2:	e00a      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060ea:	e006      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060ec:	bf00      	nop
 80060ee:	e004      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060f0:	bf00      	nop
 80060f2:	e002      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060f4:	bf00      	nop
 80060f6:	e000      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10e      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006102:	4b06      	ldr	r3, [pc, #24]	@ (800611c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006106:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800610a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006112:	4a02      	ldr	r2, [pc, #8]	@ (800611c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006114:	430b      	orrs	r3, r1
 8006116:	6593      	str	r3, [r2, #88]	@ 0x58
 8006118:	e006      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800611a:	bf00      	nop
 800611c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006120:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006124:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006130:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006134:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006138:	2300      	movs	r3, #0
 800613a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800613e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006142:	460b      	mov	r3, r1
 8006144:	4313      	orrs	r3, r2
 8006146:	d055      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006150:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006154:	d033      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006156:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800615a:	d82c      	bhi.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800615c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006160:	d02f      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006162:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006166:	d826      	bhi.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006168:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800616c:	d02b      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800616e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006172:	d820      	bhi.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006174:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006178:	d012      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800617a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800617e:	d81a      	bhi.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006180:	2b00      	cmp	r3, #0
 8006182:	d022      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006184:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006188:	d115      	bne.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800618a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618e:	3308      	adds	r3, #8
 8006190:	2100      	movs	r1, #0
 8006192:	4618      	mov	r0, r3
 8006194:	f001 fcc0 	bl	8007b18 <RCCEx_PLL2_Config>
 8006198:	4603      	mov	r3, r0
 800619a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800619e:	e015      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a4:	3328      	adds	r3, #40	@ 0x28
 80061a6:	2102      	movs	r1, #2
 80061a8:	4618      	mov	r0, r3
 80061aa:	f001 fd67 	bl	8007c7c <RCCEx_PLL3_Config>
 80061ae:	4603      	mov	r3, r0
 80061b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80061b4:	e00a      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061bc:	e006      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061be:	bf00      	nop
 80061c0:	e004      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061c2:	bf00      	nop
 80061c4:	e002      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061c6:	bf00      	nop
 80061c8:	e000      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10b      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80061d4:	4ba1      	ldr	r3, [pc, #644]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80061dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80061e4:	4a9d      	ldr	r2, [pc, #628]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061e6:	430b      	orrs	r3, r1
 80061e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80061ea:	e003      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80061f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fc:	f002 0308 	and.w	r3, r2, #8
 8006200:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006204:	2300      	movs	r3, #0
 8006206:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800620a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800620e:	460b      	mov	r3, r1
 8006210:	4313      	orrs	r3, r2
 8006212:	d01e      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006218:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800621c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006220:	d10c      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006226:	3328      	adds	r3, #40	@ 0x28
 8006228:	2102      	movs	r1, #2
 800622a:	4618      	mov	r0, r3
 800622c:	f001 fd26 	bl	8007c7c <RCCEx_PLL3_Config>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800623c:	4b87      	ldr	r3, [pc, #540]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800623e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006240:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006248:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800624c:	4a83      	ldr	r2, [pc, #524]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800624e:	430b      	orrs	r3, r1
 8006250:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625a:	f002 0310 	and.w	r3, r2, #16
 800625e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006262:	2300      	movs	r3, #0
 8006264:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006268:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800626c:	460b      	mov	r3, r1
 800626e:	4313      	orrs	r3, r2
 8006270:	d01e      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006276:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800627a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800627e:	d10c      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006284:	3328      	adds	r3, #40	@ 0x28
 8006286:	2102      	movs	r1, #2
 8006288:	4618      	mov	r0, r3
 800628a:	f001 fcf7 	bl	8007c7c <RCCEx_PLL3_Config>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800629a:	4b70      	ldr	r3, [pc, #448]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800629c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800629e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80062a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062aa:	4a6c      	ldr	r2, [pc, #432]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062ac:	430b      	orrs	r3, r1
 80062ae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80062bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80062c0:	2300      	movs	r3, #0
 80062c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80062ca:	460b      	mov	r3, r1
 80062cc:	4313      	orrs	r3, r2
 80062ce:	d03e      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80062d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80062d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062dc:	d022      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80062de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062e2:	d81b      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80062e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062ec:	d00b      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80062ee:	e015      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f4:	3308      	adds	r3, #8
 80062f6:	2100      	movs	r1, #0
 80062f8:	4618      	mov	r0, r3
 80062fa:	f001 fc0d 	bl	8007b18 <RCCEx_PLL2_Config>
 80062fe:	4603      	mov	r3, r0
 8006300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006304:	e00f      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630a:	3328      	adds	r3, #40	@ 0x28
 800630c:	2102      	movs	r1, #2
 800630e:	4618      	mov	r0, r3
 8006310:	f001 fcb4 	bl	8007c7c <RCCEx_PLL3_Config>
 8006314:	4603      	mov	r3, r0
 8006316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800631a:	e004      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006322:	e000      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10b      	bne.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800632e:	4b4b      	ldr	r3, [pc, #300]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006332:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800633e:	4a47      	ldr	r2, [pc, #284]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006340:	430b      	orrs	r3, r1
 8006342:	6593      	str	r3, [r2, #88]	@ 0x58
 8006344:	e003      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800634a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800634e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006356:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800635a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800635c:	2300      	movs	r3, #0
 800635e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006360:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006364:	460b      	mov	r3, r1
 8006366:	4313      	orrs	r3, r2
 8006368:	d03b      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800636a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800636e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006372:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006376:	d01f      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006378:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800637c:	d818      	bhi.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800637e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006382:	d003      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006384:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006388:	d007      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800638a:	e011      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800638c:	4b33      	ldr	r3, [pc, #204]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800638e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006390:	4a32      	ldr	r2, [pc, #200]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006396:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006398:	e00f      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800639a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800639e:	3328      	adds	r3, #40	@ 0x28
 80063a0:	2101      	movs	r1, #1
 80063a2:	4618      	mov	r0, r3
 80063a4:	f001 fc6a 	bl	8007c7c <RCCEx_PLL3_Config>
 80063a8:	4603      	mov	r3, r0
 80063aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80063ae:	e004      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063b6:	e000      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80063b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10b      	bne.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063c2:	4b26      	ldr	r3, [pc, #152]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80063ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d2:	4a22      	ldr	r2, [pc, #136]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063d4:	430b      	orrs	r3, r1
 80063d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80063d8:	e003      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80063e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80063ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80063f0:	2300      	movs	r3, #0
 80063f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80063f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80063f8:	460b      	mov	r3, r1
 80063fa:	4313      	orrs	r3, r2
 80063fc:	d034      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800640c:	d007      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800640e:	e011      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006410:	4b12      	ldr	r3, [pc, #72]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006414:	4a11      	ldr	r2, [pc, #68]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800641a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800641c:	e00e      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800641e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006422:	3308      	adds	r3, #8
 8006424:	2102      	movs	r1, #2
 8006426:	4618      	mov	r0, r3
 8006428:	f001 fb76 	bl	8007b18 <RCCEx_PLL2_Config>
 800642c:	4603      	mov	r3, r0
 800642e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006432:	e003      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800643a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800643c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10d      	bne.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006444:	4b05      	ldr	r3, [pc, #20]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006448:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800644c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006452:	4a02      	ldr	r2, [pc, #8]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006454:	430b      	orrs	r3, r1
 8006456:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006458:	e006      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800645a:	bf00      	nop
 800645c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006460:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006464:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800646c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006470:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006474:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006476:	2300      	movs	r3, #0
 8006478:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800647a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800647e:	460b      	mov	r3, r1
 8006480:	4313      	orrs	r3, r2
 8006482:	d00c      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006488:	3328      	adds	r3, #40	@ 0x28
 800648a:	2102      	movs	r1, #2
 800648c:	4618      	mov	r0, r3
 800648e:	f001 fbf5 	bl	8007c7c <RCCEx_PLL3_Config>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800649e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80064aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80064ac:	2300      	movs	r3, #0
 80064ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80064b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80064b4:	460b      	mov	r3, r1
 80064b6:	4313      	orrs	r3, r2
 80064b8:	d038      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80064ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064c6:	d018      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80064c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064cc:	d811      	bhi.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80064ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064d2:	d014      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80064d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064d8:	d80b      	bhi.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d011      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80064de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064e2:	d106      	bne.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064e4:	4bc3      	ldr	r3, [pc, #780]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e8:	4ac2      	ldr	r2, [pc, #776]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80064f0:	e008      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064f8:	e004      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80064fa:	bf00      	nop
 80064fc:	e002      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80064fe:	bf00      	nop
 8006500:	e000      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006502:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006504:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10b      	bne.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800650c:	4bb9      	ldr	r3, [pc, #740]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800650e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006510:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006518:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800651c:	4ab5      	ldr	r2, [pc, #724]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800651e:	430b      	orrs	r3, r1
 8006520:	6553      	str	r3, [r2, #84]	@ 0x54
 8006522:	e003      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006528:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800652c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006538:	65bb      	str	r3, [r7, #88]	@ 0x58
 800653a:	2300      	movs	r3, #0
 800653c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800653e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006542:	460b      	mov	r3, r1
 8006544:	4313      	orrs	r3, r2
 8006546:	d009      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006548:	4baa      	ldr	r3, [pc, #680]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800654a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800654c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006556:	4aa7      	ldr	r2, [pc, #668]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006558:	430b      	orrs	r3, r1
 800655a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800655c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006564:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006568:	653b      	str	r3, [r7, #80]	@ 0x50
 800656a:	2300      	movs	r3, #0
 800656c:	657b      	str	r3, [r7, #84]	@ 0x54
 800656e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006572:	460b      	mov	r3, r1
 8006574:	4313      	orrs	r3, r2
 8006576:	d00a      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006578:	4b9e      	ldr	r3, [pc, #632]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006584:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006588:	4a9a      	ldr	r2, [pc, #616]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800658a:	430b      	orrs	r3, r1
 800658c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800658e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800659a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800659c:	2300      	movs	r3, #0
 800659e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065a0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80065a4:	460b      	mov	r3, r1
 80065a6:	4313      	orrs	r3, r2
 80065a8:	d009      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065aa:	4b92      	ldr	r3, [pc, #584]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ae:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80065b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065b8:	4a8e      	ldr	r2, [pc, #568]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065ba:	430b      	orrs	r3, r1
 80065bc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80065be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80065ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80065cc:	2300      	movs	r3, #0
 80065ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80065d0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80065d4:	460b      	mov	r3, r1
 80065d6:	4313      	orrs	r3, r2
 80065d8:	d00e      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065da:	4b86      	ldr	r3, [pc, #536]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	4a85      	ldr	r2, [pc, #532]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80065e4:	6113      	str	r3, [r2, #16]
 80065e6:	4b83      	ldr	r3, [pc, #524]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065e8:	6919      	ldr	r1, [r3, #16]
 80065ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80065f2:	4a80      	ldr	r2, [pc, #512]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065f4:	430b      	orrs	r3, r1
 80065f6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80065f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006600:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006604:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006606:	2300      	movs	r3, #0
 8006608:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800660a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800660e:	460b      	mov	r3, r1
 8006610:	4313      	orrs	r3, r2
 8006612:	d009      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006614:	4b77      	ldr	r3, [pc, #476]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006618:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800661c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006622:	4a74      	ldr	r2, [pc, #464]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006624:	430b      	orrs	r3, r1
 8006626:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006634:	633b      	str	r3, [r7, #48]	@ 0x30
 8006636:	2300      	movs	r3, #0
 8006638:	637b      	str	r3, [r7, #52]	@ 0x34
 800663a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800663e:	460b      	mov	r3, r1
 8006640:	4313      	orrs	r3, r2
 8006642:	d00a      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006644:	4b6b      	ldr	r3, [pc, #428]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006648:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800664c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006650:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006654:	4a67      	ldr	r2, [pc, #412]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006656:	430b      	orrs	r3, r1
 8006658:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800665a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006662:	2100      	movs	r1, #0
 8006664:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800666c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006670:	460b      	mov	r3, r1
 8006672:	4313      	orrs	r3, r2
 8006674:	d011      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667a:	3308      	adds	r3, #8
 800667c:	2100      	movs	r1, #0
 800667e:	4618      	mov	r0, r3
 8006680:	f001 fa4a 	bl	8007b18 <RCCEx_PLL2_Config>
 8006684:	4603      	mov	r3, r0
 8006686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800668a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006692:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006696:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800669a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a2:	2100      	movs	r1, #0
 80066a4:	6239      	str	r1, [r7, #32]
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80066ac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80066b0:	460b      	mov	r3, r1
 80066b2:	4313      	orrs	r3, r2
 80066b4:	d011      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ba:	3308      	adds	r3, #8
 80066bc:	2101      	movs	r1, #1
 80066be:	4618      	mov	r0, r3
 80066c0:	f001 fa2a 	bl	8007b18 <RCCEx_PLL2_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80066ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80066da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	2100      	movs	r1, #0
 80066e4:	61b9      	str	r1, [r7, #24]
 80066e6:	f003 0304 	and.w	r3, r3, #4
 80066ea:	61fb      	str	r3, [r7, #28]
 80066ec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80066f0:	460b      	mov	r3, r1
 80066f2:	4313      	orrs	r3, r2
 80066f4:	d011      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80066f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fa:	3308      	adds	r3, #8
 80066fc:	2102      	movs	r1, #2
 80066fe:	4618      	mov	r0, r3
 8006700:	f001 fa0a 	bl	8007b18 <RCCEx_PLL2_Config>
 8006704:	4603      	mov	r3, r0
 8006706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800670a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006716:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800671a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006722:	2100      	movs	r1, #0
 8006724:	6139      	str	r1, [r7, #16]
 8006726:	f003 0308 	and.w	r3, r3, #8
 800672a:	617b      	str	r3, [r7, #20]
 800672c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006730:	460b      	mov	r3, r1
 8006732:	4313      	orrs	r3, r2
 8006734:	d011      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673a:	3328      	adds	r3, #40	@ 0x28
 800673c:	2100      	movs	r1, #0
 800673e:	4618      	mov	r0, r3
 8006740:	f001 fa9c 	bl	8007c7c <RCCEx_PLL3_Config>
 8006744:	4603      	mov	r3, r0
 8006746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800674a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006752:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006756:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800675a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006762:	2100      	movs	r1, #0
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	f003 0310 	and.w	r3, r3, #16
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006770:	460b      	mov	r3, r1
 8006772:	4313      	orrs	r3, r2
 8006774:	d011      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677a:	3328      	adds	r3, #40	@ 0x28
 800677c:	2101      	movs	r1, #1
 800677e:	4618      	mov	r0, r3
 8006780:	f001 fa7c 	bl	8007c7c <RCCEx_PLL3_Config>
 8006784:	4603      	mov	r3, r0
 8006786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800678a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006792:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006796:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800679a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	2100      	movs	r1, #0
 80067a4:	6039      	str	r1, [r7, #0]
 80067a6:	f003 0320 	and.w	r3, r3, #32
 80067aa:	607b      	str	r3, [r7, #4]
 80067ac:	e9d7 1200 	ldrd	r1, r2, [r7]
 80067b0:	460b      	mov	r3, r1
 80067b2:	4313      	orrs	r3, r2
 80067b4:	d011      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ba:	3328      	adds	r3, #40	@ 0x28
 80067bc:	2102      	movs	r1, #2
 80067be:	4618      	mov	r0, r3
 80067c0:	f001 fa5c 	bl	8007c7c <RCCEx_PLL3_Config>
 80067c4:	4603      	mov	r3, r0
 80067c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80067ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80067da:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	e000      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80067ee:	46bd      	mov	sp, r7
 80067f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067f4:	58024400 	.word	0x58024400

080067f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b090      	sub	sp, #64	@ 0x40
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006806:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800680a:	430b      	orrs	r3, r1
 800680c:	f040 8094 	bne.w	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006810:	4b9e      	ldr	r3, [pc, #632]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006814:	f003 0307 	and.w	r3, r3, #7
 8006818:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800681a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681c:	2b04      	cmp	r3, #4
 800681e:	f200 8087 	bhi.w	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006822:	a201      	add	r2, pc, #4	@ (adr r2, 8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006828:	0800683d 	.word	0x0800683d
 800682c:	08006865 	.word	0x08006865
 8006830:	0800688d 	.word	0x0800688d
 8006834:	08006929 	.word	0x08006929
 8006838:	080068b5 	.word	0x080068b5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800683c:	4b93      	ldr	r3, [pc, #588]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006844:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006848:	d108      	bne.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800684a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800684e:	4618      	mov	r0, r3
 8006850:	f001 f810 	bl	8007874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006858:	f000 bd45 	b.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800685c:	2300      	movs	r3, #0
 800685e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006860:	f000 bd41 	b.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006864:	4b89      	ldr	r3, [pc, #548]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800686c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006870:	d108      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006872:	f107 0318 	add.w	r3, r7, #24
 8006876:	4618      	mov	r0, r3
 8006878:	f000 fd54 	bl	8007324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006880:	f000 bd31 	b.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006888:	f000 bd2d 	b.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800688c:	4b7f      	ldr	r3, [pc, #508]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006894:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006898:	d108      	bne.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800689a:	f107 030c 	add.w	r3, r7, #12
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 fe94 	bl	80075cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068a8:	f000 bd1d 	b.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068ac:	2300      	movs	r3, #0
 80068ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068b0:	f000 bd19 	b.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068b4:	4b75      	ldr	r3, [pc, #468]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80068bc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068be:	4b73      	ldr	r3, [pc, #460]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d10c      	bne.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80068ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d109      	bne.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068d0:	4b6e      	ldr	r3, [pc, #440]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	08db      	lsrs	r3, r3, #3
 80068d6:	f003 0303 	and.w	r3, r3, #3
 80068da:	4a6d      	ldr	r2, [pc, #436]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80068dc:	fa22 f303 	lsr.w	r3, r2, r3
 80068e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068e2:	e01f      	b.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068e4:	4b69      	ldr	r3, [pc, #420]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068f0:	d106      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80068f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068f8:	d102      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80068fa:	4b66      	ldr	r3, [pc, #408]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80068fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068fe:	e011      	b.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006900:	4b62      	ldr	r3, [pc, #392]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800690c:	d106      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800690e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006910:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006914:	d102      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006916:	4b60      	ldr	r3, [pc, #384]	@ (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006918:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800691a:	e003      	b.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800691c:	2300      	movs	r3, #0
 800691e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006920:	f000 bce1 	b.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006924:	f000 bcdf 	b.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006928:	4b5c      	ldr	r3, [pc, #368]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800692a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800692c:	f000 bcdb 	b.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006930:	2300      	movs	r3, #0
 8006932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006934:	f000 bcd7 	b.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800693c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006940:	430b      	orrs	r3, r1
 8006942:	f040 80ad 	bne.w	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006946:	4b51      	ldr	r3, [pc, #324]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800694a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800694e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006952:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006956:	d056      	beq.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800695e:	f200 8090 	bhi.w	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006964:	2bc0      	cmp	r3, #192	@ 0xc0
 8006966:	f000 8088 	beq.w	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800696a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696c:	2bc0      	cmp	r3, #192	@ 0xc0
 800696e:	f200 8088 	bhi.w	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006974:	2b80      	cmp	r3, #128	@ 0x80
 8006976:	d032      	beq.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697a:	2b80      	cmp	r3, #128	@ 0x80
 800697c:	f200 8081 	bhi.w	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006988:	2b40      	cmp	r3, #64	@ 0x40
 800698a:	d014      	beq.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800698c:	e079      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800698e:	4b3f      	ldr	r3, [pc, #252]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006996:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800699a:	d108      	bne.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800699c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 ff67 	bl	8007874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069aa:	f000 bc9c 	b.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069ae:	2300      	movs	r3, #0
 80069b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069b2:	f000 bc98 	b.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069b6:	4b35      	ldr	r3, [pc, #212]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069c2:	d108      	bne.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069c4:	f107 0318 	add.w	r3, r7, #24
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 fcab 	bl	8007324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069d2:	f000 bc88 	b.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069d6:	2300      	movs	r3, #0
 80069d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069da:	f000 bc84 	b.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069de:	4b2b      	ldr	r3, [pc, #172]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069ea:	d108      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069ec:	f107 030c 	add.w	r3, r7, #12
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fdeb 	bl	80075cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069fa:	f000 bc74 	b.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069fe:	2300      	movs	r3, #0
 8006a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a02:	f000 bc70 	b.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a06:	4b21      	ldr	r3, [pc, #132]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006a0e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a10:	4b1e      	ldr	r3, [pc, #120]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b04      	cmp	r3, #4
 8006a1a:	d10c      	bne.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d109      	bne.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a22:	4b1a      	ldr	r3, [pc, #104]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	08db      	lsrs	r3, r3, #3
 8006a28:	f003 0303 	and.w	r3, r3, #3
 8006a2c:	4a18      	ldr	r2, [pc, #96]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a34:	e01f      	b.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a36:	4b15      	ldr	r3, [pc, #84]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a42:	d106      	bne.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a4a:	d102      	bne.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a4c:	4b11      	ldr	r3, [pc, #68]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a50:	e011      	b.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a52:	4b0e      	ldr	r3, [pc, #56]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a5e:	d106      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a66:	d102      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a68:	4b0b      	ldr	r3, [pc, #44]	@ (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a6c:	e003      	b.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006a72:	f000 bc38 	b.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a76:	f000 bc36 	b.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a7a:	4b08      	ldr	r3, [pc, #32]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a7e:	f000 bc32 	b.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006a82:	2300      	movs	r3, #0
 8006a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a86:	f000 bc2e 	b.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a8a:	bf00      	nop
 8006a8c:	58024400 	.word	0x58024400
 8006a90:	03d09000 	.word	0x03d09000
 8006a94:	003d0900 	.word	0x003d0900
 8006a98:	007a1200 	.word	0x007a1200
 8006a9c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aa4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006aa8:	430b      	orrs	r3, r1
 8006aaa:	f040 809c 	bne.w	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006aae:	4b9e      	ldr	r3, [pc, #632]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006ab6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006abe:	d054      	beq.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ac6:	f200 808b 	bhi.w	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006ad0:	f000 8083 	beq.w	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006ada:	f200 8081 	bhi.w	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ae4:	d02f      	beq.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006aec:	d878      	bhi.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d004      	beq.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006afa:	d012      	beq.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006afc:	e070      	b.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006afe:	4b8a      	ldr	r3, [pc, #552]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b0a:	d107      	bne.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 feaf 	bl	8007874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b1a:	e3e4      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b20:	e3e1      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b22:	4b81      	ldr	r3, [pc, #516]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b2e:	d107      	bne.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b30:	f107 0318 	add.w	r3, r7, #24
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 fbf5 	bl	8007324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b3e:	e3d2      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b44:	e3cf      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b46:	4b78      	ldr	r3, [pc, #480]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b52:	d107      	bne.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b54:	f107 030c 	add.w	r3, r7, #12
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 fd37 	bl	80075cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b62:	e3c0      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b64:	2300      	movs	r3, #0
 8006b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b68:	e3bd      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b6a:	4b6f      	ldr	r3, [pc, #444]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b6e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006b72:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b74:	4b6c      	ldr	r3, [pc, #432]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0304 	and.w	r3, r3, #4
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	d10c      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d109      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b86:	4b68      	ldr	r3, [pc, #416]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	08db      	lsrs	r3, r3, #3
 8006b8c:	f003 0303 	and.w	r3, r3, #3
 8006b90:	4a66      	ldr	r2, [pc, #408]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006b92:	fa22 f303 	lsr.w	r3, r2, r3
 8006b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b98:	e01e      	b.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b9a:	4b63      	ldr	r3, [pc, #396]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ba6:	d106      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006baa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bae:	d102      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006bb0:	4b5f      	ldr	r3, [pc, #380]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bb4:	e010      	b.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bb6:	4b5c      	ldr	r3, [pc, #368]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bc2:	d106      	bne.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bca:	d102      	bne.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006bcc:	4b59      	ldr	r3, [pc, #356]	@ (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bd0:	e002      	b.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006bd6:	e386      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bd8:	e385      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006bda:	4b57      	ldr	r3, [pc, #348]	@ (8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bde:	e382      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006be0:	2300      	movs	r3, #0
 8006be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006be4:	e37f      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006be6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bea:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006bee:	430b      	orrs	r3, r1
 8006bf0:	f040 80a7 	bne.w	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006bf4:	4b4c      	ldr	r3, [pc, #304]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bf8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006bfc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c04:	d055      	beq.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c0c:	f200 8096 	bhi.w	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c12:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c16:	f000 8084 	beq.w	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c20:	f200 808c 	bhi.w	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c2a:	d030      	beq.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c32:	f200 8083 	bhi.w	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d004      	beq.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c42:	d012      	beq.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006c44:	e07a      	b.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c46:	4b38      	ldr	r3, [pc, #224]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c52:	d107      	bne.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 fe0b 	bl	8007874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c62:	e340      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c64:	2300      	movs	r3, #0
 8006c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c68:	e33d      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c76:	d107      	bne.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c78:	f107 0318 	add.w	r3, r7, #24
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 fb51 	bl	8007324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c86:	e32e      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c8c:	e32b      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c8e:	4b26      	ldr	r3, [pc, #152]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c9a:	d107      	bne.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c9c:	f107 030c 	add.w	r3, r7, #12
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 fc93 	bl	80075cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006caa:	e31c      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cac:	2300      	movs	r3, #0
 8006cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cb0:	e319      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cb6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006cba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b04      	cmp	r3, #4
 8006cc6:	d10c      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d109      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cce:	4b16      	ldr	r3, [pc, #88]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	08db      	lsrs	r3, r3, #3
 8006cd4:	f003 0303 	and.w	r3, r3, #3
 8006cd8:	4a14      	ldr	r2, [pc, #80]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006cda:	fa22 f303 	lsr.w	r3, r2, r3
 8006cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ce0:	e01e      	b.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ce2:	4b11      	ldr	r3, [pc, #68]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cee:	d106      	bne.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cf6:	d102      	bne.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cfc:	e010      	b.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d0a:	d106      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d12:	d102      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d14:	4b07      	ldr	r3, [pc, #28]	@ (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d18:	e002      	b.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006d1e:	e2e2      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d20:	e2e1      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d22:	4b05      	ldr	r3, [pc, #20]	@ (8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d26:	e2de      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d28:	58024400 	.word	0x58024400
 8006d2c:	03d09000 	.word	0x03d09000
 8006d30:	003d0900 	.word	0x003d0900
 8006d34:	007a1200 	.word	0x007a1200
 8006d38:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d40:	e2d1      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006d42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d46:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006d4a:	430b      	orrs	r3, r1
 8006d4c:	f040 809c 	bne.w	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006d50:	4b93      	ldr	r3, [pc, #588]	@ (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d54:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006d58:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d60:	d054      	beq.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d68:	f200 808b 	bhi.w	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d72:	f000 8083 	beq.w	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d7c:	f200 8081 	bhi.w	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d86:	d02f      	beq.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d8e:	d878      	bhi.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d004      	beq.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d9c:	d012      	beq.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006d9e:	e070      	b.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006da0:	4b7f      	ldr	r3, [pc, #508]	@ (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006da8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dac:	d107      	bne.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 fd5e 	bl	8007874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dbc:	e293      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dc2:	e290      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006dc4:	4b76      	ldr	r3, [pc, #472]	@ (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dd0:	d107      	bne.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dd2:	f107 0318 	add.w	r3, r7, #24
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 faa4 	bl	8007324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006de0:	e281      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006de6:	e27e      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006de8:	4b6d      	ldr	r3, [pc, #436]	@ (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006df0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006df4:	d107      	bne.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006df6:	f107 030c 	add.w	r3, r7, #12
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 fbe6 	bl	80075cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e04:	e26f      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e06:	2300      	movs	r3, #0
 8006e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e0a:	e26c      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e0c:	4b64      	ldr	r3, [pc, #400]	@ (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e14:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e16:	4b62      	ldr	r3, [pc, #392]	@ (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0304 	and.w	r3, r3, #4
 8006e1e:	2b04      	cmp	r3, #4
 8006e20:	d10c      	bne.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d109      	bne.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e28:	4b5d      	ldr	r3, [pc, #372]	@ (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	08db      	lsrs	r3, r3, #3
 8006e2e:	f003 0303 	and.w	r3, r3, #3
 8006e32:	4a5c      	ldr	r2, [pc, #368]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006e34:	fa22 f303 	lsr.w	r3, r2, r3
 8006e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e3a:	e01e      	b.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e3c:	4b58      	ldr	r3, [pc, #352]	@ (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e48:	d106      	bne.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e50:	d102      	bne.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e52:	4b55      	ldr	r3, [pc, #340]	@ (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e56:	e010      	b.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e58:	4b51      	ldr	r3, [pc, #324]	@ (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e64:	d106      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e6c:	d102      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e6e:	4b4f      	ldr	r3, [pc, #316]	@ (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e72:	e002      	b.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e74:	2300      	movs	r3, #0
 8006e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006e78:	e235      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e7a:	e234      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e7c:	4b4c      	ldr	r3, [pc, #304]	@ (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e80:	e231      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006e82:	2300      	movs	r3, #0
 8006e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e86:	e22e      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e8c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006e90:	430b      	orrs	r3, r1
 8006e92:	f040 808f 	bne.w	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006e96:	4b42      	ldr	r3, [pc, #264]	@ (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e9a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ea6:	d06b      	beq.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eaa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006eae:	d874      	bhi.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006eb6:	d056      	beq.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ebe:	d86c      	bhi.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ec6:	d03b      	beq.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ece:	d864      	bhi.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ed6:	d021      	beq.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ede:	d85c      	bhi.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d004      	beq.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eec:	d004      	beq.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006eee:	e054      	b.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006ef0:	f7fe fa4c 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 8006ef4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ef6:	e1f6      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ef8:	4b29      	ldr	r3, [pc, #164]	@ (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f04:	d107      	bne.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f06:	f107 0318 	add.w	r3, r7, #24
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 fa0a 	bl	8007324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f14:	e1e7      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f16:	2300      	movs	r3, #0
 8006f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f1a:	e1e4      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f1c:	4b20      	ldr	r3, [pc, #128]	@ (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f28:	d107      	bne.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f2a:	f107 030c 	add.w	r3, r7, #12
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 fb4c 	bl	80075cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f38:	e1d5      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f3e:	e1d2      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f40:	4b17      	ldr	r3, [pc, #92]	@ (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0304 	and.w	r3, r3, #4
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d109      	bne.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f4c:	4b14      	ldr	r3, [pc, #80]	@ (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	08db      	lsrs	r3, r3, #3
 8006f52:	f003 0303 	and.w	r3, r3, #3
 8006f56:	4a13      	ldr	r2, [pc, #76]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006f58:	fa22 f303 	lsr.w	r3, r2, r3
 8006f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f5e:	e1c2      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f60:	2300      	movs	r3, #0
 8006f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f64:	e1bf      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006f66:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f72:	d102      	bne.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006f74:	4b0c      	ldr	r3, [pc, #48]	@ (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f78:	e1b5      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f7e:	e1b2      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f80:	4b07      	ldr	r3, [pc, #28]	@ (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f8c:	d102      	bne.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006f8e:	4b07      	ldr	r3, [pc, #28]	@ (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f92:	e1a8      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f98:	e1a5      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f9e:	e1a2      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006fa0:	58024400 	.word	0x58024400
 8006fa4:	03d09000 	.word	0x03d09000
 8006fa8:	003d0900 	.word	0x003d0900
 8006fac:	007a1200 	.word	0x007a1200
 8006fb0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fb8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006fbc:	430b      	orrs	r3, r1
 8006fbe:	d173      	bne.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006fc0:	4b9c      	ldr	r3, [pc, #624]	@ (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006fc8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fd0:	d02f      	beq.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fd8:	d863      	bhi.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d004      	beq.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fe6:	d012      	beq.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006fe8:	e05b      	b.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fea:	4b92      	ldr	r3, [pc, #584]	@ (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ff2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ff6:	d107      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ff8:	f107 0318 	add.w	r3, r7, #24
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 f991 	bl	8007324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007006:	e16e      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007008:	2300      	movs	r3, #0
 800700a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800700c:	e16b      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800700e:	4b89      	ldr	r3, [pc, #548]	@ (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007016:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800701a:	d107      	bne.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800701c:	f107 030c 	add.w	r3, r7, #12
 8007020:	4618      	mov	r0, r3
 8007022:	f000 fad3 	bl	80075cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800702a:	e15c      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800702c:	2300      	movs	r3, #0
 800702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007030:	e159      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007032:	4b80      	ldr	r3, [pc, #512]	@ (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007036:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800703a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800703c:	4b7d      	ldr	r3, [pc, #500]	@ (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0304 	and.w	r3, r3, #4
 8007044:	2b04      	cmp	r3, #4
 8007046:	d10c      	bne.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800704a:	2b00      	cmp	r3, #0
 800704c:	d109      	bne.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800704e:	4b79      	ldr	r3, [pc, #484]	@ (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	08db      	lsrs	r3, r3, #3
 8007054:	f003 0303 	and.w	r3, r3, #3
 8007058:	4a77      	ldr	r2, [pc, #476]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800705a:	fa22 f303 	lsr.w	r3, r2, r3
 800705e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007060:	e01e      	b.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007062:	4b74      	ldr	r3, [pc, #464]	@ (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800706a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800706e:	d106      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007072:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007076:	d102      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007078:	4b70      	ldr	r3, [pc, #448]	@ (800723c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800707a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800707c:	e010      	b.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800707e:	4b6d      	ldr	r3, [pc, #436]	@ (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007086:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800708a:	d106      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800708c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800708e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007092:	d102      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007094:	4b6a      	ldr	r3, [pc, #424]	@ (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007098:	e002      	b.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800709a:	2300      	movs	r3, #0
 800709c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800709e:	e122      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070a0:	e121      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80070a2:	2300      	movs	r3, #0
 80070a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070a6:	e11e      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80070a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070ac:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80070b0:	430b      	orrs	r3, r1
 80070b2:	d133      	bne.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80070b4:	4b5f      	ldr	r3, [pc, #380]	@ (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070bc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80070be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d004      	beq.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80070c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070ca:	d012      	beq.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80070cc:	e023      	b.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070ce:	4b59      	ldr	r3, [pc, #356]	@ (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070da:	d107      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 fbc7 	bl	8007874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ea:	e0fc      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070f0:	e0f9      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070f2:	4b50      	ldr	r3, [pc, #320]	@ (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070fe:	d107      	bne.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007100:	f107 0318 	add.w	r3, r7, #24
 8007104:	4618      	mov	r0, r3
 8007106:	f000 f90d 	bl	8007324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800710e:	e0ea      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007110:	2300      	movs	r3, #0
 8007112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007114:	e0e7      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800711a:	e0e4      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800711c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007120:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007124:	430b      	orrs	r3, r1
 8007126:	f040 808d 	bne.w	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800712a:	4b42      	ldr	r3, [pc, #264]	@ (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800712c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800712e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007132:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007136:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800713a:	d06b      	beq.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800713c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007142:	d874      	bhi.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800714a:	d056      	beq.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800714c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007152:	d86c      	bhi.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007156:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800715a:	d03b      	beq.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800715c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007162:	d864      	bhi.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800716a:	d021      	beq.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800716c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007172:	d85c      	bhi.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007176:	2b00      	cmp	r3, #0
 8007178:	d004      	beq.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800717a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007180:	d004      	beq.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007182:	e054      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007184:	f000 f8b8 	bl	80072f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007188:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800718a:	e0ac      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800718c:	4b29      	ldr	r3, [pc, #164]	@ (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007194:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007198:	d107      	bne.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800719a:	f107 0318 	add.w	r3, r7, #24
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 f8c0 	bl	8007324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071a8:	e09d      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071aa:	2300      	movs	r3, #0
 80071ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071ae:	e09a      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071b0:	4b20      	ldr	r3, [pc, #128]	@ (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071bc:	d107      	bne.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071be:	f107 030c 	add.w	r3, r7, #12
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 fa02 	bl	80075cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071cc:	e08b      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071ce:	2300      	movs	r3, #0
 80071d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071d2:	e088      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071d4:	4b17      	ldr	r3, [pc, #92]	@ (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0304 	and.w	r3, r3, #4
 80071dc:	2b04      	cmp	r3, #4
 80071de:	d109      	bne.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071e0:	4b14      	ldr	r3, [pc, #80]	@ (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	08db      	lsrs	r3, r3, #3
 80071e6:	f003 0303 	and.w	r3, r3, #3
 80071ea:	4a13      	ldr	r2, [pc, #76]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80071ec:	fa22 f303 	lsr.w	r3, r2, r3
 80071f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071f2:	e078      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071f4:	2300      	movs	r3, #0
 80071f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071f8:	e075      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80071fa:	4b0e      	ldr	r3, [pc, #56]	@ (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007206:	d102      	bne.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007208:	4b0c      	ldr	r3, [pc, #48]	@ (800723c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800720a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800720c:	e06b      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007212:	e068      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007214:	4b07      	ldr	r3, [pc, #28]	@ (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800721c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007220:	d102      	bne.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007222:	4b07      	ldr	r3, [pc, #28]	@ (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007226:	e05e      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007228:	2300      	movs	r3, #0
 800722a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800722c:	e05b      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007232:	e058      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007234:	58024400 	.word	0x58024400
 8007238:	03d09000 	.word	0x03d09000
 800723c:	003d0900 	.word	0x003d0900
 8007240:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007244:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007248:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800724c:	430b      	orrs	r3, r1
 800724e:	d148      	bne.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007250:	4b27      	ldr	r3, [pc, #156]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007254:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007258:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800725a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800725c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007260:	d02a      	beq.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007268:	d838      	bhi.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800726a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726c:	2b00      	cmp	r3, #0
 800726e:	d004      	beq.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007272:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007276:	d00d      	beq.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007278:	e030      	b.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800727a:	4b1d      	ldr	r3, [pc, #116]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007282:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007286:	d102      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007288:	4b1a      	ldr	r3, [pc, #104]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800728a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800728c:	e02b      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800728e:	2300      	movs	r3, #0
 8007290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007292:	e028      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007294:	4b16      	ldr	r3, [pc, #88]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800729c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072a0:	d107      	bne.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 fae4 	bl	8007874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072b0:	e019      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072b6:	e016      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072b8:	4b0d      	ldr	r3, [pc, #52]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072c4:	d107      	bne.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072c6:	f107 0318 	add.w	r3, r7, #24
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 f82a 	bl	8007324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072d4:	e007      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072d6:	2300      	movs	r3, #0
 80072d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072da:	e004      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80072dc:	2300      	movs	r3, #0
 80072de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072e0:	e001      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80072e2:	2300      	movs	r3, #0
 80072e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80072e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3740      	adds	r7, #64	@ 0x40
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	58024400 	.word	0x58024400
 80072f4:	007a1200 	.word	0x007a1200

080072f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80072fc:	f7fe f816 	bl	800532c <HAL_RCC_GetHCLKFreq>
 8007300:	4602      	mov	r2, r0
 8007302:	4b06      	ldr	r3, [pc, #24]	@ (800731c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	091b      	lsrs	r3, r3, #4
 8007308:	f003 0307 	and.w	r3, r3, #7
 800730c:	4904      	ldr	r1, [pc, #16]	@ (8007320 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800730e:	5ccb      	ldrb	r3, [r1, r3]
 8007310:	f003 031f 	and.w	r3, r3, #31
 8007314:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007318:	4618      	mov	r0, r3
 800731a:	bd80      	pop	{r7, pc}
 800731c:	58024400 	.word	0x58024400
 8007320:	080095c0 	.word	0x080095c0

08007324 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007324:	b480      	push	{r7}
 8007326:	b089      	sub	sp, #36	@ 0x24
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800732c:	4ba1      	ldr	r3, [pc, #644]	@ (80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800732e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007330:	f003 0303 	and.w	r3, r3, #3
 8007334:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007336:	4b9f      	ldr	r3, [pc, #636]	@ (80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733a:	0b1b      	lsrs	r3, r3, #12
 800733c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007340:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007342:	4b9c      	ldr	r3, [pc, #624]	@ (80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007346:	091b      	lsrs	r3, r3, #4
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800734e:	4b99      	ldr	r3, [pc, #612]	@ (80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007352:	08db      	lsrs	r3, r3, #3
 8007354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	fb02 f303 	mul.w	r3, r2, r3
 800735e:	ee07 3a90 	vmov	s15, r3
 8007362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007366:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 8111 	beq.w	8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	2b02      	cmp	r3, #2
 8007376:	f000 8083 	beq.w	8007480 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	2b02      	cmp	r3, #2
 800737e:	f200 80a1 	bhi.w	80074c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d056      	beq.n	800743c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800738e:	e099      	b.n	80074c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007390:	4b88      	ldr	r3, [pc, #544]	@ (80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0320 	and.w	r3, r3, #32
 8007398:	2b00      	cmp	r3, #0
 800739a:	d02d      	beq.n	80073f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800739c:	4b85      	ldr	r3, [pc, #532]	@ (80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	08db      	lsrs	r3, r3, #3
 80073a2:	f003 0303 	and.w	r3, r3, #3
 80073a6:	4a84      	ldr	r2, [pc, #528]	@ (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80073a8:	fa22 f303 	lsr.w	r3, r2, r3
 80073ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	ee07 3a90 	vmov	s15, r3
 80073b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	ee07 3a90 	vmov	s15, r3
 80073be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073c6:	4b7b      	ldr	r3, [pc, #492]	@ (80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80075bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80073f6:	e087      	b.n	8007508 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007402:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800740a:	4b6a      	ldr	r3, [pc, #424]	@ (80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800740c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800740e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741a:	ed97 6a03 	vldr	s12, [r7, #12]
 800741e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80075bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800742a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800742e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800743a:	e065      	b.n	8007508 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	ee07 3a90 	vmov	s15, r3
 8007442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007446:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80075c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800744a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800744e:	4b59      	ldr	r3, [pc, #356]	@ (80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800745e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007462:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80075bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800746a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800746e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800747a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800747e:	e043      	b.n	8007508 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	ee07 3a90 	vmov	s15, r3
 8007486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800748e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007492:	4b48      	ldr	r3, [pc, #288]	@ (80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749a:	ee07 3a90 	vmov	s15, r3
 800749e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80075bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074c2:	e021      	b.n	8007508 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	ee07 3a90 	vmov	s15, r3
 80074ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80075c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80074d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d6:	4b37      	ldr	r3, [pc, #220]	@ (80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80075bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007506:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007508:	4b2a      	ldr	r3, [pc, #168]	@ (80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800750a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750c:	0a5b      	lsrs	r3, r3, #9
 800750e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800751e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007522:	edd7 6a07 	vldr	s13, [r7, #28]
 8007526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800752a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800752e:	ee17 2a90 	vmov	r2, s15
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007536:	4b1f      	ldr	r3, [pc, #124]	@ (80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800753a:	0c1b      	lsrs	r3, r3, #16
 800753c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007540:	ee07 3a90 	vmov	s15, r3
 8007544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007548:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800754c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007550:	edd7 6a07 	vldr	s13, [r7, #28]
 8007554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800755c:	ee17 2a90 	vmov	r2, s15
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007564:	4b13      	ldr	r3, [pc, #76]	@ (80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007568:	0e1b      	lsrs	r3, r3, #24
 800756a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800756e:	ee07 3a90 	vmov	s15, r3
 8007572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007576:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800757a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800757e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800758a:	ee17 2a90 	vmov	r2, s15
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007592:	e008      	b.n	80075a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	609a      	str	r2, [r3, #8]
}
 80075a6:	bf00      	nop
 80075a8:	3724      	adds	r7, #36	@ 0x24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	58024400 	.word	0x58024400
 80075b8:	03d09000 	.word	0x03d09000
 80075bc:	46000000 	.word	0x46000000
 80075c0:	4c742400 	.word	0x4c742400
 80075c4:	4a742400 	.word	0x4a742400
 80075c8:	4af42400 	.word	0x4af42400

080075cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b089      	sub	sp, #36	@ 0x24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075d4:	4ba1      	ldr	r3, [pc, #644]	@ (800785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d8:	f003 0303 	and.w	r3, r3, #3
 80075dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80075de:	4b9f      	ldr	r3, [pc, #636]	@ (800785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e2:	0d1b      	lsrs	r3, r3, #20
 80075e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80075ea:	4b9c      	ldr	r3, [pc, #624]	@ (800785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ee:	0a1b      	lsrs	r3, r3, #8
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80075f6:	4b99      	ldr	r3, [pc, #612]	@ (800785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075fa:	08db      	lsrs	r3, r3, #3
 80075fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	fb02 f303 	mul.w	r3, r2, r3
 8007606:	ee07 3a90 	vmov	s15, r3
 800760a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 8111 	beq.w	800783c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	2b02      	cmp	r3, #2
 800761e:	f000 8083 	beq.w	8007728 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	2b02      	cmp	r3, #2
 8007626:	f200 80a1 	bhi.w	800776c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d003      	beq.n	8007638 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d056      	beq.n	80076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007636:	e099      	b.n	800776c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007638:	4b88      	ldr	r3, [pc, #544]	@ (800785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0320 	and.w	r3, r3, #32
 8007640:	2b00      	cmp	r3, #0
 8007642:	d02d      	beq.n	80076a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007644:	4b85      	ldr	r3, [pc, #532]	@ (800785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	08db      	lsrs	r3, r3, #3
 800764a:	f003 0303 	and.w	r3, r3, #3
 800764e:	4a84      	ldr	r2, [pc, #528]	@ (8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007650:	fa22 f303 	lsr.w	r3, r2, r3
 8007654:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	ee07 3a90 	vmov	s15, r3
 800765c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800766e:	4b7b      	ldr	r3, [pc, #492]	@ (800785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007676:	ee07 3a90 	vmov	s15, r3
 800767a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800767e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007682:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007864 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800768a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800768e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800769e:	e087      	b.n	80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80076ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b2:	4b6a      	ldr	r3, [pc, #424]	@ (800785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007864 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076e2:	e065      	b.n	80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800786c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f6:	4b59      	ldr	r3, [pc, #356]	@ (800785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007706:	ed97 6a03 	vldr	s12, [r7, #12]
 800770a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007864 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800770e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007716:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800771a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800771e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007722:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007726:	e043      	b.n	80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007732:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800773a:	4b48      	ldr	r3, [pc, #288]	@ (800785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800773c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800773e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007742:	ee07 3a90 	vmov	s15, r3
 8007746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774a:	ed97 6a03 	vldr	s12, [r7, #12]
 800774e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007864 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800775a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800775e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007766:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800776a:	e021      	b.n	80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	ee07 3a90 	vmov	s15, r3
 8007772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007776:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800786c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800777a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800777e:	4b37      	ldr	r3, [pc, #220]	@ (800785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007786:	ee07 3a90 	vmov	s15, r3
 800778a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800778e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007792:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007864 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800779a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800779e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80077b0:	4b2a      	ldr	r3, [pc, #168]	@ (800785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b4:	0a5b      	lsrs	r3, r3, #9
 80077b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077ba:	ee07 3a90 	vmov	s15, r3
 80077be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80077ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077d6:	ee17 2a90 	vmov	r2, s15
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80077de:	4b1f      	ldr	r3, [pc, #124]	@ (800785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e2:	0c1b      	lsrs	r3, r3, #16
 80077e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077e8:	ee07 3a90 	vmov	s15, r3
 80077ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80077fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007804:	ee17 2a90 	vmov	r2, s15
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800780c:	4b13      	ldr	r3, [pc, #76]	@ (800785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800780e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007810:	0e1b      	lsrs	r3, r3, #24
 8007812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007822:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007826:	edd7 6a07 	vldr	s13, [r7, #28]
 800782a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800782e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007832:	ee17 2a90 	vmov	r2, s15
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800783a:	e008      	b.n	800784e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	609a      	str	r2, [r3, #8]
}
 800784e:	bf00      	nop
 8007850:	3724      	adds	r7, #36	@ 0x24
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	58024400 	.word	0x58024400
 8007860:	03d09000 	.word	0x03d09000
 8007864:	46000000 	.word	0x46000000
 8007868:	4c742400 	.word	0x4c742400
 800786c:	4a742400 	.word	0x4a742400
 8007870:	4af42400 	.word	0x4af42400

08007874 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007874:	b480      	push	{r7}
 8007876:	b089      	sub	sp, #36	@ 0x24
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800787c:	4ba0      	ldr	r3, [pc, #640]	@ (8007b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800787e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007880:	f003 0303 	and.w	r3, r3, #3
 8007884:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007886:	4b9e      	ldr	r3, [pc, #632]	@ (8007b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800788a:	091b      	lsrs	r3, r3, #4
 800788c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007890:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007892:	4b9b      	ldr	r3, [pc, #620]	@ (8007b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800789c:	4b98      	ldr	r3, [pc, #608]	@ (8007b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800789e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078a0:	08db      	lsrs	r3, r3, #3
 80078a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	fb02 f303 	mul.w	r3, r2, r3
 80078ac:	ee07 3a90 	vmov	s15, r3
 80078b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 8111 	beq.w	8007ae2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	f000 8083 	beq.w	80079ce <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	f200 80a1 	bhi.w	8007a12 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d003      	beq.n	80078de <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d056      	beq.n	800798a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80078dc:	e099      	b.n	8007a12 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078de:	4b88      	ldr	r3, [pc, #544]	@ (8007b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0320 	and.w	r3, r3, #32
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d02d      	beq.n	8007946 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078ea:	4b85      	ldr	r3, [pc, #532]	@ (8007b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	08db      	lsrs	r3, r3, #3
 80078f0:	f003 0303 	and.w	r3, r3, #3
 80078f4:	4a83      	ldr	r2, [pc, #524]	@ (8007b04 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80078f6:	fa22 f303 	lsr.w	r3, r2, r3
 80078fa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	ee07 3a90 	vmov	s15, r3
 8007902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	ee07 3a90 	vmov	s15, r3
 800790c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007910:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007914:	4b7a      	ldr	r3, [pc, #488]	@ (8007b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800791c:	ee07 3a90 	vmov	s15, r3
 8007920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007924:	ed97 6a03 	vldr	s12, [r7, #12]
 8007928:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007b08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800792c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007930:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007934:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007938:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800793c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007940:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007944:	e087      	b.n	8007a56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	ee07 3a90 	vmov	s15, r3
 800794c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007950:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007954:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007958:	4b69      	ldr	r3, [pc, #420]	@ (8007b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800795a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800795c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007960:	ee07 3a90 	vmov	s15, r3
 8007964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007968:	ed97 6a03 	vldr	s12, [r7, #12]
 800796c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007b08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007970:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007978:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800797c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007984:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007988:	e065      	b.n	8007a56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	ee07 3a90 	vmov	s15, r3
 8007990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007994:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007b10 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800799c:	4b58      	ldr	r3, [pc, #352]	@ (8007b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800799e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a4:	ee07 3a90 	vmov	s15, r3
 80079a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80079b0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007b08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079cc:	e043      	b.n	8007a56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	ee07 3a90 	vmov	s15, r3
 80079d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80079dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079e0:	4b47      	ldr	r3, [pc, #284]	@ (8007b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079e8:	ee07 3a90 	vmov	s15, r3
 80079ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80079f4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007b08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a10:	e021      	b.n	8007a56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	ee07 3a90 	vmov	s15, r3
 8007a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a1c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007a20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a24:	4b36      	ldr	r3, [pc, #216]	@ (8007b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a2c:	ee07 3a90 	vmov	s15, r3
 8007a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a34:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a38:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007b08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a54:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007a56:	4b2a      	ldr	r3, [pc, #168]	@ (8007b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a5a:	0a5b      	lsrs	r3, r3, #9
 8007a5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a60:	ee07 3a90 	vmov	s15, r3
 8007a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a70:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a7c:	ee17 2a90 	vmov	r2, s15
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007a84:	4b1e      	ldr	r3, [pc, #120]	@ (8007b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a88:	0c1b      	lsrs	r3, r3, #16
 8007a8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a8e:	ee07 3a90 	vmov	s15, r3
 8007a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aaa:	ee17 2a90 	vmov	r2, s15
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007ab2:	4b13      	ldr	r3, [pc, #76]	@ (8007b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ab6:	0e1b      	lsrs	r3, r3, #24
 8007ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007abc:	ee07 3a90 	vmov	s15, r3
 8007ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ac8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007acc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ad8:	ee17 2a90 	vmov	r2, s15
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007ae0:	e008      	b.n	8007af4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	609a      	str	r2, [r3, #8]
}
 8007af4:	bf00      	nop
 8007af6:	3724      	adds	r7, #36	@ 0x24
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	58024400 	.word	0x58024400
 8007b04:	03d09000 	.word	0x03d09000
 8007b08:	46000000 	.word	0x46000000
 8007b0c:	4c742400 	.word	0x4c742400
 8007b10:	4a742400 	.word	0x4a742400
 8007b14:	4af42400 	.word	0x4af42400

08007b18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b26:	4b53      	ldr	r3, [pc, #332]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b2a:	f003 0303 	and.w	r3, r3, #3
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d101      	bne.n	8007b36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e099      	b.n	8007c6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b36:	4b4f      	ldr	r3, [pc, #316]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a4e      	ldr	r2, [pc, #312]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007b3c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b42:	f7fa f851 	bl	8001be8 <HAL_GetTick>
 8007b46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b48:	e008      	b.n	8007b5c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b4a:	f7fa f84d 	bl	8001be8 <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d901      	bls.n	8007b5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e086      	b.n	8007c6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b5c:	4b45      	ldr	r3, [pc, #276]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1f0      	bne.n	8007b4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b68:	4b42      	ldr	r3, [pc, #264]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b6c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	031b      	lsls	r3, r3, #12
 8007b76:	493f      	ldr	r1, [pc, #252]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	025b      	lsls	r3, r3, #9
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	431a      	orrs	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	041b      	lsls	r3, r3, #16
 8007b9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	061b      	lsls	r3, r3, #24
 8007ba8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007bac:	4931      	ldr	r1, [pc, #196]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007bb2:	4b30      	ldr	r3, [pc, #192]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	492d      	ldr	r1, [pc, #180]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc8:	f023 0220 	bic.w	r2, r3, #32
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	4928      	ldr	r1, [pc, #160]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007bd6:	4b27      	ldr	r3, [pc, #156]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bda:	4a26      	ldr	r2, [pc, #152]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007bdc:	f023 0310 	bic.w	r3, r3, #16
 8007be0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007be2:	4b24      	ldr	r3, [pc, #144]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007be4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007be6:	4b24      	ldr	r3, [pc, #144]	@ (8007c78 <RCCEx_PLL2_Config+0x160>)
 8007be8:	4013      	ands	r3, r2
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	69d2      	ldr	r2, [r2, #28]
 8007bee:	00d2      	lsls	r2, r2, #3
 8007bf0:	4920      	ldr	r1, [pc, #128]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007bfc:	f043 0310 	orr.w	r3, r3, #16
 8007c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d106      	bne.n	8007c16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007c08:	4b1a      	ldr	r3, [pc, #104]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c0c:	4a19      	ldr	r2, [pc, #100]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007c0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c14:	e00f      	b.n	8007c36 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d106      	bne.n	8007c2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c1c:	4b15      	ldr	r3, [pc, #84]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c20:	4a14      	ldr	r2, [pc, #80]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007c22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c28:	e005      	b.n	8007c36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c2a:	4b12      	ldr	r3, [pc, #72]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c2e:	4a11      	ldr	r2, [pc, #68]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007c30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c36:	4b0f      	ldr	r3, [pc, #60]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007c3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007c40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c42:	f7f9 ffd1 	bl	8001be8 <HAL_GetTick>
 8007c46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c48:	e008      	b.n	8007c5c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c4a:	f7f9 ffcd 	bl	8001be8 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d901      	bls.n	8007c5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e006      	b.n	8007c6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c5c:	4b05      	ldr	r3, [pc, #20]	@ (8007c74 <RCCEx_PLL2_Config+0x15c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d0f0      	beq.n	8007c4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	58024400 	.word	0x58024400
 8007c78:	ffff0007 	.word	0xffff0007

08007c7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c8a:	4b53      	ldr	r3, [pc, #332]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8e:	f003 0303 	and.w	r3, r3, #3
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	d101      	bne.n	8007c9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e099      	b.n	8007dce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c9a:	4b4f      	ldr	r3, [pc, #316]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a4e      	ldr	r2, [pc, #312]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007ca0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ca6:	f7f9 ff9f 	bl	8001be8 <HAL_GetTick>
 8007caa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cac:	e008      	b.n	8007cc0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cae:	f7f9 ff9b 	bl	8001be8 <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d901      	bls.n	8007cc0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e086      	b.n	8007dce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cc0:	4b45      	ldr	r3, [pc, #276]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1f0      	bne.n	8007cae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ccc:	4b42      	ldr	r3, [pc, #264]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	051b      	lsls	r3, r3, #20
 8007cda:	493f      	ldr	r1, [pc, #252]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	628b      	str	r3, [r1, #40]	@ 0x28
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	025b      	lsls	r3, r3, #9
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	041b      	lsls	r3, r3, #16
 8007cfe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007d02:	431a      	orrs	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	061b      	lsls	r3, r3, #24
 8007d0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007d10:	4931      	ldr	r1, [pc, #196]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007d12:	4313      	orrs	r3, r2
 8007d14:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d16:	4b30      	ldr	r3, [pc, #192]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	492d      	ldr	r1, [pc, #180]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d28:	4b2b      	ldr	r3, [pc, #172]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d2c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	4928      	ldr	r1, [pc, #160]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d3a:	4b27      	ldr	r3, [pc, #156]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3e:	4a26      	ldr	r2, [pc, #152]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d46:	4b24      	ldr	r3, [pc, #144]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007d48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d4a:	4b24      	ldr	r3, [pc, #144]	@ (8007ddc <RCCEx_PLL3_Config+0x160>)
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	69d2      	ldr	r2, [r2, #28]
 8007d52:	00d2      	lsls	r2, r2, #3
 8007d54:	4920      	ldr	r1, [pc, #128]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d106      	bne.n	8007d7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d70:	4a19      	ldr	r2, [pc, #100]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007d72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007d76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d78:	e00f      	b.n	8007d9a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d106      	bne.n	8007d8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d80:	4b15      	ldr	r3, [pc, #84]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d84:	4a14      	ldr	r2, [pc, #80]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007d86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d8c:	e005      	b.n	8007d9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d8e:	4b12      	ldr	r3, [pc, #72]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d92:	4a11      	ldr	r2, [pc, #68]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007d94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007da6:	f7f9 ff1f 	bl	8001be8 <HAL_GetTick>
 8007daa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007dac:	e008      	b.n	8007dc0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007dae:	f7f9 ff1b 	bl	8001be8 <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d901      	bls.n	8007dc0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e006      	b.n	8007dce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007dc0:	4b05      	ldr	r3, [pc, #20]	@ (8007dd8 <RCCEx_PLL3_Config+0x15c>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d0f0      	beq.n	8007dae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	58024400 	.word	0x58024400
 8007ddc:	ffff0007 	.word	0xffff0007

08007de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e049      	b.n	8007e86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d106      	bne.n	8007e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7f9 fc80 	bl	800170c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	3304      	adds	r3, #4
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	4610      	mov	r0, r2
 8007e20:	f000 f96e 	bl	8008100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b084      	sub	sp, #16
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f003 0302 	and.w	r3, r3, #2
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d020      	beq.n	8007ef2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f003 0302 	and.w	r3, r3, #2
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d01b      	beq.n	8007ef2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f06f 0202 	mvn.w	r2, #2
 8007ec2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	f003 0303 	and.w	r3, r3, #3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d003      	beq.n	8007ee0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f8f3 	bl	80080c4 <HAL_TIM_IC_CaptureCallback>
 8007ede:	e005      	b.n	8007eec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f8e5 	bl	80080b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f8f6 	bl	80080d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	f003 0304 	and.w	r3, r3, #4
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d020      	beq.n	8007f3e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f003 0304 	and.w	r3, r3, #4
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d01b      	beq.n	8007f3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f06f 0204 	mvn.w	r2, #4
 8007f0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2202      	movs	r2, #2
 8007f14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d003      	beq.n	8007f2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f8cd 	bl	80080c4 <HAL_TIM_IC_CaptureCallback>
 8007f2a:	e005      	b.n	8007f38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f8bf 	bl	80080b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f8d0 	bl	80080d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f003 0308 	and.w	r3, r3, #8
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d020      	beq.n	8007f8a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f003 0308 	and.w	r3, r3, #8
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d01b      	beq.n	8007f8a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f06f 0208 	mvn.w	r2, #8
 8007f5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2204      	movs	r2, #4
 8007f60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	69db      	ldr	r3, [r3, #28]
 8007f68:	f003 0303 	and.w	r3, r3, #3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d003      	beq.n	8007f78 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f8a7 	bl	80080c4 <HAL_TIM_IC_CaptureCallback>
 8007f76:	e005      	b.n	8007f84 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f899 	bl	80080b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f8aa 	bl	80080d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	f003 0310 	and.w	r3, r3, #16
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d020      	beq.n	8007fd6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f003 0310 	and.w	r3, r3, #16
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d01b      	beq.n	8007fd6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f06f 0210 	mvn.w	r2, #16
 8007fa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2208      	movs	r2, #8
 8007fac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d003      	beq.n	8007fc4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 f881 	bl	80080c4 <HAL_TIM_IC_CaptureCallback>
 8007fc2:	e005      	b.n	8007fd0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f873 	bl	80080b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f884 	bl	80080d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	f003 0301 	and.w	r3, r3, #1
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00c      	beq.n	8007ffa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f003 0301 	and.w	r3, r3, #1
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d007      	beq.n	8007ffa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f06f 0201 	mvn.w	r2, #1
 8007ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 f851 	bl	800809c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008000:	2b00      	cmp	r3, #0
 8008002:	d104      	bne.n	800800e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00c      	beq.n	8008028 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008014:	2b00      	cmp	r3, #0
 8008016:	d007      	beq.n	8008028 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f9a4 	bl	8008370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00c      	beq.n	800804c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008038:	2b00      	cmp	r3, #0
 800803a:	d007      	beq.n	800804c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f99c 	bl	8008384 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00c      	beq.n	8008070 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800805c:	2b00      	cmp	r3, #0
 800805e:	d007      	beq.n	8008070 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f83e 	bl	80080ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f003 0320 	and.w	r3, r3, #32
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00c      	beq.n	8008094 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f003 0320 	and.w	r3, r3, #32
 8008080:	2b00      	cmp	r3, #0
 8008082:	d007      	beq.n	8008094 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f06f 0220 	mvn.w	r2, #32
 800808c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f964 	bl	800835c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008094:	bf00      	nop
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a43      	ldr	r2, [pc, #268]	@ (8008220 <TIM_Base_SetConfig+0x120>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d013      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800811e:	d00f      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a40      	ldr	r2, [pc, #256]	@ (8008224 <TIM_Base_SetConfig+0x124>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d00b      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a3f      	ldr	r2, [pc, #252]	@ (8008228 <TIM_Base_SetConfig+0x128>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d007      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a3e      	ldr	r2, [pc, #248]	@ (800822c <TIM_Base_SetConfig+0x12c>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d003      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a3d      	ldr	r2, [pc, #244]	@ (8008230 <TIM_Base_SetConfig+0x130>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d108      	bne.n	8008152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	4313      	orrs	r3, r2
 8008150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a32      	ldr	r2, [pc, #200]	@ (8008220 <TIM_Base_SetConfig+0x120>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d01f      	beq.n	800819a <TIM_Base_SetConfig+0x9a>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008160:	d01b      	beq.n	800819a <TIM_Base_SetConfig+0x9a>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a2f      	ldr	r2, [pc, #188]	@ (8008224 <TIM_Base_SetConfig+0x124>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d017      	beq.n	800819a <TIM_Base_SetConfig+0x9a>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a2e      	ldr	r2, [pc, #184]	@ (8008228 <TIM_Base_SetConfig+0x128>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d013      	beq.n	800819a <TIM_Base_SetConfig+0x9a>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a2d      	ldr	r2, [pc, #180]	@ (800822c <TIM_Base_SetConfig+0x12c>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d00f      	beq.n	800819a <TIM_Base_SetConfig+0x9a>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a2c      	ldr	r2, [pc, #176]	@ (8008230 <TIM_Base_SetConfig+0x130>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d00b      	beq.n	800819a <TIM_Base_SetConfig+0x9a>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a2b      	ldr	r2, [pc, #172]	@ (8008234 <TIM_Base_SetConfig+0x134>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d007      	beq.n	800819a <TIM_Base_SetConfig+0x9a>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a2a      	ldr	r2, [pc, #168]	@ (8008238 <TIM_Base_SetConfig+0x138>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d003      	beq.n	800819a <TIM_Base_SetConfig+0x9a>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a29      	ldr	r2, [pc, #164]	@ (800823c <TIM_Base_SetConfig+0x13c>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d108      	bne.n	80081ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	689a      	ldr	r2, [r3, #8]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a14      	ldr	r2, [pc, #80]	@ (8008220 <TIM_Base_SetConfig+0x120>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d00f      	beq.n	80081f2 <TIM_Base_SetConfig+0xf2>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a16      	ldr	r2, [pc, #88]	@ (8008230 <TIM_Base_SetConfig+0x130>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d00b      	beq.n	80081f2 <TIM_Base_SetConfig+0xf2>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a15      	ldr	r2, [pc, #84]	@ (8008234 <TIM_Base_SetConfig+0x134>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d007      	beq.n	80081f2 <TIM_Base_SetConfig+0xf2>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a14      	ldr	r2, [pc, #80]	@ (8008238 <TIM_Base_SetConfig+0x138>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d003      	beq.n	80081f2 <TIM_Base_SetConfig+0xf2>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a13      	ldr	r2, [pc, #76]	@ (800823c <TIM_Base_SetConfig+0x13c>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d103      	bne.n	80081fa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	691a      	ldr	r2, [r3, #16]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f043 0204 	orr.w	r2, r3, #4
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	601a      	str	r2, [r3, #0]
}
 8008212:	bf00      	nop
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	40010000 	.word	0x40010000
 8008224:	40000400 	.word	0x40000400
 8008228:	40000800 	.word	0x40000800
 800822c:	40000c00 	.word	0x40000c00
 8008230:	40010400 	.word	0x40010400
 8008234:	40014000 	.word	0x40014000
 8008238:	40014400 	.word	0x40014400
 800823c:	40014800 	.word	0x40014800

08008240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008250:	2b01      	cmp	r3, #1
 8008252:	d101      	bne.n	8008258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008254:	2302      	movs	r3, #2
 8008256:	e06d      	b.n	8008334 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2202      	movs	r2, #2
 8008264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a30      	ldr	r2, [pc, #192]	@ (8008340 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d004      	beq.n	800828c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a2f      	ldr	r2, [pc, #188]	@ (8008344 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d108      	bne.n	800829e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008292:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	4313      	orrs	r3, r2
 800829c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a20      	ldr	r2, [pc, #128]	@ (8008340 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d022      	beq.n	8008308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082ca:	d01d      	beq.n	8008308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008348 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d018      	beq.n	8008308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a1c      	ldr	r2, [pc, #112]	@ (800834c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d013      	beq.n	8008308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a1a      	ldr	r2, [pc, #104]	@ (8008350 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d00e      	beq.n	8008308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a15      	ldr	r2, [pc, #84]	@ (8008344 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d009      	beq.n	8008308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a16      	ldr	r2, [pc, #88]	@ (8008354 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d004      	beq.n	8008308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a15      	ldr	r2, [pc, #84]	@ (8008358 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d10c      	bne.n	8008322 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800830e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	4313      	orrs	r3, r2
 8008318:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3714      	adds	r7, #20
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	40010000 	.word	0x40010000
 8008344:	40010400 	.word	0x40010400
 8008348:	40000400 	.word	0x40000400
 800834c:	40000800 	.word	0x40000800
 8008350:	40000c00 	.word	0x40000c00
 8008354:	40001800 	.word	0x40001800
 8008358:	40014000 	.word	0x40014000

0800835c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d101      	bne.n	80083aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e042      	b.n	8008430 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d106      	bne.n	80083c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f7f9 f9e5 	bl	800178c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2224      	movs	r2, #36	@ 0x24
 80083c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f022 0201 	bic.w	r2, r2, #1
 80083d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fd90 	bl	8008f08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f825 	bl	8008438 <UART_SetConfig>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d101      	bne.n	80083f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e01b      	b.n	8008430 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	685a      	ldr	r2, [r3, #4]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008406:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	689a      	ldr	r2, [r3, #8]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008416:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f042 0201 	orr.w	r2, r2, #1
 8008426:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fe0f 	bl	800904c <UART_CheckIdleState>
 800842e:	4603      	mov	r3, r0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800843c:	b092      	sub	sp, #72	@ 0x48
 800843e:	af00      	add	r7, sp, #0
 8008440:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	689a      	ldr	r2, [r3, #8]
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	431a      	orrs	r2, r3
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	431a      	orrs	r2, r3
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	69db      	ldr	r3, [r3, #28]
 800845c:	4313      	orrs	r3, r2
 800845e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	4bbe      	ldr	r3, [pc, #760]	@ (8008760 <UART_SetConfig+0x328>)
 8008468:	4013      	ands	r3, r2
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	6812      	ldr	r2, [r2, #0]
 800846e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008470:	430b      	orrs	r3, r1
 8008472:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	68da      	ldr	r2, [r3, #12]
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	430a      	orrs	r2, r1
 8008488:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4ab3      	ldr	r2, [pc, #716]	@ (8008764 <UART_SetConfig+0x32c>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d004      	beq.n	80084a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084a0:	4313      	orrs	r3, r2
 80084a2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	689a      	ldr	r2, [r3, #8]
 80084aa:	4baf      	ldr	r3, [pc, #700]	@ (8008768 <UART_SetConfig+0x330>)
 80084ac:	4013      	ands	r3, r2
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	6812      	ldr	r2, [r2, #0]
 80084b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80084b4:	430b      	orrs	r3, r1
 80084b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084be:	f023 010f 	bic.w	r1, r3, #15
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	430a      	orrs	r2, r1
 80084cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4aa6      	ldr	r2, [pc, #664]	@ (800876c <UART_SetConfig+0x334>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d177      	bne.n	80085c8 <UART_SetConfig+0x190>
 80084d8:	4ba5      	ldr	r3, [pc, #660]	@ (8008770 <UART_SetConfig+0x338>)
 80084da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084e0:	2b28      	cmp	r3, #40	@ 0x28
 80084e2:	d86d      	bhi.n	80085c0 <UART_SetConfig+0x188>
 80084e4:	a201      	add	r2, pc, #4	@ (adr r2, 80084ec <UART_SetConfig+0xb4>)
 80084e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ea:	bf00      	nop
 80084ec:	08008591 	.word	0x08008591
 80084f0:	080085c1 	.word	0x080085c1
 80084f4:	080085c1 	.word	0x080085c1
 80084f8:	080085c1 	.word	0x080085c1
 80084fc:	080085c1 	.word	0x080085c1
 8008500:	080085c1 	.word	0x080085c1
 8008504:	080085c1 	.word	0x080085c1
 8008508:	080085c1 	.word	0x080085c1
 800850c:	08008599 	.word	0x08008599
 8008510:	080085c1 	.word	0x080085c1
 8008514:	080085c1 	.word	0x080085c1
 8008518:	080085c1 	.word	0x080085c1
 800851c:	080085c1 	.word	0x080085c1
 8008520:	080085c1 	.word	0x080085c1
 8008524:	080085c1 	.word	0x080085c1
 8008528:	080085c1 	.word	0x080085c1
 800852c:	080085a1 	.word	0x080085a1
 8008530:	080085c1 	.word	0x080085c1
 8008534:	080085c1 	.word	0x080085c1
 8008538:	080085c1 	.word	0x080085c1
 800853c:	080085c1 	.word	0x080085c1
 8008540:	080085c1 	.word	0x080085c1
 8008544:	080085c1 	.word	0x080085c1
 8008548:	080085c1 	.word	0x080085c1
 800854c:	080085a9 	.word	0x080085a9
 8008550:	080085c1 	.word	0x080085c1
 8008554:	080085c1 	.word	0x080085c1
 8008558:	080085c1 	.word	0x080085c1
 800855c:	080085c1 	.word	0x080085c1
 8008560:	080085c1 	.word	0x080085c1
 8008564:	080085c1 	.word	0x080085c1
 8008568:	080085c1 	.word	0x080085c1
 800856c:	080085b1 	.word	0x080085b1
 8008570:	080085c1 	.word	0x080085c1
 8008574:	080085c1 	.word	0x080085c1
 8008578:	080085c1 	.word	0x080085c1
 800857c:	080085c1 	.word	0x080085c1
 8008580:	080085c1 	.word	0x080085c1
 8008584:	080085c1 	.word	0x080085c1
 8008588:	080085c1 	.word	0x080085c1
 800858c:	080085b9 	.word	0x080085b9
 8008590:	2301      	movs	r3, #1
 8008592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008596:	e222      	b.n	80089de <UART_SetConfig+0x5a6>
 8008598:	2304      	movs	r3, #4
 800859a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800859e:	e21e      	b.n	80089de <UART_SetConfig+0x5a6>
 80085a0:	2308      	movs	r3, #8
 80085a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a6:	e21a      	b.n	80089de <UART_SetConfig+0x5a6>
 80085a8:	2310      	movs	r3, #16
 80085aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ae:	e216      	b.n	80089de <UART_SetConfig+0x5a6>
 80085b0:	2320      	movs	r3, #32
 80085b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b6:	e212      	b.n	80089de <UART_SetConfig+0x5a6>
 80085b8:	2340      	movs	r3, #64	@ 0x40
 80085ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085be:	e20e      	b.n	80089de <UART_SetConfig+0x5a6>
 80085c0:	2380      	movs	r3, #128	@ 0x80
 80085c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085c6:	e20a      	b.n	80089de <UART_SetConfig+0x5a6>
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a69      	ldr	r2, [pc, #420]	@ (8008774 <UART_SetConfig+0x33c>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d130      	bne.n	8008634 <UART_SetConfig+0x1fc>
 80085d2:	4b67      	ldr	r3, [pc, #412]	@ (8008770 <UART_SetConfig+0x338>)
 80085d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	2b05      	cmp	r3, #5
 80085dc:	d826      	bhi.n	800862c <UART_SetConfig+0x1f4>
 80085de:	a201      	add	r2, pc, #4	@ (adr r2, 80085e4 <UART_SetConfig+0x1ac>)
 80085e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e4:	080085fd 	.word	0x080085fd
 80085e8:	08008605 	.word	0x08008605
 80085ec:	0800860d 	.word	0x0800860d
 80085f0:	08008615 	.word	0x08008615
 80085f4:	0800861d 	.word	0x0800861d
 80085f8:	08008625 	.word	0x08008625
 80085fc:	2300      	movs	r3, #0
 80085fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008602:	e1ec      	b.n	80089de <UART_SetConfig+0x5a6>
 8008604:	2304      	movs	r3, #4
 8008606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800860a:	e1e8      	b.n	80089de <UART_SetConfig+0x5a6>
 800860c:	2308      	movs	r3, #8
 800860e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008612:	e1e4      	b.n	80089de <UART_SetConfig+0x5a6>
 8008614:	2310      	movs	r3, #16
 8008616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800861a:	e1e0      	b.n	80089de <UART_SetConfig+0x5a6>
 800861c:	2320      	movs	r3, #32
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008622:	e1dc      	b.n	80089de <UART_SetConfig+0x5a6>
 8008624:	2340      	movs	r3, #64	@ 0x40
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800862a:	e1d8      	b.n	80089de <UART_SetConfig+0x5a6>
 800862c:	2380      	movs	r3, #128	@ 0x80
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008632:	e1d4      	b.n	80089de <UART_SetConfig+0x5a6>
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a4f      	ldr	r2, [pc, #316]	@ (8008778 <UART_SetConfig+0x340>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d130      	bne.n	80086a0 <UART_SetConfig+0x268>
 800863e:	4b4c      	ldr	r3, [pc, #304]	@ (8008770 <UART_SetConfig+0x338>)
 8008640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008642:	f003 0307 	and.w	r3, r3, #7
 8008646:	2b05      	cmp	r3, #5
 8008648:	d826      	bhi.n	8008698 <UART_SetConfig+0x260>
 800864a:	a201      	add	r2, pc, #4	@ (adr r2, 8008650 <UART_SetConfig+0x218>)
 800864c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008650:	08008669 	.word	0x08008669
 8008654:	08008671 	.word	0x08008671
 8008658:	08008679 	.word	0x08008679
 800865c:	08008681 	.word	0x08008681
 8008660:	08008689 	.word	0x08008689
 8008664:	08008691 	.word	0x08008691
 8008668:	2300      	movs	r3, #0
 800866a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800866e:	e1b6      	b.n	80089de <UART_SetConfig+0x5a6>
 8008670:	2304      	movs	r3, #4
 8008672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008676:	e1b2      	b.n	80089de <UART_SetConfig+0x5a6>
 8008678:	2308      	movs	r3, #8
 800867a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800867e:	e1ae      	b.n	80089de <UART_SetConfig+0x5a6>
 8008680:	2310      	movs	r3, #16
 8008682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008686:	e1aa      	b.n	80089de <UART_SetConfig+0x5a6>
 8008688:	2320      	movs	r3, #32
 800868a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800868e:	e1a6      	b.n	80089de <UART_SetConfig+0x5a6>
 8008690:	2340      	movs	r3, #64	@ 0x40
 8008692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008696:	e1a2      	b.n	80089de <UART_SetConfig+0x5a6>
 8008698:	2380      	movs	r3, #128	@ 0x80
 800869a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800869e:	e19e      	b.n	80089de <UART_SetConfig+0x5a6>
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a35      	ldr	r2, [pc, #212]	@ (800877c <UART_SetConfig+0x344>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d130      	bne.n	800870c <UART_SetConfig+0x2d4>
 80086aa:	4b31      	ldr	r3, [pc, #196]	@ (8008770 <UART_SetConfig+0x338>)
 80086ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ae:	f003 0307 	and.w	r3, r3, #7
 80086b2:	2b05      	cmp	r3, #5
 80086b4:	d826      	bhi.n	8008704 <UART_SetConfig+0x2cc>
 80086b6:	a201      	add	r2, pc, #4	@ (adr r2, 80086bc <UART_SetConfig+0x284>)
 80086b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086bc:	080086d5 	.word	0x080086d5
 80086c0:	080086dd 	.word	0x080086dd
 80086c4:	080086e5 	.word	0x080086e5
 80086c8:	080086ed 	.word	0x080086ed
 80086cc:	080086f5 	.word	0x080086f5
 80086d0:	080086fd 	.word	0x080086fd
 80086d4:	2300      	movs	r3, #0
 80086d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086da:	e180      	b.n	80089de <UART_SetConfig+0x5a6>
 80086dc:	2304      	movs	r3, #4
 80086de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086e2:	e17c      	b.n	80089de <UART_SetConfig+0x5a6>
 80086e4:	2308      	movs	r3, #8
 80086e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ea:	e178      	b.n	80089de <UART_SetConfig+0x5a6>
 80086ec:	2310      	movs	r3, #16
 80086ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086f2:	e174      	b.n	80089de <UART_SetConfig+0x5a6>
 80086f4:	2320      	movs	r3, #32
 80086f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086fa:	e170      	b.n	80089de <UART_SetConfig+0x5a6>
 80086fc:	2340      	movs	r3, #64	@ 0x40
 80086fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008702:	e16c      	b.n	80089de <UART_SetConfig+0x5a6>
 8008704:	2380      	movs	r3, #128	@ 0x80
 8008706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800870a:	e168      	b.n	80089de <UART_SetConfig+0x5a6>
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a1b      	ldr	r2, [pc, #108]	@ (8008780 <UART_SetConfig+0x348>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d142      	bne.n	800879c <UART_SetConfig+0x364>
 8008716:	4b16      	ldr	r3, [pc, #88]	@ (8008770 <UART_SetConfig+0x338>)
 8008718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800871a:	f003 0307 	and.w	r3, r3, #7
 800871e:	2b05      	cmp	r3, #5
 8008720:	d838      	bhi.n	8008794 <UART_SetConfig+0x35c>
 8008722:	a201      	add	r2, pc, #4	@ (adr r2, 8008728 <UART_SetConfig+0x2f0>)
 8008724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008728:	08008741 	.word	0x08008741
 800872c:	08008749 	.word	0x08008749
 8008730:	08008751 	.word	0x08008751
 8008734:	08008759 	.word	0x08008759
 8008738:	08008785 	.word	0x08008785
 800873c:	0800878d 	.word	0x0800878d
 8008740:	2300      	movs	r3, #0
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008746:	e14a      	b.n	80089de <UART_SetConfig+0x5a6>
 8008748:	2304      	movs	r3, #4
 800874a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800874e:	e146      	b.n	80089de <UART_SetConfig+0x5a6>
 8008750:	2308      	movs	r3, #8
 8008752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008756:	e142      	b.n	80089de <UART_SetConfig+0x5a6>
 8008758:	2310      	movs	r3, #16
 800875a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800875e:	e13e      	b.n	80089de <UART_SetConfig+0x5a6>
 8008760:	cfff69f3 	.word	0xcfff69f3
 8008764:	58000c00 	.word	0x58000c00
 8008768:	11fff4ff 	.word	0x11fff4ff
 800876c:	40011000 	.word	0x40011000
 8008770:	58024400 	.word	0x58024400
 8008774:	40004400 	.word	0x40004400
 8008778:	40004800 	.word	0x40004800
 800877c:	40004c00 	.word	0x40004c00
 8008780:	40005000 	.word	0x40005000
 8008784:	2320      	movs	r3, #32
 8008786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800878a:	e128      	b.n	80089de <UART_SetConfig+0x5a6>
 800878c:	2340      	movs	r3, #64	@ 0x40
 800878e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008792:	e124      	b.n	80089de <UART_SetConfig+0x5a6>
 8008794:	2380      	movs	r3, #128	@ 0x80
 8008796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800879a:	e120      	b.n	80089de <UART_SetConfig+0x5a6>
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4acb      	ldr	r2, [pc, #812]	@ (8008ad0 <UART_SetConfig+0x698>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d176      	bne.n	8008894 <UART_SetConfig+0x45c>
 80087a6:	4bcb      	ldr	r3, [pc, #812]	@ (8008ad4 <UART_SetConfig+0x69c>)
 80087a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80087ae:	2b28      	cmp	r3, #40	@ 0x28
 80087b0:	d86c      	bhi.n	800888c <UART_SetConfig+0x454>
 80087b2:	a201      	add	r2, pc, #4	@ (adr r2, 80087b8 <UART_SetConfig+0x380>)
 80087b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b8:	0800885d 	.word	0x0800885d
 80087bc:	0800888d 	.word	0x0800888d
 80087c0:	0800888d 	.word	0x0800888d
 80087c4:	0800888d 	.word	0x0800888d
 80087c8:	0800888d 	.word	0x0800888d
 80087cc:	0800888d 	.word	0x0800888d
 80087d0:	0800888d 	.word	0x0800888d
 80087d4:	0800888d 	.word	0x0800888d
 80087d8:	08008865 	.word	0x08008865
 80087dc:	0800888d 	.word	0x0800888d
 80087e0:	0800888d 	.word	0x0800888d
 80087e4:	0800888d 	.word	0x0800888d
 80087e8:	0800888d 	.word	0x0800888d
 80087ec:	0800888d 	.word	0x0800888d
 80087f0:	0800888d 	.word	0x0800888d
 80087f4:	0800888d 	.word	0x0800888d
 80087f8:	0800886d 	.word	0x0800886d
 80087fc:	0800888d 	.word	0x0800888d
 8008800:	0800888d 	.word	0x0800888d
 8008804:	0800888d 	.word	0x0800888d
 8008808:	0800888d 	.word	0x0800888d
 800880c:	0800888d 	.word	0x0800888d
 8008810:	0800888d 	.word	0x0800888d
 8008814:	0800888d 	.word	0x0800888d
 8008818:	08008875 	.word	0x08008875
 800881c:	0800888d 	.word	0x0800888d
 8008820:	0800888d 	.word	0x0800888d
 8008824:	0800888d 	.word	0x0800888d
 8008828:	0800888d 	.word	0x0800888d
 800882c:	0800888d 	.word	0x0800888d
 8008830:	0800888d 	.word	0x0800888d
 8008834:	0800888d 	.word	0x0800888d
 8008838:	0800887d 	.word	0x0800887d
 800883c:	0800888d 	.word	0x0800888d
 8008840:	0800888d 	.word	0x0800888d
 8008844:	0800888d 	.word	0x0800888d
 8008848:	0800888d 	.word	0x0800888d
 800884c:	0800888d 	.word	0x0800888d
 8008850:	0800888d 	.word	0x0800888d
 8008854:	0800888d 	.word	0x0800888d
 8008858:	08008885 	.word	0x08008885
 800885c:	2301      	movs	r3, #1
 800885e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008862:	e0bc      	b.n	80089de <UART_SetConfig+0x5a6>
 8008864:	2304      	movs	r3, #4
 8008866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800886a:	e0b8      	b.n	80089de <UART_SetConfig+0x5a6>
 800886c:	2308      	movs	r3, #8
 800886e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008872:	e0b4      	b.n	80089de <UART_SetConfig+0x5a6>
 8008874:	2310      	movs	r3, #16
 8008876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800887a:	e0b0      	b.n	80089de <UART_SetConfig+0x5a6>
 800887c:	2320      	movs	r3, #32
 800887e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008882:	e0ac      	b.n	80089de <UART_SetConfig+0x5a6>
 8008884:	2340      	movs	r3, #64	@ 0x40
 8008886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800888a:	e0a8      	b.n	80089de <UART_SetConfig+0x5a6>
 800888c:	2380      	movs	r3, #128	@ 0x80
 800888e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008892:	e0a4      	b.n	80089de <UART_SetConfig+0x5a6>
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a8f      	ldr	r2, [pc, #572]	@ (8008ad8 <UART_SetConfig+0x6a0>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d130      	bne.n	8008900 <UART_SetConfig+0x4c8>
 800889e:	4b8d      	ldr	r3, [pc, #564]	@ (8008ad4 <UART_SetConfig+0x69c>)
 80088a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088a2:	f003 0307 	and.w	r3, r3, #7
 80088a6:	2b05      	cmp	r3, #5
 80088a8:	d826      	bhi.n	80088f8 <UART_SetConfig+0x4c0>
 80088aa:	a201      	add	r2, pc, #4	@ (adr r2, 80088b0 <UART_SetConfig+0x478>)
 80088ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b0:	080088c9 	.word	0x080088c9
 80088b4:	080088d1 	.word	0x080088d1
 80088b8:	080088d9 	.word	0x080088d9
 80088bc:	080088e1 	.word	0x080088e1
 80088c0:	080088e9 	.word	0x080088e9
 80088c4:	080088f1 	.word	0x080088f1
 80088c8:	2300      	movs	r3, #0
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ce:	e086      	b.n	80089de <UART_SetConfig+0x5a6>
 80088d0:	2304      	movs	r3, #4
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d6:	e082      	b.n	80089de <UART_SetConfig+0x5a6>
 80088d8:	2308      	movs	r3, #8
 80088da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088de:	e07e      	b.n	80089de <UART_SetConfig+0x5a6>
 80088e0:	2310      	movs	r3, #16
 80088e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e6:	e07a      	b.n	80089de <UART_SetConfig+0x5a6>
 80088e8:	2320      	movs	r3, #32
 80088ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ee:	e076      	b.n	80089de <UART_SetConfig+0x5a6>
 80088f0:	2340      	movs	r3, #64	@ 0x40
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f6:	e072      	b.n	80089de <UART_SetConfig+0x5a6>
 80088f8:	2380      	movs	r3, #128	@ 0x80
 80088fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fe:	e06e      	b.n	80089de <UART_SetConfig+0x5a6>
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a75      	ldr	r2, [pc, #468]	@ (8008adc <UART_SetConfig+0x6a4>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d130      	bne.n	800896c <UART_SetConfig+0x534>
 800890a:	4b72      	ldr	r3, [pc, #456]	@ (8008ad4 <UART_SetConfig+0x69c>)
 800890c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800890e:	f003 0307 	and.w	r3, r3, #7
 8008912:	2b05      	cmp	r3, #5
 8008914:	d826      	bhi.n	8008964 <UART_SetConfig+0x52c>
 8008916:	a201      	add	r2, pc, #4	@ (adr r2, 800891c <UART_SetConfig+0x4e4>)
 8008918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891c:	08008935 	.word	0x08008935
 8008920:	0800893d 	.word	0x0800893d
 8008924:	08008945 	.word	0x08008945
 8008928:	0800894d 	.word	0x0800894d
 800892c:	08008955 	.word	0x08008955
 8008930:	0800895d 	.word	0x0800895d
 8008934:	2300      	movs	r3, #0
 8008936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893a:	e050      	b.n	80089de <UART_SetConfig+0x5a6>
 800893c:	2304      	movs	r3, #4
 800893e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008942:	e04c      	b.n	80089de <UART_SetConfig+0x5a6>
 8008944:	2308      	movs	r3, #8
 8008946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800894a:	e048      	b.n	80089de <UART_SetConfig+0x5a6>
 800894c:	2310      	movs	r3, #16
 800894e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008952:	e044      	b.n	80089de <UART_SetConfig+0x5a6>
 8008954:	2320      	movs	r3, #32
 8008956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895a:	e040      	b.n	80089de <UART_SetConfig+0x5a6>
 800895c:	2340      	movs	r3, #64	@ 0x40
 800895e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008962:	e03c      	b.n	80089de <UART_SetConfig+0x5a6>
 8008964:	2380      	movs	r3, #128	@ 0x80
 8008966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800896a:	e038      	b.n	80089de <UART_SetConfig+0x5a6>
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a5b      	ldr	r2, [pc, #364]	@ (8008ae0 <UART_SetConfig+0x6a8>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d130      	bne.n	80089d8 <UART_SetConfig+0x5a0>
 8008976:	4b57      	ldr	r3, [pc, #348]	@ (8008ad4 <UART_SetConfig+0x69c>)
 8008978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800897a:	f003 0307 	and.w	r3, r3, #7
 800897e:	2b05      	cmp	r3, #5
 8008980:	d826      	bhi.n	80089d0 <UART_SetConfig+0x598>
 8008982:	a201      	add	r2, pc, #4	@ (adr r2, 8008988 <UART_SetConfig+0x550>)
 8008984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008988:	080089a1 	.word	0x080089a1
 800898c:	080089a9 	.word	0x080089a9
 8008990:	080089b1 	.word	0x080089b1
 8008994:	080089b9 	.word	0x080089b9
 8008998:	080089c1 	.word	0x080089c1
 800899c:	080089c9 	.word	0x080089c9
 80089a0:	2302      	movs	r3, #2
 80089a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089a6:	e01a      	b.n	80089de <UART_SetConfig+0x5a6>
 80089a8:	2304      	movs	r3, #4
 80089aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ae:	e016      	b.n	80089de <UART_SetConfig+0x5a6>
 80089b0:	2308      	movs	r3, #8
 80089b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089b6:	e012      	b.n	80089de <UART_SetConfig+0x5a6>
 80089b8:	2310      	movs	r3, #16
 80089ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089be:	e00e      	b.n	80089de <UART_SetConfig+0x5a6>
 80089c0:	2320      	movs	r3, #32
 80089c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089c6:	e00a      	b.n	80089de <UART_SetConfig+0x5a6>
 80089c8:	2340      	movs	r3, #64	@ 0x40
 80089ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ce:	e006      	b.n	80089de <UART_SetConfig+0x5a6>
 80089d0:	2380      	movs	r3, #128	@ 0x80
 80089d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089d6:	e002      	b.n	80089de <UART_SetConfig+0x5a6>
 80089d8:	2380      	movs	r3, #128	@ 0x80
 80089da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a3f      	ldr	r2, [pc, #252]	@ (8008ae0 <UART_SetConfig+0x6a8>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	f040 80f8 	bne.w	8008bda <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089ea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80089ee:	2b20      	cmp	r3, #32
 80089f0:	dc46      	bgt.n	8008a80 <UART_SetConfig+0x648>
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	f2c0 8082 	blt.w	8008afc <UART_SetConfig+0x6c4>
 80089f8:	3b02      	subs	r3, #2
 80089fa:	2b1e      	cmp	r3, #30
 80089fc:	d87e      	bhi.n	8008afc <UART_SetConfig+0x6c4>
 80089fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008a04 <UART_SetConfig+0x5cc>)
 8008a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a04:	08008a87 	.word	0x08008a87
 8008a08:	08008afd 	.word	0x08008afd
 8008a0c:	08008a8f 	.word	0x08008a8f
 8008a10:	08008afd 	.word	0x08008afd
 8008a14:	08008afd 	.word	0x08008afd
 8008a18:	08008afd 	.word	0x08008afd
 8008a1c:	08008a9f 	.word	0x08008a9f
 8008a20:	08008afd 	.word	0x08008afd
 8008a24:	08008afd 	.word	0x08008afd
 8008a28:	08008afd 	.word	0x08008afd
 8008a2c:	08008afd 	.word	0x08008afd
 8008a30:	08008afd 	.word	0x08008afd
 8008a34:	08008afd 	.word	0x08008afd
 8008a38:	08008afd 	.word	0x08008afd
 8008a3c:	08008aaf 	.word	0x08008aaf
 8008a40:	08008afd 	.word	0x08008afd
 8008a44:	08008afd 	.word	0x08008afd
 8008a48:	08008afd 	.word	0x08008afd
 8008a4c:	08008afd 	.word	0x08008afd
 8008a50:	08008afd 	.word	0x08008afd
 8008a54:	08008afd 	.word	0x08008afd
 8008a58:	08008afd 	.word	0x08008afd
 8008a5c:	08008afd 	.word	0x08008afd
 8008a60:	08008afd 	.word	0x08008afd
 8008a64:	08008afd 	.word	0x08008afd
 8008a68:	08008afd 	.word	0x08008afd
 8008a6c:	08008afd 	.word	0x08008afd
 8008a70:	08008afd 	.word	0x08008afd
 8008a74:	08008afd 	.word	0x08008afd
 8008a78:	08008afd 	.word	0x08008afd
 8008a7c:	08008aef 	.word	0x08008aef
 8008a80:	2b40      	cmp	r3, #64	@ 0x40
 8008a82:	d037      	beq.n	8008af4 <UART_SetConfig+0x6bc>
 8008a84:	e03a      	b.n	8008afc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a86:	f7fe fc37 	bl	80072f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a8c:	e03c      	b.n	8008b08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fe fc46 	bl	8007324 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a9c:	e034      	b.n	8008b08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a9e:	f107 0318 	add.w	r3, r7, #24
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7fe fd92 	bl	80075cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aac:	e02c      	b.n	8008b08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008aae:	4b09      	ldr	r3, [pc, #36]	@ (8008ad4 <UART_SetConfig+0x69c>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0320 	and.w	r3, r3, #32
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d016      	beq.n	8008ae8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008aba:	4b06      	ldr	r3, [pc, #24]	@ (8008ad4 <UART_SetConfig+0x69c>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	08db      	lsrs	r3, r3, #3
 8008ac0:	f003 0303 	and.w	r3, r3, #3
 8008ac4:	4a07      	ldr	r2, [pc, #28]	@ (8008ae4 <UART_SetConfig+0x6ac>)
 8008ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8008aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008acc:	e01c      	b.n	8008b08 <UART_SetConfig+0x6d0>
 8008ace:	bf00      	nop
 8008ad0:	40011400 	.word	0x40011400
 8008ad4:	58024400 	.word	0x58024400
 8008ad8:	40007800 	.word	0x40007800
 8008adc:	40007c00 	.word	0x40007c00
 8008ae0:	58000c00 	.word	0x58000c00
 8008ae4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008ae8:	4b9d      	ldr	r3, [pc, #628]	@ (8008d60 <UART_SetConfig+0x928>)
 8008aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aec:	e00c      	b.n	8008b08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008aee:	4b9d      	ldr	r3, [pc, #628]	@ (8008d64 <UART_SetConfig+0x92c>)
 8008af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af2:	e009      	b.n	8008b08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008af4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008afa:	e005      	b.n	8008b08 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008afc:	2300      	movs	r3, #0
 8008afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008b06:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 81de 	beq.w	8008ecc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b14:	4a94      	ldr	r2, [pc, #592]	@ (8008d68 <UART_SetConfig+0x930>)
 8008b16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b22:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	685a      	ldr	r2, [r3, #4]
 8008b28:	4613      	mov	r3, r2
 8008b2a:	005b      	lsls	r3, r3, #1
 8008b2c:	4413      	add	r3, r2
 8008b2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d305      	bcc.n	8008b40 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d903      	bls.n	8008b48 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008b46:	e1c1      	b.n	8008ecc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	60bb      	str	r3, [r7, #8]
 8008b4e:	60fa      	str	r2, [r7, #12]
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b54:	4a84      	ldr	r2, [pc, #528]	@ (8008d68 <UART_SetConfig+0x930>)
 8008b56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	603b      	str	r3, [r7, #0]
 8008b60:	607a      	str	r2, [r7, #4]
 8008b62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b6a:	f7f7 fbb5 	bl	80002d8 <__aeabi_uldivmod>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	460b      	mov	r3, r1
 8008b72:	4610      	mov	r0, r2
 8008b74:	4619      	mov	r1, r3
 8008b76:	f04f 0200 	mov.w	r2, #0
 8008b7a:	f04f 0300 	mov.w	r3, #0
 8008b7e:	020b      	lsls	r3, r1, #8
 8008b80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b84:	0202      	lsls	r2, r0, #8
 8008b86:	6979      	ldr	r1, [r7, #20]
 8008b88:	6849      	ldr	r1, [r1, #4]
 8008b8a:	0849      	lsrs	r1, r1, #1
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	460c      	mov	r4, r1
 8008b90:	4605      	mov	r5, r0
 8008b92:	eb12 0804 	adds.w	r8, r2, r4
 8008b96:	eb43 0905 	adc.w	r9, r3, r5
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	469a      	mov	sl, r3
 8008ba2:	4693      	mov	fp, r2
 8008ba4:	4652      	mov	r2, sl
 8008ba6:	465b      	mov	r3, fp
 8008ba8:	4640      	mov	r0, r8
 8008baa:	4649      	mov	r1, r9
 8008bac:	f7f7 fb94 	bl	80002d8 <__aeabi_uldivmod>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bbe:	d308      	bcc.n	8008bd2 <UART_SetConfig+0x79a>
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bc6:	d204      	bcs.n	8008bd2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008bce:	60da      	str	r2, [r3, #12]
 8008bd0:	e17c      	b.n	8008ecc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008bd8:	e178      	b.n	8008ecc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008be2:	f040 80c5 	bne.w	8008d70 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008be6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008bea:	2b20      	cmp	r3, #32
 8008bec:	dc48      	bgt.n	8008c80 <UART_SetConfig+0x848>
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	db7b      	blt.n	8008cea <UART_SetConfig+0x8b2>
 8008bf2:	2b20      	cmp	r3, #32
 8008bf4:	d879      	bhi.n	8008cea <UART_SetConfig+0x8b2>
 8008bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8008bfc <UART_SetConfig+0x7c4>)
 8008bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfc:	08008c87 	.word	0x08008c87
 8008c00:	08008c8f 	.word	0x08008c8f
 8008c04:	08008ceb 	.word	0x08008ceb
 8008c08:	08008ceb 	.word	0x08008ceb
 8008c0c:	08008c97 	.word	0x08008c97
 8008c10:	08008ceb 	.word	0x08008ceb
 8008c14:	08008ceb 	.word	0x08008ceb
 8008c18:	08008ceb 	.word	0x08008ceb
 8008c1c:	08008ca7 	.word	0x08008ca7
 8008c20:	08008ceb 	.word	0x08008ceb
 8008c24:	08008ceb 	.word	0x08008ceb
 8008c28:	08008ceb 	.word	0x08008ceb
 8008c2c:	08008ceb 	.word	0x08008ceb
 8008c30:	08008ceb 	.word	0x08008ceb
 8008c34:	08008ceb 	.word	0x08008ceb
 8008c38:	08008ceb 	.word	0x08008ceb
 8008c3c:	08008cb7 	.word	0x08008cb7
 8008c40:	08008ceb 	.word	0x08008ceb
 8008c44:	08008ceb 	.word	0x08008ceb
 8008c48:	08008ceb 	.word	0x08008ceb
 8008c4c:	08008ceb 	.word	0x08008ceb
 8008c50:	08008ceb 	.word	0x08008ceb
 8008c54:	08008ceb 	.word	0x08008ceb
 8008c58:	08008ceb 	.word	0x08008ceb
 8008c5c:	08008ceb 	.word	0x08008ceb
 8008c60:	08008ceb 	.word	0x08008ceb
 8008c64:	08008ceb 	.word	0x08008ceb
 8008c68:	08008ceb 	.word	0x08008ceb
 8008c6c:	08008ceb 	.word	0x08008ceb
 8008c70:	08008ceb 	.word	0x08008ceb
 8008c74:	08008ceb 	.word	0x08008ceb
 8008c78:	08008ceb 	.word	0x08008ceb
 8008c7c:	08008cdd 	.word	0x08008cdd
 8008c80:	2b40      	cmp	r3, #64	@ 0x40
 8008c82:	d02e      	beq.n	8008ce2 <UART_SetConfig+0x8aa>
 8008c84:	e031      	b.n	8008cea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c86:	f7fc fb81 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 8008c8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c8c:	e033      	b.n	8008cf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c8e:	f7fc fb93 	bl	80053b8 <HAL_RCC_GetPCLK2Freq>
 8008c92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c94:	e02f      	b.n	8008cf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fe fb42 	bl	8007324 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ca4:	e027      	b.n	8008cf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ca6:	f107 0318 	add.w	r3, r7, #24
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fe fc8e 	bl	80075cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cb4:	e01f      	b.n	8008cf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cb6:	4b2d      	ldr	r3, [pc, #180]	@ (8008d6c <UART_SetConfig+0x934>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 0320 	and.w	r3, r3, #32
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d009      	beq.n	8008cd6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008cc2:	4b2a      	ldr	r3, [pc, #168]	@ (8008d6c <UART_SetConfig+0x934>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	08db      	lsrs	r3, r3, #3
 8008cc8:	f003 0303 	and.w	r3, r3, #3
 8008ccc:	4a24      	ldr	r2, [pc, #144]	@ (8008d60 <UART_SetConfig+0x928>)
 8008cce:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008cd4:	e00f      	b.n	8008cf6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008cd6:	4b22      	ldr	r3, [pc, #136]	@ (8008d60 <UART_SetConfig+0x928>)
 8008cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cda:	e00c      	b.n	8008cf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008cdc:	4b21      	ldr	r3, [pc, #132]	@ (8008d64 <UART_SetConfig+0x92c>)
 8008cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ce0:	e009      	b.n	8008cf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ce2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ce8:	e005      	b.n	8008cf6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008cea:	2300      	movs	r3, #0
 8008cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008cf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 80e7 	beq.w	8008ecc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d02:	4a19      	ldr	r2, [pc, #100]	@ (8008d68 <UART_SetConfig+0x930>)
 8008d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d10:	005a      	lsls	r2, r3, #1
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	085b      	lsrs	r3, r3, #1
 8008d18:	441a      	add	r2, r3
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d22:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d26:	2b0f      	cmp	r3, #15
 8008d28:	d916      	bls.n	8008d58 <UART_SetConfig+0x920>
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d30:	d212      	bcs.n	8008d58 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	f023 030f 	bic.w	r3, r3, #15
 8008d3a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d3e:	085b      	lsrs	r3, r3, #1
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	f003 0307 	and.w	r3, r3, #7
 8008d46:	b29a      	uxth	r2, r3
 8008d48:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008d54:	60da      	str	r2, [r3, #12]
 8008d56:	e0b9      	b.n	8008ecc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008d5e:	e0b5      	b.n	8008ecc <UART_SetConfig+0xa94>
 8008d60:	03d09000 	.word	0x03d09000
 8008d64:	003d0900 	.word	0x003d0900
 8008d68:	080095d8 	.word	0x080095d8
 8008d6c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d70:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008d74:	2b20      	cmp	r3, #32
 8008d76:	dc49      	bgt.n	8008e0c <UART_SetConfig+0x9d4>
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	db7c      	blt.n	8008e76 <UART_SetConfig+0xa3e>
 8008d7c:	2b20      	cmp	r3, #32
 8008d7e:	d87a      	bhi.n	8008e76 <UART_SetConfig+0xa3e>
 8008d80:	a201      	add	r2, pc, #4	@ (adr r2, 8008d88 <UART_SetConfig+0x950>)
 8008d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d86:	bf00      	nop
 8008d88:	08008e13 	.word	0x08008e13
 8008d8c:	08008e1b 	.word	0x08008e1b
 8008d90:	08008e77 	.word	0x08008e77
 8008d94:	08008e77 	.word	0x08008e77
 8008d98:	08008e23 	.word	0x08008e23
 8008d9c:	08008e77 	.word	0x08008e77
 8008da0:	08008e77 	.word	0x08008e77
 8008da4:	08008e77 	.word	0x08008e77
 8008da8:	08008e33 	.word	0x08008e33
 8008dac:	08008e77 	.word	0x08008e77
 8008db0:	08008e77 	.word	0x08008e77
 8008db4:	08008e77 	.word	0x08008e77
 8008db8:	08008e77 	.word	0x08008e77
 8008dbc:	08008e77 	.word	0x08008e77
 8008dc0:	08008e77 	.word	0x08008e77
 8008dc4:	08008e77 	.word	0x08008e77
 8008dc8:	08008e43 	.word	0x08008e43
 8008dcc:	08008e77 	.word	0x08008e77
 8008dd0:	08008e77 	.word	0x08008e77
 8008dd4:	08008e77 	.word	0x08008e77
 8008dd8:	08008e77 	.word	0x08008e77
 8008ddc:	08008e77 	.word	0x08008e77
 8008de0:	08008e77 	.word	0x08008e77
 8008de4:	08008e77 	.word	0x08008e77
 8008de8:	08008e77 	.word	0x08008e77
 8008dec:	08008e77 	.word	0x08008e77
 8008df0:	08008e77 	.word	0x08008e77
 8008df4:	08008e77 	.word	0x08008e77
 8008df8:	08008e77 	.word	0x08008e77
 8008dfc:	08008e77 	.word	0x08008e77
 8008e00:	08008e77 	.word	0x08008e77
 8008e04:	08008e77 	.word	0x08008e77
 8008e08:	08008e69 	.word	0x08008e69
 8008e0c:	2b40      	cmp	r3, #64	@ 0x40
 8008e0e:	d02e      	beq.n	8008e6e <UART_SetConfig+0xa36>
 8008e10:	e031      	b.n	8008e76 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e12:	f7fc fabb 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 8008e16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e18:	e033      	b.n	8008e82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e1a:	f7fc facd 	bl	80053b8 <HAL_RCC_GetPCLK2Freq>
 8008e1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e20:	e02f      	b.n	8008e82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fe fa7c 	bl	8007324 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e30:	e027      	b.n	8008e82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e32:	f107 0318 	add.w	r3, r7, #24
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fe fbc8 	bl	80075cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e40:	e01f      	b.n	8008e82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e42:	4b2d      	ldr	r3, [pc, #180]	@ (8008ef8 <UART_SetConfig+0xac0>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0320 	and.w	r3, r3, #32
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d009      	beq.n	8008e62 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8008ef8 <UART_SetConfig+0xac0>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	08db      	lsrs	r3, r3, #3
 8008e54:	f003 0303 	and.w	r3, r3, #3
 8008e58:	4a28      	ldr	r2, [pc, #160]	@ (8008efc <UART_SetConfig+0xac4>)
 8008e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e60:	e00f      	b.n	8008e82 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008e62:	4b26      	ldr	r3, [pc, #152]	@ (8008efc <UART_SetConfig+0xac4>)
 8008e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e66:	e00c      	b.n	8008e82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e68:	4b25      	ldr	r3, [pc, #148]	@ (8008f00 <UART_SetConfig+0xac8>)
 8008e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e6c:	e009      	b.n	8008e82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e74:	e005      	b.n	8008e82 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008e76:	2300      	movs	r3, #0
 8008e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008e80:	bf00      	nop
    }

    if (pclk != 0U)
 8008e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d021      	beq.n	8008ecc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8008f04 <UART_SetConfig+0xacc>)
 8008e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e92:	461a      	mov	r2, r3
 8008e94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e96:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	085b      	lsrs	r3, r3, #1
 8008ea0:	441a      	add	r2, r3
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eae:	2b0f      	cmp	r3, #15
 8008eb0:	d909      	bls.n	8008ec6 <UART_SetConfig+0xa8e>
 8008eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008eb8:	d205      	bcs.n	8008ec6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	60da      	str	r2, [r3, #12]
 8008ec4:	e002      	b.n	8008ecc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008ee8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3748      	adds	r7, #72	@ 0x48
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ef6:	bf00      	nop
 8008ef8:	58024400 	.word	0x58024400
 8008efc:	03d09000 	.word	0x03d09000
 8008f00:	003d0900 	.word	0x003d0900
 8008f04:	080095d8 	.word	0x080095d8

08008f08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f14:	f003 0308 	and.w	r3, r3, #8
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00a      	beq.n	8008f32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	430a      	orrs	r2, r1
 8008f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00a      	beq.n	8008f54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	430a      	orrs	r2, r1
 8008f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f58:	f003 0302 	and.w	r3, r3, #2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00a      	beq.n	8008f76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	430a      	orrs	r2, r1
 8008f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f7a:	f003 0304 	and.w	r3, r3, #4
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00a      	beq.n	8008f98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	430a      	orrs	r2, r1
 8008f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f9c:	f003 0310 	and.w	r3, r3, #16
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00a      	beq.n	8008fba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	430a      	orrs	r2, r1
 8008fb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fbe:	f003 0320 	and.w	r3, r3, #32
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00a      	beq.n	8008fdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	430a      	orrs	r2, r1
 8008fda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d01a      	beq.n	800901e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009006:	d10a      	bne.n	800901e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	430a      	orrs	r2, r1
 800901c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00a      	beq.n	8009040 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	430a      	orrs	r2, r1
 800903e:	605a      	str	r2, [r3, #4]
  }
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b098      	sub	sp, #96	@ 0x60
 8009050:	af02      	add	r7, sp, #8
 8009052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800905c:	f7f8 fdc4 	bl	8001be8 <HAL_GetTick>
 8009060:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 0308 	and.w	r3, r3, #8
 800906c:	2b08      	cmp	r3, #8
 800906e:	d12f      	bne.n	80090d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009070:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009078:	2200      	movs	r2, #0
 800907a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f88e 	bl	80091a0 <UART_WaitOnFlagUntilTimeout>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d022      	beq.n	80090d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009092:	e853 3f00 	ldrex	r3, [r3]
 8009096:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800909a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800909e:	653b      	str	r3, [r7, #80]	@ 0x50
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	461a      	mov	r2, r3
 80090a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80090aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090b0:	e841 2300 	strex	r3, r2, [r1]
 80090b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1e6      	bne.n	800908a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2220      	movs	r2, #32
 80090c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e063      	b.n	8009198 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 0304 	and.w	r3, r3, #4
 80090da:	2b04      	cmp	r3, #4
 80090dc:	d149      	bne.n	8009172 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090e6:	2200      	movs	r2, #0
 80090e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f857 	bl	80091a0 <UART_WaitOnFlagUntilTimeout>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d03c      	beq.n	8009172 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009100:	e853 3f00 	ldrex	r3, [r3]
 8009104:	623b      	str	r3, [r7, #32]
   return(result);
 8009106:	6a3b      	ldr	r3, [r7, #32]
 8009108:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800910c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	461a      	mov	r2, r3
 8009114:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009116:	633b      	str	r3, [r7, #48]	@ 0x30
 8009118:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800911c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800911e:	e841 2300 	strex	r3, r2, [r1]
 8009122:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1e6      	bne.n	80090f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	3308      	adds	r3, #8
 8009130:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	e853 3f00 	ldrex	r3, [r3]
 8009138:	60fb      	str	r3, [r7, #12]
   return(result);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f023 0301 	bic.w	r3, r3, #1
 8009140:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3308      	adds	r3, #8
 8009148:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800914a:	61fa      	str	r2, [r7, #28]
 800914c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914e:	69b9      	ldr	r1, [r7, #24]
 8009150:	69fa      	ldr	r2, [r7, #28]
 8009152:	e841 2300 	strex	r3, r2, [r1]
 8009156:	617b      	str	r3, [r7, #20]
   return(result);
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1e5      	bne.n	800912a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2220      	movs	r2, #32
 8009162:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800916e:	2303      	movs	r3, #3
 8009170:	e012      	b.n	8009198 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2220      	movs	r2, #32
 8009176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2220      	movs	r2, #32
 800917e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3758      	adds	r7, #88	@ 0x58
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	603b      	str	r3, [r7, #0]
 80091ac:	4613      	mov	r3, r2
 80091ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091b0:	e04f      	b.n	8009252 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b8:	d04b      	beq.n	8009252 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091ba:	f7f8 fd15 	bl	8001be8 <HAL_GetTick>
 80091be:	4602      	mov	r2, r0
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	69ba      	ldr	r2, [r7, #24]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d302      	bcc.n	80091d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d101      	bne.n	80091d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80091d0:	2303      	movs	r3, #3
 80091d2:	e04e      	b.n	8009272 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f003 0304 	and.w	r3, r3, #4
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d037      	beq.n	8009252 <UART_WaitOnFlagUntilTimeout+0xb2>
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2b80      	cmp	r3, #128	@ 0x80
 80091e6:	d034      	beq.n	8009252 <UART_WaitOnFlagUntilTimeout+0xb2>
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2b40      	cmp	r3, #64	@ 0x40
 80091ec:	d031      	beq.n	8009252 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	69db      	ldr	r3, [r3, #28]
 80091f4:	f003 0308 	and.w	r3, r3, #8
 80091f8:	2b08      	cmp	r3, #8
 80091fa:	d110      	bne.n	800921e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2208      	movs	r2, #8
 8009202:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009204:	68f8      	ldr	r0, [r7, #12]
 8009206:	f000 f839 	bl	800927c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2208      	movs	r2, #8
 800920e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e029      	b.n	8009272 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	69db      	ldr	r3, [r3, #28]
 8009224:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009228:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800922c:	d111      	bne.n	8009252 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009236:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f000 f81f 	bl	800927c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2220      	movs	r2, #32
 8009242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800924e:	2303      	movs	r3, #3
 8009250:	e00f      	b.n	8009272 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	69da      	ldr	r2, [r3, #28]
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	4013      	ands	r3, r2
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	429a      	cmp	r2, r3
 8009260:	bf0c      	ite	eq
 8009262:	2301      	moveq	r3, #1
 8009264:	2300      	movne	r3, #0
 8009266:	b2db      	uxtb	r3, r3
 8009268:	461a      	mov	r2, r3
 800926a:	79fb      	ldrb	r3, [r7, #7]
 800926c:	429a      	cmp	r2, r3
 800926e:	d0a0      	beq.n	80091b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
	...

0800927c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800927c:	b480      	push	{r7}
 800927e:	b095      	sub	sp, #84	@ 0x54
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800928c:	e853 3f00 	ldrex	r3, [r3]
 8009290:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009294:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009298:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80092a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80092a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80092aa:	e841 2300 	strex	r3, r2, [r1]
 80092ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1e6      	bne.n	8009284 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3308      	adds	r3, #8
 80092bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092be:	6a3b      	ldr	r3, [r7, #32]
 80092c0:	e853 3f00 	ldrex	r3, [r3]
 80092c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80092c6:	69fa      	ldr	r2, [r7, #28]
 80092c8:	4b1e      	ldr	r3, [pc, #120]	@ (8009344 <UART_EndRxTransfer+0xc8>)
 80092ca:	4013      	ands	r3, r2
 80092cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	3308      	adds	r3, #8
 80092d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092de:	e841 2300 	strex	r3, r2, [r1]
 80092e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1e5      	bne.n	80092b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d118      	bne.n	8009324 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	e853 3f00 	ldrex	r3, [r3]
 80092fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	f023 0310 	bic.w	r3, r3, #16
 8009306:	647b      	str	r3, [r7, #68]	@ 0x44
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	461a      	mov	r2, r3
 800930e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009310:	61bb      	str	r3, [r7, #24]
 8009312:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009314:	6979      	ldr	r1, [r7, #20]
 8009316:	69ba      	ldr	r2, [r7, #24]
 8009318:	e841 2300 	strex	r3, r2, [r1]
 800931c:	613b      	str	r3, [r7, #16]
   return(result);
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d1e6      	bne.n	80092f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2220      	movs	r2, #32
 8009328:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009338:	bf00      	nop
 800933a:	3754      	adds	r7, #84	@ 0x54
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr
 8009344:	effffffe 	.word	0xeffffffe

08009348 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009356:	2b01      	cmp	r3, #1
 8009358:	d101      	bne.n	800935e <HAL_UARTEx_DisableFifoMode+0x16>
 800935a:	2302      	movs	r3, #2
 800935c:	e027      	b.n	80093ae <HAL_UARTEx_DisableFifoMode+0x66>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2224      	movs	r2, #36	@ 0x24
 800936a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f022 0201 	bic.w	r2, r2, #1
 8009384:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800938c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68fa      	ldr	r2, [r7, #12]
 800939a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2220      	movs	r2, #32
 80093a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3714      	adds	r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr

080093ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b084      	sub	sp, #16
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d101      	bne.n	80093d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80093ce:	2302      	movs	r3, #2
 80093d0:	e02d      	b.n	800942e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2201      	movs	r2, #1
 80093d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2224      	movs	r2, #36	@ 0x24
 80093de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f022 0201 	bic.w	r2, r2, #1
 80093f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	430a      	orrs	r2, r1
 800940c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f850 	bl	80094b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2220      	movs	r2, #32
 8009420:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b084      	sub	sp, #16
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009446:	2b01      	cmp	r3, #1
 8009448:	d101      	bne.n	800944e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800944a:	2302      	movs	r3, #2
 800944c:	e02d      	b.n	80094aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2224      	movs	r2, #36	@ 0x24
 800945a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f022 0201 	bic.w	r2, r2, #1
 8009474:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	683a      	ldr	r2, [r7, #0]
 8009486:	430a      	orrs	r2, r1
 8009488:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f812 	bl	80094b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2220      	movs	r2, #32
 800949c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
	...

080094b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d108      	bne.n	80094d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80094d4:	e031      	b.n	800953a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80094d6:	2310      	movs	r3, #16
 80094d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80094da:	2310      	movs	r3, #16
 80094dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	0e5b      	lsrs	r3, r3, #25
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	f003 0307 	and.w	r3, r3, #7
 80094ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	0f5b      	lsrs	r3, r3, #29
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	f003 0307 	and.w	r3, r3, #7
 80094fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094fe:	7bbb      	ldrb	r3, [r7, #14]
 8009500:	7b3a      	ldrb	r2, [r7, #12]
 8009502:	4911      	ldr	r1, [pc, #68]	@ (8009548 <UARTEx_SetNbDataToProcess+0x94>)
 8009504:	5c8a      	ldrb	r2, [r1, r2]
 8009506:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800950a:	7b3a      	ldrb	r2, [r7, #12]
 800950c:	490f      	ldr	r1, [pc, #60]	@ (800954c <UARTEx_SetNbDataToProcess+0x98>)
 800950e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009510:	fb93 f3f2 	sdiv	r3, r3, r2
 8009514:	b29a      	uxth	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800951c:	7bfb      	ldrb	r3, [r7, #15]
 800951e:	7b7a      	ldrb	r2, [r7, #13]
 8009520:	4909      	ldr	r1, [pc, #36]	@ (8009548 <UARTEx_SetNbDataToProcess+0x94>)
 8009522:	5c8a      	ldrb	r2, [r1, r2]
 8009524:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009528:	7b7a      	ldrb	r2, [r7, #13]
 800952a:	4908      	ldr	r1, [pc, #32]	@ (800954c <UARTEx_SetNbDataToProcess+0x98>)
 800952c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800952e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009532:	b29a      	uxth	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800953a:	bf00      	nop
 800953c:	3714      	adds	r7, #20
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	080095f0 	.word	0x080095f0
 800954c:	080095f8 	.word	0x080095f8

08009550 <memset>:
 8009550:	4402      	add	r2, r0
 8009552:	4603      	mov	r3, r0
 8009554:	4293      	cmp	r3, r2
 8009556:	d100      	bne.n	800955a <memset+0xa>
 8009558:	4770      	bx	lr
 800955a:	f803 1b01 	strb.w	r1, [r3], #1
 800955e:	e7f9      	b.n	8009554 <memset+0x4>

08009560 <__libc_init_array>:
 8009560:	b570      	push	{r4, r5, r6, lr}
 8009562:	4d0d      	ldr	r5, [pc, #52]	@ (8009598 <__libc_init_array+0x38>)
 8009564:	4c0d      	ldr	r4, [pc, #52]	@ (800959c <__libc_init_array+0x3c>)
 8009566:	1b64      	subs	r4, r4, r5
 8009568:	10a4      	asrs	r4, r4, #2
 800956a:	2600      	movs	r6, #0
 800956c:	42a6      	cmp	r6, r4
 800956e:	d109      	bne.n	8009584 <__libc_init_array+0x24>
 8009570:	4d0b      	ldr	r5, [pc, #44]	@ (80095a0 <__libc_init_array+0x40>)
 8009572:	4c0c      	ldr	r4, [pc, #48]	@ (80095a4 <__libc_init_array+0x44>)
 8009574:	f000 f818 	bl	80095a8 <_init>
 8009578:	1b64      	subs	r4, r4, r5
 800957a:	10a4      	asrs	r4, r4, #2
 800957c:	2600      	movs	r6, #0
 800957e:	42a6      	cmp	r6, r4
 8009580:	d105      	bne.n	800958e <__libc_init_array+0x2e>
 8009582:	bd70      	pop	{r4, r5, r6, pc}
 8009584:	f855 3b04 	ldr.w	r3, [r5], #4
 8009588:	4798      	blx	r3
 800958a:	3601      	adds	r6, #1
 800958c:	e7ee      	b.n	800956c <__libc_init_array+0xc>
 800958e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009592:	4798      	blx	r3
 8009594:	3601      	adds	r6, #1
 8009596:	e7f2      	b.n	800957e <__libc_init_array+0x1e>
 8009598:	08009608 	.word	0x08009608
 800959c:	08009608 	.word	0x08009608
 80095a0:	08009608 	.word	0x08009608
 80095a4:	0800960c 	.word	0x0800960c

080095a8 <_init>:
 80095a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095aa:	bf00      	nop
 80095ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ae:	bc08      	pop	{r3}
 80095b0:	469e      	mov	lr, r3
 80095b2:	4770      	bx	lr

080095b4 <_fini>:
 80095b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b6:	bf00      	nop
 80095b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ba:	bc08      	pop	{r3}
 80095bc:	469e      	mov	lr, r3
 80095be:	4770      	bx	lr
