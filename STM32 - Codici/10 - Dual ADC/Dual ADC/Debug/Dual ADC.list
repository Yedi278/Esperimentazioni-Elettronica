
Dual ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a04  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005c9c  08005c9c  00006c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005cdc  08005cdc  00006cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005ce4  08005ce4  00006ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005ce8  08005ce8  00006ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08005cec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a34  24000010  08005cfc  00007010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000a44  08005cfc  00007a44  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000283e5  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004007  00000000  00000000  0002f423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00012994  00000000  00000000  0003342a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001380  00000000  00000000  00045dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000254e  00000000  00000000  00047140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003a6e7  00000000  00000000  0004968e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002b47d  00000000  00000000  00083d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017c740  00000000  00000000  000af1f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0022b932  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000038ac  00000000  00000000  0022b978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000008e  00000000  00000000  0022f224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005c84 	.word	0x08005c84

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005c84 	.word	0x08005c84

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ADC_custom_init>:

void ADCx_custom_init(ADC_TypeDef *ADCx, uint8_t INx_Pin){

//	ADCx->CR &= ~ADC_CR_ADSTART;

	ADCx->SQR1 = 0; // per azzerare la configurazione dell'ide
 80005c8:	4b3f      	ldr	r3, [pc, #252]	@ (80006c8 <ADC_custom_init+0x100>)
 80005ca:	2200      	movs	r2, #0
	// Fine accensione

	/* ADR INIZIALIZZATO */
}

void ADC_custom_init(){
 80005cc:	b410      	push	{r4}
	ADCx->SQR1 = 0; // per azzerare la configurazione dell'ide
 80005ce:	631a      	str	r2, [r3, #48]	@ 0x30
	ADCx->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere 0=1
 80005d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80005d2:	6319      	str	r1, [r3, #48]	@ 0x30
	ADCx->SQR1 |= (INx_Pin << ADC_SQR1_SQ1_Pos);
 80005d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80005d6:	6319      	str	r1, [r3, #48]	@ 0x30
	ADCx->PCSEL = 0;
 80005d8:	61da      	str	r2, [r3, #28]
	ADCx->PCSEL |= (1 << (ADC_PCSEL_PCSEL_Pos + INx_Pin)); // Dichiaro quali canali leggere : 18 e 19
 80005da:	69da      	ldr	r2, [r3, #28]
 80005dc:	f042 0201 	orr.w	r2, r2, #1
 80005e0:	61da      	str	r2, [r3, #28]
	ADCx->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 80005e2:	689a      	ldr	r2, [r3, #8]
 80005e4:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 80005e8:	609a      	str	r2, [r3, #8]
	ADCx->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 80005ea:	689a      	ldr	r2, [r3, #8]
 80005ec:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80005f0:	609a      	str	r2, [r3, #8]
	ADCx->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 80005f2:	689a      	ldr	r2, [r3, #8]
 80005f4:	f022 0201 	bic.w	r2, r2, #1
 80005f8:	609a      	str	r2, [r3, #8]
	ADCx->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 80005fa:	689a      	ldr	r2, [r3, #8]
 80005fc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000600:	609a      	str	r2, [r3, #8]
	while((ADCx->CR & ADC_CR_ADCAL) != 0){};
 8000602:	689a      	ldr	r2, [r3, #8]
 8000604:	2a00      	cmp	r2, #0
 8000606:	dbfc      	blt.n	8000602 <ADC_custom_init+0x3a>
	ADCx->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 8000608:	681a      	ldr	r2, [r3, #0]
	while((ADCx->ISR & ADC_ISR_ADRDY) != 0){}
 800060a:	492f      	ldr	r1, [pc, #188]	@ (80006c8 <ADC_custom_init+0x100>)
	ADCx->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 800060c:	f042 0201 	orr.w	r2, r2, #1
 8000610:	601a      	str	r2, [r3, #0]
	ADCx->CR |= ADC_CR_ADEN;		// Accendo l' ADC
 8000612:	689a      	ldr	r2, [r3, #8]
 8000614:	f042 0201 	orr.w	r2, r2, #1
 8000618:	609a      	str	r2, [r3, #8]
	while((ADCx->ISR & ADC_ISR_ADRDY) != 0){}
 800061a:	680b      	ldr	r3, [r1, #0]
 800061c:	f013 0301 	ands.w	r3, r3, #1
 8000620:	d1fb      	bne.n	800061a <ADC_custom_init+0x52>
	ADCx->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 8000622:	6808      	ldr	r0, [r1, #0]
	ADCx->SQR1 = 0; // per azzerare la configurazione dell'ide
 8000624:	4a29      	ldr	r2, [pc, #164]	@ (80006cc <ADC_custom_init+0x104>)
	ADCx->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 8000626:	f040 0001 	orr.w	r0, r0, #1
 800062a:	6008      	str	r0, [r1, #0]

	/*	PRIMO ADC	*/

	/*	IN0 -> PIN PC2 o A4 */
	ADCx_custom_init(ADC3, 0);
	ADC3->IER &= ~ADC_IER_EOCIE;	// interrupt ADC
 800062c:	6848      	ldr	r0, [r1, #4]
 800062e:	f020 0004 	bic.w	r0, r0, #4
 8000632:	6048      	str	r0, [r1, #4]
	ADCx->SQR1 = 0; // per azzerare la configurazione dell'ide
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
	ADCx->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere 0=1
 8000636:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8000638:	6311      	str	r1, [r2, #48]	@ 0x30
	ADCx->SQR1 |= (INx_Pin << ADC_SQR1_SQ1_Pos);
 800063a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800063c:	f441 6198 	orr.w	r1, r1, #1216	@ 0x4c0
 8000640:	6311      	str	r1, [r2, #48]	@ 0x30
	ADCx->PCSEL = 0;
 8000642:	61d3      	str	r3, [r2, #28]
	ADCx->PCSEL |= (1 << (ADC_PCSEL_PCSEL_Pos + INx_Pin)); // Dichiaro quali canali leggere : 18 e 19
 8000644:	69d3      	ldr	r3, [r2, #28]
 8000646:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800064a:	61d3      	str	r3, [r2, #28]
	ADCx->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 800064c:	6893      	ldr	r3, [r2, #8]
 800064e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000652:	6093      	str	r3, [r2, #8]
	ADCx->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 8000654:	6893      	ldr	r3, [r2, #8]
 8000656:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800065a:	6093      	str	r3, [r2, #8]
	ADCx->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 800065c:	6893      	ldr	r3, [r2, #8]
 800065e:	f023 0301 	bic.w	r3, r3, #1
 8000662:	6093      	str	r3, [r2, #8]
	ADCx->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 8000664:	6893      	ldr	r3, [r2, #8]
 8000666:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800066a:	6093      	str	r3, [r2, #8]
	while((ADCx->CR & ADC_CR_ADCAL) != 0){};
 800066c:	6893      	ldr	r3, [r2, #8]
 800066e:	2b00      	cmp	r3, #0
 8000670:	dbfc      	blt.n	800066c <ADC_custom_init+0xa4>
	ADCx->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 8000672:	6813      	ldr	r3, [r2, #0]
	while((ADCx->ISR & ADC_ISR_ADRDY) != 0){}
 8000674:	4915      	ldr	r1, [pc, #84]	@ (80006cc <ADC_custom_init+0x104>)
	ADCx->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	6013      	str	r3, [r2, #0]
	ADCx->CR |= ADC_CR_ADEN;		// Accendo l' ADC
 800067c:	6893      	ldr	r3, [r2, #8]
 800067e:	f043 0301 	orr.w	r3, r3, #1
 8000682:	6093      	str	r3, [r2, #8]
	while((ADCx->ISR & ADC_ISR_ADRDY) != 0){}
 8000684:	680b      	ldr	r3, [r1, #0]
 8000686:	f013 0301 	ands.w	r3, r3, #1
 800068a:	d1fb      	bne.n	8000684 <ADC_custom_init+0xbc>
	ADCx->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 800068c:	680a      	ldr	r2, [r1, #0]
	ADCx_custom_init(ADC1, 19);
	ADC1->IER &= ~ADC_IER_EOCIE;	// interrupt ADC


	// TIM6 set to 240Mhz
	TIM6->PSC = 1; // TIM6 CLOCK/PSC
 800068e:	2401      	movs	r4, #1
 8000690:	480f      	ldr	r0, [pc, #60]	@ (80006d0 <ADC_custom_init+0x108>)
	ADCx->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 8000692:	4322      	orrs	r2, r4
 8000694:	600a      	str	r2, [r1, #0]
	ADC1->IER &= ~ADC_IER_EOCIE;	// interrupt ADC
 8000696:	684a      	ldr	r2, [r1, #4]
 8000698:	f022 0204 	bic.w	r2, r2, #4
 800069c:	604a      	str	r2, [r1, #4]
	TIM6->PSC = 1; // TIM6 CLOCK/PSC
 800069e:	6284      	str	r4, [r0, #40]	@ 0x28
	TIM6->ARR = 1;	// TIM6 CLOCK/PSC/ARR
 80006a0:	62c4      	str	r4, [r0, #44]	@ 0x2c
	TIM6->CNT = 0;
 80006a2:	6243      	str	r3, [r0, #36]	@ 0x24
	TIM6->DIER &= ~TIM_DIER_UIE;
 80006a4:	68c1      	ldr	r1, [r0, #12]

	TIM7->PSC = 1;
 80006a6:	4a0b      	ldr	r2, [pc, #44]	@ (80006d4 <ADC_custom_init+0x10c>)
	TIM6->DIER &= ~TIM_DIER_UIE;
 80006a8:	f021 0101 	bic.w	r1, r1, #1
 80006ac:	60c1      	str	r1, [r0, #12]
	TIM7->PSC = 1;
 80006ae:	6294      	str	r4, [r2, #40]	@ 0x28
	TIM7->ARR = 1;
 80006b0:	62d4      	str	r4, [r2, #44]	@ 0x2c
	TIM7->CNT = 0;
 80006b2:	6253      	str	r3, [r2, #36]	@ 0x24
	TIM7->DIER |= TIM_DIER_UIE;
 80006b4:	68d3      	ldr	r3, [r2, #12]
 80006b6:	4323      	orrs	r3, r4
	TIM7->CR1 &= ~TIM_CR1_CEN;
}
 80006b8:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM7->DIER |= TIM_DIER_UIE;
 80006bc:	60d3      	str	r3, [r2, #12]
	TIM7->CR1 &= ~TIM_CR1_CEN;
 80006be:	6813      	ldr	r3, [r2, #0]
 80006c0:	f023 0301 	bic.w	r3, r3, #1
 80006c4:	6013      	str	r3, [r2, #0]
}
 80006c6:	4770      	bx	lr
 80006c8:	58026000 	.word	0x58026000
 80006cc:	40022000 	.word	0x40022000
 80006d0:	40001000 	.word	0x40001000
 80006d4:	40001400 	.word	0x40001400

080006d8 <COMP_custom_init>:
bool enable = 	 false;
bool pre_triggd = false;

void COMP_custom_init(){

	DAC1->CR |= DAC_CR_EN1;			// attivo DAC
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <COMP_custom_init+0x4c>)
	DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;

	COMP2->CFGR |= COMP_CFGRx_EN;	// attivo il comparatore
	COMP1->CFGR |= COMP_CFGRx_EN;

	triggd = false;
 80006da:	2200      	movs	r2, #0
	COMP2->CFGR |= COMP_CFGRx_EN;	// attivo il comparatore
 80006dc:	4912      	ldr	r1, [pc, #72]	@ (8000728 <COMP_custom_init+0x50>)
	DAC1->CR |= DAC_CR_EN1;			// attivo DAC
 80006de:	6818      	ldr	r0, [r3, #0]
void COMP_custom_init(){
 80006e0:	b410      	push	{r4}
	DAC1->CR |= DAC_CR_EN1;			// attivo DAC
 80006e2:	f040 0001 	orr.w	r0, r0, #1
	DAC1->DHR12R1 = 130;			// imposto soglia del comparatore IN 12 BIT NON 16
 80006e6:	2482      	movs	r4, #130	@ 0x82
	DAC1->CR |= DAC_CR_EN1;			// attivo DAC
 80006e8:	6018      	str	r0, [r3, #0]
	DAC1->DHR12R1 = 130;			// imposto soglia del comparatore IN 12 BIT NON 16
 80006ea:	609c      	str	r4, [r3, #8]
	DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 80006ec:	6858      	ldr	r0, [r3, #4]
	triggd = false;
 80006ee:	4c0f      	ldr	r4, [pc, #60]	@ (800072c <COMP_custom_init+0x54>)
	DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 80006f0:	f040 0001 	orr.w	r0, r0, #1
 80006f4:	6058      	str	r0, [r3, #4]
	COMP2->CFGR |= COMP_CFGRx_EN;	// attivo il comparatore
 80006f6:	f8d1 3810 	ldr.w	r3, [r1, #2064]	@ 0x810
	acquiring = false;
 80006fa:	480d      	ldr	r0, [pc, #52]	@ (8000730 <COMP_custom_init+0x58>)
	COMP2->CFGR |= COMP_CFGRx_EN;	// attivo il comparatore
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	f8c1 3810 	str.w	r3, [r1, #2064]	@ 0x810
	COMP1->CFGR |= COMP_CFGRx_EN;
 8000704:	f8d1 380c 	ldr.w	r3, [r1, #2060]	@ 0x80c
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	f8c1 380c 	str.w	r3, [r1, #2060]	@ 0x80c
	enable = false;
 8000710:	4908      	ldr	r1, [pc, #32]	@ (8000734 <COMP_custom_init+0x5c>)
	pre_triggd = false;
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <COMP_custom_init+0x60>)
	triggd = false;
 8000714:	7022      	strb	r2, [r4, #0]
	acquiring = false;
 8000716:	7002      	strb	r2, [r0, #0]
}
 8000718:	f85d 4b04 	ldr.w	r4, [sp], #4
	enable = false;
 800071c:	700a      	strb	r2, [r1, #0]
	pre_triggd = false;
 800071e:	701a      	strb	r2, [r3, #0]
}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	40007400 	.word	0x40007400
 8000728:	58003000 	.word	0x58003000
 800072c:	2400002f 	.word	0x2400002f
 8000730:	2400002e 	.word	0x2400002e
 8000734:	2400002d 	.word	0x2400002d
 8000738:	2400002c 	.word	0x2400002c

0800073c <TIM7_custom_interrupt>:

void TIM7_custom_interrupt(){

	if(!acquiring){
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <TIM7_custom_interrupt+0x48>)
 800073e:	7813      	ldrb	r3, [r2, #0]
 8000740:	b94b      	cbnz	r3, 8000756 <TIM7_custom_interrupt+0x1a>
		if( (COMP12->SR&COMP_SR_C1VAL) && (COMP12->SR&COMP_SR_C2VAL) ){
 8000742:	4911      	ldr	r1, [pc, #68]	@ (8000788 <TIM7_custom_interrupt+0x4c>)
 8000744:	6808      	ldr	r0, [r1, #0]
 8000746:	07c0      	lsls	r0, r0, #31
 8000748:	d506      	bpl.n	8000758 <TIM7_custom_interrupt+0x1c>
 800074a:	6809      	ldr	r1, [r1, #0]
 800074c:	0789      	lsls	r1, r1, #30
 800074e:	d503      	bpl.n	8000758 <TIM7_custom_interrupt+0x1c>
			if(pre_triggd){
 8000750:	490e      	ldr	r1, [pc, #56]	@ (800078c <TIM7_custom_interrupt+0x50>)
 8000752:	7808      	ldrb	r0, [r1, #0]
 8000754:	b920      	cbnz	r0, 8000760 <TIM7_custom_interrupt+0x24>
 8000756:	4770      	bx	lr
				TIM7->CR1 &= ~TIM_CR1_CEN;
				pre_triggd = false;
				return;
			}
		}else{
			pre_triggd = true;
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <TIM7_custom_interrupt+0x50>)
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
			return;
 800075e:	4770      	bx	lr
void TIM7_custom_interrupt(){
 8000760:	b410      	push	{r4}
				acquiring = true;
 8000762:	2001      	movs	r0, #1
				TIM6->CR1 |= TIM_CR1_CEN;
 8000764:	4c0a      	ldr	r4, [pc, #40]	@ (8000790 <TIM7_custom_interrupt+0x54>)
				acquiring = true;
 8000766:	7010      	strb	r0, [r2, #0]
				TIM6->CR1 |= TIM_CR1_CEN;
 8000768:	6822      	ldr	r2, [r4, #0]
				TIM7->CR1 &= ~TIM_CR1_CEN;
 800076a:	480a      	ldr	r0, [pc, #40]	@ (8000794 <TIM7_custom_interrupt+0x58>)
				TIM6->CR1 |= TIM_CR1_CEN;
 800076c:	f042 0201 	orr.w	r2, r2, #1
 8000770:	6022      	str	r2, [r4, #0]
				TIM7->CR1 &= ~TIM_CR1_CEN;
 8000772:	6802      	ldr	r2, [r0, #0]
		}
	}
}
 8000774:	f85d 4b04 	ldr.w	r4, [sp], #4
				TIM7->CR1 &= ~TIM_CR1_CEN;
 8000778:	f022 0201 	bic.w	r2, r2, #1
 800077c:	6002      	str	r2, [r0, #0]
				pre_triggd = false;
 800077e:	700b      	strb	r3, [r1, #0]
}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	2400002e 	.word	0x2400002e
 8000788:	58003800 	.word	0x58003800
 800078c:	2400002c 	.word	0x2400002c
 8000790:	40001000 	.word	0x40001000
 8000794:	40001400 	.word	0x40001400

08000798 <DMA_custom_init>:

uint16_t DMA_data_buffer[2*DATA_LENGTH];

uint16_t data_index=0;

void DMA_custom_init(){
 8000798:	b410      	push	{r4}

	data_index = 0;

	DMA1_Stream0->M0AR = (uint32_t) (&DMA_data_buffer[0]);	// inidico l'indirizzo dello storarge di dati
 800079a:	4925      	ldr	r1, [pc, #148]	@ (8000830 <DMA_custom_init+0x98>)
	data_index = 0;
 800079c:	f04f 0c00 	mov.w	ip, #0
 80007a0:	4c24      	ldr	r4, [pc, #144]	@ (8000834 <DMA_custom_init+0x9c>)

	DMA1_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
	DMA1_Stream1->PAR = (uint32_t) (&USART3->TDR);
	DMA2_Stream0->PAR = (uint32_t) (&ADC1->DR);

	DMA2_Stream0->NDTR = DATA_LENGTH;
 80007a2:	f44f 70c8 	mov.w	r0, #400	@ 0x190
	DMA1_Stream0->M0AR = (uint32_t) (&DMA_data_buffer[0]);	// inidico l'indirizzo dello storarge di dati
 80007a6:	4b24      	ldr	r3, [pc, #144]	@ (8000838 <DMA_custom_init+0xa0>)
	data_index = 0;
 80007a8:	f8a4 c000 	strh.w	ip, [r4]
	DMA2_Stream0->M0AR = (uint32_t) (&DMA_data_buffer[DATA_LENGTH]);	// inidico l'indirizzo dello storarge di dati
 80007ac:	f501 7448 	add.w	r4, r1, #800	@ 0x320
 80007b0:	4a22      	ldr	r2, [pc, #136]	@ (800083c <DMA_custom_init+0xa4>)
	DMA1_Stream0->M0AR = (uint32_t) (&DMA_data_buffer[0]);	// inidico l'indirizzo dello storarge di dati
 80007b2:	61d9      	str	r1, [r3, #28]
	DMA1_Stream1->M0AR = (uint32_t) (&DMA_data_buffer[0]);
 80007b4:	6359      	str	r1, [r3, #52]	@ 0x34
	DMA2_Stream0->M0AR = (uint32_t) (&DMA_data_buffer[DATA_LENGTH]);	// inidico l'indirizzo dello storarge di dati
 80007b6:	61d4      	str	r4, [r2, #28]
	DMA1_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
 80007b8:	4c21      	ldr	r4, [pc, #132]	@ (8000840 <DMA_custom_init+0xa8>)
	DMA1_Stream1->PAR = (uint32_t) (&USART3->TDR);
 80007ba:	4922      	ldr	r1, [pc, #136]	@ (8000844 <DMA_custom_init+0xac>)
	DMA1_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
 80007bc:	619c      	str	r4, [r3, #24]
	DMA2_Stream0->PAR = (uint32_t) (&ADC1->DR);
 80007be:	f104 4468 	add.w	r4, r4, #3892314112	@ 0xe8000000
	DMA1_Stream1->PAR = (uint32_t) (&USART3->TDR);
 80007c2:	6319      	str	r1, [r3, #48]	@ 0x30
	DMA1_Stream0->NDTR = DATA_LENGTH;			// numero elementi da prendere da ADC3
	DMA1_Stream1->NDTR = 2* (2*DATA_LENGTH);			// numero elementi da mandare a USART3
 80007c4:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
	DMA2_Stream0->PAR = (uint32_t) (&ADC1->DR);
 80007c8:	f5a4 4480 	sub.w	r4, r4, #16384	@ 0x4000
 80007cc:	6194      	str	r4, [r2, #24]
	DMA2_Stream0->NDTR = DATA_LENGTH;
 80007ce:	6150      	str	r0, [r2, #20]
	DMA1_Stream0->NDTR = DATA_LENGTH;			// numero elementi da prendere da ADC3
 80007d0:	6158      	str	r0, [r3, #20]
	DMA1_Stream1->NDTR = 2* (2*DATA_LENGTH);			// numero elementi da mandare a USART3
 80007d2:	62d9      	str	r1, [r3, #44]	@ 0x2c

	DMA1_Stream0->CR |= DMA_SxCR_TCIE;		// ablilito interrupt di fine ricezione
 80007d4:	6918      	ldr	r0, [r3, #16]
	DMA1_Stream1->CR |= DMA_SxCR_TCIE;		// abilito interrupt di fine trasmissione
	DMA2_Stream0->CR &= ~DMA_SxCR_TCIE;

	ADC3->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);	// DMA in cont mode
 80007d6:	491c      	ldr	r1, [pc, #112]	@ (8000848 <DMA_custom_init+0xb0>)
	DMA1_Stream0->CR |= DMA_SxCR_TCIE;		// ablilito interrupt di fine ricezione
 80007d8:	f040 0010 	orr.w	r0, r0, #16
 80007dc:	6118      	str	r0, [r3, #16]
	DMA1_Stream1->CR |= DMA_SxCR_TCIE;		// abilito interrupt di fine trasmissione
 80007de:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80007e0:	f040 0010 	orr.w	r0, r0, #16
 80007e4:	6298      	str	r0, [r3, #40]	@ 0x28
	DMA2_Stream0->CR &= ~DMA_SxCR_TCIE;
 80007e6:	6910      	ldr	r0, [r2, #16]
 80007e8:	f020 0010 	bic.w	r0, r0, #16
 80007ec:	6110      	str	r0, [r2, #16]
	ADC3->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);	// DMA in cont mode
 80007ee:	68cc      	ldr	r4, [r1, #12]
	ADC1->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);
 80007f0:	4816      	ldr	r0, [pc, #88]	@ (800084c <DMA_custom_init+0xb4>)
	ADC3->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);	// DMA in cont mode
 80007f2:	f044 0403 	orr.w	r4, r4, #3
 80007f6:	60cc      	str	r4, [r1, #12]
	ADC1->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);
 80007f8:	68c4      	ldr	r4, [r0, #12]
 80007fa:	f044 0403 	orr.w	r4, r4, #3
 80007fe:	60c4      	str	r4, [r0, #12]

	DMA1_Stream0->CR |= DMA_SxCR_EN;
 8000800:	691c      	ldr	r4, [r3, #16]
 8000802:	f044 0401 	orr.w	r4, r4, #1
 8000806:	611c      	str	r4, [r3, #16]
	DMA1_Stream1->CR &= ~DMA_SxCR_EN;
 8000808:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800080a:	f024 0401 	bic.w	r4, r4, #1
 800080e:	629c      	str	r4, [r3, #40]	@ 0x28
	DMA2_Stream0->CR |= DMA_SxCR_EN;
 8000810:	6913      	ldr	r3, [r2, #16]

	ADC1->CR |= ADC_CR_ADSTART;
	ADC3->CR |= ADC_CR_ADSTART;
}
 8000812:	f85d 4b04 	ldr.w	r4, [sp], #4
	DMA2_Stream0->CR |= DMA_SxCR_EN;
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	6113      	str	r3, [r2, #16]
	ADC1->CR |= ADC_CR_ADSTART;
 800081c:	6883      	ldr	r3, [r0, #8]
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	6083      	str	r3, [r0, #8]
	ADC3->CR |= ADC_CR_ADSTART;
 8000824:	688b      	ldr	r3, [r1, #8]
 8000826:	f043 0304 	orr.w	r3, r3, #4
 800082a:	608b      	str	r3, [r1, #8]
}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	24000034 	.word	0x24000034
 8000834:	24000030 	.word	0x24000030
 8000838:	40020000 	.word	0x40020000
 800083c:	40020400 	.word	0x40020400
 8000840:	58026040 	.word	0x58026040
 8000844:	40004828 	.word	0x40004828
 8000848:	58026000 	.word	0x58026000
 800084c:	40022000 	.word	0x40022000

08000850 <DMA_custom_interrupt_tx>:

void DMA_custom_interrupt_tx(){
 8000850:	b410      	push	{r4}

	USART3->CR3 &= ~USART_CR3_DMAT;			  // SPENGO trasmissione usart
 8000852:	4c12      	ldr	r4, [pc, #72]	@ (800089c <DMA_custom_interrupt_tx+0x4c>)

	DMA1->LIFCR = 0xffffffff;
 8000854:	f04f 31ff 	mov.w	r1, #4294967295
 8000858:	4a11      	ldr	r2, [pc, #68]	@ (80008a0 <DMA_custom_interrupt_tx+0x50>)
	DMA2->LIFCR = 0xffffffff;
	DMA2->HIFCR = 0xffffffff;

	DMA2_Stream0->CR |= DMA_SxCR_EN;

	pre_triggd = false;
 800085a:	f04f 0c00 	mov.w	ip, #0
	USART3->CR3 &= ~USART_CR3_DMAT;			  // SPENGO trasmissione usart
 800085e:	68a0      	ldr	r0, [r4, #8]
	DMA2_Stream0->NDTR = DATA_LENGTH;
 8000860:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <DMA_custom_interrupt_tx+0x54>)
	USART3->CR3 &= ~USART_CR3_DMAT;			  // SPENGO trasmissione usart
 8000862:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 8000866:	60a0      	str	r0, [r4, #8]
	DMA1_Stream0->NDTR = DATA_LENGTH;			// numero elementi da prendere da ADC3
 8000868:	f44f 70c8 	mov.w	r0, #400	@ 0x190
	DMA1->LIFCR = 0xffffffff;
 800086c:	6091      	str	r1, [r2, #8]
	DMA1->HIFCR = 0xffffffff;
 800086e:	60d1      	str	r1, [r2, #12]
	DMA1_Stream0->NDTR = DATA_LENGTH;			// numero elementi da prendere da ADC3
 8000870:	6150      	str	r0, [r2, #20]
	DMA2_Stream0->NDTR = DATA_LENGTH;
 8000872:	6158      	str	r0, [r3, #20]
	DMA1_Stream0->CR |= DMA_SxCR_EN;
 8000874:	6910      	ldr	r0, [r2, #16]
	pre_triggd = false;
 8000876:	4c0c      	ldr	r4, [pc, #48]	@ (80008a8 <DMA_custom_interrupt_tx+0x58>)
	DMA1_Stream0->CR |= DMA_SxCR_EN;
 8000878:	f040 0001 	orr.w	r0, r0, #1
 800087c:	6110      	str	r0, [r2, #16]
	DMA2->LIFCR = 0xffffffff;
 800087e:	6099      	str	r1, [r3, #8]
	DMA2->HIFCR = 0xffffffff;
 8000880:	60d9      	str	r1, [r3, #12]
	DMA2_Stream0->CR |= DMA_SxCR_EN;
 8000882:	691a      	ldr	r2, [r3, #16]
 8000884:	f042 0201 	orr.w	r2, r2, #1
 8000888:	611a      	str	r2, [r3, #16]
	acquiring = false;
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <DMA_custom_interrupt_tx+0x5c>)
	pre_triggd = false;
 800088c:	f884 c000 	strb.w	ip, [r4]
	acquiring = false;
 8000890:	f883 c000 	strb.w	ip, [r3]
}
 8000894:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40004800 	.word	0x40004800
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40020400 	.word	0x40020400
 80008a8:	2400002c 	.word	0x2400002c
 80008ac:	2400002e 	.word	0x2400002e

080008b0 <DMA_custom_interrupt_rx>:

void DMA_custom_interrupt_rx(){
 80008b0:	b410      	push	{r4}

	TIM6->CR1 &= ~TIM_CR1_CEN;
 80008b2:	4c0f      	ldr	r4, [pc, #60]	@ (80008f0 <DMA_custom_interrupt_rx+0x40>)

	DMA1->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 80008b4:	f04f 30ff 	mov.w	r0, #4294967295
 80008b8:	490e      	ldr	r1, [pc, #56]	@ (80008f4 <DMA_custom_interrupt_rx+0x44>)
	TIM6->CR1 &= ~TIM_CR1_CEN;
 80008ba:	6823      	ldr	r3, [r4, #0]
	DMA1->HIFCR = 0xffffffff;

	while(DMA2_Stream0->NDTR != 0);
 80008bc:	4a0e      	ldr	r2, [pc, #56]	@ (80008f8 <DMA_custom_interrupt_rx+0x48>)
	TIM6->CR1 &= ~TIM_CR1_CEN;
 80008be:	f023 0301 	bic.w	r3, r3, #1
 80008c2:	6023      	str	r3, [r4, #0]
	DMA1->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 80008c4:	6088      	str	r0, [r1, #8]
	DMA1->HIFCR = 0xffffffff;
 80008c6:	60c8      	str	r0, [r1, #12]
	while(DMA2_Stream0->NDTR != 0);
 80008c8:	6953      	ldr	r3, [r2, #20]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1fc      	bne.n	80008c8 <DMA_custom_interrupt_rx+0x18>

	DMA1_Stream1->NDTR = 2*2*DATA_LENGTH;
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <DMA_custom_interrupt_rx+0x44>)
 80008d0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
	DMA1_Stream1->CR |= DMA_SxCR_EN;
	USART3->CR3 |= USART_CR3_DMAT;
 80008d4:	4909      	ldr	r1, [pc, #36]	@ (80008fc <DMA_custom_interrupt_rx+0x4c>)
	DMA1_Stream1->NDTR = 2*2*DATA_LENGTH;
 80008d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	DMA1_Stream1->CR |= DMA_SxCR_EN;
 80008d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
}
 80008da:	f85d 4b04 	ldr.w	r4, [sp], #4
	DMA1_Stream1->CR |= DMA_SxCR_EN;
 80008de:	f042 0201 	orr.w	r2, r2, #1
 80008e2:	629a      	str	r2, [r3, #40]	@ 0x28
	USART3->CR3 |= USART_CR3_DMAT;
 80008e4:	688b      	ldr	r3, [r1, #8]
 80008e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ea:	608b      	str	r3, [r1, #8]
}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40001000 	.word	0x40001000
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40020400 	.word	0x40020400
 80008fc:	40004800 	.word	0x40004800

08000900 <DMA2_custom_interrupt>:

void DMA2_custom_interrupt(){

	DMA2->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 8000900:	4b02      	ldr	r3, [pc, #8]	@ (800090c <DMA2_custom_interrupt+0xc>)
 8000902:	f04f 32ff 	mov.w	r2, #4294967295
 8000906:	609a      	str	r2, [r3, #8]
	DMA2->HIFCR = 0xffffffff;
 8000908:	60da      	str	r2, [r3, #12]

}
 800090a:	4770      	bx	lr
 800090c:	40020400 	.word	0x40020400

08000910 <USART_custom_init>:

#include "Custom_USART.h"

void USART_custom_init(){

	USART3->CR1 |= USART_CR1_TE;
 8000910:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <USART_custom_init+0x2c>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	f042 0208 	orr.w	r2, r2, #8
 8000918:	601a      	str	r2, [r3, #0]
	USART3->CR1 |= USART_CR1_RE;
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	f042 0204 	orr.w	r2, r2, #4
 8000920:	601a      	str	r2, [r3, #0]

	USART3->CR1 &= ~USART_CR1_TXEIE;
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000928:	601a      	str	r2, [r3, #0]
	USART3->CR1 |= USART_CR1_RXNEIE;
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	f042 0220 	orr.w	r2, r2, #32
 8000930:	601a      	str	r2, [r3, #0]

	USART3->CR1 |= USART_CR1_UE;
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	f042 0201 	orr.w	r2, r2, #1
 8000938:	601a      	str	r2, [r3, #0]
}
 800093a:	4770      	bx	lr
 800093c:	40004800 	.word	0x40004800

08000940 <USART_custom_interrupt>:

void USART_custom_interrupt(){

	char data = USART3->RDR;
 8000940:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <USART_custom_interrupt+0x38>)
 8000942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24

	if(data == '?'){
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b3f      	cmp	r3, #63	@ 0x3f
 8000948:	d00d      	beq.n	8000966 <USART_custom_interrupt+0x26>
		if((TIM7->CR1 & TIM_CR1_CEN) == 0){
			TIM7->CR1 |= TIM_CR1_CEN;
		}
	}

	USART3->ICR |= USART_ICR_ORECF;  //Cancella l'overrun. Capita quando si entra in debug
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <USART_custom_interrupt+0x38>)
 800094c:	6a1a      	ldr	r2, [r3, #32]
 800094e:	f042 0208 	orr.w	r2, r2, #8
 8000952:	621a      	str	r2, [r3, #32]
	USART3->ICR |= USART_ICR_TCCF;   //Azzeramento flag interrupt trasmissione
 8000954:	6a1a      	ldr	r2, [r3, #32]
 8000956:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800095a:	621a      	str	r2, [r3, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 800095c:	699a      	ldr	r2, [r3, #24]
 800095e:	f042 0208 	orr.w	r2, r2, #8
 8000962:	619a      	str	r2, [r3, #24]
}
 8000964:	4770      	bx	lr
		if((TIM7->CR1 & TIM_CR1_CEN) == 0){
 8000966:	4b05      	ldr	r3, [pc, #20]	@ (800097c <USART_custom_interrupt+0x3c>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	07d2      	lsls	r2, r2, #31
 800096c:	d4ed      	bmi.n	800094a <USART_custom_interrupt+0xa>
			TIM7->CR1 |= TIM_CR1_CEN;
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	f042 0201 	orr.w	r2, r2, #1
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	e7e8      	b.n	800094a <USART_custom_interrupt+0xa>
 8000978:	40004800 	.word	0x40004800
 800097c:	40001400 	.word	0x40001400

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b530      	push	{r4, r5, lr}
 8000982:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000984:	224c      	movs	r2, #76	@ 0x4c
 8000986:	2100      	movs	r1, #0
 8000988:	a80a      	add	r0, sp, #40	@ 0x28
 800098a:	f005 f94f 	bl	8005c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098e:	2220      	movs	r2, #32
 8000990:	2100      	movs	r1, #0
 8000992:	a802      	add	r0, sp, #8
 8000994:	f005 f94a 	bl	8005c2c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000998:	2002      	movs	r0, #2
 800099a:	f002 f983 	bl	8002ca4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800099e:	4a28      	ldr	r2, [pc, #160]	@ (8000a40 <SystemClock_Config+0xc0>)
 80009a0:	2100      	movs	r1, #0
 80009a2:	4b28      	ldr	r3, [pc, #160]	@ (8000a44 <SystemClock_Config+0xc4>)
 80009a4:	9101      	str	r1, [sp, #4]
 80009a6:	6991      	ldr	r1, [r2, #24]
 80009a8:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 80009ac:	6191      	str	r1, [r2, #24]
 80009ae:	6991      	ldr	r1, [r2, #24]
 80009b0:	f401 4140 	and.w	r1, r1, #49152	@ 0xc000
 80009b4:	9101      	str	r1, [sp, #4]
 80009b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80009b8:	f041 0101 	orr.w	r1, r1, #1
 80009bc:	62d9      	str	r1, [r3, #44]	@ 0x2c
 80009be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	9301      	str	r3, [sp, #4]
 80009c6:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009c8:	6993      	ldr	r3, [r2, #24]
 80009ca:	049b      	lsls	r3, r3, #18
 80009cc:	d5fc      	bpl.n	80009c8 <SystemClock_Config+0x48>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009ce:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 120;
 80009d0:	2278      	movs	r2, #120	@ 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d2:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009d4:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d6:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 120;
 80009d8:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009dc:	220c      	movs	r2, #12
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009de:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8000a38 <SystemClock_Config+0xb8>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e2:	e9cd 3313 	strd	r3, r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009e6:	e9cd 3417 	strd	r3, r4, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009ea:	e9cd 3219 	strd	r3, r2, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009ee:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009f0:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009f4:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f8:	f002 f9ea 	bl	8002dd0 <HAL_RCC_OscConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	b108      	cbz	r0, 8000a04 <SystemClock_Config+0x84>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <SystemClock_Config+0x82>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a04:	2240      	movs	r2, #64	@ 0x40
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a06:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a08:	2308      	movs	r3, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	253f      	movs	r5, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a0c:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0e:	2403      	movs	r4, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a10:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a12:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a14:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a16:	9207      	str	r2, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a18:	e9cd 3205 	strd	r3, r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a20:	e9cd 3208 	strd	r3, r2, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a24:	f002 fd54 	bl	80034d0 <HAL_RCC_ClockConfig>
 8000a28:	b108      	cbz	r0, 8000a2e <SystemClock_Config+0xae>
 8000a2a:	b672      	cpsid	i
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <SystemClock_Config+0xac>
}
 8000a2e:	b01f      	add	sp, #124	@ 0x7c
 8000a30:	bd30      	pop	{r4, r5, pc}
 8000a32:	bf00      	nop
 8000a34:	f3af 8000 	nop.w
 8000a38:	00000001 	.word	0x00000001
 8000a3c:	00050000 	.word	0x00050000
 8000a40:	58024800 	.word	0x58024800
 8000a44:	58000400 	.word	0x58000400

08000a48 <PeriphCommonClock_Config>:
{
 8000a48:	b500      	push	{lr}
 8000a4a:	b0b1      	sub	sp, #196	@ 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a4c:	22a0      	movs	r2, #160	@ 0xa0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	a808      	add	r0, sp, #32
 8000a52:	f005 f8eb 	bl	8005c2c <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a56:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000a5a:	2100      	movs	r1, #0
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000a5c:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2N = 50;
 8000a5e:	2232      	movs	r2, #50	@ 0x32
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000a60:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a62:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2N = 50;
 8000a64:	9203      	str	r2, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a66:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a68:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8000a88 <PeriphCommonClock_Config+0x40>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a6c:	e9cd 0100 	strd	r0, r1, [sp]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a70:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a72:	ed8d 7b06 	vstr	d7, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a76:	f003 f809 	bl	8003a8c <HAL_RCCEx_PeriphCLKConfig>
 8000a7a:	b108      	cbz	r0, 8000a80 <PeriphCommonClock_Config+0x38>
 8000a7c:	b672      	cpsid	i
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <PeriphCommonClock_Config+0x36>
}
 8000a80:	b031      	add	sp, #196	@ 0xc4
 8000a82:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a86:	bf00      	nop
 8000a88:	00000002 	.word	0x00000002
 8000a8c:	00000080 	.word	0x00000080

08000a90 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	4dc1      	ldr	r5, [pc, #772]	@ (8000d98 <main+0x308>)
  GPIO_InitStruct.Pin = B1_Pin;
 8000a94:	f44f 5900 	mov.w	r9, #8192	@ 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2602      	movs	r6, #2
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a9a:	f04f 0801 	mov.w	r8, #1
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b096      	sub	sp, #88	@ 0x58
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aa2:	270b      	movs	r7, #11
  HAL_Init();
 8000aa4:	f000 fd2a 	bl	80014fc <HAL_Init>
  SystemClock_Config();
 8000aa8:	f7ff ff6a 	bl	8000980 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000aac:	f7ff ffcc 	bl	8000a48 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	9411      	str	r4, [sp, #68]	@ 0x44
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ab2:	4622      	mov	r2, r4
 8000ab4:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ab8:	48b8      	ldr	r0, [pc, #736]	@ (8000d9c <main+0x30c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
 8000abe:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000ac6:	f043 0304 	orr.w	r3, r3, #4
 8000aca:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000ace:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	9303      	str	r3, [sp, #12]
 8000ad8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ada:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae2:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000ae6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aee:	9304      	str	r3, [sp, #16]
 8000af0:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000afe:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	9305      	str	r3, [sp, #20]
 8000b08:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000b0e:	f043 0302 	orr.w	r3, r3, #2
 8000b12:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000b16:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	9306      	str	r3, [sp, #24]
 8000b20:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b22:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000b2e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000b32:	f003 0310 	and.w	r3, r3, #16
 8000b36:	9307      	str	r3, [sp, #28]
 8000b38:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000b3e:	f043 0308 	orr.w	r3, r3, #8
 8000b42:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000b46:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	9308      	str	r3, [sp, #32]
 8000b50:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b52:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b5a:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000b5e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b66:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b6a:	f002 f897 	bl	8002c9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b6e:	4622      	mov	r2, r4
 8000b70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b74:	488a      	ldr	r0, [pc, #552]	@ (8000da0 <main+0x310>)
 8000b76:	f002 f891 	bl	8002c9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b7a:	4622      	mov	r2, r4
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	4889      	ldr	r0, [pc, #548]	@ (8000da4 <main+0x314>)
 8000b80:	f002 f88c 	bl	8002c9c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b84:	a90d      	add	r1, sp, #52	@ 0x34
 8000b86:	4888      	ldr	r0, [pc, #544]	@ (8000da8 <main+0x318>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pin = B1_Pin;
 8000b8a:	e9cd 940d 	strd	r9, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f001 ff43 	bl	8002a18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b92:	2332      	movs	r3, #50	@ 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b94:	a90d      	add	r1, sp, #52	@ 0x34
 8000b96:	4884      	ldr	r0, [pc, #528]	@ (8000da8 <main+0x318>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b98:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	960e      	str	r6, [sp, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b9c:	9711      	str	r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba2:	f001 ff39 	bl	8002a18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ba6:	2386      	movs	r3, #134	@ 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	a90d      	add	r1, sp, #52	@ 0x34
 8000baa:	4880      	ldr	r0, [pc, #512]	@ (8000dac <main+0x31c>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000bac:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	e9cd 640e 	strd	r6, r4, [sp, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb2:	e9cd 4710 	strd	r4, r7, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f001 ff2f 	bl	8002a18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bba:	f244 0301 	movw	r3, #16385	@ 0x4001
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbe:	a90d      	add	r1, sp, #52	@ 0x34
 8000bc0:	4876      	ldr	r0, [pc, #472]	@ (8000d9c <main+0x30c>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bc2:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bca:	f001 ff25 	bl	8002a18 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bce:	a90d      	add	r1, sp, #52	@ 0x34
 8000bd0:	4872      	ldr	r0, [pc, #456]	@ (8000d9c <main+0x30c>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bd2:	9711      	str	r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	e9cd 960d 	strd	r9, r6, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000bd8:	f44f 6980 	mov.w	r9, #1024	@ 0x400
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be0:	f001 ff1a 	bl	8002a18 <HAL_GPIO_Init>
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000be4:	a90d      	add	r1, sp, #52	@ 0x34
 8000be6:	486e      	ldr	r0, [pc, #440]	@ (8000da0 <main+0x310>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	9410      	str	r4, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000bea:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	e9cd 840e 	strd	r8, r4, [sp, #56]	@ 0x38
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f001 ff11 	bl	8002a18 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf6:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8000bfa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	a90d      	add	r1, sp, #52	@ 0x34
 8000c00:	486b      	ldr	r0, [pc, #428]	@ (8000db0 <main+0x320>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c04:	e9cd c30d 	strd	ip, r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f001 ff06 	bl	8002a18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000c0c:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	a90d      	add	r1, sp, #52	@ 0x34
 8000c12:	4866      	ldr	r0, [pc, #408]	@ (8000dac <main+0x31c>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000c14:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c16:	230a      	movs	r3, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	9410      	str	r4, [sp, #64]	@ 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c1a:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	e9cd 640e 	strd	r6, r4, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f001 fefa 	bl	8002a18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c24:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c28:	a90d      	add	r1, sp, #52	@ 0x34
 8000c2a:	4861      	ldr	r0, [pc, #388]	@ (8000db0 <main+0x320>)
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c2c:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	e9cd 640e 	strd	r6, r4, [sp, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c32:	e9cd 4710 	strd	r4, r7, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c36:	f001 feef 	bl	8002a18 <HAL_GPIO_Init>
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	a90d      	add	r1, sp, #52	@ 0x34
 8000c3c:	4859      	ldr	r0, [pc, #356]	@ (8000da4 <main+0x314>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	e9cd 680d 	strd	r6, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f001 fee7 	bl	8002a18 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c4a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c4e:	4622      	mov	r2, r4
 8000c50:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c52:	ea43 0308 	orr.w	r3, r3, r8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c56:	4638      	mov	r0, r7
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c58:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8000c5c:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8000c60:	ea03 0308 	and.w	r3, r3, r8
 8000c64:	9301      	str	r3, [sp, #4]
 8000c66:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c68:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8000c6c:	4333      	orrs	r3, r6
 8000c6e:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8000c72:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  hadc3.Instance = ADC3;
 8000c76:	4d4f      	ldr	r5, [pc, #316]	@ (8000db4 <main+0x324>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c78:	4033      	ands	r3, r6
 8000c7a:	9302      	str	r3, [sp, #8]
 8000c7c:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c7e:	f001 fa3d 	bl	80020fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c82:	4638      	mov	r0, r7
 8000c84:	f001 fa76 	bl	8002174 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c88:	4622      	mov	r2, r4
 8000c8a:	4621      	mov	r1, r4
 8000c8c:	200c      	movs	r0, #12
 8000c8e:	f001 fa35 	bl	80020fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c92:	200c      	movs	r0, #12
 8000c94:	f001 fa6e 	bl	8002174 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c98:	4622      	mov	r2, r4
 8000c9a:	4621      	mov	r1, r4
 8000c9c:	2038      	movs	r0, #56	@ 0x38
 8000c9e:	f001 fa2d 	bl	80020fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ca2:	2038      	movs	r0, #56	@ 0x38
 8000ca4:	f001 fa66 	bl	8002174 <HAL_NVIC_EnableIRQ>
  hadc3.Instance = ADC3;
 8000ca8:	4b43      	ldr	r3, [pc, #268]	@ (8000db8 <main+0x328>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000caa:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000cac:	4628      	mov	r0, r5
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cae:	606c      	str	r4, [r5, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cb0:	60ec      	str	r4, [r5, #12]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000cb2:	82ac      	strh	r4, [r5, #20]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000cb4:	772c      	strb	r4, [r5, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cb6:	636c      	str	r4, [r5, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000cb8:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc3.Instance = ADC3;
 8000cbc:	602b      	str	r3, [r5, #0]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000cbe:	f44f 63b4 	mov.w	r3, #1440	@ 0x5a0
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000cc2:	f8c5 9028 	str.w	r9, [r5, #40]	@ 0x28
  hadc3.Init.NbrOfConversion = 1;
 8000cc6:	f8c5 8018 	str.w	r8, [r5, #24]
  hadc3.Init.Oversampling.Ratio = 1;
 8000cca:	f8c5 803c 	str.w	r8, [r5, #60]	@ 0x3c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000cce:	626b      	str	r3, [r5, #36]	@ 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd0:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
 8000cd4:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 8000cd8:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cdc:	e9c5 440b 	strd	r4, r4, [r5, #44]	@ 0x2c
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ce0:	2404      	movs	r4, #4
 8000ce2:	612c      	str	r4, [r5, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ce4:	f000 ffda 	bl	8001c9c <HAL_ADC_Init>
 8000ce8:	b108      	cbz	r0, 8000cee <main+0x25e>
 8000cea:	b672      	cpsid	i
  while (1)
 8000cec:	e7fe      	b.n	8000cec <main+0x25c>
  sConfig.Channel = ADC_CHANNEL_0;
 8000cee:	4603      	mov	r3, r0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cf0:	a90d      	add	r1, sp, #52	@ 0x34
 8000cf2:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_0;
 8000cf4:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cf8:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfig.Offset = 0;
 8000cfa:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cfc:	f88d 304d 	strb.w	r3, [sp, #77]	@ 0x4d
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d00:	2306      	movs	r3, #6
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d02:	9411      	str	r4, [sp, #68]	@ 0x44
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d04:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d06:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000d0a:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d0c:	f000 fc74 	bl	80015f8 <HAL_ADC_ConfigChannel>
 8000d10:	4603      	mov	r3, r0
 8000d12:	b990      	cbnz	r0, 8000d3a <main+0x2aa>
  hcomp2.Instance = COMP2;
 8000d14:	4829      	ldr	r0, [pc, #164]	@ (8000dbc <main+0x32c>)
 8000d16:	4a2a      	ldr	r2, [pc, #168]	@ (8000dc0 <main+0x330>)
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8000d18:	60c3      	str	r3, [r0, #12]
  hcomp2.Instance = COMP2;
 8000d1a:	6002      	str	r2, [r0, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000d1c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000d20:	61c3      	str	r3, [r0, #28]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000d22:	6102      	str	r2, [r0, #16]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000d24:	6203      	str	r3, [r0, #32]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000d26:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000d2a:	e9c0 3301 	strd	r3, r3, [r0, #4]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000d2e:	f001 f923 	bl	8001f78 <HAL_COMP_Init>
 8000d32:	4601      	mov	r1, r0
 8000d34:	b118      	cbz	r0, 8000d3e <main+0x2ae>
 8000d36:	b672      	cpsid	i
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <main+0x2a8>
 8000d3a:	b672      	cpsid	i
 8000d3c:	e7fe      	b.n	8000d3c <main+0x2ac>
  DAC_ChannelConfTypeDef sConfig = {0};
 8000d3e:	2224      	movs	r2, #36	@ 0x24
  hdac1.Instance = DAC1;
 8000d40:	4c20      	ldr	r4, [pc, #128]	@ (8000dc4 <main+0x334>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8000d42:	a80d      	add	r0, sp, #52	@ 0x34
 8000d44:	f004 ff72 	bl	8005c2c <memset>
  hdac1.Instance = DAC1;
 8000d48:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc8 <main+0x338>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000d4a:	4620      	mov	r0, r4
  hdac1.Instance = DAC1;
 8000d4c:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000d4e:	f001 fa35 	bl	80021bc <HAL_DAC_Init>
 8000d52:	4602      	mov	r2, r0
 8000d54:	b108      	cbz	r0, 8000d5a <main+0x2ca>
 8000d56:	b672      	cpsid	i
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <main+0x2c8>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	a90d      	add	r1, sp, #52	@ 0x34
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d5e:	9211      	str	r2, [sp, #68]	@ 0x44
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d60:	e9cd 220d 	strd	r2, r2, [sp, #52]	@ 0x34
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000d64:	e9cd 660f 	strd	r6, r6, [sp, #60]	@ 0x3c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d68:	f001 fa3e 	bl	80021e8 <HAL_DAC_ConfigChannel>
 8000d6c:	b108      	cbz	r0, 8000d72 <main+0x2e2>
 8000d6e:	b672      	cpsid	i
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <main+0x2e0>
  htim6.Instance = TIM6;
 8000d72:	4c16      	ldr	r4, [pc, #88]	@ (8000dcc <main+0x33c>)
  htim6.Init.Period = 65535;
 8000d74:	f64f 75ff 	movw	r5, #65535	@ 0xffff
  htim6.Instance = TIM6;
 8000d78:	4a15      	ldr	r2, [pc, #84]	@ (8000dd0 <main+0x340>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7a:	900f      	str	r0, [sp, #60]	@ 0x3c
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7c:	61a0      	str	r0, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7e:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
  htim6.Init.Prescaler = 0;
 8000d82:	e9c4 2000 	strd	r2, r0, [r4]
  htim6.Init.Period = 65535;
 8000d86:	e9c4 0502 	strd	r0, r5, [r4, #8]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	f004 f980 	bl	8005090 <HAL_TIM_Base_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	b1f8      	cbz	r0, 8000dd4 <main+0x344>
 8000d94:	b672      	cpsid	i
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <main+0x306>
 8000d98:	58024400 	.word	0x58024400
 8000d9c:	58020400 	.word	0x58020400
 8000da0:	58020c00 	.word	0x58020c00
 8000da4:	58021000 	.word	0x58021000
 8000da8:	58020800 	.word	0x58020800
 8000dac:	58020000 	.word	0x58020000
 8000db0:	58021800 	.word	0x58021800
 8000db4:	24000974 	.word	0x24000974
 8000db8:	58026000 	.word	0x58026000
 8000dbc:	2400082c 	.word	0x2400082c
 8000dc0:	58003810 	.word	0x58003810
 8000dc4:	24000818 	.word	0x24000818
 8000dc8:	40007400 	.word	0x40007400
 8000dcc:	240007cc 	.word	0x240007cc
 8000dd0:	40001000 	.word	0x40001000
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000dd4:	2220      	movs	r2, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	a90d      	add	r1, sp, #52	@ 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dda:	930f      	str	r3, [sp, #60]	@ 0x3c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ddc:	920d      	str	r2, [sp, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000dde:	f004 faaf 	bl	8005340 <HAL_TIMEx_MasterConfigSynchronization>
 8000de2:	4603      	mov	r3, r0
 8000de4:	b108      	cbz	r0, 8000dea <main+0x35a>
 8000de6:	b672      	cpsid	i
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <main+0x358>
  htim7.Instance = TIM7;
 8000dea:	4c52      	ldr	r4, [pc, #328]	@ (8000f34 <main+0x4a4>)
 8000dec:	4a52      	ldr	r2, [pc, #328]	@ (8000f38 <main+0x4a8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dee:	900f      	str	r0, [sp, #60]	@ 0x3c
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df0:	61a3      	str	r3, [r4, #24]
  htim7.Instance = TIM7;
 8000df2:	6022      	str	r2, [r4, #0]
  htim7.Init.Period = 65535;
 8000df4:	60e5      	str	r5, [r4, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df6:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000dfa:	4620      	mov	r0, r4
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfc:	e9c4 3301 	strd	r3, r3, [r4, #4]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e00:	f004 f946 	bl	8005090 <HAL_TIM_Base_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	b108      	cbz	r0, 8000e0c <main+0x37c>
 8000e08:	b672      	cpsid	i
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <main+0x37a>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e0c:	a90d      	add	r1, sp, #52	@ 0x34
 8000e0e:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e10:	930d      	str	r3, [sp, #52]	@ 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e12:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e14:	f004 fa94 	bl	8005340 <HAL_TIMEx_MasterConfigSynchronization>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	b108      	cbz	r0, 8000e20 <main+0x390>
 8000e1c:	b672      	cpsid	i
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <main+0x38e>
  huart3.Instance = USART3;
 8000e20:	4846      	ldr	r0, [pc, #280]	@ (8000f3c <main+0x4ac>)
  huart3.Init.BaudRate = 1000000;
 8000e22:	4a47      	ldr	r2, [pc, #284]	@ (8000f40 <main+0x4b0>)
  huart3.Instance = USART3;
 8000e24:	4947      	ldr	r1, [pc, #284]	@ (8000f44 <main+0x4b4>)
  huart3.Init.BaudRate = 1000000;
 8000e26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e2a:	220c      	movs	r2, #12
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e30:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e34:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e38:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e3c:	f004 fe20 	bl	8005a80 <HAL_UART_Init>
 8000e40:	b108      	cbz	r0, 8000e46 <main+0x3b6>
 8000e42:	b672      	cpsid	i
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <main+0x3b4>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e46:	2100      	movs	r1, #0
 8000e48:	483c      	ldr	r0, [pc, #240]	@ (8000f3c <main+0x4ac>)
 8000e4a:	f004 fe6b 	bl	8005b24 <HAL_UARTEx_SetTxFifoThreshold>
 8000e4e:	4601      	mov	r1, r0
 8000e50:	b108      	cbz	r0, 8000e56 <main+0x3c6>
 8000e52:	b672      	cpsid	i
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <main+0x3c4>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e56:	4839      	ldr	r0, [pc, #228]	@ (8000f3c <main+0x4ac>)
 8000e58:	f004 fea6 	bl	8005ba8 <HAL_UARTEx_SetRxFifoThreshold>
 8000e5c:	b108      	cbz	r0, 8000e62 <main+0x3d2>
 8000e5e:	b672      	cpsid	i
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <main+0x3d0>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e62:	4836      	ldr	r0, [pc, #216]	@ (8000f3c <main+0x4ac>)
 8000e64:	f004 fe40 	bl	8005ae8 <HAL_UARTEx_DisableFifoMode>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	b108      	cbz	r0, 8000e70 <main+0x3e0>
 8000e6c:	b672      	cpsid	i
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <main+0x3de>
  hadc1.Instance = ADC1;
 8000e70:	4c35      	ldr	r4, [pc, #212]	@ (8000f48 <main+0x4b8>)
  hadc1.Init.NbrOfConversion = 1;
 8000e72:	2201      	movs	r2, #1
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e74:	2504      	movs	r5, #4
  hadc1.Instance = ADC1;
 8000e76:	4935      	ldr	r1, [pc, #212]	@ (8000f4c <main+0x4bc>)
  hadc1.Init.NbrOfConversion = 1;
 8000e78:	61a2      	str	r2, [r4, #24]
  hadc1.Init.Oversampling.Ratio = 1;
 8000e7a:	63e2      	str	r2, [r4, #60]	@ 0x3c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e7c:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e80:	7723      	strb	r3, [r4, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e82:	6363      	str	r3, [r4, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e84:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
  ADC_MultiModeTypeDef multimode = {0};
 8000e88:	900a      	str	r0, [sp, #40]	@ 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e8a:	9013      	str	r0, [sp, #76]	@ 0x4c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e8c:	82a0      	strh	r0, [r4, #20]
  hadc1.Instance = ADC1;
 8000e8e:	6021      	str	r1, [r4, #0]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e90:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 8000e94:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9c:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 8000ea0:	e9cd 000f 	strd	r0, r0, [sp, #60]	@ 0x3c
 8000ea4:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000ea8:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eac:	e9c4 0503 	strd	r0, r5, [r4, #12]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb0:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000eb2:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb6:	f000 fef1 	bl	8001c9c <HAL_ADC_Init>
 8000eba:	b108      	cbz	r0, 8000ec0 <main+0x430>
 8000ebc:	b672      	cpsid	i
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <main+0x42e>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ec0:	900a      	str	r0, [sp, #40]	@ 0x28
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ec2:	a90a      	add	r1, sp, #40	@ 0x28
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	f000 fff5 	bl	8001eb4 <HAL_ADCEx_MultiModeConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	b108      	cbz	r0, 8000ed2 <main+0x442>
 8000ece:	b672      	cpsid	i
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <main+0x440>
  sConfig.Channel = ADC_CHANNEL_19;
 8000ed2:	4a1f      	ldr	r2, [pc, #124]	@ (8000f50 <main+0x4c0>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed4:	a90d      	add	r1, sp, #52	@ 0x34
 8000ed6:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ed8:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfig.Channel = ADC_CHANNEL_19;
 8000eda:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000edc:	2206      	movs	r2, #6
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ede:	f88d 304d 	strb.w	r3, [sp, #77]	@ 0x4d
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ee2:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ee4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
  sConfig.Offset = 0;
 8000ee8:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eec:	9210      	str	r2, [sp, #64]	@ 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eee:	f000 fb83 	bl	80015f8 <HAL_ADC_ConfigChannel>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	b108      	cbz	r0, 8000efa <main+0x46a>
 8000ef6:	b672      	cpsid	i
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <main+0x468>
  hcomp1.Instance = COMP1;
 8000efa:	4816      	ldr	r0, [pc, #88]	@ (8000f54 <main+0x4c4>)
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000efc:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
  hcomp1.Instance = COMP1;
 8000f00:	4c15      	ldr	r4, [pc, #84]	@ (8000f58 <main+0x4c8>)
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000f02:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000f06:	6183      	str	r3, [r0, #24]
  hcomp1.Instance = COMP1;
 8000f08:	6004      	str	r4, [r0, #0]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000f0a:	6143      	str	r3, [r0, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000f0c:	61c3      	str	r3, [r0, #28]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000f0e:	6203      	str	r3, [r0, #32]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000f10:	e9c0 2103 	strd	r2, r1, [r0, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000f14:	e9c0 3301 	strd	r3, r3, [r0, #4]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000f18:	f001 f82e 	bl	8001f78 <HAL_COMP_Init>
 8000f1c:	b108      	cbz	r0, 8000f22 <main+0x492>
 8000f1e:	b672      	cpsid	i
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <main+0x490>
  COMP_custom_init();
 8000f22:	f7ff fbd9 	bl	80006d8 <COMP_custom_init>
  ADC_custom_init();
 8000f26:	f7ff fb4f 	bl	80005c8 <ADC_custom_init>
  USART_custom_init();
 8000f2a:	f7ff fcf1 	bl	8000910 <USART_custom_init>
  DMA_custom_init();
 8000f2e:	f7ff fc33 	bl	8000798 <DMA_custom_init>
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <main+0x4a2>
 8000f34:	24000780 	.word	0x24000780
 8000f38:	40001400 	.word	0x40001400
 8000f3c:	240006ec 	.word	0x240006ec
 8000f40:	000f4240 	.word	0x000f4240
 8000f44:	40004800 	.word	0x40004800
 8000f48:	240009d8 	.word	0x240009d8
 8000f4c:	40022000 	.word	0x40022000
 8000f50:	4fb80000 	.word	0x4fb80000
 8000f54:	24000858 	.word	0x24000858
 8000f58:	5800380c 	.word	0x5800380c

08000f5c <Error_Handler>:
 8000f5c:	b672      	cpsid	i
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <Error_Handler+0x2>

08000f60 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <HAL_MspInit+0x4c>)
  */
  __HAL_RCC_VREF_CLK_ENABLE();

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8000f62:	2000      	movs	r0, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f64:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000f68:	f042 0202 	orr.w	r2, r2, #2
{
 8000f6c:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
{
 8000f72:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f74:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000f78:	f002 0202 	and.w	r2, r2, #2
 8000f7c:	9200      	str	r2, [sp, #0]
 8000f7e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_VREF_CLK_ENABLE();
 8000f80:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000f84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000f88:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000f8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8000f98:	f000 faf8 	bl	800158c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000f9c:	f000 fb0a 	bl	80015b4 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000fa0:	2000      	movs	r0, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa2:	b003      	add	sp, #12
 8000fa4:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000fa8:	f000 bafa 	b.w	80015a0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 8000fac:	58024400 	.word	0x58024400

08000fb0 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8000fb0:	4a39      	ldr	r2, [pc, #228]	@ (8001098 <HAL_ADC_MspInit+0xe8>)
 8000fb2:	6803      	ldr	r3, [r0, #0]
{
 8000fb4:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 8000fb6:	4293      	cmp	r3, r2
{
 8000fb8:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	f04f 0400 	mov.w	r4, #0
{
 8000fbe:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000fc4:	9406      	str	r4, [sp, #24]
 8000fc6:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if(hadc->Instance==ADC1)
 8000fca:	d004      	beq.n	8000fd6 <HAL_ADC_MspInit+0x26>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8000fcc:	4a33      	ldr	r2, [pc, #204]	@ (800109c <HAL_ADC_MspInit+0xec>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d03d      	beq.n	800104e <HAL_ADC_MspInit+0x9e>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000fd2:	b00a      	add	sp, #40	@ 0x28
 8000fd4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fd6:	4b32      	ldr	r3, [pc, #200]	@ (80010a0 <HAL_ADC_MspInit+0xf0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	a904      	add	r1, sp, #16
    hdma_adc1.Instance = DMA2_Stream0;
 8000fda:	4e32      	ldr	r6, [pc, #200]	@ (80010a4 <HAL_ADC_MspInit+0xf4>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fdc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8000fe0:	f042 0220 	orr.w	r2, r2, #32
 8000fe4:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8000fe8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8000fec:	f002 0220 	and.w	r2, r2, #32
 8000ff0:	9200      	str	r2, [sp, #0]
 8000ff2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ff8:	f042 0201 	orr.w	r2, r2, #1
 8000ffc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001000:	2220      	movs	r2, #32
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800100c:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	4825      	ldr	r0, [pc, #148]	@ (80010a8 <HAL_ADC_MspInit+0xf8>)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001012:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f001 fcff 	bl	8002a18 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 800101a:	4a24      	ldr	r2, [pc, #144]	@ (80010ac <HAL_ADC_MspInit+0xfc>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800101c:	2309      	movs	r3, #9
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800101e:	6073      	str	r3, [r6, #4]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001020:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    hdma_adc3.Instance = DMA1_Stream0;
 8001024:	6032      	str	r2, [r6, #0]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001026:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800102a:	6173      	str	r3, [r6, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800102c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001030:	4630      	mov	r0, r6
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001032:	60b4      	str	r4, [r6, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001034:	60f4      	str	r4, [r6, #12]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001036:	61f4      	str	r4, [r6, #28]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001038:	6132      	str	r2, [r6, #16]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800103a:	6234      	str	r4, [r6, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800103c:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800103e:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001040:	f001 fa64 	bl	800250c <HAL_DMA_Init>
 8001044:	bb28      	cbnz	r0, 8001092 <HAL_ADC_MspInit+0xe2>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001046:	64ee      	str	r6, [r5, #76]	@ 0x4c
 8001048:	63b5      	str	r5, [r6, #56]	@ 0x38
}
 800104a:	b00a      	add	sp, #40	@ 0x28
 800104c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 800104e:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <HAL_ADC_MspInit+0xf0>)
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001050:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
    hdma_adc3.Instance = DMA1_Stream0;
 8001054:	4e16      	ldr	r6, [pc, #88]	@ (80010b0 <HAL_ADC_MspInit+0x100>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001056:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800105a:	4608      	mov	r0, r1
    __HAL_RCC_ADC3_CLK_ENABLE();
 800105c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001060:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001064:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001068:	f002 7280 	and.w	r2, r2, #16777216	@ 0x1000000
 800106c:	9202      	str	r2, [sp, #8]
 800106e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001070:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001074:	f042 0204 	orr.w	r2, r2, #4
 8001078:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	9303      	str	r3, [sp, #12]
 8001086:	9b03      	ldr	r3, [sp, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001088:	f000 faac 	bl	80015e4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream0;
 800108c:	4a09      	ldr	r2, [pc, #36]	@ (80010b4 <HAL_ADC_MspInit+0x104>)
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800108e:	2373      	movs	r3, #115	@ 0x73
 8001090:	e7c5      	b.n	800101e <HAL_ADC_MspInit+0x6e>
      Error_Handler();
 8001092:	f7ff ff63 	bl	8000f5c <Error_Handler>
 8001096:	e7d6      	b.n	8001046 <HAL_ADC_MspInit+0x96>
 8001098:	40022000 	.word	0x40022000
 800109c:	58026000 	.word	0x58026000
 80010a0:	58024400 	.word	0x58024400
 80010a4:	240008fc 	.word	0x240008fc
 80010a8:	58020000 	.word	0x58020000
 80010ac:	40020410 	.word	0x40020410
 80010b0:	24000884 	.word	0x24000884
 80010b4:	40020010 	.word	0x40020010

080010b8 <HAL_COMP_MspInit>:
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 80010b8:	4939      	ldr	r1, [pc, #228]	@ (80011a0 <HAL_COMP_MspInit+0xe8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 80010bc:	6802      	ldr	r2, [r0, #0]
{
 80010be:	b500      	push	{lr}
  if(hcomp->Instance==COMP1)
 80010c0:	428a      	cmp	r2, r1
{
 80010c2:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80010c8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80010cc:	9308      	str	r3, [sp, #32]
  if(hcomp->Instance==COMP1)
 80010ce:	d023      	beq.n	8001118 <HAL_COMP_MspInit+0x60>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 80010d0:	4b34      	ldr	r3, [pc, #208]	@ (80011a4 <HAL_COMP_MspInit+0xec>)
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d002      	beq.n	80010dc <HAL_COMP_MspInit+0x24>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 80010d6:	b00b      	add	sp, #44	@ 0x2c
 80010d8:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_COMP12_CLK_ENABLED++;
 80010dc:	4a32      	ldr	r2, [pc, #200]	@ (80011a8 <HAL_COMP_MspInit+0xf0>)
 80010de:	6813      	ldr	r3, [r2, #0]
 80010e0:	3301      	adds	r3, #1
    if(HAL_RCC_COMP12_CLK_ENABLED==1){
 80010e2:	2b01      	cmp	r3, #1
    HAL_RCC_COMP12_CLK_ENABLED++;
 80010e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_COMP12_CLK_ENABLED==1){
 80010e6:	d043      	beq.n	8001170 <HAL_COMP_MspInit+0xb8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e8:	4b30      	ldr	r3, [pc, #192]	@ (80011ac <HAL_COMP_MspInit+0xf4>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ea:	a904      	add	r1, sp, #16
 80010ec:	4830      	ldr	r0, [pc, #192]	@ (80011b0 <HAL_COMP_MspInit+0xf8>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010f2:	f042 0210 	orr.w	r2, r2, #16
 80010f6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fe:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001102:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8001190 <HAL_COMP_MspInit+0xd8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001106:	9303      	str	r3, [sp, #12]
 8001108:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800110a:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800110e:	f001 fc83 	bl	8002a18 <HAL_GPIO_Init>
}
 8001112:	b00b      	add	sp, #44	@ 0x2c
 8001114:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_COMP12_CLK_ENABLED++;
 8001118:	4a23      	ldr	r2, [pc, #140]	@ (80011a8 <HAL_COMP_MspInit+0xf0>)
 800111a:	6813      	ldr	r3, [r2, #0]
 800111c:	3301      	adds	r3, #1
    if(HAL_RCC_COMP12_CLK_ENABLED==1){
 800111e:	2b01      	cmp	r3, #1
    HAL_RCC_COMP12_CLK_ENABLED++;
 8001120:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_COMP12_CLK_ENABLED==1){
 8001122:	d017      	beq.n	8001154 <HAL_COMP_MspInit+0x9c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001124:	4b21      	ldr	r3, [pc, #132]	@ (80011ac <HAL_COMP_MspInit+0xf4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	a904      	add	r1, sp, #16
 8001128:	4822      	ldr	r0, [pc, #136]	@ (80011b4 <HAL_COMP_MspInit+0xfc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800112e:	f042 0202 	orr.w	r2, r2, #2
 8001132:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800113a:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800113e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8001198 <HAL_COMP_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001146:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114a:	f001 fc65 	bl	8002a18 <HAL_GPIO_Init>
}
 800114e:	b00b      	add	sp, #44	@ 0x2c
 8001150:	f85d fb04 	ldr.w	pc, [sp], #4
      __HAL_RCC_COMP12_CLK_ENABLE();
 8001154:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <HAL_COMP_MspInit+0xf4>)
 8001156:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800115a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800115e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8001162:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	9b00      	ldr	r3, [sp, #0]
 800116e:	e7d9      	b.n	8001124 <HAL_COMP_MspInit+0x6c>
      __HAL_RCC_COMP12_CLK_ENABLE();
 8001170:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <HAL_COMP_MspInit+0xf4>)
 8001172:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8001176:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800117a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 800117e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001186:	9302      	str	r3, [sp, #8]
 8001188:	9b02      	ldr	r3, [sp, #8]
 800118a:	e7ad      	b.n	80010e8 <HAL_COMP_MspInit+0x30>
 800118c:	f3af 8000 	nop.w
 8001190:	00000200 	.word	0x00000200
 8001194:	00000003 	.word	0x00000003
 8001198:	00000004 	.word	0x00000004
 800119c:	00000003 	.word	0x00000003
 80011a0:	5800380c 	.word	0x5800380c
 80011a4:	58003810 	.word	0x58003810
 80011a8:	24000a3c 	.word	0x24000a3c
 80011ac:	58024400 	.word	0x58024400
 80011b0:	58021000 	.word	0x58021000
 80011b4:	58020400 	.word	0x58020400

080011b8 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC1)
 80011b8:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <HAL_DAC_MspInit+0x2c>)
 80011ba:	6802      	ldr	r2, [r0, #0]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d000      	beq.n	80011c2 <HAL_DAC_MspInit+0xa>
 80011c0:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80011c2:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <HAL_DAC_MspInit+0x30>)
{
 80011c4:	b082      	sub	sp, #8
    __HAL_RCC_DAC12_CLK_ENABLE();
 80011c6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80011ca:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80011ce:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80011d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80011de:	b002      	add	sp, #8
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40007400 	.word	0x40007400
 80011e8:	58024400 	.word	0x58024400

080011ec <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 80011ec:	4a18      	ldr	r2, [pc, #96]	@ (8001250 <HAL_TIM_Base_MspInit+0x64>)
 80011ee:	6803      	ldr	r3, [r0, #0]
 80011f0:	4293      	cmp	r3, r2
{
 80011f2:	b510      	push	{r4, lr}
 80011f4:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM6)
 80011f6:	d004      	beq.n	8001202 <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 80011f8:	4a16      	ldr	r2, [pc, #88]	@ (8001254 <HAL_TIM_Base_MspInit+0x68>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d010      	beq.n	8001220 <HAL_TIM_Base_MspInit+0x34>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80011fe:	b002      	add	sp, #8
 8001200:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <HAL_TIM_Base_MspInit+0x6c>)
 8001204:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001208:	f042 0210 	orr.w	r2, r2, #16
 800120c:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001214:	f003 0310 	and.w	r3, r3, #16
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	9b00      	ldr	r3, [sp, #0]
}
 800121c:	b002      	add	sp, #8
 800121e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001220:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <HAL_TIM_Base_MspInit+0x6c>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2037      	movs	r0, #55	@ 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001226:	f8d3 40e8 	ldr.w	r4, [r3, #232]	@ 0xe8
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800122a:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 800122c:	f044 0420 	orr.w	r4, r4, #32
 8001230:	f8c3 40e8 	str.w	r4, [r3, #232]	@ 0xe8
 8001234:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001238:	f003 0320 	and.w	r3, r3, #32
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001240:	f000 ff5c 	bl	80020fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001244:	2037      	movs	r0, #55	@ 0x37
}
 8001246:	b002      	add	sp, #8
 8001248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800124c:	f000 bf92 	b.w	8002174 <HAL_NVIC_EnableIRQ>
 8001250:	40001000 	.word	0x40001000
 8001254:	40001400 	.word	0x40001400
 8001258:	58024400 	.word	0x58024400

0800125c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800125c:	b530      	push	{r4, r5, lr}
 800125e:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	2100      	movs	r1, #0
{
 8001262:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001264:	22c0      	movs	r2, #192	@ 0xc0
 8001266:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	9106      	str	r1, [sp, #24]
 800126a:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800126e:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001272:	f004 fcdb 	bl	8005c2c <memset>
  if(huart->Instance==USART3)
 8001276:	4b2f      	ldr	r3, [pc, #188]	@ (8001334 <HAL_UART_MspInit+0xd8>)
 8001278:	6822      	ldr	r2, [r4, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d001      	beq.n	8001282 <HAL_UART_MspInit+0x26>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800127e:	b039      	add	sp, #228	@ 0xe4
 8001280:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001282:	2202      	movs	r2, #2
 8001284:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001286:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001288:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128c:	f002 fbfe 	bl	8003a8c <HAL_RCCEx_PeriphCLKConfig>
 8001290:	2800      	cmp	r0, #0
 8001292:	d148      	bne.n	8001326 <HAL_UART_MspInit+0xca>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001294:	4b28      	ldr	r3, [pc, #160]	@ (8001338 <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001296:	2007      	movs	r0, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001298:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 800129a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800129e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80012a2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80012a6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80012aa:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80012ae:	9200      	str	r2, [sp, #0]
 80012b0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012b6:	f042 0208 	orr.w	r2, r2, #8
 80012ba:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012be:	f44f 7240 	mov.w	r2, #768	@ 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012c6:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c8:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012cc:	481b      	ldr	r0, [pc, #108]	@ (800133c <HAL_UART_MspInit+0xe0>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ce:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012d0:	2302      	movs	r3, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d2:	9d01      	ldr	r5, [sp, #4]
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80012d4:	4d1a      	ldr	r5, [pc, #104]	@ (8001340 <HAL_UART_MspInit+0xe4>)
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012da:	2200      	movs	r2, #0
 80012dc:	2300      	movs	r3, #0
 80012de:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e2:	f001 fb99 	bl	8002a18 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80012e6:	4917      	ldr	r1, [pc, #92]	@ (8001344 <HAL_UART_MspInit+0xe8>)
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80012e8:	222e      	movs	r2, #46	@ 0x2e
 80012ea:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80012ec:	4628      	mov	r0, r5
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80012ee:	60eb      	str	r3, [r5, #12]
 80012f0:	616b      	str	r3, [r5, #20]
 80012f2:	e9c5 1200 	strd	r1, r2, [r5]
 80012f6:	2140      	movs	r1, #64	@ 0x40
 80012f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012fc:	e9c5 3306 	strd	r3, r3, [r5, #24]
 8001300:	60a9      	str	r1, [r5, #8]
 8001302:	612a      	str	r2, [r5, #16]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001304:	e9c5 3308 	strd	r3, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001308:	f001 f900 	bl	800250c <HAL_DMA_Init>
 800130c:	b970      	cbnz	r0, 800132c <HAL_UART_MspInit+0xd0>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2027      	movs	r0, #39	@ 0x27
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001312:	67e5      	str	r5, [r4, #124]	@ 0x7c
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001314:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001316:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001318:	f000 fef0 	bl	80020fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800131c:	2027      	movs	r0, #39	@ 0x27
 800131e:	f000 ff29 	bl	8002174 <HAL_NVIC_EnableIRQ>
}
 8001322:	b039      	add	sp, #228	@ 0xe4
 8001324:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8001326:	f7ff fe19 	bl	8000f5c <Error_Handler>
 800132a:	e7b3      	b.n	8001294 <HAL_UART_MspInit+0x38>
      Error_Handler();
 800132c:	f7ff fe16 	bl	8000f5c <Error_Handler>
 8001330:	e7ed      	b.n	800130e <HAL_UART_MspInit+0xb2>
 8001332:	bf00      	nop
 8001334:	40004800 	.word	0x40004800
 8001338:	58024400 	.word	0x58024400
 800133c:	58020c00 	.word	0x58020c00
 8001340:	24000674 	.word	0x24000674
 8001344:	40020028 	.word	0x40020028

08001348 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001348:	e7fe      	b.n	8001348 <NMI_Handler>
 800134a:	bf00      	nop

0800134c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134c:	e7fe      	b.n	800134c <HardFault_Handler>
 800134e:	bf00      	nop

08001350 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler>
 8001352:	bf00      	nop

08001354 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <BusFault_Handler>
 8001356:	bf00      	nop

08001358 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <UsageFault_Handler>
 800135a:	bf00      	nop

0800135c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop

08001360 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop

08001364 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop

08001368 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001368:	f000 b8f8 	b.w	800155c <HAL_IncTick>

0800136c <DMA1_Stream0_IRQHandler>:
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	DMA_custom_interrupt_rx();
 800136c:	f7ff baa0 	b.w	80008b0 <DMA_custom_interrupt_rx>

08001370 <DMA1_Stream1_IRQHandler>:
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
	DMA_custom_interrupt_tx();
 8001370:	f7ff ba6e 	b.w	8000850 <DMA_custom_interrupt_tx>

08001374 <USART3_IRQHandler>:
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */
	USART_custom_interrupt();
 8001374:	f7ff bae4 	b.w	8000940 <USART_custom_interrupt>

08001378 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001378:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */
	TIM7_custom_interrupt();
 800137a:	f7ff f9df 	bl	800073c <TIM7_custom_interrupt>

	if(1)
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800137e:	4802      	ldr	r0, [pc, #8]	@ (8001388 <TIM7_IRQHandler+0x10>)
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001380:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim7);
 8001384:	f003 bf30 	b.w	80051e8 <HAL_TIM_IRQHandler>
 8001388:	24000780 	.word	0x24000780

0800138c <DMA2_Stream0_IRQHandler>:
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	DMA2_custom_interrupt();
 800138c:	f7ff bab8 	b.w	8000900 <DMA2_custom_interrupt>

08001390 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001390:	4927      	ldr	r1, [pc, #156]	@ (8001430 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001392:	4a28      	ldr	r2, [pc, #160]	@ (8001434 <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001394:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8001398:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 800139c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800139e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013a2:	6813      	ldr	r3, [r2, #0]
 80013a4:	f003 030f 	and.w	r3, r3, #15
 80013a8:	2b06      	cmp	r3, #6
 80013aa:	d805      	bhi.n	80013b8 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013ac:	6813      	ldr	r3, [r2, #0]
 80013ae:	f023 030f 	bic.w	r3, r3, #15
 80013b2:	f043 0307 	orr.w	r3, r3, #7
 80013b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001438 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013ba:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013bc:	4a1f      	ldr	r2, [pc, #124]	@ (800143c <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 80013be:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013c0:	481c      	ldr	r0, [pc, #112]	@ (8001434 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 80013c2:	f041 0101 	orr.w	r1, r1, #1
 80013c6:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 80013c8:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80013ca:	6819      	ldr	r1, [r3, #0]
 80013cc:	400a      	ands	r2, r1
 80013ce:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013d0:	6803      	ldr	r3, [r0, #0]
 80013d2:	071b      	lsls	r3, r3, #28
 80013d4:	d505      	bpl.n	80013e2 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013d6:	6803      	ldr	r3, [r0, #0]
 80013d8:	f023 030f 	bic.w	r3, r3, #15
 80013dc:	f043 0307 	orr.w	r3, r3, #7
 80013e0:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <SystemInit+0xa8>)
 80013e4:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013e6:	4916      	ldr	r1, [pc, #88]	@ (8001440 <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 80013e8:	4c16      	ldr	r4, [pc, #88]	@ (8001444 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 80013ea:	4817      	ldr	r0, [pc, #92]	@ (8001448 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 80013ec:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80013ee:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80013f0:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80013f2:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 80013f4:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 80013f6:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013fa:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013fe:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001400:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001402:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001404:	4c11      	ldr	r4, [pc, #68]	@ (800144c <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8001406:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800140a:	4911      	ldr	r1, [pc, #68]	@ (8001450 <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 800140c:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 800140e:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001410:	6823      	ldr	r3, [r4, #0]
 8001412:	4019      	ands	r1, r3
 8001414:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8001418:	d203      	bcs.n	8001422 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800141a:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <SystemInit+0xc4>)
 800141c:	2201      	movs	r2, #1
 800141e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001422:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <SystemInit+0xc8>)
 8001424:	f243 02d2 	movw	r2, #12498	@ 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001428:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800142c:	601a      	str	r2, [r3, #0]
}
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00
 8001434:	52002000 	.word	0x52002000
 8001438:	58024400 	.word	0x58024400
 800143c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001440:	01010280 	.word	0x01010280
 8001444:	02020200 	.word	0x02020200
 8001448:	01ff0000 	.word	0x01ff0000
 800144c:	5c001000 	.word	0x5c001000
 8001450:	ffff0000 	.word	0xffff0000
 8001454:	51008000 	.word	0x51008000
 8001458:	52004000 	.word	0x52004000

0800145c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800145c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001494 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001460:	f7ff ff96 	bl	8001390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001464:	480c      	ldr	r0, [pc, #48]	@ (8001498 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001466:	490d      	ldr	r1, [pc, #52]	@ (800149c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001468:	4a0d      	ldr	r2, [pc, #52]	@ (80014a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800146c:	e002      	b.n	8001474 <LoopCopyDataInit>

0800146e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001472:	3304      	adds	r3, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001478:	d3f9      	bcc.n	800146e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147a:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800147c:	4c0a      	ldr	r4, [pc, #40]	@ (80014a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001480:	e001      	b.n	8001486 <LoopFillZerobss>

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001484:	3204      	adds	r2, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800148a:	f004 fbd7 	bl	8005c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800148e:	f7ff faff 	bl	8000a90 <main>
  bx  lr
 8001492:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001494:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001498:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800149c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80014a0:	08005cec 	.word	0x08005cec
  ldr r2, =_sbss
 80014a4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80014a8:	24000a44 	.word	0x24000a44

080014ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC3_IRQHandler>
	...

080014b0 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <HAL_InitTick+0x40>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b90b      	cbnz	r3, 80014ba <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80014b6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014b8:	4770      	bx	lr
{
 80014ba:	b510      	push	{r4, lr}
 80014bc:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014c2:	4a0c      	ldr	r2, [pc, #48]	@ (80014f4 <HAL_InitTick+0x44>)
 80014c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c8:	6810      	ldr	r0, [r2, #0]
 80014ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80014ce:	f000 fe5f 	bl	8002190 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	b908      	cbnz	r0, 80014d8 <HAL_InitTick+0x28>
 80014d4:	2c0f      	cmp	r4, #15
 80014d6:	d901      	bls.n	80014dc <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80014d8:	2001      	movs	r0, #1
}
 80014da:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	4621      	mov	r1, r4
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f000 fe0a 	bl	80020fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <HAL_InitTick+0x48>)
 80014ea:	2000      	movs	r0, #0
 80014ec:	601c      	str	r4, [r3, #0]
}
 80014ee:	bd10      	pop	{r4, pc}
 80014f0:	24000008 	.word	0x24000008
 80014f4:	24000004 	.word	0x24000004
 80014f8:	2400000c 	.word	0x2400000c

080014fc <HAL_Init>:
{
 80014fc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fe:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001500:	4c12      	ldr	r4, [pc, #72]	@ (800154c <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001502:	f000 fde9 	bl	80020d8 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001506:	f001 ff55 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 800150a:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <HAL_Init+0x54>)
 800150c:	4911      	ldr	r1, [pc, #68]	@ (8001554 <HAL_Init+0x58>)
 800150e:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001510:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001512:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001516:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800151a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800151c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800151e:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8001522:	490d      	ldr	r1, [pc, #52]	@ (8001558 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001524:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001528:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800152a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800152e:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001530:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001532:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001534:	f7ff ffbc 	bl	80014b0 <HAL_InitTick>
 8001538:	b110      	cbz	r0, 8001540 <HAL_Init+0x44>
    return HAL_ERROR;
 800153a:	2401      	movs	r4, #1
}
 800153c:	4620      	mov	r0, r4
 800153e:	bd10      	pop	{r4, pc}
 8001540:	4604      	mov	r4, r0
  HAL_MspInit();
 8001542:	f7ff fd0d 	bl	8000f60 <HAL_MspInit>
}
 8001546:	4620      	mov	r0, r4
 8001548:	bd10      	pop	{r4, pc}
 800154a:	bf00      	nop
 800154c:	24000000 	.word	0x24000000
 8001550:	58024400 	.word	0x58024400
 8001554:	08005c9c 	.word	0x08005c9c
 8001558:	24000004 	.word	0x24000004

0800155c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800155c:	4a03      	ldr	r2, [pc, #12]	@ (800156c <HAL_IncTick+0x10>)
 800155e:	4b04      	ldr	r3, [pc, #16]	@ (8001570 <HAL_IncTick+0x14>)
 8001560:	6811      	ldr	r1, [r2, #0]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	440b      	add	r3, r1
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	24000a40 	.word	0x24000a40
 8001570:	24000008 	.word	0x24000008

08001574 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001574:	4b01      	ldr	r3, [pc, #4]	@ (800157c <HAL_GetTick+0x8>)
 8001576:	6818      	ldr	r0, [r3, #0]
}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	24000a40 	.word	0x24000a40

08001580 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001580:	4b01      	ldr	r3, [pc, #4]	@ (8001588 <HAL_GetREVID+0x8>)
 8001582:	6818      	ldr	r0, [r3, #0]
}
 8001584:	0c00      	lsrs	r0, r0, #16
 8001586:	4770      	bx	lr
 8001588:	5c001000 	.word	0x5c001000

0800158c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 800158c:	4a03      	ldr	r2, [pc, #12]	@ (800159c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 800158e:	6813      	ldr	r3, [r2, #0]
 8001590:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001594:	4303      	orrs	r3, r0
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	58003c00 	.word	0x58003c00

080015a0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80015a0:	4a03      	ldr	r2, [pc, #12]	@ (80015b0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 80015a2:	6813      	ldr	r3, [r2, #0]
 80015a4:	f023 0302 	bic.w	r3, r3, #2
 80015a8:	4303      	orrs	r3, r0
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	58003c00 	.word	0x58003c00

080015b4 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80015b4:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80015b6:	4c0a      	ldr	r4, [pc, #40]	@ (80015e0 <HAL_SYSCFG_EnableVREFBUF+0x2c>)
 80015b8:	6823      	ldr	r3, [r4, #0]
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80015c0:	f7ff ffd8 	bl	8001574 <HAL_GetTick>
 80015c4:	4605      	mov	r5, r0

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80015c6:	e004      	b.n	80015d2 <HAL_SYSCFG_EnableVREFBUF+0x1e>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80015c8:	f7ff ffd4 	bl	8001574 <HAL_GetTick>
 80015cc:	1b40      	subs	r0, r0, r5
 80015ce:	280a      	cmp	r0, #10
 80015d0:	d804      	bhi.n	80015dc <HAL_SYSCFG_EnableVREFBUF+0x28>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80015d2:	6823      	ldr	r3, [r4, #0]
 80015d4:	071b      	lsls	r3, r3, #28
 80015d6:	d5f7      	bpl.n	80015c8 <HAL_SYSCFG_EnableVREFBUF+0x14>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80015d8:	2000      	movs	r0, #0
}
 80015da:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 80015dc:	2003      	movs	r0, #3
}
 80015de:	bd38      	pop	{r3, r4, r5, pc}
 80015e0:	58003c00 	.word	0x58003c00

080015e4 <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80015e4:	4a03      	ldr	r2, [pc, #12]	@ (80015f4 <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 80015e6:	6853      	ldr	r3, [r2, #4]
 80015e8:	ea23 0300 	bic.w	r3, r3, r0
 80015ec:	430b      	orrs	r3, r1
 80015ee:	6053      	str	r3, [r2, #4]
}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	58000400 	.word	0x58000400

080015f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015f8:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80015fa:	2200      	movs	r2, #0
{
 80015fc:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80015fe:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001600:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8001604:	2a01      	cmp	r2, #1
 8001606:	f000 80f4 	beq.w	80017f2 <HAL_ADC_ConfigChannel+0x1fa>
 800160a:	2401      	movs	r4, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800160c:	6802      	ldr	r2, [r0, #0]
 800160e:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001610:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001614:	6890      	ldr	r0, [r2, #8]
 8001616:	0745      	lsls	r5, r0, #29
 8001618:	d509      	bpl.n	800162e <HAL_ADC_ConfigChannel+0x36>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800161a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);

    tmp_hal_status = HAL_ERROR;
 800161c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800161e:	f042 0220 	orr.w	r2, r2, #32
 8001622:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800162a:	b002      	add	sp, #8
 800162c:	bd70      	pop	{r4, r5, r6, pc}
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800162e:	680d      	ldr	r5, [r1, #0]
 8001630:	2d00      	cmp	r5, #0
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001632:	ea4f 6095 	mov.w	r0, r5, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001636:	db0d      	blt.n	8001654 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001638:	f3c5 0613 	ubfx	r6, r5, #0, #20
 800163c:	2e00      	cmp	r6, #0
 800163e:	f000 80c5 	beq.w	80017cc <HAL_ADC_ConfigChannel+0x1d4>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001642:	fa95 f5a5 	rbit	r5, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001646:	b115      	cbz	r5, 800164e <HAL_ADC_ConfigChannel+0x56>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001648:	fab5 f585 	clz	r5, r5
 800164c:	40ac      	lsls	r4, r5
 800164e:	69d5      	ldr	r5, [r2, #28]
 8001650:	432c      	orrs	r4, r5
 8001652:	61d4      	str	r4, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001654:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8001656:	f04f 0c1f 	mov.w	ip, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800165a:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 800165e:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001662:	09a5      	lsrs	r5, r4, #6
  MODIFY_REG(*preg,
 8001664:	ea04 040c 	and.w	r4, r4, ip
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001668:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 800166c:	fa0c fc04 	lsl.w	ip, ip, r4
 8001670:	40a0      	lsls	r0, r4
 8001672:	f85e 4005 	ldr.w	r4, [lr, r5]
 8001676:	ea24 0c0c 	bic.w	ip, r4, ip
 800167a:	ea4c 0000 	orr.w	r0, ip, r0
 800167e:	f84e 0005 	str.w	r0, [lr, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001682:	6890      	ldr	r0, [r2, #8]
 8001684:	f010 0f04 	tst.w	r0, #4
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001688:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800168a:	d101      	bne.n	8001690 <HAL_ADC_ConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800168c:	0704      	lsls	r4, r0, #28
 800168e:	d546      	bpl.n	800171e <HAL_ADC_ConfigChannel+0x126>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001690:	6890      	ldr	r0, [r2, #8]
 8001692:	07c0      	lsls	r0, r0, #31
 8001694:	d441      	bmi.n	800171a <HAL_ADC_ConfigChannel+0x122>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001696:	68cd      	ldr	r5, [r1, #12]
 8001698:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 800169a:	f005 0618 	and.w	r6, r5, #24
 800169e:	48b1      	ldr	r0, [pc, #708]	@ (8001964 <HAL_ADC_ConfigChannel+0x36c>)
 80016a0:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 80016a4:	40f0      	lsrs	r0, r6
 80016a6:	f3c4 0613 	ubfx	r6, r4, #0, #20
 80016aa:	4020      	ands	r0, r4
 80016ac:	ea21 0106 	bic.w	r1, r1, r6
 80016b0:	4301      	orrs	r1, r0
 80016b2:	f8c2 10c0 	str.w	r1, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80016b6:	49ac      	ldr	r1, [pc, #688]	@ (8001968 <HAL_ADC_ConfigChannel+0x370>)
 80016b8:	428d      	cmp	r5, r1
 80016ba:	f000 808e 	beq.w	80017da <HAL_ADC_ConfigChannel+0x1e2>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016be:	2c00      	cmp	r4, #0
 80016c0:	da2b      	bge.n	800171a <HAL_ADC_ConfigChannel+0x122>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016c2:	49aa      	ldr	r1, [pc, #680]	@ (800196c <HAL_ADC_ConfigChannel+0x374>)
 80016c4:	428a      	cmp	r2, r1
 80016c6:	f000 80c2 	beq.w	800184e <HAL_ADC_ConfigChannel+0x256>
 80016ca:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 80016ce:	428a      	cmp	r2, r1
 80016d0:	f000 80bd 	beq.w	800184e <HAL_ADC_ConfigChannel+0x256>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016d4:	f101 51c0 	add.w	r1, r1, #402653184	@ 0x18000000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016d8:	4da5      	ldr	r5, [pc, #660]	@ (8001970 <HAL_ADC_ConfigChannel+0x378>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016da:	f501 4184 	add.w	r1, r1, #16896	@ 0x4200
 80016de:	6888      	ldr	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016e0:	68ae      	ldr	r6, [r5, #8]
 80016e2:	07f6      	lsls	r6, r6, #31
 80016e4:	d499      	bmi.n	800161a <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80016e6:	4ea3      	ldr	r6, [pc, #652]	@ (8001974 <HAL_ADC_ConfigChannel+0x37c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016e8:	f000 7ce0 	and.w	ip, r0, #29360128	@ 0x1c00000
 80016ec:	42b4      	cmp	r4, r6
 80016ee:	f000 8186 	beq.w	80019fe <HAL_ADC_ConfigChannel+0x406>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80016f2:	4ea1      	ldr	r6, [pc, #644]	@ (8001978 <HAL_ADC_ConfigChannel+0x380>)
 80016f4:	42b4      	cmp	r4, r6
 80016f6:	f000 8173 	beq.w	80019e0 <HAL_ADC_ConfigChannel+0x3e8>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80016fa:	4da0      	ldr	r5, [pc, #640]	@ (800197c <HAL_ADC_ConfigChannel+0x384>)
 80016fc:	42ac      	cmp	r4, r5
 80016fe:	d10c      	bne.n	800171a <HAL_ADC_ConfigChannel+0x122>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001700:	0240      	lsls	r0, r0, #9
 8001702:	d40a      	bmi.n	800171a <HAL_ADC_ConfigChannel+0x122>
 8001704:	489a      	ldr	r0, [pc, #616]	@ (8001970 <HAL_ADC_ConfigChannel+0x378>)
 8001706:	4282      	cmp	r2, r0
 8001708:	d107      	bne.n	800171a <HAL_ADC_ConfigChannel+0x122>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800170a:	688a      	ldr	r2, [r1, #8]
 800170c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001710:	ea42 020c 	orr.w	r2, r2, ip
 8001714:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001718:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800171a:	2000      	movs	r0, #0
 800171c:	e782      	b.n	8001624 <HAL_ADC_ConfigChannel+0x2c>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800171e:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001720:	f102 0c14 	add.w	ip, r2, #20
  MODIFY_REG(*preg,
 8001724:	f04f 0e07 	mov.w	lr, #7
 8001728:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800172a:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 800172c:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001730:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8001734:	fa0e fe04 	lsl.w	lr, lr, r4
 8001738:	fa06 f404 	lsl.w	r4, r6, r4
 800173c:	f85c 0005 	ldr.w	r0, [ip, r5]
 8001740:	ea20 000e 	bic.w	r0, r0, lr
 8001744:	4320      	orrs	r0, r4
 8001746:	f84c 0005 	str.w	r0, [ip, r5]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800174a:	488d      	ldr	r0, [pc, #564]	@ (8001980 <HAL_ADC_ConfigChannel+0x388>)
 800174c:	694d      	ldr	r5, [r1, #20]
 800174e:	6800      	ldr	r0, [r0, #0]
 8001750:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 8001754:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8001758:	68d0      	ldr	r0, [r2, #12]
 800175a:	d039      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0x1d8>
 800175c:	f010 0f10 	tst.w	r0, #16
 8001760:	68d0      	ldr	r0, [r2, #12]
 8001762:	d035      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0x1d8>
 8001764:	0840      	lsrs	r0, r0, #1
 8001766:	f000 0008 	and.w	r0, r0, #8
 800176a:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800176c:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800176e:	6808      	ldr	r0, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001770:	2e04      	cmp	r6, #4
 8001772:	d041      	beq.n	80017f8 <HAL_ADC_ConfigChannel+0x200>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001774:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 8001778:	f000 44f8 	and.w	r4, r0, #2080374784	@ 0x7c000000
 800177c:	f85c 0026 	ldr.w	r0, [ip, r6, lsl #2]
 8001780:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8001784:	4320      	orrs	r0, r4
 8001786:	4328      	orrs	r0, r5
 8001788:	f84c 0026 	str.w	r0, [ip, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800178c:	7e4c      	ldrb	r4, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800178e:	690d      	ldr	r5, [r1, #16]
 8001790:	f1a4 0401 	sub.w	r4, r4, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001794:	f85c 0025 	ldr.w	r0, [ip, r5, lsl #2]
 8001798:	fab4 f484 	clz	r4, r4
 800179c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80017a0:	0964      	lsrs	r4, r4, #5
 80017a2:	ea40 70c4 	orr.w	r0, r0, r4, lsl #31
 80017a6:	f84c 0025 	str.w	r0, [ip, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80017aa:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80017ac:	690d      	ldr	r5, [r1, #16]
 80017ae:	f1a0 0001 	sub.w	r0, r0, #1
 80017b2:	6914      	ldr	r4, [r2, #16]
 80017b4:	f005 051f 	and.w	r5, r5, #31
 80017b8:	fab0 f080 	clz	r0, r0
 80017bc:	f424 44f0 	bic.w	r4, r4, #30720	@ 0x7800
 80017c0:	0940      	lsrs	r0, r0, #5
 80017c2:	02c0      	lsls	r0, r0, #11
 80017c4:	40a8      	lsls	r0, r5
 80017c6:	4320      	orrs	r0, r4
 80017c8:	6110      	str	r0, [r2, #16]
}
 80017ca:	e761      	b.n	8001690 <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80017cc:	4084      	lsls	r4, r0
 80017ce:	e73e      	b.n	800164e <HAL_ADC_ConfigChannel+0x56>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80017d0:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80017d4:	0040      	lsls	r0, r0, #1
 80017d6:	4085      	lsls	r5, r0
 80017d8:	e7c8      	b.n	800176c <HAL_ADC_ConfigChannel+0x174>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80017da:	4964      	ldr	r1, [pc, #400]	@ (800196c <HAL_ADC_ConfigChannel+0x374>)
 80017dc:	428a      	cmp	r2, r1
 80017de:	f000 808a 	beq.w	80018f6 <HAL_ADC_ConfigChannel+0x2fe>
 80017e2:	4968      	ldr	r1, [pc, #416]	@ (8001984 <HAL_ADC_ConfigChannel+0x38c>)
 80017e4:	428a      	cmp	r2, r1
 80017e6:	d04b      	beq.n	8001880 <HAL_ADC_ConfigChannel+0x288>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80017e8:	69d1      	ldr	r1, [r2, #28]
 80017ea:	f041 0101 	orr.w	r1, r1, #1
 80017ee:	61d1      	str	r1, [r2, #28]
}
 80017f0:	e765      	b.n	80016be <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 80017f2:	2002      	movs	r0, #2
}
 80017f4:	b002      	add	sp, #8
 80017f6:	bd70      	pop	{r4, r5, r6, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017f8:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 80017fa:	0684      	lsls	r4, r0, #26
 80017fc:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 8001800:	ebb5 6f80 	cmp.w	r5, r0, lsl #26
 8001804:	d014      	beq.n	8001830 <HAL_ADC_ConfigChannel+0x238>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001806:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8001808:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 800180c:	4284      	cmp	r4, r0
 800180e:	d019      	beq.n	8001844 <HAL_ADC_ConfigChannel+0x24c>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001810:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8001812:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001816:	4284      	cmp	r4, r0
 8001818:	d00f      	beq.n	800183a <HAL_ADC_ConfigChannel+0x242>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800181a:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 800181c:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001820:	4284      	cmp	r4, r0
 8001822:	f47f af35 	bne.w	8001690 <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001826:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8001828:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800182c:	66d0      	str	r0, [r2, #108]	@ 0x6c
 800182e:	e72f      	b.n	8001690 <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001830:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8001832:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001836:	6610      	str	r0, [r2, #96]	@ 0x60
 8001838:	e7e5      	b.n	8001806 <HAL_ADC_ConfigChannel+0x20e>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800183a:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 800183c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001840:	6690      	str	r0, [r2, #104]	@ 0x68
 8001842:	e7ea      	b.n	800181a <HAL_ADC_ConfigChannel+0x222>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001844:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8001846:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800184a:	6650      	str	r0, [r2, #100]	@ 0x64
 800184c:	e7e0      	b.n	8001810 <HAL_ADC_ConfigChannel+0x218>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800184e:	4d47      	ldr	r5, [pc, #284]	@ (800196c <HAL_ADC_ConfigChannel+0x374>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001850:	494d      	ldr	r1, [pc, #308]	@ (8001988 <HAL_ADC_ConfigChannel+0x390>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001852:	f505 7580 	add.w	r5, r5, #256	@ 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001856:	6888      	ldr	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001858:	f855 6cf8 	ldr.w	r6, [r5, #-248]
 800185c:	68ad      	ldr	r5, [r5, #8]
 800185e:	07ed      	lsls	r5, r5, #31
 8001860:	f53f aedb 	bmi.w	800161a <HAL_ADC_ConfigChannel+0x22>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001864:	07f5      	lsls	r5, r6, #31
 8001866:	f53f aed8 	bmi.w	800161a <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800186a:	4d42      	ldr	r5, [pc, #264]	@ (8001974 <HAL_ADC_ConfigChannel+0x37c>)
 800186c:	42ac      	cmp	r4, r5
 800186e:	f43f af54 	beq.w	800171a <HAL_ADC_ConfigChannel+0x122>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001872:	4d41      	ldr	r5, [pc, #260]	@ (8001978 <HAL_ADC_ConfigChannel+0x380>)
 8001874:	42ac      	cmp	r4, r5
 8001876:	f43f af50 	beq.w	800171a <HAL_ADC_ConfigChannel+0x122>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800187a:	f000 7ce0 	and.w	ip, r0, #29360128	@ 0x1c00000
 800187e:	e73c      	b.n	80016fa <HAL_ADC_ConfigChannel+0x102>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001880:	4942      	ldr	r1, [pc, #264]	@ (800198c <HAL_ADC_ConfigChannel+0x394>)
 8001882:	428c      	cmp	r4, r1
 8001884:	f000 8092 	beq.w	80019ac <HAL_ADC_ConfigChannel+0x3b4>
 8001888:	4941      	ldr	r1, [pc, #260]	@ (8001990 <HAL_ADC_ConfigChannel+0x398>)
 800188a:	428c      	cmp	r4, r1
 800188c:	f000 809a 	beq.w	80019c4 <HAL_ADC_ConfigChannel+0x3cc>
 8001890:	4940      	ldr	r1, [pc, #256]	@ (8001994 <HAL_ADC_ConfigChannel+0x39c>)
 8001892:	428c      	cmp	r4, r1
 8001894:	f000 80d6 	beq.w	8001a44 <HAL_ADC_ConfigChannel+0x44c>
 8001898:	493f      	ldr	r1, [pc, #252]	@ (8001998 <HAL_ADC_ConfigChannel+0x3a0>)
 800189a:	428c      	cmp	r4, r1
 800189c:	f000 80dc 	beq.w	8001a58 <HAL_ADC_ConfigChannel+0x460>
 80018a0:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 80018a4:	3110      	adds	r1, #16
 80018a6:	428c      	cmp	r4, r1
 80018a8:	f000 80e2 	beq.w	8001a70 <HAL_ADC_ConfigChannel+0x478>
 80018ac:	493b      	ldr	r1, [pc, #236]	@ (800199c <HAL_ADC_ConfigChannel+0x3a4>)
 80018ae:	428c      	cmp	r4, r1
 80018b0:	f000 80f6 	beq.w	8001aa0 <HAL_ADC_ConfigChannel+0x4a8>
 80018b4:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 80018b8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80018bc:	428c      	cmp	r4, r1
 80018be:	f000 8104 	beq.w	8001aca <HAL_ADC_ConfigChannel+0x4d2>
 80018c2:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 80018c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80018ca:	428c      	cmp	r4, r1
 80018cc:	f000 810b 	beq.w	8001ae6 <HAL_ADC_ConfigChannel+0x4ee>
 80018d0:	4933      	ldr	r1, [pc, #204]	@ (80019a0 <HAL_ADC_ConfigChannel+0x3a8>)
 80018d2:	428c      	cmp	r4, r1
 80018d4:	d188      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x1f0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	4a33      	ldr	r2, [pc, #204]	@ (80019a4 <HAL_ADC_ConfigChannel+0x3ac>)
 80018d8:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80018dc:	2a00      	cmp	r2, #0
 80018de:	f000 80cd 	beq.w	8001a7c <HAL_ADC_ConfigChannel+0x484>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80018e2:	4828      	ldr	r0, [pc, #160]	@ (8001984 <HAL_ADC_ConfigChannel+0x38c>)
  return __builtin_clz(value);
 80018e4:	fab2 f282 	clz	r2, r2
 80018e8:	2101      	movs	r1, #1
 80018ea:	69c4      	ldr	r4, [r0, #28]
 80018ec:	fa01 f202 	lsl.w	r2, r1, r2
 80018f0:	4322      	orrs	r2, r4
 80018f2:	61c2      	str	r2, [r0, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80018f4:	e711      	b.n	800171a <HAL_ADC_ConfigChannel+0x122>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80018f6:	4925      	ldr	r1, [pc, #148]	@ (800198c <HAL_ADC_ConfigChannel+0x394>)
 80018f8:	428c      	cmp	r4, r1
 80018fa:	d057      	beq.n	80019ac <HAL_ADC_ConfigChannel+0x3b4>
 80018fc:	4924      	ldr	r1, [pc, #144]	@ (8001990 <HAL_ADC_ConfigChannel+0x398>)
 80018fe:	428c      	cmp	r4, r1
 8001900:	d060      	beq.n	80019c4 <HAL_ADC_ConfigChannel+0x3cc>
 8001902:	4924      	ldr	r1, [pc, #144]	@ (8001994 <HAL_ADC_ConfigChannel+0x39c>)
 8001904:	428c      	cmp	r4, r1
 8001906:	f000 809d 	beq.w	8001a44 <HAL_ADC_ConfigChannel+0x44c>
 800190a:	4923      	ldr	r1, [pc, #140]	@ (8001998 <HAL_ADC_ConfigChannel+0x3a0>)
 800190c:	428c      	cmp	r4, r1
 800190e:	f000 80a3 	beq.w	8001a58 <HAL_ADC_ConfigChannel+0x460>
 8001912:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8001916:	3110      	adds	r1, #16
 8001918:	428c      	cmp	r4, r1
 800191a:	f000 80a3 	beq.w	8001a64 <HAL_ADC_ConfigChannel+0x46c>
 800191e:	491f      	ldr	r1, [pc, #124]	@ (800199c <HAL_ADC_ConfigChannel+0x3a4>)
 8001920:	428c      	cmp	r4, r1
 8001922:	f000 80b1 	beq.w	8001a88 <HAL_ADC_ConfigChannel+0x490>
 8001926:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 800192a:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800192e:	428c      	cmp	r4, r1
 8001930:	f000 80bd 	beq.w	8001aae <HAL_ADC_ConfigChannel+0x4b6>
 8001934:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8001938:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800193c:	428c      	cmp	r4, r1
 800193e:	f000 80bd 	beq.w	8001abc <HAL_ADC_ConfigChannel+0x4c4>
 8001942:	4919      	ldr	r1, [pc, #100]	@ (80019a8 <HAL_ADC_ConfigChannel+0x3b0>)
 8001944:	428c      	cmp	r4, r1
 8001946:	f000 80c7 	beq.w	8001ad8 <HAL_ADC_ConfigChannel+0x4e0>
 800194a:	4915      	ldr	r1, [pc, #84]	@ (80019a0 <HAL_ADC_ConfigChannel+0x3a8>)
 800194c:	428c      	cmp	r4, r1
 800194e:	f47f af4b 	bne.w	80017e8 <HAL_ADC_ConfigChannel+0x1f0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	4a14      	ldr	r2, [pc, #80]	@ (80019a4 <HAL_ADC_ConfigChannel+0x3ac>)
 8001954:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001958:	2a00      	cmp	r2, #0
 800195a:	f000 809b 	beq.w	8001a94 <HAL_ADC_ConfigChannel+0x49c>
 800195e:	4803      	ldr	r0, [pc, #12]	@ (800196c <HAL_ADC_ConfigChannel+0x374>)
 8001960:	e7c0      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x2ec>
 8001962:	bf00      	nop
 8001964:	000fffff 	.word	0x000fffff
 8001968:	47ff0000 	.word	0x47ff0000
 800196c:	40022000 	.word	0x40022000
 8001970:	58026000 	.word	0x58026000
 8001974:	cb840000 	.word	0xcb840000
 8001978:	c7520000 	.word	0xc7520000
 800197c:	cfb80000 	.word	0xcfb80000
 8001980:	5c001000 	.word	0x5c001000
 8001984:	40022100 	.word	0x40022100
 8001988:	40022300 	.word	0x40022300
 800198c:	04300002 	.word	0x04300002
 8001990:	08600004 	.word	0x08600004
 8001994:	0c900008 	.word	0x0c900008
 8001998:	10c00010 	.word	0x10c00010
 800199c:	2a000400 	.word	0x2a000400
 80019a0:	4b840000 	.word	0x4b840000
 80019a4:	4fb80000 	.word	0x4fb80000
 80019a8:	43210000 	.word	0x43210000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	2101      	movs	r1, #1
 80019ae:	fa91 f0a1 	rbit	r0, r1
  if (value == 0U)
 80019b2:	2800      	cmp	r0, #0
 80019b4:	d04b      	beq.n	8001a4e <HAL_ADC_ConfigChannel+0x456>
  return __builtin_clz(value);
 80019b6:	fab0 f080 	clz	r0, r0
 80019ba:	69d4      	ldr	r4, [r2, #28]
 80019bc:	4081      	lsls	r1, r0
 80019be:	4321      	orrs	r1, r4
 80019c0:	61d1      	str	r1, [r2, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019c2:	e6aa      	b.n	800171a <HAL_ADC_ConfigChannel+0x122>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	494b      	ldr	r1, [pc, #300]	@ (8001af4 <HAL_ADC_ConfigChannel+0x4fc>)
 80019c6:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 80019ca:	2900      	cmp	r1, #0
 80019cc:	d03f      	beq.n	8001a4e <HAL_ADC_ConfigChannel+0x456>
  return __builtin_clz(value);
 80019ce:	fab1 f181 	clz	r1, r1
 80019d2:	2001      	movs	r0, #1
 80019d4:	69d4      	ldr	r4, [r2, #28]
 80019d6:	fa00 f101 	lsl.w	r1, r0, r1
 80019da:	4321      	orrs	r1, r4
 80019dc:	61d1      	str	r1, [r2, #28]
 80019de:	e69c      	b.n	800171a <HAL_ADC_ConfigChannel+0x122>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019e0:	01c4      	lsls	r4, r0, #7
 80019e2:	f53f ae9a 	bmi.w	800171a <HAL_ADC_ConfigChannel+0x122>
 80019e6:	42aa      	cmp	r2, r5
 80019e8:	f47f ae97 	bne.w	800171a <HAL_ADC_ConfigChannel+0x122>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019ec:	688a      	ldr	r2, [r1, #8]
 80019ee:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80019f2:	ea42 020c 	orr.w	r2, r2, ip
 80019f6:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80019fa:	608a      	str	r2, [r1, #8]
}
 80019fc:	e68d      	b.n	800171a <HAL_ADC_ConfigChannel+0x122>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019fe:	0206      	lsls	r6, r0, #8
 8001a00:	f53f ae8b 	bmi.w	800171a <HAL_ADC_ConfigChannel+0x122>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a04:	42aa      	cmp	r2, r5
 8001a06:	f47f ae88 	bne.w	800171a <HAL_ADC_ConfigChannel+0x122>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a0a:	688a      	ldr	r2, [r1, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a0c:	483a      	ldr	r0, [pc, #232]	@ (8001af8 <HAL_ADC_ConfigChannel+0x500>)
 8001a0e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001a12:	ea42 020c 	orr.w	r2, r2, ip
 8001a16:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001a1a:	608a      	str	r2, [r1, #8]
 8001a1c:	6802      	ldr	r2, [r0, #0]
 8001a1e:	4937      	ldr	r1, [pc, #220]	@ (8001afc <HAL_ADC_ConfigChannel+0x504>)
 8001a20:	0992      	lsrs	r2, r2, #6
 8001a22:	fba1 1202 	umull	r1, r2, r1, r2
 8001a26:	0992      	lsrs	r2, r2, #6
 8001a28:	3201      	adds	r2, #1
 8001a2a:	0052      	lsls	r2, r2, #1
 8001a2c:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001a2e:	9a01      	ldr	r2, [sp, #4]
 8001a30:	2a00      	cmp	r2, #0
 8001a32:	f43f ae72 	beq.w	800171a <HAL_ADC_ConfigChannel+0x122>
                wait_loop_index--;
 8001a36:	9a01      	ldr	r2, [sp, #4]
 8001a38:	3a01      	subs	r2, #1
 8001a3a:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001a3c:	9a01      	ldr	r2, [sp, #4]
 8001a3e:	2a00      	cmp	r2, #0
 8001a40:	d1f9      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x43e>
 8001a42:	e66a      	b.n	800171a <HAL_ADC_ConfigChannel+0x122>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a44:	492e      	ldr	r1, [pc, #184]	@ (8001b00 <HAL_ADC_ConfigChannel+0x508>)
 8001a46:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8001a4a:	2900      	cmp	r1, #0
 8001a4c:	d1bf      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x3d6>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001a4e:	69d1      	ldr	r1, [r2, #28]
 8001a50:	f041 0101 	orr.w	r1, r1, #1
 8001a54:	61d1      	str	r1, [r2, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a56:	e660      	b.n	800171a <HAL_ADC_ConfigChannel+0x122>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a58:	492a      	ldr	r1, [pc, #168]	@ (8001b04 <HAL_ADC_ConfigChannel+0x50c>)
 8001a5a:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8001a5e:	2900      	cmp	r1, #0
 8001a60:	d1b5      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x3d6>
 8001a62:	e7f4      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x456>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a64:	4928      	ldr	r1, [pc, #160]	@ (8001b08 <HAL_ADC_ConfigChannel+0x510>)
 8001a66:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8001a6a:	2900      	cmp	r1, #0
 8001a6c:	d1af      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x3d6>
 8001a6e:	e7ee      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x456>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	4a25      	ldr	r2, [pc, #148]	@ (8001b08 <HAL_ADC_ConfigChannel+0x510>)
 8001a72:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001a76:	2a00      	cmp	r2, #0
 8001a78:	f47f af33 	bne.w	80018e2 <HAL_ADC_ConfigChannel+0x2ea>
 8001a7c:	4923      	ldr	r1, [pc, #140]	@ (8001b0c <HAL_ADC_ConfigChannel+0x514>)
 8001a7e:	69ca      	ldr	r2, [r1, #28]
 8001a80:	f042 0201 	orr.w	r2, r2, #1
 8001a84:	61ca      	str	r2, [r1, #28]
 8001a86:	e648      	b.n	800171a <HAL_ADC_ConfigChannel+0x122>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	4a21      	ldr	r2, [pc, #132]	@ (8001b10 <HAL_ADC_ConfigChannel+0x518>)
 8001a8a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001a8e:	2a00      	cmp	r2, #0
 8001a90:	f47f af65 	bne.w	800195e <HAL_ADC_ConfigChannel+0x366>
 8001a94:	491f      	ldr	r1, [pc, #124]	@ (8001b14 <HAL_ADC_ConfigChannel+0x51c>)
 8001a96:	69ca      	ldr	r2, [r1, #28]
 8001a98:	f042 0201 	orr.w	r2, r2, #1
 8001a9c:	61ca      	str	r2, [r1, #28]
 8001a9e:	e63c      	b.n	800171a <HAL_ADC_ConfigChannel+0x122>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b10 <HAL_ADC_ConfigChannel+0x518>)
 8001aa2:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001aa6:	2a00      	cmp	r2, #0
 8001aa8:	f47f af1b 	bne.w	80018e2 <HAL_ADC_ConfigChannel+0x2ea>
 8001aac:	e7e6      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x484>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	4a1a      	ldr	r2, [pc, #104]	@ (8001b18 <HAL_ADC_ConfigChannel+0x520>)
 8001ab0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001ab4:	2a00      	cmp	r2, #0
 8001ab6:	f47f af52 	bne.w	800195e <HAL_ADC_ConfigChannel+0x366>
 8001aba:	e7eb      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x49c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	4a17      	ldr	r2, [pc, #92]	@ (8001b1c <HAL_ADC_ConfigChannel+0x524>)
 8001abe:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001ac2:	2a00      	cmp	r2, #0
 8001ac4:	f47f af4b 	bne.w	800195e <HAL_ADC_ConfigChannel+0x366>
 8001ac8:	e7e4      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x49c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	4a13      	ldr	r2, [pc, #76]	@ (8001b18 <HAL_ADC_ConfigChannel+0x520>)
 8001acc:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001ad0:	2a00      	cmp	r2, #0
 8001ad2:	f47f af06 	bne.w	80018e2 <HAL_ADC_ConfigChannel+0x2ea>
 8001ad6:	e7d1      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x484>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	4a11      	ldr	r2, [pc, #68]	@ (8001b20 <HAL_ADC_ConfigChannel+0x528>)
 8001ada:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001ade:	2a00      	cmp	r2, #0
 8001ae0:	f47f af3d 	bne.w	800195e <HAL_ADC_ConfigChannel+0x366>
 8001ae4:	e7d6      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x49c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	4a0d      	ldr	r2, [pc, #52]	@ (8001b1c <HAL_ADC_ConfigChannel+0x524>)
 8001ae8:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001aec:	2a00      	cmp	r2, #0
 8001aee:	f47f aef8 	bne.w	80018e2 <HAL_ADC_ConfigChannel+0x2ea>
 8001af2:	e7c3      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x484>
 8001af4:	19200040 	.word	0x19200040
 8001af8:	24000004 	.word	0x24000004
 8001afc:	053e2d63 	.word	0x053e2d63
 8001b00:	1d500080 	.word	0x1d500080
 8001b04:	21800100 	.word	0x21800100
 8001b08:	25b00200 	.word	0x25b00200
 8001b0c:	40022100 	.word	0x40022100
 8001b10:	2e300800 	.word	0x2e300800
 8001b14:	40022000 	.word	0x40022000
 8001b18:	32601000 	.word	0x32601000
 8001b1c:	36902000 	.word	0x36902000
 8001b20:	47520000 	.word	0x47520000

08001b24 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001b24:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001b26:	4a56      	ldr	r2, [pc, #344]	@ (8001c80 <ADC_ConfigureBoostMode+0x15c>)
{
 8001b28:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001b2a:	6803      	ldr	r3, [r0, #0]
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d025      	beq.n	8001b7c <ADC_ConfigureBoostMode+0x58>
 8001b30:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d021      	beq.n	8001b7c <ADC_ConfigureBoostMode+0x58>
 8001b38:	4b52      	ldr	r3, [pc, #328]	@ (8001c84 <ADC_ConfigureBoostMode+0x160>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8001b40:	d021      	beq.n	8001b86 <ADC_ConfigureBoostMode+0x62>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001b42:	f001 fdef 	bl	8003724 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8001b46:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8001b48:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8001b4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b4e:	f000 8086 	beq.w	8001c5e <ADC_ConfigureBoostMode+0x13a>
 8001b52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001b56:	d06f      	beq.n	8001c38 <ADC_ConfigureBoostMode+0x114>
 8001b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b5c:	d07f      	beq.n	8001c5e <ADC_ConfigureBoostMode+0x13a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001b5e:	f7ff fd0f 	bl	8001580 <HAL_GetREVID>
 8001b62:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001b66:	4298      	cmp	r0, r3
 8001b68:	d84b      	bhi.n	8001c02 <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 8001b6a:	4a47      	ldr	r2, [pc, #284]	@ (8001c88 <ADC_ConfigureBoostMode+0x164>)
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001b6c:	6823      	ldr	r3, [r4, #0]
    if (freq > 20000000UL)
 8001b6e:	4295      	cmp	r5, r2
 8001b70:	d92a      	bls.n	8001bc8 <ADC_ConfigureBoostMode+0xa4>
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b78:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001b7a:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001b7c:	4b43      	ldr	r3, [pc, #268]	@ (8001c8c <ADC_ConfigureBoostMode+0x168>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8001b84:	d1dd      	bne.n	8001b42 <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001b86:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	f003 f8b8 	bl	8004d00 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8001b90:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001b92:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8001b94:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001b98:	d06b      	beq.n	8001c72 <ADC_ConfigureBoostMode+0x14e>
 8001b9a:	d808      	bhi.n	8001bae <ADC_ConfigureBoostMode+0x8a>
 8001b9c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001ba0:	d054      	beq.n	8001c4c <ADC_ConfigureBoostMode+0x128>
 8001ba2:	d916      	bls.n	8001bd2 <ADC_ConfigureBoostMode+0xae>
 8001ba4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ba8:	d1d9      	bne.n	8001b5e <ADC_ConfigureBoostMode+0x3a>
        freq /= 32UL;
 8001baa:	0945      	lsrs	r5, r0, #5
        break;
 8001bac:	e7d7      	b.n	8001b5e <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 8001bae:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001bb2:	d049      	beq.n	8001c48 <ADC_ConfigureBoostMode+0x124>
 8001bb4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8001bb8:	d1d1      	bne.n	8001b5e <ADC_ConfigureBoostMode+0x3a>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001bba:	f7ff fce1 	bl	8001580 <HAL_GetREVID>
 8001bbe:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001bc2:	4298      	cmp	r0, r3
 8001bc4:	d82e      	bhi.n	8001c24 <ADC_ConfigureBoostMode+0x100>
 8001bc6:	6823      	ldr	r3, [r4, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bce:	609a      	str	r2, [r3, #8]
}
 8001bd0:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8001bd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001bd6:	d006      	beq.n	8001be6 <ADC_ConfigureBoostMode+0xc2>
 8001bd8:	d90a      	bls.n	8001bf0 <ADC_ConfigureBoostMode+0xcc>
 8001bda:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8001bde:	d002      	beq.n	8001be6 <ADC_ConfigureBoostMode+0xc2>
 8001be0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001be4:	d1bb      	bne.n	8001b5e <ADC_ConfigureBoostMode+0x3a>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001be6:	0c9b      	lsrs	r3, r3, #18
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8001bee:	e7b6      	b.n	8001b5e <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 8001bf0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001bf4:	d0f7      	beq.n	8001be6 <ADC_ConfigureBoostMode+0xc2>
 8001bf6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8001bfa:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001bfe:	d0f2      	beq.n	8001be6 <ADC_ConfigureBoostMode+0xc2>
 8001c00:	e7ad      	b.n	8001b5e <ADC_ConfigureBoostMode+0x3a>
    if (freq <= 6250000UL)
 8001c02:	4a23      	ldr	r2, [pc, #140]	@ (8001c90 <ADC_ConfigureBoostMode+0x16c>)
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001c04:	6823      	ldr	r3, [r4, #0]
    if (freq <= 6250000UL)
 8001c06:	4295      	cmp	r5, r2
 8001c08:	d911      	bls.n	8001c2e <ADC_ConfigureBoostMode+0x10a>
    else if (freq <= 12500000UL)
 8001c0a:	4a22      	ldr	r2, [pc, #136]	@ (8001c94 <ADC_ConfigureBoostMode+0x170>)
 8001c0c:	4295      	cmp	r5, r2
 8001c0e:	d91f      	bls.n	8001c50 <ADC_ConfigureBoostMode+0x12c>
    else if (freq <= 25000000UL)
 8001c10:	4a21      	ldr	r2, [pc, #132]	@ (8001c98 <ADC_ConfigureBoostMode+0x174>)
 8001c12:	4295      	cmp	r5, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001c14:	689a      	ldr	r2, [r3, #8]
    else if (freq <= 25000000UL)
 8001c16:	d82e      	bhi.n	8001c76 <ADC_ConfigureBoostMode+0x152>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001c18:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001c1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c20:	609a      	str	r2, [r3, #8]
}
 8001c22:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 8001c24:	4b1a      	ldr	r3, [pc, #104]	@ (8001c90 <ADC_ConfigureBoostMode+0x16c>)
 8001c26:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	d310      	bcc.n	8001c50 <ADC_ConfigureBoostMode+0x12c>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001c34:	609a      	str	r2, [r3, #8]
}
 8001c36:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 8001c38:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001c3a:	f7ff fca1 	bl	8001580 <HAL_GetREVID>
 8001c3e:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001c42:	4298      	cmp	r0, r3
 8001c44:	d8dd      	bhi.n	8001c02 <ADC_ConfigureBoostMode+0xde>
 8001c46:	e790      	b.n	8001b6a <ADC_ConfigureBoostMode+0x46>
        freq /= 128UL;
 8001c48:	09c5      	lsrs	r5, r0, #7
        break;
 8001c4a:	e788      	b.n	8001b5e <ADC_ConfigureBoostMode+0x3a>
        freq /= 16UL;
 8001c4c:	0905      	lsrs	r5, r0, #4
        break;
 8001c4e:	e786      	b.n	8001b5e <ADC_ConfigureBoostMode+0x3a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001c56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c5a:	609a      	str	r2, [r3, #8]
}
 8001c5c:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001c5e:	0c1b      	lsrs	r3, r3, #16
 8001c60:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001c64:	f7ff fc8c 	bl	8001580 <HAL_GetREVID>
 8001c68:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001c6c:	4298      	cmp	r0, r3
 8001c6e:	d8c8      	bhi.n	8001c02 <ADC_ConfigureBoostMode+0xde>
 8001c70:	e77b      	b.n	8001b6a <ADC_ConfigureBoostMode+0x46>
        freq /= 64UL;
 8001c72:	0985      	lsrs	r5, r0, #6
        break;
 8001c74:	e773      	b.n	8001b5e <ADC_ConfigureBoostMode+0x3a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001c76:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001c7a:	609a      	str	r2, [r3, #8]
}
 8001c7c:	bd38      	pop	{r3, r4, r5, pc}
 8001c7e:	bf00      	nop
 8001c80:	40022000 	.word	0x40022000
 8001c84:	58026300 	.word	0x58026300
 8001c88:	01312d00 	.word	0x01312d00
 8001c8c:	40022300 	.word	0x40022300
 8001c90:	00bebc21 	.word	0x00bebc21
 8001c94:	017d7841 	.word	0x017d7841
 8001c98:	02faf081 	.word	0x02faf081

08001c9c <HAL_ADC_Init>:
{
 8001c9c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8001c9e:	2300      	movs	r3, #0
{
 8001ca0:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8001ca2:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	f000 80a9 	beq.w	8001dfc <HAL_ADC_Init+0x160>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001caa:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8001cac:	4604      	mov	r4, r0
 8001cae:	2d00      	cmp	r5, #0
 8001cb0:	f000 80aa 	beq.w	8001e08 <HAL_ADC_Init+0x16c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cb4:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cb6:	6893      	ldr	r3, [r2, #8]
 8001cb8:	009e      	lsls	r6, r3, #2
 8001cba:	d503      	bpl.n	8001cc4 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cbc:	6891      	ldr	r1, [r2, #8]
 8001cbe:	4b71      	ldr	r3, [pc, #452]	@ (8001e84 <HAL_ADC_Init+0x1e8>)
 8001cc0:	400b      	ands	r3, r1
 8001cc2:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cc4:	6893      	ldr	r3, [r2, #8]
 8001cc6:	00dd      	lsls	r5, r3, #3
 8001cc8:	d416      	bmi.n	8001cf8 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cca:	4b6f      	ldr	r3, [pc, #444]	@ (8001e88 <HAL_ADC_Init+0x1ec>)
 8001ccc:	496f      	ldr	r1, [pc, #444]	@ (8001e8c <HAL_ADC_Init+0x1f0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8001cd0:	6890      	ldr	r0, [r2, #8]
 8001cd2:	099b      	lsrs	r3, r3, #6
 8001cd4:	fba1 1303 	umull	r1, r3, r1, r3
 8001cd8:	496d      	ldr	r1, [pc, #436]	@ (8001e90 <HAL_ADC_Init+0x1f4>)
 8001cda:	099b      	lsrs	r3, r3, #6
 8001cdc:	4001      	ands	r1, r0
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001ce4:	6091      	str	r1, [r2, #8]
 8001ce6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001ce8:	9b01      	ldr	r3, [sp, #4]
 8001cea:	b12b      	cbz	r3, 8001cf8 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8001cec:	9b01      	ldr	r3, [sp, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001cf2:	9b01      	ldr	r3, [sp, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f9      	bne.n	8001cec <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cf8:	6893      	ldr	r3, [r2, #8]
 8001cfa:	00d8      	lsls	r0, r3, #3
 8001cfc:	f100 8082 	bmi.w	8001e04 <HAL_ADC_Init+0x168>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d00:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8001d02:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d04:	f043 0310 	orr.w	r3, r3, #16
 8001d08:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001d0c:	432b      	orrs	r3, r5
 8001d0e:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d10:	6893      	ldr	r3, [r2, #8]
 8001d12:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d16:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001d18:	d16c      	bne.n	8001df4 <HAL_ADC_Init+0x158>
 8001d1a:	06d9      	lsls	r1, r3, #27
 8001d1c:	d46a      	bmi.n	8001df4 <HAL_ADC_Init+0x158>
    ADC_STATE_CLR_SET(hadc->State,
 8001d1e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001d20:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d24:	f043 0302 	orr.w	r3, r3, #2
 8001d28:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d2a:	6893      	ldr	r3, [r2, #8]
 8001d2c:	07db      	lsls	r3, r3, #31
 8001d2e:	d40c      	bmi.n	8001d4a <HAL_ADC_Init+0xae>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d30:	4b58      	ldr	r3, [pc, #352]	@ (8001e94 <HAL_ADC_Init+0x1f8>)
 8001d32:	429a      	cmp	r2, r3
 8001d34:	f000 8081 	beq.w	8001e3a <HAL_ADC_Init+0x19e>
 8001d38:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d07c      	beq.n	8001e3a <HAL_ADC_Init+0x19e>
 8001d40:	4b55      	ldr	r3, [pc, #340]	@ (8001e98 <HAL_ADC_Init+0x1fc>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	07d9      	lsls	r1, r3, #31
 8001d46:	f140 8089 	bpl.w	8001e5c <HAL_ADC_Init+0x1c0>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001d4a:	f7ff fc19 	bl	8001580 <HAL_GetREVID>
 8001d4e:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001d52:	68a1      	ldr	r1, [r4, #8]
 8001d54:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d56:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001d58:	d85c      	bhi.n	8001e14 <HAL_ADC_Init+0x178>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d5a:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d5e:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d60:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001d62:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8001d66:	4302      	orrs	r2, r0
 8001d68:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d103      	bne.n	8001d76 <HAL_ADC_Init+0xda>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d6e:	6a23      	ldr	r3, [r4, #32]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d76:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001d78:	b123      	cbz	r3, 8001d84 <HAL_ADC_Init+0xe8>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d7a:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d7e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001d80:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d82:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	4945      	ldr	r1, [pc, #276]	@ (8001e9c <HAL_ADC_Init+0x200>)
 8001d88:	68d8      	ldr	r0, [r3, #12]
 8001d8a:	4001      	ands	r1, r0
 8001d8c:	4311      	orrs	r1, r2
 8001d8e:	60d9      	str	r1, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d96:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d98:	d11c      	bne.n	8001dd4 <HAL_ADC_Init+0x138>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d9a:	0712      	lsls	r2, r2, #28
 8001d9c:	d41a      	bmi.n	8001dd4 <HAL_ADC_Init+0x138>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d9e:	68d8      	ldr	r0, [r3, #12]
 8001da0:	4a3f      	ldr	r2, [pc, #252]	@ (8001ea0 <HAL_ADC_Init+0x204>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001da2:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001da4:	4002      	ands	r2, r0
 8001da6:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8001daa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001dac:	430a      	orrs	r2, r1
 8001dae:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8001db0:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8001db4:	2a01      	cmp	r2, #1
 8001db6:	d053      	beq.n	8001e60 <HAL_ADC_Init+0x1c4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001db8:	691a      	ldr	r2, [r3, #16]
 8001dba:	f022 0201 	bic.w	r2, r2, #1
 8001dbe:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001dc0:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8001dc2:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001dc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001dc6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8001dce:	f7ff fea9 	bl	8001b24 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dd2:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dd4:	68e2      	ldr	r2, [r4, #12]
 8001dd6:	2a01      	cmp	r2, #1
 8001dd8:	d027      	beq.n	8001e2a <HAL_ADC_Init+0x18e>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ddc:	f022 020f 	bic.w	r2, r2, #15
 8001de0:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001de2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
}
 8001de4:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001de6:	f023 0303 	bic.w	r3, r3, #3
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8001df0:	b002      	add	sp, #8
 8001df2:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001df6:	f043 0310 	orr.w	r3, r3, #16
 8001dfa:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8001dfc:	2501      	movs	r5, #1
}
 8001dfe:	4628      	mov	r0, r5
 8001e00:	b002      	add	sp, #8
 8001e02:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e04:	2500      	movs	r5, #0
 8001e06:	e783      	b.n	8001d10 <HAL_ADC_Init+0x74>
    HAL_ADC_MspInit(hadc);
 8001e08:	f7ff f8d2 	bl	8000fb0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001e0c:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8001e0e:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8001e12:	e74f      	b.n	8001cb4 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001e14:	2910      	cmp	r1, #16
 8001e16:	d1a0      	bne.n	8001d5a <HAL_ADC_Init+0xbe>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e18:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e1a:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e1c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001e20:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001e22:	430a      	orrs	r2, r1
 8001e24:	f042 021c 	orr.w	r2, r2, #28
 8001e28:	e79f      	b.n	8001d6a <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e2c:	69a2      	ldr	r2, [r4, #24]
 8001e2e:	f021 010f 	bic.w	r1, r1, #15
 8001e32:	3a01      	subs	r2, #1
 8001e34:	430a      	orrs	r2, r1
 8001e36:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e38:	e7d3      	b.n	8001de2 <HAL_ADC_Init+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e3a:	4a16      	ldr	r2, [pc, #88]	@ (8001e94 <HAL_ADC_Init+0x1f8>)
 8001e3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ea4 <HAL_ADC_Init+0x208>)
 8001e3e:	6892      	ldr	r2, [r2, #8]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	07de      	lsls	r6, r3, #31
 8001e44:	d481      	bmi.n	8001d4a <HAL_ADC_Init+0xae>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e46:	07d0      	lsls	r0, r2, #31
 8001e48:	f53f af7f 	bmi.w	8001d4a <HAL_ADC_Init+0xae>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e4c:	4a16      	ldr	r2, [pc, #88]	@ (8001ea8 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e4e:	6893      	ldr	r3, [r2, #8]
 8001e50:	6861      	ldr	r1, [r4, #4]
 8001e52:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001e56:	430b      	orrs	r3, r1
 8001e58:	6093      	str	r3, [r2, #8]
}
 8001e5a:	e776      	b.n	8001d4a <HAL_ADC_Init+0xae>
 8001e5c:	4a13      	ldr	r2, [pc, #76]	@ (8001eac <HAL_ADC_Init+0x210>)
 8001e5e:	e7f6      	b.n	8001e4e <HAL_ADC_Init+0x1b2>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e60:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8001e64:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8001e66:	3901      	subs	r1, #1
 8001e68:	6918      	ldr	r0, [r3, #16]
 8001e6a:	4332      	orrs	r2, r6
 8001e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001e70:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8001e72:	430a      	orrs	r2, r1
 8001e74:	490e      	ldr	r1, [pc, #56]	@ (8001eb0 <HAL_ADC_Init+0x214>)
 8001e76:	4001      	ands	r1, r0
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	611a      	str	r2, [r3, #16]
 8001e80:	e79e      	b.n	8001dc0 <HAL_ADC_Init+0x124>
 8001e82:	bf00      	nop
 8001e84:	5fffffc0 	.word	0x5fffffc0
 8001e88:	24000004 	.word	0x24000004
 8001e8c:	053e2d63 	.word	0x053e2d63
 8001e90:	6fffffc0 	.word	0x6fffffc0
 8001e94:	40022000 	.word	0x40022000
 8001e98:	58026000 	.word	0x58026000
 8001e9c:	fff0c003 	.word	0xfff0c003
 8001ea0:	ffffbffc 	.word	0xffffbffc
 8001ea4:	40022100 	.word	0x40022100
 8001ea8:	40022300 	.word	0x40022300
 8001eac:	58026300 	.word	0x58026300
 8001eb0:	fc00f81e 	.word	0xfc00f81e

08001eb4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001eb4:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eb6:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
{
 8001eba:	b09a      	sub	sp, #104	@ 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ebc:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8001ebe:	2a01      	cmp	r2, #1
 8001ec0:	d038      	beq.n	8001f34 <HAL_ADCEx_MultiModeConfigChannel+0x80>
 8001ec2:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001ec4:	4d28      	ldr	r5, [pc, #160]	@ (8001f68 <HAL_ADCEx_MultiModeConfigChannel+0xb4>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8001ec6:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8001ec8:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001eca:	681c      	ldr	r4, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8001ecc:	9216      	str	r2, [sp, #88]	@ 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001ece:	42ac      	cmp	r4, r5
  __HAL_LOCK(hadc);
 8001ed0:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8001ed4:	9217      	str	r2, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001ed6:	d008      	beq.n	8001eea <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed8:	6d59      	ldr	r1, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001eda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ede:	f041 0120 	orr.w	r1, r1, #32
 8001ee2:	6559      	str	r1, [r3, #84]	@ 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8001ee4:	b01a      	add	sp, #104	@ 0x68
 8001ee6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ee8:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eea:	4a20      	ldr	r2, [pc, #128]	@ (8001f6c <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8001eec:	6890      	ldr	r0, [r2, #8]
 8001eee:	0740      	lsls	r0, r0, #29
 8001ef0:	d50b      	bpl.n	8001f0a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001ef2:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ef4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8001ef6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ef8:	f042 0220 	orr.w	r2, r2, #32
 8001efc:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8001f04:	b01a      	add	sp, #104	@ 0x68
 8001f06:	bcf0      	pop	{r4, r5, r6, r7}
 8001f08:	4770      	bx	lr
 8001f0a:	68a0      	ldr	r0, [r4, #8]
 8001f0c:	0745      	lsls	r5, r0, #29
 8001f0e:	d4f1      	bmi.n	8001ef4 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f10:	b9a6      	cbnz	r6, 8001f3c <HAL_ADCEx_MultiModeConfigChannel+0x88>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001f12:	4917      	ldr	r1, [pc, #92]	@ (8001f70 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8001f14:	6888      	ldr	r0, [r1, #8]
 8001f16:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 8001f1a:	6088      	str	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f1c:	68a0      	ldr	r0, [r4, #8]
 8001f1e:	6892      	ldr	r2, [r2, #8]
 8001f20:	07d4      	lsls	r4, r2, #31
 8001f22:	d405      	bmi.n	8001f30 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f24:	07c5      	lsls	r5, r0, #31
 8001f26:	d403      	bmi.n	8001f30 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001f28:	6888      	ldr	r0, [r1, #8]
 8001f2a:	4a12      	ldr	r2, [pc, #72]	@ (8001f74 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8001f2c:	4002      	ands	r2, r0
 8001f2e:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f30:	2000      	movs	r0, #0
 8001f32:	e7e4      	b.n	8001efe <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8001f34:	2002      	movs	r0, #2
}
 8001f36:	b01a      	add	sp, #104	@ 0x68
 8001f38:	bcf0      	pop	{r4, r5, r6, r7}
 8001f3a:	4770      	bx	lr
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001f3c:	4f0c      	ldr	r7, [pc, #48]	@ (8001f70 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8001f3e:	684d      	ldr	r5, [r1, #4]
 8001f40:	68b8      	ldr	r0, [r7, #8]
 8001f42:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 8001f46:	4328      	orrs	r0, r5
 8001f48:	60b8      	str	r0, [r7, #8]
 8001f4a:	68a0      	ldr	r0, [r4, #8]
 8001f4c:	6892      	ldr	r2, [r2, #8]
 8001f4e:	07d4      	lsls	r4, r2, #31
 8001f50:	d4ee      	bmi.n	8001f30 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f52:	07c2      	lsls	r2, r0, #31
 8001f54:	d4ec      	bmi.n	8001f30 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
        MODIFY_REG(tmpADC_Common->CCR,
 8001f56:	688a      	ldr	r2, [r1, #8]
 8001f58:	68b8      	ldr	r0, [r7, #8]
 8001f5a:	4906      	ldr	r1, [pc, #24]	@ (8001f74 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8001f5c:	4332      	orrs	r2, r6
 8001f5e:	4001      	ands	r1, r0
 8001f60:	430a      	orrs	r2, r1
 8001f62:	60ba      	str	r2, [r7, #8]
 8001f64:	e7e4      	b.n	8001f30 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8001f66:	bf00      	nop
 8001f68:	40022000 	.word	0x40022000
 8001f6c:	40022100 	.word	0x40022100
 8001f70:	40022300 	.word	0x40022300
 8001f74:	fffff0e0 	.word	0xfffff0e0

08001f78 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001f78:	b530      	push	{r4, r5, lr}
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8001f7a:	2300      	movs	r3, #0
{
 8001f7c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8001f7e:	9301      	str	r3, [sp, #4]

  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8001f80:	2800      	cmp	r0, #0
 8001f82:	d063      	beq.n	800204c <HAL_COMP_Init+0xd4>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8001f84:	6802      	ldr	r2, [r0, #0]
 8001f86:	4604      	mov	r4, r0
 8001f88:	6813      	ldr	r3, [r2, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	db5e      	blt.n	800204c <HAL_COMP_Init+0xd4>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8001f8e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8001f92:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 808e 	beq.w	80020b8 <HAL_COMP_Init+0x140>
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
              hcomp->Init.NonInvertingInput  |  \
 8001f9c:	69e1      	ldr	r1, [r4, #28]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8001f9e:	6810      	ldr	r0, [r2, #0]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8001fa0:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8001fa4:	f000 0004 	and.w	r0, r0, #4
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8001fa8:	432b      	orrs	r3, r5
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 8001faa:	6815      	ldr	r5, [r2, #0]
              hcomp->Init.NonInvertingInput  |  \
 8001fac:	430b      	orrs	r3, r1
              hcomp->Init.BlankingSrce       |  \
 8001fae:	6961      	ldr	r1, [r4, #20]
 8001fb0:	430b      	orrs	r3, r1
              hcomp->Init.Hysteresis         |  \
 8001fb2:	69a1      	ldr	r1, [r4, #24]
 8001fb4:	430b      	orrs	r3, r1
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8001fb6:	68a1      	ldr	r1, [r4, #8]
 8001fb8:	430b      	orrs	r3, r1
    MODIFY_REG(hcomp->Instance->CFGR,
 8001fba:	4943      	ldr	r1, [pc, #268]	@ (80020c8 <HAL_COMP_Init+0x150>)
 8001fbc:	4029      	ands	r1, r5
 8001fbe:	430b      	orrs	r3, r1
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8001fc0:	6861      	ldr	r1, [r4, #4]
    MODIFY_REG(hcomp->Instance->CFGR,
 8001fc2:	6013      	str	r3, [r2, #0]
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8001fc4:	2910      	cmp	r1, #16
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8001fc6:	6813      	ldr	r3, [r2, #0]
 8001fc8:	bf0c      	ite	eq
 8001fca:	f043 0310 	orreq.w	r3, r3, #16
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8001fce:	f023 0310 	bicne.w	r3, r3, #16
 8001fd2:	6013      	str	r3, [r2, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8001fd4:	6813      	ldr	r3, [r2, #0]
 8001fd6:	075d      	lsls	r5, r3, #29
 8001fd8:	d501      	bpl.n	8001fde <HAL_COMP_Init+0x66>
 8001fda:	2800      	cmp	r0, #0
 8001fdc:	d156      	bne.n	800208c <HAL_COMP_Init+0x114>
       wait_loop_index --;
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001fde:	493b      	ldr	r1, [pc, #236]	@ (80020cc <HAL_COMP_Init+0x154>)
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8001fe0:	6a23      	ldr	r3, [r4, #32]
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001fe2:	428a      	cmp	r2, r1
 8001fe4:	bf15      	itete	ne
 8001fe6:	f46f 1200 	mvnne.w	r2, #2097152	@ 0x200000
 8001fea:	f46f 1280 	mvneq.w	r2, #1048576	@ 0x100000
 8001fee:	f44f 1100 	movne.w	r1, #2097152	@ 0x200000
 8001ff2:	f44f 1180 	moveq.w	r1, #1048576	@ 0x100000
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8001ff6:	0798      	lsls	r0, r3, #30
 8001ff8:	d02b      	beq.n	8002052 <HAL_COMP_Init+0xda>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 8001ffa:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8001ffe:	f013 0f10 	tst.w	r3, #16
        SET_BIT(EXTI->RTSR1, exti_line);
 8002002:	6828      	ldr	r0, [r5, #0]
 8002004:	bf14      	ite	ne
 8002006:	4308      	orrne	r0, r1
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8002008:	4010      	andeq	r0, r2
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800200a:	f013 0f20 	tst.w	r3, #32
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 800200e:	6028      	str	r0, [r5, #0]
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8002010:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8002014:	6868      	ldr	r0, [r5, #4]
 8002016:	bf14      	ite	ne
 8002018:	4308      	orrne	r0, r1
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 800201a:	4010      	andeq	r0, r2
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800201c:	f013 0f02 	tst.w	r3, #2
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8002020:	6068      	str	r0, [r5, #4]
      WRITE_REG(EXTI->PR1, exti_line);
 8002022:	f04f 40b0 	mov.w	r0, #1476395008	@ 0x58000000
 8002026:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
      {
        SET_BIT(EXTI->EMR1, exti_line);
 800202a:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
 800202e:	bf14      	ite	ne
 8002030:	430d      	orrne	r5, r1
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8002032:	4015      	andeq	r5, r2
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002034:	07db      	lsls	r3, r3, #31
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8002036:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800203a:	d51f      	bpl.n	800207c <HAL_COMP_Init+0x104>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 800203c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002040:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8002044:	430b      	orrs	r3, r1
 8002046:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800204a:	e00e      	b.n	800206a <HAL_COMP_Init+0xf2>
    status = HAL_ERROR;
 800204c:	2001      	movs	r0, #1
    }
   
  }
  
  return status;
}
 800204e:	b003      	add	sp, #12
 8002050:	bd30      	pop	{r4, r5, pc}
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8002052:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002056:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 800205a:	4011      	ands	r1, r2
 800205c:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8002060:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8002064:	400a      	ands	r2, r1
 8002066:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800206a:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800206e:	b913      	cbnz	r3, 8002076 <HAL_COMP_Init+0xfe>
      hcomp->State = HAL_COMP_STATE_READY;
 8002070:	2301      	movs	r3, #1
 8002072:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  HAL_StatusTypeDef status = HAL_OK;
 8002076:	2000      	movs	r0, #0
}
 8002078:	b003      	add	sp, #12
 800207a:	bd30      	pop	{r4, r5, pc}
        CLEAR_BIT(EXTI->IMR1, exti_line);
 800207c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002080:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8002084:	4013      	ands	r3, r2
 8002086:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 800208a:	e7ee      	b.n	800206a <HAL_COMP_Init+0xf2>
     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800208c:	4b10      	ldr	r3, [pc, #64]	@ (80020d0 <HAL_COMP_Init+0x158>)
 800208e:	4911      	ldr	r1, [pc, #68]	@ (80020d4 <HAL_COMP_Init+0x15c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	099b      	lsrs	r3, r3, #6
 8002094:	fba1 1303 	umull	r1, r3, r1, r3
 8002098:	099b      	lsrs	r3, r3, #6
 800209a:	3301      	adds	r3, #1
 800209c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	9301      	str	r3, [sp, #4]
     while(wait_loop_index != 0UL)
 80020a4:	9b01      	ldr	r3, [sp, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d099      	beq.n	8001fde <HAL_COMP_Init+0x66>
       wait_loop_index --;
 80020aa:	9b01      	ldr	r3, [sp, #4]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	9301      	str	r3, [sp, #4]
     while(wait_loop_index != 0UL)
 80020b0:	9b01      	ldr	r3, [sp, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f9      	bne.n	80020aa <HAL_COMP_Init+0x132>
 80020b6:	e792      	b.n	8001fde <HAL_COMP_Init+0x66>
      hcomp->Lock = HAL_UNLOCKED;
 80020b8:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
      COMP_CLEAR_ERRORCODE(hcomp);
 80020bc:	6281      	str	r1, [r0, #40]	@ 0x28
      HAL_COMP_MspInit(hcomp);
 80020be:	f7fe fffb 	bl	80010b8 <HAL_COMP_MspInit>
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 80020c2:	6822      	ldr	r2, [r4, #0]
 80020c4:	e76a      	b.n	8001f9c <HAL_COMP_Init+0x24>
 80020c6:	bf00      	nop
 80020c8:	f0e8cce1 	.word	0xf0e8cce1
 80020cc:	5800380c 	.word	0x5800380c
 80020d0:	24000004 	.word	0x24000004
 80020d4:	053e2d63 	.word	0x053e2d63

080020d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d8:	4906      	ldr	r1, [pc, #24]	@ (80020f4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020da:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020de:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80020e0:	4b05      	ldr	r3, [pc, #20]	@ (80020f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e2:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e4:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e8:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ec:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80020ee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80020f0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80020f2:	4770      	bx	lr
 80020f4:	e000ed00 	.word	0xe000ed00
 80020f8:	05fa0000 	.word	0x05fa0000

080020fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002168 <HAL_NVIC_SetPriority+0x6c>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002104:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002106:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800210e:	f1be 0f04 	cmp.w	lr, #4
 8002112:	bf28      	it	cs
 8002114:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002118:	f1bc 0f06 	cmp.w	ip, #6
 800211c:	d91a      	bls.n	8002154 <HAL_NVIC_SetPriority+0x58>
 800211e:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002122:	f04f 33ff 	mov.w	r3, #4294967295
 8002126:	fa03 f30c 	lsl.w	r3, r3, ip
 800212a:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8002132:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	fa03 f30e 	lsl.w	r3, r3, lr
 8002138:	ea21 0303 	bic.w	r3, r1, r3
 800213c:	fa03 f30c 	lsl.w	r3, r3, ip
 8002140:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002148:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800214a:	db06      	blt.n	800215a <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214c:	4a07      	ldr	r2, [pc, #28]	@ (800216c <HAL_NVIC_SetPriority+0x70>)
 800214e:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002150:	f85d fb04 	ldr.w	pc, [sp], #4
 8002154:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002156:	4694      	mov	ip, r2
 8002158:	e7e9      	b.n	800212e <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	f000 000f 	and.w	r0, r0, #15
 800215e:	4a04      	ldr	r2, [pc, #16]	@ (8002170 <HAL_NVIC_SetPriority+0x74>)
 8002160:	5413      	strb	r3, [r2, r0]
 8002162:	f85d fb04 	ldr.w	pc, [sp], #4
 8002166:	bf00      	nop
 8002168:	e000ed00 	.word	0xe000ed00
 800216c:	e000e400 	.word	0xe000e400
 8002170:	e000ed14 	.word	0xe000ed14

08002174 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002174:	2800      	cmp	r0, #0
 8002176:	db07      	blt.n	8002188 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002178:	2301      	movs	r3, #1
 800217a:	f000 011f 	and.w	r1, r0, #31
 800217e:	4a03      	ldr	r2, [pc, #12]	@ (800218c <HAL_NVIC_EnableIRQ+0x18>)
 8002180:	0940      	lsrs	r0, r0, #5
 8002182:	408b      	lsls	r3, r1
 8002184:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000e100 	.word	0xe000e100

08002190 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002190:	1e43      	subs	r3, r0, #1
 8002192:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002196:	d301      	bcc.n	800219c <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002198:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800219a:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219c:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a0:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a2:	4905      	ldr	r1, [pc, #20]	@ (80021b8 <HAL_SYSTICK_Config+0x28>)
 80021a4:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a8:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021aa:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ac:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b0:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b2:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80021bc:	b188      	cbz	r0, 80021e2 <HAL_DAC_Init+0x26>
{
 80021be:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80021c0:	7903      	ldrb	r3, [r0, #4]
 80021c2:	4604      	mov	r4, r0
 80021c4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80021c8:	b13b      	cbz	r3, 80021da <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80021ca:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80021cc:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80021ce:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80021d0:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80021d2:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80021d4:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80021d6:	7122      	strb	r2, [r4, #4]
}
 80021d8:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80021da:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80021dc:	f7fe ffec 	bl	80011b8 <HAL_DAC_MspInit>
 80021e0:	e7f3      	b.n	80021ca <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80021e2:	2001      	movs	r0, #1
}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop

080021e8 <HAL_DAC_ConfigChannel>:
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80021e8:	2800      	cmp	r0, #0
 80021ea:	f000 8086 	beq.w	80022fa <HAL_DAC_ConfigChannel+0x112>
{
 80021ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021f2:	460d      	mov	r5, r1
  if ((hdac == NULL) || (sConfig == NULL))
 80021f4:	2900      	cmp	r1, #0
 80021f6:	d04d      	beq.n	8002294 <HAL_DAC_ConfigChannel+0xac>
    }
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80021f8:	7943      	ldrb	r3, [r0, #5]
 80021fa:	4604      	mov	r4, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80021fc:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d079      	beq.n	80022f6 <HAL_DAC_ConfigChannel+0x10e>
 8002202:	2301      	movs	r3, #1

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002204:	2904      	cmp	r1, #4
 8002206:	4616      	mov	r6, r2
  __HAL_LOCK(hdac);
 8002208:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 800220a:	f04f 0302 	mov.w	r3, #2
 800220e:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002210:	d043      	beq.n	800229a <HAL_DAC_ConfigChannel+0xb2>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002212:	f002 0210 	and.w	r2, r2, #16

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002216:	6803      	ldr	r3, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002218:	6928      	ldr	r0, [r5, #16]
 800221a:	2801      	cmp	r0, #1
 800221c:	d108      	bne.n	8002230 <HAL_DAC_ConfigChannel+0x48>
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800221e:	201f      	movs	r0, #31
    tmpreg1 = hdac->Instance->CCR;
 8002220:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002222:	4090      	lsls	r0, r2
 8002224:	ea26 0600 	bic.w	r6, r6, r0
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002228:	6968      	ldr	r0, [r5, #20]
 800222a:	4090      	lsls	r0, r2
 800222c:	4330      	orrs	r0, r6
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800222e:	6398      	str	r0, [r3, #56]	@ 0x38
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002230:	2007      	movs	r0, #7
  tmpreg1 = hdac->Instance->MCR;
 8002232:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002234:	4090      	lsls	r0, r2
 8002236:	ea26 0600 	bic.w	r6, r6, r0
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800223a:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800223e:	2801      	cmp	r0, #1
 8002240:	d055      	beq.n	80022ee <HAL_DAC_ConfigChannel+0x106>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002242:	2802      	cmp	r0, #2
 8002244:	d055      	beq.n	80022f2 <HAL_DAC_ConfigChannel+0x10a>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002246:	fab7 f087 	clz	r0, r7
 800224a:	0940      	lsrs	r0, r0, #5
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800224c:	4339      	orrs	r1, r7
 800224e:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002250:	6868      	ldr	r0, [r5, #4]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002252:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002256:	4091      	lsls	r1, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002258:	4090      	lsls	r0, r2
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800225a:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800225c:	4331      	orrs	r1, r6
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800225e:	2601      	movs	r6, #1
  hdac->Instance->MCR = tmpreg1;
 8002260:	63d9      	str	r1, [r3, #60]	@ 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002262:	6819      	ldr	r1, [r3, #0]
 8002264:	ea21 0105 	bic.w	r1, r1, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002268:	f640 75fe 	movw	r5, #4094	@ 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800226c:	6019      	str	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800226e:	4095      	lsls	r5, r2
  tmpreg1 = hdac->Instance->CR;
 8002270:	6819      	ldr	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002272:	ea21 0105 	bic.w	r1, r1, r5

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002276:	2500      	movs	r5, #0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002278:	4301      	orrs	r1, r0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800227a:	20c0      	movs	r0, #192	@ 0xc0
  hdac->Instance->CR = tmpreg1;
 800227c:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800227e:	fa00 f102 	lsl.w	r1, r0, r2
 8002282:	681a      	ldr	r2, [r3, #0]

  /* Return function status */
  return status;
 8002284:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002286:	ea22 0201 	bic.w	r2, r2, r1
 800228a:	601a      	str	r2, [r3, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800228c:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 800228e:	7165      	strb	r5, [r4, #5]
}
 8002290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002294:	2001      	movs	r0, #1
}
 8002296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 800229a:	f7ff f96b 	bl	8001574 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800229e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80022a0:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 80022a2:	b9be      	cbnz	r6, 80022d4 <HAL_DAC_ConfigChannel+0xec>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022a4:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8002338 <HAL_DAC_ConfigChannel+0x150>
 80022a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022aa:	ea12 0f08 	tst.w	r2, r8
 80022ae:	d026      	beq.n	80022fe <HAL_DAC_ConfigChannel+0x116>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022b0:	f7ff f960 	bl	8001574 <HAL_GetTick>
 80022b4:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022b6:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022b8:	2801      	cmp	r0, #1
 80022ba:	d9f5      	bls.n	80022a8 <HAL_DAC_ConfigChannel+0xc0>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022be:	ea12 0f08 	tst.w	r2, r8
 80022c2:	d0f1      	beq.n	80022a8 <HAL_DAC_ConfigChannel+0xc0>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80022c4:	6923      	ldr	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80022c6:	2203      	movs	r2, #3
            return HAL_TIMEOUT;
 80022c8:	2003      	movs	r0, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80022ca:	f043 0308 	orr.w	r3, r3, #8
 80022ce:	6123      	str	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80022d0:	7122      	strb	r2, [r4, #4]
            return HAL_TIMEOUT;
 80022d2:	e7dd      	b.n	8002290 <HAL_DAC_ConfigChannel+0xa8>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80022d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022d6:	2a00      	cmp	r2, #0
 80022d8:	da2a      	bge.n	8002330 <HAL_DAC_ConfigChannel+0x148>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022da:	f7ff f94b 	bl	8001574 <HAL_GetTick>
 80022de:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80022e0:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022e2:	2801      	cmp	r0, #1
 80022e4:	d9f6      	bls.n	80022d4 <HAL_DAC_ConfigChannel+0xec>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80022e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022e8:	2a00      	cmp	r2, #0
 80022ea:	daf3      	bge.n	80022d4 <HAL_DAC_ConfigChannel+0xec>
 80022ec:	e7ea      	b.n	80022c4 <HAL_DAC_ConfigChannel+0xdc>
    connectOnChip = 0x00000000UL;
 80022ee:	2000      	movs	r0, #0
 80022f0:	e7ac      	b.n	800224c <HAL_DAC_ConfigChannel+0x64>
    connectOnChip = DAC_MCR_MODE1_0;
 80022f2:	2001      	movs	r0, #1
 80022f4:	e7aa      	b.n	800224c <HAL_DAC_ConfigChannel+0x64>
  __HAL_LOCK(hdac);
 80022f6:	2002      	movs	r0, #2
 80022f8:	e7ca      	b.n	8002290 <HAL_DAC_ConfigChannel+0xa8>
    return HAL_ERROR;
 80022fa:	2001      	movs	r0, #1
}
 80022fc:	4770      	bx	lr
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80022fe:	69aa      	ldr	r2, [r5, #24]
 8002300:	641a      	str	r2, [r3, #64]	@ 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002302:	f006 0210 	and.w	r2, r6, #16
 8002306:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 800230a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800230c:	4090      	lsls	r0, r2
 800230e:	ea21 0100 	bic.w	r1, r1, r0
 8002312:	69e8      	ldr	r0, [r5, #28]
 8002314:	4090      	lsls	r0, r2
 8002316:	4301      	orrs	r1, r0
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002318:	20ff      	movs	r0, #255	@ 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800231a:	6499      	str	r1, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800231c:	4090      	lsls	r0, r2
 800231e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002320:	ea21 0100 	bic.w	r1, r1, r0
 8002324:	6a28      	ldr	r0, [r5, #32]
 8002326:	4090      	lsls	r0, r2
 8002328:	4301      	orrs	r1, r0
 800232a:	64d9      	str	r1, [r3, #76]	@ 0x4c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800232c:	6829      	ldr	r1, [r5, #0]
 800232e:	e773      	b.n	8002218 <HAL_DAC_ConfigChannel+0x30>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002330:	69aa      	ldr	r2, [r5, #24]
 8002332:	645a      	str	r2, [r3, #68]	@ 0x44
 8002334:	e7e5      	b.n	8002302 <HAL_DAC_ConfigChannel+0x11a>
 8002336:	bf00      	nop
 8002338:	20008000 	.word	0x20008000

0800233c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800233c:	4936      	ldr	r1, [pc, #216]	@ (8002418 <DMA_CalcBaseAndBitshift+0xdc>)
{
 800233e:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002340:	6803      	ldr	r3, [r0, #0]
 8002342:	428b      	cmp	r3, r1
 8002344:	d033      	beq.n	80023ae <DMA_CalcBaseAndBitshift+0x72>
 8002346:	3118      	adds	r1, #24
 8002348:	1a59      	subs	r1, r3, r1
 800234a:	fab1 f181 	clz	r1, r1
 800234e:	0949      	lsrs	r1, r1, #5
 8002350:	bb69      	cbnz	r1, 80023ae <DMA_CalcBaseAndBitshift+0x72>
 8002352:	4832      	ldr	r0, [pc, #200]	@ (800241c <DMA_CalcBaseAndBitshift+0xe0>)
 8002354:	4283      	cmp	r3, r0
 8002356:	d03e      	beq.n	80023d6 <DMA_CalcBaseAndBitshift+0x9a>
 8002358:	3018      	adds	r0, #24
 800235a:	4283      	cmp	r3, r0
 800235c:	d03e      	beq.n	80023dc <DMA_CalcBaseAndBitshift+0xa0>
 800235e:	3018      	adds	r0, #24
 8002360:	4283      	cmp	r3, r0
 8002362:	d034      	beq.n	80023ce <DMA_CalcBaseAndBitshift+0x92>
 8002364:	3018      	adds	r0, #24
 8002366:	4283      	cmp	r3, r0
 8002368:	d03b      	beq.n	80023e2 <DMA_CalcBaseAndBitshift+0xa6>
 800236a:	3018      	adds	r0, #24
 800236c:	4283      	cmp	r3, r0
 800236e:	d03e      	beq.n	80023ee <DMA_CalcBaseAndBitshift+0xb2>
 8002370:	3018      	adds	r0, #24
 8002372:	4283      	cmp	r3, r0
 8002374:	d02a      	beq.n	80023cc <DMA_CalcBaseAndBitshift+0x90>
 8002376:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 800237a:	4283      	cmp	r3, r0
 800237c:	d035      	beq.n	80023ea <DMA_CalcBaseAndBitshift+0xae>
 800237e:	4928      	ldr	r1, [pc, #160]	@ (8002420 <DMA_CalcBaseAndBitshift+0xe4>)
 8002380:	428b      	cmp	r3, r1
 8002382:	d031      	beq.n	80023e8 <DMA_CalcBaseAndBitshift+0xac>
 8002384:	3118      	adds	r1, #24
 8002386:	428b      	cmp	r3, r1
 8002388:	d034      	beq.n	80023f4 <DMA_CalcBaseAndBitshift+0xb8>
 800238a:	3118      	adds	r1, #24
 800238c:	428b      	cmp	r3, r1
 800238e:	d034      	beq.n	80023fa <DMA_CalcBaseAndBitshift+0xbe>
 8002390:	3118      	adds	r1, #24
 8002392:	428b      	cmp	r3, r1
 8002394:	d034      	beq.n	8002400 <DMA_CalcBaseAndBitshift+0xc4>
 8002396:	3118      	adds	r1, #24
 8002398:	428b      	cmp	r3, r1
 800239a:	d034      	beq.n	8002406 <DMA_CalcBaseAndBitshift+0xca>
 800239c:	3118      	adds	r1, #24
 800239e:	428b      	cmp	r3, r1
 80023a0:	d034      	beq.n	800240c <DMA_CalcBaseAndBitshift+0xd0>
 80023a2:	3118      	adds	r1, #24
 80023a4:	428b      	cmp	r3, r1
 80023a6:	d034      	beq.n	8002412 <DMA_CalcBaseAndBitshift+0xd6>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80023a8:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
 80023ac:	e011      	b.n	80023d2 <DMA_CalcBaseAndBitshift+0x96>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	491c      	ldr	r1, [pc, #112]	@ (8002424 <DMA_CalcBaseAndBitshift+0xe8>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80023b2:	481d      	ldr	r0, [pc, #116]	@ (8002428 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80023b4:	3b10      	subs	r3, #16
 80023b6:	fba1 1303 	umull	r1, r3, r1, r3
{
 80023ba:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80023bc:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80023be:	4c1b      	ldr	r4, [pc, #108]	@ (800242c <DMA_CalcBaseAndBitshift+0xf0>)
 80023c0:	5ce1      	ldrb	r1, [r4, r3]
  }

  return hdma->StreamBaseAddress;
}
 80023c2:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80023c6:	e9c2 0116 	strd	r0, r1, [r2, #88]	@ 0x58
}
 80023ca:	4770      	bx	lr
 80023cc:	2116      	movs	r1, #22
 80023ce:	4818      	ldr	r0, [pc, #96]	@ (8002430 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80023d0:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80023d2:	6590      	str	r0, [r2, #88]	@ 0x58
}
 80023d4:	4770      	bx	lr
 80023d6:	2110      	movs	r1, #16
 80023d8:	4813      	ldr	r0, [pc, #76]	@ (8002428 <DMA_CalcBaseAndBitshift+0xec>)
 80023da:	e7f9      	b.n	80023d0 <DMA_CalcBaseAndBitshift+0x94>
 80023dc:	2116      	movs	r1, #22
 80023de:	4812      	ldr	r0, [pc, #72]	@ (8002428 <DMA_CalcBaseAndBitshift+0xec>)
 80023e0:	e7f6      	b.n	80023d0 <DMA_CalcBaseAndBitshift+0x94>
 80023e2:	2106      	movs	r1, #6
 80023e4:	4812      	ldr	r0, [pc, #72]	@ (8002430 <DMA_CalcBaseAndBitshift+0xf4>)
 80023e6:	e7f3      	b.n	80023d0 <DMA_CalcBaseAndBitshift+0x94>
 80023e8:	2106      	movs	r1, #6
 80023ea:	4812      	ldr	r0, [pc, #72]	@ (8002434 <DMA_CalcBaseAndBitshift+0xf8>)
 80023ec:	e7f0      	b.n	80023d0 <DMA_CalcBaseAndBitshift+0x94>
 80023ee:	2110      	movs	r1, #16
 80023f0:	480f      	ldr	r0, [pc, #60]	@ (8002430 <DMA_CalcBaseAndBitshift+0xf4>)
 80023f2:	e7ed      	b.n	80023d0 <DMA_CalcBaseAndBitshift+0x94>
 80023f4:	2110      	movs	r1, #16
 80023f6:	480f      	ldr	r0, [pc, #60]	@ (8002434 <DMA_CalcBaseAndBitshift+0xf8>)
 80023f8:	e7ea      	b.n	80023d0 <DMA_CalcBaseAndBitshift+0x94>
 80023fa:	2116      	movs	r1, #22
 80023fc:	480d      	ldr	r0, [pc, #52]	@ (8002434 <DMA_CalcBaseAndBitshift+0xf8>)
 80023fe:	e7e7      	b.n	80023d0 <DMA_CalcBaseAndBitshift+0x94>
 8002400:	2100      	movs	r1, #0
 8002402:	480d      	ldr	r0, [pc, #52]	@ (8002438 <DMA_CalcBaseAndBitshift+0xfc>)
 8002404:	e7e4      	b.n	80023d0 <DMA_CalcBaseAndBitshift+0x94>
 8002406:	2106      	movs	r1, #6
 8002408:	480b      	ldr	r0, [pc, #44]	@ (8002438 <DMA_CalcBaseAndBitshift+0xfc>)
 800240a:	e7e1      	b.n	80023d0 <DMA_CalcBaseAndBitshift+0x94>
 800240c:	2110      	movs	r1, #16
 800240e:	480a      	ldr	r0, [pc, #40]	@ (8002438 <DMA_CalcBaseAndBitshift+0xfc>)
 8002410:	e7de      	b.n	80023d0 <DMA_CalcBaseAndBitshift+0x94>
 8002412:	2116      	movs	r1, #22
 8002414:	4808      	ldr	r0, [pc, #32]	@ (8002438 <DMA_CalcBaseAndBitshift+0xfc>)
 8002416:	e7db      	b.n	80023d0 <DMA_CalcBaseAndBitshift+0x94>
 8002418:	40020010 	.word	0x40020010
 800241c:	40020040 	.word	0x40020040
 8002420:	40020428 	.word	0x40020428
 8002424:	aaaaaaab 	.word	0xaaaaaaab
 8002428:	40020000 	.word	0x40020000
 800242c:	08005cac 	.word	0x08005cac
 8002430:	40020004 	.word	0x40020004
 8002434:	40020400 	.word	0x40020400
 8002438:	40020404 	.word	0x40020404

0800243c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800243c:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800243e:	4b27      	ldr	r3, [pc, #156]	@ (80024dc <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8002440:	4927      	ldr	r1, [pc, #156]	@ (80024e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 8002442:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002444:	4d27      	ldr	r5, [pc, #156]	@ (80024e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8002446:	4c28      	ldr	r4, [pc, #160]	@ (80024e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8002448:	42aa      	cmp	r2, r5
 800244a:	bf18      	it	ne
 800244c:	429a      	cmpne	r2, r3
 800244e:	bf0c      	ite	eq
 8002450:	2301      	moveq	r3, #1
 8002452:	2300      	movne	r3, #0
 8002454:	428a      	cmp	r2, r1
 8002456:	bf08      	it	eq
 8002458:	f043 0301 	orreq.w	r3, r3, #1
 800245c:	3128      	adds	r1, #40	@ 0x28
 800245e:	42a2      	cmp	r2, r4
 8002460:	bf08      	it	eq
 8002462:	f043 0301 	orreq.w	r3, r3, #1
 8002466:	3428      	adds	r4, #40	@ 0x28
 8002468:	428a      	cmp	r2, r1
 800246a:	bf08      	it	eq
 800246c:	f043 0301 	orreq.w	r3, r3, #1
 8002470:	3128      	adds	r1, #40	@ 0x28
 8002472:	42a2      	cmp	r2, r4
 8002474:	bf08      	it	eq
 8002476:	f043 0301 	orreq.w	r3, r3, #1
 800247a:	428a      	cmp	r2, r1
 800247c:	bf08      	it	eq
 800247e:	f043 0301 	orreq.w	r3, r3, #1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002482:	b2d1      	uxtb	r1, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002484:	b913      	cbnz	r3, 800248c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 8002486:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8002488:	429a      	cmp	r2, r3
 800248a:	d112      	bne.n	80024b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800248c:	f1a1 0308 	sub.w	r3, r1, #8
 8002490:	4917      	ldr	r1, [pc, #92]	@ (80024f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002492:	4a18      	ldr	r2, [pc, #96]	@ (80024f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002494:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002498:	2101      	movs	r1, #1
 800249a:	4c17      	ldr	r4, [pc, #92]	@ (80024f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800249c:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80024a0:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80024a4:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80024a6:	4099      	lsls	r1, r3
 80024a8:	6681      	str	r1, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80024aa:	e9c0 2418 	strd	r2, r4, [r0, #96]	@ 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80024ae:	bc30      	pop	{r4, r5}
 80024b0:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80024b2:	f1a1 0310 	sub.w	r3, r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80024b6:	4911      	ldr	r1, [pc, #68]	@ (80024fc <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80024b8:	4c11      	ldr	r4, [pc, #68]	@ (8002500 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80024ba:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80024bc:	fba4 4303 	umull	r4, r3, r4, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80024c0:	29a8      	cmp	r1, #168	@ 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80024c2:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80024c6:	d800      	bhi.n	80024ca <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 80024c8:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80024ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002504 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80024cc:	f003 041f 	and.w	r4, r3, #31
 80024d0:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80024d2:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80024d4:	40a1      	lsls	r1, r4
 80024d6:	4c0c      	ldr	r4, [pc, #48]	@ (8002508 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80024d8:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80024da:	e7e5      	b.n	80024a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 80024dc:	58025408 	.word	0x58025408
 80024e0:	58025430 	.word	0x58025430
 80024e4:	5802541c 	.word	0x5802541c
 80024e8:	58025444 	.word	0x58025444
 80024ec:	58025494 	.word	0x58025494
 80024f0:	cccccccd 	.word	0xcccccccd
 80024f4:	16009600 	.word	0x16009600
 80024f8:	58025880 	.word	0x58025880
 80024fc:	bffdfbf0 	.word	0xbffdfbf0
 8002500:	aaaaaaab 	.word	0xaaaaaaab
 8002504:	10008200 	.word	0x10008200
 8002508:	40020880 	.word	0x40020880

0800250c <HAL_DMA_Init>:
{
 800250c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002510:	4605      	mov	r5, r0
 8002512:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 8002514:	f7ff f82e 	bl	8001574 <HAL_GetTick>
  if(hdma == NULL)
 8002518:	2d00      	cmp	r5, #0
 800251a:	f000 8203 	beq.w	8002924 <HAL_DMA_Init+0x418>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800251e:	682c      	ldr	r4, [r5, #0]
 8002520:	4606      	mov	r6, r0
 8002522:	4b65      	ldr	r3, [pc, #404]	@ (80026b8 <HAL_DMA_Init+0x1ac>)
 8002524:	429c      	cmp	r4, r3
 8002526:	f000 80bc 	beq.w	80026a2 <HAL_DMA_Init+0x196>
 800252a:	3318      	adds	r3, #24
 800252c:	429c      	cmp	r4, r3
 800252e:	f000 80b8 	beq.w	80026a2 <HAL_DMA_Init+0x196>
 8002532:	3318      	adds	r3, #24
 8002534:	429c      	cmp	r4, r3
 8002536:	f000 80b4 	beq.w	80026a2 <HAL_DMA_Init+0x196>
 800253a:	3318      	adds	r3, #24
 800253c:	429c      	cmp	r4, r3
 800253e:	f000 80b0 	beq.w	80026a2 <HAL_DMA_Init+0x196>
 8002542:	3318      	adds	r3, #24
 8002544:	429c      	cmp	r4, r3
 8002546:	f000 80ac 	beq.w	80026a2 <HAL_DMA_Init+0x196>
 800254a:	3318      	adds	r3, #24
 800254c:	429c      	cmp	r4, r3
 800254e:	f000 80a8 	beq.w	80026a2 <HAL_DMA_Init+0x196>
 8002552:	3318      	adds	r3, #24
 8002554:	429c      	cmp	r4, r3
 8002556:	f000 80a4 	beq.w	80026a2 <HAL_DMA_Init+0x196>
 800255a:	3318      	adds	r3, #24
 800255c:	429c      	cmp	r4, r3
 800255e:	f000 80a0 	beq.w	80026a2 <HAL_DMA_Init+0x196>
 8002562:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002566:	429c      	cmp	r4, r3
 8002568:	f000 809b 	beq.w	80026a2 <HAL_DMA_Init+0x196>
 800256c:	3318      	adds	r3, #24
 800256e:	429c      	cmp	r4, r3
 8002570:	f000 8097 	beq.w	80026a2 <HAL_DMA_Init+0x196>
 8002574:	3318      	adds	r3, #24
 8002576:	429c      	cmp	r4, r3
 8002578:	f000 8093 	beq.w	80026a2 <HAL_DMA_Init+0x196>
 800257c:	3318      	adds	r3, #24
 800257e:	429c      	cmp	r4, r3
 8002580:	f000 808f 	beq.w	80026a2 <HAL_DMA_Init+0x196>
 8002584:	3318      	adds	r3, #24
 8002586:	429c      	cmp	r4, r3
 8002588:	f000 808b 	beq.w	80026a2 <HAL_DMA_Init+0x196>
 800258c:	3318      	adds	r3, #24
 800258e:	429c      	cmp	r4, r3
 8002590:	f000 8087 	beq.w	80026a2 <HAL_DMA_Init+0x196>
 8002594:	3318      	adds	r3, #24
 8002596:	429c      	cmp	r4, r3
 8002598:	f000 8083 	beq.w	80026a2 <HAL_DMA_Init+0x196>
 800259c:	3318      	adds	r3, #24
 800259e:	429c      	cmp	r4, r3
 80025a0:	d07f      	beq.n	80026a2 <HAL_DMA_Init+0x196>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80025a2:	4946      	ldr	r1, [pc, #280]	@ (80026bc <HAL_DMA_Init+0x1b0>)
 80025a4:	4a46      	ldr	r2, [pc, #280]	@ (80026c0 <HAL_DMA_Init+0x1b4>)
 80025a6:	4b47      	ldr	r3, [pc, #284]	@ (80026c4 <HAL_DMA_Init+0x1b8>)
 80025a8:	eba4 0901 	sub.w	r9, r4, r1
 80025ac:	1aa2      	subs	r2, r4, r2
 80025ae:	4f46      	ldr	r7, [pc, #280]	@ (80026c8 <HAL_DMA_Init+0x1bc>)
 80025b0:	eba4 0803 	sub.w	r8, r4, r3
 80025b4:	fab9 f989 	clz	r9, r9
 80025b8:	3314      	adds	r3, #20
 80025ba:	fab2 f282 	clz	r2, r2
 80025be:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80025c2:	fab8 f888 	clz	r8, r8
 80025c6:	eba4 0a03 	sub.w	sl, r4, r3
 80025ca:	0952      	lsrs	r2, r2, #5
 80025cc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80025d0:	1be7      	subs	r7, r4, r7
 80025d2:	faba fa8a 	clz	sl, sl
 80025d6:	ea49 0102 	orr.w	r1, r9, r2
 80025da:	4e3c      	ldr	r6, [pc, #240]	@ (80026cc <HAL_DMA_Init+0x1c0>)
 80025dc:	fab7 f787 	clz	r7, r7
 80025e0:	483b      	ldr	r0, [pc, #236]	@ (80026d0 <HAL_DMA_Init+0x1c4>)
 80025e2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80025e6:	ea48 0101 	orr.w	r1, r8, r1
 80025ea:	1ba6      	subs	r6, r4, r6
 80025ec:	eba4 0b00 	sub.w	fp, r4, r0
 80025f0:	097f      	lsrs	r7, r7, #5
 80025f2:	ea4a 0101 	orr.w	r1, sl, r1
 80025f6:	fab6 f686 	clz	r6, r6
 80025fa:	3014      	adds	r0, #20
 80025fc:	fabb fb8b 	clz	fp, fp
 8002600:	4339      	orrs	r1, r7
 8002602:	0976      	lsrs	r6, r6, #5
 8002604:	1a23      	subs	r3, r4, r0
 8002606:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800260a:	4331      	orrs	r1, r6
 800260c:	fab3 f383 	clz	r3, r3
 8002610:	ea5b 0101 	orrs.w	r1, fp, r1
 8002614:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	d102      	bne.n	8002622 <HAL_DMA_Init+0x116>
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 81d4 	beq.w	80029ca <HAL_DMA_Init+0x4be>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002622:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002624:	f8df c0b4 	ldr.w	ip, [pc, #180]	@ 80026dc <HAL_DMA_Init+0x1d0>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002628:	f885 1035 	strb.w	r1, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 800262c:	2100      	movs	r1, #0
 800262e:	f885 1034 	strb.w	r1, [r5, #52]	@ 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002632:	6821      	ldr	r1, [r4, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002634:	ea01 0c0c 	and.w	ip, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002638:	68a9      	ldr	r1, [r5, #8]
 800263a:	2940      	cmp	r1, #64	@ 0x40
 800263c:	f000 81c2 	beq.w	80029c4 <HAL_DMA_Init+0x4b8>
 8002640:	f1a1 0180 	sub.w	r1, r1, #128	@ 0x80
 8002644:	fab1 f181 	clz	r1, r1
 8002648:	0949      	lsrs	r1, r1, #5
 800264a:	ea4f 3e81 	mov.w	lr, r1, lsl #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800264e:	6929      	ldr	r1, [r5, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002650:	68e8      	ldr	r0, [r5, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002652:	08c9      	lsrs	r1, r1, #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002654:	4b1f      	ldr	r3, [pc, #124]	@ (80026d4 <HAL_DMA_Init+0x1c8>)
 8002656:	9200      	str	r2, [sp, #0]
 8002658:	ea41 00d0 	orr.w	r0, r1, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800265c:	6969      	ldr	r1, [r5, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800265e:	4423      	add	r3, r4
 8002660:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002664:	69a9      	ldr	r1, [r5, #24]
 8002666:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800266a:	69e9      	ldr	r1, [r5, #28]
 800266c:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002670:	6a29      	ldr	r1, [r5, #32]
 8002672:	ea40 1111 	orr.w	r1, r0, r1, lsr #4
 8002676:	ea41 010c 	orr.w	r1, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800267a:	ea4e 0101 	orr.w	r1, lr, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800267e:	6021      	str	r1, [r4, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002680:	4915      	ldr	r1, [pc, #84]	@ (80026d8 <HAL_DMA_Init+0x1cc>)
 8002682:	fba1 0103 	umull	r0, r1, r1, r3
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002686:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002688:	0909      	lsrs	r1, r1, #4
 800268a:	0089      	lsls	r1, r1, #2
 800268c:	65e9      	str	r1, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800268e:	f7ff fe55 	bl	800233c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002692:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 8002694:	9a00      	ldr	r2, [sp, #0]
 8002696:	f001 041f 	and.w	r4, r1, #31
 800269a:	2101      	movs	r1, #1
 800269c:	40a1      	lsls	r1, r4
 800269e:	6041      	str	r1, [r0, #4]
 80026a0:	e0e2      	b.n	8002868 <HAL_DMA_Init+0x35c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80026a2:	2302      	movs	r3, #2
 80026a4:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80026a8:	2300      	movs	r3, #0
 80026aa:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	6023      	str	r3, [r4, #0]
 80026b6:	e01a      	b.n	80026ee <HAL_DMA_Init+0x1e2>
 80026b8:	40020010 	.word	0x40020010
 80026bc:	58025408 	.word	0x58025408
 80026c0:	5802541c 	.word	0x5802541c
 80026c4:	58025430 	.word	0x58025430
 80026c8:	58025458 	.word	0x58025458
 80026cc:	5802546c 	.word	0x5802546c
 80026d0:	58025480 	.word	0x58025480
 80026d4:	a7fdabf8 	.word	0xa7fdabf8
 80026d8:	cccccccd 	.word	0xcccccccd
 80026dc:	fffe000f 	.word	0xfffe000f
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026e0:	f7fe ff48 	bl	8001574 <HAL_GetTick>
 80026e4:	1b80      	subs	r0, r0, r6
 80026e6:	2805      	cmp	r0, #5
 80026e8:	f200 8117 	bhi.w	800291a <HAL_DMA_Init+0x40e>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026ec:	682c      	ldr	r4, [r5, #0]
 80026ee:	6823      	ldr	r3, [r4, #0]
 80026f0:	07df      	lsls	r7, r3, #31
 80026f2:	d4f5      	bmi.n	80026e0 <HAL_DMA_Init+0x1d4>
    registerValue |=  hdma->Init.Direction           |
 80026f4:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f8:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 80026fa:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026fc:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80026fe:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002700:	430b      	orrs	r3, r1
 8002702:	6969      	ldr	r1, [r5, #20]
 8002704:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002706:	69e9      	ldr	r1, [r5, #28]
 8002708:	4313      	orrs	r3, r2
 800270a:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800270c:	49b2      	ldr	r1, [pc, #712]	@ (80029d8 <HAL_DMA_Init+0x4cc>)
 800270e:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8002710:	6a28      	ldr	r0, [r5, #32]
 8002712:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002714:	48b1      	ldr	r0, [pc, #708]	@ (80029dc <HAL_DMA_Init+0x4d0>)
    registerValue |=  hdma->Init.Direction           |
 8002716:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002718:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800271a:	2904      	cmp	r1, #4
 800271c:	f000 8117 	beq.w	800294e <HAL_DMA_Init+0x442>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002720:	6806      	ldr	r6, [r0, #0]
 8002722:	48af      	ldr	r0, [pc, #700]	@ (80029e0 <HAL_DMA_Init+0x4d4>)
 8002724:	4030      	ands	r0, r6
 8002726:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 800272a:	f080 80d5 	bcs.w	80028d8 <HAL_DMA_Init+0x3cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800272e:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002730:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002732:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002736:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002738:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800273a:	4628      	mov	r0, r5
 800273c:	f7ff fdfe 	bl	800233c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002740:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8002742:	233f      	movs	r3, #63	@ 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002744:	49a7      	ldr	r1, [pc, #668]	@ (80029e4 <HAL_DMA_Init+0x4d8>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002746:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800274a:	4fa7      	ldr	r7, [pc, #668]	@ (80029e8 <HAL_DMA_Init+0x4dc>)
 800274c:	4ea7      	ldr	r6, [pc, #668]	@ (80029ec <HAL_DMA_Init+0x4e0>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800274e:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002750:	4aa7      	ldr	r2, [pc, #668]	@ (80029f0 <HAL_DMA_Init+0x4e4>)
 8002752:	1be7      	subs	r7, r4, r7
 8002754:	1ba6      	subs	r6, r4, r6
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002756:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002758:	eba4 0902 	sub.w	r9, r4, r2
 800275c:	4ba5      	ldr	r3, [pc, #660]	@ (80029f4 <HAL_DMA_Init+0x4e8>)
 800275e:	3214      	adds	r2, #20
 8002760:	fab9 f989 	clz	r9, r9
 8002764:	48a4      	ldr	r0, [pc, #656]	@ (80029f8 <HAL_DMA_Init+0x4ec>)
 8002766:	eba4 0803 	sub.w	r8, r4, r3
 800276a:	4ba4      	ldr	r3, [pc, #656]	@ (80029fc <HAL_DMA_Init+0x4f0>)
 800276c:	1aa2      	subs	r2, r4, r2
 800276e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8002772:	429c      	cmp	r4, r3
 8002774:	bf18      	it	ne
 8002776:	428c      	cmpne	r4, r1
 8002778:	f103 0318 	add.w	r3, r3, #24
 800277c:	fab2 f282 	clz	r2, r2
 8002780:	fab8 f888 	clz	r8, r8
 8002784:	bf0c      	ite	eq
 8002786:	2101      	moveq	r1, #1
 8002788:	2100      	movne	r1, #0
 800278a:	0952      	lsrs	r2, r2, #5
 800278c:	fab7 f787 	clz	r7, r7
 8002790:	429c      	cmp	r4, r3
 8002792:	bf08      	it	eq
 8002794:	f041 0101 	orreq.w	r1, r1, #1
 8002798:	3318      	adds	r3, #24
 800279a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800279e:	eba4 0b00 	sub.w	fp, r4, r0
 80027a2:	429c      	cmp	r4, r3
 80027a4:	bf08      	it	eq
 80027a6:	f041 0101 	orreq.w	r1, r1, #1
 80027aa:	3318      	adds	r3, #24
 80027ac:	097f      	lsrs	r7, r7, #5
 80027ae:	fab6 f686 	clz	r6, r6
 80027b2:	429c      	cmp	r4, r3
 80027b4:	bf08      	it	eq
 80027b6:	f041 0101 	orreq.w	r1, r1, #1
 80027ba:	3318      	adds	r3, #24
 80027bc:	3014      	adds	r0, #20
 80027be:	0976      	lsrs	r6, r6, #5
 80027c0:	429c      	cmp	r4, r3
 80027c2:	bf08      	it	eq
 80027c4:	f041 0101 	orreq.w	r1, r1, #1
 80027c8:	3318      	adds	r3, #24
 80027ca:	fabb fb8b 	clz	fp, fp
 80027ce:	429c      	cmp	r4, r3
 80027d0:	bf08      	it	eq
 80027d2:	f041 0101 	orreq.w	r1, r1, #1
 80027d6:	3318      	adds	r3, #24
 80027d8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80027dc:	429c      	cmp	r4, r3
 80027de:	bf08      	it	eq
 80027e0:	f041 0101 	orreq.w	r1, r1, #1
 80027e4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80027e8:	429c      	cmp	r4, r3
 80027ea:	bf08      	it	eq
 80027ec:	f041 0101 	orreq.w	r1, r1, #1
 80027f0:	3318      	adds	r3, #24
 80027f2:	429c      	cmp	r4, r3
 80027f4:	bf08      	it	eq
 80027f6:	f041 0101 	orreq.w	r1, r1, #1
 80027fa:	3318      	adds	r3, #24
 80027fc:	429c      	cmp	r4, r3
 80027fe:	bf08      	it	eq
 8002800:	f041 0101 	orreq.w	r1, r1, #1
 8002804:	3318      	adds	r3, #24
 8002806:	429c      	cmp	r4, r3
 8002808:	bf08      	it	eq
 800280a:	f041 0101 	orreq.w	r1, r1, #1
 800280e:	3318      	adds	r3, #24
 8002810:	429c      	cmp	r4, r3
 8002812:	bf08      	it	eq
 8002814:	f041 0101 	orreq.w	r1, r1, #1
 8002818:	3318      	adds	r3, #24
 800281a:	429c      	cmp	r4, r3
 800281c:	bf08      	it	eq
 800281e:	f041 0101 	orreq.w	r1, r1, #1
 8002822:	3318      	adds	r3, #24
 8002824:	429c      	cmp	r4, r3
 8002826:	bf08      	it	eq
 8002828:	f041 0101 	orreq.w	r1, r1, #1
 800282c:	3318      	adds	r3, #24
 800282e:	429c      	cmp	r4, r3
 8002830:	bf08      	it	eq
 8002832:	f041 0101 	orreq.w	r1, r1, #1
 8002836:	4b72      	ldr	r3, [pc, #456]	@ (8002a00 <HAL_DMA_Init+0x4f4>)
 8002838:	ea49 0101 	orr.w	r1, r9, r1
 800283c:	eba4 0a03 	sub.w	sl, r4, r3
 8002840:	1a23      	subs	r3, r4, r0
 8002842:	4311      	orrs	r1, r2
 8002844:	faba fa8a 	clz	sl, sl
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	ea48 0101 	orr.w	r1, r8, r1
 8002850:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	ea4a 0101 	orr.w	r1, sl, r1
 800285a:	9301      	str	r3, [sp, #4]
 800285c:	4339      	orrs	r1, r7
 800285e:	4331      	orrs	r1, r6
 8002860:	ea5b 0101 	orrs.w	r1, fp, r1
 8002864:	d100      	bne.n	8002868 <HAL_DMA_Init+0x35c>
 8002866:	b37b      	cbz	r3, 80028c8 <HAL_DMA_Init+0x3bc>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002868:	4628      	mov	r0, r5
 800286a:	9200      	str	r2, [sp, #0]
 800286c:	f7ff fde6 	bl	800243c <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002870:	68a9      	ldr	r1, [r5, #8]
 8002872:	9a00      	ldr	r2, [sp, #0]
 8002874:	2980      	cmp	r1, #128	@ 0x80
 8002876:	d05e      	beq.n	8002936 <HAL_DMA_Init+0x42a>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002878:	6868      	ldr	r0, [r5, #4]
 800287a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800287c:	b2c4      	uxtb	r4, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800287e:	3801      	subs	r0, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002880:	e9d5 c119 	ldrd	ip, r1, [r5, #100]	@ 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002884:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002886:	601c      	str	r4, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002888:	f8cc 1004 	str.w	r1, [ip, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800288c:	d85a      	bhi.n	8002944 <HAL_DMA_Init+0x438>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800288e:	ea49 090a 	orr.w	r9, r9, sl
 8002892:	9b01      	ldr	r3, [sp, #4]
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002894:	1e60      	subs	r0, r4, #1
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002896:	ea48 0809 	orr.w	r8, r8, r9
 800289a:	ea47 0708 	orr.w	r7, r7, r8
 800289e:	433e      	orrs	r6, r7
 80028a0:	ea43 0a06 	orr.w	sl, r3, r6
 80028a4:	ea5b 0a0a 	orrs.w	sl, fp, sl
 80028a8:	d102      	bne.n	80028b0 <HAL_DMA_Init+0x3a4>
 80028aa:	2a00      	cmp	r2, #0
 80028ac:	f000 8085 	beq.w	80029ba <HAL_DMA_Init+0x4ae>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80028b0:	4a54      	ldr	r2, [pc, #336]	@ (8002a04 <HAL_DMA_Init+0x4f8>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80028b2:	4955      	ldr	r1, [pc, #340]	@ (8002a08 <HAL_DMA_Init+0x4fc>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80028b4:	4422      	add	r2, r4
 80028b6:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80028b8:	2301      	movs	r3, #1
 80028ba:	4083      	lsls	r3, r0
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80028bc:	2000      	movs	r0, #0
 80028be:	e9c5 211b 	strd	r2, r1, [r5, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80028c2:	676b      	str	r3, [r5, #116]	@ 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80028c4:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028c6:	604b      	str	r3, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c8:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80028ca:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028cc:	6568      	str	r0, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80028ce:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
}
 80028d2:	b003      	add	sp, #12
 80028d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80028d8:	6868      	ldr	r0, [r5, #4]
 80028da:	f1a0 0629 	sub.w	r6, r0, #41	@ 0x29
 80028de:	2e1f      	cmp	r6, #31
 80028e0:	d924      	bls.n	800292c <HAL_DMA_Init+0x420>
 80028e2:	384f      	subs	r0, #79	@ 0x4f
 80028e4:	2803      	cmp	r0, #3
 80028e6:	d801      	bhi.n	80028ec <HAL_DMA_Init+0x3e0>
        registerValue |= DMA_SxCR_TRBUFF;
 80028e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80028ec:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028ee:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80028f0:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028f2:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80028f6:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028fa:	f47f af1d 	bne.w	8002738 <HAL_DMA_Init+0x22c>
 80028fe:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8002900:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8002902:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002904:	2800      	cmp	r0, #0
 8002906:	f43f af17 	beq.w	8002738 <HAL_DMA_Init+0x22c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800290a:	bb8a      	cbnz	r2, 8002970 <HAL_DMA_Init+0x464>
    switch (hdma->Init.FIFOThreshold)
 800290c:	2901      	cmp	r1, #1
 800290e:	d04f      	beq.n	80029b0 <HAL_DMA_Init+0x4a4>
 8002910:	f031 0202 	bics.w	r2, r1, #2
 8002914:	f47f af10 	bne.w	8002738 <HAL_DMA_Init+0x22c>
 8002918:	e032      	b.n	8002980 <HAL_DMA_Init+0x474>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800291a:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800291c:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800291e:	656a      	str	r2, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8002920:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8002924:	2001      	movs	r0, #1
}
 8002926:	b003      	add	sp, #12
 8002928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800292c:	4837      	ldr	r0, [pc, #220]	@ (8002a0c <HAL_DMA_Init+0x500>)
 800292e:	40f0      	lsrs	r0, r6
 8002930:	07c0      	lsls	r0, r0, #31
 8002932:	d5db      	bpl.n	80028ec <HAL_DMA_Init+0x3e0>
 8002934:	e7d8      	b.n	80028e8 <HAL_DMA_Init+0x3dc>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002936:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002938:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800293a:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	@ 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800293e:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002940:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002942:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800294a:	676b      	str	r3, [r5, #116]	@ 0x74
 800294c:	e7bc      	b.n	80028c8 <HAL_DMA_Init+0x3bc>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800294e:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002950:	e9d5 060b 	ldrd	r0, r6, [r5, #44]	@ 0x2c
 8002954:	4306      	orrs	r6, r0
 8002956:	4333      	orrs	r3, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002958:	4e21      	ldr	r6, [pc, #132]	@ (80029e0 <HAL_DMA_Init+0x4d4>)
 800295a:	403e      	ands	r6, r7
 800295c:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
 8002960:	d2ba      	bcs.n	80028d8 <HAL_DMA_Init+0x3cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002962:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002964:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002966:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 800296a:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800296e:	e7c7      	b.n	8002900 <HAL_DMA_Init+0x3f4>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002970:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8002974:	d00d      	beq.n	8002992 <HAL_DMA_Init+0x486>
    switch (hdma->Init.FIFOThreshold)
 8002976:	2902      	cmp	r1, #2
 8002978:	d905      	bls.n	8002986 <HAL_DMA_Init+0x47a>
 800297a:	2903      	cmp	r1, #3
 800297c:	f47f aedc 	bne.w	8002738 <HAL_DMA_Init+0x22c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002980:	01c2      	lsls	r2, r0, #7
 8002982:	f57f aed9 	bpl.w	8002738 <HAL_DMA_Init+0x22c>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002986:	2240      	movs	r2, #64	@ 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8002988:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800298a:	656a      	str	r2, [r5, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800298c:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
          return HAL_ERROR;
 8002990:	e7c8      	b.n	8002924 <HAL_DMA_Init+0x418>
    switch (hdma->Init.FIFOThreshold)
 8002992:	2903      	cmp	r1, #3
 8002994:	f63f aed0 	bhi.w	8002738 <HAL_DMA_Init+0x22c>
 8002998:	a201      	add	r2, pc, #4	@ (adr r2, 80029a0 <HAL_DMA_Init+0x494>)
 800299a:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 800299e:	bf00      	nop
 80029a0:	08002987 	.word	0x08002987
 80029a4:	08002981 	.word	0x08002981
 80029a8:	08002987 	.word	0x08002987
 80029ac:	080029b1 	.word	0x080029b1
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029b0:	f1b0 7fc0 	cmp.w	r0, #25165824	@ 0x1800000
 80029b4:	f47f aec0 	bne.w	8002738 <HAL_DMA_Init+0x22c>
 80029b8:	e7e5      	b.n	8002986 <HAL_DMA_Init+0x47a>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80029ba:	4a15      	ldr	r2, [pc, #84]	@ (8002a10 <HAL_DMA_Init+0x504>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80029bc:	4915      	ldr	r1, [pc, #84]	@ (8002a14 <HAL_DMA_Init+0x508>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80029be:	4422      	add	r2, r4
 80029c0:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80029c2:	e779      	b.n	80028b8 <HAL_DMA_Init+0x3ac>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80029c4:	f04f 0e10 	mov.w	lr, #16
 80029c8:	e641      	b.n	800264e <HAL_DMA_Init+0x142>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029ca:	2240      	movs	r2, #64	@ 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80029cc:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029ce:	656a      	str	r2, [r5, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80029d0:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 80029d4:	e7a6      	b.n	8002924 <HAL_DMA_Init+0x418>
 80029d6:	bf00      	nop
 80029d8:	fe10803f 	.word	0xfe10803f
 80029dc:	5c001000 	.word	0x5c001000
 80029e0:	ffff0000 	.word	0xffff0000
 80029e4:	40020010 	.word	0x40020010
 80029e8:	58025458 	.word	0x58025458
 80029ec:	5802546c 	.word	0x5802546c
 80029f0:	58025408 	.word	0x58025408
 80029f4:	58025430 	.word	0x58025430
 80029f8:	58025480 	.word	0x58025480
 80029fc:	40020028 	.word	0x40020028
 8002a00:	58025444 	.word	0x58025444
 8002a04:	1600963f 	.word	0x1600963f
 8002a08:	58025940 	.word	0x58025940
 8002a0c:	c3c0003f 	.word	0xc3c0003f
 8002a10:	1000823f 	.word	0x1000823f
 8002a14:	40020940 	.word	0x40020940

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a1c:	680c      	ldr	r4, [r1, #0]
{
 8002a1e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a20:	2c00      	cmp	r4, #0
 8002a22:	f000 80a5 	beq.w	8002b70 <HAL_GPIO_Init+0x158>
  uint32_t position = 0x00U;
 8002a26:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a28:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a2c:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a30:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a32:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
 8002a36:	ea1c 0a04 	ands.w	sl, ip, r4
 8002a3a:	f000 8094 	beq.w	8002b66 <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a3e:	9900      	ldr	r1, [sp, #0]
 8002a40:	005f      	lsls	r7, r3, #1
 8002a42:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a44:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a46:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a4a:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a4e:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a52:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a54:	f1b8 0f01 	cmp.w	r8, #1
 8002a58:	f240 808d 	bls.w	8002b76 <HAL_GPIO_Init+0x15e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a5c:	2a03      	cmp	r2, #3
 8002a5e:	f040 80cb 	bne.w	8002bf8 <HAL_GPIO_Init+0x1e0>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a62:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8002a64:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a66:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a6a:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a6e:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 8002a72:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a74:	d077      	beq.n	8002b66 <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a76:	4e7f      	ldr	r6, [pc, #508]	@ (8002c74 <HAL_GPIO_Init+0x25c>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a78:	f003 0703 	and.w	r7, r3, #3
 8002a7c:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7e:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a82:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a84:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a88:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a8c:	497a      	ldr	r1, [pc, #488]	@ (8002c78 <HAL_GPIO_Init+0x260>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8e:	f8c6 20f4 	str.w	r2, [r6, #244]	@ 0xf4
 8002a92:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
 8002a96:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a9a:	4288      	cmp	r0, r1
 8002a9c:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa0:	f002 0202 	and.w	r2, r2, #2
 8002aa4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002aa8:	9203      	str	r2, [sp, #12]
 8002aaa:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002aac:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002aae:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ab2:	d031      	beq.n	8002b18 <HAL_GPIO_Init+0x100>
 8002ab4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8002ab8:	4288      	cmp	r0, r1
 8002aba:	f000 80b0 	beq.w	8002c1e <HAL_GPIO_Init+0x206>
 8002abe:	496f      	ldr	r1, [pc, #444]	@ (8002c7c <HAL_GPIO_Init+0x264>)
 8002ac0:	4288      	cmp	r0, r1
 8002ac2:	f000 80b2 	beq.w	8002c2a <HAL_GPIO_Init+0x212>
 8002ac6:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 8002c80 <HAL_GPIO_Init+0x268>
 8002aca:	4560      	cmp	r0, ip
 8002acc:	f000 80a1 	beq.w	8002c12 <HAL_GPIO_Init+0x1fa>
 8002ad0:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 8002c84 <HAL_GPIO_Init+0x26c>
 8002ad4:	4560      	cmp	r0, ip
 8002ad6:	f000 80b4 	beq.w	8002c42 <HAL_GPIO_Init+0x22a>
 8002ada:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 8002c88 <HAL_GPIO_Init+0x270>
 8002ade:	4560      	cmp	r0, ip
 8002ae0:	f000 80b5 	beq.w	8002c4e <HAL_GPIO_Init+0x236>
 8002ae4:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 8002c8c <HAL_GPIO_Init+0x274>
 8002ae8:	4560      	cmp	r0, ip
 8002aea:	f000 80a4 	beq.w	8002c36 <HAL_GPIO_Init+0x21e>
 8002aee:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8002c90 <HAL_GPIO_Init+0x278>
 8002af2:	4560      	cmp	r0, ip
 8002af4:	f000 80b1 	beq.w	8002c5a <HAL_GPIO_Init+0x242>
 8002af8:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8002c94 <HAL_GPIO_Init+0x27c>
 8002afc:	4560      	cmp	r0, ip
 8002afe:	f000 80b2 	beq.w	8002c66 <HAL_GPIO_Init+0x24e>
 8002b02:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8002c98 <HAL_GPIO_Init+0x280>
 8002b06:	4560      	cmp	r0, ip
 8002b08:	bf0c      	ite	eq
 8002b0a:	f04f 0c09 	moveq.w	ip, #9
 8002b0e:	f04f 0c0a 	movne.w	ip, #10
 8002b12:	fa0c f707 	lsl.w	r7, ip, r7
 8002b16:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b18:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b1a:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 8002b1c:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
 8002b20:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
 8002b24:	bf4c      	ite	mi
 8002b26:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
 8002b2a:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b2c:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
 8002b2e:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
 8002b32:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
 8002b36:	bf54      	ite	pl
 8002b38:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8002b3a:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b3e:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8002b40:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8002b44:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 8002b48:	bf54      	ite	pl
 8002b4a:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8002b4c:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b50:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8002b52:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8002b56:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 8002b5a:	bf54      	ite	pl
 8002b5c:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8002b5e:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b62:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
 8002b66:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b68:	fa34 f203 	lsrs.w	r2, r4, r3
 8002b6c:	f47f af61 	bne.w	8002a32 <HAL_GPIO_Init+0x1a>
  }
}
 8002b70:	b005      	add	sp, #20
 8002b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b76:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b78:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
 8002b7a:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b7e:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b80:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b84:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b88:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b8a:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b8e:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
 8002b90:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b94:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8002b98:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b9c:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ba0:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ba4:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 8002ba8:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bac:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
 8002bb0:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bb4:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb8:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8002bbc:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc0:	f47f af4f 	bne.w	8002a62 <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bc4:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bc8:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 8002bca:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bce:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bd2:	6909      	ldr	r1, [r1, #16]
 8002bd4:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002bd8:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
 8002bdc:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002be0:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002be2:	210f      	movs	r1, #15
 8002be4:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002be8:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bea:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bee:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 8002bf2:	f8c8 c020 	str.w	ip, [r8, #32]
 8002bf6:	e734      	b.n	8002a62 <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bf8:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
 8002bfa:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bfe:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c00:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c04:	fa01 fc07 	lsl.w	ip, r1, r7
 8002c08:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8002c0c:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c10:	e727      	b.n	8002a62 <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c12:	f04f 0c03 	mov.w	ip, #3
 8002c16:	fa0c f707 	lsl.w	r7, ip, r7
 8002c1a:	433a      	orrs	r2, r7
 8002c1c:	e77c      	b.n	8002b18 <HAL_GPIO_Init+0x100>
 8002c1e:	f04f 0c01 	mov.w	ip, #1
 8002c22:	fa0c f707 	lsl.w	r7, ip, r7
 8002c26:	433a      	orrs	r2, r7
 8002c28:	e776      	b.n	8002b18 <HAL_GPIO_Init+0x100>
 8002c2a:	f04f 0c02 	mov.w	ip, #2
 8002c2e:	fa0c f707 	lsl.w	r7, ip, r7
 8002c32:	433a      	orrs	r2, r7
 8002c34:	e770      	b.n	8002b18 <HAL_GPIO_Init+0x100>
 8002c36:	f04f 0c06 	mov.w	ip, #6
 8002c3a:	fa0c f707 	lsl.w	r7, ip, r7
 8002c3e:	433a      	orrs	r2, r7
 8002c40:	e76a      	b.n	8002b18 <HAL_GPIO_Init+0x100>
 8002c42:	f04f 0c04 	mov.w	ip, #4
 8002c46:	fa0c f707 	lsl.w	r7, ip, r7
 8002c4a:	433a      	orrs	r2, r7
 8002c4c:	e764      	b.n	8002b18 <HAL_GPIO_Init+0x100>
 8002c4e:	f04f 0c05 	mov.w	ip, #5
 8002c52:	fa0c f707 	lsl.w	r7, ip, r7
 8002c56:	433a      	orrs	r2, r7
 8002c58:	e75e      	b.n	8002b18 <HAL_GPIO_Init+0x100>
 8002c5a:	f04f 0c07 	mov.w	ip, #7
 8002c5e:	fa0c f707 	lsl.w	r7, ip, r7
 8002c62:	433a      	orrs	r2, r7
 8002c64:	e758      	b.n	8002b18 <HAL_GPIO_Init+0x100>
 8002c66:	f04f 0c08 	mov.w	ip, #8
 8002c6a:	fa0c f707 	lsl.w	r7, ip, r7
 8002c6e:	433a      	orrs	r2, r7
 8002c70:	e752      	b.n	8002b18 <HAL_GPIO_Init+0x100>
 8002c72:	bf00      	nop
 8002c74:	58024400 	.word	0x58024400
 8002c78:	58020000 	.word	0x58020000
 8002c7c:	58020800 	.word	0x58020800
 8002c80:	58020c00 	.word	0x58020c00
 8002c84:	58021000 	.word	0x58021000
 8002c88:	58021400 	.word	0x58021400
 8002c8c:	58021800 	.word	0x58021800
 8002c90:	58021c00 	.word	0x58021c00
 8002c94:	58022000 	.word	0x58022000
 8002c98:	58022400 	.word	0x58022400

08002c9c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c9c:	b902      	cbnz	r2, 8002ca0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c9e:	0409      	lsls	r1, r1, #16
 8002ca0:	6181      	str	r1, [r0, #24]
  }
}
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002ca4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002ca6:	4c10      	ldr	r4, [pc, #64]	@ (8002ce8 <HAL_PWREx_ConfigSupply+0x44>)
 8002ca8:	68e3      	ldr	r3, [r4, #12]
 8002caa:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002cae:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002cb0:	d105      	bne.n	8002cbe <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	1a18      	subs	r0, r3, r0
 8002cb8:	bf18      	it	ne
 8002cba:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8002cbc:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002cbe:	f023 0307 	bic.w	r3, r3, #7
 8002cc2:	4303      	orrs	r3, r0
 8002cc4:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8002cc6:	f7fe fc55 	bl	8001574 <HAL_GetTick>
 8002cca:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ccc:	e005      	b.n	8002cda <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002cce:	f7fe fc51 	bl	8001574 <HAL_GetTick>
 8002cd2:	1b40      	subs	r0, r0, r5
 8002cd4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002cd8:	d804      	bhi.n	8002ce4 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002cda:	6863      	ldr	r3, [r4, #4]
 8002cdc:	049b      	lsls	r3, r3, #18
 8002cde:	d5f6      	bpl.n	8002cce <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 8002ce0:	2000      	movs	r0, #0
}
 8002ce2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002ce4:	2001      	movs	r0, #1
}
 8002ce6:	bd38      	pop	{r3, r4, r5, pc}
 8002ce8:	58024800 	.word	0x58024800

08002cec <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002cec:	4b33      	ldr	r3, [pc, #204]	@ (8002dbc <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8002cee:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002cf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002cf2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002cf4:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8002cf6:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002cfa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002cfc:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8002d00:	d036      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002d02:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d06:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d0a:	f002 0203 	and.w	r2, r2, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d0e:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002d12:	fb05 f101 	mul.w	r1, r5, r1
 8002d16:	2a01      	cmp	r2, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d1c:	ee06 1a90 	vmov	s13, r1
 8002d20:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8002d24:	d002      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq.part.0+0x40>
 8002d26:	2a02      	cmp	r2, #2
 8002d28:	d042      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 8002d2a:	b31a      	cbz	r2, 8002d74 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d2c:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8002dc0 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8002d30:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8002d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d3a:	ee07 3a90 	vmov	s15, r3
 8002d3e:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8002d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d46:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d4e:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002d52:	4b1a      	ldr	r3, [pc, #104]	@ (8002dbc <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002d5a:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002d5c:	ee07 3a10 	vmov	s14, r3
 8002d60:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002d64:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d68:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8002d6c:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8002d70:	bc30      	pop	{r4, r5}
 8002d72:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	0692      	lsls	r2, r2, #26
 8002d78:	d51d      	bpl.n	8002db6 <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d7a:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d7c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d80:	4a10      	ldr	r2, [pc, #64]	@ (8002dc4 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d84:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d8c:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d8e:	ee06 3a10 	vmov	s12, r3
 8002d92:	ee05 2a90 	vmov	s11, r2
 8002d96:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002d9a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8002d9e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002da2:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8002da6:	ee36 7a26 	vadd.f32	s14, s12, s13
 8002daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dae:	e7d0      	b.n	8002d52 <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002db0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8002dc8 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 8002db4:	e7bc      	b.n	8002d30 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002db6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8002dcc <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 8002dba:	e7b9      	b.n	8002d30 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8002dbc:	58024400 	.word	0x58024400
 8002dc0:	4a742400 	.word	0x4a742400
 8002dc4:	03d09000 	.word	0x03d09000
 8002dc8:	4af42400 	.word	0x4af42400
 8002dcc:	4c742400 	.word	0x4c742400

08002dd0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002dd0:	2800      	cmp	r0, #0
 8002dd2:	f000 82e9 	beq.w	80033a8 <HAL_RCC_OscConfig+0x5d8>
{
 8002dd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd8:	6803      	ldr	r3, [r0, #0]
 8002dda:	4604      	mov	r4, r0
 8002ddc:	07d9      	lsls	r1, r3, #31
 8002dde:	d52e      	bpl.n	8002e3e <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002de0:	4997      	ldr	r1, [pc, #604]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002de2:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002de4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002de6:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002dea:	2a10      	cmp	r2, #16
 8002dec:	f000 80ee 	beq.w	8002fcc <HAL_RCC_OscConfig+0x1fc>
 8002df0:	2a18      	cmp	r2, #24
 8002df2:	f000 80e6 	beq.w	8002fc2 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df6:	6863      	ldr	r3, [r4, #4]
 8002df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dfc:	f000 8111 	beq.w	8003022 <HAL_RCC_OscConfig+0x252>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 8167 	beq.w	80030d4 <HAL_RCC_OscConfig+0x304>
 8002e06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e0a:	4b8d      	ldr	r3, [pc, #564]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	f000 828a 	beq.w	8003326 <HAL_RCC_OscConfig+0x556>
 8002e12:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002e20:	f7fe fba8 	bl	8001574 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e24:	4e86      	ldr	r6, [pc, #536]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8002e26:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e28:	e005      	b.n	8002e36 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e2a:	f7fe fba3 	bl	8001574 <HAL_GetTick>
 8002e2e:	1b40      	subs	r0, r0, r5
 8002e30:	2864      	cmp	r0, #100	@ 0x64
 8002e32:	f200 814d 	bhi.w	80030d0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e36:	6833      	ldr	r3, [r6, #0]
 8002e38:	039b      	lsls	r3, r3, #14
 8002e3a:	d5f6      	bpl.n	8002e2a <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e3c:	6823      	ldr	r3, [r4, #0]
 8002e3e:	079d      	lsls	r5, r3, #30
 8002e40:	d470      	bmi.n	8002f24 <HAL_RCC_OscConfig+0x154>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e42:	06d9      	lsls	r1, r3, #27
 8002e44:	d533      	bpl.n	8002eae <HAL_RCC_OscConfig+0xde>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e46:	4a7e      	ldr	r2, [pc, #504]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002e48:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e4a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	f000 80cb 	beq.w	8002fec <HAL_RCC_OscConfig+0x21c>
 8002e56:	2b18      	cmp	r3, #24
 8002e58:	f000 80c3 	beq.w	8002fe2 <HAL_RCC_OscConfig+0x212>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002e5c:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8002e5e:	4d78      	ldr	r5, [pc, #480]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 816f 	beq.w	8003144 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_CSI_ENABLE();
 8002e66:	682b      	ldr	r3, [r5, #0]
 8002e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e6c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e6e:	f7fe fb81 	bl	8001574 <HAL_GetTick>
 8002e72:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e74:	e005      	b.n	8002e82 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e76:	f7fe fb7d 	bl	8001574 <HAL_GetTick>
 8002e7a:	1b80      	subs	r0, r0, r6
 8002e7c:	2802      	cmp	r0, #2
 8002e7e:	f200 8127 	bhi.w	80030d0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e82:	682b      	ldr	r3, [r5, #0]
 8002e84:	05db      	lsls	r3, r3, #23
 8002e86:	d5f6      	bpl.n	8002e76 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e88:	f7fe fb7a 	bl	8001580 <HAL_GetREVID>
 8002e8c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002e90:	4298      	cmp	r0, r3
 8002e92:	f200 8269 	bhi.w	8003368 <HAL_RCC_OscConfig+0x598>
 8002e96:	6a22      	ldr	r2, [r4, #32]
 8002e98:	686b      	ldr	r3, [r5, #4]
 8002e9a:	2a20      	cmp	r2, #32
 8002e9c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002ea0:	bf0c      	ite	eq
 8002ea2:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8002ea6:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8002eaa:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eac:	6823      	ldr	r3, [r4, #0]
 8002eae:	071d      	lsls	r5, r3, #28
 8002eb0:	d516      	bpl.n	8002ee0 <HAL_RCC_OscConfig+0x110>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002eb2:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002eb4:	4d62      	ldr	r5, [pc, #392]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 8122 	beq.w	8003100 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_LSI_ENABLE();
 8002ebc:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8002ec4:	f7fe fb56 	bl	8001574 <HAL_GetTick>
 8002ec8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002eca:	e005      	b.n	8002ed8 <HAL_RCC_OscConfig+0x108>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ecc:	f7fe fb52 	bl	8001574 <HAL_GetTick>
 8002ed0:	1b80      	subs	r0, r0, r6
 8002ed2:	2802      	cmp	r0, #2
 8002ed4:	f200 80fc 	bhi.w	80030d0 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ed8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002eda:	0798      	lsls	r0, r3, #30
 8002edc:	d5f6      	bpl.n	8002ecc <HAL_RCC_OscConfig+0xfc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ede:	6823      	ldr	r3, [r4, #0]
 8002ee0:	069a      	lsls	r2, r3, #26
 8002ee2:	d516      	bpl.n	8002f12 <HAL_RCC_OscConfig+0x142>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002ee4:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8002ee6:	4d56      	ldr	r5, [pc, #344]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 811a 	beq.w	8003122 <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
 8002eee:	682b      	ldr	r3, [r5, #0]
 8002ef0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ef4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002ef6:	f7fe fb3d 	bl	8001574 <HAL_GetTick>
 8002efa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002efc:	e005      	b.n	8002f0a <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002efe:	f7fe fb39 	bl	8001574 <HAL_GetTick>
 8002f02:	1b80      	subs	r0, r0, r6
 8002f04:	2802      	cmp	r0, #2
 8002f06:	f200 80e3 	bhi.w	80030d0 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f0a:	682b      	ldr	r3, [r5, #0]
 8002f0c:	049f      	lsls	r7, r3, #18
 8002f0e:	d5f6      	bpl.n	8002efe <HAL_RCC_OscConfig+0x12e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f10:	6823      	ldr	r3, [r4, #0]
 8002f12:	0759      	lsls	r1, r3, #29
 8002f14:	f100 808b 	bmi.w	800302e <HAL_RCC_OscConfig+0x25e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f18:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f040 80bf 	bne.w	800309e <HAL_RCC_OscConfig+0x2ce>
  return HAL_OK;
 8002f20:	2000      	movs	r0, #0
}
 8002f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f24:	4a46      	ldr	r2, [pc, #280]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002f26:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f28:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f2a:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8002f2e:	d12d      	bne.n	8002f8c <HAL_RCC_OscConfig+0x1bc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f30:	4b43      	ldr	r3, [pc, #268]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f32:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	0759      	lsls	r1, r3, #29
 8002f38:	d501      	bpl.n	8002f3e <HAL_RCC_OscConfig+0x16e>
 8002f3a:	2a00      	cmp	r2, #0
 8002f3c:	d04f      	beq.n	8002fde <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f3e:	4d40      	ldr	r5, [pc, #256]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002f40:	682b      	ldr	r3, [r5, #0]
 8002f42:	f023 0319 	bic.w	r3, r3, #25
 8002f46:	4313      	orrs	r3, r2
 8002f48:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f4a:	f7fe fb13 	bl	8001574 <HAL_GetTick>
 8002f4e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f50:	e005      	b.n	8002f5e <HAL_RCC_OscConfig+0x18e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f52:	f7fe fb0f 	bl	8001574 <HAL_GetTick>
 8002f56:	1b80      	subs	r0, r0, r6
 8002f58:	2802      	cmp	r0, #2
 8002f5a:	f200 80b9 	bhi.w	80030d0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f5e:	682b      	ldr	r3, [r5, #0]
 8002f60:	075b      	lsls	r3, r3, #29
 8002f62:	d5f6      	bpl.n	8002f52 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f64:	f7fe fb0c 	bl	8001580 <HAL_GetREVID>
 8002f68:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002f6c:	4298      	cmp	r0, r3
 8002f6e:	f200 8110 	bhi.w	8003192 <HAL_RCC_OscConfig+0x3c2>
 8002f72:	6922      	ldr	r2, [r4, #16]
 8002f74:	686b      	ldr	r3, [r5, #4]
 8002f76:	2a40      	cmp	r2, #64	@ 0x40
 8002f78:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002f7c:	bf0c      	ite	eq
 8002f7e:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8002f82:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8002f86:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	e75a      	b.n	8002e42 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f8c:	2b18      	cmp	r3, #24
 8002f8e:	f000 80fc 	beq.w	800318a <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f92:	4d2b      	ldr	r5, [pc, #172]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f94:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f96:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f98:	2a00      	cmp	r2, #0
 8002f9a:	f000 80e5 	beq.w	8003168 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f9e:	f023 0319 	bic.w	r3, r3, #25
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002fa6:	f7fe fae5 	bl	8001574 <HAL_GetTick>
 8002faa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fac:	e005      	b.n	8002fba <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fae:	f7fe fae1 	bl	8001574 <HAL_GetTick>
 8002fb2:	1b80      	subs	r0, r0, r6
 8002fb4:	2802      	cmp	r0, #2
 8002fb6:	f200 808b 	bhi.w	80030d0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fba:	682b      	ldr	r3, [r5, #0]
 8002fbc:	075f      	lsls	r7, r3, #29
 8002fbe:	d5f6      	bpl.n	8002fae <HAL_RCC_OscConfig+0x1de>
 8002fc0:	e7d0      	b.n	8002f64 <HAL_RCC_OscConfig+0x194>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002fc2:	f001 0103 	and.w	r1, r1, #3
 8002fc6:	2902      	cmp	r1, #2
 8002fc8:	f47f af15 	bne.w	8002df6 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	0392      	lsls	r2, r2, #14
 8002fd2:	f57f af34 	bpl.w	8002e3e <HAL_RCC_OscConfig+0x6e>
 8002fd6:	6862      	ldr	r2, [r4, #4]
 8002fd8:	2a00      	cmp	r2, #0
 8002fda:	f47f af30 	bne.w	8002e3e <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 8002fde:	2001      	movs	r0, #1
}
 8002fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002fe2:	f002 0203 	and.w	r2, r2, #3
 8002fe6:	2a01      	cmp	r2, #1
 8002fe8:	f47f af38 	bne.w	8002e5c <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fec:	4b14      	ldr	r3, [pc, #80]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	05da      	lsls	r2, r3, #23
 8002ff2:	d502      	bpl.n	8002ffa <HAL_RCC_OscConfig+0x22a>
 8002ff4:	69e3      	ldr	r3, [r4, #28]
 8002ff6:	2b80      	cmp	r3, #128	@ 0x80
 8002ff8:	d1f1      	bne.n	8002fde <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ffa:	f7fe fac1 	bl	8001580 <HAL_GetREVID>
 8002ffe:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003002:	4298      	cmp	r0, r3
 8003004:	f200 80ce 	bhi.w	80031a4 <HAL_RCC_OscConfig+0x3d4>
 8003008:	6a22      	ldr	r2, [r4, #32]
 800300a:	2a20      	cmp	r2, #32
 800300c:	f000 81bb 	beq.w	8003386 <HAL_RCC_OscConfig+0x5b6>
 8003010:	490b      	ldr	r1, [pc, #44]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8003012:	684b      	ldr	r3, [r1, #4]
 8003014:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003018:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800301c:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800301e:	6823      	ldr	r3, [r4, #0]
 8003020:	e745      	b.n	8002eae <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003022:	4a07      	ldr	r2, [pc, #28]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8003024:	6813      	ldr	r3, [r2, #0]
 8003026:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800302a:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800302c:	e6f8      	b.n	8002e20 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 800302e:	4d05      	ldr	r5, [pc, #20]	@ (8003044 <HAL_RCC_OscConfig+0x274>)
 8003030:	682b      	ldr	r3, [r5, #0]
 8003032:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003036:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003038:	f7fe fa9c 	bl	8001574 <HAL_GetTick>
 800303c:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x282>
 8003040:	58024400 	.word	0x58024400
 8003044:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003048:	f7fe fa94 	bl	8001574 <HAL_GetTick>
 800304c:	1b80      	subs	r0, r0, r6
 800304e:	2864      	cmp	r0, #100	@ 0x64
 8003050:	d83e      	bhi.n	80030d0 <HAL_RCC_OscConfig+0x300>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003052:	682b      	ldr	r3, [r5, #0]
 8003054:	05da      	lsls	r2, r3, #23
 8003056:	d5f7      	bpl.n	8003048 <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003058:	68a3      	ldr	r3, [r4, #8]
 800305a:	2b01      	cmp	r3, #1
 800305c:	f000 818d 	beq.w	800337a <HAL_RCC_OscConfig+0x5aa>
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 8168 	beq.w	8003336 <HAL_RCC_OscConfig+0x566>
 8003066:	2b05      	cmp	r3, #5
 8003068:	4b85      	ldr	r3, [pc, #532]	@ (8003280 <HAL_RCC_OscConfig+0x4b0>)
 800306a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800306c:	f000 8194 	beq.w	8003398 <HAL_RCC_OscConfig+0x5c8>
 8003070:	f022 0201 	bic.w	r2, r2, #1
 8003074:	671a      	str	r2, [r3, #112]	@ 0x70
 8003076:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003078:	f022 0204 	bic.w	r2, r2, #4
 800307c:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800307e:	f7fe fa79 	bl	8001574 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003082:	4e7f      	ldr	r6, [pc, #508]	@ (8003280 <HAL_RCC_OscConfig+0x4b0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003084:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003088:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800308a:	e004      	b.n	8003096 <HAL_RCC_OscConfig+0x2c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308c:	f7fe fa72 	bl	8001574 <HAL_GetTick>
 8003090:	1b40      	subs	r0, r0, r5
 8003092:	42b8      	cmp	r0, r7
 8003094:	d81c      	bhi.n	80030d0 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003096:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8003098:	079b      	lsls	r3, r3, #30
 800309a:	d5f7      	bpl.n	800308c <HAL_RCC_OscConfig+0x2bc>
 800309c:	e73c      	b.n	8002f18 <HAL_RCC_OscConfig+0x148>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800309e:	4d78      	ldr	r5, [pc, #480]	@ (8003280 <HAL_RCC_OscConfig+0x4b0>)
 80030a0:	692a      	ldr	r2, [r5, #16]
 80030a2:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80030a6:	2a18      	cmp	r2, #24
 80030a8:	f000 80f0 	beq.w	800328c <HAL_RCC_OscConfig+0x4bc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ac:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80030ae:	682b      	ldr	r3, [r5, #0]
 80030b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030b4:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b6:	d07f      	beq.n	80031b8 <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
 80030b8:	f7fe fa5c 	bl	8001574 <HAL_GetTick>
 80030bc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030be:	682b      	ldr	r3, [r5, #0]
 80030c0:	019b      	lsls	r3, r3, #6
 80030c2:	f57f af2d 	bpl.w	8002f20 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c6:	f7fe fa55 	bl	8001574 <HAL_GetTick>
 80030ca:	1b00      	subs	r0, r0, r4
 80030cc:	2802      	cmp	r0, #2
 80030ce:	d9f6      	bls.n	80030be <HAL_RCC_OscConfig+0x2ee>
            return HAL_TIMEOUT;
 80030d0:	2003      	movs	r0, #3
}
 80030d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d4:	4d6a      	ldr	r5, [pc, #424]	@ (8003280 <HAL_RCC_OscConfig+0x4b0>)
 80030d6:	682b      	ldr	r3, [r5, #0]
 80030d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030dc:	602b      	str	r3, [r5, #0]
 80030de:	682b      	ldr	r3, [r5, #0]
 80030e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80030e6:	f7fe fa45 	bl	8001574 <HAL_GetTick>
 80030ea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030ec:	e004      	b.n	80030f8 <HAL_RCC_OscConfig+0x328>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ee:	f7fe fa41 	bl	8001574 <HAL_GetTick>
 80030f2:	1b80      	subs	r0, r0, r6
 80030f4:	2864      	cmp	r0, #100	@ 0x64
 80030f6:	d8eb      	bhi.n	80030d0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030f8:	682b      	ldr	r3, [r5, #0]
 80030fa:	039f      	lsls	r7, r3, #14
 80030fc:	d4f7      	bmi.n	80030ee <HAL_RCC_OscConfig+0x31e>
 80030fe:	e69d      	b.n	8002e3c <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8003100:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003102:	f023 0301 	bic.w	r3, r3, #1
 8003106:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003108:	f7fe fa34 	bl	8001574 <HAL_GetTick>
 800310c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800310e:	e004      	b.n	800311a <HAL_RCC_OscConfig+0x34a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003110:	f7fe fa30 	bl	8001574 <HAL_GetTick>
 8003114:	1b80      	subs	r0, r0, r6
 8003116:	2802      	cmp	r0, #2
 8003118:	d8da      	bhi.n	80030d0 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800311a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800311c:	0799      	lsls	r1, r3, #30
 800311e:	d4f7      	bmi.n	8003110 <HAL_RCC_OscConfig+0x340>
 8003120:	e6dd      	b.n	8002ede <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSI48_DISABLE();
 8003122:	682b      	ldr	r3, [r5, #0]
 8003124:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003128:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800312a:	f7fe fa23 	bl	8001574 <HAL_GetTick>
 800312e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003130:	e004      	b.n	800313c <HAL_RCC_OscConfig+0x36c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003132:	f7fe fa1f 	bl	8001574 <HAL_GetTick>
 8003136:	1b80      	subs	r0, r0, r6
 8003138:	2802      	cmp	r0, #2
 800313a:	d8c9      	bhi.n	80030d0 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800313c:	682b      	ldr	r3, [r5, #0]
 800313e:	0498      	lsls	r0, r3, #18
 8003140:	d4f7      	bmi.n	8003132 <HAL_RCC_OscConfig+0x362>
 8003142:	e6e5      	b.n	8002f10 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_CSI_DISABLE();
 8003144:	682b      	ldr	r3, [r5, #0]
 8003146:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800314a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800314c:	f7fe fa12 	bl	8001574 <HAL_GetTick>
 8003150:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003152:	e004      	b.n	800315e <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003154:	f7fe fa0e 	bl	8001574 <HAL_GetTick>
 8003158:	1b80      	subs	r0, r0, r6
 800315a:	2802      	cmp	r0, #2
 800315c:	d8b8      	bhi.n	80030d0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800315e:	682b      	ldr	r3, [r5, #0]
 8003160:	05df      	lsls	r7, r3, #23
 8003162:	d4f7      	bmi.n	8003154 <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003164:	6823      	ldr	r3, [r4, #0]
 8003166:	e6a2      	b.n	8002eae <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800316e:	f7fe fa01 	bl	8001574 <HAL_GetTick>
 8003172:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003174:	e004      	b.n	8003180 <HAL_RCC_OscConfig+0x3b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003176:	f7fe f9fd 	bl	8001574 <HAL_GetTick>
 800317a:	1b80      	subs	r0, r0, r6
 800317c:	2802      	cmp	r0, #2
 800317e:	d8a7      	bhi.n	80030d0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003180:	682b      	ldr	r3, [r5, #0]
 8003182:	0758      	lsls	r0, r3, #29
 8003184:	d4f7      	bmi.n	8003176 <HAL_RCC_OscConfig+0x3a6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	e65b      	b.n	8002e42 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800318a:	0790      	lsls	r0, r2, #30
 800318c:	f47f af01 	bne.w	8002f92 <HAL_RCC_OscConfig+0x1c2>
 8003190:	e6ce      	b.n	8002f30 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003192:	686b      	ldr	r3, [r5, #4]
 8003194:	6922      	ldr	r2, [r4, #16]
 8003196:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800319a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800319e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	e64e      	b.n	8002e42 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031a4:	4a36      	ldr	r2, [pc, #216]	@ (8003280 <HAL_RCC_OscConfig+0x4b0>)
 80031a6:	6a21      	ldr	r1, [r4, #32]
 80031a8:	68d3      	ldr	r3, [r2, #12]
 80031aa:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80031ae:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80031b2:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031b4:	6823      	ldr	r3, [r4, #0]
 80031b6:	e67a      	b.n	8002eae <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 80031b8:	f7fe f9dc 	bl	8001574 <HAL_GetTick>
 80031bc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031be:	e004      	b.n	80031ca <HAL_RCC_OscConfig+0x3fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c0:	f7fe f9d8 	bl	8001574 <HAL_GetTick>
 80031c4:	1b80      	subs	r0, r0, r6
 80031c6:	2802      	cmp	r0, #2
 80031c8:	d882      	bhi.n	80030d0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031ca:	682b      	ldr	r3, [r5, #0]
 80031cc:	0199      	lsls	r1, r3, #6
 80031ce:	d4f7      	bmi.n	80031c0 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031d0:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80031d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003284 <HAL_RCC_OscConfig+0x4b4>)
 80031d4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80031d6:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80031d8:	492b      	ldr	r1, [pc, #172]	@ (8003288 <HAL_RCC_OscConfig+0x4b8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031da:	4e29      	ldr	r6, [pc, #164]	@ (8003280 <HAL_RCC_OscConfig+0x4b0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031dc:	4313      	orrs	r3, r2
 80031de:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80031e0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80031e4:	62ab      	str	r3, [r5, #40]	@ 0x28
 80031e6:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 80031ea:	3b01      	subs	r3, #1
 80031ec:	3a01      	subs	r2, #1
 80031ee:	025b      	lsls	r3, r3, #9
 80031f0:	0412      	lsls	r2, r2, #16
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80031f8:	4313      	orrs	r3, r2
 80031fa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80031fc:	3a01      	subs	r2, #1
 80031fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003202:	4313      	orrs	r3, r2
 8003204:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003206:	3a01      	subs	r2, #1
 8003208:	0612      	lsls	r2, r2, #24
 800320a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800320e:	4313      	orrs	r3, r2
 8003210:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8003212:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800321a:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 800321c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800321e:	4011      	ands	r1, r2
 8003220:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8003224:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003226:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003228:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800322a:	f023 030c 	bic.w	r3, r3, #12
 800322e:	4313      	orrs	r3, r2
 8003230:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003232:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003234:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003236:	f023 0302 	bic.w	r3, r3, #2
 800323a:	4313      	orrs	r3, r2
 800323c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800323e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003244:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003246:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800324c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800324e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003250:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003254:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8003256:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800325e:	682b      	ldr	r3, [r5, #0]
 8003260:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003264:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003266:	f7fe f985 	bl	8001574 <HAL_GetTick>
 800326a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800326c:	6833      	ldr	r3, [r6, #0]
 800326e:	019a      	lsls	r2, r3, #6
 8003270:	f53f ae56 	bmi.w	8002f20 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003274:	f7fe f97e 	bl	8001574 <HAL_GetTick>
 8003278:	1b00      	subs	r0, r0, r4
 800327a:	2802      	cmp	r0, #2
 800327c:	d9f6      	bls.n	800326c <HAL_RCC_OscConfig+0x49c>
 800327e:	e727      	b.n	80030d0 <HAL_RCC_OscConfig+0x300>
 8003280:	58024400 	.word	0x58024400
 8003284:	fffffc0c 	.word	0xfffffc0c
 8003288:	ffff0007 	.word	0xffff0007
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800328c:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800328e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003290:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003292:	f43f aea4 	beq.w	8002fde <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003296:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800329a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800329c:	428b      	cmp	r3, r1
 800329e:	f47f ae9e 	bne.w	8002fde <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032a2:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80032a8:	429a      	cmp	r2, r3
 80032aa:	f47f ae98 	bne.w	8002fde <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80032b0:	f3c0 0208 	ubfx	r2, r0, #0, #9
 80032b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	f47f ae91 	bne.w	8002fde <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80032be:	f3c0 2246 	ubfx	r2, r0, #9, #7
 80032c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032c4:	429a      	cmp	r2, r3
 80032c6:	f47f ae8a 	bne.w	8002fde <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032ca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80032cc:	f3c0 4206 	ubfx	r2, r0, #16, #7
 80032d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032d2:	429a      	cmp	r2, r3
 80032d4:	f47f ae83 	bne.w	8002fde <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80032d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80032da:	f3c0 6006 	ubfx	r0, r0, #24, #7
 80032de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032e0:	4298      	cmp	r0, r3
 80032e2:	f47f ae7c 	bne.w	8002fde <HAL_RCC_OscConfig+0x20e>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80032e6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80032e8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80032ea:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80032ee:	429a      	cmp	r2, r3
 80032f0:	f43f ae16 	beq.w	8002f20 <HAL_RCC_OscConfig+0x150>
          __HAL_RCC_PLLFRACN_DISABLE();
 80032f4:	4a2d      	ldr	r2, [pc, #180]	@ (80033ac <HAL_RCC_OscConfig+0x5dc>)
 80032f6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 80032fe:	f7fe f939 	bl	8001574 <HAL_GetTick>
 8003302:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003304:	f7fe f936 	bl	8001574 <HAL_GetTick>
 8003308:	42a8      	cmp	r0, r5
 800330a:	d0fb      	beq.n	8003304 <HAL_RCC_OscConfig+0x534>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800330c:	4a27      	ldr	r2, [pc, #156]	@ (80033ac <HAL_RCC_OscConfig+0x5dc>)
 800330e:	4b28      	ldr	r3, [pc, #160]	@ (80033b0 <HAL_RCC_OscConfig+0x5e0>)
 8003310:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8003312:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003314:	4003      	ands	r3, r0
 8003316:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800331a:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800331c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003324:	e5fc      	b.n	8002f20 <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003326:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003332:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003334:	e574      	b.n	8002e20 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003336:	4d1d      	ldr	r5, [pc, #116]	@ (80033ac <HAL_RCC_OscConfig+0x5dc>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003338:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800333c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800333e:	f023 0301 	bic.w	r3, r3, #1
 8003342:	672b      	str	r3, [r5, #112]	@ 0x70
 8003344:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003346:	f023 0304 	bic.w	r3, r3, #4
 800334a:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800334c:	f7fe f912 	bl	8001574 <HAL_GetTick>
 8003350:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003352:	e005      	b.n	8003360 <HAL_RCC_OscConfig+0x590>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003354:	f7fe f90e 	bl	8001574 <HAL_GetTick>
 8003358:	1b80      	subs	r0, r0, r6
 800335a:	42b8      	cmp	r0, r7
 800335c:	f63f aeb8 	bhi.w	80030d0 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003360:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003362:	0798      	lsls	r0, r3, #30
 8003364:	d4f6      	bmi.n	8003354 <HAL_RCC_OscConfig+0x584>
 8003366:	e5d7      	b.n	8002f18 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003368:	68eb      	ldr	r3, [r5, #12]
 800336a:	6a22      	ldr	r2, [r4, #32]
 800336c:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8003370:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003374:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	e599      	b.n	8002eae <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337a:	4a0c      	ldr	r2, [pc, #48]	@ (80033ac <HAL_RCC_OscConfig+0x5dc>)
 800337c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003384:	e67b      	b.n	800307e <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003386:	4a09      	ldr	r2, [pc, #36]	@ (80033ac <HAL_RCC_OscConfig+0x5dc>)
 8003388:	6853      	ldr	r3, [r2, #4]
 800338a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800338e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003392:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	e58a      	b.n	8002eae <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003398:	f042 0204 	orr.w	r2, r2, #4
 800339c:	671a      	str	r2, [r3, #112]	@ 0x70
 800339e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80033a0:	f042 0201 	orr.w	r2, r2, #1
 80033a4:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033a6:	e66a      	b.n	800307e <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 80033a8:	2001      	movs	r0, #1
}
 80033aa:	4770      	bx	lr
 80033ac:	58024400 	.word	0x58024400
 80033b0:	ffff0007 	.word	0xffff0007

080033b4 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033b4:	4a3f      	ldr	r2, [pc, #252]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0x100>)
 80033b6:	6913      	ldr	r3, [r2, #16]
 80033b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033bc:	2b10      	cmp	r3, #16
 80033be:	d004      	beq.n	80033ca <HAL_RCC_GetSysClockFreq+0x16>
 80033c0:	2b18      	cmp	r3, #24
 80033c2:	d00d      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x2c>
 80033c4:	b11b      	cbz	r3, 80033ce <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 80033c6:	483c      	ldr	r0, [pc, #240]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x104>)
 80033c8:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ca:	483c      	ldr	r0, [pc, #240]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x108>)
 80033cc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033ce:	6813      	ldr	r3, [r2, #0]
 80033d0:	0699      	lsls	r1, r3, #26
 80033d2:	d548      	bpl.n	8003466 <HAL_RCC_GetSysClockFreq+0xb2>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033d4:	6813      	ldr	r3, [r2, #0]
 80033d6:	483a      	ldr	r0, [pc, #232]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033d8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80033dc:	40d8      	lsrs	r0, r3
 80033de:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033e0:	6a93      	ldr	r3, [r2, #40]	@ 0x28
{
 80033e2:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80033e4:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80033e6:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 80033e8:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80033ec:	6b51      	ldr	r1, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80033ee:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80033f2:	d036      	beq.n	8003462 <HAL_RCC_GetSysClockFreq+0xae>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80033f4:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80033f8:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033fc:	f003 0303 	and.w	r3, r3, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003400:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003404:	fb05 f101 	mul.w	r1, r5, r1
 8003408:	2b01      	cmp	r3, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800340a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800340e:	ee06 1a90 	vmov	s13, r1
 8003412:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8003416:	d002      	beq.n	800341e <HAL_RCC_GetSysClockFreq+0x6a>
 8003418:	2b02      	cmp	r3, #2
 800341a:	d026      	beq.n	800346a <HAL_RCC_GetSysClockFreq+0xb6>
 800341c:	b343      	cbz	r3, 8003470 <HAL_RCC_GetSysClockFreq+0xbc>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800341e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80034c4 <HAL_RCC_GetSysClockFreq+0x110>
 8003422:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8003426:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342c:	ee07 3a10 	vmov	s14, r3
 8003430:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003434:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003438:	ee37 7a25 	vadd.f32	s14, s14, s11
 800343c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003440:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003444:	4b1b      	ldr	r3, [pc, #108]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003448:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800344c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003456:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800345a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800345e:	ee17 0a90 	vmov	r0, s15
}
 8003462:	bc30      	pop	{r4, r5}
 8003464:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003466:	4816      	ldr	r0, [pc, #88]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x10c>)
}
 8003468:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800346a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80034c8 <HAL_RCC_GetSysClockFreq+0x114>
 800346e:	e7d8      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003470:	6813      	ldr	r3, [r2, #0]
 8003472:	069b      	lsls	r3, r3, #26
 8003474:	d51a      	bpl.n	80034ac <HAL_RCC_GetSysClockFreq+0xf8>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003476:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003478:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800347c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800347e:	4910      	ldr	r1, [pc, #64]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003480:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003484:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003488:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800348a:	ee06 3a10 	vmov	s12, r3
 800348e:	ee05 1a90 	vmov	s11, r1
 8003492:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003496:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800349a:	ee36 6a07 	vadd.f32	s12, s12, s14
 800349e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 80034a2:	ee76 7a26 	vadd.f32	s15, s12, s13
 80034a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034aa:	e7cb      	b.n	8003444 <HAL_RCC_GetSysClockFreq+0x90>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034ac:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80034cc <HAL_RCC_GetSysClockFreq+0x118>
 80034b0:	e7b7      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x6e>
 80034b2:	bf00      	nop
 80034b4:	58024400 	.word	0x58024400
 80034b8:	003d0900 	.word	0x003d0900
 80034bc:	007a1200 	.word	0x007a1200
 80034c0:	03d09000 	.word	0x03d09000
 80034c4:	4a742400 	.word	0x4a742400
 80034c8:	4af42400 	.word	0x4af42400
 80034cc:	4c742400 	.word	0x4c742400

080034d0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80034d0:	2800      	cmp	r0, #0
 80034d2:	f000 810e 	beq.w	80036f2 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034d6:	4a8d      	ldr	r2, [pc, #564]	@ (800370c <HAL_RCC_ClockConfig+0x23c>)
 80034d8:	6813      	ldr	r3, [r2, #0]
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	428b      	cmp	r3, r1
{
 80034e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034e4:	4604      	mov	r4, r0
 80034e6:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034e8:	d20c      	bcs.n	8003504 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	6813      	ldr	r3, [r2, #0]
 80034ec:	f023 030f 	bic.w	r3, r3, #15
 80034f0:	430b      	orrs	r3, r1
 80034f2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f4:	6813      	ldr	r3, [r2, #0]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	428b      	cmp	r3, r1
 80034fc:	d002      	beq.n	8003504 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80034fe:	2001      	movs	r0, #1
}
 8003500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	0758      	lsls	r0, r3, #29
 8003508:	d50b      	bpl.n	8003522 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800350a:	4981      	ldr	r1, [pc, #516]	@ (8003710 <HAL_RCC_ClockConfig+0x240>)
 800350c:	6920      	ldr	r0, [r4, #16]
 800350e:	698a      	ldr	r2, [r1, #24]
 8003510:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003514:	4290      	cmp	r0, r2
 8003516:	d904      	bls.n	8003522 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003518:	698a      	ldr	r2, [r1, #24]
 800351a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800351e:	4302      	orrs	r2, r0
 8003520:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003522:	0719      	lsls	r1, r3, #28
 8003524:	d50b      	bpl.n	800353e <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003526:	497a      	ldr	r1, [pc, #488]	@ (8003710 <HAL_RCC_ClockConfig+0x240>)
 8003528:	6960      	ldr	r0, [r4, #20]
 800352a:	69ca      	ldr	r2, [r1, #28]
 800352c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003530:	4290      	cmp	r0, r2
 8003532:	d904      	bls.n	800353e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003534:	69ca      	ldr	r2, [r1, #28]
 8003536:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800353a:	4302      	orrs	r2, r0
 800353c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800353e:	06da      	lsls	r2, r3, #27
 8003540:	d50b      	bpl.n	800355a <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003542:	4973      	ldr	r1, [pc, #460]	@ (8003710 <HAL_RCC_ClockConfig+0x240>)
 8003544:	69a0      	ldr	r0, [r4, #24]
 8003546:	69ca      	ldr	r2, [r1, #28]
 8003548:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800354c:	4290      	cmp	r0, r2
 800354e:	d904      	bls.n	800355a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003550:	69ca      	ldr	r2, [r1, #28]
 8003552:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003556:	4302      	orrs	r2, r0
 8003558:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800355a:	069f      	lsls	r7, r3, #26
 800355c:	d50b      	bpl.n	8003576 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800355e:	496c      	ldr	r1, [pc, #432]	@ (8003710 <HAL_RCC_ClockConfig+0x240>)
 8003560:	69e0      	ldr	r0, [r4, #28]
 8003562:	6a0a      	ldr	r2, [r1, #32]
 8003564:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003568:	4290      	cmp	r0, r2
 800356a:	d904      	bls.n	8003576 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800356c:	6a0a      	ldr	r2, [r1, #32]
 800356e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003572:	4302      	orrs	r2, r0
 8003574:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003576:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003578:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357c:	f140 80ab 	bpl.w	80036d6 <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003580:	4e63      	ldr	r6, [pc, #396]	@ (8003710 <HAL_RCC_ClockConfig+0x240>)
 8003582:	68e0      	ldr	r0, [r4, #12]
 8003584:	69b1      	ldr	r1, [r6, #24]
 8003586:	f001 010f 	and.w	r1, r1, #15
 800358a:	4288      	cmp	r0, r1
 800358c:	d904      	bls.n	8003598 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800358e:	69b1      	ldr	r1, [r6, #24]
 8003590:	f021 010f 	bic.w	r1, r1, #15
 8003594:	4301      	orrs	r1, r0
 8003596:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003598:	2a00      	cmp	r2, #0
 800359a:	d030      	beq.n	80035fe <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800359c:	4a5c      	ldr	r2, [pc, #368]	@ (8003710 <HAL_RCC_ClockConfig+0x240>)
 800359e:	68a1      	ldr	r1, [r4, #8]
 80035a0:	6993      	ldr	r3, [r2, #24]
 80035a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80035a6:	430b      	orrs	r3, r1
 80035a8:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035aa:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035ac:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ae:	2902      	cmp	r1, #2
 80035b0:	f000 80a1 	beq.w	80036f6 <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b4:	2903      	cmp	r1, #3
 80035b6:	f000 8098 	beq.w	80036ea <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80035ba:	2901      	cmp	r1, #1
 80035bc:	f000 80a1 	beq.w	8003702 <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035c0:	075f      	lsls	r7, r3, #29
 80035c2:	d59c      	bpl.n	80034fe <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035c4:	4e52      	ldr	r6, [pc, #328]	@ (8003710 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c6:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035ca:	6933      	ldr	r3, [r6, #16]
 80035cc:	f023 0307 	bic.w	r3, r3, #7
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 80035d4:	f7fd ffce 	bl	8001574 <HAL_GetTick>
 80035d8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035da:	e005      	b.n	80035e8 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035dc:	f7fd ffca 	bl	8001574 <HAL_GetTick>
 80035e0:	1bc0      	subs	r0, r0, r7
 80035e2:	4540      	cmp	r0, r8
 80035e4:	f200 808b 	bhi.w	80036fe <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e8:	6933      	ldr	r3, [r6, #16]
 80035ea:	6862      	ldr	r2, [r4, #4]
 80035ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035f0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80035f4:	d1f2      	bne.n	80035dc <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	079e      	lsls	r6, r3, #30
 80035fa:	d506      	bpl.n	800360a <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80035fc:	68e0      	ldr	r0, [r4, #12]
 80035fe:	4944      	ldr	r1, [pc, #272]	@ (8003710 <HAL_RCC_ClockConfig+0x240>)
 8003600:	698a      	ldr	r2, [r1, #24]
 8003602:	f002 020f 	and.w	r2, r2, #15
 8003606:	4282      	cmp	r2, r0
 8003608:	d869      	bhi.n	80036de <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800360a:	4940      	ldr	r1, [pc, #256]	@ (800370c <HAL_RCC_ClockConfig+0x23c>)
 800360c:	680a      	ldr	r2, [r1, #0]
 800360e:	f002 020f 	and.w	r2, r2, #15
 8003612:	42aa      	cmp	r2, r5
 8003614:	d90a      	bls.n	800362c <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	680a      	ldr	r2, [r1, #0]
 8003618:	f022 020f 	bic.w	r2, r2, #15
 800361c:	432a      	orrs	r2, r5
 800361e:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003620:	680a      	ldr	r2, [r1, #0]
 8003622:	f002 020f 	and.w	r2, r2, #15
 8003626:	42aa      	cmp	r2, r5
 8003628:	f47f af69 	bne.w	80034fe <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800362c:	0758      	lsls	r0, r3, #29
 800362e:	d50b      	bpl.n	8003648 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003630:	4937      	ldr	r1, [pc, #220]	@ (8003710 <HAL_RCC_ClockConfig+0x240>)
 8003632:	6920      	ldr	r0, [r4, #16]
 8003634:	698a      	ldr	r2, [r1, #24]
 8003636:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800363a:	4290      	cmp	r0, r2
 800363c:	d204      	bcs.n	8003648 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800363e:	698a      	ldr	r2, [r1, #24]
 8003640:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003644:	4302      	orrs	r2, r0
 8003646:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003648:	0719      	lsls	r1, r3, #28
 800364a:	d50b      	bpl.n	8003664 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800364c:	4930      	ldr	r1, [pc, #192]	@ (8003710 <HAL_RCC_ClockConfig+0x240>)
 800364e:	6960      	ldr	r0, [r4, #20]
 8003650:	69ca      	ldr	r2, [r1, #28]
 8003652:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003656:	4290      	cmp	r0, r2
 8003658:	d204      	bcs.n	8003664 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800365a:	69ca      	ldr	r2, [r1, #28]
 800365c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003660:	4302      	orrs	r2, r0
 8003662:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003664:	06da      	lsls	r2, r3, #27
 8003666:	d50b      	bpl.n	8003680 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003668:	4929      	ldr	r1, [pc, #164]	@ (8003710 <HAL_RCC_ClockConfig+0x240>)
 800366a:	69a0      	ldr	r0, [r4, #24]
 800366c:	69ca      	ldr	r2, [r1, #28]
 800366e:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8003672:	4290      	cmp	r0, r2
 8003674:	d204      	bcs.n	8003680 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003676:	69ca      	ldr	r2, [r1, #28]
 8003678:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800367c:	4302      	orrs	r2, r0
 800367e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003680:	069b      	lsls	r3, r3, #26
 8003682:	d50b      	bpl.n	800369c <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003684:	4a22      	ldr	r2, [pc, #136]	@ (8003710 <HAL_RCC_ClockConfig+0x240>)
 8003686:	69e1      	ldr	r1, [r4, #28]
 8003688:	6a13      	ldr	r3, [r2, #32]
 800368a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800368e:	4299      	cmp	r1, r3
 8003690:	d204      	bcs.n	800369c <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003692:	6a13      	ldr	r3, [r2, #32]
 8003694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003698:	430b      	orrs	r3, r1
 800369a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800369c:	f7ff fe8a 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 80036a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003710 <HAL_RCC_ClockConfig+0x240>)
 80036a2:	4603      	mov	r3, r0
 80036a4:	481b      	ldr	r0, [pc, #108]	@ (8003714 <HAL_RCC_ClockConfig+0x244>)
 80036a6:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036a8:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036aa:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 80036ae:	4d1a      	ldr	r5, [pc, #104]	@ (8003718 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036b0:	f002 020f 	and.w	r2, r2, #15
 80036b4:	4c19      	ldr	r4, [pc, #100]	@ (800371c <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036b6:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036b8:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036ba:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 80036be:	4818      	ldr	r0, [pc, #96]	@ (8003720 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036c0:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036c4:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 80036c6:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80036c8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036ca:	40d3      	lsrs	r3, r2
 80036cc:	6023      	str	r3, [r4, #0]
}
 80036ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80036d2:	f7fd beed 	b.w	80014b0 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d6:	2a00      	cmp	r2, #0
 80036d8:	f47f af60 	bne.w	800359c <HAL_RCC_ClockConfig+0xcc>
 80036dc:	e795      	b.n	800360a <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036de:	698a      	ldr	r2, [r1, #24]
 80036e0:	f022 020f 	bic.w	r2, r2, #15
 80036e4:	4302      	orrs	r2, r0
 80036e6:	618a      	str	r2, [r1, #24]
 80036e8:	e78f      	b.n	800360a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036ea:	019a      	lsls	r2, r3, #6
 80036ec:	f53f af6a 	bmi.w	80035c4 <HAL_RCC_ClockConfig+0xf4>
 80036f0:	e705      	b.n	80034fe <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80036f2:	2001      	movs	r0, #1
}
 80036f4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036f6:	0398      	lsls	r0, r3, #14
 80036f8:	f53f af64 	bmi.w	80035c4 <HAL_RCC_ClockConfig+0xf4>
 80036fc:	e6ff      	b.n	80034fe <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80036fe:	2003      	movs	r0, #3
 8003700:	e6fe      	b.n	8003500 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003702:	05db      	lsls	r3, r3, #23
 8003704:	f53f af5e 	bmi.w	80035c4 <HAL_RCC_ClockConfig+0xf4>
 8003708:	e6f9      	b.n	80034fe <HAL_RCC_ClockConfig+0x2e>
 800370a:	bf00      	nop
 800370c:	52002000 	.word	0x52002000
 8003710:	58024400 	.word	0x58024400
 8003714:	08005c9c 	.word	0x08005c9c
 8003718:	24000004 	.word	0x24000004
 800371c:	24000000 	.word	0x24000000
 8003720:	2400000c 	.word	0x2400000c

08003724 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003724:	4a18      	ldr	r2, [pc, #96]	@ (8003788 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003726:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003728:	6913      	ldr	r3, [r2, #16]
 800372a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800372e:	2b10      	cmp	r3, #16
 8003730:	d019      	beq.n	8003766 <HAL_RCC_GetHCLKFreq+0x42>
 8003732:	2b18      	cmp	r3, #24
 8003734:	d022      	beq.n	800377c <HAL_RCC_GetHCLKFreq+0x58>
 8003736:	b1c3      	cbz	r3, 800376a <HAL_RCC_GetHCLKFreq+0x46>
      sysclockfreq = CSI_VALUE;
 8003738:	4b14      	ldr	r3, [pc, #80]	@ (800378c <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800373a:	4913      	ldr	r1, [pc, #76]	@ (8003788 <HAL_RCC_GetHCLKFreq+0x64>)
 800373c:	4814      	ldr	r0, [pc, #80]	@ (8003790 <HAL_RCC_GetHCLKFreq+0x6c>)
 800373e:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003740:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003742:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003746:	4c13      	ldr	r4, [pc, #76]	@ (8003794 <HAL_RCC_GetHCLKFreq+0x70>)
 8003748:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800374c:	4d12      	ldr	r5, [pc, #72]	@ (8003798 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800374e:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003750:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003752:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003756:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800375a:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800375c:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8003760:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003762:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8003764:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003766:	4b0d      	ldr	r3, [pc, #52]	@ (800379c <HAL_RCC_GetHCLKFreq+0x78>)
 8003768:	e7e7      	b.n	800373a <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800376a:	6813      	ldr	r3, [r2, #0]
 800376c:	069b      	lsls	r3, r3, #26
 800376e:	d509      	bpl.n	8003784 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	4b0b      	ldr	r3, [pc, #44]	@ (80037a0 <HAL_RCC_GetHCLKFreq+0x7c>)
 8003774:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003778:	40d3      	lsrs	r3, r2
 800377a:	e7de      	b.n	800373a <HAL_RCC_GetHCLKFreq+0x16>
 800377c:	f7ff fab6 	bl	8002cec <HAL_RCC_GetSysClockFreq.part.0>
 8003780:	4603      	mov	r3, r0
 8003782:	e7da      	b.n	800373a <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003784:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <HAL_RCC_GetHCLKFreq+0x7c>)
 8003786:	e7d8      	b.n	800373a <HAL_RCC_GetHCLKFreq+0x16>
 8003788:	58024400 	.word	0x58024400
 800378c:	003d0900 	.word	0x003d0900
 8003790:	08005c9c 	.word	0x08005c9c
 8003794:	24000000 	.word	0x24000000
 8003798:	24000004 	.word	0x24000004
 800379c:	007a1200 	.word	0x007a1200
 80037a0:	03d09000 	.word	0x03d09000

080037a4 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003818 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037a8:	6913      	ldr	r3, [r2, #16]
 80037aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037ae:	2b10      	cmp	r3, #16
 80037b0:	d020      	beq.n	80037f4 <HAL_RCC_GetPCLK1Freq+0x50>
 80037b2:	2b18      	cmp	r3, #24
 80037b4:	d029      	beq.n	800380a <HAL_RCC_GetPCLK1Freq+0x66>
 80037b6:	b1fb      	cbz	r3, 80037f8 <HAL_RCC_GetPCLK1Freq+0x54>
      sysclockfreq = CSI_VALUE;
 80037b8:	4b18      	ldr	r3, [pc, #96]	@ (800381c <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80037ba:	4a17      	ldr	r2, [pc, #92]	@ (8003818 <HAL_RCC_GetPCLK1Freq+0x74>)
 80037bc:	4918      	ldr	r1, [pc, #96]	@ (8003820 <HAL_RCC_GetPCLK1Freq+0x7c>)
 80037be:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 80037c0:	4d18      	ldr	r5, [pc, #96]	@ (8003824 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80037c2:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037c6:	4c18      	ldr	r4, [pc, #96]	@ (8003828 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80037c8:	5c08      	ldrb	r0, [r1, r0]
 80037ca:	f000 001f 	and.w	r0, r0, #31
 80037ce:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037d0:	6990      	ldr	r0, [r2, #24]
 80037d2:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 80037d6:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037d8:	5c08      	ldrb	r0, [r1, r0]
 80037da:	f000 001f 	and.w	r0, r0, #31
 80037de:	40c3      	lsrs	r3, r0
 80037e0:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80037e2:	69d2      	ldr	r2, [r2, #28]
 80037e4:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80037e8:	5c88      	ldrb	r0, [r1, r2]
 80037ea:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80037ee:	fa23 f000 	lsr.w	r0, r3, r0
 80037f2:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037f4:	4b0d      	ldr	r3, [pc, #52]	@ (800382c <HAL_RCC_GetPCLK1Freq+0x88>)
 80037f6:	e7e0      	b.n	80037ba <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037f8:	6813      	ldr	r3, [r2, #0]
 80037fa:	069b      	lsls	r3, r3, #26
 80037fc:	d509      	bpl.n	8003812 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	4b0b      	ldr	r3, [pc, #44]	@ (8003830 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8003802:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003806:	40d3      	lsrs	r3, r2
 8003808:	e7d7      	b.n	80037ba <HAL_RCC_GetPCLK1Freq+0x16>
 800380a:	f7ff fa6f 	bl	8002cec <HAL_RCC_GetSysClockFreq.part.0>
 800380e:	4603      	mov	r3, r0
 8003810:	e7d3      	b.n	80037ba <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003812:	4b07      	ldr	r3, [pc, #28]	@ (8003830 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8003814:	e7d1      	b.n	80037ba <HAL_RCC_GetPCLK1Freq+0x16>
 8003816:	bf00      	nop
 8003818:	58024400 	.word	0x58024400
 800381c:	003d0900 	.word	0x003d0900
 8003820:	08005c9c 	.word	0x08005c9c
 8003824:	24000004 	.word	0x24000004
 8003828:	24000000 	.word	0x24000000
 800382c:	007a1200 	.word	0x007a1200
 8003830:	03d09000 	.word	0x03d09000

08003834 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003834:	4a1c      	ldr	r2, [pc, #112]	@ (80038a8 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003836:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003838:	6913      	ldr	r3, [r2, #16]
 800383a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800383e:	2b10      	cmp	r3, #16
 8003840:	d020      	beq.n	8003884 <HAL_RCC_GetPCLK2Freq+0x50>
 8003842:	2b18      	cmp	r3, #24
 8003844:	d029      	beq.n	800389a <HAL_RCC_GetPCLK2Freq+0x66>
 8003846:	b1fb      	cbz	r3, 8003888 <HAL_RCC_GetPCLK2Freq+0x54>
      sysclockfreq = CSI_VALUE;
 8003848:	4b18      	ldr	r3, [pc, #96]	@ (80038ac <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800384a:	4a17      	ldr	r2, [pc, #92]	@ (80038a8 <HAL_RCC_GetPCLK2Freq+0x74>)
 800384c:	4918      	ldr	r1, [pc, #96]	@ (80038b0 <HAL_RCC_GetPCLK2Freq+0x7c>)
 800384e:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8003850:	4d18      	ldr	r5, [pc, #96]	@ (80038b4 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003852:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003856:	4c18      	ldr	r4, [pc, #96]	@ (80038b8 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003858:	5c08      	ldrb	r0, [r1, r0]
 800385a:	f000 001f 	and.w	r0, r0, #31
 800385e:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003860:	6990      	ldr	r0, [r2, #24]
 8003862:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8003866:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003868:	5c08      	ldrb	r0, [r1, r0]
 800386a:	f000 001f 	and.w	r0, r0, #31
 800386e:	40c3      	lsrs	r3, r0
 8003870:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003872:	69d2      	ldr	r2, [r2, #28]
 8003874:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8003878:	5c88      	ldrb	r0, [r1, r2]
 800387a:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800387e:	fa23 f000 	lsr.w	r0, r3, r0
 8003882:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003884:	4b0d      	ldr	r3, [pc, #52]	@ (80038bc <HAL_RCC_GetPCLK2Freq+0x88>)
 8003886:	e7e0      	b.n	800384a <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003888:	6813      	ldr	r3, [r2, #0]
 800388a:	069b      	lsls	r3, r3, #26
 800388c:	d509      	bpl.n	80038a2 <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800388e:	6812      	ldr	r2, [r2, #0]
 8003890:	4b0b      	ldr	r3, [pc, #44]	@ (80038c0 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8003892:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003896:	40d3      	lsrs	r3, r2
 8003898:	e7d7      	b.n	800384a <HAL_RCC_GetPCLK2Freq+0x16>
 800389a:	f7ff fa27 	bl	8002cec <HAL_RCC_GetSysClockFreq.part.0>
 800389e:	4603      	mov	r3, r0
 80038a0:	e7d3      	b.n	800384a <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80038a2:	4b07      	ldr	r3, [pc, #28]	@ (80038c0 <HAL_RCC_GetPCLK2Freq+0x8c>)
 80038a4:	e7d1      	b.n	800384a <HAL_RCC_GetPCLK2Freq+0x16>
 80038a6:	bf00      	nop
 80038a8:	58024400 	.word	0x58024400
 80038ac:	003d0900 	.word	0x003d0900
 80038b0:	08005c9c 	.word	0x08005c9c
 80038b4:	24000004 	.word	0x24000004
 80038b8:	24000000 	.word	0x24000000
 80038bc:	007a1200 	.word	0x007a1200
 80038c0:	03d09000 	.word	0x03d09000

080038c4 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80038c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80038c6:	4c36      	ldr	r4, [pc, #216]	@ (80039a0 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80038c8:	4606      	mov	r6, r0
 80038ca:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038d2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d4:	f7fd fe4e 	bl	8001574 <HAL_GetTick>
 80038d8:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80038da:	e004      	b.n	80038e6 <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80038dc:	f7fd fe4a 	bl	8001574 <HAL_GetTick>
 80038e0:	1b40      	subs	r0, r0, r5
 80038e2:	2802      	cmp	r0, #2
 80038e4:	d856      	bhi.n	8003994 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	011a      	lsls	r2, r3, #4
 80038ea:	d4f7      	bmi.n	80038dc <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80038ec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80038ee:	6832      	ldr	r2, [r6, #0]
 80038f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80038f4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80038f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80038fa:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80038fe:	3b01      	subs	r3, #1
 8003900:	3a01      	subs	r2, #1
 8003902:	025b      	lsls	r3, r3, #9
 8003904:	0412      	lsls	r2, r2, #16
 8003906:	b29b      	uxth	r3, r3
 8003908:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800390c:	4313      	orrs	r3, r2
 800390e:	6872      	ldr	r2, [r6, #4]
 8003910:	3a01      	subs	r2, #1
 8003912:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003916:	4313      	orrs	r3, r2
 8003918:	6932      	ldr	r2, [r6, #16]
 800391a:	3a01      	subs	r2, #1
 800391c:	0612      	lsls	r2, r2, #24
 800391e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003922:	4313      	orrs	r3, r2
 8003924:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003926:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003928:	6972      	ldr	r2, [r6, #20]
 800392a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800392e:	4313      	orrs	r3, r2
 8003930:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003932:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003934:	69b3      	ldr	r3, [r6, #24]
 8003936:	f022 0220 	bic.w	r2, r2, #32
 800393a:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800393c:	4b19      	ldr	r3, [pc, #100]	@ (80039a4 <RCCEx_PLL2_Config.part.0+0xe0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800393e:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003940:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003942:	f022 0210 	bic.w	r2, r2, #16
 8003946:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003948:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800394a:	69f2      	ldr	r2, [r6, #28]
 800394c:	400b      	ands	r3, r1
 800394e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003952:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003954:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003956:	f043 0310 	orr.w	r3, r3, #16
 800395a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800395c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800395e:	b1df      	cbz	r7, 8003998 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003960:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003962:	bf0c      	ite	eq
 8003964:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003968:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800396c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800396e:	4c0c      	ldr	r4, [pc, #48]	@ (80039a0 <RCCEx_PLL2_Config.part.0+0xdc>)
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003976:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003978:	f7fd fdfc 	bl	8001574 <HAL_GetTick>
 800397c:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800397e:	e004      	b.n	800398a <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003980:	f7fd fdf8 	bl	8001574 <HAL_GetTick>
 8003984:	1b40      	subs	r0, r0, r5
 8003986:	2802      	cmp	r0, #2
 8003988:	d804      	bhi.n	8003994 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	d5f7      	bpl.n	8003980 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8003990:	2000      	movs	r0, #0
}
 8003992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003994:	2003      	movs	r0, #3
}
 8003996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003998:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800399c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800399e:	e7e6      	b.n	800396e <RCCEx_PLL2_Config.part.0+0xaa>
 80039a0:	58024400 	.word	0x58024400
 80039a4:	ffff0007 	.word	0xffff0007

080039a8 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80039aa:	4c36      	ldr	r4, [pc, #216]	@ (8003a84 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 80039ac:	4606      	mov	r6, r0
 80039ae:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039b6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b8:	f7fd fddc 	bl	8001574 <HAL_GetTick>
 80039bc:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80039be:	e004      	b.n	80039ca <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80039c0:	f7fd fdd8 	bl	8001574 <HAL_GetTick>
 80039c4:	1b40      	subs	r0, r0, r5
 80039c6:	2802      	cmp	r0, #2
 80039c8:	d856      	bhi.n	8003a78 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	009a      	lsls	r2, r3, #2
 80039ce:	d4f7      	bmi.n	80039c0 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80039d0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80039d2:	6832      	ldr	r2, [r6, #0]
 80039d4:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 80039d8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80039dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80039de:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	3a01      	subs	r2, #1
 80039e6:	025b      	lsls	r3, r3, #9
 80039e8:	0412      	lsls	r2, r2, #16
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80039f0:	4313      	orrs	r3, r2
 80039f2:	6872      	ldr	r2, [r6, #4]
 80039f4:	3a01      	subs	r2, #1
 80039f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039fa:	4313      	orrs	r3, r2
 80039fc:	6932      	ldr	r2, [r6, #16]
 80039fe:	3a01      	subs	r2, #1
 8003a00:	0612      	lsls	r2, r2, #24
 8003a02:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003a06:	4313      	orrs	r3, r2
 8003a08:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003a0a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003a0c:	6972      	ldr	r2, [r6, #20]
 8003a0e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003a12:	4313      	orrs	r3, r2
 8003a14:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003a16:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003a18:	69b3      	ldr	r3, [r6, #24]
 8003a1a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003a1e:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003a20:	4b19      	ldr	r3, [pc, #100]	@ (8003a88 <RCCEx_PLL3_Config.part.0+0xe0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003a22:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003a24:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003a26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a2a:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003a2c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003a2e:	69f2      	ldr	r2, [r6, #28]
 8003a30:	400b      	ands	r3, r1
 8003a32:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003a36:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003a38:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a3e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003a40:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8003a42:	b1df      	cbz	r7, 8003a7c <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003a44:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003a46:	bf0c      	ite	eq
 8003a48:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003a4c:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8003a50:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003a52:	4c0c      	ldr	r4, [pc, #48]	@ (8003a84 <RCCEx_PLL3_Config.part.0+0xdc>)
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a5a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a5c:	f7fd fd8a 	bl	8001574 <HAL_GetTick>
 8003a60:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003a62:	e004      	b.n	8003a6e <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003a64:	f7fd fd86 	bl	8001574 <HAL_GetTick>
 8003a68:	1b40      	subs	r0, r0, r5
 8003a6a:	2802      	cmp	r0, #2
 8003a6c:	d804      	bhi.n	8003a78 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	d5f7      	bpl.n	8003a64 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8003a74:	2000      	movs	r0, #0
}
 8003a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003a78:	2003      	movs	r0, #3
}
 8003a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003a7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003a82:	e7e6      	b.n	8003a52 <RCCEx_PLL3_Config.part.0+0xaa>
 8003a84:	58024400 	.word	0x58024400
 8003a88:	ffff0007 	.word	0xffff0007

08003a8c <HAL_RCCEx_PeriphCLKConfig>:
{
 8003a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a90:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8003a94:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a96:	011d      	lsls	r5, r3, #4
 8003a98:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 8003a9c:	d525      	bpl.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003a9e:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8003aa0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8003aa4:	f000 8660 	beq.w	8004768 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8003aa8:	d814      	bhi.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8003aaa:	2900      	cmp	r1, #0
 8003aac:	f000 86fa 	beq.w	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8003ab0:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8003ab4:	f040 8466 	bne.w	8004384 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ab8:	49ad      	ldr	r1, [pc, #692]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003aba:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003abc:	f001 0103 	and.w	r1, r1, #3
 8003ac0:	2903      	cmp	r1, #3
 8003ac2:	f000 845f 	beq.w	8004384 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8003ac6:	2102      	movs	r1, #2
 8003ac8:	3008      	adds	r0, #8
 8003aca:	f7ff fefb 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
 8003ace:	4606      	mov	r6, r0
        break;
 8003ad0:	f000 be56 	b.w	8004780 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003ad4:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8003ad8:	f040 8454 	bne.w	8004384 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003adc:	4da4      	ldr	r5, [pc, #656]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ade:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ae0:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8003ae2:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 8003ae6:	4301      	orrs	r1, r0
 8003ae8:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003aea:	05d8      	lsls	r0, r3, #23
 8003aec:	d50a      	bpl.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch (PeriphClkInit->Sai1ClockSelection)
 8003aee:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8003af0:	2904      	cmp	r1, #4
 8003af2:	d806      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003af4:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003af8:	064c04a8 	.word	0x064c04a8
 8003afc:	04ad0661 	.word	0x04ad0661
 8003b00:	04ad      	.short	0x04ad
 8003b02:	2601      	movs	r6, #1
 8003b04:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003b06:	0599      	lsls	r1, r3, #22
 8003b08:	d524      	bpl.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch (PeriphClkInit->Sai23ClockSelection)
 8003b0a:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8003b0c:	2980      	cmp	r1, #128	@ 0x80
 8003b0e:	f000 8664 	beq.w	80047da <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003b12:	f200 8122 	bhi.w	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003b16:	2900      	cmp	r1, #0
 8003b18:	f000 84ac 	beq.w	8004474 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8003b1c:	2940      	cmp	r1, #64	@ 0x40
 8003b1e:	f040 8123 	bne.w	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b22:	4993      	ldr	r1, [pc, #588]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b24:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003b26:	f001 0103 	and.w	r1, r1, #3
 8003b2a:	2903      	cmp	r1, #3
 8003b2c:	f000 811c 	beq.w	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8003b30:	2100      	movs	r1, #0
 8003b32:	f104 0008 	add.w	r0, r4, #8
 8003b36:	f7ff fec5 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
 8003b3a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b3c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003b40:	2d00      	cmp	r5, #0
 8003b42:	f040 851b 	bne.w	800457c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003b46:	4f8a      	ldr	r7, [pc, #552]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b48:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8003b4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003b4c:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8003b50:	4301      	orrs	r1, r0
 8003b52:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b54:	055f      	lsls	r7, r3, #21
 8003b56:	d528      	bpl.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4AClockSelection)
 8003b58:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8003b5c:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8003b60:	f000 864f 	beq.w	8004802 <HAL_RCCEx_PeriphCLKConfig+0xd76>
 8003b64:	f200 8106 	bhi.w	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003b68:	2900      	cmp	r1, #0
 8003b6a:	f000 8463 	beq.w	8004434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8003b6e:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8003b72:	f040 8107 	bne.w	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b76:	497e      	ldr	r1, [pc, #504]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b78:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003b7a:	f001 0103 	and.w	r1, r1, #3
 8003b7e:	2903      	cmp	r1, #3
 8003b80:	f000 8100 	beq.w	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8003b84:	2100      	movs	r1, #0
 8003b86:	f104 0008 	add.w	r0, r4, #8
 8003b8a:	f7ff fe9b 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
 8003b8e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b90:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003b94:	2d00      	cmp	r5, #0
 8003b96:	f040 84f4 	bne.w	8004582 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b9a:	4f75      	ldr	r7, [pc, #468]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b9c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8003ba0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003ba2:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 8003ba6:	4301      	orrs	r1, r0
 8003ba8:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003baa:	0518      	lsls	r0, r3, #20
 8003bac:	d528      	bpl.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch (PeriphClkInit->Sai4BClockSelection)
 8003bae:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8003bb2:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8003bb6:	f000 85ac 	beq.w	8004712 <HAL_RCCEx_PeriphCLKConfig+0xc86>
 8003bba:	f200 80e6 	bhi.w	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003bbe:	2900      	cmp	r1, #0
 8003bc0:	f000 8425 	beq.w	800440e <HAL_RCCEx_PeriphCLKConfig+0x982>
 8003bc4:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8003bc8:	f040 80e7 	bne.w	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003bcc:	4968      	ldr	r1, [pc, #416]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003bce:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003bd0:	f001 0103 	and.w	r1, r1, #3
 8003bd4:	2903      	cmp	r1, #3
 8003bd6:	f000 80e0 	beq.w	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8003bda:	2100      	movs	r1, #0
 8003bdc:	f104 0008 	add.w	r0, r4, #8
 8003be0:	f7ff fe70 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
 8003be4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003be6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003bea:	2d00      	cmp	r5, #0
 8003bec:	f040 84cc 	bne.w	8004588 <HAL_RCCEx_PeriphCLKConfig+0xafc>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003bf0:	4f5f      	ldr	r7, [pc, #380]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003bf2:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8003bf6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003bf8:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 8003bfc:	4301      	orrs	r1, r0
 8003bfe:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c00:	0199      	lsls	r1, r3, #6
 8003c02:	d518      	bpl.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch (PeriphClkInit->QspiClockSelection)
 8003c04:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8003c06:	2920      	cmp	r1, #32
 8003c08:	f000 84ff 	beq.w	800460a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
 8003c0c:	f200 80c8 	bhi.w	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003c10:	b139      	cbz	r1, 8003c22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003c12:	2910      	cmp	r1, #16
 8003c14:	f040 80c7 	bne.w	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c18:	4855      	ldr	r0, [pc, #340]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c1a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003c1c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003c20:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003c22:	2d00      	cmp	r5, #0
 8003c24:	f040 849f 	bne.w	8004566 <HAL_RCCEx_PeriphCLKConfig+0xada>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c28:	4f51      	ldr	r7, [pc, #324]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c2a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003c2c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003c2e:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8003c32:	4301      	orrs	r1, r0
 8003c34:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c36:	04df      	lsls	r7, r3, #19
 8003c38:	d526      	bpl.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    switch (PeriphClkInit->Spi123ClockSelection)
 8003c3a:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8003c3c:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8003c40:	f000 857b 	beq.w	800473a <HAL_RCCEx_PeriphCLKConfig+0xcae>
 8003c44:	f200 80b2 	bhi.w	8003dac <HAL_RCCEx_PeriphCLKConfig+0x320>
 8003c48:	2900      	cmp	r1, #0
 8003c4a:	f000 83ea 	beq.w	8004422 <HAL_RCCEx_PeriphCLKConfig+0x996>
 8003c4e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8003c52:	f040 80b3 	bne.w	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x330>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c56:	4946      	ldr	r1, [pc, #280]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c58:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003c5a:	f001 0103 	and.w	r1, r1, #3
 8003c5e:	2903      	cmp	r1, #3
 8003c60:	f000 80ac 	beq.w	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003c64:	2100      	movs	r1, #0
 8003c66:	f104 0008 	add.w	r0, r4, #8
 8003c6a:	f7ff fe2b 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
 8003c6e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c70:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003c74:	2d00      	cmp	r5, #0
 8003c76:	f040 848a 	bne.w	800458e <HAL_RCCEx_PeriphCLKConfig+0xb02>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c7a:	4f3d      	ldr	r7, [pc, #244]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c7c:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8003c7e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003c80:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8003c84:	4301      	orrs	r1, r0
 8003c86:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c88:	0498      	lsls	r0, r3, #18
 8003c8a:	d524      	bpl.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->Spi45ClockSelection)
 8003c8c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8003c8e:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8003c92:	f000 8516 	beq.w	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8003c96:	f200 8094 	bhi.w	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003c9a:	b191      	cbz	r1, 8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8003c9c:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8003ca0:	f040 8099 	bne.w	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ca4:	4932      	ldr	r1, [pc, #200]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ca6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003ca8:	f001 0103 	and.w	r1, r1, #3
 8003cac:	2903      	cmp	r1, #3
 8003cae:	f000 8092 	beq.w	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	f104 0008 	add.w	r0, r4, #8
 8003cb8:	f7ff fe04 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
 8003cbc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003cbe:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003cc2:	2d00      	cmp	r5, #0
 8003cc4:	f040 8476 	bne.w	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003cc8:	4f29      	ldr	r7, [pc, #164]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003cca:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8003ccc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003cce:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8003cd2:	4301      	orrs	r1, r0
 8003cd4:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003cd6:	0459      	lsls	r1, r3, #17
 8003cd8:	d523      	bpl.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch (PeriphClkInit->Spi6ClockSelection)
 8003cda:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8003cde:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8003ce2:	f000 8502 	beq.w	80046ea <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 8003ce6:	d879      	bhi.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003ce8:	b181      	cbz	r1, 8003d0c <HAL_RCCEx_PeriphCLKConfig+0x280>
 8003cea:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8003cee:	d17d      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x360>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cf0:	491f      	ldr	r1, [pc, #124]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003cf2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003cf4:	f001 0103 	and.w	r1, r1, #3
 8003cf8:	2903      	cmp	r1, #3
 8003cfa:	d077      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	f104 0008 	add.w	r0, r4, #8
 8003d02:	f7ff fddf 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
 8003d06:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d08:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003d0c:	2d00      	cmp	r5, #0
 8003d0e:	f040 8454 	bne.w	80045ba <HAL_RCCEx_PeriphCLKConfig+0xb2e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d12:	4f17      	ldr	r7, [pc, #92]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d14:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8003d18:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003d1a:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8003d1e:	4301      	orrs	r1, r0
 8003d20:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d22:	041f      	lsls	r7, r3, #16
 8003d24:	d50d      	bpl.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch (PeriphClkInit->FdcanClockSelection)
 8003d26:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8003d28:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8003d2c:	f000 82e2 	beq.w	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x868>
 8003d30:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8003d34:	f000 83f0 	beq.w	8004518 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
 8003d38:	2900      	cmp	r1, #0
 8003d3a:	f000 82e0 	beq.w	80042fe <HAL_RCCEx_PeriphCLKConfig+0x872>
 8003d3e:	2601      	movs	r6, #1
 8003d40:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d42:	01d8      	lsls	r0, r3, #7
 8003d44:	d55e      	bpl.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x378>
    switch (PeriphClkInit->FmcClockSelection)
 8003d46:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003d48:	2903      	cmp	r1, #3
 8003d4a:	f200 85cd 	bhi.w	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003d4e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003d52:	0055      	.short	0x0055
 8003d54:	04930050 	.word	0x04930050
 8003d58:	0055      	.short	0x0055
    switch (PeriphClkInit->Sai23ClockSelection)
 8003d5a:	29c0      	cmp	r1, #192	@ 0xc0
 8003d5c:	f43f aef0 	beq.w	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003d60:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8003d64:	f43f aeec 	beq.w	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003d68:	2601      	movs	r6, #1
 8003d6a:	4635      	mov	r5, r6
 8003d6c:	e6f2      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8003d6e:	bf00      	nop
 8003d70:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Sai4AClockSelection)
 8003d74:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 8003d78:	f43f af0c 	beq.w	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003d7c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8003d80:	f43f af08 	beq.w	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003d84:	2601      	movs	r6, #1
 8003d86:	4635      	mov	r5, r6
 8003d88:	e70f      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4BClockSelection)
 8003d8a:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8003d8e:	f43f af2c 	beq.w	8003bea <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003d92:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8003d96:	f43f af28 	beq.w	8003bea <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003d9a:	2601      	movs	r6, #1
 8003d9c:	4635      	mov	r5, r6
 8003d9e:	e72f      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch (PeriphClkInit->QspiClockSelection)
 8003da0:	2930      	cmp	r1, #48	@ 0x30
 8003da2:	f43f af3e 	beq.w	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003da6:	2601      	movs	r6, #1
 8003da8:	4635      	mov	r5, r6
 8003daa:	e744      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch (PeriphClkInit->Spi123ClockSelection)
 8003dac:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8003db0:	f43f af60 	beq.w	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003db4:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8003db8:	f43f af5c 	beq.w	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003dbc:	2601      	movs	r6, #1
 8003dbe:	4635      	mov	r5, r6
 8003dc0:	e762      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    switch (PeriphClkInit->Spi45ClockSelection)
 8003dc2:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8003dc6:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8003dca:	f43f af7a 	beq.w	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8003dce:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8003dd2:	f43f af76 	beq.w	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8003dd6:	2601      	movs	r6, #1
 8003dd8:	4635      	mov	r5, r6
 8003dda:	e77c      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ddc:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8003de0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003de4:	d092      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x280>
 8003de6:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8003dea:	d08f      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x280>
 8003dec:	2601      	movs	r6, #1
 8003dee:	4635      	mov	r5, r6
 8003df0:	e797      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x296>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003df2:	4837      	ldr	r0, [pc, #220]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003df4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003df6:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003dfa:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003dfc:	2d00      	cmp	r5, #0
 8003dfe:	f000 83b5 	beq.w	800456c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003e02:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e04:	0259      	lsls	r1, r3, #9
 8003e06:	f100 82c0 	bmi.w	800438a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e0a:	07df      	lsls	r7, r3, #31
 8003e0c:	d52f      	bpl.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e0e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8003e10:	2928      	cmp	r1, #40	@ 0x28
 8003e12:	d82a      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003e14:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003e18:	002902ab 	.word	0x002902ab
 8003e1c:	00290029 	.word	0x00290029
 8003e20:	00290029 	.word	0x00290029
 8003e24:	00290029 	.word	0x00290029
 8003e28:	0029029c 	.word	0x0029029c
 8003e2c:	00290029 	.word	0x00290029
 8003e30:	00290029 	.word	0x00290029
 8003e34:	00290029 	.word	0x00290029
 8003e38:	0029052d 	.word	0x0029052d
 8003e3c:	00290029 	.word	0x00290029
 8003e40:	00290029 	.word	0x00290029
 8003e44:	00290029 	.word	0x00290029
 8003e48:	002902ab 	.word	0x002902ab
 8003e4c:	00290029 	.word	0x00290029
 8003e50:	00290029 	.word	0x00290029
 8003e54:	00290029 	.word	0x00290029
 8003e58:	002902ab 	.word	0x002902ab
 8003e5c:	00290029 	.word	0x00290029
 8003e60:	00290029 	.word	0x00290029
 8003e64:	00290029 	.word	0x00290029
 8003e68:	02ab      	.short	0x02ab
 8003e6a:	2601      	movs	r6, #1
 8003e6c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e6e:	0798      	lsls	r0, r3, #30
 8003e70:	d51e      	bpl.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003e72:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8003e74:	2905      	cmp	r1, #5
 8003e76:	f200 851c 	bhi.w	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8003e7a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003e7e:	0015      	.short	0x0015
 8003e80:	04e80006 	.word	0x04e80006
 8003e84:	00150015 	.word	0x00150015
 8003e88:	0015      	.short	0x0015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e8a:	4911      	ldr	r1, [pc, #68]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003e8c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003e8e:	f001 0103 	and.w	r1, r1, #3
 8003e92:	2903      	cmp	r1, #3
 8003e94:	f000 850d 	beq.w	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8003e98:	2101      	movs	r1, #1
 8003e9a:	f104 0008 	add.w	r0, r4, #8
 8003e9e:	f7ff fd11 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
 8003ea2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ea4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003ea8:	2d00      	cmp	r5, #0
 8003eaa:	f000 837b 	beq.w	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
 8003eae:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eb0:	0759      	lsls	r1, r3, #29
 8003eb2:	d522      	bpl.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x46e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003eb4:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8003eb8:	2905      	cmp	r1, #5
 8003eba:	f200 84fe 	bhi.w	80048ba <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8003ebe:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003ec2:	0018      	.short	0x0018
 8003ec4:	04b40009 	.word	0x04b40009
 8003ec8:	00180018 	.word	0x00180018
 8003ecc:	0018      	.short	0x0018
 8003ece:	bf00      	nop
 8003ed0:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ed4:	49b0      	ldr	r1, [pc, #704]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003ed6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003ed8:	f001 0103 	and.w	r1, r1, #3
 8003edc:	2903      	cmp	r1, #3
 8003ede:	f000 84ec 	beq.w	80048ba <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	f104 0008 	add.w	r0, r4, #8
 8003ee8:	f7ff fcec 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
 8003eec:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003eee:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003ef2:	2d00      	cmp	r5, #0
 8003ef4:	f000 8364 	beq.w	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 8003ef8:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003efa:	069f      	lsls	r7, r3, #26
 8003efc:	d526      	bpl.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003efe:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8003f02:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8003f06:	f000 836e 	beq.w	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 8003f0a:	f200 8194 	bhi.w	8004236 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003f0e:	b191      	cbz	r1, 8003f36 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003f10:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8003f14:	f040 8199 	bne.w	800424a <HAL_RCCEx_PeriphCLKConfig+0x7be>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f18:	499f      	ldr	r1, [pc, #636]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003f1a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003f1c:	f001 0103 	and.w	r1, r1, #3
 8003f20:	2903      	cmp	r1, #3
 8003f22:	f000 8192 	beq.w	800424a <HAL_RCCEx_PeriphCLKConfig+0x7be>
 8003f26:	2100      	movs	r1, #0
 8003f28:	f104 0008 	add.w	r0, r4, #8
 8003f2c:	f7ff fcca 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
 8003f30:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f32:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003f36:	2d00      	cmp	r5, #0
 8003f38:	f040 834b 	bne.w	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f3c:	4f96      	ldr	r7, [pc, #600]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003f3e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8003f42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f44:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8003f48:	4301      	orrs	r1, r0
 8003f4a:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f4c:	0658      	lsls	r0, r3, #25
 8003f4e:	d526      	bpl.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x512>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f50:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8003f54:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8003f58:	f000 83a1 	beq.w	800469e <HAL_RCCEx_PeriphCLKConfig+0xc12>
 8003f5c:	f200 8178 	bhi.w	8004250 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 8003f60:	b191      	cbz	r1, 8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8003f62:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003f66:	f040 817d 	bne.w	8004264 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f6a:	498b      	ldr	r1, [pc, #556]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003f6c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003f6e:	f001 0103 	and.w	r1, r1, #3
 8003f72:	2903      	cmp	r1, #3
 8003f74:	f000 8176 	beq.w	8004264 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 8003f78:	2100      	movs	r1, #0
 8003f7a:	f104 0008 	add.w	r0, r4, #8
 8003f7e:	f7ff fca1 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
 8003f82:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f84:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003f88:	2d00      	cmp	r5, #0
 8003f8a:	f040 8328 	bne.w	80045de <HAL_RCCEx_PeriphCLKConfig+0xb52>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f8e:	4f82      	ldr	r7, [pc, #520]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003f90:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 8003f94:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003f96:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 8003f9a:	4301      	orrs	r1, r0
 8003f9c:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f9e:	0619      	lsls	r1, r3, #24
 8003fa0:	d526      	bpl.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003fa2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8003fa6:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8003faa:	f000 8353 	beq.w	8004654 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
 8003fae:	f200 815c 	bhi.w	800426a <HAL_RCCEx_PeriphCLKConfig+0x7de>
 8003fb2:	b191      	cbz	r1, 8003fda <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8003fb4:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8003fb8:	f040 8161 	bne.w	800427e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fbc:	4976      	ldr	r1, [pc, #472]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003fbe:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003fc0:	f001 0103 	and.w	r1, r1, #3
 8003fc4:	2903      	cmp	r1, #3
 8003fc6:	f000 815a 	beq.w	800427e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8003fca:	2100      	movs	r1, #0
 8003fcc:	f104 0008 	add.w	r0, r4, #8
 8003fd0:	f7ff fc78 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
 8003fd4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003fd6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003fda:	2d00      	cmp	r5, #0
 8003fdc:	f040 82fb 	bne.w	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003fe0:	4f6d      	ldr	r7, [pc, #436]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003fe2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8003fe6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003fe8:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8003fec:	4301      	orrs	r1, r0
 8003fee:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003ff0:	071f      	lsls	r7, r3, #28
 8003ff2:	d50b      	bpl.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x580>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003ff4:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8003ff8:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8003ffc:	f000 8250 	beq.w	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004000:	4f65      	ldr	r7, [pc, #404]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004002:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004004:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8004008:	4301      	orrs	r1, r0
 800400a:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800400c:	06d8      	lsls	r0, r3, #27
 800400e:	d50b      	bpl.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004010:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8004014:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8004018:	f000 8257 	beq.w	80044ca <HAL_RCCEx_PeriphCLKConfig+0xa3e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800401c:	4f5e      	ldr	r7, [pc, #376]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800401e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004020:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8004024:	4301      	orrs	r1, r0
 8004026:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004028:	0319      	lsls	r1, r3, #12
 800402a:	d50e      	bpl.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    switch (PeriphClkInit->AdcClockSelection)
 800402c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8004030:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8004034:	f000 816e 	beq.w	8004314 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8004038:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800403c:	f000 8179 	beq.w	8004332 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8004040:	2900      	cmp	r1, #0
 8004042:	f000 827a 	beq.w	800453a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004046:	2601      	movs	r6, #1
 8004048:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800404a:	035f      	lsls	r7, r3, #13
 800404c:	d50f      	bpl.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x5e2>
    switch (PeriphClkInit->UsbClockSelection)
 800404e:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8004052:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8004056:	f000 82eb 	beq.w	8004630 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800405a:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 800405e:	f000 813d 	beq.w	80042dc <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004062:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8004066:	f000 8134 	beq.w	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800406a:	2601      	movs	r6, #1
 800406c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800406e:	03d8      	lsls	r0, r3, #15
 8004070:	d520      	bpl.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x628>
    switch (PeriphClkInit->SdmmcClockSelection)
 8004072:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8004074:	2900      	cmp	r1, #0
 8004076:	f000 8245 	beq.w	8004504 <HAL_RCCEx_PeriphCLKConfig+0xa78>
 800407a:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800407e:	f040 8125 	bne.w	80042cc <HAL_RCCEx_PeriphCLKConfig+0x840>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004082:	4945      	ldr	r1, [pc, #276]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004084:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004086:	f001 0103 	and.w	r1, r1, #3
 800408a:	2903      	cmp	r1, #3
 800408c:	f000 811e 	beq.w	80042cc <HAL_RCCEx_PeriphCLKConfig+0x840>
 8004090:	2102      	movs	r1, #2
 8004092:	f104 0008 	add.w	r0, r4, #8
 8004096:	f7ff fc15 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
 800409a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800409c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80040a0:	2d00      	cmp	r5, #0
 80040a2:	f040 8237 	bne.w	8004514 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80040a6:	4f3c      	ldr	r7, [pc, #240]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80040a8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80040aa:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80040ac:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80040b0:	4301      	orrs	r1, r0
 80040b2:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040b4:	0099      	lsls	r1, r3, #2
 80040b6:	d50e      	bpl.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x64a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040b8:	4937      	ldr	r1, [pc, #220]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80040ba:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80040bc:	f001 0103 	and.w	r1, r1, #3
 80040c0:	2903      	cmp	r1, #3
 80040c2:	d007      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80040c4:	2102      	movs	r1, #2
 80040c6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80040ca:	f7ff fc6d 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040ce:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040d2:	b100      	cbz	r0, 80040d6 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      status = HAL_ERROR;
 80040d4:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040d6:	039f      	lsls	r7, r3, #14
 80040d8:	f140 80e0 	bpl.w	800429c <HAL_RCCEx_PeriphCLKConfig+0x810>
    switch (PeriphClkInit->RngClockSelection)
 80040dc:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 80040e0:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80040e4:	f000 8205 	beq.w	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 80040e8:	f240 80cc 	bls.w	8004284 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
 80040ec:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 80040f0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80040f4:	f000 80c9 	beq.w	800428a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80040f8:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040fa:	02d8      	lsls	r0, r3, #11
 80040fc:	d506      	bpl.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x680>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040fe:	4826      	ldr	r0, [pc, #152]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004100:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 8004102:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8004104:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004108:	4331      	orrs	r1, r6
 800410a:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800410c:	00d9      	lsls	r1, r3, #3
 800410e:	d507      	bpl.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x694>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004110:	4821      	ldr	r0, [pc, #132]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004112:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 8004116:	6901      	ldr	r1, [r0, #16]
 8004118:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800411c:	4331      	orrs	r1, r6
 800411e:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004120:	029f      	lsls	r7, r3, #10
 8004122:	d506      	bpl.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004124:	481c      	ldr	r0, [pc, #112]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004126:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 8004128:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800412a:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800412e:	4331      	orrs	r1, r6
 8004130:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004132:	005e      	lsls	r6, r3, #1
 8004134:	d509      	bpl.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x6be>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004136:	4918      	ldr	r1, [pc, #96]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004138:	6908      	ldr	r0, [r1, #16]
 800413a:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800413e:	6108      	str	r0, [r1, #16]
 8004140:	6908      	ldr	r0, [r1, #16]
 8004142:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 8004146:	4330      	orrs	r0, r6
 8004148:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800414a:	2b00      	cmp	r3, #0
 800414c:	da06      	bge.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800414e:	4812      	ldr	r0, [pc, #72]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004150:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 8004152:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8004154:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8004158:	4331      	orrs	r1, r6
 800415a:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800415c:	0218      	lsls	r0, r3, #8
 800415e:	d507      	bpl.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004160:	490d      	ldr	r1, [pc, #52]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004162:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8004166:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8004168:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800416c:	4303      	orrs	r3, r0
 800416e:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004170:	07d1      	lsls	r1, r2, #31
 8004172:	d513      	bpl.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x710>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004174:	4b08      	ldr	r3, [pc, #32]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	2b03      	cmp	r3, #3
 800417e:	f000 818d 	beq.w	800449c <HAL_RCCEx_PeriphCLKConfig+0xa10>
 8004182:	2100      	movs	r1, #0
 8004184:	f104 0008 	add.w	r0, r4, #8
 8004188:	f7ff fb9c 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800418c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800418e:	2800      	cmp	r0, #0
 8004190:	f040 8204 	bne.w	800459c <HAL_RCCEx_PeriphCLKConfig+0xb10>
 8004194:	e002      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x710>
 8004196:	bf00      	nop
 8004198:	58024400 	.word	0x58024400
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800419c:	0793      	lsls	r3, r2, #30
 800419e:	d50f      	bpl.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x734>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041a0:	4bb2      	ldr	r3, [pc, #712]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80041a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	f000 816c 	beq.w	8004486 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80041ae:	2101      	movs	r1, #1
 80041b0:	f104 0008 	add.w	r0, r4, #8
 80041b4:	f7ff fb86 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80041b8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80041ba:	2800      	cmp	r0, #0
 80041bc:	f040 81f0 	bne.w	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80041c0:	0757      	lsls	r7, r2, #29
 80041c2:	d50f      	bpl.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x758>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041c4:	4ba9      	ldr	r3, [pc, #676]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80041c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	f000 815c 	beq.w	800448a <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 80041d2:	2102      	movs	r1, #2
 80041d4:	f104 0008 	add.w	r0, r4, #8
 80041d8:	f7ff fb74 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80041dc:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80041de:	2800      	cmp	r0, #0
 80041e0:	f040 81d8 	bne.w	8004594 <HAL_RCCEx_PeriphCLKConfig+0xb08>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80041e4:	0716      	lsls	r6, r2, #28
 80041e6:	d50f      	bpl.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041e8:	4ba0      	ldr	r3, [pc, #640]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80041ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ec:	f003 0303 	and.w	r3, r3, #3
 80041f0:	2b03      	cmp	r3, #3
 80041f2:	f000 814c 	beq.w	800448e <HAL_RCCEx_PeriphCLKConfig+0xa02>
 80041f6:	2100      	movs	r1, #0
 80041f8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80041fc:	f7ff fbd4 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004200:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004202:	2800      	cmp	r0, #0
 8004204:	f040 81c8 	bne.w	8004598 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004208:	06d0      	lsls	r0, r2, #27
 800420a:	d54a      	bpl.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x816>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800420c:	4b97      	ldr	r3, [pc, #604]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800420e:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	2b03      	cmp	r3, #3
 800421a:	f000 813a 	beq.w	8004492 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800421e:	2101      	movs	r1, #1
 8004220:	4630      	mov	r0, r6
 8004222:	f7ff fbc1 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8004226:	2800      	cmp	r0, #0
 8004228:	d03a      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800422a:	6863      	ldr	r3, [r4, #4]
 800422c:	069a      	lsls	r2, r3, #26
 800422e:	f140 808c 	bpl.w	800434a <HAL_RCCEx_PeriphCLKConfig+0x8be>
 8004232:	4605      	mov	r5, r0
 8004234:	e039      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x81e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004236:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 800423a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800423e:	f43f ae7a 	beq.w	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004242:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8004246:	f43f ae76 	beq.w	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800424a:	2601      	movs	r6, #1
 800424c:	4635      	mov	r5, r6
 800424e:	e67d      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004250:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 8004254:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8004258:	f43f ae96 	beq.w	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800425c:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 8004260:	f43f ae92 	beq.w	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8004264:	2601      	movs	r6, #1
 8004266:	4635      	mov	r5, r6
 8004268:	e699      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x512>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800426a:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 800426e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004272:	f43f aeb2 	beq.w	8003fda <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8004276:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 800427a:	f43f aeae 	beq.w	8003fda <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800427e:	2601      	movs	r6, #1
 8004280:	4635      	mov	r5, r6
 8004282:	e6b5      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch (PeriphClkInit->RngClockSelection)
 8004284:	2900      	cmp	r1, #0
 8004286:	f47f af37 	bne.w	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
    if (ret == HAL_OK)
 800428a:	2d00      	cmp	r5, #0
 800428c:	f47f af35 	bne.w	80040fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004290:	4d76      	ldr	r5, [pc, #472]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004292:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8004294:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8004298:	4301      	orrs	r1, r0
 800429a:	6569      	str	r1, [r5, #84]	@ 0x54
      status = HAL_ERROR;
 800429c:	4635      	mov	r5, r6
 800429e:	e72c      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80042a0:	6862      	ldr	r2, [r4, #4]
 80042a2:	0693      	lsls	r3, r2, #26
 80042a4:	d50d      	bpl.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x836>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042a6:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042aa:	4b70      	ldr	r3, [pc, #448]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80042ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d049      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x8be>
 80042b6:	2102      	movs	r1, #2
 80042b8:	4630      	mov	r0, r6
 80042ba:	f7ff fb75 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 80042be:	2800      	cmp	r0, #0
 80042c0:	d143      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x8be>
  if (status == HAL_OK)
 80042c2:	1e28      	subs	r0, r5, #0
 80042c4:	bf18      	it	ne
 80042c6:	2001      	movne	r0, #1
}
 80042c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042cc:	2601      	movs	r6, #1
 80042ce:	4635      	mov	r5, r6
 80042d0:	e6f0      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x628>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d2:	4866      	ldr	r0, [pc, #408]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80042d4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80042d6:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80042da:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80042dc:	2d00      	cmp	r5, #0
 80042de:	f040 8140 	bne.w	8004562 <HAL_RCCEx_PeriphCLKConfig+0xad6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042e2:	4f62      	ldr	r7, [pc, #392]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80042e4:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 80042e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042ea:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80042ee:	4301      	orrs	r1, r0
 80042f0:	6579      	str	r1, [r7, #84]	@ 0x54
 80042f2:	e6bc      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x5e2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042f4:	485d      	ldr	r0, [pc, #372]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80042f6:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80042f8:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80042fc:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80042fe:	2d00      	cmp	r5, #0
 8004300:	f040 812c 	bne.w	800455c <HAL_RCCEx_PeriphCLKConfig+0xad0>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004304:	4f59      	ldr	r7, [pc, #356]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004306:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8004308:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800430a:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 800430e:	4301      	orrs	r1, r0
 8004310:	6539      	str	r1, [r7, #80]	@ 0x50
 8004312:	e516      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004314:	4955      	ldr	r1, [pc, #340]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004316:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004318:	f001 0103 	and.w	r1, r1, #3
 800431c:	2903      	cmp	r1, #3
 800431e:	f43f ae92 	beq.w	8004046 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8004322:	2102      	movs	r1, #2
 8004324:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004328:	f7ff fb3e 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
 800432c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800432e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004332:	2d00      	cmp	r5, #0
 8004334:	f040 8151 	bne.w	80045da <HAL_RCCEx_PeriphCLKConfig+0xb4e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004338:	4f4c      	ldr	r7, [pc, #304]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 800433a:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 800433e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004340:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8004344:	4301      	orrs	r1, r0
 8004346:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004348:	e67f      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  return HAL_ERROR;
 800434a:	2001      	movs	r0, #1
}
 800434c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004350:	4946      	ldr	r1, [pc, #280]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004352:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004354:	f001 0103 	and.w	r1, r1, #3
 8004358:	2903      	cmp	r1, #3
 800435a:	f43f ad86 	beq.w	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800435e:	2101      	movs	r1, #1
 8004360:	f104 0008 	add.w	r0, r4, #8
 8004364:	f7ff faae 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
 8004368:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800436a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800436e:	2d00      	cmp	r5, #0
 8004370:	f040 8137 	bne.w	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004374:	4f3d      	ldr	r7, [pc, #244]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004376:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8004378:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800437a:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 800437e:	4301      	orrs	r1, r0
 8004380:	6579      	str	r1, [r7, #84]	@ 0x54
 8004382:	e574      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004384:	2601      	movs	r6, #1
 8004386:	f7ff bbb0 	b.w	8003aea <HAL_RCCEx_PeriphCLKConfig+0x5e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800438a:	4f39      	ldr	r7, [pc, #228]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004392:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004394:	f7fd f8ee 	bl	8001574 <HAL_GetTick>
 8004398:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800439a:	e006      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x91e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800439c:	f7fd f8ea 	bl	8001574 <HAL_GetTick>
 80043a0:	eba0 0008 	sub.w	r0, r0, r8
 80043a4:	2864      	cmp	r0, #100	@ 0x64
 80043a6:	f200 8277 	bhi.w	8004898 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	05da      	lsls	r2, r3, #23
 80043ae:	d5f5      	bpl.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x910>
    if (ret == HAL_OK)
 80043b0:	2d00      	cmp	r5, #0
 80043b2:	f040 8272 	bne.w	800489a <HAL_RCCEx_PeriphCLKConfig+0xe0e>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80043b6:	4a2d      	ldr	r2, [pc, #180]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80043b8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80043bc:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80043be:	4059      	eors	r1, r3
 80043c0:	f411 7f40 	tst.w	r1, #768	@ 0x300
 80043c4:	d00b      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x952>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043c6:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80043c8:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043ca:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80043ce:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 80043d2:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043d4:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 80043d6:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 80043da:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 80043dc:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80043de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043e2:	f000 8285 	beq.w	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043e6:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80043ea:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80043ee:	f000 8293 	beq.w	8004918 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
 80043f2:	491e      	ldr	r1, [pc, #120]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80043f4:	690a      	ldr	r2, [r1, #16]
 80043f6:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 80043fa:	610a      	str	r2, [r1, #16]
 80043fc:	481b      	ldr	r0, [pc, #108]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80043fe:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8004402:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 8004404:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004406:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800440a:	6701      	str	r1, [r0, #112]	@ 0x70
 800440c:	e4fd      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x37e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800440e:	4817      	ldr	r0, [pc, #92]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004410:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004412:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004416:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004418:	2d00      	cmp	r5, #0
 800441a:	f040 80b5 	bne.w	8004588 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 800441e:	f7ff bbe7 	b.w	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x164>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004422:	4812      	ldr	r0, [pc, #72]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004424:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004426:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800442a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800442c:	2d00      	cmp	r5, #0
 800442e:	f040 80ae 	bne.w	800458e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004432:	e422      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004434:	480d      	ldr	r0, [pc, #52]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004436:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004438:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800443c:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800443e:	2d00      	cmp	r5, #0
 8004440:	f040 809f 	bne.w	8004582 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8004444:	f7ff bba9 	b.w	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004448:	4808      	ldr	r0, [pc, #32]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 800444a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800444c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004450:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8004452:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8004454:	2d00      	cmp	r5, #0
 8004456:	f040 81ad 	bne.w	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xd28>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800445a:	4f04      	ldr	r7, [pc, #16]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 800445c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800445e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004460:	f021 0107 	bic.w	r1, r1, #7
 8004464:	4301      	orrs	r1, r0
 8004466:	6539      	str	r1, [r7, #80]	@ 0x50
 8004468:	f7ff bb4d 	b.w	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800446c:	58024400 	.word	0x58024400
 8004470:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004474:	48bb      	ldr	r0, [pc, #748]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004476:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004478:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800447c:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800447e:	2d00      	cmp	r5, #0
 8004480:	d17c      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8004482:	f7ff bb60 	b.w	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xba>
    return HAL_ERROR;
 8004486:	2501      	movs	r5, #1
 8004488:	e69a      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x734>
 800448a:	2501      	movs	r5, #1
 800448c:	e6aa      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x758>
    return HAL_ERROR;
 800448e:	2501      	movs	r5, #1
 8004490:	e6ba      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004492:	0691      	lsls	r1, r2, #26
 8004494:	f57f af59 	bpl.w	800434a <HAL_RCCEx_PeriphCLKConfig+0x8be>
    return HAL_ERROR;
 8004498:	2501      	movs	r5, #1
 800449a:	e706      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x81e>
    return HAL_ERROR;
 800449c:	2501      	movs	r5, #1
 800449e:	e67d      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x710>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044a0:	49b0      	ldr	r1, [pc, #704]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 80044a2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80044a4:	f001 0103 	and.w	r1, r1, #3
 80044a8:	2903      	cmp	r1, #3
 80044aa:	f000 820a 	beq.w	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xe36>
 80044ae:	2102      	movs	r1, #2
 80044b0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80044b4:	f7ff fa78 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044b8:	2800      	cmp	r0, #0
 80044ba:	f000 820f 	beq.w	80048dc <HAL_RCCEx_PeriphCLKConfig+0xe50>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80044be:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
        status = HAL_ERROR;
 80044c2:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044c4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80044c8:	e59a      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x574>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044ca:	49a6      	ldr	r1, [pc, #664]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 80044cc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80044ce:	f001 0103 	and.w	r1, r1, #3
 80044d2:	2903      	cmp	r1, #3
 80044d4:	f000 81f8 	beq.w	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 80044d8:	2102      	movs	r1, #2
 80044da:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80044de:	f7ff fa63 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044e2:	2800      	cmp	r0, #0
 80044e4:	f040 81f3 	bne.w	80048ce <HAL_RCCEx_PeriphCLKConfig+0xe42>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044e8:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044ec:	e9d4 3200 	ldrd	r3, r2, [r4]
 80044f0:	e594      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x590>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f2:	4f9c      	ldr	r7, [pc, #624]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 80044f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044f6:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 80044fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 80044fc:	2d00      	cmp	r5, #0
 80044fe:	f47f adfc 	bne.w	80040fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004502:	e6c5      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x804>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004504:	4897      	ldr	r0, [pc, #604]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004506:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004508:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800450c:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800450e:	2d00      	cmp	r5, #0
 8004510:	f43f adc9 	beq.w	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8004514:	462e      	mov	r6, r5
 8004516:	e5cd      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x628>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004518:	4992      	ldr	r1, [pc, #584]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 800451a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800451c:	f001 0103 	and.w	r1, r1, #3
 8004520:	2903      	cmp	r1, #3
 8004522:	f43f ac0c 	beq.w	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 8004526:	2101      	movs	r1, #1
 8004528:	f104 0008 	add.w	r0, r4, #8
 800452c:	f7ff f9ca 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
 8004530:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004532:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004536:	b98d      	cbnz	r5, 800455c <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8004538:	e6e4      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x878>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800453a:	488a      	ldr	r0, [pc, #552]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 800453c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800453e:	f000 0003 	and.w	r0, r0, #3
 8004542:	2803      	cmp	r0, #3
 8004544:	f43f ad7f 	beq.w	8004046 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8004548:	f104 0008 	add.w	r0, r4, #8
 800454c:	f7ff f9ba 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
 8004550:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004552:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004556:	2d00      	cmp	r5, #0
 8004558:	d13f      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 800455a:	e6ed      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 800455c:	462e      	mov	r6, r5
 800455e:	f7ff bbf0 	b.w	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8004562:	462e      	mov	r6, r5
 8004564:	e583      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x5e2>
 8004566:	462e      	mov	r6, r5
 8004568:	f7ff bb65 	b.w	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800456c:	4f7d      	ldr	r7, [pc, #500]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 800456e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8004570:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004572:	f021 0103 	bic.w	r1, r1, #3
 8004576:	4301      	orrs	r1, r0
 8004578:	64f9      	str	r1, [r7, #76]	@ 0x4c
 800457a:	e443      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800457c:	462e      	mov	r6, r5
 800457e:	f7ff bae9 	b.w	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8004582:	462e      	mov	r6, r5
 8004584:	f7ff bb11 	b.w	8003baa <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8004588:	462e      	mov	r6, r5
 800458a:	f7ff bb39 	b.w	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800458e:	462e      	mov	r6, r5
 8004590:	f7ff bb7a 	b.w	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004594:	4605      	mov	r5, r0
 8004596:	e625      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x758>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004598:	4605      	mov	r5, r0
 800459a:	e635      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800459c:	4605      	mov	r5, r0
 800459e:	e5fd      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x710>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045a0:	4605      	mov	r5, r0
 80045a2:	e60d      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80045a4:	4f6f      	ldr	r7, [pc, #444]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 80045a6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 80045a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045aa:	f021 0107 	bic.w	r1, r1, #7
 80045ae:	4301      	orrs	r1, r0
 80045b0:	6579      	str	r1, [r7, #84]	@ 0x54
 80045b2:	e47d      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80045b4:	462e      	mov	r6, r5
 80045b6:	f7ff bb8e 	b.w	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80045ba:	462e      	mov	r6, r5
 80045bc:	f7ff bbb1 	b.w	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x296>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045c0:	4f68      	ldr	r7, [pc, #416]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 80045c2:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 80045c6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80045c8:	f021 0107 	bic.w	r1, r1, #7
 80045cc:	4301      	orrs	r1, r0
 80045ce:	65b9      	str	r1, [r7, #88]	@ 0x58
 80045d0:	e493      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x46e>
 80045d2:	462e      	mov	r6, r5
 80045d4:	e4ba      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 80045d6:	462e      	mov	r6, r5
 80045d8:	e50a      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x564>
 80045da:	462e      	mov	r6, r5
 80045dc:	e535      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80045de:	462e      	mov	r6, r5
 80045e0:	e4dd      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x512>
 80045e2:	462e      	mov	r6, r5
 80045e4:	e443      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045e6:	495f      	ldr	r1, [pc, #380]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 80045e8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80045ea:	f001 0103 	and.w	r1, r1, #3
 80045ee:	2903      	cmp	r1, #3
 80045f0:	f43f ae2b 	beq.w	800424a <HAL_RCCEx_PeriphCLKConfig+0x7be>
 80045f4:	2102      	movs	r1, #2
 80045f6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80045fa:	f7ff f9d5 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
 80045fe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004600:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004604:	2d00      	cmp	r5, #0
 8004606:	d1e4      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
 8004608:	e498      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800460a:	4956      	ldr	r1, [pc, #344]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 800460c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800460e:	f001 0103 	and.w	r1, r1, #3
 8004612:	2903      	cmp	r1, #3
 8004614:	f43f abc7 	beq.w	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8004618:	2102      	movs	r1, #2
 800461a:	f104 0008 	add.w	r0, r4, #8
 800461e:	f7ff f951 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
 8004622:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004624:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004628:	2d00      	cmp	r5, #0
 800462a:	d19c      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xada>
 800462c:	f7ff bafc 	b.w	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004630:	494c      	ldr	r1, [pc, #304]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004632:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004634:	f001 0103 	and.w	r1, r1, #3
 8004638:	2903      	cmp	r1, #3
 800463a:	f43f ad16 	beq.w	800406a <HAL_RCCEx_PeriphCLKConfig+0x5de>
 800463e:	2101      	movs	r1, #1
 8004640:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004644:	f7ff f9b0 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
 8004648:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800464a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800464e:	2d00      	cmp	r5, #0
 8004650:	d187      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8004652:	e646      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x856>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004654:	4943      	ldr	r1, [pc, #268]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004656:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004658:	f001 0103 	and.w	r1, r1, #3
 800465c:	2903      	cmp	r1, #3
 800465e:	f43f ae0e 	beq.w	800427e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8004662:	2102      	movs	r1, #2
 8004664:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004668:	f7ff f99e 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
 800466c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800466e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004672:	2d00      	cmp	r5, #0
 8004674:	d1af      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
 8004676:	e4b3      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x554>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004678:	493a      	ldr	r1, [pc, #232]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 800467a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800467c:	f001 0103 	and.w	r1, r1, #3
 8004680:	2903      	cmp	r1, #3
 8004682:	f000 8131 	beq.w	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004686:	2102      	movs	r1, #2
 8004688:	f104 0008 	add.w	r0, r4, #8
 800468c:	f7ff f91a 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
 8004690:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004692:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004696:	2d00      	cmp	r5, #0
 8004698:	f47f abb3 	bne.w	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800469c:	e766      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xae0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800469e:	4931      	ldr	r1, [pc, #196]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 80046a0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80046a2:	f001 0103 	and.w	r1, r1, #3
 80046a6:	2903      	cmp	r1, #3
 80046a8:	f43f addc 	beq.w	8004264 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 80046ac:	2102      	movs	r1, #2
 80046ae:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80046b2:	f7ff f979 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
 80046b6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046b8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80046bc:	2d00      	cmp	r5, #0
 80046be:	d18e      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xb52>
 80046c0:	e465      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x502>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046c2:	4928      	ldr	r1, [pc, #160]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 80046c4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80046c6:	f001 0103 	and.w	r1, r1, #3
 80046ca:	2903      	cmp	r1, #3
 80046cc:	f43f ab83 	beq.w	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80046d0:	2101      	movs	r1, #1
 80046d2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80046d6:	f7ff f967 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
 80046da:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80046dc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80046e0:	2d00      	cmp	r5, #0
 80046e2:	f47f af67 	bne.w	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
 80046e6:	f7ff baef 	b.w	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046ea:	491e      	ldr	r1, [pc, #120]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 80046ec:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80046ee:	f001 0103 	and.w	r1, r1, #3
 80046f2:	2903      	cmp	r1, #3
 80046f4:	f43f ab7a 	beq.w	8003dec <HAL_RCCEx_PeriphCLKConfig+0x360>
 80046f8:	2101      	movs	r1, #1
 80046fa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80046fe:	f7ff f953 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
 8004702:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004704:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004708:	2d00      	cmp	r5, #0
 800470a:	f47f af56 	bne.w	80045ba <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800470e:	f7ff bb00 	b.w	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x286>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004712:	4914      	ldr	r1, [pc, #80]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004714:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004716:	f001 0103 	and.w	r1, r1, #3
 800471a:	2903      	cmp	r1, #3
 800471c:	f43f ab3d 	beq.w	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8004720:	2100      	movs	r1, #0
 8004722:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004726:	f7ff f93f 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
 800472a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800472c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004730:	2d00      	cmp	r5, #0
 8004732:	f47f af29 	bne.w	8004588 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8004736:	f7ff ba5b 	b.w	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x164>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800473a:	490a      	ldr	r1, [pc, #40]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 800473c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800473e:	f001 0103 	and.w	r1, r1, #3
 8004742:	2903      	cmp	r1, #3
 8004744:	f43f ab3a 	beq.w	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004748:	2100      	movs	r1, #0
 800474a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800474e:	f7ff f92b 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
 8004752:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004754:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004758:	2d00      	cmp	r5, #0
 800475a:	f47f af18 	bne.w	800458e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800475e:	f7ff ba8c 	b.w	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004762:	bf00      	nop
 8004764:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004768:	4973      	ldr	r1, [pc, #460]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 800476a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800476c:	f001 0103 	and.w	r1, r1, #3
 8004770:	2903      	cmp	r1, #3
 8004772:	f43f ae07 	beq.w	8004384 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8004776:	2102      	movs	r1, #2
 8004778:	3028      	adds	r0, #40	@ 0x28
 800477a:	f7ff f915 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
 800477e:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004780:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004784:	2e00      	cmp	r6, #0
 8004786:	f47f a9b0 	bne.w	8003aea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800478a:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800478c:	f7ff b9a6 	b.w	8003adc <HAL_RCCEx_PeriphCLKConfig+0x50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004790:	4969      	ldr	r1, [pc, #420]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8004792:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004794:	f001 0103 	and.w	r1, r1, #3
 8004798:	2903      	cmp	r1, #3
 800479a:	f43f a9b2 	beq.w	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800479e:	2100      	movs	r1, #0
 80047a0:	f104 0008 	add.w	r0, r4, #8
 80047a4:	f7ff f88e 	bl	80038c4 <RCCEx_PLL2_Config.part.0>
 80047a8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80047aa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80047ae:	2d00      	cmp	r5, #0
 80047b0:	f43f ae53 	beq.w	800445a <HAL_RCCEx_PeriphCLKConfig+0x9ce>
 80047b4:	462e      	mov	r6, r5
 80047b6:	f7ff b9a6 	b.w	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047ba:	495f      	ldr	r1, [pc, #380]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 80047bc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80047be:	f001 0103 	and.w	r1, r1, #3
 80047c2:	2903      	cmp	r1, #3
 80047c4:	f43f a99d 	beq.w	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047c8:	2100      	movs	r1, #0
 80047ca:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80047ce:	f7ff f8eb 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
 80047d2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80047d4:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80047d8:	e63c      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047da:	4957      	ldr	r1, [pc, #348]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 80047dc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80047de:	f001 0103 	and.w	r1, r1, #3
 80047e2:	2903      	cmp	r1, #3
 80047e4:	f43f aac0 	beq.w	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80047e8:	2100      	movs	r1, #0
 80047ea:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80047ee:	f7ff f8db 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
 80047f2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80047f4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80047f8:	2d00      	cmp	r5, #0
 80047fa:	f47f aebf 	bne.w	800457c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80047fe:	f7ff b9a2 	b.w	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xba>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004802:	494d      	ldr	r1, [pc, #308]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8004804:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004806:	f001 0103 	and.w	r1, r1, #3
 800480a:	2903      	cmp	r1, #3
 800480c:	f43f aaba 	beq.w	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8004810:	2100      	movs	r1, #0
 8004812:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004816:	f7ff f8c7 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
 800481a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800481c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004820:	2d00      	cmp	r5, #0
 8004822:	f47f aeae 	bne.w	8004582 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8004826:	f7ff b9b8 	b.w	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800482a:	4943      	ldr	r1, [pc, #268]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 800482c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800482e:	f001 0103 	and.w	r1, r1, #3
 8004832:	2903      	cmp	r1, #3
 8004834:	d041      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8004836:	2101      	movs	r1, #1
 8004838:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800483c:	f7ff f8b4 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
 8004840:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004842:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004846:	2d00      	cmp	r5, #0
 8004848:	f47f ab56 	bne.w	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 800484c:	e6b8      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xb34>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800484e:	493a      	ldr	r1, [pc, #232]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8004850:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004852:	f001 0103 	and.w	r1, r1, #3
 8004856:	2903      	cmp	r1, #3
 8004858:	d02b      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800485a:	2101      	movs	r1, #1
 800485c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004860:	f7ff f8a2 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
 8004864:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004866:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800486a:	2d00      	cmp	r5, #0
 800486c:	f47f ab1f 	bne.w	8003eae <HAL_RCCEx_PeriphCLKConfig+0x422>
 8004870:	e698      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004872:	4931      	ldr	r1, [pc, #196]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8004874:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004876:	f001 0103 	and.w	r1, r1, #3
 800487a:	2903      	cmp	r1, #3
 800487c:	f43f aaf5 	beq.w	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004880:	2101      	movs	r1, #1
 8004882:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004886:	f7ff f88f 	bl	80039a8 <RCCEx_PLL3_Config.part.0>
 800488a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800488c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004890:	2d00      	cmp	r5, #0
 8004892:	f47f aea6 	bne.w	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8004896:	e56d      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
        ret = HAL_TIMEOUT;
 8004898:	2503      	movs	r5, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800489a:	462e      	mov	r6, r5
 800489c:	e9d4 3200 	ldrd	r3, r2, [r4]
 80048a0:	f7ff bab3 	b.w	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x37e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a4:	4d24      	ldr	r5, [pc, #144]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 80048a6:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80048a8:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 80048ac:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 80048ae:	f7ff b915 	b.w	8003adc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80048b2:	2601      	movs	r6, #1
 80048b4:	4635      	mov	r5, r6
 80048b6:	f7ff bafb 	b.w	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80048ba:	2601      	movs	r6, #1
 80048bc:	4635      	mov	r5, r6
 80048be:	f7ff bb1c 	b.w	8003efa <HAL_RCCEx_PeriphCLKConfig+0x46e>
        status = HAL_ERROR;
 80048c2:	2601      	movs	r6, #1
 80048c4:	f7ff bb9c 	b.w	8004000 <HAL_RCCEx_PeriphCLKConfig+0x574>
        status = HAL_ERROR;
 80048c8:	2601      	movs	r6, #1
 80048ca:	f7ff bba7 	b.w	800401c <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048ce:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
        status = HAL_ERROR;
 80048d2:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048d4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80048d8:	f7ff bba0 	b.w	800401c <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80048dc:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048e0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80048e4:	f7ff bb8c 	b.w	8004000 <HAL_RCCEx_PeriphCLKConfig+0x574>
 80048e8:	2601      	movs	r6, #1
 80048ea:	4635      	mov	r5, r6
 80048ec:	f7ff ba8a 	b.w	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x378>
        tickstart = HAL_GetTick();
 80048f0:	f7fc fe40 	bl	8001574 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048f4:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8004938 <HAL_RCCEx_PeriphCLKConfig+0xeac>
        tickstart = HAL_GetTick();
 80048f8:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048fa:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048fe:	e004      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004900:	f7fc fe38 	bl	8001574 <HAL_GetTick>
 8004904:	1bc0      	subs	r0, r0, r7
 8004906:	4548      	cmp	r0, r9
 8004908:	d810      	bhi.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xea0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800490a:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800490e:	079b      	lsls	r3, r3, #30
 8004910:	d5f6      	bpl.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xe74>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004912:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8004916:	e566      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004918:	4807      	ldr	r0, [pc, #28]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 800491a:	4a08      	ldr	r2, [pc, #32]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0xeb0>)
 800491c:	6901      	ldr	r1, [r0, #16]
 800491e:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8004922:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8004926:	430a      	orrs	r2, r1
 8004928:	6102      	str	r2, [r0, #16]
 800492a:	e567      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x970>
        status = ret;
 800492c:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800492e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004932:	4635      	mov	r5, r6
 8004934:	f7ff ba69 	b.w	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004938:	58024400 	.word	0x58024400
 800493c:	00ffffcf 	.word	0x00ffffcf

08004940 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8004940:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004942:	f7fe feef 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 8004946:	4b05      	ldr	r3, [pc, #20]	@ (800495c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8004948:	4a05      	ldr	r2, [pc, #20]	@ (8004960 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004950:	5cd3      	ldrb	r3, [r2, r3]
 8004952:	f003 031f 	and.w	r3, r3, #31
}
 8004956:	40d8      	lsrs	r0, r3
 8004958:	bd08      	pop	{r3, pc}
 800495a:	bf00      	nop
 800495c:	58024400 	.word	0x58024400
 8004960:	08005c9c 	.word	0x08005c9c

08004964 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004964:	4a47      	ldr	r2, [pc, #284]	@ (8004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 8004966:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004968:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800496a:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800496c:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 800496e:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004972:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004976:	6bd4      	ldr	r4, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8004978:	d05b      	beq.n	8004a32 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800497a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800497e:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004982:	f001 0103 	and.w	r1, r1, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004986:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800498a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800498e:	2901      	cmp	r1, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004994:	ee06 4a90 	vmov	s13, r4
 8004998:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800499c:	d003      	beq.n	80049a6 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 800499e:	2902      	cmp	r1, #2
 80049a0:	d06a      	beq.n	8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 80049a2:	2900      	cmp	r1, #0
 80049a4:	d04a      	beq.n	8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049a6:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 80049aa:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80049ae:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80049b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b4:	ee07 3a90 	vmov	s15, r3
 80049b8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80049bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049c0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80049c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049c8:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80049cc:	4a2d      	ldr	r2, [pc, #180]	@ (8004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 80049ce:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80049d2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80049d4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80049d8:	ee07 3a10 	vmov	s14, r3
 80049dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80049e0:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80049e2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80049e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80049ea:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80049ee:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80049f2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80049f4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80049f8:	ee07 3a10 	vmov	s14, r3
 80049fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004a00:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004a04:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004a08:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004a0c:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004a10:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8004a12:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004a16:	ee06 3a90 	vmov	s13, r3
 8004a1a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004a1e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004a22:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004a26:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004a2a:	ee17 3a90 	vmov	r3, s15
 8004a2e:	6083      	str	r3, [r0, #8]
}
 8004a30:	4770      	bx	lr
 8004a32:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a34:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004a38:	6083      	str	r3, [r0, #8]
}
 8004a3a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a3c:	6813      	ldr	r3, [r2, #0]
 8004a3e:	069b      	lsls	r3, r3, #26
 8004a40:	d51d      	bpl.n	8004a7e <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a42:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a44:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004a48:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a4a:	4910      	ldr	r1, [pc, #64]	@ (8004a8c <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8004a4c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a54:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a56:	ee06 3a10 	vmov	s12, r3
 8004a5a:	ee05 1a90 	vmov	s11, r1
 8004a5e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004a62:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004a66:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004a6a:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8004a6e:	ee36 7a26 	vadd.f32	s14, s12, s13
 8004a72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a76:	e7a9      	b.n	80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a78:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004a90 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8004a7c:	e795      	b.n	80049aa <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a7e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 8004a82:	e792      	b.n	80049aa <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8004a84:	58024400 	.word	0x58024400
 8004a88:	4a742400 	.word	0x4a742400
 8004a8c:	03d09000 	.word	0x03d09000
 8004a90:	4af42400 	.word	0x4af42400
 8004a94:	4c742400 	.word	0x4c742400

08004a98 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a98:	4a47      	ldr	r2, [pc, #284]	@ (8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 8004a9a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a9c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a9e:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004aa0:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 8004aa2:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004aa6:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004aaa:	6c54      	ldr	r4, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 8004aac:	d05b      	beq.n	8004b66 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004aae:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ab2:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ab6:	f001 0103 	and.w	r1, r1, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aba:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004abe:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8004ac2:	2901      	cmp	r1, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ac4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ac8:	ee06 4a90 	vmov	s13, r4
 8004acc:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8004ad0:	d003      	beq.n	8004ada <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8004ad2:	2902      	cmp	r1, #2
 8004ad4:	d06a      	beq.n	8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 8004ad6:	2900      	cmp	r1, #0
 8004ad8:	d04a      	beq.n	8004b70 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ada:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8004bbc <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8004ade:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8004ae2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae8:	ee07 3a90 	vmov	s15, r3
 8004aec:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004af4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004af8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afc:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004b00:	4a2d      	ldr	r2, [pc, #180]	@ (8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 8004b02:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8004b06:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004b08:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004b0c:	ee07 3a10 	vmov	s14, r3
 8004b10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8004b14:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004b16:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004b1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004b1e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004b22:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004b26:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004b28:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004b2c:	ee07 3a10 	vmov	s14, r3
 8004b30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004b34:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004b38:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004b3c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004b40:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004b44:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004b46:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004b4a:	ee06 3a90 	vmov	s13, r3
 8004b4e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004b52:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004b56:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004b5a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004b5e:	ee17 3a90 	vmov	r3, s15
 8004b62:	6083      	str	r3, [r0, #8]
}
 8004b64:	4770      	bx	lr
 8004b66:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b68:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004b6c:	6083      	str	r3, [r0, #8]
}
 8004b6e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b70:	6813      	ldr	r3, [r2, #0]
 8004b72:	069b      	lsls	r3, r3, #26
 8004b74:	d51d      	bpl.n	8004bb2 <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b76:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b78:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004b7c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b7e:	4910      	ldr	r1, [pc, #64]	@ (8004bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8004b80:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b88:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b8a:	ee06 3a10 	vmov	s12, r3
 8004b8e:	ee05 1a90 	vmov	s11, r1
 8004b92:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004b96:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004b9a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004b9e:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8004ba2:	ee36 7a26 	vadd.f32	s14, s12, s13
 8004ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004baa:	e7a9      	b.n	8004b00 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bac:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8004bb0:	e795      	b.n	8004ade <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bb2:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 8004bb6:	e792      	b.n	8004ade <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8004bb8:	58024400 	.word	0x58024400
 8004bbc:	4a742400 	.word	0x4a742400
 8004bc0:	03d09000 	.word	0x03d09000
 8004bc4:	4af42400 	.word	0x4af42400
 8004bc8:	4c742400 	.word	0x4c742400

08004bcc <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bcc:	4a47      	ldr	r2, [pc, #284]	@ (8004cec <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 8004bce:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bd0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8004bd2:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004bd4:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 8004bd6:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8004bda:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004bde:	6b54      	ldr	r4, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 8004be0:	d05b      	beq.n	8004c9a <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004be2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004be6:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bea:	f001 0103 	and.w	r1, r1, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bee:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004bf2:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8004bf6:	2901      	cmp	r1, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bfc:	ee06 4a90 	vmov	s13, r4
 8004c00:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8004c04:	d06f      	beq.n	8004ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 8004c06:	2902      	cmp	r1, #2
 8004c08:	d06a      	beq.n	8004ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
 8004c0a:	2900      	cmp	r1, #0
 8004c0c:	d04a      	beq.n	8004ca4 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c0e:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8004cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8004c12:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8004c16:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1c:	ee07 3a90 	vmov	s15, r3
 8004c20:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c28:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004c2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c30:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8004c34:	4a2d      	ldr	r2, [pc, #180]	@ (8004cec <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 8004c36:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8004c3a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004c3c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004c40:	ee07 3a10 	vmov	s14, r3
 8004c44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8004c48:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8004c4a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004c4e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004c52:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004c56:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8004c5a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004c5c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004c60:	ee07 3a10 	vmov	s14, r3
 8004c64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004c68:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004c6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004c70:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004c74:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8004c78:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004c7a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004c7e:	ee06 3a90 	vmov	s13, r3
 8004c82:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004c86:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004c8a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004c8e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004c92:	ee17 3a90 	vmov	r3, s15
 8004c96:	6083      	str	r3, [r0, #8]
}
 8004c98:	4770      	bx	lr
 8004c9a:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004c9c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8004ca0:	6083      	str	r3, [r0, #8]
}
 8004ca2:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ca4:	6813      	ldr	r3, [r2, #0]
 8004ca6:	069b      	lsls	r3, r3, #26
 8004ca8:	d5b1      	bpl.n	8004c0e <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004caa:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004cb0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cb2:	4910      	ldr	r1, [pc, #64]	@ (8004cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 8004cb4:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cbc:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cbe:	ee06 3a10 	vmov	s12, r3
 8004cc2:	ee05 1a90 	vmov	s11, r1
 8004cc6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004cca:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004cce:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004cd2:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8004cd6:	ee36 7a26 	vadd.f32	s14, s12, s13
 8004cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cde:	e7a9      	b.n	8004c34 <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ce0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8004ce4:	e795      	b.n	8004c12 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ce6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004cfc <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8004cea:	e792      	b.n	8004c12 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8004cec:	58024400 	.word	0x58024400
 8004cf0:	4c742400 	.word	0x4c742400
 8004cf4:	03d09000 	.word	0x03d09000
 8004cf8:	4af42400 	.word	0x4af42400
 8004cfc:	4a742400 	.word	0x4a742400

08004d00 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004d00:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 8004d04:	430b      	orrs	r3, r1
{
 8004d06:	b500      	push	{lr}
 8004d08:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004d0a:	f000 8083 	beq.w	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004d0e:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 8004d12:	430b      	orrs	r3, r1
 8004d14:	d038      	beq.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004d16:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 8004d1a:	430b      	orrs	r3, r1
 8004d1c:	f000 80e6 	beq.w	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004d20:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 8004d24:	430b      	orrs	r3, r1
 8004d26:	f000 8089 	beq.w	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004d2a:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 8004d2e:	430b      	orrs	r3, r1
 8004d30:	d060      	beq.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004d32:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8004d36:	430b      	orrs	r3, r1
 8004d38:	f000 8112 	beq.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004d3c:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 8004d40:	430b      	orrs	r3, r1
 8004d42:	f000 80a3 	beq.w	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004d46:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 8004d4a:	430b      	orrs	r3, r1
 8004d4c:	f000 80fa 	beq.w	8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004d50:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 8004d54:	430b      	orrs	r3, r1
 8004d56:	f000 8143 	beq.w	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004d5a:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 8004d5e:	4308      	orrs	r0, r1
 8004d60:	d137      	bne.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004d62:	4a9a      	ldr	r2, [pc, #616]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004d64:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004d66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 8004d6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d6e:	f000 8084 	beq.w	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004d72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d76:	f000 8157 	beq.w	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8004d7a:	bb53      	cbnz	r3, 8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004d7c:	6810      	ldr	r0, [r2, #0]
 8004d7e:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8004d82:	d044      	beq.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 8004d84:	4892      	ldr	r0, [pc, #584]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004d86:	e042      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8004d88:	4a90      	ldr	r2, [pc, #576]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004d8a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004d8c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 8004d90:	2b80      	cmp	r3, #128	@ 0x80
 8004d92:	f000 80a6 	beq.w	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8004d96:	d920      	bls.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004d98:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d9a:	d037      	beq.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8004d9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004da0:	d117      	bne.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004da2:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004da4:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004da6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004daa:	0749      	lsls	r1, r1, #29
 8004dac:	d502      	bpl.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 80c2 	beq.w	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004db4:	4a85      	ldr	r2, [pc, #532]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004db6:	6812      	ldr	r2, [r2, #0]
 8004db8:	05d0      	lsls	r0, r2, #23
 8004dba:	d503      	bpl.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8004dbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dc0:	f000 8102 	beq.w	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004dc4:	4a81      	ldr	r2, [pc, #516]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	0391      	lsls	r1, r2, #14
 8004dca:	d502      	bpl.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004dcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dd0:	d0d8      	beq.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
          frequency = 0;
 8004dd2:	2000      	movs	r0, #0
}
 8004dd4:	b005      	add	sp, #20
 8004dd6:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d04d      	beq.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004dde:	2b40      	cmp	r3, #64	@ 0x40
 8004de0:	d1f7      	bne.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004de2:	6810      	ldr	r0, [r2, #0]
 8004de4:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004de8:	d011      	beq.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dea:	a801      	add	r0, sp, #4
 8004dec:	f7ff fdba 	bl	8004964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004df0:	9801      	ldr	r0, [sp, #4]
 8004df2:	e00c      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004df4:	4a75      	ldr	r2, [pc, #468]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004df6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004df8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 8004dfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e00:	d06f      	beq.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8004e02:	d938      	bls.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8004e04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e08:	f040 8088 	bne.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004e0c:	4871      	ldr	r0, [pc, #452]	@ (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 8004e0e:	b005      	add	sp, #20
 8004e10:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004e14:	4b6d      	ldr	r3, [pc, #436]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e18:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d8d8      	bhi.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004e20:	a201      	add	r2, pc, #4	@ (adr r2, 8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 8004e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e26:	bf00      	nop
 8004e28:	08004ecb 	.word	0x08004ecb
 8004e2c:	08004ea7 	.word	0x08004ea7
 8004e30:	08004eb7 	.word	0x08004eb7
 8004e34:	08004e0d 	.word	0x08004e0d
 8004e38:	08004eb3 	.word	0x08004eb3
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8004e3c:	4a63      	ldr	r2, [pc, #396]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004e3e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004e40:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
    switch (saiclocksource)
 8004e44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e48:	d04b      	beq.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8004e4a:	d944      	bls.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 8004e4c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e50:	d0dc      	beq.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8004e52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e56:	d1bc      	bne.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e58:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e5a:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e60:	0752      	lsls	r2, r2, #29
 8004e62:	d5a7      	bpl.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1a5      	bne.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e68:	4b58      	ldr	r3, [pc, #352]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004e6a:	485b      	ldr	r0, [pc, #364]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004e72:	40d8      	lsrs	r0, r3
 8004e74:	e7cb      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d154      	bne.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e7a:	6810      	ldr	r0, [r2, #0]
 8004e7c:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8004e80:	d0c5      	beq.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e82:	a801      	add	r0, sp, #4
 8004e84:	f7ff fea2 	bl	8004bcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e88:	9802      	ldr	r0, [sp, #8]
 8004e8a:	e7c0      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004e8c:	4a4f      	ldr	r2, [pc, #316]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004e8e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004e90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 8004e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e98:	f000 80d0 	beq.w	800503c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 8004e9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ea0:	d0da      	beq.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d195      	bne.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ea6:	4b49      	ldr	r3, [pc, #292]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004eae:	d0ae      	beq.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004eb0:	e79b      	b.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004eb2:	4a46      	ldr	r2, [pc, #280]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004eb4:	e775      	b.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004eb6:	4b45      	ldr	r3, [pc, #276]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8004ebe:	d0a6      	beq.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ec0:	a801      	add	r0, sp, #4
 8004ec2:	f7ff fde9 	bl	8004a98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004ec6:	9801      	ldr	r0, [sp, #4]
 8004ec8:	e7a1      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004eca:	4b40      	ldr	r3, [pc, #256]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8004ed2:	d09c      	beq.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004ed4:	e7d5      	b.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0cf      	beq.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004eda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ede:	d080      	beq.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8004ee0:	e777      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ee2:	6810      	ldr	r0, [r2, #0]
 8004ee4:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8004ee8:	d091      	beq.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004eea:	e7e9      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8004eec:	4a37      	ldr	r2, [pc, #220]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004eee:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004ef0:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
    switch (saiclocksource)
 8004ef4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ef8:	d0f3      	beq.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8004efa:	d806      	bhi.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0bc      	beq.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004f00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f04:	f43f af6d 	beq.w	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8004f08:	e763      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004f0a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004f0e:	f43f af7d 	beq.w	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8004f12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f16:	f43f af44 	beq.w	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8004f1a:	e75a      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
 8004f1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f20:	d09a      	beq.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004f22:	e756      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f28:	f43f af5b 	beq.w	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8004f2c:	e751      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f2e:	6810      	ldr	r0, [r2, #0]
 8004f30:	f010 0004 	ands.w	r0, r0, #4
 8004f34:	f43f af6b 	beq.w	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f38:	6813      	ldr	r3, [r2, #0]
 8004f3a:	4827      	ldr	r0, [pc, #156]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004f3c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004f40:	40d8      	lsrs	r0, r3
 8004f42:	e764      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004f44:	4b21      	ldr	r3, [pc, #132]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004f46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 8004f48:	03d2      	lsls	r2, r2, #15
 8004f4a:	d5bf      	bpl.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f4c:	6818      	ldr	r0, [r3, #0]
 8004f4e:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004f52:	f43f af5c 	beq.w	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f56:	a801      	add	r0, sp, #4
 8004f58:	f7ff fd04 	bl	8004964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004f5c:	9803      	ldr	r0, [sp, #12]
 8004f5e:	e756      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004f60:	4a1a      	ldr	r2, [pc, #104]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004f62:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004f64:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 8004f68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f6c:	d0df      	beq.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004f6e:	d810      	bhi.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8004f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f74:	d058      	beq.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8004f76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f7a:	d118      	bne.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f7c:	4b13      	ldr	r3, [pc, #76]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004f7e:	6818      	ldr	r0, [r3, #0]
 8004f80:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8004f84:	f43f af43 	beq.w	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f88:	a801      	add	r0, sp, #4
 8004f8a:	f7ff fd85 	bl	8004a98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004f8e:	9802      	ldr	r0, [sp, #8]
 8004f90:	e73d      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8004f92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f96:	d012      	beq.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 8004f98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f9c:	f47f af19 	bne.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8004fa8:	f43f af31 	beq.w	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004fac:	e6ea      	b.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f47f af0f 	bne.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
 8004fb4:	b005      	add	sp, #20
 8004fb6:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8004fba:	f7fe bbf3 	b.w	80037a4 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004fbe:	6810      	ldr	r0, [r2, #0]
 8004fc0:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8004fc4:	f43f af23 	beq.w	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 8004fc8:	4804      	ldr	r0, [pc, #16]	@ (8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004fca:	e720      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004fcc:	58024400 	.word	0x58024400
 8004fd0:	007a1200 	.word	0x007a1200
 8004fd4:	00bb8000 	.word	0x00bb8000
 8004fd8:	03d09000 	.word	0x03d09000
 8004fdc:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8004fe0:	4b28      	ldr	r3, [pc, #160]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8004fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe4:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 8004fe8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004fec:	d037      	beq.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 8004fee:	d814      	bhi.n	800501a <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8004ff0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ff4:	d03f      	beq.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8004ff6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ffa:	d0bf      	beq.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f47f aee8 	bne.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005002:	f7fe fb8f 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 8005006:	4b1f      	ldr	r3, [pc, #124]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8005008:	4a1f      	ldr	r2, [pc, #124]	@ (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005010:	5cd3      	ldrb	r3, [r2, r3]
 8005012:	f003 031f 	and.w	r3, r3, #31
 8005016:	40d8      	lsrs	r0, r3
        break;
 8005018:	e6f9      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800501a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800501e:	d017      	beq.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 8005020:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005024:	d0bc      	beq.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005026:	e6d4      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005028:	6810      	ldr	r0, [r2, #0]
 800502a:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800502e:	f43f aeee 	beq.w	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005032:	a801      	add	r0, sp, #4
 8005034:	f7ff fc96 	bl	8004964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005038:	9802      	ldr	r0, [sp, #8]
 800503a:	e6e8      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800503c:	6810      	ldr	r0, [r2, #0]
 800503e:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005042:	f43f aee4 	beq.w	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005046:	a801      	add	r0, sp, #4
 8005048:	f7ff fd26 	bl	8004a98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800504c:	9803      	ldr	r0, [sp, #12]
 800504e:	e6de      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005050:	4b0c      	ldr	r3, [pc, #48]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8005058:	f43f aed9 	beq.w	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800505c:	e7b4      	b.n	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800505e:	4b09      	ldr	r3, [pc, #36]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	f010 0004 	ands.w	r0, r0, #4
 8005066:	f43f aed2 	beq.w	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4807      	ldr	r0, [pc, #28]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 800506e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005072:	40d8      	lsrs	r0, r3
 8005074:	e6cb      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005076:	4b03      	ldr	r3, [pc, #12]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800507e:	f43f aec6 	beq.w	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005082:	e7d6      	b.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8005084:	58024400 	.word	0x58024400
 8005088:	08005c9c 	.word	0x08005c9c
 800508c:	03d09000 	.word	0x03d09000

08005090 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005090:	2800      	cmp	r0, #0
 8005092:	f000 8090 	beq.w	80051b6 <HAL_TIM_Base_Init+0x126>
{
 8005096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005098:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800509c:	4604      	mov	r4, r0
 800509e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d078      	beq.n	8005198 <HAL_TIM_Base_Init+0x108>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a6:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	2202      	movs	r2, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050aa:	4944      	ldr	r1, [pc, #272]	@ (80051bc <HAL_TIM_Base_Init+0x12c>)
 80050ac:	4d44      	ldr	r5, [pc, #272]	@ (80051c0 <HAL_TIM_Base_Init+0x130>)
 80050ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b2:	eba3 0101 	sub.w	r1, r3, r1
  htim->State = HAL_TIM_STATE_BUSY;
 80050b6:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050ba:	eba3 0e05 	sub.w	lr, r3, r5
  tmpcr1 = TIMx->CR1;
 80050be:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050c0:	fab1 f181 	clz	r1, r1
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050c4:	69a0      	ldr	r0, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050c6:	fabe fe8e 	clz	lr, lr

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050ca:	6866      	ldr	r6, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050cc:	ea4f 1151 	mov.w	r1, r1, lsr #5
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d0:	68e7      	ldr	r7, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050d2:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80050d6:	d01f      	beq.n	8005118 <HAL_TIM_Base_Init+0x88>
 80050d8:	b9f1      	cbnz	r1, 8005118 <HAL_TIM_Base_Init+0x88>
 80050da:	f8df c0f4 	ldr.w	ip, [pc, #244]	@ 80051d0 <HAL_TIM_Base_Init+0x140>
 80050de:	4563      	cmp	r3, ip
 80050e0:	d01a      	beq.n	8005118 <HAL_TIM_Base_Init+0x88>
 80050e2:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80050e6:	4563      	cmp	r3, ip
 80050e8:	d016      	beq.n	8005118 <HAL_TIM_Base_Init+0x88>
 80050ea:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80050ee:	4563      	cmp	r3, ip
 80050f0:	d012      	beq.n	8005118 <HAL_TIM_Base_Init+0x88>
 80050f2:	f1be 0f00 	cmp.w	lr, #0
 80050f6:	d10f      	bne.n	8005118 <HAL_TIM_Base_Init+0x88>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050f8:	4d32      	ldr	r5, [pc, #200]	@ (80051c4 <HAL_TIM_Base_Init+0x134>)
 80050fa:	4933      	ldr	r1, [pc, #204]	@ (80051c8 <HAL_TIM_Base_Init+0x138>)
 80050fc:	428b      	cmp	r3, r1
 80050fe:	bf18      	it	ne
 8005100:	42ab      	cmpne	r3, r5
 8005102:	d04e      	beq.n	80051a2 <HAL_TIM_Base_Init+0x112>
 8005104:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005108:	428b      	cmp	r3, r1
 800510a:	d04a      	beq.n	80051a2 <HAL_TIM_Base_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800510c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005110:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005112:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005114:	4310      	orrs	r0, r2

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005116:	e01e      	b.n	8005156 <HAL_TIM_Base_Init+0xc6>
    tmpcr1 |= Structure->CounterMode;
 8005118:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800511a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800511e:	f8d4 c010 	ldr.w	ip, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8005122:	432a      	orrs	r2, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005124:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005126:	629e      	str	r6, [r3, #40]	@ 0x28
    tmpcr1 &= ~TIM_CR1_CKD;
 8005128:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800512c:	ea42 020c 	orr.w	r2, r2, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005130:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005134:	4310      	orrs	r0, r2
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005136:	b961      	cbnz	r1, 8005152 <HAL_TIM_Base_Init+0xc2>
 8005138:	f1be 0f00 	cmp.w	lr, #0
 800513c:	d109      	bne.n	8005152 <HAL_TIM_Base_Init+0xc2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800513e:	4923      	ldr	r1, [pc, #140]	@ (80051cc <HAL_TIM_Base_Init+0x13c>)
 8005140:	4a20      	ldr	r2, [pc, #128]	@ (80051c4 <HAL_TIM_Base_Init+0x134>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005142:	4293      	cmp	r3, r2
 8005144:	bf18      	it	ne
 8005146:	428b      	cmpne	r3, r1
 8005148:	d003      	beq.n	8005152 <HAL_TIM_Base_Init+0xc2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800514a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800514e:	4293      	cmp	r3, r2
 8005150:	d101      	bne.n	8005156 <HAL_TIM_Base_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005152:	6962      	ldr	r2, [r4, #20]
 8005154:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005156:	6819      	ldr	r1, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005158:	2201      	movs	r2, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800515a:	f041 0104 	orr.w	r1, r1, #4
 800515e:	6019      	str	r1, [r3, #0]
  TIMx->EGR = TIM_EGR_UG;
 8005160:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005162:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8005164:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005166:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800516a:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 800516e:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
 8005172:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
 8005176:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
 800517a:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 800517e:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005182:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 8005186:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 800518a:	f884 2046 	strb.w	r2, [r4, #70]	@ 0x46
 800518e:	f884 2047 	strb.w	r2, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005192:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
}
 8005196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8005198:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800519c:	f7fc f826 	bl	80011ec <HAL_TIM_Base_MspInit>
 80051a0:	e781      	b.n	80050a6 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051a2:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80051a4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051a8:	62df      	str	r7, [r3, #44]	@ 0x2c
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051aa:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 80051ac:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051b2:	4310      	orrs	r0, r2
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051b4:	e7c3      	b.n	800513e <HAL_TIM_Base_Init+0xae>
    return HAL_ERROR;
 80051b6:	2001      	movs	r0, #1
}
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40010000 	.word	0x40010000
 80051c0:	40010400 	.word	0x40010400
 80051c4:	40014000 	.word	0x40014000
 80051c8:	40014400 	.word	0x40014400
 80051cc:	40014800 	.word	0x40014800
 80051d0:	40000400 	.word	0x40000400

080051d4 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop

080051d8 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop

080051dc <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop

080051e0 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop

080051e4 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop

080051e8 <HAL_TIM_IRQHandler>:
{
 80051e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 80051ea:	6803      	ldr	r3, [r0, #0]
{
 80051ec:	4605      	mov	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 80051ee:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051f0:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051f2:	07a1      	lsls	r1, r4, #30
 80051f4:	d501      	bpl.n	80051fa <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051f6:	07b2      	lsls	r2, r6, #30
 80051f8:	d457      	bmi.n	80052aa <HAL_TIM_IRQHandler+0xc2>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051fa:	0767      	lsls	r7, r4, #29
 80051fc:	d501      	bpl.n	8005202 <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051fe:	0770      	lsls	r0, r6, #29
 8005200:	d440      	bmi.n	8005284 <HAL_TIM_IRQHandler+0x9c>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005202:	0721      	lsls	r1, r4, #28
 8005204:	d501      	bpl.n	800520a <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005206:	0732      	lsls	r2, r6, #28
 8005208:	d42a      	bmi.n	8005260 <HAL_TIM_IRQHandler+0x78>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800520a:	06e7      	lsls	r7, r4, #27
 800520c:	d501      	bpl.n	8005212 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800520e:	06f0      	lsls	r0, r6, #27
 8005210:	d413      	bmi.n	800523a <HAL_TIM_IRQHandler+0x52>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005212:	07e1      	lsls	r1, r4, #31
 8005214:	d501      	bpl.n	800521a <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005216:	07f2      	lsls	r2, r6, #31
 8005218:	d465      	bmi.n	80052e6 <HAL_TIM_IRQHandler+0xfe>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800521a:	f414 5f02 	tst.w	r4, #8320	@ 0x2080
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800521e:	f404 7780 	and.w	r7, r4, #256	@ 0x100
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005222:	d052      	beq.n	80052ca <HAL_TIM_IRQHandler+0xe2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005224:	0633      	lsls	r3, r6, #24
 8005226:	d466      	bmi.n	80052f6 <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005228:	0660      	lsls	r0, r4, #25
 800522a:	d501      	bpl.n	8005230 <HAL_TIM_IRQHandler+0x48>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800522c:	0671      	lsls	r1, r6, #25
 800522e:	d473      	bmi.n	8005318 <HAL_TIM_IRQHandler+0x130>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005230:	06a2      	lsls	r2, r4, #26
 8005232:	d501      	bpl.n	8005238 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005234:	06b3      	lsls	r3, r6, #26
 8005236:	d44d      	bmi.n	80052d4 <HAL_TIM_IRQHandler+0xec>
}
 8005238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800523a:	682b      	ldr	r3, [r5, #0]
 800523c:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8005240:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005242:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005244:	2208      	movs	r2, #8
 8005246:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800524e:	d174      	bne.n	800533a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005250:	f7ff ffc2 	bl	80051d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005254:	4628      	mov	r0, r5
 8005256:	f7ff ffc3 	bl	80051e0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525a:	2300      	movs	r3, #0
 800525c:	772b      	strb	r3, [r5, #28]
 800525e:	e7d8      	b.n	8005212 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005260:	682b      	ldr	r3, [r5, #0]
 8005262:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8005266:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800526a:	2204      	movs	r2, #4
 800526c:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	079b      	lsls	r3, r3, #30
 8005272:	d15f      	bne.n	8005334 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005274:	f7ff ffb0 	bl	80051d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005278:	4628      	mov	r0, r5
 800527a:	f7ff ffb1 	bl	80051e0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527e:	2300      	movs	r3, #0
 8005280:	772b      	strb	r3, [r5, #28]
 8005282:	e7c2      	b.n	800520a <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005284:	682b      	ldr	r3, [r5, #0]
 8005286:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800528a:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800528c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800528e:	2202      	movs	r2, #2
 8005290:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8005298:	d149      	bne.n	800532e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529a:	f7ff ff9d 	bl	80051d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529e:	4628      	mov	r0, r5
 80052a0:	f7ff ff9e 	bl	80051e0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a4:	2300      	movs	r3, #0
 80052a6:	772b      	strb	r3, [r5, #28]
 80052a8:	e7ab      	b.n	8005202 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052aa:	f06f 0202 	mvn.w	r2, #2
 80052ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052b0:	2201      	movs	r2, #1
 80052b2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	079b      	lsls	r3, r3, #30
 80052b8:	d136      	bne.n	8005328 <HAL_TIM_IRQHandler+0x140>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ba:	f7ff ff8d 	bl	80051d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052be:	4628      	mov	r0, r5
 80052c0:	f7ff ff8e 	bl	80051e0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c4:	2300      	movs	r3, #0
 80052c6:	772b      	strb	r3, [r5, #28]
 80052c8:	e797      	b.n	80051fa <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80052ca:	2f00      	cmp	r7, #0
 80052cc:	d0ac      	beq.n	8005228 <HAL_TIM_IRQHandler+0x40>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052ce:	0637      	lsls	r7, r6, #24
 80052d0:	d41a      	bmi.n	8005308 <HAL_TIM_IRQHandler+0x120>
 80052d2:	e7a9      	b.n	8005228 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80052da:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052dc:	611a      	str	r2, [r3, #16]
}
 80052de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      HAL_TIMEx_CommutCallback(htim);
 80052e2:	f000 b887 	b.w	80053f4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052e6:	682b      	ldr	r3, [r5, #0]
 80052e8:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ec:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052ee:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80052f0:	f7ff ff70 	bl	80051d4 <HAL_TIM_PeriodElapsedCallback>
 80052f4:	e791      	b.n	800521a <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052f6:	682b      	ldr	r3, [r5, #0]
 80052f8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 80052fc:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052fe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005300:	f000 f87a 	bl	80053f8 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005304:	2f00      	cmp	r7, #0
 8005306:	d08f      	beq.n	8005228 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800530e:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005310:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005312:	f000 f873 	bl	80053fc <HAL_TIMEx_Break2Callback>
 8005316:	e787      	b.n	8005228 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005318:	682b      	ldr	r3, [r5, #0]
 800531a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800531e:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005320:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005322:	f7ff ff5f 	bl	80051e4 <HAL_TIM_TriggerCallback>
 8005326:	e783      	b.n	8005230 <HAL_TIM_IRQHandler+0x48>
          HAL_TIM_IC_CaptureCallback(htim);
 8005328:	f7ff ff58 	bl	80051dc <HAL_TIM_IC_CaptureCallback>
 800532c:	e7ca      	b.n	80052c4 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800532e:	f7ff ff55 	bl	80051dc <HAL_TIM_IC_CaptureCallback>
 8005332:	e7b7      	b.n	80052a4 <HAL_TIM_IRQHandler+0xbc>
        HAL_TIM_IC_CaptureCallback(htim);
 8005334:	f7ff ff52 	bl	80051dc <HAL_TIM_IC_CaptureCallback>
 8005338:	e7a1      	b.n	800527e <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 800533a:	f7ff ff4f 	bl	80051dc <HAL_TIM_IC_CaptureCallback>
 800533e:	e78c      	b.n	800525a <HAL_TIM_IRQHandler+0x72>

08005340 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005340:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005344:	2b01      	cmp	r3, #1
 8005346:	d04b      	beq.n	80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005348:	6803      	ldr	r3, [r0, #0]
 800534a:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800534c:	2002      	movs	r0, #2
{
 800534e:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005350:	4d24      	ldr	r5, [pc, #144]	@ (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005352:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005356:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8005358:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800535a:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800535c:	d029      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800535e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005362:	42ab      	cmp	r3, r5
 8005364:	d025      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005366:	4d20      	ldr	r5, [pc, #128]	@ (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8005368:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800536c:	42ab      	cmp	r3, r5
 800536e:	bf18      	it	ne
 8005370:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 8005374:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005378:	bf0c      	ite	eq
 800537a:	f04f 0c01 	moveq.w	ip, #1
 800537e:	f04f 0c00 	movne.w	ip, #0
 8005382:	42ab      	cmp	r3, r5
 8005384:	bf08      	it	eq
 8005386:	f04c 0c01 	orreq.w	ip, ip, #1
 800538a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800538e:	42ab      	cmp	r3, r5
 8005390:	bf08      	it	eq
 8005392:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005396:	680d      	ldr	r5, [r1, #0]
 8005398:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800539a:	4d14      	ldr	r5, [pc, #80]	@ (80053ec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 800539c:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800539e:	42ab      	cmp	r3, r5
 80053a0:	bf14      	ite	ne
 80053a2:	4660      	movne	r0, ip
 80053a4:	f04c 0001 	orreq.w	r0, ip, #1
 80053a8:	b960      	cbnz	r0, 80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80053aa:	4811      	ldr	r0, [pc, #68]	@ (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80053ac:	4283      	cmp	r3, r0
 80053ae:	d009      	beq.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80053b0:	e00d      	b.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053b2:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053b4:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053b8:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053ba:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80053bc:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053c0:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 80053c2:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053c4:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053c6:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053ca:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053cc:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80053ce:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80053d0:	2101      	movs	r1, #1

  return HAL_OK;
 80053d2:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80053d4:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80053d8:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 80053dc:	bc30      	pop	{r4, r5}
 80053de:	4770      	bx	lr
  __HAL_LOCK(htim);
 80053e0:	2002      	movs	r0, #2
}
 80053e2:	4770      	bx	lr
 80053e4:	40010000 	.word	0x40010000
 80053e8:	40000400 	.word	0x40000400
 80053ec:	40001800 	.word	0x40001800
 80053f0:	40014000 	.word	0x40014000

080053f4 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop

080053f8 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop

080053fc <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop

08005400 <UART_SetConfig>:
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005400:	6901      	ldr	r1, [r0, #16]
 8005402:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8005404:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005406:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005408:	49a2      	ldr	r1, [pc, #648]	@ (8005694 <UART_SetConfig+0x294>)
{
 800540a:	b570      	push	{r4, r5, r6, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800540c:	6945      	ldr	r5, [r0, #20]
{
 800540e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005410:	69c0      	ldr	r0, [r0, #28]
{
 8005412:	b086      	sub	sp, #24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005414:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005416:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005418:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800541a:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800541c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800541e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005420:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005422:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800542a:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800542c:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800542e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005430:	4a99      	ldr	r2, [pc, #612]	@ (8005698 <UART_SetConfig+0x298>)
 8005432:	4293      	cmp	r3, r2
 8005434:	f000 8118 	beq.w	8005668 <UART_SetConfig+0x268>
    tmpreg |= huart->Init.OneBitSampling;
 8005438:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800543a:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800543c:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800543e:	4a97      	ldr	r2, [pc, #604]	@ (800569c <UART_SetConfig+0x29c>)
 8005440:	4032      	ands	r2, r6
 8005442:	4311      	orrs	r1, r2
 8005444:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005448:	f022 020f 	bic.w	r2, r2, #15
 800544c:	432a      	orrs	r2, r5
 800544e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005450:	4a93      	ldr	r2, [pc, #588]	@ (80056a0 <UART_SetConfig+0x2a0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d028      	beq.n	80054a8 <UART_SetConfig+0xa8>
 8005456:	4a93      	ldr	r2, [pc, #588]	@ (80056a4 <UART_SetConfig+0x2a4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d01a      	beq.n	8005492 <UART_SetConfig+0x92>
 800545c:	4a92      	ldr	r2, [pc, #584]	@ (80056a8 <UART_SetConfig+0x2a8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d017      	beq.n	8005492 <UART_SetConfig+0x92>
 8005462:	4a92      	ldr	r2, [pc, #584]	@ (80056ac <UART_SetConfig+0x2ac>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d014      	beq.n	8005492 <UART_SetConfig+0x92>
 8005468:	4a91      	ldr	r2, [pc, #580]	@ (80056b0 <UART_SetConfig+0x2b0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d011      	beq.n	8005492 <UART_SetConfig+0x92>
 800546e:	4a91      	ldr	r2, [pc, #580]	@ (80056b4 <UART_SetConfig+0x2b4>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d019      	beq.n	80054a8 <UART_SetConfig+0xa8>
 8005474:	4a90      	ldr	r2, [pc, #576]	@ (80056b8 <UART_SetConfig+0x2b8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00b      	beq.n	8005492 <UART_SetConfig+0x92>
 800547a:	4a90      	ldr	r2, [pc, #576]	@ (80056bc <UART_SetConfig+0x2bc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d008      	beq.n	8005492 <UART_SetConfig+0x92>

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 8005480:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005482:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8005484:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->RxISR = NULL;
 8005488:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800548a:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800548c:	67a3      	str	r3, [r4, #120]	@ 0x78

  return ret;
}
 800548e:	b006      	add	sp, #24
 8005490:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005492:	4b8b      	ldr	r3, [pc, #556]	@ (80056c0 <UART_SetConfig+0x2c0>)
 8005494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	2b05      	cmp	r3, #5
 800549c:	d8f0      	bhi.n	8005480 <UART_SetConfig+0x80>
 800549e:	e8df f003 	tbb	[pc, r3]
 80054a2:	5f9d      	.short	0x5f9d
 80054a4:	977e7169 	.word	0x977e7169
 80054a8:	4b85      	ldr	r3, [pc, #532]	@ (80056c0 <UART_SetConfig+0x2c0>)
 80054aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054b0:	2b28      	cmp	r3, #40	@ 0x28
 80054b2:	d8e5      	bhi.n	8005480 <UART_SetConfig+0x80>
 80054b4:	a201      	add	r2, pc, #4	@ (adr r2, 80054bc <UART_SetConfig+0xbc>)
 80054b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ba:	bf00      	nop
 80054bc:	08005637 	.word	0x08005637
 80054c0:	08005481 	.word	0x08005481
 80054c4:	08005481 	.word	0x08005481
 80054c8:	08005481 	.word	0x08005481
 80054cc:	08005481 	.word	0x08005481
 80054d0:	08005481 	.word	0x08005481
 80054d4:	08005481 	.word	0x08005481
 80054d8:	08005481 	.word	0x08005481
 80054dc:	08005561 	.word	0x08005561
 80054e0:	08005481 	.word	0x08005481
 80054e4:	08005481 	.word	0x08005481
 80054e8:	08005481 	.word	0x08005481
 80054ec:	08005481 	.word	0x08005481
 80054f0:	08005481 	.word	0x08005481
 80054f4:	08005481 	.word	0x08005481
 80054f8:	08005481 	.word	0x08005481
 80054fc:	08005575 	.word	0x08005575
 8005500:	08005481 	.word	0x08005481
 8005504:	08005481 	.word	0x08005481
 8005508:	08005481 	.word	0x08005481
 800550c:	08005481 	.word	0x08005481
 8005510:	08005481 	.word	0x08005481
 8005514:	08005481 	.word	0x08005481
 8005518:	08005481 	.word	0x08005481
 800551c:	08005585 	.word	0x08005585
 8005520:	08005481 	.word	0x08005481
 8005524:	08005481 	.word	0x08005481
 8005528:	08005481 	.word	0x08005481
 800552c:	08005481 	.word	0x08005481
 8005530:	08005481 	.word	0x08005481
 8005534:	08005481 	.word	0x08005481
 8005538:	08005481 	.word	0x08005481
 800553c:	0800559f 	.word	0x0800559f
 8005540:	08005481 	.word	0x08005481
 8005544:	08005481 	.word	0x08005481
 8005548:	08005481 	.word	0x08005481
 800554c:	08005481 	.word	0x08005481
 8005550:	08005481 	.word	0x08005481
 8005554:	08005481 	.word	0x08005481
 8005558:	08005481 	.word	0x08005481
 800555c:	080055d1 	.word	0x080055d1
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005560:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005564:	d040      	beq.n	80055e8 <UART_SetConfig+0x1e8>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005566:	4668      	mov	r0, sp
 8005568:	f7ff f9fc 	bl	8004964 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800556c:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800556e:	b368      	cbz	r0, 80055cc <UART_SetConfig+0x1cc>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005570:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8005572:	e018      	b.n	80055a6 <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005574:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005578:	d06e      	beq.n	8005658 <UART_SetConfig+0x258>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800557a:	a803      	add	r0, sp, #12
 800557c:	f7ff fa8c 	bl	8004a98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005580:	9804      	ldr	r0, [sp, #16]
        break;
 8005582:	e7f4      	b.n	800556e <UART_SetConfig+0x16e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005584:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005588:	d05b      	beq.n	8005642 <UART_SetConfig+0x242>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800558a:	4b4d      	ldr	r3, [pc, #308]	@ (80056c0 <UART_SetConfig+0x2c0>)
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	0692      	lsls	r2, r2, #26
 8005590:	d54c      	bpl.n	800562c <UART_SetConfig+0x22c>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	484b      	ldr	r0, [pc, #300]	@ (80056c4 <UART_SetConfig+0x2c4>)
 8005596:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800559a:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800559c:	e003      	b.n	80055a6 <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800559e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) CSI_VALUE;
 80055a2:	4849      	ldr	r0, [pc, #292]	@ (80056c8 <UART_SetConfig+0x2c8>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a4:	d027      	beq.n	80055f6 <UART_SetConfig+0x1f6>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055a6:	4a49      	ldr	r2, [pc, #292]	@ (80056cc <UART_SetConfig+0x2cc>)
 80055a8:	6863      	ldr	r3, [r4, #4]
 80055aa:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055ae:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055b2:	fbb0 f0f1 	udiv	r0, r0, r1
 80055b6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80055ba:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055be:	f1a0 0310 	sub.w	r3, r0, #16
 80055c2:	4293      	cmp	r3, r2
 80055c4:	f63f af5c 	bhi.w	8005480 <UART_SetConfig+0x80>
          huart->Instance->BRR = usartdiv;
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	60d8      	str	r0, [r3, #12]
          pclk = (uint32_t) HSI_VALUE;
 80055cc:	2000      	movs	r0, #0
 80055ce:	e758      	b.n	8005482 <UART_SetConfig+0x82>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055d0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80055d4:	d00f      	beq.n	80055f6 <UART_SetConfig+0x1f6>
        pclk = (uint32_t) LSE_VALUE;
 80055d6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80055da:	e7e4      	b.n	80055a6 <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055dc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80055e0:	d026      	beq.n	8005630 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e2:	f7fe f8df 	bl	80037a4 <HAL_RCC_GetPCLK1Freq>
        break;
 80055e6:	e7c2      	b.n	800556e <UART_SetConfig+0x16e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055e8:	4668      	mov	r0, sp
 80055ea:	f7ff f9bb 	bl	8004964 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055ee:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 80055f0:	2800      	cmp	r0, #0
 80055f2:	d0eb      	beq.n	80055cc <UART_SetConfig+0x1cc>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055f4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80055f6:	4b35      	ldr	r3, [pc, #212]	@ (80056cc <UART_SetConfig+0x2cc>)
 80055f8:	6862      	ldr	r2, [r4, #4]
 80055fa:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 80055fe:	0853      	lsrs	r3, r2, #1
 8005600:	fbb0 f0f1 	udiv	r0, r0, r1
 8005604:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005608:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800560c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005610:	f1a3 0210 	sub.w	r2, r3, #16
 8005614:	428a      	cmp	r2, r1
 8005616:	f63f af33 	bhi.w	8005480 <UART_SetConfig+0x80>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800561a:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800561e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8005622:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005624:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8005626:	4313      	orrs	r3, r2
 8005628:	60cb      	str	r3, [r1, #12]
 800562a:	e7cf      	b.n	80055cc <UART_SetConfig+0x1cc>
          pclk = (uint32_t) HSI_VALUE;
 800562c:	4825      	ldr	r0, [pc, #148]	@ (80056c4 <UART_SetConfig+0x2c4>)
 800562e:	e7ba      	b.n	80055a6 <UART_SetConfig+0x1a6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005630:	f7fe f8b8 	bl	80037a4 <HAL_RCC_GetPCLK1Freq>
        break;
 8005634:	e7dc      	b.n	80055f0 <UART_SetConfig+0x1f0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005636:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800563a:	d012      	beq.n	8005662 <UART_SetConfig+0x262>
        pclk = HAL_RCC_GetPCLK2Freq();
 800563c:	f7fe f8fa 	bl	8003834 <HAL_RCC_GetPCLK2Freq>
        break;
 8005640:	e795      	b.n	800556e <UART_SetConfig+0x16e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005642:	4b1f      	ldr	r3, [pc, #124]	@ (80056c0 <UART_SetConfig+0x2c0>)
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	0691      	lsls	r1, r2, #26
 8005648:	f140 808a 	bpl.w	8005760 <UART_SetConfig+0x360>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	481d      	ldr	r0, [pc, #116]	@ (80056c4 <UART_SetConfig+0x2c4>)
 8005650:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005654:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8005656:	e7ce      	b.n	80055f6 <UART_SetConfig+0x1f6>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005658:	a803      	add	r0, sp, #12
 800565a:	f7ff fa1d 	bl	8004a98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800565e:	9804      	ldr	r0, [sp, #16]
        break;
 8005660:	e7c6      	b.n	80055f0 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005662:	f7fe f8e7 	bl	8003834 <HAL_RCC_GetPCLK2Freq>
        break;
 8005666:	e7c3      	b.n	80055f0 <UART_SetConfig+0x1f0>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005668:	6898      	ldr	r0, [r3, #8]
 800566a:	4a0c      	ldr	r2, [pc, #48]	@ (800569c <UART_SetConfig+0x29c>)
 800566c:	4002      	ands	r2, r0
 800566e:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005670:	4913      	ldr	r1, [pc, #76]	@ (80056c0 <UART_SetConfig+0x2c0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005672:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005676:	f022 020f 	bic.w	r2, r2, #15
 800567a:	432a      	orrs	r2, r5
 800567c:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800567e:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	2b05      	cmp	r3, #5
 8005686:	f63f aefb 	bhi.w	8005480 <UART_SetConfig+0x80>
 800568a:	e8df f003 	tbb	[pc, r3]
 800568e:	565b      	.short	0x565b
 8005690:	5e61214d 	.word	0x5e61214d
 8005694:	cfff69f3 	.word	0xcfff69f3
 8005698:	58000c00 	.word	0x58000c00
 800569c:	11fff4ff 	.word	0x11fff4ff
 80056a0:	40011000 	.word	0x40011000
 80056a4:	40004400 	.word	0x40004400
 80056a8:	40004800 	.word	0x40004800
 80056ac:	40004c00 	.word	0x40004c00
 80056b0:	40005000 	.word	0x40005000
 80056b4:	40011400 	.word	0x40011400
 80056b8:	40007800 	.word	0x40007800
 80056bc:	40007c00 	.word	0x40007c00
 80056c0:	58024400 	.word	0x58024400
 80056c4:	03d09000 	.word	0x03d09000
 80056c8:	003d0900 	.word	0x003d0900
 80056cc:	08005cb4 	.word	0x08005cb4
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056d0:	4b24      	ldr	r3, [pc, #144]	@ (8005764 <UART_SetConfig+0x364>)
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	0690      	lsls	r0, r2, #26
 80056d6:	d43d      	bmi.n	8005754 <UART_SetConfig+0x354>
          pclk = (uint32_t) HSI_VALUE;
 80056d8:	4823      	ldr	r0, [pc, #140]	@ (8005768 <UART_SetConfig+0x368>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056da:	4b24      	ldr	r3, [pc, #144]	@ (800576c <UART_SetConfig+0x36c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056dc:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056de:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056e2:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056e6:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056ea:	4299      	cmp	r1, r3
 80056ec:	f63f aec8 	bhi.w	8005480 <UART_SetConfig+0x80>
 80056f0:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 80056f4:	f63f aec4 	bhi.w	8005480 <UART_SetConfig+0x80>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056f8:	2300      	movs	r3, #0
 80056fa:	4619      	mov	r1, r3
 80056fc:	f7fa fdec 	bl	80002d8 <__aeabi_uldivmod>
 8005700:	4632      	mov	r2, r6
 8005702:	0209      	lsls	r1, r1, #8
 8005704:	0203      	lsls	r3, r0, #8
 8005706:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800570a:	0870      	lsrs	r0, r6, #1
 800570c:	1818      	adds	r0, r3, r0
 800570e:	f04f 0300 	mov.w	r3, #0
 8005712:	f141 0100 	adc.w	r1, r1, #0
 8005716:	f7fa fddf 	bl	80002d8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800571a:	4b15      	ldr	r3, [pc, #84]	@ (8005770 <UART_SetConfig+0x370>)
 800571c:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8005720:	429a      	cmp	r2, r3
 8005722:	f63f aead 	bhi.w	8005480 <UART_SetConfig+0x80>
 8005726:	e74f      	b.n	80055c8 <UART_SetConfig+0x1c8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005728:	a803      	add	r0, sp, #12
 800572a:	f7ff f9b5 	bl	8004a98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800572e:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8005730:	2800      	cmp	r0, #0
 8005732:	f43f af4b 	beq.w	80055cc <UART_SetConfig+0x1cc>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005736:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8005738:	e7cf      	b.n	80056da <UART_SetConfig+0x2da>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800573a:	4668      	mov	r0, sp
 800573c:	f7ff f912 	bl	8004964 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005740:	9801      	ldr	r0, [sp, #4]
        break;
 8005742:	e7f5      	b.n	8005730 <UART_SetConfig+0x330>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005744:	f7ff f8fc 	bl	8004940 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8005748:	e7f2      	b.n	8005730 <UART_SetConfig+0x330>
        pclk = (uint32_t) LSE_VALUE;
 800574a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800574e:	e7c4      	b.n	80056da <UART_SetConfig+0x2da>
        pclk = (uint32_t) CSI_VALUE;
 8005750:	4808      	ldr	r0, [pc, #32]	@ (8005774 <UART_SetConfig+0x374>)
 8005752:	e7c2      	b.n	80056da <UART_SetConfig+0x2da>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4804      	ldr	r0, [pc, #16]	@ (8005768 <UART_SetConfig+0x368>)
 8005758:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800575c:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800575e:	e7bc      	b.n	80056da <UART_SetConfig+0x2da>
          pclk = (uint32_t) HSI_VALUE;
 8005760:	4801      	ldr	r0, [pc, #4]	@ (8005768 <UART_SetConfig+0x368>)
 8005762:	e748      	b.n	80055f6 <UART_SetConfig+0x1f6>
 8005764:	58024400 	.word	0x58024400
 8005768:	03d09000 	.word	0x03d09000
 800576c:	08005cb4 	.word	0x08005cb4
 8005770:	000ffcff 	.word	0x000ffcff
 8005774:	003d0900 	.word	0x003d0900

08005778 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005778:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800577a:	071a      	lsls	r2, r3, #28
{
 800577c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800577e:	d506      	bpl.n	800578e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005780:	6801      	ldr	r1, [r0, #0]
 8005782:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005784:	684a      	ldr	r2, [r1, #4]
 8005786:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800578a:	4322      	orrs	r2, r4
 800578c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800578e:	07dc      	lsls	r4, r3, #31
 8005790:	d506      	bpl.n	80057a0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005792:	6801      	ldr	r1, [r0, #0]
 8005794:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8005796:	684a      	ldr	r2, [r1, #4]
 8005798:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800579c:	4322      	orrs	r2, r4
 800579e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057a0:	0799      	lsls	r1, r3, #30
 80057a2:	d506      	bpl.n	80057b2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057a4:	6801      	ldr	r1, [r0, #0]
 80057a6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80057a8:	684a      	ldr	r2, [r1, #4]
 80057aa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80057ae:	4322      	orrs	r2, r4
 80057b0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057b2:	075a      	lsls	r2, r3, #29
 80057b4:	d506      	bpl.n	80057c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057b6:	6801      	ldr	r1, [r0, #0]
 80057b8:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80057ba:	684a      	ldr	r2, [r1, #4]
 80057bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80057c0:	4322      	orrs	r2, r4
 80057c2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057c4:	06dc      	lsls	r4, r3, #27
 80057c6:	d506      	bpl.n	80057d6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057c8:	6801      	ldr	r1, [r0, #0]
 80057ca:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80057cc:	688a      	ldr	r2, [r1, #8]
 80057ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80057d2:	4322      	orrs	r2, r4
 80057d4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057d6:	0699      	lsls	r1, r3, #26
 80057d8:	d506      	bpl.n	80057e8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057da:	6801      	ldr	r1, [r0, #0]
 80057dc:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80057de:	688a      	ldr	r2, [r1, #8]
 80057e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057e4:	4322      	orrs	r2, r4
 80057e6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057e8:	065a      	lsls	r2, r3, #25
 80057ea:	d50a      	bpl.n	8005802 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057ec:	6801      	ldr	r1, [r0, #0]
 80057ee:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80057f0:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057f2:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057f6:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80057fa:	ea42 0204 	orr.w	r2, r2, r4
 80057fe:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005800:	d00b      	beq.n	800581a <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005802:	061b      	lsls	r3, r3, #24
 8005804:	d506      	bpl.n	8005814 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005806:	6802      	ldr	r2, [r0, #0]
 8005808:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800580a:	6853      	ldr	r3, [r2, #4]
 800580c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005810:	430b      	orrs	r3, r1
 8005812:	6053      	str	r3, [r2, #4]
  }
}
 8005814:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005818:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800581a:	684a      	ldr	r2, [r1, #4]
 800581c:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800581e:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8005822:	4322      	orrs	r2, r4
 8005824:	604a      	str	r2, [r1, #4]
 8005826:	e7ec      	b.n	8005802 <UART_AdvFeatureConfig+0x8a>

08005828 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005828:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800582a:	2300      	movs	r3, #0
{
 800582c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800582e:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005832:	f7fb fe9f 	bl	8001574 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005836:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8005838:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800583a:	6813      	ldr	r3, [r2, #0]
 800583c:	071b      	lsls	r3, r3, #28
 800583e:	d40f      	bmi.n	8005860 <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005840:	6813      	ldr	r3, [r2, #0]
 8005842:	0759      	lsls	r1, r3, #29
 8005844:	d431      	bmi.n	80058aa <UART_CheckIdleState+0x82>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005846:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005848:	2220      	movs	r2, #32
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 800584a:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800584c:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005850:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005854:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005856:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8005858:	2300      	movs	r3, #0
 800585a:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800585e:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005860:	69d3      	ldr	r3, [r2, #28]
 8005862:	0298      	lsls	r0, r3, #10
 8005864:	d4ec      	bmi.n	8005840 <UART_CheckIdleState+0x18>
 8005866:	e00c      	b.n	8005882 <UART_CheckIdleState+0x5a>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005868:	6819      	ldr	r1, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	0749      	lsls	r1, r1, #29
 800586e:	d505      	bpl.n	800587c <UART_CheckIdleState+0x54>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005870:	69d9      	ldr	r1, [r3, #28]
 8005872:	0708      	lsls	r0, r1, #28
 8005874:	d44a      	bmi.n	800590c <UART_CheckIdleState+0xe4>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005876:	69d9      	ldr	r1, [r3, #28]
 8005878:	0509      	lsls	r1, r1, #20
 800587a:	d475      	bmi.n	8005968 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	0298      	lsls	r0, r3, #10
 8005880:	d4de      	bmi.n	8005840 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005882:	f7fb fe77 	bl	8001574 <HAL_GetTick>
 8005886:	1b43      	subs	r3, r0, r5
 8005888:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800588c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800588e:	d3eb      	bcc.n	8005868 <UART_CheckIdleState+0x40>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005894:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005898:	e843 2100 	strex	r1, r2, [r3]
 800589c:	2900      	cmp	r1, #0
 800589e:	d1f7      	bne.n	8005890 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 80058a0:	2320      	movs	r3, #32
 80058a2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 80058a6:	2003      	movs	r0, #3
 80058a8:	e7d6      	b.n	8005858 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058aa:	69d3      	ldr	r3, [r2, #28]
 80058ac:	025b      	lsls	r3, r3, #9
 80058ae:	d4ca      	bmi.n	8005846 <UART_CheckIdleState+0x1e>
 80058b0:	e00d      	b.n	80058ce <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	0750      	lsls	r0, r2, #29
 80058b6:	d507      	bpl.n	80058c8 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058b8:	69da      	ldr	r2, [r3, #28]
 80058ba:	0711      	lsls	r1, r2, #28
 80058bc:	f100 8082 	bmi.w	80059c4 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058c0:	69da      	ldr	r2, [r3, #28]
 80058c2:	0512      	lsls	r2, r2, #20
 80058c4:	f100 80ac 	bmi.w	8005a20 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	025b      	lsls	r3, r3, #9
 80058cc:	d4bb      	bmi.n	8005846 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ce:	f7fb fe51 	bl	8001574 <HAL_GetTick>
 80058d2:	1b43      	subs	r3, r0, r5
 80058d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	d3ea      	bcc.n	80058b2 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058dc:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058e0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e4:	e843 2100 	strex	r1, r2, [r3]
 80058e8:	2900      	cmp	r1, #0
 80058ea:	d1f7      	bne.n	80058dc <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ec:	f103 0208 	add.w	r2, r3, #8
 80058f0:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f8:	f103 0008 	add.w	r0, r3, #8
 80058fc:	e840 2100 	strex	r1, r2, [r0]
 8005900:	2900      	cmp	r1, #0
 8005902:	d1f3      	bne.n	80058ec <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8005904:	2320      	movs	r3, #32
 8005906:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 800590a:	e7cc      	b.n	80058a6 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800590c:	2208      	movs	r2, #8
 800590e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005910:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005914:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	e843 2100 	strex	r1, r2, [r3]
 800591c:	2900      	cmp	r1, #0
 800591e:	d1f7      	bne.n	8005910 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005920:	4856      	ldr	r0, [pc, #344]	@ (8005a7c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005922:	f103 0208 	add.w	r2, r3, #8
 8005926:	e852 2f00 	ldrex	r2, [r2]
 800592a:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592c:	f103 0508 	add.w	r5, r3, #8
 8005930:	e845 2100 	strex	r1, r2, [r5]
 8005934:	2900      	cmp	r1, #0
 8005936:	d1f4      	bne.n	8005922 <UART_CheckIdleState+0xfa>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005938:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800593a:	2a01      	cmp	r2, #1
 800593c:	d00b      	beq.n	8005956 <UART_CheckIdleState+0x12e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005940:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005942:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8005944:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005948:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594a:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 800594c:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005950:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8005954:	e79c      	b.n	8005890 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800595a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595e:	e843 2100 	strex	r1, r2, [r3]
 8005962:	2900      	cmp	r1, #0
 8005964:	d1f7      	bne.n	8005956 <UART_CheckIdleState+0x12e>
 8005966:	e7ea      	b.n	800593e <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005968:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800596c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005972:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	e843 2100 	strex	r1, r2, [r3]
 800597a:	2900      	cmp	r1, #0
 800597c:	d1f7      	bne.n	800596e <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800597e:	483f      	ldr	r0, [pc, #252]	@ (8005a7c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	f103 0208 	add.w	r2, r3, #8
 8005984:	e852 2f00 	ldrex	r2, [r2]
 8005988:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	f103 0508 	add.w	r5, r3, #8
 800598e:	e845 2100 	strex	r1, r2, [r5]
 8005992:	2900      	cmp	r1, #0
 8005994:	d1f4      	bne.n	8005980 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005996:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8005998:	2a01      	cmp	r2, #1
 800599a:	d00a      	beq.n	80059b2 <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800599c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800599e:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 80059a0:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80059a2:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 80059a6:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059aa:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059ac:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 80059b0:	e76e      	b.n	8005890 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	e843 2100 	strex	r1, r2, [r3]
 80059be:	2900      	cmp	r1, #0
 80059c0:	d1f7      	bne.n	80059b2 <UART_CheckIdleState+0x18a>
 80059c2:	e7eb      	b.n	800599c <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059c4:	2208      	movs	r2, #8
 80059c6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059cc:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d0:	e843 2100 	strex	r1, r2, [r3]
 80059d4:	2900      	cmp	r1, #0
 80059d6:	d1f7      	bne.n	80059c8 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059d8:	4828      	ldr	r0, [pc, #160]	@ (8005a7c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059da:	f103 0208 	add.w	r2, r3, #8
 80059de:	e852 2f00 	ldrex	r2, [r2]
 80059e2:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	f103 0508 	add.w	r5, r3, #8
 80059e8:	e845 2100 	strex	r1, r2, [r5]
 80059ec:	2900      	cmp	r1, #0
 80059ee:	d1f4      	bne.n	80059da <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f0:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80059f2:	2a01      	cmp	r2, #1
 80059f4:	d00b      	beq.n	8005a0e <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f6:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80059f8:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059fa:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80059fc:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8005a00:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a02:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8005a04:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a08:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8005a0c:	e766      	b.n	80058dc <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a12:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	e843 2100 	strex	r1, r2, [r3]
 8005a1a:	2900      	cmp	r1, #0
 8005a1c:	d1f7      	bne.n	8005a0e <UART_CheckIdleState+0x1e6>
 8005a1e:	e7ea      	b.n	80059f6 <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a24:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a2a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	e843 2100 	strex	r1, r2, [r3]
 8005a32:	2900      	cmp	r1, #0
 8005a34:	d1f7      	bne.n	8005a26 <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a36:	4811      	ldr	r0, [pc, #68]	@ (8005a7c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	f103 0208 	add.w	r2, r3, #8
 8005a3c:	e852 2f00 	ldrex	r2, [r2]
 8005a40:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a42:	f103 0508 	add.w	r5, r3, #8
 8005a46:	e845 2100 	strex	r1, r2, [r5]
 8005a4a:	2900      	cmp	r1, #0
 8005a4c:	d1f4      	bne.n	8005a38 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a4e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8005a50:	2a01      	cmp	r2, #1
 8005a52:	d00a      	beq.n	8005a6a <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a54:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005a56:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8005a58:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005a5a:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8005a5e:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a62:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a64:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8005a68:	e738      	b.n	80058dc <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a6e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	e843 2100 	strex	r1, r2, [r3]
 8005a76:	2900      	cmp	r1, #0
 8005a78:	d1f7      	bne.n	8005a6a <UART_CheckIdleState+0x242>
 8005a7a:	e7eb      	b.n	8005a54 <UART_CheckIdleState+0x22c>
 8005a7c:	effffffe 	.word	0xeffffffe

08005a80 <HAL_UART_Init>:
  if (huart == NULL)
 8005a80:	b380      	cbz	r0, 8005ae4 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005a82:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8005a86:	b510      	push	{r4, lr}
 8005a88:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005a8a:	b333      	cbz	r3, 8005ada <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8005a8c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005a8e:	2324      	movs	r3, #36	@ 0x24
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a90:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 8005a92:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8005a96:	6813      	ldr	r3, [r2, #0]
 8005a98:	f023 0301 	bic.w	r3, r3, #1
 8005a9c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a9e:	b9c1      	cbnz	r1, 8005ad2 <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f7ff fcad 	bl	8005400 <UART_SetConfig>
 8005aa6:	2801      	cmp	r0, #1
 8005aa8:	d011      	beq.n	8005ace <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aaa:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8005aac:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ab4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005abc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	f042 0201 	orr.w	r2, r2, #1
}
 8005ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8005ac8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005aca:	f7ff bead 	b.w	8005828 <UART_CheckIdleState>
}
 8005ace:	2001      	movs	r0, #1
 8005ad0:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f7ff fe50 	bl	8005778 <UART_AdvFeatureConfig>
 8005ad8:	e7e2      	b.n	8005aa0 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8005ada:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8005ade:	f7fb fbbd 	bl	800125c <HAL_UART_MspInit>
 8005ae2:	e7d3      	b.n	8005a8c <HAL_UART_Init+0xc>
}
 8005ae4:	2001      	movs	r0, #1
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ae8:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8005aec:	2a01      	cmp	r2, #1
 8005aee:	d017      	beq.n	8005b20 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005af0:	6802      	ldr	r2, [r0, #0]
 8005af2:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8005af4:	2024      	movs	r0, #36	@ 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005af6:	2100      	movs	r1, #0
{
 8005af8:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 8005afa:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8005afe:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b00:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005b02:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b04:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8005b08:	f024 0401 	bic.w	r4, r4, #1
 8005b0c:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b0e:	6659      	str	r1, [r3, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b10:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8005b12:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005b14:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8005b18:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8005b1c:	bc30      	pop	{r4, r5}
 8005b1e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005b20:	2002      	movs	r0, #2
}
 8005b22:	4770      	bx	lr

08005b24 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b24:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8005b28:	2a01      	cmp	r2, #1
 8005b2a:	d037      	beq.n	8005b9c <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b2c:	6802      	ldr	r2, [r0, #0]
 8005b2e:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8005b30:	2024      	movs	r0, #36	@ 0x24
{
 8005b32:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8005b34:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b38:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b3a:	6810      	ldr	r0, [r2, #0]
 8005b3c:	f020 0001 	bic.w	r0, r0, #1
 8005b40:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b42:	6890      	ldr	r0, [r2, #8]
 8005b44:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8005b48:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b4a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b4c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b4e:	b310      	cbz	r0, 8005b96 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b50:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b52:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b54:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b58:	4911      	ldr	r1, [pc, #68]	@ (8005ba0 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b5a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b5e:	4d11      	ldr	r5, [pc, #68]	@ (8005ba4 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b60:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b64:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b68:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b6c:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b6e:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b72:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b74:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b78:	fbb1 f1f5 	udiv	r1, r1, r5
 8005b7c:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 8005b80:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8005b82:	2100      	movs	r1, #0
 8005b84:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b88:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8005b8a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005b8c:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8005b90:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8005b94:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8005b96:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8005b98:	4608      	mov	r0, r1
 8005b9a:	e7ef      	b.n	8005b7c <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8005b9c:	2002      	movs	r0, #2
}
 8005b9e:	4770      	bx	lr
 8005ba0:	08005cd4 	.word	0x08005cd4
 8005ba4:	08005ccc 	.word	0x08005ccc

08005ba8 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8005ba8:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8005bac:	2a01      	cmp	r2, #1
 8005bae:	d037      	beq.n	8005c20 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bb0:	6802      	ldr	r2, [r0, #0]
 8005bb2:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8005bb4:	2024      	movs	r0, #36	@ 0x24
{
 8005bb6:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8005bb8:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bbc:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005bbe:	6810      	ldr	r0, [r2, #0]
 8005bc0:	f020 0001 	bic.w	r0, r0, #1
 8005bc4:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005bc6:	6890      	ldr	r0, [r2, #8]
 8005bc8:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8005bcc:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005bce:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005bd0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005bd2:	b310      	cbz	r0, 8005c1a <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005bd4:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005bd6:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bd8:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bdc:	4911      	ldr	r1, [pc, #68]	@ (8005c24 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005bde:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8005be2:	4d11      	ldr	r5, [pc, #68]	@ (8005c28 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005be4:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005be8:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8005bec:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bf0:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8005bf2:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bf6:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bf8:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bfc:	fbb1 f1f5 	udiv	r1, r1, r5
 8005c00:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 8005c04:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8005c06:	2100      	movs	r1, #0
 8005c08:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c0c:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8005c0e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005c10:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8005c14:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8005c18:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8005c1a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8005c1c:	4608      	mov	r0, r1
 8005c1e:	e7ef      	b.n	8005c00 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8005c20:	2002      	movs	r0, #2
}
 8005c22:	4770      	bx	lr
 8005c24:	08005cd4 	.word	0x08005cd4
 8005c28:	08005ccc 	.word	0x08005ccc

08005c2c <memset>:
 8005c2c:	4402      	add	r2, r0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d100      	bne.n	8005c36 <memset+0xa>
 8005c34:	4770      	bx	lr
 8005c36:	f803 1b01 	strb.w	r1, [r3], #1
 8005c3a:	e7f9      	b.n	8005c30 <memset+0x4>

08005c3c <__libc_init_array>:
 8005c3c:	b570      	push	{r4, r5, r6, lr}
 8005c3e:	4d0d      	ldr	r5, [pc, #52]	@ (8005c74 <__libc_init_array+0x38>)
 8005c40:	4c0d      	ldr	r4, [pc, #52]	@ (8005c78 <__libc_init_array+0x3c>)
 8005c42:	1b64      	subs	r4, r4, r5
 8005c44:	10a4      	asrs	r4, r4, #2
 8005c46:	2600      	movs	r6, #0
 8005c48:	42a6      	cmp	r6, r4
 8005c4a:	d109      	bne.n	8005c60 <__libc_init_array+0x24>
 8005c4c:	4d0b      	ldr	r5, [pc, #44]	@ (8005c7c <__libc_init_array+0x40>)
 8005c4e:	4c0c      	ldr	r4, [pc, #48]	@ (8005c80 <__libc_init_array+0x44>)
 8005c50:	f000 f818 	bl	8005c84 <_init>
 8005c54:	1b64      	subs	r4, r4, r5
 8005c56:	10a4      	asrs	r4, r4, #2
 8005c58:	2600      	movs	r6, #0
 8005c5a:	42a6      	cmp	r6, r4
 8005c5c:	d105      	bne.n	8005c6a <__libc_init_array+0x2e>
 8005c5e:	bd70      	pop	{r4, r5, r6, pc}
 8005c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c64:	4798      	blx	r3
 8005c66:	3601      	adds	r6, #1
 8005c68:	e7ee      	b.n	8005c48 <__libc_init_array+0xc>
 8005c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c6e:	4798      	blx	r3
 8005c70:	3601      	adds	r6, #1
 8005c72:	e7f2      	b.n	8005c5a <__libc_init_array+0x1e>
 8005c74:	08005ce4 	.word	0x08005ce4
 8005c78:	08005ce4 	.word	0x08005ce4
 8005c7c:	08005ce4 	.word	0x08005ce4
 8005c80:	08005ce8 	.word	0x08005ce8

08005c84 <_init>:
 8005c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c86:	bf00      	nop
 8005c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8a:	bc08      	pop	{r3}
 8005c8c:	469e      	mov	lr, r3
 8005c8e:	4770      	bx	lr

08005c90 <_fini>:
 8005c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c92:	bf00      	nop
 8005c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c96:	bc08      	pop	{r3}
 8005c98:	469e      	mov	lr, r3
 8005c9a:	4770      	bx	lr
