
GPIO_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082ac  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008544  08008544  00009544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008584  08008584  00009584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800858c  0800858c  0000958c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008590  08008590  00009590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08008594  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a24  24000010  080085a4  0000a010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000a34  080085a4  0000aa34  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018928  00000000  00000000  0000a03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002aad  00000000  00000000  00022966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001310  00000000  00000000  00025418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ee2  00000000  00000000  00026728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039213  00000000  00000000  0002760a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001add5  00000000  00000000  0006081d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00176549  00000000  00000000  0007b5f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f1b3b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005168  00000000  00000000  001f1b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007b  00000000  00000000  001f6ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800852c 	.word	0x0800852c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800852c 	.word	0x0800852c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ADC_custom_init>:
bool triggd = false;
bool pre_triggd = false;
uint16_t trig_indx = 0;


void ADC_custom_init(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

	ADC3->SQR1=0; // Resetto il registro per cancellare modifice dell'IDE
 80005cc:	4b33      	ldr	r3, [pc, #204]	@ (800069c <ADC_custom_init+0xd4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere (0 = 1 canale)
 80005d2:	4b32      	ldr	r3, [pc, #200]	@ (800069c <ADC_custom_init+0xd4>)
 80005d4:	4a31      	ldr	r2, [pc, #196]	@ (800069c <ADC_custom_init+0xd4>)
 80005d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_SQ1_Pos);	// Inidco i canali da accendere
 80005da:	4b30      	ldr	r3, [pc, #192]	@ (800069c <ADC_custom_init+0xd4>)
 80005dc:	4a2f      	ldr	r2, [pc, #188]	@ (800069c <ADC_custom_init+0xd4>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->PCSEL |= ADC_PCSEL_PCSEL_0;		// Selezioni i canali da leggere
 80005e2:	4b2e      	ldr	r3, [pc, #184]	@ (800069c <ADC_custom_init+0xd4>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a2d      	ldr	r2, [pc, #180]	@ (800069c <ADC_custom_init+0xd4>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	61d3      	str	r3, [r2, #28]

	/* Fase di calibrazione */
	ADC3->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 80005ee:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <ADC_custom_init+0xd4>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	4a2a      	ldr	r2, [pc, #168]	@ (800069c <ADC_custom_init+0xd4>)
 80005f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80005f8:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 80005fa:	4b28      	ldr	r3, [pc, #160]	@ (800069c <ADC_custom_init+0xd4>)
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	4a27      	ldr	r2, [pc, #156]	@ (800069c <ADC_custom_init+0xd4>)
 8000600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000604:	6093      	str	r3, [r2, #8]
	ADC3->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 8000606:	4b25      	ldr	r3, [pc, #148]	@ (800069c <ADC_custom_init+0xd4>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	4a24      	ldr	r2, [pc, #144]	@ (800069c <ADC_custom_init+0xd4>)
 800060c:	f023 0301 	bic.w	r3, r3, #1
 8000610:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 8000612:	4b22      	ldr	r3, [pc, #136]	@ (800069c <ADC_custom_init+0xd4>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	4a21      	ldr	r2, [pc, #132]	@ (800069c <ADC_custom_init+0xd4>)
 8000618:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800061c:	6093      	str	r3, [r2, #8]

	while((ADC3->CR & ADC_CR_ADCAL) != 0){};
 800061e:	bf00      	nop
 8000620:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <ADC_custom_init+0xd4>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	2b00      	cmp	r3, #0
 8000626:	dbfb      	blt.n	8000620 <ADC_custom_init+0x58>
	/* Fine fase di calibrazione */

	/* Accensione ADC */
	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 8000628:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <ADC_custom_init+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1b      	ldr	r2, [pc, #108]	@ (800069c <ADC_custom_init+0xd4>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]
	ADC3->CR |= ADC_CR_ADEN;		// Abilito l'ADC
 8000634:	4b19      	ldr	r3, [pc, #100]	@ (800069c <ADC_custom_init+0xd4>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	4a18      	ldr	r2, [pc, #96]	@ (800069c <ADC_custom_init+0xd4>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6093      	str	r3, [r2, #8]

	while((ADC3->ISR & ADC_ISR_ADRDY) != 0){}	// Aspetto che il flag cambi
 8000640:	bf00      	nop
 8000642:	4b16      	ldr	r3, [pc, #88]	@ (800069c <ADC_custom_init+0xd4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f9      	bne.n	8000642 <ADC_custom_init+0x7a>

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 800064e:	4b13      	ldr	r3, [pc, #76]	@ (800069c <ADC_custom_init+0xd4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a12      	ldr	r2, [pc, #72]	@ (800069c <ADC_custom_init+0xd4>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6013      	str	r3, [r2, #0]
	/* Fine istruzioni per l'accensione */

	/* Impostazioni TIMER per triggerare l'nizio della misura */
	TIM6->PSC = 12;	// 240/12 = 20Mhz
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <ADC_custom_init+0xd8>)
 800065c:	220c      	movs	r2, #12
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 1;	// 20Mhz / 10 = 2Mhz
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <ADC_custom_init+0xd8>)
 8000662:	2201      	movs	r2, #1
 8000664:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->CNT = 0;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <ADC_custom_init+0xd8>)
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->DIER &= ~TIM_DIER_UIE;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <ADC_custom_init+0xd8>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	4a0b      	ldr	r2, [pc, #44]	@ (80006a0 <ADC_custom_init+0xd8>)
 8000672:	f023 0301 	bic.w	r3, r3, #1
 8000676:	60d3      	str	r3, [r2, #12]
	TIM6->CR1 &= ~TIM_CR1_CEN;
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <ADC_custom_init+0xd8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a08      	ldr	r2, [pc, #32]	@ (80006a0 <ADC_custom_init+0xd8>)
 800067e:	f023 0301 	bic.w	r3, r3, #1
 8000682:	6013      	str	r3, [r2, #0]
	/* Fine sett. TImer */

	ADC3->IER |= ADC_IER_EOCIE;		// Abilito l'interrupt di fine conversione
 8000684:	4b05      	ldr	r3, [pc, #20]	@ (800069c <ADC_custom_init+0xd4>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	4a04      	ldr	r2, [pc, #16]	@ (800069c <ADC_custom_init+0xd4>)
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	6053      	str	r3, [r2, #4]
//	ADC3->CR  |= ADC_CR_ADSTART;	// Inizio le misurazioni
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	58026000 	.word	0x58026000
 80006a0:	40001000 	.word	0x40001000

080006a4 <EXTI_custom_interrupt>:


void EXTI_custom_interrupt(){
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

	if((TIM6->CR1 & TIM_CR1_CEN) == 0){
 80006a8:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <EXTI_custom_interrupt+0x3c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d10f      	bne.n	80006d4 <EXTI_custom_interrupt+0x30>

		DMA1_Stream0->NDTR = 1000;
 80006b4:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <EXTI_custom_interrupt+0x40>)
 80006b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006ba:	605a      	str	r2, [r3, #4]

		GPIOB->BSRR |= GPIO_BSRR_BS0;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	@ (80006e8 <EXTI_custom_interrupt+0x44>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a09      	ldr	r2, [pc, #36]	@ (80006e8 <EXTI_custom_interrupt+0x44>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6193      	str	r3, [r2, #24]

		TIM6->CR1 |= TIM_CR1_CEN;
 80006c8:	4b05      	ldr	r3, [pc, #20]	@ (80006e0 <EXTI_custom_interrupt+0x3c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a04      	ldr	r2, [pc, #16]	@ (80006e0 <EXTI_custom_interrupt+0x3c>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6013      	str	r3, [r2, #0]
	}
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40001000 	.word	0x40001000
 80006e4:	40020010 	.word	0x40020010
 80006e8:	58020400 	.word	0x58020400

080006ec <DMA_custom_init>:

#define DMA_DATA_BUFF_SIZE 1000

uint16_t DMA_data_buffer[DMA_DATA_BUFF_SIZE];

void DMA_custom_init(){
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0

	DMA1_Stream0->M0AR = (uint32_t) (&DMA_data_buffer);	// inidico l'indirizzo dello storarge di dati
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <DMA_custom_init+0x88>)
 80006f4:	4a20      	ldr	r2, [pc, #128]	@ (8000778 <DMA_custom_init+0x8c>)
 80006f6:	60da      	str	r2, [r3, #12]
	DMA1_Stream1->M0AR = (uint32_t) (&DMA_data_buffer);
 80006f8:	4b20      	ldr	r3, [pc, #128]	@ (800077c <DMA_custom_init+0x90>)
 80006fa:	4a1f      	ldr	r2, [pc, #124]	@ (8000778 <DMA_custom_init+0x8c>)
 80006fc:	60da      	str	r2, [r3, #12]

	DMA1_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <DMA_custom_init+0x88>)
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <DMA_custom_init+0x94>)
 8000702:	609a      	str	r2, [r3, #8]
	DMA1_Stream1->PAR = (uint32_t) (&USART3->TDR);
 8000704:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <DMA_custom_init+0x90>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <DMA_custom_init+0x98>)
 8000708:	609a      	str	r2, [r3, #8]

	uint32_t n_misure = DMA_DATA_BUFF_SIZE;
 800070a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800070e:	607b      	str	r3, [r7, #4]

	DMA1_Stream0->NDTR = n_misure;			// numero elementi da prendere da ADC3
 8000710:	4a18      	ldr	r2, [pc, #96]	@ (8000774 <DMA_custom_init+0x88>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6053      	str	r3, [r2, #4]
	DMA1_Stream1->NDTR = n_misure*2;			// numero elementi da mandare a USART3
 8000716:	4a19      	ldr	r2, [pc, #100]	@ (800077c <DMA_custom_init+0x90>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	6053      	str	r3, [r2, #4]

	DMA1_Stream0->CR |= DMA_SxCR_TCIE;		// disablilito interrupt di fine ricezione
 800071e:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <DMA_custom_init+0x88>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a14      	ldr	r2, [pc, #80]	@ (8000774 <DMA_custom_init+0x88>)
 8000724:	f043 0310 	orr.w	r3, r3, #16
 8000728:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_TCIE;		// abilito interrupt di fine trasmissione
 800072a:	4b14      	ldr	r3, [pc, #80]	@ (800077c <DMA_custom_init+0x90>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a13      	ldr	r2, [pc, #76]	@ (800077c <DMA_custom_init+0x90>)
 8000730:	f043 0310 	orr.w	r3, r3, #16
 8000734:	6013      	str	r3, [r2, #0]

	ADC3->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);	// DMA in cont mode
 8000736:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <DMA_custom_init+0x9c>)
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	4a13      	ldr	r2, [pc, #76]	@ (8000788 <DMA_custom_init+0x9c>)
 800073c:	f043 0303 	orr.w	r3, r3, #3
 8000740:	60d3      	str	r3, [r2, #12]

	DMA1_Stream0->CR |= DMA_SxCR_EN;
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <DMA_custom_init+0x88>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a0b      	ldr	r2, [pc, #44]	@ (8000774 <DMA_custom_init+0x88>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_EN;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <DMA_custom_init+0x90>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a0a      	ldr	r2, [pc, #40]	@ (800077c <DMA_custom_init+0x90>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6013      	str	r3, [r2, #0]

	ADC3->CR  |= ADC_CR_ADSTART;
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <DMA_custom_init+0x9c>)
 800075c:	689b      	ldr	r3, [r3, #8]
 800075e:	4a0a      	ldr	r2, [pc, #40]	@ (8000788 <DMA_custom_init+0x9c>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6093      	str	r3, [r2, #8]
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40020010 	.word	0x40020010
 8000778:	2400002c 	.word	0x2400002c
 800077c:	40020028 	.word	0x40020028
 8000780:	58026040 	.word	0x58026040
 8000784:	40004828 	.word	0x40004828
 8000788:	58026000 	.word	0x58026000

0800078c <DMA_custom_interrupt_tx>:


void DMA_custom_interrupt_tx(){
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

	USART3->CR3 &= ~USART_CR3_DMAT;			  // SPENGO trasmissione usart
 8000790:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <DMA_custom_interrupt_tx+0x50>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	4a11      	ldr	r2, [pc, #68]	@ (80007dc <DMA_custom_interrupt_tx+0x50>)
 8000796:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800079a:	6093      	str	r3, [r2, #8]

	DMA1->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 800079c:	4b10      	ldr	r3, [pc, #64]	@ (80007e0 <DMA_custom_interrupt_tx+0x54>)
 800079e:	f04f 32ff 	mov.w	r2, #4294967295
 80007a2:	609a      	str	r2, [r3, #8]
	DMA1->HIFCR = 0xffffffff;
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <DMA_custom_interrupt_tx+0x54>)
 80007a6:	f04f 32ff 	mov.w	r2, #4294967295
 80007aa:	60da      	str	r2, [r3, #12]

	DMA1_Stream0->CR |= DMA_SxCR_EN;
 80007ac:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <DMA_custom_interrupt_tx+0x58>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0c      	ldr	r2, [pc, #48]	@ (80007e4 <DMA_custom_interrupt_tx+0x58>)
 80007b2:	f043 0301 	orr.w	r3, r3, #1
 80007b6:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_EN;
 80007b8:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <DMA_custom_interrupt_tx+0x5c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a0a      	ldr	r2, [pc, #40]	@ (80007e8 <DMA_custom_interrupt_tx+0x5c>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	6013      	str	r3, [r2, #0]

	GPIOB->BSRR |= GPIO_BSRR_BR0;
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <DMA_custom_interrupt_tx+0x60>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a08      	ldr	r2, [pc, #32]	@ (80007ec <DMA_custom_interrupt_tx+0x60>)
 80007ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007ce:	6193      	str	r3, [r2, #24]
//	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
//	USART3->TDR = (unsigned char)(trig_indx & 0xFF );
//	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
//	USART3->TDR = *((unsigned char*)&trig_indx + 1);
//	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40004800 	.word	0x40004800
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40020010 	.word	0x40020010
 80007e8:	40020028 	.word	0x40020028
 80007ec:	58020400 	.word	0x58020400

080007f0 <DMA_custom_interrupt_rx>:

void DMA_custom_interrupt_rx(){
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

	TIM6->CR1 &= ~TIM_CR1_CEN;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <DMA_custom_interrupt_rx+0x38>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000828 <DMA_custom_interrupt_rx+0x38>)
 80007fa:	f023 0301 	bic.w	r3, r3, #1
 80007fe:	6013      	str	r3, [r2, #0]

	USART3->CR3 |= USART_CR3_DMAT;
 8000800:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <DMA_custom_interrupt_rx+0x3c>)
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	4a09      	ldr	r2, [pc, #36]	@ (800082c <DMA_custom_interrupt_rx+0x3c>)
 8000806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800080a:	6093      	str	r3, [r2, #8]

	DMA1->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 800080c:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <DMA_custom_interrupt_rx+0x40>)
 800080e:	f04f 32ff 	mov.w	r2, #4294967295
 8000812:	609a      	str	r2, [r3, #8]
	DMA1->HIFCR = 0xffffffff;
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <DMA_custom_interrupt_rx+0x40>)
 8000816:	f04f 32ff 	mov.w	r2, #4294967295
 800081a:	60da      	str	r2, [r3, #12]
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40001000 	.word	0x40001000
 800082c:	40004800 	.word	0x40004800
 8000830:	40020000 	.word	0x40020000

08000834 <USART_custom_init>:
 *      Author: yehan
 */

#include "Custom_USART.h"

void USART_custom_init(){
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

	USART3->CR1 |= USART_CR1_TE;
 8000838:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <USART_custom_init+0x4c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a10      	ldr	r2, [pc, #64]	@ (8000880 <USART_custom_init+0x4c>)
 800083e:	f043 0308 	orr.w	r3, r3, #8
 8000842:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_RE;
 8000844:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <USART_custom_init+0x4c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0d      	ldr	r2, [pc, #52]	@ (8000880 <USART_custom_init+0x4c>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	6013      	str	r3, [r2, #0]

	USART3->CR1 &= ~USART_CR1_TXEIE;
 8000850:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <USART_custom_init+0x4c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0a      	ldr	r2, [pc, #40]	@ (8000880 <USART_custom_init+0x4c>)
 8000856:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800085a:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_RXNEIE;
 800085c:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <USART_custom_init+0x4c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a07      	ldr	r2, [pc, #28]	@ (8000880 <USART_custom_init+0x4c>)
 8000862:	f043 0320 	orr.w	r3, r3, #32
 8000866:	6013      	str	r3, [r2, #0]

	USART3->CR1 |= USART_CR1_UE;
 8000868:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <USART_custom_init+0x4c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a04      	ldr	r2, [pc, #16]	@ (8000880 <USART_custom_init+0x4c>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	6013      	str	r3, [r2, #0]
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40004800 	.word	0x40004800

08000884 <USART_custom_interrupt>:

void USART_custom_interrupt(){
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0

	char data = USART3->RDR;
 800088a:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <USART_custom_interrupt+0x5c>)
 800088c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800088e:	71fb      	strb	r3, [r7, #7]

	if(data == '?'){
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	2b3f      	cmp	r3, #63	@ 0x3f
 8000894:	d10b      	bne.n	80008ae <USART_custom_interrupt+0x2a>

		USART3->CR3 &= ~USART_CR3_DMAT;	// spengo l'usart
 8000896:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <USART_custom_interrupt+0x5c>)
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	4a11      	ldr	r2, [pc, #68]	@ (80008e0 <USART_custom_interrupt+0x5c>)
 800089c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80008a0:	6093      	str	r3, [r2, #8]
		TIM6->CR1 |= TIM_CR1_CEN;		// accendo l'adc
 80008a2:	4b10      	ldr	r3, [pc, #64]	@ (80008e4 <USART_custom_interrupt+0x60>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a0f      	ldr	r2, [pc, #60]	@ (80008e4 <USART_custom_interrupt+0x60>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6013      	str	r3, [r2, #0]
	}

	USART3->ICR |= USART_ICR_ORECF;  //Cancella l'overrun. Capita quando si entra in debug
 80008ae:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <USART_custom_interrupt+0x5c>)
 80008b0:	6a1b      	ldr	r3, [r3, #32]
 80008b2:	4a0b      	ldr	r2, [pc, #44]	@ (80008e0 <USART_custom_interrupt+0x5c>)
 80008b4:	f043 0308 	orr.w	r3, r3, #8
 80008b8:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF;   //Azzeramento flag interrupt trasmissione
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <USART_custom_interrupt+0x5c>)
 80008bc:	6a1b      	ldr	r3, [r3, #32]
 80008be:	4a08      	ldr	r2, [pc, #32]	@ (80008e0 <USART_custom_interrupt+0x5c>)
 80008c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008c4:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 80008c6:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <USART_custom_interrupt+0x5c>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	4a05      	ldr	r2, [pc, #20]	@ (80008e0 <USART_custom_interrupt+0x5c>)
 80008cc:	f043 0308 	orr.w	r3, r3, #8
 80008d0:	6193      	str	r3, [r2, #24]
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40004800 	.word	0x40004800
 80008e4:	40001000 	.word	0x40001000

080008e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ec:	f000 fd8c 	bl	8001408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f0:	f000 f812 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f4:	f000 f9da 	bl	8000cac <MX_GPIO_Init>
  MX_DMA_Init();
 80008f8:	f000 f9b0 	bl	8000c5c <MX_DMA_Init>
  MX_ADC3_Init();
 80008fc:	f000 f8ba 	bl	8000a74 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8000900:	f000 f95e 	bl	8000bc0 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000904:	f000 f926 	bl	8000b54 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  ADC_custom_init();
 8000908:	f7ff fe5e 	bl	80005c8 <ADC_custom_init>
  USART_custom_init();
 800090c:	f7ff ff92 	bl	8000834 <USART_custom_init>
  DMA_custom_init();
 8000910:	f7ff feec 	bl	80006ec <DMA_custom_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <main+0x2c>

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b09e      	sub	sp, #120	@ 0x78
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000922:	224c      	movs	r2, #76	@ 0x4c
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f007 fdd4 	bl	80084d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	2220      	movs	r2, #32
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f007 fdcd 	bl	80084d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800093a:	2002      	movs	r0, #2
 800093c:	f002 fe44 	bl	80035c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	4b48      	ldr	r3, [pc, #288]	@ (8000a68 <SystemClock_Config+0x150>)
 8000946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000948:	4a47      	ldr	r2, [pc, #284]	@ (8000a68 <SystemClock_Config+0x150>)
 800094a:	f023 0301 	bic.w	r3, r3, #1
 800094e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000950:	4b45      	ldr	r3, [pc, #276]	@ (8000a68 <SystemClock_Config+0x150>)
 8000952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	4b44      	ldr	r3, [pc, #272]	@ (8000a6c <SystemClock_Config+0x154>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	4a43      	ldr	r2, [pc, #268]	@ (8000a6c <SystemClock_Config+0x154>)
 8000960:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000964:	6193      	str	r3, [r2, #24]
 8000966:	4b41      	ldr	r3, [pc, #260]	@ (8000a6c <SystemClock_Config+0x154>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000972:	bf00      	nop
 8000974:	4b3d      	ldr	r3, [pc, #244]	@ (8000a6c <SystemClock_Config+0x154>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800097c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000980:	d1f8      	bne.n	8000974 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	4b3b      	ldr	r3, [pc, #236]	@ (8000a70 <SystemClock_Config+0x158>)
 8000984:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000988:	4a39      	ldr	r2, [pc, #228]	@ (8000a70 <SystemClock_Config+0x158>)
 800098a:	f043 0302 	orr.w	r3, r3, #2
 800098e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000992:	4b37      	ldr	r3, [pc, #220]	@ (8000a70 <SystemClock_Config+0x158>)
 8000994:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000998:	f003 0302 	and.w	r3, r3, #2
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009a0:	2300      	movs	r3, #0
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	4b31      	ldr	r3, [pc, #196]	@ (8000a6c <SystemClock_Config+0x154>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a30      	ldr	r2, [pc, #192]	@ (8000a6c <SystemClock_Config+0x154>)
 80009aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b2e      	ldr	r3, [pc, #184]	@ (8000a6c <SystemClock_Config+0x154>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000a68 <SystemClock_Config+0x150>)
 80009bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009be:	4a2a      	ldr	r2, [pc, #168]	@ (8000a68 <SystemClock_Config+0x150>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009c6:	4b28      	ldr	r3, [pc, #160]	@ (8000a68 <SystemClock_Config+0x150>)
 80009c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009d2:	bf00      	nop
 80009d4:	4b25      	ldr	r3, [pc, #148]	@ (8000a6c <SystemClock_Config+0x154>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009e0:	d1f8      	bne.n	80009d4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e2:	2301      	movs	r3, #1
 80009e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009e6:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80009ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	2302      	movs	r3, #2
 80009ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f0:	2302      	movs	r3, #2
 80009f2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 80009f8:	2378      	movs	r3, #120	@ 0x78
 80009fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a00:	2304      	movs	r3, #4
 8000a02:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a08:	230c      	movs	r3, #12
 8000a0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f002 fe0f 	bl	800363c <HAL_RCC_OscConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000a24:	f000 fa7c 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a28:	233f      	movs	r3, #63	@ 0x3f
 8000a2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a34:	2308      	movs	r3, #8
 8000a36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a38:	2340      	movs	r3, #64	@ 0x40
 8000a3a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a3c:	2340      	movs	r3, #64	@ 0x40
 8000a3e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a46:	2340      	movs	r3, #64	@ 0x40
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	2104      	movs	r1, #4
 8000a50:	4618      	mov	r0, r3
 8000a52:	f003 fa4d 	bl	8003ef0 <HAL_RCC_ClockConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000a5c:	f000 fa60 	bl	8000f20 <Error_Handler>
  }
}
 8000a60:	bf00      	nop
 8000a62:	3778      	adds	r7, #120	@ 0x78
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	58000400 	.word	0x58000400
 8000a6c:	58024800 	.word	0x58024800
 8000a70:	58024400 	.word	0x58024400

08000a74 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
 8000a88:	615a      	str	r2, [r3, #20]
 8000a8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000a8e:	4a30      	ldr	r2, [pc, #192]	@ (8000b50 <MX_ADC3_Init+0xdc>)
 8000a90:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a92:	4b2e      	ldr	r3, [pc, #184]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a98:	4b2c      	ldr	r3, [pc, #176]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000aa4:	4b29      	ldr	r3, [pc, #164]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000aaa:	4b28      	ldr	r3, [pc, #160]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000ab0:	4b26      	ldr	r3, [pc, #152]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ab6:	4b25      	ldr	r3, [pc, #148]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000abc:	4b23      	ldr	r3, [pc, #140]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000abe:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000ac2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ac4:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ac6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000ade:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000aec:	4817      	ldr	r0, [pc, #92]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000aee:	f000 fecb 	bl	8001888 <HAL_ADC_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000af8:	f000 fa12 	bl	8000f20 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000afc:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b02:	4812      	ldr	r0, [pc, #72]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000b04:	f000 fec0 	bl	8001888 <HAL_ADC_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000b0e:	f000 fa07 	bl	8000f20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b12:	2301      	movs	r3, #1
 8000b14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b16:	2306      	movs	r3, #6
 8000b18:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b1e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b22:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b24:	2304      	movs	r3, #4
 8000b26:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000b36:	f001 f849 	bl	8001bcc <HAL_ADC_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000b40:	f000 f9ee 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	3720      	adds	r7, #32
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	240007fc 	.word	0x240007fc
 8000b50:	58026000 	.word	0x58026000

08000b54 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b64:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <MX_TIM6_Init+0x64>)
 8000b66:	4a15      	ldr	r2, [pc, #84]	@ (8000bbc <MX_TIM6_Init+0x68>)
 8000b68:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <MX_TIM6_Init+0x64>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <MX_TIM6_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000b76:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <MX_TIM6_Init+0x64>)
 8000b78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b7c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <MX_TIM6_Init+0x64>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b84:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <MX_TIM6_Init+0x64>)
 8000b86:	f006 fa3d 	bl	8007004 <HAL_TIM_Base_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b90:	f000 f9c6 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b94:	2320      	movs	r3, #32
 8000b96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <MX_TIM6_Init+0x64>)
 8000ba2:	f006 fb2d 	bl	8007200 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000bac:	f000 f9b8 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	240008d8 	.word	0x240008d8
 8000bbc:	40001000 	.word	0x40001000

08000bc0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bc6:	4a23      	ldr	r2, [pc, #140]	@ (8000c54 <MX_USART3_UART_Init+0x94>)
 8000bc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8000bca:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bcc:	4a22      	ldr	r2, [pc, #136]	@ (8000c58 <MX_USART3_UART_Init+0x98>)
 8000bce:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000be2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000be4:	220c      	movs	r2, #12
 8000be6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be8:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bee:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf4:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bfa:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c00:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c06:	4812      	ldr	r0, [pc, #72]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c08:	f006 fb88 	bl	800731c <HAL_UART_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000c12:	f000 f985 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c16:	2100      	movs	r1, #0
 8000c18:	480d      	ldr	r0, [pc, #52]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c1a:	f007 fb90 	bl	800833e <HAL_UARTEx_SetTxFifoThreshold>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000c24:	f000 f97c 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4809      	ldr	r0, [pc, #36]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c2c:	f007 fbc5 	bl	80083ba <HAL_UARTEx_SetRxFifoThreshold>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000c36:	f000 f973 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c3c:	f007 fb46 	bl	80082cc <HAL_UARTEx_DisableFifoMode>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000c46:	f000 f96b 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	24000924 	.word	0x24000924
 8000c54:	40004800 	.word	0x40004800
 8000c58:	000f4240 	.word	0x000f4240

08000c5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c62:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <MX_DMA_Init+0x4c>)
 8000c64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c68:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca8 <MX_DMA_Init+0x4c>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca8 <MX_DMA_Init+0x4c>)
 8000c74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2100      	movs	r1, #0
 8000c84:	200b      	movs	r0, #11
 8000c86:	f001 fce4 	bl	8002652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c8a:	200b      	movs	r0, #11
 8000c8c:	f001 fcfb 	bl	8002686 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2100      	movs	r1, #0
 8000c94:	200c      	movs	r0, #12
 8000c96:	f001 fcdc 	bl	8002652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c9a:	200c      	movs	r0, #12
 8000c9c:	f001 fcf3 	bl	8002686 <HAL_NVIC_EnableIRQ>

}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	58024400 	.word	0x58024400

08000cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08c      	sub	sp, #48	@ 0x30
 8000cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc2:	4b90      	ldr	r3, [pc, #576]	@ (8000f04 <MX_GPIO_Init+0x258>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc8:	4a8e      	ldr	r2, [pc, #568]	@ (8000f04 <MX_GPIO_Init+0x258>)
 8000cca:	f043 0304 	orr.w	r3, r3, #4
 8000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd2:	4b8c      	ldr	r3, [pc, #560]	@ (8000f04 <MX_GPIO_Init+0x258>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	61bb      	str	r3, [r7, #24]
 8000cde:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce0:	4b88      	ldr	r3, [pc, #544]	@ (8000f04 <MX_GPIO_Init+0x258>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce6:	4a87      	ldr	r2, [pc, #540]	@ (8000f04 <MX_GPIO_Init+0x258>)
 8000ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf0:	4b84      	ldr	r3, [pc, #528]	@ (8000f04 <MX_GPIO_Init+0x258>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b81      	ldr	r3, [pc, #516]	@ (8000f04 <MX_GPIO_Init+0x258>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d04:	4a7f      	ldr	r2, [pc, #508]	@ (8000f04 <MX_GPIO_Init+0x258>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d0e:	4b7d      	ldr	r3, [pc, #500]	@ (8000f04 <MX_GPIO_Init+0x258>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1c:	4b79      	ldr	r3, [pc, #484]	@ (8000f04 <MX_GPIO_Init+0x258>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d22:	4a78      	ldr	r2, [pc, #480]	@ (8000f04 <MX_GPIO_Init+0x258>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d2c:	4b75      	ldr	r3, [pc, #468]	@ (8000f04 <MX_GPIO_Init+0x258>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3a:	4b72      	ldr	r3, [pc, #456]	@ (8000f04 <MX_GPIO_Init+0x258>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d40:	4a70      	ldr	r2, [pc, #448]	@ (8000f04 <MX_GPIO_Init+0x258>)
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d4a:	4b6e      	ldr	r3, [pc, #440]	@ (8000f04 <MX_GPIO_Init+0x258>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d50:	f003 0308 	and.w	r3, r3, #8
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d58:	4b6a      	ldr	r3, [pc, #424]	@ (8000f04 <MX_GPIO_Init+0x258>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5e:	4a69      	ldr	r2, [pc, #420]	@ (8000f04 <MX_GPIO_Init+0x258>)
 8000d60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d68:	4b66      	ldr	r3, [pc, #408]	@ (8000f04 <MX_GPIO_Init+0x258>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d76:	4b63      	ldr	r3, [pc, #396]	@ (8000f04 <MX_GPIO_Init+0x258>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7c:	4a61      	ldr	r2, [pc, #388]	@ (8000f04 <MX_GPIO_Init+0x258>)
 8000d7e:	f043 0310 	orr.w	r3, r3, #16
 8000d82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d86:	4b5f      	ldr	r3, [pc, #380]	@ (8000f04 <MX_GPIO_Init+0x258>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8c:	f003 0310 	and.w	r3, r3, #16
 8000d90:	603b      	str	r3, [r7, #0]
 8000d92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000d9a:	485b      	ldr	r0, [pc, #364]	@ (8000f08 <MX_GPIO_Init+0x25c>)
 8000d9c:	f002 fbd6 	bl	800354c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000da6:	4859      	ldr	r0, [pc, #356]	@ (8000f0c <MX_GPIO_Init+0x260>)
 8000da8:	f002 fbd0 	bl	800354c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2102      	movs	r1, #2
 8000db0:	4857      	ldr	r0, [pc, #348]	@ (8000f10 <MX_GPIO_Init+0x264>)
 8000db2:	f002 fbcb 	bl	800354c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000db6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dbc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4851      	ldr	r0, [pc, #324]	@ (8000f14 <MX_GPIO_Init+0x268>)
 8000dce:	f002 fa0d 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000dd2:	2332      	movs	r3, #50	@ 0x32
 8000dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de2:	230b      	movs	r3, #11
 8000de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4619      	mov	r1, r3
 8000dec:	4849      	ldr	r0, [pc, #292]	@ (8000f14 <MX_GPIO_Init+0x268>)
 8000dee:	f002 f9fd 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000df2:	2386      	movs	r3, #134	@ 0x86
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e02:	230b      	movs	r3, #11
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4842      	ldr	r0, [pc, #264]	@ (8000f18 <MX_GPIO_Init+0x26c>)
 8000e0e:	f002 f9ed 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e12:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4837      	ldr	r0, [pc, #220]	@ (8000f08 <MX_GPIO_Init+0x25c>)
 8000e2c:	f002 f9de 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e42:	230b      	movs	r3, #11
 8000e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	482e      	ldr	r0, [pc, #184]	@ (8000f08 <MX_GPIO_Init+0x25c>)
 8000e4e:	f002 f9cd 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000e52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4828      	ldr	r0, [pc, #160]	@ (8000f0c <MX_GPIO_Init+0x260>)
 8000e6c:	f002 f9be 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000e70:	2380      	movs	r3, #128	@ 0x80
 8000e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e74:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	4619      	mov	r1, r3
 8000e84:	4825      	ldr	r0, [pc, #148]	@ (8000f1c <MX_GPIO_Init+0x270>)
 8000e86:	f002 f9b1 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e8a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e9c:	230a      	movs	r3, #10
 8000e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	481c      	ldr	r0, [pc, #112]	@ (8000f18 <MX_GPIO_Init+0x26c>)
 8000ea8:	f002 f9a0 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000eac:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ebe:	230b      	movs	r3, #11
 8000ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4814      	ldr	r0, [pc, #80]	@ (8000f1c <MX_GPIO_Init+0x270>)
 8000eca:	f002 f98f 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480a      	ldr	r0, [pc, #40]	@ (8000f10 <MX_GPIO_Init+0x264>)
 8000ee6:	f002 f981 	bl	80031ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	2028      	movs	r0, #40	@ 0x28
 8000ef0:	f001 fbaf 	bl	8002652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ef4:	2028      	movs	r0, #40	@ 0x28
 8000ef6:	f001 fbc6 	bl	8002686 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000efa:	bf00      	nop
 8000efc:	3730      	adds	r7, #48	@ 0x30
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	58024400 	.word	0x58024400
 8000f08:	58020400 	.word	0x58020400
 8000f0c:	58020c00 	.word	0x58020c00
 8000f10:	58021000 	.word	0x58021000
 8000f14:	58020800 	.word	0x58020800
 8000f18:	58020000 	.word	0x58020000
 8000f1c:	58021800 	.word	0x58021800

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <Error_Handler+0x8>

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <HAL_MspInit+0x30>)
 8000f34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f38:	4a08      	ldr	r2, [pc, #32]	@ (8000f5c <HAL_MspInit+0x30>)
 8000f3a:	f043 0302 	orr.w	r3, r3, #2
 8000f3e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <HAL_MspInit+0x30>)
 8000f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	58024400 	.word	0x58024400

08000f60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b0b4      	sub	sp, #208	@ 0xd0
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f68:	f107 0310 	add.w	r3, r7, #16
 8000f6c:	22c0      	movs	r2, #192	@ 0xc0
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f007 faaf 	bl	80084d4 <memset>
  if(hadc->Instance==ADC3)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a3e      	ldr	r2, [pc, #248]	@ (8001074 <HAL_ADC_MspInit+0x114>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d175      	bne.n	800106c <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f80:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 50;
 8000f90:	2332      	movs	r3, #50	@ 0x32
 8000f92:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000f94:	2302      	movs	r3, #2
 8000f96:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000fa0:	2380      	movs	r3, #128	@ 0x80
 8000fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f003 fb26 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8000fc2:	f7ff ffad 	bl	8000f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000fc6:	4b2c      	ldr	r3, [pc, #176]	@ (8001078 <HAL_ADC_MspInit+0x118>)
 8000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fcc:	4a2a      	ldr	r2, [pc, #168]	@ (8001078 <HAL_ADC_MspInit+0x118>)
 8000fce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000fd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd6:	4b28      	ldr	r3, [pc, #160]	@ (8001078 <HAL_ADC_MspInit+0x118>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fdc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe4:	4b24      	ldr	r3, [pc, #144]	@ (8001078 <HAL_ADC_MspInit+0x118>)
 8000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fea:	4a23      	ldr	r2, [pc, #140]	@ (8001078 <HAL_ADC_MspInit+0x118>)
 8000fec:	f043 0304 	orr.w	r3, r3, #4
 8000ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff4:	4b20      	ldr	r3, [pc, #128]	@ (8001078 <HAL_ADC_MspInit+0x118>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001002:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001006:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800100a:	f000 fa9b 	bl	8001544 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 800100e:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <HAL_ADC_MspInit+0x11c>)
 8001010:	4a1b      	ldr	r2, [pc, #108]	@ (8001080 <HAL_ADC_MspInit+0x120>)
 8001012:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001014:	4b19      	ldr	r3, [pc, #100]	@ (800107c <HAL_ADC_MspInit+0x11c>)
 8001016:	2273      	movs	r2, #115	@ 0x73
 8001018:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800101a:	4b18      	ldr	r3, [pc, #96]	@ (800107c <HAL_ADC_MspInit+0x11c>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001020:	4b16      	ldr	r3, [pc, #88]	@ (800107c <HAL_ADC_MspInit+0x11c>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001026:	4b15      	ldr	r3, [pc, #84]	@ (800107c <HAL_ADC_MspInit+0x11c>)
 8001028:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800102c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800102e:	4b13      	ldr	r3, [pc, #76]	@ (800107c <HAL_ADC_MspInit+0x11c>)
 8001030:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001034:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001036:	4b11      	ldr	r3, [pc, #68]	@ (800107c <HAL_ADC_MspInit+0x11c>)
 8001038:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800103c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800103e:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <HAL_ADC_MspInit+0x11c>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001044:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <HAL_ADC_MspInit+0x11c>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800104a:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <HAL_ADC_MspInit+0x11c>)
 800104c:	2200      	movs	r2, #0
 800104e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001050:	480a      	ldr	r0, [pc, #40]	@ (800107c <HAL_ADC_MspInit+0x11c>)
 8001052:	f001 fb33 	bl	80026bc <HAL_DMA_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 800105c:	f7ff ff60 	bl	8000f20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a06      	ldr	r2, [pc, #24]	@ (800107c <HAL_ADC_MspInit+0x11c>)
 8001064:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001066:	4a05      	ldr	r2, [pc, #20]	@ (800107c <HAL_ADC_MspInit+0x11c>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 800106c:	bf00      	nop
 800106e:	37d0      	adds	r7, #208	@ 0xd0
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	58026000 	.word	0x58026000
 8001078:	58024400 	.word	0x58024400
 800107c:	24000860 	.word	0x24000860
 8001080:	40020010 	.word	0x40020010

08001084 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0b      	ldr	r2, [pc, #44]	@ (80010c0 <HAL_TIM_Base_MspInit+0x3c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d10e      	bne.n	80010b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001096:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <HAL_TIM_Base_MspInit+0x40>)
 8001098:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800109c:	4a09      	ldr	r2, [pc, #36]	@ (80010c4 <HAL_TIM_Base_MspInit+0x40>)
 800109e:	f043 0310 	orr.w	r3, r3, #16
 80010a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010a6:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <HAL_TIM_Base_MspInit+0x40>)
 80010a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010ac:	f003 0310 	and.w	r3, r3, #16
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	40001000 	.word	0x40001000
 80010c4:	58024400 	.word	0x58024400

080010c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0ba      	sub	sp, #232	@ 0xe8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	22c0      	movs	r2, #192	@ 0xc0
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f007 f9f3 	bl	80084d4 <memset>
  if(huart->Instance==USART3)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a41      	ldr	r2, [pc, #260]	@ (80011f8 <HAL_UART_MspInit+0x130>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d17b      	bne.n	80011f0 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010f8:	f04f 0202 	mov.w	r2, #2
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	4618      	mov	r0, r3
 8001110:	f003 fa7a 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800111a:	f7ff ff01 	bl	8000f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800111e:	4b37      	ldr	r3, [pc, #220]	@ (80011fc <HAL_UART_MspInit+0x134>)
 8001120:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001124:	4a35      	ldr	r2, [pc, #212]	@ (80011fc <HAL_UART_MspInit+0x134>)
 8001126:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800112a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800112e:	4b33      	ldr	r3, [pc, #204]	@ (80011fc <HAL_UART_MspInit+0x134>)
 8001130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001134:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800113c:	4b2f      	ldr	r3, [pc, #188]	@ (80011fc <HAL_UART_MspInit+0x134>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001142:	4a2e      	ldr	r2, [pc, #184]	@ (80011fc <HAL_UART_MspInit+0x134>)
 8001144:	f043 0308 	orr.w	r3, r3, #8
 8001148:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800114c:	4b2b      	ldr	r3, [pc, #172]	@ (80011fc <HAL_UART_MspInit+0x134>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800115a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800115e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001174:	2307      	movs	r3, #7
 8001176:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800117a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800117e:	4619      	mov	r1, r3
 8001180:	481f      	ldr	r0, [pc, #124]	@ (8001200 <HAL_UART_MspInit+0x138>)
 8001182:	f002 f833 	bl	80031ec <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001186:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <HAL_UART_MspInit+0x13c>)
 8001188:	4a1f      	ldr	r2, [pc, #124]	@ (8001208 <HAL_UART_MspInit+0x140>)
 800118a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800118c:	4b1d      	ldr	r3, [pc, #116]	@ (8001204 <HAL_UART_MspInit+0x13c>)
 800118e:	222e      	movs	r2, #46	@ 0x2e
 8001190:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001192:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <HAL_UART_MspInit+0x13c>)
 8001194:	2240      	movs	r2, #64	@ 0x40
 8001196:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001198:	4b1a      	ldr	r3, [pc, #104]	@ (8001204 <HAL_UART_MspInit+0x13c>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800119e:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <HAL_UART_MspInit+0x13c>)
 80011a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011a4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011a6:	4b17      	ldr	r3, [pc, #92]	@ (8001204 <HAL_UART_MspInit+0x13c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011ac:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <HAL_UART_MspInit+0x13c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80011b2:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <HAL_UART_MspInit+0x13c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011b8:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <HAL_UART_MspInit+0x13c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011be:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <HAL_UART_MspInit+0x13c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80011c4:	480f      	ldr	r0, [pc, #60]	@ (8001204 <HAL_UART_MspInit+0x13c>)
 80011c6:	f001 fa79 	bl	80026bc <HAL_DMA_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80011d0:	f7ff fea6 	bl	8000f20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001204 <HAL_UART_MspInit+0x13c>)
 80011d8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <HAL_UART_MspInit+0x13c>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	2027      	movs	r0, #39	@ 0x27
 80011e6:	f001 fa34 	bl	8002652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011ea:	2027      	movs	r0, #39	@ 0x27
 80011ec:	f001 fa4b 	bl	8002686 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80011f0:	bf00      	nop
 80011f2:	37e8      	adds	r7, #232	@ 0xe8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40004800 	.word	0x40004800
 80011fc:	58024400 	.word	0x58024400
 8001200:	58020c00 	.word	0x58020c00
 8001204:	240009b8 	.word	0x240009b8
 8001208:	40020028 	.word	0x40020028

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <NMI_Handler+0x4>

08001214 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <MemManage_Handler+0x4>

08001224 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <UsageFault_Handler+0x4>

08001234 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001262:	f000 f943 	bl	80014ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}

0800126a <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	DMA_custom_interrupt_rx();
 800126e:	f7ff fabf 	bl	80007f0 <DMA_custom_interrupt_rx>
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}

08001276 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
	DMA_custom_interrupt_tx();
 800127a:	f7ff fa87 	bl	800078c <DMA_custom_interrupt_tx>
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}

08001282 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	USART_custom_interrupt();
 8001286:	f7ff fafd 	bl	8000884 <USART_custom_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}

0800128e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	EXTI_custom_interrupt();
 8001292:	f7ff fa07 	bl	80006a4 <EXTI_custom_interrupt>

	if(1)
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001296:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800129a:	f002 f970 	bl	800357e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012a8:	4b37      	ldr	r3, [pc, #220]	@ (8001388 <SystemInit+0xe4>)
 80012aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ae:	4a36      	ldr	r2, [pc, #216]	@ (8001388 <SystemInit+0xe4>)
 80012b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012b8:	4b34      	ldr	r3, [pc, #208]	@ (800138c <SystemInit+0xe8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 030f 	and.w	r3, r3, #15
 80012c0:	2b06      	cmp	r3, #6
 80012c2:	d807      	bhi.n	80012d4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012c4:	4b31      	ldr	r3, [pc, #196]	@ (800138c <SystemInit+0xe8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f023 030f 	bic.w	r3, r3, #15
 80012cc:	4a2f      	ldr	r2, [pc, #188]	@ (800138c <SystemInit+0xe8>)
 80012ce:	f043 0307 	orr.w	r3, r3, #7
 80012d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001390 <SystemInit+0xec>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001390 <SystemInit+0xec>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001390 <SystemInit+0xec>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001390 <SystemInit+0xec>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4929      	ldr	r1, [pc, #164]	@ (8001390 <SystemInit+0xec>)
 80012ec:	4b29      	ldr	r3, [pc, #164]	@ (8001394 <SystemInit+0xf0>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012f2:	4b26      	ldr	r3, [pc, #152]	@ (800138c <SystemInit+0xe8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d007      	beq.n	800130e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012fe:	4b23      	ldr	r3, [pc, #140]	@ (800138c <SystemInit+0xe8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f023 030f 	bic.w	r3, r3, #15
 8001306:	4a21      	ldr	r2, [pc, #132]	@ (800138c <SystemInit+0xe8>)
 8001308:	f043 0307 	orr.w	r3, r3, #7
 800130c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800130e:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <SystemInit+0xec>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001314:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <SystemInit+0xec>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800131a:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <SystemInit+0xec>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001320:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <SystemInit+0xec>)
 8001322:	4a1d      	ldr	r2, [pc, #116]	@ (8001398 <SystemInit+0xf4>)
 8001324:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001326:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <SystemInit+0xec>)
 8001328:	4a1c      	ldr	r2, [pc, #112]	@ (800139c <SystemInit+0xf8>)
 800132a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800132c:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <SystemInit+0xec>)
 800132e:	4a1c      	ldr	r2, [pc, #112]	@ (80013a0 <SystemInit+0xfc>)
 8001330:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001332:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <SystemInit+0xec>)
 8001334:	2200      	movs	r2, #0
 8001336:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001338:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <SystemInit+0xec>)
 800133a:	4a19      	ldr	r2, [pc, #100]	@ (80013a0 <SystemInit+0xfc>)
 800133c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800133e:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <SystemInit+0xec>)
 8001340:	2200      	movs	r2, #0
 8001342:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001344:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <SystemInit+0xec>)
 8001346:	4a16      	ldr	r2, [pc, #88]	@ (80013a0 <SystemInit+0xfc>)
 8001348:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800134a:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <SystemInit+0xec>)
 800134c:	2200      	movs	r2, #0
 800134e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001350:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <SystemInit+0xec>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0e      	ldr	r2, [pc, #56]	@ (8001390 <SystemInit+0xec>)
 8001356:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800135a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <SystemInit+0xec>)
 800135e:	2200      	movs	r2, #0
 8001360:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001362:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <SystemInit+0x100>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <SystemInit+0x104>)
 8001368:	4013      	ands	r3, r2
 800136a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800136e:	d202      	bcs.n	8001376 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001370:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <SystemInit+0x108>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <SystemInit+0x10c>)
 8001378:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800137c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00
 800138c:	52002000 	.word	0x52002000
 8001390:	58024400 	.word	0x58024400
 8001394:	eaf6ed7f 	.word	0xeaf6ed7f
 8001398:	02020200 	.word	0x02020200
 800139c:	01ff0000 	.word	0x01ff0000
 80013a0:	01010280 	.word	0x01010280
 80013a4:	5c001000 	.word	0x5c001000
 80013a8:	ffff0000 	.word	0xffff0000
 80013ac:	51008108 	.word	0x51008108
 80013b0:	52004000 	.word	0x52004000

080013b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013b8:	f7ff ff74 	bl	80012a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013bc:	480c      	ldr	r0, [pc, #48]	@ (80013f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013be:	490d      	ldr	r1, [pc, #52]	@ (80013f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c0:	4a0d      	ldr	r2, [pc, #52]	@ (80013f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c4:	e002      	b.n	80013cc <LoopCopyDataInit>

080013c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ca:	3304      	adds	r3, #4

080013cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d0:	d3f9      	bcc.n	80013c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d2:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001400 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d8:	e001      	b.n	80013de <LoopFillZerobss>

080013da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013dc:	3204      	adds	r2, #4

080013de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e0:	d3fb      	bcc.n	80013da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013e2:	f007 f87f 	bl	80084e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e6:	f7ff fa7f 	bl	80008e8 <main>
  bx  lr
 80013ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013f4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80013f8:	08008594 	.word	0x08008594
  ldr r2, =_sbss
 80013fc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001400:	24000a34 	.word	0x24000a34

08001404 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC3_IRQHandler>
	...

08001408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800140e:	2003      	movs	r0, #3
 8001410:	f001 f914 	bl	800263c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001414:	f002 ff22 	bl	800425c <HAL_RCC_GetSysClockFreq>
 8001418:	4602      	mov	r2, r0
 800141a:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <HAL_Init+0x68>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	0a1b      	lsrs	r3, r3, #8
 8001420:	f003 030f 	and.w	r3, r3, #15
 8001424:	4913      	ldr	r1, [pc, #76]	@ (8001474 <HAL_Init+0x6c>)
 8001426:	5ccb      	ldrb	r3, [r1, r3]
 8001428:	f003 031f 	and.w	r3, r3, #31
 800142c:	fa22 f303 	lsr.w	r3, r2, r3
 8001430:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001432:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <HAL_Init+0x68>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	4a0e      	ldr	r2, [pc, #56]	@ (8001474 <HAL_Init+0x6c>)
 800143c:	5cd3      	ldrb	r3, [r2, r3]
 800143e:	f003 031f 	and.w	r3, r3, #31
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	fa22 f303 	lsr.w	r3, r2, r3
 8001448:	4a0b      	ldr	r2, [pc, #44]	@ (8001478 <HAL_Init+0x70>)
 800144a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800144c:	4a0b      	ldr	r2, [pc, #44]	@ (800147c <HAL_Init+0x74>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001452:	2000      	movs	r0, #0
 8001454:	f000 f814 	bl	8001480 <HAL_InitTick>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e002      	b.n	8001468 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001462:	f7ff fd63 	bl	8000f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	58024400 	.word	0x58024400
 8001474:	08008544 	.word	0x08008544
 8001478:	24000004 	.word	0x24000004
 800147c:	24000000 	.word	0x24000000

08001480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001488:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <HAL_InitTick+0x60>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e021      	b.n	80014d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001494:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <HAL_InitTick+0x64>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <HAL_InitTick+0x60>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4619      	mov	r1, r3
 800149e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f001 f8f9 	bl	80026a2 <HAL_SYSTICK_Config>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00e      	b.n	80014d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b0f      	cmp	r3, #15
 80014be:	d80a      	bhi.n	80014d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c0:	2200      	movs	r2, #0
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f001 f8c3 	bl	8002652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014cc:	4a06      	ldr	r2, [pc, #24]	@ (80014e8 <HAL_InitTick+0x68>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e000      	b.n	80014d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	2400000c 	.word	0x2400000c
 80014e4:	24000000 	.word	0x24000000
 80014e8:	24000008 	.word	0x24000008

080014ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_IncTick+0x20>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <HAL_IncTick+0x24>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	4a04      	ldr	r2, [pc, #16]	@ (8001510 <HAL_IncTick+0x24>)
 80014fe:	6013      	str	r3, [r2, #0]
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	2400000c 	.word	0x2400000c
 8001510:	24000a30 	.word	0x24000a30

08001514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return uwTick;
 8001518:	4b03      	ldr	r3, [pc, #12]	@ (8001528 <HAL_GetTick+0x14>)
 800151a:	681b      	ldr	r3, [r3, #0]
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	24000a30 	.word	0x24000a30

0800152c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001530:	4b03      	ldr	r3, [pc, #12]	@ (8001540 <HAL_GetREVID+0x14>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	0c1b      	lsrs	r3, r3, #16
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	5c001000 	.word	0x5c001000

08001544 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800154e:	4b07      	ldr	r3, [pc, #28]	@ (800156c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	43db      	mvns	r3, r3
 8001556:	401a      	ands	r2, r3
 8001558:	4904      	ldr	r1, [pc, #16]	@ (800156c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	58000400 	.word	0x58000400

08001570 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	431a      	orrs	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	609a      	str	r2, [r3, #8]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	609a      	str	r2, [r3, #8]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015d8:	b480      	push	{r7}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3360      	adds	r3, #96	@ 0x60
 80015ea:	461a      	mov	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	430b      	orrs	r3, r1
 8001606:	431a      	orrs	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800160c:	bf00      	nop
 800160e:	371c      	adds	r7, #28
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	431a      	orrs	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	611a      	str	r2, [r3, #16]
}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800164a:	b480      	push	{r7}
 800164c:	b087      	sub	sp, #28
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3360      	adds	r3, #96	@ 0x60
 800165a:	461a      	mov	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	431a      	orrs	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	601a      	str	r2, [r3, #0]
  }
}
 8001674:	bf00      	nop
 8001676:	371c      	adds	r7, #28
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001680:	b480      	push	{r7}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	3330      	adds	r3, #48	@ 0x30
 8001690:	461a      	mov	r2, r3
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	4413      	add	r3, r2
 800169e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	f003 031f 	and.w	r3, r3, #31
 80016aa:	211f      	movs	r1, #31
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	401a      	ands	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	0e9b      	lsrs	r3, r3, #26
 80016b8:	f003 011f 	and.w	r1, r3, #31
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	f003 031f 	and.w	r3, r3, #31
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	431a      	orrs	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016cc:	bf00      	nop
 80016ce:	371c      	adds	r7, #28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3314      	adds	r3, #20
 80016e8:	461a      	mov	r2, r3
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	0e5b      	lsrs	r3, r3, #25
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	4413      	add	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	0d1b      	lsrs	r3, r3, #20
 8001700:	f003 031f 	and.w	r3, r3, #31
 8001704:	2107      	movs	r1, #7
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	401a      	ands	r2, r3
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	0d1b      	lsrs	r3, r3, #20
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	431a      	orrs	r2, r3
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001722:	bf00      	nop
 8001724:	371c      	adds	r7, #28
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001748:	43db      	mvns	r3, r3
 800174a:	401a      	ands	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0318 	and.w	r3, r3, #24
 8001752:	4908      	ldr	r1, [pc, #32]	@ (8001774 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001754:	40d9      	lsrs	r1, r3
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	400b      	ands	r3, r1
 800175a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800175e:	431a      	orrs	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001766:	bf00      	nop
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	000fffff 	.word	0x000fffff

08001778 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001786:	4013      	ands	r3, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6093      	str	r3, [r2, #8]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	5fffffc0 	.word	0x5fffffc0

0800179c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017b0:	d101      	bne.n	80017b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <LL_ADC_EnableInternalRegulator+0x24>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	6fffffc0 	.word	0x6fffffc0

080017ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001800:	d101      	bne.n	8001806 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <LL_ADC_IsEnabled+0x18>
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <LL_ADC_IsEnabled+0x1a>
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	2b04      	cmp	r3, #4
 800184c:	d101      	bne.n	8001852 <LL_ADC_REG_IsConversionOngoing+0x18>
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b08      	cmp	r3, #8
 8001872:	d101      	bne.n	8001878 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b089      	sub	sp, #36	@ 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e18f      	b.n	8001bc2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d109      	bne.n	80018c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff fb55 	bl	8000f60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff67 	bl	800179c <LL_ADC_IsDeepPowerDownEnabled>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d004      	beq.n	80018de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff4d 	bl	8001778 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ff82 	bl	80017ec <LL_ADC_IsInternalRegulatorEnabled>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d114      	bne.n	8001918 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ff66 	bl	80017c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018f8:	4b87      	ldr	r3, [pc, #540]	@ (8001b18 <HAL_ADC_Init+0x290>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	099b      	lsrs	r3, r3, #6
 80018fe:	4a87      	ldr	r2, [pc, #540]	@ (8001b1c <HAL_ADC_Init+0x294>)
 8001900:	fba2 2303 	umull	r2, r3, r2, r3
 8001904:	099b      	lsrs	r3, r3, #6
 8001906:	3301      	adds	r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800190a:	e002      	b.n	8001912 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	3b01      	subs	r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f9      	bne.n	800190c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff65 	bl	80017ec <LL_ADC_IsInternalRegulatorEnabled>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10d      	bne.n	8001944 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800192c:	f043 0210 	orr.w	r2, r3, #16
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001938:	f043 0201 	orr.w	r2, r3, #1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff76 	bl	800183a <LL_ADC_REG_IsConversionOngoing>
 800194e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001954:	f003 0310 	and.w	r3, r3, #16
 8001958:	2b00      	cmp	r3, #0
 800195a:	f040 8129 	bne.w	8001bb0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2b00      	cmp	r3, #0
 8001962:	f040 8125 	bne.w	8001bb0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800196a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800196e:	f043 0202 	orr.w	r2, r3, #2
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff4a 	bl	8001814 <LL_ADC_IsEnabled>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d136      	bne.n	80019f4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a65      	ldr	r2, [pc, #404]	@ (8001b20 <HAL_ADC_Init+0x298>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d004      	beq.n	800199a <HAL_ADC_Init+0x112>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a63      	ldr	r2, [pc, #396]	@ (8001b24 <HAL_ADC_Init+0x29c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d10e      	bne.n	80019b8 <HAL_ADC_Init+0x130>
 800199a:	4861      	ldr	r0, [pc, #388]	@ (8001b20 <HAL_ADC_Init+0x298>)
 800199c:	f7ff ff3a 	bl	8001814 <LL_ADC_IsEnabled>
 80019a0:	4604      	mov	r4, r0
 80019a2:	4860      	ldr	r0, [pc, #384]	@ (8001b24 <HAL_ADC_Init+0x29c>)
 80019a4:	f7ff ff36 	bl	8001814 <LL_ADC_IsEnabled>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4323      	orrs	r3, r4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bf0c      	ite	eq
 80019b0:	2301      	moveq	r3, #1
 80019b2:	2300      	movne	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	e008      	b.n	80019ca <HAL_ADC_Init+0x142>
 80019b8:	485b      	ldr	r0, [pc, #364]	@ (8001b28 <HAL_ADC_Init+0x2a0>)
 80019ba:	f7ff ff2b 	bl	8001814 <LL_ADC_IsEnabled>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf0c      	ite	eq
 80019c4:	2301      	moveq	r3, #1
 80019c6:	2300      	movne	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d012      	beq.n	80019f4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a53      	ldr	r2, [pc, #332]	@ (8001b20 <HAL_ADC_Init+0x298>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d004      	beq.n	80019e2 <HAL_ADC_Init+0x15a>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a51      	ldr	r2, [pc, #324]	@ (8001b24 <HAL_ADC_Init+0x29c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_ADC_Init+0x15e>
 80019e2:	4a52      	ldr	r2, [pc, #328]	@ (8001b2c <HAL_ADC_Init+0x2a4>)
 80019e4:	e000      	b.n	80019e8 <HAL_ADC_Init+0x160>
 80019e6:	4a52      	ldr	r2, [pc, #328]	@ (8001b30 <HAL_ADC_Init+0x2a8>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	4619      	mov	r1, r3
 80019ee:	4610      	mov	r0, r2
 80019f0:	f7ff fdbe 	bl	8001570 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80019f4:	f7ff fd9a 	bl	800152c <HAL_GetREVID>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d914      	bls.n	8001a2c <HAL_ADC_Init+0x1a4>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b10      	cmp	r3, #16
 8001a08:	d110      	bne.n	8001a2c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7d5b      	ldrb	r3, [r3, #21]
 8001a0e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a14:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a1a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7f1b      	ldrb	r3, [r3, #28]
 8001a20:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a22:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a24:	f043 030c 	orr.w	r3, r3, #12
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	e00d      	b.n	8001a48 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7d5b      	ldrb	r3, [r3, #21]
 8001a30:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a36:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a3c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7f1b      	ldrb	r3, [r3, #28]
 8001a42:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7f1b      	ldrb	r3, [r3, #28]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d106      	bne.n	8001a5e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	045b      	lsls	r3, r3, #17
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d009      	beq.n	8001a7a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a72:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	4b2c      	ldr	r3, [pc, #176]	@ (8001b34 <HAL_ADC_Init+0x2ac>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	69b9      	ldr	r1, [r7, #24]
 8001a8a:	430b      	orrs	r3, r1
 8001a8c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fed1 	bl	800183a <LL_ADC_REG_IsConversionOngoing>
 8001a98:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fede 	bl	8001860 <LL_ADC_INJ_IsConversionOngoing>
 8001aa4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d15f      	bne.n	8001b6c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d15c      	bne.n	8001b6c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7d1b      	ldrb	r3, [r3, #20]
 8001ab6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b38 <HAL_ADC_Init+0x2b0>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	69b9      	ldr	r1, [r7, #24]
 8001ad0:	430b      	orrs	r3, r1
 8001ad2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d130      	bne.n	8001b40 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	691a      	ldr	r2, [r3, #16]
 8001aea:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <HAL_ADC_Init+0x2b4>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001af2:	3a01      	subs	r2, #1
 8001af4:	0411      	lsls	r1, r2, #16
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001afa:	4311      	orrs	r1, r2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b00:	4311      	orrs	r1, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b06:	430a      	orrs	r2, r1
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	611a      	str	r2, [r3, #16]
 8001b14:	e01c      	b.n	8001b50 <HAL_ADC_Init+0x2c8>
 8001b16:	bf00      	nop
 8001b18:	24000000 	.word	0x24000000
 8001b1c:	053e2d63 	.word	0x053e2d63
 8001b20:	40022000 	.word	0x40022000
 8001b24:	40022100 	.word	0x40022100
 8001b28:	58026000 	.word	0x58026000
 8001b2c:	40022300 	.word	0x40022300
 8001b30:	58026300 	.word	0x58026300
 8001b34:	fff0c003 	.word	0xfff0c003
 8001b38:	ffffbffc 	.word	0xffffbffc
 8001b3c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0201 	bic.w	r2, r2, #1
 8001b4e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fb8c 	bl	8002284 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d10c      	bne.n	8001b8e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	f023 010f 	bic.w	r1, r3, #15
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	1e5a      	subs	r2, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b8c:	e007      	b.n	8001b9e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 020f 	bic.w	r2, r2, #15
 8001b9c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ba2:	f023 0303 	bic.w	r3, r3, #3
 8001ba6:	f043 0201 	orr.w	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	655a      	str	r2, [r3, #84]	@ 0x54
 8001bae:	e007      	b.n	8001bc0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb4:	f043 0210 	orr.w	r2, r3, #16
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3724      	adds	r7, #36	@ 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	bf00      	nop

08001bcc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001bcc:	b590      	push	{r4, r7, lr}
 8001bce:	b0a1      	sub	sp, #132	@ 0x84
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4a65      	ldr	r2, [pc, #404]	@ (8001d7c <HAL_ADC_ConfigChannel+0x1b0>)
 8001be6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x2a>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e32e      	b.n	8002254 <HAL_ADC_ConfigChannel+0x688>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fe19 	bl	800183a <LL_ADC_REG_IsConversionOngoing>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f040 8313 	bne.w	8002236 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	db2c      	blt.n	8001c72 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d108      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x6a>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	0e9b      	lsrs	r3, r3, #26
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	2201      	movs	r2, #1
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	e016      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x98>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c3e:	fa93 f3a3 	rbit	r3, r3
 8001c42:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c46:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001c4e:	2320      	movs	r3, #32
 8001c50:	e003      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001c52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c54:	fab3 f383 	clz	r3, r3
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f003 031f 	and.w	r3, r3, #31
 8001c5e:	2201      	movs	r2, #1
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	69d1      	ldr	r1, [r2, #28]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	6859      	ldr	r1, [r3, #4]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f7ff fcfe 	bl	8001680 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fdd6 	bl	800183a <LL_ADC_REG_IsConversionOngoing>
 8001c8e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fde3 	bl	8001860 <LL_ADC_INJ_IsConversionOngoing>
 8001c9a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f040 80b8 	bne.w	8001e14 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ca4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f040 80b4 	bne.w	8001e14 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	6819      	ldr	r1, [r3, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	f7ff fd0d 	bl	80016d8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001cbe:	4b30      	ldr	r3, [pc, #192]	@ (8001d80 <HAL_ADC_ConfigChannel+0x1b4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001cc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001cca:	d10b      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x118>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	695a      	ldr	r2, [r3, #20]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	089b      	lsrs	r3, r3, #2
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	e01d      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x154>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10b      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x13e>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	e00a      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x154>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	695a      	ldr	r2, [r3, #20]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d02c      	beq.n	8001d84 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6818      	ldr	r0, [r3, #0]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6919      	ldr	r1, [r3, #16]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d38:	f7ff fc4e 	bl	80015d8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6919      	ldr	r1, [r3, #16]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	7e5b      	ldrb	r3, [r3, #25]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d102      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x186>
 8001d4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001d50:	e000      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x188>
 8001d52:	2300      	movs	r3, #0
 8001d54:	461a      	mov	r2, r3
 8001d56:	f7ff fc78 	bl	800164a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6818      	ldr	r0, [r3, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	6919      	ldr	r1, [r3, #16]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	7e1b      	ldrb	r3, [r3, #24]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d102      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x1a4>
 8001d6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d6e:	e000      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x1a6>
 8001d70:	2300      	movs	r3, #0
 8001d72:	461a      	mov	r2, r3
 8001d74:	f7ff fc50 	bl	8001618 <LL_ADC_SetDataRightShift>
 8001d78:	e04c      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x248>
 8001d7a:	bf00      	nop
 8001d7c:	47ff0000 	.word	0x47ff0000
 8001d80:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	069b      	lsls	r3, r3, #26
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d107      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001da6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001dae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	069b      	lsls	r3, r3, #26
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d107      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001dca:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001dd2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	069b      	lsls	r3, r3, #26
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d107      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001dee:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001df6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	069b      	lsls	r3, r3, #26
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d107      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e12:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fcfb 	bl	8001814 <LL_ADC_IsEnabled>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f040 8211 	bne.w	8002248 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6818      	ldr	r0, [r3, #0]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	6819      	ldr	r1, [r3, #0]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	461a      	mov	r2, r3
 8001e34:	f7ff fc7c 	bl	8001730 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	4aa1      	ldr	r2, [pc, #644]	@ (80020c4 <HAL_ADC_ConfigChannel+0x4f8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	f040 812e 	bne.w	80020a0 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10b      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x2a0>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	0e9b      	lsrs	r3, r3, #26
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	f003 031f 	and.w	r3, r3, #31
 8001e60:	2b09      	cmp	r3, #9
 8001e62:	bf94      	ite	ls
 8001e64:	2301      	movls	r3, #1
 8001e66:	2300      	movhi	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	e019      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x2d4>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001e7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001e7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8001e84:	2320      	movs	r3, #32
 8001e86:	e003      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8001e88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	3301      	adds	r3, #1
 8001e92:	f003 031f 	and.w	r3, r3, #31
 8001e96:	2b09      	cmp	r3, #9
 8001e98:	bf94      	ite	ls
 8001e9a:	2301      	movls	r3, #1
 8001e9c:	2300      	movhi	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d079      	beq.n	8001f98 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d107      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x2f4>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0e9b      	lsrs	r3, r3, #26
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	069b      	lsls	r3, r3, #26
 8001eba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ebe:	e015      	b.n	8001eec <HAL_ADC_ConfigChannel+0x320>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ed0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8001ed8:	2320      	movs	r3, #32
 8001eda:	e003      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8001edc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	069b      	lsls	r3, r3, #26
 8001ee8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x340>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	0e9b      	lsrs	r3, r3, #26
 8001efe:	3301      	adds	r3, #1
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	2101      	movs	r1, #1
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	e017      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x370>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f1c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001f1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8001f24:	2320      	movs	r3, #32
 8001f26:	e003      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8001f28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	2101      	movs	r1, #1
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	ea42 0103 	orr.w	r1, r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10a      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x396>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0e9b      	lsrs	r3, r3, #26
 8001f52:	3301      	adds	r3, #1
 8001f54:	f003 021f 	and.w	r2, r3, #31
 8001f58:	4613      	mov	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	051b      	lsls	r3, r3, #20
 8001f60:	e018      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x3c8>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f72:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8001f7a:	2320      	movs	r3, #32
 8001f7c:	e003      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8001f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f80:	fab3 f383 	clz	r3, r3
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	3301      	adds	r3, #1
 8001f88:	f003 021f 	and.w	r2, r3, #31
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f94:	430b      	orrs	r3, r1
 8001f96:	e07e      	b.n	8002096 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d107      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x3e8>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0e9b      	lsrs	r3, r3, #26
 8001faa:	3301      	adds	r3, #1
 8001fac:	069b      	lsls	r3, r3, #26
 8001fae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fb2:	e015      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x414>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8001fcc:	2320      	movs	r3, #32
 8001fce:	e003      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8001fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	3301      	adds	r3, #1
 8001fda:	069b      	lsls	r3, r3, #26
 8001fdc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d109      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x434>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	0e9b      	lsrs	r3, r3, #26
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	e017      	b.n	8002030 <HAL_ADC_ConfigChannel+0x464>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	61bb      	str	r3, [r7, #24]
  return result;
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002012:	6a3b      	ldr	r3, [r7, #32]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002018:	2320      	movs	r3, #32
 800201a:	e003      	b.n	8002024 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	3301      	adds	r3, #1
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	2101      	movs	r1, #1
 800202c:	fa01 f303 	lsl.w	r3, r1, r3
 8002030:	ea42 0103 	orr.w	r1, r2, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10d      	bne.n	800205c <HAL_ADC_ConfigChannel+0x490>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	0e9b      	lsrs	r3, r3, #26
 8002046:	3301      	adds	r3, #1
 8002048:	f003 021f 	and.w	r2, r3, #31
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	3b1e      	subs	r3, #30
 8002054:	051b      	lsls	r3, r3, #20
 8002056:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800205a:	e01b      	b.n	8002094 <HAL_ADC_ConfigChannel+0x4c8>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	60fb      	str	r3, [r7, #12]
  return result;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002074:	2320      	movs	r3, #32
 8002076:	e003      	b.n	8002080 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	3301      	adds	r3, #1
 8002082:	f003 021f 	and.w	r2, r3, #31
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	3b1e      	subs	r3, #30
 800208e:	051b      	lsls	r3, r3, #20
 8002090:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002094:	430b      	orrs	r3, r1
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	6892      	ldr	r2, [r2, #8]
 800209a:	4619      	mov	r1, r3
 800209c:	f7ff fb1c 	bl	80016d8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f280 80cf 	bge.w	8002248 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a06      	ldr	r2, [pc, #24]	@ (80020c8 <HAL_ADC_ConfigChannel+0x4fc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d004      	beq.n	80020be <HAL_ADC_ConfigChannel+0x4f2>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a04      	ldr	r2, [pc, #16]	@ (80020cc <HAL_ADC_ConfigChannel+0x500>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d10a      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x508>
 80020be:	4b04      	ldr	r3, [pc, #16]	@ (80020d0 <HAL_ADC_ConfigChannel+0x504>)
 80020c0:	e009      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x50a>
 80020c2:	bf00      	nop
 80020c4:	47ff0000 	.word	0x47ff0000
 80020c8:	40022000 	.word	0x40022000
 80020cc:	40022100 	.word	0x40022100
 80020d0:	40022300 	.word	0x40022300
 80020d4:	4b61      	ldr	r3, [pc, #388]	@ (800225c <HAL_ADC_ConfigChannel+0x690>)
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fa70 	bl	80015bc <LL_ADC_GetCommonPathInternalCh>
 80020dc:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002260 <HAL_ADC_ConfigChannel+0x694>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d004      	beq.n	80020f2 <HAL_ADC_ConfigChannel+0x526>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a5d      	ldr	r2, [pc, #372]	@ (8002264 <HAL_ADC_ConfigChannel+0x698>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d10e      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x544>
 80020f2:	485b      	ldr	r0, [pc, #364]	@ (8002260 <HAL_ADC_ConfigChannel+0x694>)
 80020f4:	f7ff fb8e 	bl	8001814 <LL_ADC_IsEnabled>
 80020f8:	4604      	mov	r4, r0
 80020fa:	485a      	ldr	r0, [pc, #360]	@ (8002264 <HAL_ADC_ConfigChannel+0x698>)
 80020fc:	f7ff fb8a 	bl	8001814 <LL_ADC_IsEnabled>
 8002100:	4603      	mov	r3, r0
 8002102:	4323      	orrs	r3, r4
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	e008      	b.n	8002122 <HAL_ADC_ConfigChannel+0x556>
 8002110:	4855      	ldr	r0, [pc, #340]	@ (8002268 <HAL_ADC_ConfigChannel+0x69c>)
 8002112:	f7ff fb7f 	bl	8001814 <LL_ADC_IsEnabled>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d07d      	beq.n	8002222 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a50      	ldr	r2, [pc, #320]	@ (800226c <HAL_ADC_ConfigChannel+0x6a0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d130      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x5c6>
 8002130:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002132:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d12b      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a4a      	ldr	r2, [pc, #296]	@ (8002268 <HAL_ADC_ConfigChannel+0x69c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	f040 8081 	bne.w	8002248 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a45      	ldr	r2, [pc, #276]	@ (8002260 <HAL_ADC_ConfigChannel+0x694>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d004      	beq.n	800215a <HAL_ADC_ConfigChannel+0x58e>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a43      	ldr	r2, [pc, #268]	@ (8002264 <HAL_ADC_ConfigChannel+0x698>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d101      	bne.n	800215e <HAL_ADC_ConfigChannel+0x592>
 800215a:	4a45      	ldr	r2, [pc, #276]	@ (8002270 <HAL_ADC_ConfigChannel+0x6a4>)
 800215c:	e000      	b.n	8002160 <HAL_ADC_ConfigChannel+0x594>
 800215e:	4a3f      	ldr	r2, [pc, #252]	@ (800225c <HAL_ADC_ConfigChannel+0x690>)
 8002160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002162:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002166:	4619      	mov	r1, r3
 8002168:	4610      	mov	r0, r2
 800216a:	f7ff fa14 	bl	8001596 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800216e:	4b41      	ldr	r3, [pc, #260]	@ (8002274 <HAL_ADC_ConfigChannel+0x6a8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	099b      	lsrs	r3, r3, #6
 8002174:	4a40      	ldr	r2, [pc, #256]	@ (8002278 <HAL_ADC_ConfigChannel+0x6ac>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	099b      	lsrs	r3, r3, #6
 800217c:	3301      	adds	r3, #1
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002182:	e002      	b.n	800218a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	3b01      	subs	r3, #1
 8002188:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1f9      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002190:	e05a      	b.n	8002248 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a39      	ldr	r2, [pc, #228]	@ (800227c <HAL_ADC_ConfigChannel+0x6b0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d11e      	bne.n	80021da <HAL_ADC_ConfigChannel+0x60e>
 800219c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800219e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d119      	bne.n	80021da <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002268 <HAL_ADC_ConfigChannel+0x69c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d14b      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a2a      	ldr	r2, [pc, #168]	@ (8002260 <HAL_ADC_ConfigChannel+0x694>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d004      	beq.n	80021c4 <HAL_ADC_ConfigChannel+0x5f8>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a29      	ldr	r2, [pc, #164]	@ (8002264 <HAL_ADC_ConfigChannel+0x698>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d101      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x5fc>
 80021c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002270 <HAL_ADC_ConfigChannel+0x6a4>)
 80021c6:	e000      	b.n	80021ca <HAL_ADC_ConfigChannel+0x5fe>
 80021c8:	4a24      	ldr	r2, [pc, #144]	@ (800225c <HAL_ADC_ConfigChannel+0x690>)
 80021ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021d0:	4619      	mov	r1, r3
 80021d2:	4610      	mov	r0, r2
 80021d4:	f7ff f9df 	bl	8001596 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021d8:	e036      	b.n	8002248 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a28      	ldr	r2, [pc, #160]	@ (8002280 <HAL_ADC_ConfigChannel+0x6b4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d131      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x67c>
 80021e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d12c      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002268 <HAL_ADC_ConfigChannel+0x69c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d127      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a18      	ldr	r2, [pc, #96]	@ (8002260 <HAL_ADC_ConfigChannel+0x694>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d004      	beq.n	800220c <HAL_ADC_ConfigChannel+0x640>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a17      	ldr	r2, [pc, #92]	@ (8002264 <HAL_ADC_ConfigChannel+0x698>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d101      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x644>
 800220c:	4a18      	ldr	r2, [pc, #96]	@ (8002270 <HAL_ADC_ConfigChannel+0x6a4>)
 800220e:	e000      	b.n	8002212 <HAL_ADC_ConfigChannel+0x646>
 8002210:	4a12      	ldr	r2, [pc, #72]	@ (800225c <HAL_ADC_ConfigChannel+0x690>)
 8002212:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002214:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002218:	4619      	mov	r1, r3
 800221a:	4610      	mov	r0, r2
 800221c:	f7ff f9bb 	bl	8001596 <LL_ADC_SetCommonPathInternalCh>
 8002220:	e012      	b.n	8002248 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002226:	f043 0220 	orr.w	r2, r3, #32
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002234:	e008      	b.n	8002248 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223a:	f043 0220 	orr.w	r2, r3, #32
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002250:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002254:	4618      	mov	r0, r3
 8002256:	3784      	adds	r7, #132	@ 0x84
 8002258:	46bd      	mov	sp, r7
 800225a:	bd90      	pop	{r4, r7, pc}
 800225c:	58026300 	.word	0x58026300
 8002260:	40022000 	.word	0x40022000
 8002264:	40022100 	.word	0x40022100
 8002268:	58026000 	.word	0x58026000
 800226c:	cb840000 	.word	0xcb840000
 8002270:	40022300 	.word	0x40022300
 8002274:	24000000 	.word	0x24000000
 8002278:	053e2d63 	.word	0x053e2d63
 800227c:	c7520000 	.word	0xc7520000
 8002280:	cfb80000 	.word	0xcfb80000

08002284 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a7a      	ldr	r2, [pc, #488]	@ (800247c <ADC_ConfigureBoostMode+0x1f8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d004      	beq.n	80022a0 <ADC_ConfigureBoostMode+0x1c>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a79      	ldr	r2, [pc, #484]	@ (8002480 <ADC_ConfigureBoostMode+0x1fc>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d109      	bne.n	80022b4 <ADC_ConfigureBoostMode+0x30>
 80022a0:	4b78      	ldr	r3, [pc, #480]	@ (8002484 <ADC_ConfigureBoostMode+0x200>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	bf14      	ite	ne
 80022ac:	2301      	movne	r3, #1
 80022ae:	2300      	moveq	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	e008      	b.n	80022c6 <ADC_ConfigureBoostMode+0x42>
 80022b4:	4b74      	ldr	r3, [pc, #464]	@ (8002488 <ADC_ConfigureBoostMode+0x204>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bf14      	ite	ne
 80022c0:	2301      	movne	r3, #1
 80022c2:	2300      	moveq	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d01c      	beq.n	8002304 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80022ca:	f002 f941 	bl	8004550 <HAL_RCC_GetHCLKFreq>
 80022ce:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80022d8:	d010      	beq.n	80022fc <ADC_ConfigureBoostMode+0x78>
 80022da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80022de:	d873      	bhi.n	80023c8 <ADC_ConfigureBoostMode+0x144>
 80022e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022e4:	d002      	beq.n	80022ec <ADC_ConfigureBoostMode+0x68>
 80022e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80022ea:	d16d      	bne.n	80023c8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f8:	60fb      	str	r3, [r7, #12]
        break;
 80022fa:	e068      	b.n	80023ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	089b      	lsrs	r3, r3, #2
 8002300:	60fb      	str	r3, [r7, #12]
        break;
 8002302:	e064      	b.n	80023ce <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002304:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002308:	f04f 0100 	mov.w	r1, #0
 800230c:	f003 fb86 	bl	8005a1c <HAL_RCCEx_GetPeriphCLKFreq>
 8002310:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800231a:	d051      	beq.n	80023c0 <ADC_ConfigureBoostMode+0x13c>
 800231c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002320:	d854      	bhi.n	80023cc <ADC_ConfigureBoostMode+0x148>
 8002322:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002326:	d047      	beq.n	80023b8 <ADC_ConfigureBoostMode+0x134>
 8002328:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800232c:	d84e      	bhi.n	80023cc <ADC_ConfigureBoostMode+0x148>
 800232e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002332:	d03d      	beq.n	80023b0 <ADC_ConfigureBoostMode+0x12c>
 8002334:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002338:	d848      	bhi.n	80023cc <ADC_ConfigureBoostMode+0x148>
 800233a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800233e:	d033      	beq.n	80023a8 <ADC_ConfigureBoostMode+0x124>
 8002340:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002344:	d842      	bhi.n	80023cc <ADC_ConfigureBoostMode+0x148>
 8002346:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800234a:	d029      	beq.n	80023a0 <ADC_ConfigureBoostMode+0x11c>
 800234c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002350:	d83c      	bhi.n	80023cc <ADC_ConfigureBoostMode+0x148>
 8002352:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002356:	d01a      	beq.n	800238e <ADC_ConfigureBoostMode+0x10a>
 8002358:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800235c:	d836      	bhi.n	80023cc <ADC_ConfigureBoostMode+0x148>
 800235e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002362:	d014      	beq.n	800238e <ADC_ConfigureBoostMode+0x10a>
 8002364:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002368:	d830      	bhi.n	80023cc <ADC_ConfigureBoostMode+0x148>
 800236a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800236e:	d00e      	beq.n	800238e <ADC_ConfigureBoostMode+0x10a>
 8002370:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002374:	d82a      	bhi.n	80023cc <ADC_ConfigureBoostMode+0x148>
 8002376:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800237a:	d008      	beq.n	800238e <ADC_ConfigureBoostMode+0x10a>
 800237c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002380:	d824      	bhi.n	80023cc <ADC_ConfigureBoostMode+0x148>
 8002382:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002386:	d002      	beq.n	800238e <ADC_ConfigureBoostMode+0x10a>
 8002388:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800238c:	d11e      	bne.n	80023cc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	0c9b      	lsrs	r3, r3, #18
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	fbb2 f3f3 	udiv	r3, r2, r3
 800239c:	60fb      	str	r3, [r7, #12]
        break;
 800239e:	e016      	b.n	80023ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	091b      	lsrs	r3, r3, #4
 80023a4:	60fb      	str	r3, [r7, #12]
        break;
 80023a6:	e012      	b.n	80023ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	60fb      	str	r3, [r7, #12]
        break;
 80023ae:	e00e      	b.n	80023ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	099b      	lsrs	r3, r3, #6
 80023b4:	60fb      	str	r3, [r7, #12]
        break;
 80023b6:	e00a      	b.n	80023ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	09db      	lsrs	r3, r3, #7
 80023bc:	60fb      	str	r3, [r7, #12]
        break;
 80023be:	e006      	b.n	80023ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	60fb      	str	r3, [r7, #12]
        break;
 80023c6:	e002      	b.n	80023ce <ADC_ConfigureBoostMode+0x14a>
        break;
 80023c8:	bf00      	nop
 80023ca:	e000      	b.n	80023ce <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80023cc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80023ce:	f7ff f8ad 	bl	800152c <HAL_GetREVID>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80023d8:	4293      	cmp	r3, r2
 80023da:	d815      	bhi.n	8002408 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4a2b      	ldr	r2, [pc, #172]	@ (800248c <ADC_ConfigureBoostMode+0x208>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d908      	bls.n	80023f6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023f2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80023f4:	e03e      	b.n	8002474 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002404:	609a      	str	r2, [r3, #8]
}
 8002406:	e035      	b.n	8002474 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	085b      	lsrs	r3, r3, #1
 800240c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4a1f      	ldr	r2, [pc, #124]	@ (8002490 <ADC_ConfigureBoostMode+0x20c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d808      	bhi.n	8002428 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002424:	609a      	str	r2, [r3, #8]
}
 8002426:	e025      	b.n	8002474 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4a1a      	ldr	r2, [pc, #104]	@ (8002494 <ADC_ConfigureBoostMode+0x210>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d80a      	bhi.n	8002446 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002442:	609a      	str	r2, [r3, #8]
}
 8002444:	e016      	b.n	8002474 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4a13      	ldr	r2, [pc, #76]	@ (8002498 <ADC_ConfigureBoostMode+0x214>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d80a      	bhi.n	8002464 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002460:	609a      	str	r2, [r3, #8]
}
 8002462:	e007      	b.n	8002474 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002472:	609a      	str	r2, [r3, #8]
}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40022000 	.word	0x40022000
 8002480:	40022100 	.word	0x40022100
 8002484:	40022300 	.word	0x40022300
 8002488:	58026300 	.word	0x58026300
 800248c:	01312d00 	.word	0x01312d00
 8002490:	005f5e10 	.word	0x005f5e10
 8002494:	00bebc20 	.word	0x00bebc20
 8002498:	017d7840 	.word	0x017d7840

0800249c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024ac:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <__NVIC_SetPriorityGrouping+0x40>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024b8:	4013      	ands	r3, r2
 80024ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024c4:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <__NVIC_SetPriorityGrouping+0x44>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ca:	4a04      	ldr	r2, [pc, #16]	@ (80024dc <__NVIC_SetPriorityGrouping+0x40>)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	60d3      	str	r3, [r2, #12]
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000ed00 	.word	0xe000ed00
 80024e0:	05fa0000 	.word	0x05fa0000

080024e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e8:	4b04      	ldr	r3, [pc, #16]	@ (80024fc <__NVIC_GetPriorityGrouping+0x18>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	f003 0307 	and.w	r3, r3, #7
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800250a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800250e:	2b00      	cmp	r3, #0
 8002510:	db0b      	blt.n	800252a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	f003 021f 	and.w	r2, r3, #31
 8002518:	4907      	ldr	r1, [pc, #28]	@ (8002538 <__NVIC_EnableIRQ+0x38>)
 800251a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	2001      	movs	r0, #1
 8002522:	fa00 f202 	lsl.w	r2, r0, r2
 8002526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000e100 	.word	0xe000e100

0800253c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	6039      	str	r1, [r7, #0]
 8002546:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002548:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800254c:	2b00      	cmp	r3, #0
 800254e:	db0a      	blt.n	8002566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	b2da      	uxtb	r2, r3
 8002554:	490c      	ldr	r1, [pc, #48]	@ (8002588 <__NVIC_SetPriority+0x4c>)
 8002556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800255a:	0112      	lsls	r2, r2, #4
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	440b      	add	r3, r1
 8002560:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002564:	e00a      	b.n	800257c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4908      	ldr	r1, [pc, #32]	@ (800258c <__NVIC_SetPriority+0x50>)
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	3b04      	subs	r3, #4
 8002574:	0112      	lsls	r2, r2, #4
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	440b      	add	r3, r1
 800257a:	761a      	strb	r2, [r3, #24]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000e100 	.word	0xe000e100
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002590:	b480      	push	{r7}
 8002592:	b089      	sub	sp, #36	@ 0x24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f1c3 0307 	rsb	r3, r3, #7
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	bf28      	it	cs
 80025ae:	2304      	movcs	r3, #4
 80025b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3304      	adds	r3, #4
 80025b6:	2b06      	cmp	r3, #6
 80025b8:	d902      	bls.n	80025c0 <NVIC_EncodePriority+0x30>
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3b03      	subs	r3, #3
 80025be:	e000      	b.n	80025c2 <NVIC_EncodePriority+0x32>
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	f04f 32ff 	mov.w	r2, #4294967295
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43da      	mvns	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	401a      	ands	r2, r3
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d8:	f04f 31ff 	mov.w	r1, #4294967295
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	fa01 f303 	lsl.w	r3, r1, r3
 80025e2:	43d9      	mvns	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	4313      	orrs	r3, r2
         );
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3724      	adds	r7, #36	@ 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002608:	d301      	bcc.n	800260e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800260a:	2301      	movs	r3, #1
 800260c:	e00f      	b.n	800262e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800260e:	4a0a      	ldr	r2, [pc, #40]	@ (8002638 <SysTick_Config+0x40>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002616:	210f      	movs	r1, #15
 8002618:	f04f 30ff 	mov.w	r0, #4294967295
 800261c:	f7ff ff8e 	bl	800253c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002620:	4b05      	ldr	r3, [pc, #20]	@ (8002638 <SysTick_Config+0x40>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002626:	4b04      	ldr	r3, [pc, #16]	@ (8002638 <SysTick_Config+0x40>)
 8002628:	2207      	movs	r2, #7
 800262a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	e000e010 	.word	0xe000e010

0800263c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ff29 	bl	800249c <__NVIC_SetPriorityGrouping>
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	4603      	mov	r3, r0
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002660:	f7ff ff40 	bl	80024e4 <__NVIC_GetPriorityGrouping>
 8002664:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	6978      	ldr	r0, [r7, #20]
 800266c:	f7ff ff90 	bl	8002590 <NVIC_EncodePriority>
 8002670:	4602      	mov	r2, r0
 8002672:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff5f 	bl	800253c <__NVIC_SetPriority>
}
 800267e:	bf00      	nop
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	4603      	mov	r3, r0
 800268e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002690:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff33 	bl	8002500 <__NVIC_EnableIRQ>
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff ffa4 	bl	80025f8 <SysTick_Config>
 80026b0:	4603      	mov	r3, r0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80026c4:	f7fe ff26 	bl	8001514 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e316      	b.n	8002d02 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a66      	ldr	r2, [pc, #408]	@ (8002874 <HAL_DMA_Init+0x1b8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d04a      	beq.n	8002774 <HAL_DMA_Init+0xb8>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a65      	ldr	r2, [pc, #404]	@ (8002878 <HAL_DMA_Init+0x1bc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d045      	beq.n	8002774 <HAL_DMA_Init+0xb8>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a63      	ldr	r2, [pc, #396]	@ (800287c <HAL_DMA_Init+0x1c0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d040      	beq.n	8002774 <HAL_DMA_Init+0xb8>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a62      	ldr	r2, [pc, #392]	@ (8002880 <HAL_DMA_Init+0x1c4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d03b      	beq.n	8002774 <HAL_DMA_Init+0xb8>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a60      	ldr	r2, [pc, #384]	@ (8002884 <HAL_DMA_Init+0x1c8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d036      	beq.n	8002774 <HAL_DMA_Init+0xb8>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a5f      	ldr	r2, [pc, #380]	@ (8002888 <HAL_DMA_Init+0x1cc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d031      	beq.n	8002774 <HAL_DMA_Init+0xb8>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a5d      	ldr	r2, [pc, #372]	@ (800288c <HAL_DMA_Init+0x1d0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d02c      	beq.n	8002774 <HAL_DMA_Init+0xb8>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a5c      	ldr	r2, [pc, #368]	@ (8002890 <HAL_DMA_Init+0x1d4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d027      	beq.n	8002774 <HAL_DMA_Init+0xb8>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a5a      	ldr	r2, [pc, #360]	@ (8002894 <HAL_DMA_Init+0x1d8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d022      	beq.n	8002774 <HAL_DMA_Init+0xb8>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a59      	ldr	r2, [pc, #356]	@ (8002898 <HAL_DMA_Init+0x1dc>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d01d      	beq.n	8002774 <HAL_DMA_Init+0xb8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a57      	ldr	r2, [pc, #348]	@ (800289c <HAL_DMA_Init+0x1e0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d018      	beq.n	8002774 <HAL_DMA_Init+0xb8>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a56      	ldr	r2, [pc, #344]	@ (80028a0 <HAL_DMA_Init+0x1e4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d013      	beq.n	8002774 <HAL_DMA_Init+0xb8>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a54      	ldr	r2, [pc, #336]	@ (80028a4 <HAL_DMA_Init+0x1e8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00e      	beq.n	8002774 <HAL_DMA_Init+0xb8>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a53      	ldr	r2, [pc, #332]	@ (80028a8 <HAL_DMA_Init+0x1ec>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d009      	beq.n	8002774 <HAL_DMA_Init+0xb8>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a51      	ldr	r2, [pc, #324]	@ (80028ac <HAL_DMA_Init+0x1f0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d004      	beq.n	8002774 <HAL_DMA_Init+0xb8>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a50      	ldr	r2, [pc, #320]	@ (80028b0 <HAL_DMA_Init+0x1f4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d101      	bne.n	8002778 <HAL_DMA_Init+0xbc>
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <HAL_DMA_Init+0xbe>
 8002778:	2300      	movs	r3, #0
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 813b 	beq.w	80029f6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a37      	ldr	r2, [pc, #220]	@ (8002874 <HAL_DMA_Init+0x1b8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d04a      	beq.n	8002830 <HAL_DMA_Init+0x174>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a36      	ldr	r2, [pc, #216]	@ (8002878 <HAL_DMA_Init+0x1bc>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d045      	beq.n	8002830 <HAL_DMA_Init+0x174>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a34      	ldr	r2, [pc, #208]	@ (800287c <HAL_DMA_Init+0x1c0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d040      	beq.n	8002830 <HAL_DMA_Init+0x174>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a33      	ldr	r2, [pc, #204]	@ (8002880 <HAL_DMA_Init+0x1c4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d03b      	beq.n	8002830 <HAL_DMA_Init+0x174>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a31      	ldr	r2, [pc, #196]	@ (8002884 <HAL_DMA_Init+0x1c8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d036      	beq.n	8002830 <HAL_DMA_Init+0x174>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a30      	ldr	r2, [pc, #192]	@ (8002888 <HAL_DMA_Init+0x1cc>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d031      	beq.n	8002830 <HAL_DMA_Init+0x174>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a2e      	ldr	r2, [pc, #184]	@ (800288c <HAL_DMA_Init+0x1d0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d02c      	beq.n	8002830 <HAL_DMA_Init+0x174>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a2d      	ldr	r2, [pc, #180]	@ (8002890 <HAL_DMA_Init+0x1d4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d027      	beq.n	8002830 <HAL_DMA_Init+0x174>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002894 <HAL_DMA_Init+0x1d8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d022      	beq.n	8002830 <HAL_DMA_Init+0x174>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a2a      	ldr	r2, [pc, #168]	@ (8002898 <HAL_DMA_Init+0x1dc>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d01d      	beq.n	8002830 <HAL_DMA_Init+0x174>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a28      	ldr	r2, [pc, #160]	@ (800289c <HAL_DMA_Init+0x1e0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d018      	beq.n	8002830 <HAL_DMA_Init+0x174>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a27      	ldr	r2, [pc, #156]	@ (80028a0 <HAL_DMA_Init+0x1e4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d013      	beq.n	8002830 <HAL_DMA_Init+0x174>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a25      	ldr	r2, [pc, #148]	@ (80028a4 <HAL_DMA_Init+0x1e8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00e      	beq.n	8002830 <HAL_DMA_Init+0x174>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a24      	ldr	r2, [pc, #144]	@ (80028a8 <HAL_DMA_Init+0x1ec>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d009      	beq.n	8002830 <HAL_DMA_Init+0x174>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a22      	ldr	r2, [pc, #136]	@ (80028ac <HAL_DMA_Init+0x1f0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d004      	beq.n	8002830 <HAL_DMA_Init+0x174>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a21      	ldr	r2, [pc, #132]	@ (80028b0 <HAL_DMA_Init+0x1f4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d108      	bne.n	8002842 <HAL_DMA_Init+0x186>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e007      	b.n	8002852 <HAL_DMA_Init+0x196>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0201 	bic.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002852:	e02f      	b.n	80028b4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002854:	f7fe fe5e 	bl	8001514 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b05      	cmp	r3, #5
 8002860:	d928      	bls.n	80028b4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2220      	movs	r2, #32
 8002866:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2203      	movs	r2, #3
 800286c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e246      	b.n	8002d02 <HAL_DMA_Init+0x646>
 8002874:	40020010 	.word	0x40020010
 8002878:	40020028 	.word	0x40020028
 800287c:	40020040 	.word	0x40020040
 8002880:	40020058 	.word	0x40020058
 8002884:	40020070 	.word	0x40020070
 8002888:	40020088 	.word	0x40020088
 800288c:	400200a0 	.word	0x400200a0
 8002890:	400200b8 	.word	0x400200b8
 8002894:	40020410 	.word	0x40020410
 8002898:	40020428 	.word	0x40020428
 800289c:	40020440 	.word	0x40020440
 80028a0:	40020458 	.word	0x40020458
 80028a4:	40020470 	.word	0x40020470
 80028a8:	40020488 	.word	0x40020488
 80028ac:	400204a0 	.word	0x400204a0
 80028b0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1c8      	bne.n	8002854 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4b83      	ldr	r3, [pc, #524]	@ (8002adc <HAL_DMA_Init+0x420>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80028da:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002904:	2b04      	cmp	r3, #4
 8002906:	d107      	bne.n	8002918 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002910:	4313      	orrs	r3, r2
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4313      	orrs	r3, r2
 8002916:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002918:	4b71      	ldr	r3, [pc, #452]	@ (8002ae0 <HAL_DMA_Init+0x424>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b71      	ldr	r3, [pc, #452]	@ (8002ae4 <HAL_DMA_Init+0x428>)
 800291e:	4013      	ands	r3, r2
 8002920:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002924:	d328      	bcc.n	8002978 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b28      	cmp	r3, #40	@ 0x28
 800292c:	d903      	bls.n	8002936 <HAL_DMA_Init+0x27a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b2e      	cmp	r3, #46	@ 0x2e
 8002934:	d917      	bls.n	8002966 <HAL_DMA_Init+0x2aa>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b3e      	cmp	r3, #62	@ 0x3e
 800293c:	d903      	bls.n	8002946 <HAL_DMA_Init+0x28a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b42      	cmp	r3, #66	@ 0x42
 8002944:	d90f      	bls.n	8002966 <HAL_DMA_Init+0x2aa>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b46      	cmp	r3, #70	@ 0x46
 800294c:	d903      	bls.n	8002956 <HAL_DMA_Init+0x29a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b48      	cmp	r3, #72	@ 0x48
 8002954:	d907      	bls.n	8002966 <HAL_DMA_Init+0x2aa>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b4e      	cmp	r3, #78	@ 0x4e
 800295c:	d905      	bls.n	800296a <HAL_DMA_Init+0x2ae>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b52      	cmp	r3, #82	@ 0x52
 8002964:	d801      	bhi.n	800296a <HAL_DMA_Init+0x2ae>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <HAL_DMA_Init+0x2b0>
 800296a:	2300      	movs	r3, #0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002976:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f023 0307 	bic.w	r3, r3, #7
 800298e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d117      	bne.n	80029d2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00e      	beq.n	80029d2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 fa8f 	bl	8002ed8 <DMA_CheckFifoParam>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2240      	movs	r2, #64	@ 0x40
 80029c4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e197      	b.n	8002d02 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f9ca 	bl	8002d74 <DMA_CalcBaseAndBitshift>
 80029e0:	4603      	mov	r3, r0
 80029e2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e8:	f003 031f 	and.w	r3, r3, #31
 80029ec:	223f      	movs	r2, #63	@ 0x3f
 80029ee:	409a      	lsls	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	e0cd      	b.n	8002b92 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a3b      	ldr	r2, [pc, #236]	@ (8002ae8 <HAL_DMA_Init+0x42c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d022      	beq.n	8002a46 <HAL_DMA_Init+0x38a>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a39      	ldr	r2, [pc, #228]	@ (8002aec <HAL_DMA_Init+0x430>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d01d      	beq.n	8002a46 <HAL_DMA_Init+0x38a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a38      	ldr	r2, [pc, #224]	@ (8002af0 <HAL_DMA_Init+0x434>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d018      	beq.n	8002a46 <HAL_DMA_Init+0x38a>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a36      	ldr	r2, [pc, #216]	@ (8002af4 <HAL_DMA_Init+0x438>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d013      	beq.n	8002a46 <HAL_DMA_Init+0x38a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a35      	ldr	r2, [pc, #212]	@ (8002af8 <HAL_DMA_Init+0x43c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d00e      	beq.n	8002a46 <HAL_DMA_Init+0x38a>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a33      	ldr	r2, [pc, #204]	@ (8002afc <HAL_DMA_Init+0x440>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d009      	beq.n	8002a46 <HAL_DMA_Init+0x38a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a32      	ldr	r2, [pc, #200]	@ (8002b00 <HAL_DMA_Init+0x444>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d004      	beq.n	8002a46 <HAL_DMA_Init+0x38a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a30      	ldr	r2, [pc, #192]	@ (8002b04 <HAL_DMA_Init+0x448>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d101      	bne.n	8002a4a <HAL_DMA_Init+0x38e>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_DMA_Init+0x390>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 8097 	beq.w	8002b80 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a24      	ldr	r2, [pc, #144]	@ (8002ae8 <HAL_DMA_Init+0x42c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d021      	beq.n	8002aa0 <HAL_DMA_Init+0x3e4>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a22      	ldr	r2, [pc, #136]	@ (8002aec <HAL_DMA_Init+0x430>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d01c      	beq.n	8002aa0 <HAL_DMA_Init+0x3e4>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a21      	ldr	r2, [pc, #132]	@ (8002af0 <HAL_DMA_Init+0x434>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d017      	beq.n	8002aa0 <HAL_DMA_Init+0x3e4>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1f      	ldr	r2, [pc, #124]	@ (8002af4 <HAL_DMA_Init+0x438>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d012      	beq.n	8002aa0 <HAL_DMA_Init+0x3e4>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002af8 <HAL_DMA_Init+0x43c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00d      	beq.n	8002aa0 <HAL_DMA_Init+0x3e4>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a1c      	ldr	r2, [pc, #112]	@ (8002afc <HAL_DMA_Init+0x440>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d008      	beq.n	8002aa0 <HAL_DMA_Init+0x3e4>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a1b      	ldr	r2, [pc, #108]	@ (8002b00 <HAL_DMA_Init+0x444>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d003      	beq.n	8002aa0 <HAL_DMA_Init+0x3e4>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a19      	ldr	r2, [pc, #100]	@ (8002b04 <HAL_DMA_Init+0x448>)
 8002a9e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	4b13      	ldr	r3, [pc, #76]	@ (8002b08 <HAL_DMA_Init+0x44c>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b40      	cmp	r3, #64	@ 0x40
 8002ac6:	d021      	beq.n	8002b0c <HAL_DMA_Init+0x450>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b80      	cmp	r3, #128	@ 0x80
 8002ace:	d102      	bne.n	8002ad6 <HAL_DMA_Init+0x41a>
 8002ad0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ad4:	e01b      	b.n	8002b0e <HAL_DMA_Init+0x452>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e019      	b.n	8002b0e <HAL_DMA_Init+0x452>
 8002ada:	bf00      	nop
 8002adc:	fe10803f 	.word	0xfe10803f
 8002ae0:	5c001000 	.word	0x5c001000
 8002ae4:	ffff0000 	.word	0xffff0000
 8002ae8:	58025408 	.word	0x58025408
 8002aec:	5802541c 	.word	0x5802541c
 8002af0:	58025430 	.word	0x58025430
 8002af4:	58025444 	.word	0x58025444
 8002af8:	58025458 	.word	0x58025458
 8002afc:	5802546c 	.word	0x5802546c
 8002b00:	58025480 	.word	0x58025480
 8002b04:	58025494 	.word	0x58025494
 8002b08:	fffe000f 	.word	0xfffe000f
 8002b0c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68d2      	ldr	r2, [r2, #12]
 8002b12:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b3c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b6e      	ldr	r3, [pc, #440]	@ (8002d0c <HAL_DMA_Init+0x650>)
 8002b54:	4413      	add	r3, r2
 8002b56:	4a6e      	ldr	r2, [pc, #440]	@ (8002d10 <HAL_DMA_Init+0x654>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	009a      	lsls	r2, r3, #2
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f905 	bl	8002d74 <DMA_CalcBaseAndBitshift>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b72:	f003 031f 	and.w	r3, r3, #31
 8002b76:	2201      	movs	r2, #1
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	e008      	b.n	8002b92 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2240      	movs	r2, #64	@ 0x40
 8002b84:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2203      	movs	r2, #3
 8002b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0b7      	b.n	8002d02 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a5f      	ldr	r2, [pc, #380]	@ (8002d14 <HAL_DMA_Init+0x658>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d072      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a5d      	ldr	r2, [pc, #372]	@ (8002d18 <HAL_DMA_Init+0x65c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d06d      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a5c      	ldr	r2, [pc, #368]	@ (8002d1c <HAL_DMA_Init+0x660>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d068      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a5a      	ldr	r2, [pc, #360]	@ (8002d20 <HAL_DMA_Init+0x664>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d063      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a59      	ldr	r2, [pc, #356]	@ (8002d24 <HAL_DMA_Init+0x668>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d05e      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a57      	ldr	r2, [pc, #348]	@ (8002d28 <HAL_DMA_Init+0x66c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d059      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a56      	ldr	r2, [pc, #344]	@ (8002d2c <HAL_DMA_Init+0x670>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d054      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a54      	ldr	r2, [pc, #336]	@ (8002d30 <HAL_DMA_Init+0x674>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d04f      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a53      	ldr	r2, [pc, #332]	@ (8002d34 <HAL_DMA_Init+0x678>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d04a      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a51      	ldr	r2, [pc, #324]	@ (8002d38 <HAL_DMA_Init+0x67c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d045      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a50      	ldr	r2, [pc, #320]	@ (8002d3c <HAL_DMA_Init+0x680>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d040      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a4e      	ldr	r2, [pc, #312]	@ (8002d40 <HAL_DMA_Init+0x684>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d03b      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a4d      	ldr	r2, [pc, #308]	@ (8002d44 <HAL_DMA_Init+0x688>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d036      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a4b      	ldr	r2, [pc, #300]	@ (8002d48 <HAL_DMA_Init+0x68c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d031      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a4a      	ldr	r2, [pc, #296]	@ (8002d4c <HAL_DMA_Init+0x690>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d02c      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a48      	ldr	r2, [pc, #288]	@ (8002d50 <HAL_DMA_Init+0x694>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d027      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a47      	ldr	r2, [pc, #284]	@ (8002d54 <HAL_DMA_Init+0x698>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d022      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a45      	ldr	r2, [pc, #276]	@ (8002d58 <HAL_DMA_Init+0x69c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d01d      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a44      	ldr	r2, [pc, #272]	@ (8002d5c <HAL_DMA_Init+0x6a0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d018      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a42      	ldr	r2, [pc, #264]	@ (8002d60 <HAL_DMA_Init+0x6a4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a41      	ldr	r2, [pc, #260]	@ (8002d64 <HAL_DMA_Init+0x6a8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d00e      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a3f      	ldr	r2, [pc, #252]	@ (8002d68 <HAL_DMA_Init+0x6ac>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d009      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a3e      	ldr	r2, [pc, #248]	@ (8002d6c <HAL_DMA_Init+0x6b0>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d004      	beq.n	8002c82 <HAL_DMA_Init+0x5c6>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a3c      	ldr	r2, [pc, #240]	@ (8002d70 <HAL_DMA_Init+0x6b4>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d101      	bne.n	8002c86 <HAL_DMA_Init+0x5ca>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <HAL_DMA_Init+0x5cc>
 8002c86:	2300      	movs	r3, #0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d032      	beq.n	8002cf2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f99f 	bl	8002fd0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b80      	cmp	r3, #128	@ 0x80
 8002c98:	d102      	bne.n	8002ca0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002cb4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d010      	beq.n	8002ce0 <HAL_DMA_Init+0x624>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d80c      	bhi.n	8002ce0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fa1c 	bl	8003104 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	e008      	b.n	8002cf2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	a7fdabf8 	.word	0xa7fdabf8
 8002d10:	cccccccd 	.word	0xcccccccd
 8002d14:	40020010 	.word	0x40020010
 8002d18:	40020028 	.word	0x40020028
 8002d1c:	40020040 	.word	0x40020040
 8002d20:	40020058 	.word	0x40020058
 8002d24:	40020070 	.word	0x40020070
 8002d28:	40020088 	.word	0x40020088
 8002d2c:	400200a0 	.word	0x400200a0
 8002d30:	400200b8 	.word	0x400200b8
 8002d34:	40020410 	.word	0x40020410
 8002d38:	40020428 	.word	0x40020428
 8002d3c:	40020440 	.word	0x40020440
 8002d40:	40020458 	.word	0x40020458
 8002d44:	40020470 	.word	0x40020470
 8002d48:	40020488 	.word	0x40020488
 8002d4c:	400204a0 	.word	0x400204a0
 8002d50:	400204b8 	.word	0x400204b8
 8002d54:	58025408 	.word	0x58025408
 8002d58:	5802541c 	.word	0x5802541c
 8002d5c:	58025430 	.word	0x58025430
 8002d60:	58025444 	.word	0x58025444
 8002d64:	58025458 	.word	0x58025458
 8002d68:	5802546c 	.word	0x5802546c
 8002d6c:	58025480 	.word	0x58025480
 8002d70:	58025494 	.word	0x58025494

08002d74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a42      	ldr	r2, [pc, #264]	@ (8002e8c <DMA_CalcBaseAndBitshift+0x118>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d04a      	beq.n	8002e1c <DMA_CalcBaseAndBitshift+0xa8>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a41      	ldr	r2, [pc, #260]	@ (8002e90 <DMA_CalcBaseAndBitshift+0x11c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d045      	beq.n	8002e1c <DMA_CalcBaseAndBitshift+0xa8>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a3f      	ldr	r2, [pc, #252]	@ (8002e94 <DMA_CalcBaseAndBitshift+0x120>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d040      	beq.n	8002e1c <DMA_CalcBaseAndBitshift+0xa8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a3e      	ldr	r2, [pc, #248]	@ (8002e98 <DMA_CalcBaseAndBitshift+0x124>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d03b      	beq.n	8002e1c <DMA_CalcBaseAndBitshift+0xa8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a3c      	ldr	r2, [pc, #240]	@ (8002e9c <DMA_CalcBaseAndBitshift+0x128>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d036      	beq.n	8002e1c <DMA_CalcBaseAndBitshift+0xa8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a3b      	ldr	r2, [pc, #236]	@ (8002ea0 <DMA_CalcBaseAndBitshift+0x12c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d031      	beq.n	8002e1c <DMA_CalcBaseAndBitshift+0xa8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a39      	ldr	r2, [pc, #228]	@ (8002ea4 <DMA_CalcBaseAndBitshift+0x130>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d02c      	beq.n	8002e1c <DMA_CalcBaseAndBitshift+0xa8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a38      	ldr	r2, [pc, #224]	@ (8002ea8 <DMA_CalcBaseAndBitshift+0x134>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d027      	beq.n	8002e1c <DMA_CalcBaseAndBitshift+0xa8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a36      	ldr	r2, [pc, #216]	@ (8002eac <DMA_CalcBaseAndBitshift+0x138>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d022      	beq.n	8002e1c <DMA_CalcBaseAndBitshift+0xa8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a35      	ldr	r2, [pc, #212]	@ (8002eb0 <DMA_CalcBaseAndBitshift+0x13c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d01d      	beq.n	8002e1c <DMA_CalcBaseAndBitshift+0xa8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a33      	ldr	r2, [pc, #204]	@ (8002eb4 <DMA_CalcBaseAndBitshift+0x140>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d018      	beq.n	8002e1c <DMA_CalcBaseAndBitshift+0xa8>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a32      	ldr	r2, [pc, #200]	@ (8002eb8 <DMA_CalcBaseAndBitshift+0x144>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d013      	beq.n	8002e1c <DMA_CalcBaseAndBitshift+0xa8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a30      	ldr	r2, [pc, #192]	@ (8002ebc <DMA_CalcBaseAndBitshift+0x148>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00e      	beq.n	8002e1c <DMA_CalcBaseAndBitshift+0xa8>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a2f      	ldr	r2, [pc, #188]	@ (8002ec0 <DMA_CalcBaseAndBitshift+0x14c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d009      	beq.n	8002e1c <DMA_CalcBaseAndBitshift+0xa8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a2d      	ldr	r2, [pc, #180]	@ (8002ec4 <DMA_CalcBaseAndBitshift+0x150>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d004      	beq.n	8002e1c <DMA_CalcBaseAndBitshift+0xa8>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a2c      	ldr	r2, [pc, #176]	@ (8002ec8 <DMA_CalcBaseAndBitshift+0x154>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d101      	bne.n	8002e20 <DMA_CalcBaseAndBitshift+0xac>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <DMA_CalcBaseAndBitshift+0xae>
 8002e20:	2300      	movs	r3, #0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d024      	beq.n	8002e70 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	3b10      	subs	r3, #16
 8002e2e:	4a27      	ldr	r2, [pc, #156]	@ (8002ecc <DMA_CalcBaseAndBitshift+0x158>)
 8002e30:	fba2 2303 	umull	r2, r3, r2, r3
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	4a24      	ldr	r2, [pc, #144]	@ (8002ed0 <DMA_CalcBaseAndBitshift+0x15c>)
 8002e40:	5cd3      	ldrb	r3, [r2, r3]
 8002e42:	461a      	mov	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d908      	bls.n	8002e60 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed4 <DMA_CalcBaseAndBitshift+0x160>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	1d1a      	adds	r2, r3, #4
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e5e:	e00d      	b.n	8002e7c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed4 <DMA_CalcBaseAndBitshift+0x160>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e6e:	e005      	b.n	8002e7c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	40020010 	.word	0x40020010
 8002e90:	40020028 	.word	0x40020028
 8002e94:	40020040 	.word	0x40020040
 8002e98:	40020058 	.word	0x40020058
 8002e9c:	40020070 	.word	0x40020070
 8002ea0:	40020088 	.word	0x40020088
 8002ea4:	400200a0 	.word	0x400200a0
 8002ea8:	400200b8 	.word	0x400200b8
 8002eac:	40020410 	.word	0x40020410
 8002eb0:	40020428 	.word	0x40020428
 8002eb4:	40020440 	.word	0x40020440
 8002eb8:	40020458 	.word	0x40020458
 8002ebc:	40020470 	.word	0x40020470
 8002ec0:	40020488 	.word	0x40020488
 8002ec4:	400204a0 	.word	0x400204a0
 8002ec8:	400204b8 	.word	0x400204b8
 8002ecc:	aaaaaaab 	.word	0xaaaaaaab
 8002ed0:	08008554 	.word	0x08008554
 8002ed4:	fffffc00 	.word	0xfffffc00

08002ed8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d120      	bne.n	8002f2e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d858      	bhi.n	8002fa6 <DMA_CheckFifoParam+0xce>
 8002ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8002efc <DMA_CheckFifoParam+0x24>)
 8002ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efa:	bf00      	nop
 8002efc:	08002f0d 	.word	0x08002f0d
 8002f00:	08002f1f 	.word	0x08002f1f
 8002f04:	08002f0d 	.word	0x08002f0d
 8002f08:	08002fa7 	.word	0x08002fa7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d048      	beq.n	8002faa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f1c:	e045      	b.n	8002faa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f22:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f26:	d142      	bne.n	8002fae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f2c:	e03f      	b.n	8002fae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f36:	d123      	bne.n	8002f80 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d838      	bhi.n	8002fb2 <DMA_CheckFifoParam+0xda>
 8002f40:	a201      	add	r2, pc, #4	@ (adr r2, 8002f48 <DMA_CheckFifoParam+0x70>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08002f59 	.word	0x08002f59
 8002f4c:	08002f5f 	.word	0x08002f5f
 8002f50:	08002f59 	.word	0x08002f59
 8002f54:	08002f71 	.word	0x08002f71
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
        break;
 8002f5c:	e030      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d025      	beq.n	8002fb6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f6e:	e022      	b.n	8002fb6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f78:	d11f      	bne.n	8002fba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f7e:	e01c      	b.n	8002fba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d902      	bls.n	8002f8e <DMA_CheckFifoParam+0xb6>
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d003      	beq.n	8002f94 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002f8c:	e018      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	73fb      	strb	r3, [r7, #15]
        break;
 8002f92:	e015      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00e      	beq.n	8002fbe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	73fb      	strb	r3, [r7, #15]
    break;
 8002fa4:	e00b      	b.n	8002fbe <DMA_CheckFifoParam+0xe6>
        break;
 8002fa6:	bf00      	nop
 8002fa8:	e00a      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
        break;
 8002faa:	bf00      	nop
 8002fac:	e008      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
        break;
 8002fae:	bf00      	nop
 8002fb0:	e006      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
        break;
 8002fb2:	bf00      	nop
 8002fb4:	e004      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
        break;
 8002fb6:	bf00      	nop
 8002fb8:	e002      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
        break;
 8002fba:	bf00      	nop
 8002fbc:	e000      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
    break;
 8002fbe:	bf00      	nop
    }
  }

  return status;
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop

08002fd0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a38      	ldr	r2, [pc, #224]	@ (80030c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d022      	beq.n	800302e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a36      	ldr	r2, [pc, #216]	@ (80030c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d01d      	beq.n	800302e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a35      	ldr	r2, [pc, #212]	@ (80030cc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d018      	beq.n	800302e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a33      	ldr	r2, [pc, #204]	@ (80030d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a32      	ldr	r2, [pc, #200]	@ (80030d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d00e      	beq.n	800302e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a30      	ldr	r2, [pc, #192]	@ (80030d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d009      	beq.n	800302e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a2f      	ldr	r2, [pc, #188]	@ (80030dc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d004      	beq.n	800302e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a2d      	ldr	r2, [pc, #180]	@ (80030e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d101      	bne.n	8003032 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003032:	2300      	movs	r3, #0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01a      	beq.n	800306e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	b2db      	uxtb	r3, r3
 800303e:	3b08      	subs	r3, #8
 8003040:	4a28      	ldr	r2, [pc, #160]	@ (80030e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	091b      	lsrs	r3, r3, #4
 8003048:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4b26      	ldr	r3, [pc, #152]	@ (80030e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800304e:	4413      	add	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	461a      	mov	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a24      	ldr	r2, [pc, #144]	@ (80030ec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800305c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	2201      	movs	r2, #1
 8003066:	409a      	lsls	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800306c:	e024      	b.n	80030b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	3b10      	subs	r3, #16
 8003076:	4a1e      	ldr	r2, [pc, #120]	@ (80030f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003078:	fba2 2303 	umull	r2, r3, r2, r3
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4a1c      	ldr	r2, [pc, #112]	@ (80030f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d806      	bhi.n	8003096 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4a1b      	ldr	r2, [pc, #108]	@ (80030f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d902      	bls.n	8003096 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	3308      	adds	r3, #8
 8003094:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4b18      	ldr	r3, [pc, #96]	@ (80030fc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	461a      	mov	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a16      	ldr	r2, [pc, #88]	@ (8003100 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80030a8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	2201      	movs	r2, #1
 80030b2:	409a      	lsls	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80030b8:	bf00      	nop
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	58025408 	.word	0x58025408
 80030c8:	5802541c 	.word	0x5802541c
 80030cc:	58025430 	.word	0x58025430
 80030d0:	58025444 	.word	0x58025444
 80030d4:	58025458 	.word	0x58025458
 80030d8:	5802546c 	.word	0x5802546c
 80030dc:	58025480 	.word	0x58025480
 80030e0:	58025494 	.word	0x58025494
 80030e4:	cccccccd 	.word	0xcccccccd
 80030e8:	16009600 	.word	0x16009600
 80030ec:	58025880 	.word	0x58025880
 80030f0:	aaaaaaab 	.word	0xaaaaaaab
 80030f4:	400204b8 	.word	0x400204b8
 80030f8:	4002040f 	.word	0x4002040f
 80030fc:	10008200 	.word	0x10008200
 8003100:	40020880 	.word	0x40020880

08003104 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d04a      	beq.n	80031b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b08      	cmp	r3, #8
 800311e:	d847      	bhi.n	80031b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a25      	ldr	r2, [pc, #148]	@ (80031bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d022      	beq.n	8003170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a24      	ldr	r2, [pc, #144]	@ (80031c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d01d      	beq.n	8003170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a22      	ldr	r2, [pc, #136]	@ (80031c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d018      	beq.n	8003170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a21      	ldr	r2, [pc, #132]	@ (80031c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d013      	beq.n	8003170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1f      	ldr	r2, [pc, #124]	@ (80031cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00e      	beq.n	8003170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1e      	ldr	r2, [pc, #120]	@ (80031d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d009      	beq.n	8003170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1c      	ldr	r2, [pc, #112]	@ (80031d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d004      	beq.n	8003170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1b      	ldr	r2, [pc, #108]	@ (80031d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d101      	bne.n	8003174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003174:	2300      	movs	r3, #0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4b17      	ldr	r3, [pc, #92]	@ (80031dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	461a      	mov	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a15      	ldr	r2, [pc, #84]	@ (80031e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800318c:	671a      	str	r2, [r3, #112]	@ 0x70
 800318e:	e009      	b.n	80031a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4b14      	ldr	r3, [pc, #80]	@ (80031e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	461a      	mov	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a11      	ldr	r2, [pc, #68]	@ (80031e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80031a2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	2201      	movs	r2, #1
 80031aa:	409a      	lsls	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	58025408 	.word	0x58025408
 80031c0:	5802541c 	.word	0x5802541c
 80031c4:	58025430 	.word	0x58025430
 80031c8:	58025444 	.word	0x58025444
 80031cc:	58025458 	.word	0x58025458
 80031d0:	5802546c 	.word	0x5802546c
 80031d4:	58025480 	.word	0x58025480
 80031d8:	58025494 	.word	0x58025494
 80031dc:	1600963f 	.word	0x1600963f
 80031e0:	58025940 	.word	0x58025940
 80031e4:	1000823f 	.word	0x1000823f
 80031e8:	40020940 	.word	0x40020940

080031ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b089      	sub	sp, #36	@ 0x24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80031fa:	4b89      	ldr	r3, [pc, #548]	@ (8003420 <HAL_GPIO_Init+0x234>)
 80031fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031fe:	e194      	b.n	800352a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	2101      	movs	r1, #1
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 8186 	beq.w	8003524 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	2b01      	cmp	r3, #1
 8003222:	d005      	beq.n	8003230 <HAL_GPIO_Init+0x44>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d130      	bne.n	8003292 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	2203      	movs	r2, #3
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003266:	2201      	movs	r2, #1
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43db      	mvns	r3, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4013      	ands	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	091b      	lsrs	r3, r3, #4
 800327c:	f003 0201 	and.w	r2, r3, #1
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b03      	cmp	r3, #3
 800329c:	d017      	beq.n	80032ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	2203      	movs	r2, #3
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43db      	mvns	r3, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4013      	ands	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d123      	bne.n	8003322 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	08da      	lsrs	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3208      	adds	r2, #8
 80032e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	220f      	movs	r2, #15
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4313      	orrs	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	08da      	lsrs	r2, r3, #3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3208      	adds	r2, #8
 800331c:	69b9      	ldr	r1, [r7, #24]
 800331e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	2203      	movs	r2, #3
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4013      	ands	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 0203 	and.w	r2, r3, #3
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4313      	orrs	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80e0 	beq.w	8003524 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003364:	4b2f      	ldr	r3, [pc, #188]	@ (8003424 <HAL_GPIO_Init+0x238>)
 8003366:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800336a:	4a2e      	ldr	r2, [pc, #184]	@ (8003424 <HAL_GPIO_Init+0x238>)
 800336c:	f043 0302 	orr.w	r3, r3, #2
 8003370:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003374:	4b2b      	ldr	r3, [pc, #172]	@ (8003424 <HAL_GPIO_Init+0x238>)
 8003376:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003382:	4a29      	ldr	r2, [pc, #164]	@ (8003428 <HAL_GPIO_Init+0x23c>)
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	089b      	lsrs	r3, r3, #2
 8003388:	3302      	adds	r3, #2
 800338a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	220f      	movs	r2, #15
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a20      	ldr	r2, [pc, #128]	@ (800342c <HAL_GPIO_Init+0x240>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d052      	beq.n	8003454 <HAL_GPIO_Init+0x268>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003430 <HAL_GPIO_Init+0x244>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d031      	beq.n	800341a <HAL_GPIO_Init+0x22e>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003434 <HAL_GPIO_Init+0x248>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d02b      	beq.n	8003416 <HAL_GPIO_Init+0x22a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003438 <HAL_GPIO_Init+0x24c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d025      	beq.n	8003412 <HAL_GPIO_Init+0x226>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a1c      	ldr	r2, [pc, #112]	@ (800343c <HAL_GPIO_Init+0x250>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01f      	beq.n	800340e <HAL_GPIO_Init+0x222>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003440 <HAL_GPIO_Init+0x254>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d019      	beq.n	800340a <HAL_GPIO_Init+0x21e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003444 <HAL_GPIO_Init+0x258>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <HAL_GPIO_Init+0x21a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a19      	ldr	r2, [pc, #100]	@ (8003448 <HAL_GPIO_Init+0x25c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00d      	beq.n	8003402 <HAL_GPIO_Init+0x216>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a18      	ldr	r2, [pc, #96]	@ (800344c <HAL_GPIO_Init+0x260>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d007      	beq.n	80033fe <HAL_GPIO_Init+0x212>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a17      	ldr	r2, [pc, #92]	@ (8003450 <HAL_GPIO_Init+0x264>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d101      	bne.n	80033fa <HAL_GPIO_Init+0x20e>
 80033f6:	2309      	movs	r3, #9
 80033f8:	e02d      	b.n	8003456 <HAL_GPIO_Init+0x26a>
 80033fa:	230a      	movs	r3, #10
 80033fc:	e02b      	b.n	8003456 <HAL_GPIO_Init+0x26a>
 80033fe:	2308      	movs	r3, #8
 8003400:	e029      	b.n	8003456 <HAL_GPIO_Init+0x26a>
 8003402:	2307      	movs	r3, #7
 8003404:	e027      	b.n	8003456 <HAL_GPIO_Init+0x26a>
 8003406:	2306      	movs	r3, #6
 8003408:	e025      	b.n	8003456 <HAL_GPIO_Init+0x26a>
 800340a:	2305      	movs	r3, #5
 800340c:	e023      	b.n	8003456 <HAL_GPIO_Init+0x26a>
 800340e:	2304      	movs	r3, #4
 8003410:	e021      	b.n	8003456 <HAL_GPIO_Init+0x26a>
 8003412:	2303      	movs	r3, #3
 8003414:	e01f      	b.n	8003456 <HAL_GPIO_Init+0x26a>
 8003416:	2302      	movs	r3, #2
 8003418:	e01d      	b.n	8003456 <HAL_GPIO_Init+0x26a>
 800341a:	2301      	movs	r3, #1
 800341c:	e01b      	b.n	8003456 <HAL_GPIO_Init+0x26a>
 800341e:	bf00      	nop
 8003420:	58000080 	.word	0x58000080
 8003424:	58024400 	.word	0x58024400
 8003428:	58000400 	.word	0x58000400
 800342c:	58020000 	.word	0x58020000
 8003430:	58020400 	.word	0x58020400
 8003434:	58020800 	.word	0x58020800
 8003438:	58020c00 	.word	0x58020c00
 800343c:	58021000 	.word	0x58021000
 8003440:	58021400 	.word	0x58021400
 8003444:	58021800 	.word	0x58021800
 8003448:	58021c00 	.word	0x58021c00
 800344c:	58022000 	.word	0x58022000
 8003450:	58022400 	.word	0x58022400
 8003454:	2300      	movs	r3, #0
 8003456:	69fa      	ldr	r2, [r7, #28]
 8003458:	f002 0203 	and.w	r2, r2, #3
 800345c:	0092      	lsls	r2, r2, #2
 800345e:	4093      	lsls	r3, r2
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003466:	4938      	ldr	r1, [pc, #224]	@ (8003548 <HAL_GPIO_Init+0x35c>)
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	089b      	lsrs	r3, r3, #2
 800346c:	3302      	adds	r3, #2
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	43db      	mvns	r3, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800349a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80034c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	43db      	mvns	r3, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	3301      	adds	r3, #1
 8003528:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	fa22 f303 	lsr.w	r3, r2, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	f47f ae63 	bne.w	8003200 <HAL_GPIO_Init+0x14>
  }
}
 800353a:	bf00      	nop
 800353c:	bf00      	nop
 800353e:	3724      	adds	r7, #36	@ 0x24
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	58000400 	.word	0x58000400

0800354c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	807b      	strh	r3, [r7, #2]
 8003558:	4613      	mov	r3, r2
 800355a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800355c:	787b      	ldrb	r3, [r7, #1]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003562:	887a      	ldrh	r2, [r7, #2]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003568:	e003      	b.n	8003572 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800356a:	887b      	ldrh	r3, [r7, #2]
 800356c:	041a      	lsls	r2, r3, #16
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	619a      	str	r2, [r3, #24]
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	4603      	mov	r3, r0
 8003586:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800358c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003598:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 f804 	bl	80035b2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	4603      	mov	r3, r0
 80035ba:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80035d0:	4b19      	ldr	r3, [pc, #100]	@ (8003638 <HAL_PWREx_ConfigSupply+0x70>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d00a      	beq.n	80035f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80035dc:	4b16      	ldr	r3, [pc, #88]	@ (8003638 <HAL_PWREx_ConfigSupply+0x70>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d001      	beq.n	80035ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e01f      	b.n	800362e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	e01d      	b.n	800362e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80035f2:	4b11      	ldr	r3, [pc, #68]	@ (8003638 <HAL_PWREx_ConfigSupply+0x70>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f023 0207 	bic.w	r2, r3, #7
 80035fa:	490f      	ldr	r1, [pc, #60]	@ (8003638 <HAL_PWREx_ConfigSupply+0x70>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003602:	f7fd ff87 	bl	8001514 <HAL_GetTick>
 8003606:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003608:	e009      	b.n	800361e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800360a:	f7fd ff83 	bl	8001514 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003618:	d901      	bls.n	800361e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e007      	b.n	800362e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800361e:	4b06      	ldr	r3, [pc, #24]	@ (8003638 <HAL_PWREx_ConfigSupply+0x70>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003626:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800362a:	d1ee      	bne.n	800360a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	58024800 	.word	0x58024800

0800363c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08c      	sub	sp, #48	@ 0x30
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d102      	bne.n	8003650 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	f000 bc48 	b.w	8003ee0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 8088 	beq.w	800376e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800365e:	4b99      	ldr	r3, [pc, #612]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003668:	4b96      	ldr	r3, [pc, #600]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 800366a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800366e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003670:	2b10      	cmp	r3, #16
 8003672:	d007      	beq.n	8003684 <HAL_RCC_OscConfig+0x48>
 8003674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003676:	2b18      	cmp	r3, #24
 8003678:	d111      	bne.n	800369e <HAL_RCC_OscConfig+0x62>
 800367a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d10c      	bne.n	800369e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003684:	4b8f      	ldr	r3, [pc, #572]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d06d      	beq.n	800376c <HAL_RCC_OscConfig+0x130>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d169      	bne.n	800376c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	f000 bc21 	b.w	8003ee0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036a6:	d106      	bne.n	80036b6 <HAL_RCC_OscConfig+0x7a>
 80036a8:	4b86      	ldr	r3, [pc, #536]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a85      	ldr	r2, [pc, #532]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 80036ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	e02e      	b.n	8003714 <HAL_RCC_OscConfig+0xd8>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x9c>
 80036be:	4b81      	ldr	r3, [pc, #516]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a80      	ldr	r2, [pc, #512]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 80036c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	4b7e      	ldr	r3, [pc, #504]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a7d      	ldr	r2, [pc, #500]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 80036d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	e01d      	b.n	8003714 <HAL_RCC_OscConfig+0xd8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036e0:	d10c      	bne.n	80036fc <HAL_RCC_OscConfig+0xc0>
 80036e2:	4b78      	ldr	r3, [pc, #480]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a77      	ldr	r2, [pc, #476]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 80036e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	4b75      	ldr	r3, [pc, #468]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a74      	ldr	r2, [pc, #464]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 80036f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	e00b      	b.n	8003714 <HAL_RCC_OscConfig+0xd8>
 80036fc:	4b71      	ldr	r3, [pc, #452]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a70      	ldr	r2, [pc, #448]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 8003702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4b6e      	ldr	r3, [pc, #440]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a6d      	ldr	r2, [pc, #436]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 800370e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d013      	beq.n	8003744 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fd fefa 	bl	8001514 <HAL_GetTick>
 8003720:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003724:	f7fd fef6 	bl	8001514 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	@ 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e3d4      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003736:	4b63      	ldr	r3, [pc, #396]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0xe8>
 8003742:	e014      	b.n	800376e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fd fee6 	bl	8001514 <HAL_GetTick>
 8003748:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800374c:	f7fd fee2 	bl	8001514 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b64      	cmp	r3, #100	@ 0x64
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e3c0      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800375e:	4b59      	ldr	r3, [pc, #356]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x110>
 800376a:	e000      	b.n	800376e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 80ca 	beq.w	8003910 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800377c:	4b51      	ldr	r3, [pc, #324]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003784:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003786:	4b4f      	ldr	r3, [pc, #316]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 8003788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d007      	beq.n	80037a2 <HAL_RCC_OscConfig+0x166>
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	2b18      	cmp	r3, #24
 8003796:	d156      	bne.n	8003846 <HAL_RCC_OscConfig+0x20a>
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d151      	bne.n	8003846 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037a2:	4b48      	ldr	r3, [pc, #288]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d005      	beq.n	80037ba <HAL_RCC_OscConfig+0x17e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e392      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037ba:	4b42      	ldr	r3, [pc, #264]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 0219 	bic.w	r2, r3, #25
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	493f      	ldr	r1, [pc, #252]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fd fea2 	bl	8001514 <HAL_GetTick>
 80037d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037d4:	f7fd fe9e 	bl	8001514 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e37c      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037e6:	4b37      	ldr	r3, [pc, #220]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f2:	f7fd fe9b 	bl	800152c <HAL_GetREVID>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d817      	bhi.n	8003830 <HAL_RCC_OscConfig+0x1f4>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	2b40      	cmp	r3, #64	@ 0x40
 8003806:	d108      	bne.n	800381a <HAL_RCC_OscConfig+0x1de>
 8003808:	4b2e      	ldr	r3, [pc, #184]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003810:	4a2c      	ldr	r2, [pc, #176]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 8003812:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003816:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003818:	e07a      	b.n	8003910 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381a:	4b2a      	ldr	r3, [pc, #168]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	031b      	lsls	r3, r3, #12
 8003828:	4926      	ldr	r1, [pc, #152]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 800382a:	4313      	orrs	r3, r2
 800382c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800382e:	e06f      	b.n	8003910 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003830:	4b24      	ldr	r3, [pc, #144]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	061b      	lsls	r3, r3, #24
 800383e:	4921      	ldr	r1, [pc, #132]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 8003840:	4313      	orrs	r3, r2
 8003842:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003844:	e064      	b.n	8003910 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d047      	beq.n	80038de <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800384e:	4b1d      	ldr	r3, [pc, #116]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 0219 	bic.w	r2, r3, #25
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	491a      	ldr	r1, [pc, #104]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 800385c:	4313      	orrs	r3, r2
 800385e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fd fe58 	bl	8001514 <HAL_GetTick>
 8003864:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003868:	f7fd fe54 	bl	8001514 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e332      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800387a:	4b12      	ldr	r3, [pc, #72]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003886:	f7fd fe51 	bl	800152c <HAL_GetREVID>
 800388a:	4603      	mov	r3, r0
 800388c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003890:	4293      	cmp	r3, r2
 8003892:	d819      	bhi.n	80038c8 <HAL_RCC_OscConfig+0x28c>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	2b40      	cmp	r3, #64	@ 0x40
 800389a:	d108      	bne.n	80038ae <HAL_RCC_OscConfig+0x272>
 800389c:	4b09      	ldr	r3, [pc, #36]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80038a4:	4a07      	ldr	r2, [pc, #28]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 80038a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038aa:	6053      	str	r3, [r2, #4]
 80038ac:	e030      	b.n	8003910 <HAL_RCC_OscConfig+0x2d4>
 80038ae:	4b05      	ldr	r3, [pc, #20]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	031b      	lsls	r3, r3, #12
 80038bc:	4901      	ldr	r1, [pc, #4]	@ (80038c4 <HAL_RCC_OscConfig+0x288>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	604b      	str	r3, [r1, #4]
 80038c2:	e025      	b.n	8003910 <HAL_RCC_OscConfig+0x2d4>
 80038c4:	58024400 	.word	0x58024400
 80038c8:	4b9a      	ldr	r3, [pc, #616]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	061b      	lsls	r3, r3, #24
 80038d6:	4997      	ldr	r1, [pc, #604]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	604b      	str	r3, [r1, #4]
 80038dc:	e018      	b.n	8003910 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038de:	4b95      	ldr	r3, [pc, #596]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a94      	ldr	r2, [pc, #592]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ea:	f7fd fe13 	bl	8001514 <HAL_GetTick>
 80038ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f2:	f7fd fe0f 	bl	8001514 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e2ed      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003904:	4b8b      	ldr	r3, [pc, #556]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f0      	bne.n	80038f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80a9 	beq.w	8003a70 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800391e:	4b85      	ldr	r3, [pc, #532]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003926:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003928:	4b82      	ldr	r3, [pc, #520]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 800392a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b08      	cmp	r3, #8
 8003932:	d007      	beq.n	8003944 <HAL_RCC_OscConfig+0x308>
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b18      	cmp	r3, #24
 8003938:	d13a      	bne.n	80039b0 <HAL_RCC_OscConfig+0x374>
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	2b01      	cmp	r3, #1
 8003942:	d135      	bne.n	80039b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003944:	4b7b      	ldr	r3, [pc, #492]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_RCC_OscConfig+0x320>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	2b80      	cmp	r3, #128	@ 0x80
 8003956:	d001      	beq.n	800395c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e2c1      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800395c:	f7fd fde6 	bl	800152c <HAL_GetREVID>
 8003960:	4603      	mov	r3, r0
 8003962:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003966:	4293      	cmp	r3, r2
 8003968:	d817      	bhi.n	800399a <HAL_RCC_OscConfig+0x35e>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	2b20      	cmp	r3, #32
 8003970:	d108      	bne.n	8003984 <HAL_RCC_OscConfig+0x348>
 8003972:	4b70      	ldr	r3, [pc, #448]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800397a:	4a6e      	ldr	r2, [pc, #440]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 800397c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003980:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003982:	e075      	b.n	8003a70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003984:	4b6b      	ldr	r3, [pc, #428]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	069b      	lsls	r3, r3, #26
 8003992:	4968      	ldr	r1, [pc, #416]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003994:	4313      	orrs	r3, r2
 8003996:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003998:	e06a      	b.n	8003a70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800399a:	4b66      	ldr	r3, [pc, #408]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	061b      	lsls	r3, r3, #24
 80039a8:	4962      	ldr	r1, [pc, #392]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039ae:	e05f      	b.n	8003a70 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d042      	beq.n	8003a3e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80039b8:	4b5e      	ldr	r3, [pc, #376]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a5d      	ldr	r2, [pc, #372]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 80039be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7fd fda6 	bl	8001514 <HAL_GetTick>
 80039c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80039cc:	f7fd fda2 	bl	8001514 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e280      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039de:	4b55      	ldr	r3, [pc, #340]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039ea:	f7fd fd9f 	bl	800152c <HAL_GetREVID>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d817      	bhi.n	8003a28 <HAL_RCC_OscConfig+0x3ec>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d108      	bne.n	8003a12 <HAL_RCC_OscConfig+0x3d6>
 8003a00:	4b4c      	ldr	r3, [pc, #304]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003a08:	4a4a      	ldr	r2, [pc, #296]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003a0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a0e:	6053      	str	r3, [r2, #4]
 8003a10:	e02e      	b.n	8003a70 <HAL_RCC_OscConfig+0x434>
 8003a12:	4b48      	ldr	r3, [pc, #288]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	069b      	lsls	r3, r3, #26
 8003a20:	4944      	ldr	r1, [pc, #272]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	604b      	str	r3, [r1, #4]
 8003a26:	e023      	b.n	8003a70 <HAL_RCC_OscConfig+0x434>
 8003a28:	4b42      	ldr	r3, [pc, #264]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	061b      	lsls	r3, r3, #24
 8003a36:	493f      	ldr	r1, [pc, #252]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60cb      	str	r3, [r1, #12]
 8003a3c:	e018      	b.n	8003a70 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a3c      	ldr	r2, [pc, #240]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003a44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4a:	f7fd fd63 	bl	8001514 <HAL_GetTick>
 8003a4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a52:	f7fd fd5f 	bl	8001514 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e23d      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a64:	4b33      	ldr	r3, [pc, #204]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f0      	bne.n	8003a52 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d036      	beq.n	8003aea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d019      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a84:	4b2b      	ldr	r3, [pc, #172]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003a86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a88:	4a2a      	ldr	r2, [pc, #168]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a90:	f7fd fd40 	bl	8001514 <HAL_GetTick>
 8003a94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a98:	f7fd fd3c 	bl	8001514 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e21a      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003aaa:	4b22      	ldr	r3, [pc, #136]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0x45c>
 8003ab6:	e018      	b.n	8003aea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003aba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003abc:	4a1d      	ldr	r2, [pc, #116]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac4:	f7fd fd26 	bl	8001514 <HAL_GetTick>
 8003ac8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003acc:	f7fd fd22 	bl	8001514 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e200      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ade:	4b15      	ldr	r3, [pc, #84]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d039      	beq.n	8003b6a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d01c      	beq.n	8003b38 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003afe:	4b0d      	ldr	r3, [pc, #52]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a0c      	ldr	r2, [pc, #48]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003b04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b0a:	f7fd fd03 	bl	8001514 <HAL_GetTick>
 8003b0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b12:	f7fd fcff 	bl	8001514 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e1dd      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b24:	4b03      	ldr	r3, [pc, #12]	@ (8003b34 <HAL_RCC_OscConfig+0x4f8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x4d6>
 8003b30:	e01b      	b.n	8003b6a <HAL_RCC_OscConfig+0x52e>
 8003b32:	bf00      	nop
 8003b34:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b38:	4b9b      	ldr	r3, [pc, #620]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a9a      	ldr	r2, [pc, #616]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003b3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b44:	f7fd fce6 	bl	8001514 <HAL_GetTick>
 8003b48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b4c:	f7fd fce2 	bl	8001514 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e1c0      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b5e:	4b92      	ldr	r3, [pc, #584]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 8081 	beq.w	8003c7a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b78:	4b8c      	ldr	r3, [pc, #560]	@ (8003dac <HAL_RCC_OscConfig+0x770>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a8b      	ldr	r2, [pc, #556]	@ (8003dac <HAL_RCC_OscConfig+0x770>)
 8003b7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b84:	f7fd fcc6 	bl	8001514 <HAL_GetTick>
 8003b88:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b8c:	f7fd fcc2 	bl	8001514 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	@ 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e1a0      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b9e:	4b83      	ldr	r3, [pc, #524]	@ (8003dac <HAL_RCC_OscConfig+0x770>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d106      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x584>
 8003bb2:	4b7d      	ldr	r3, [pc, #500]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb6:	4a7c      	ldr	r2, [pc, #496]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bbe:	e02d      	b.n	8003c1c <HAL_RCC_OscConfig+0x5e0>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10c      	bne.n	8003be2 <HAL_RCC_OscConfig+0x5a6>
 8003bc8:	4b77      	ldr	r3, [pc, #476]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bcc:	4a76      	ldr	r2, [pc, #472]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bd4:	4b74      	ldr	r3, [pc, #464]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd8:	4a73      	ldr	r2, [pc, #460]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003bda:	f023 0304 	bic.w	r3, r3, #4
 8003bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8003be0:	e01c      	b.n	8003c1c <HAL_RCC_OscConfig+0x5e0>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b05      	cmp	r3, #5
 8003be8:	d10c      	bne.n	8003c04 <HAL_RCC_OscConfig+0x5c8>
 8003bea:	4b6f      	ldr	r3, [pc, #444]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bee:	4a6e      	ldr	r2, [pc, #440]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003bf0:	f043 0304 	orr.w	r3, r3, #4
 8003bf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bf6:	4b6c      	ldr	r3, [pc, #432]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bfa:	4a6b      	ldr	r2, [pc, #428]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c02:	e00b      	b.n	8003c1c <HAL_RCC_OscConfig+0x5e0>
 8003c04:	4b68      	ldr	r3, [pc, #416]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c08:	4a67      	ldr	r2, [pc, #412]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c10:	4b65      	ldr	r3, [pc, #404]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c14:	4a64      	ldr	r2, [pc, #400]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003c16:	f023 0304 	bic.w	r3, r3, #4
 8003c1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d015      	beq.n	8003c50 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c24:	f7fd fc76 	bl	8001514 <HAL_GetTick>
 8003c28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2c:	f7fd fc72 	bl	8001514 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e14e      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c42:	4b59      	ldr	r3, [pc, #356]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0ee      	beq.n	8003c2c <HAL_RCC_OscConfig+0x5f0>
 8003c4e:	e014      	b.n	8003c7a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c50:	f7fd fc60 	bl	8001514 <HAL_GetTick>
 8003c54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c56:	e00a      	b.n	8003c6e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c58:	f7fd fc5c 	bl	8001514 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e138      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c6e:	4b4e      	ldr	r3, [pc, #312]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1ee      	bne.n	8003c58 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 812d 	beq.w	8003ede <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c84:	4b48      	ldr	r3, [pc, #288]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c8c:	2b18      	cmp	r3, #24
 8003c8e:	f000 80bd 	beq.w	8003e0c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	f040 809e 	bne.w	8003dd8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9c:	4b42      	ldr	r3, [pc, #264]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a41      	ldr	r2, [pc, #260]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003ca2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fd fc34 	bl	8001514 <HAL_GetTick>
 8003cac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb0:	f7fd fc30 	bl	8001514 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e10e      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cc2:	4b39      	ldr	r3, [pc, #228]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cce:	4b36      	ldr	r3, [pc, #216]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003cd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cd2:	4b37      	ldr	r3, [pc, #220]	@ (8003db0 <HAL_RCC_OscConfig+0x774>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003cde:	0112      	lsls	r2, r2, #4
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	4931      	ldr	r1, [pc, #196]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cec:	3b01      	subs	r3, #1
 8003cee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	025b      	lsls	r3, r3, #9
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d02:	3b01      	subs	r3, #1
 8003d04:	041b      	lsls	r3, r3, #16
 8003d06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d10:	3b01      	subs	r3, #1
 8003d12:	061b      	lsls	r3, r3, #24
 8003d14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003d18:	4923      	ldr	r1, [pc, #140]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003d1e:	4b22      	ldr	r3, [pc, #136]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d22:	4a21      	ldr	r2, [pc, #132]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003d2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d2e:	4b21      	ldr	r3, [pc, #132]	@ (8003db4 <HAL_RCC_OscConfig+0x778>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d36:	00d2      	lsls	r2, r2, #3
 8003d38:	491b      	ldr	r1, [pc, #108]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d42:	f023 020c 	bic.w	r2, r3, #12
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4a:	4917      	ldr	r1, [pc, #92]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d50:	4b15      	ldr	r3, [pc, #84]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d54:	f023 0202 	bic.w	r2, r3, #2
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5c:	4912      	ldr	r1, [pc, #72]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d62:	4b11      	ldr	r3, [pc, #68]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d66:	4a10      	ldr	r2, [pc, #64]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d72:	4a0d      	ldr	r2, [pc, #52]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003d86:	4b08      	ldr	r3, [pc, #32]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8a:	4a07      	ldr	r2, [pc, #28]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d92:	4b05      	ldr	r3, [pc, #20]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a04      	ldr	r2, [pc, #16]	@ (8003da8 <HAL_RCC_OscConfig+0x76c>)
 8003d98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9e:	f7fd fbb9 	bl	8001514 <HAL_GetTick>
 8003da2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003da4:	e011      	b.n	8003dca <HAL_RCC_OscConfig+0x78e>
 8003da6:	bf00      	nop
 8003da8:	58024400 	.word	0x58024400
 8003dac:	58024800 	.word	0x58024800
 8003db0:	fffffc0c 	.word	0xfffffc0c
 8003db4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db8:	f7fd fbac 	bl	8001514 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e08a      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dca:	4b47      	ldr	r3, [pc, #284]	@ (8003ee8 <HAL_RCC_OscConfig+0x8ac>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCC_OscConfig+0x77c>
 8003dd6:	e082      	b.n	8003ede <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd8:	4b43      	ldr	r3, [pc, #268]	@ (8003ee8 <HAL_RCC_OscConfig+0x8ac>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a42      	ldr	r2, [pc, #264]	@ (8003ee8 <HAL_RCC_OscConfig+0x8ac>)
 8003dde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fd fb96 	bl	8001514 <HAL_GetTick>
 8003de8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dec:	f7fd fb92 	bl	8001514 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e070      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8003ee8 <HAL_RCC_OscConfig+0x8ac>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x7b0>
 8003e0a:	e068      	b.n	8003ede <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e0c:	4b36      	ldr	r3, [pc, #216]	@ (8003ee8 <HAL_RCC_OscConfig+0x8ac>)
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e12:	4b35      	ldr	r3, [pc, #212]	@ (8003ee8 <HAL_RCC_OscConfig+0x8ac>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e16:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d031      	beq.n	8003e84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f003 0203 	and.w	r2, r3, #3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d12a      	bne.n	8003e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	091b      	lsrs	r3, r3, #4
 8003e32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d122      	bne.n	8003e84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e48:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d11a      	bne.n	8003e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	0a5b      	lsrs	r3, r3, #9
 8003e52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e5a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d111      	bne.n	8003e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	0c1b      	lsrs	r3, r3, #16
 8003e64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d108      	bne.n	8003e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	0e1b      	lsrs	r3, r3, #24
 8003e76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e7e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e02b      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003e88:	4b17      	ldr	r3, [pc, #92]	@ (8003ee8 <HAL_RCC_OscConfig+0x8ac>)
 8003e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e8c:	08db      	lsrs	r3, r3, #3
 8003e8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e92:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d01f      	beq.n	8003ede <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003e9e:	4b12      	ldr	r3, [pc, #72]	@ (8003ee8 <HAL_RCC_OscConfig+0x8ac>)
 8003ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea2:	4a11      	ldr	r2, [pc, #68]	@ (8003ee8 <HAL_RCC_OscConfig+0x8ac>)
 8003ea4:	f023 0301 	bic.w	r3, r3, #1
 8003ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003eaa:	f7fd fb33 	bl	8001514 <HAL_GetTick>
 8003eae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003eb0:	bf00      	nop
 8003eb2:	f7fd fb2f 	bl	8001514 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d0f9      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee8 <HAL_RCC_OscConfig+0x8ac>)
 8003ec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8003eec <HAL_RCC_OscConfig+0x8b0>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003eca:	00d2      	lsls	r2, r2, #3
 8003ecc:	4906      	ldr	r1, [pc, #24]	@ (8003ee8 <HAL_RCC_OscConfig+0x8ac>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003ed2:	4b05      	ldr	r3, [pc, #20]	@ (8003ee8 <HAL_RCC_OscConfig+0x8ac>)
 8003ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed6:	4a04      	ldr	r2, [pc, #16]	@ (8003ee8 <HAL_RCC_OscConfig+0x8ac>)
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3730      	adds	r7, #48	@ 0x30
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	58024400 	.word	0x58024400
 8003eec:	ffff0007 	.word	0xffff0007

08003ef0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e19c      	b.n	800423e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f04:	4b8a      	ldr	r3, [pc, #552]	@ (8004130 <HAL_RCC_ClockConfig+0x240>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d910      	bls.n	8003f34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f12:	4b87      	ldr	r3, [pc, #540]	@ (8004130 <HAL_RCC_ClockConfig+0x240>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 020f 	bic.w	r2, r3, #15
 8003f1a:	4985      	ldr	r1, [pc, #532]	@ (8004130 <HAL_RCC_ClockConfig+0x240>)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f22:	4b83      	ldr	r3, [pc, #524]	@ (8004130 <HAL_RCC_ClockConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e184      	b.n	800423e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d010      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	4b7b      	ldr	r3, [pc, #492]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d908      	bls.n	8003f62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f50:	4b78      	ldr	r3, [pc, #480]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	4975      	ldr	r1, [pc, #468]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d010      	beq.n	8003f90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	4b70      	ldr	r3, [pc, #448]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d908      	bls.n	8003f90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	496a      	ldr	r1, [pc, #424]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d010      	beq.n	8003fbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699a      	ldr	r2, [r3, #24]
 8003fa0:	4b64      	ldr	r3, [pc, #400]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d908      	bls.n	8003fbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003fac:	4b61      	ldr	r3, [pc, #388]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	495e      	ldr	r1, [pc, #376]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d010      	beq.n	8003fec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69da      	ldr	r2, [r3, #28]
 8003fce:	4b59      	ldr	r3, [pc, #356]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d908      	bls.n	8003fec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003fda:	4b56      	ldr	r3, [pc, #344]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	4953      	ldr	r1, [pc, #332]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d010      	beq.n	800401a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	4b4d      	ldr	r3, [pc, #308]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	429a      	cmp	r2, r3
 8004006:	d908      	bls.n	800401a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004008:	4b4a      	ldr	r3, [pc, #296]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f023 020f 	bic.w	r2, r3, #15
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	4947      	ldr	r1, [pc, #284]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8004016:	4313      	orrs	r3, r2
 8004018:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d055      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004026:	4b43      	ldr	r3, [pc, #268]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	4940      	ldr	r1, [pc, #256]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8004034:	4313      	orrs	r3, r2
 8004036:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b02      	cmp	r3, #2
 800403e:	d107      	bne.n	8004050 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004040:	4b3c      	ldr	r3, [pc, #240]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d121      	bne.n	8004090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e0f6      	b.n	800423e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b03      	cmp	r3, #3
 8004056:	d107      	bne.n	8004068 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004058:	4b36      	ldr	r3, [pc, #216]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d115      	bne.n	8004090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0ea      	b.n	800423e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d107      	bne.n	8004080 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004070:	4b30      	ldr	r3, [pc, #192]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004078:	2b00      	cmp	r3, #0
 800407a:	d109      	bne.n	8004090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0de      	b.n	800423e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004080:	4b2c      	ldr	r3, [pc, #176]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e0d6      	b.n	800423e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004090:	4b28      	ldr	r3, [pc, #160]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f023 0207 	bic.w	r2, r3, #7
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4925      	ldr	r1, [pc, #148]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a2:	f7fd fa37 	bl	8001514 <HAL_GetTick>
 80040a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a8:	e00a      	b.n	80040c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040aa:	f7fd fa33 	bl	8001514 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e0be      	b.n	800423e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d1eb      	bne.n	80040aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d010      	beq.n	8004100 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	4b14      	ldr	r3, [pc, #80]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d208      	bcs.n	8004100 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ee:	4b11      	ldr	r3, [pc, #68]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	f023 020f 	bic.w	r2, r3, #15
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	490e      	ldr	r1, [pc, #56]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004100:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <HAL_RCC_ClockConfig+0x240>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d214      	bcs.n	8004138 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410e:	4b08      	ldr	r3, [pc, #32]	@ (8004130 <HAL_RCC_ClockConfig+0x240>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f023 020f 	bic.w	r2, r3, #15
 8004116:	4906      	ldr	r1, [pc, #24]	@ (8004130 <HAL_RCC_ClockConfig+0x240>)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	4313      	orrs	r3, r2
 800411c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411e:	4b04      	ldr	r3, [pc, #16]	@ (8004130 <HAL_RCC_ClockConfig+0x240>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d005      	beq.n	8004138 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e086      	b.n	800423e <HAL_RCC_ClockConfig+0x34e>
 8004130:	52002000 	.word	0x52002000
 8004134:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d010      	beq.n	8004166 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	4b3f      	ldr	r3, [pc, #252]	@ (8004248 <HAL_RCC_ClockConfig+0x358>)
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004150:	429a      	cmp	r2, r3
 8004152:	d208      	bcs.n	8004166 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004154:	4b3c      	ldr	r3, [pc, #240]	@ (8004248 <HAL_RCC_ClockConfig+0x358>)
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	4939      	ldr	r1, [pc, #228]	@ (8004248 <HAL_RCC_ClockConfig+0x358>)
 8004162:	4313      	orrs	r3, r2
 8004164:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b00      	cmp	r3, #0
 8004170:	d010      	beq.n	8004194 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	695a      	ldr	r2, [r3, #20]
 8004176:	4b34      	ldr	r3, [pc, #208]	@ (8004248 <HAL_RCC_ClockConfig+0x358>)
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800417e:	429a      	cmp	r2, r3
 8004180:	d208      	bcs.n	8004194 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004182:	4b31      	ldr	r3, [pc, #196]	@ (8004248 <HAL_RCC_ClockConfig+0x358>)
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	492e      	ldr	r1, [pc, #184]	@ (8004248 <HAL_RCC_ClockConfig+0x358>)
 8004190:	4313      	orrs	r3, r2
 8004192:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b00      	cmp	r3, #0
 800419e:	d010      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699a      	ldr	r2, [r3, #24]
 80041a4:	4b28      	ldr	r3, [pc, #160]	@ (8004248 <HAL_RCC_ClockConfig+0x358>)
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d208      	bcs.n	80041c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041b0:	4b25      	ldr	r3, [pc, #148]	@ (8004248 <HAL_RCC_ClockConfig+0x358>)
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	4922      	ldr	r1, [pc, #136]	@ (8004248 <HAL_RCC_ClockConfig+0x358>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d010      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69da      	ldr	r2, [r3, #28]
 80041d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004248 <HAL_RCC_ClockConfig+0x358>)
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041da:	429a      	cmp	r2, r3
 80041dc:	d208      	bcs.n	80041f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041de:	4b1a      	ldr	r3, [pc, #104]	@ (8004248 <HAL_RCC_ClockConfig+0x358>)
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	4917      	ldr	r1, [pc, #92]	@ (8004248 <HAL_RCC_ClockConfig+0x358>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041f0:	f000 f834 	bl	800425c <HAL_RCC_GetSysClockFreq>
 80041f4:	4602      	mov	r2, r0
 80041f6:	4b14      	ldr	r3, [pc, #80]	@ (8004248 <HAL_RCC_ClockConfig+0x358>)
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	0a1b      	lsrs	r3, r3, #8
 80041fc:	f003 030f 	and.w	r3, r3, #15
 8004200:	4912      	ldr	r1, [pc, #72]	@ (800424c <HAL_RCC_ClockConfig+0x35c>)
 8004202:	5ccb      	ldrb	r3, [r1, r3]
 8004204:	f003 031f 	and.w	r3, r3, #31
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
 800420c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800420e:	4b0e      	ldr	r3, [pc, #56]	@ (8004248 <HAL_RCC_ClockConfig+0x358>)
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	4a0d      	ldr	r2, [pc, #52]	@ (800424c <HAL_RCC_ClockConfig+0x35c>)
 8004218:	5cd3      	ldrb	r3, [r2, r3]
 800421a:	f003 031f 	and.w	r3, r3, #31
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	fa22 f303 	lsr.w	r3, r2, r3
 8004224:	4a0a      	ldr	r2, [pc, #40]	@ (8004250 <HAL_RCC_ClockConfig+0x360>)
 8004226:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004228:	4a0a      	ldr	r2, [pc, #40]	@ (8004254 <HAL_RCC_ClockConfig+0x364>)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800422e:	4b0a      	ldr	r3, [pc, #40]	@ (8004258 <HAL_RCC_ClockConfig+0x368>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7fd f924 	bl	8001480 <HAL_InitTick>
 8004238:	4603      	mov	r3, r0
 800423a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800423c:	7bfb      	ldrb	r3, [r7, #15]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	58024400 	.word	0x58024400
 800424c:	08008544 	.word	0x08008544
 8004250:	24000004 	.word	0x24000004
 8004254:	24000000 	.word	0x24000000
 8004258:	24000008 	.word	0x24000008

0800425c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800425c:	b480      	push	{r7}
 800425e:	b089      	sub	sp, #36	@ 0x24
 8004260:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004262:	4bb3      	ldr	r3, [pc, #716]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800426a:	2b18      	cmp	r3, #24
 800426c:	f200 8155 	bhi.w	800451a <HAL_RCC_GetSysClockFreq+0x2be>
 8004270:	a201      	add	r2, pc, #4	@ (adr r2, 8004278 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004276:	bf00      	nop
 8004278:	080042dd 	.word	0x080042dd
 800427c:	0800451b 	.word	0x0800451b
 8004280:	0800451b 	.word	0x0800451b
 8004284:	0800451b 	.word	0x0800451b
 8004288:	0800451b 	.word	0x0800451b
 800428c:	0800451b 	.word	0x0800451b
 8004290:	0800451b 	.word	0x0800451b
 8004294:	0800451b 	.word	0x0800451b
 8004298:	08004303 	.word	0x08004303
 800429c:	0800451b 	.word	0x0800451b
 80042a0:	0800451b 	.word	0x0800451b
 80042a4:	0800451b 	.word	0x0800451b
 80042a8:	0800451b 	.word	0x0800451b
 80042ac:	0800451b 	.word	0x0800451b
 80042b0:	0800451b 	.word	0x0800451b
 80042b4:	0800451b 	.word	0x0800451b
 80042b8:	08004309 	.word	0x08004309
 80042bc:	0800451b 	.word	0x0800451b
 80042c0:	0800451b 	.word	0x0800451b
 80042c4:	0800451b 	.word	0x0800451b
 80042c8:	0800451b 	.word	0x0800451b
 80042cc:	0800451b 	.word	0x0800451b
 80042d0:	0800451b 	.word	0x0800451b
 80042d4:	0800451b 	.word	0x0800451b
 80042d8:	0800430f 	.word	0x0800430f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042dc:	4b94      	ldr	r3, [pc, #592]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d009      	beq.n	80042fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042e8:	4b91      	ldr	r3, [pc, #580]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	08db      	lsrs	r3, r3, #3
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	4a90      	ldr	r2, [pc, #576]	@ (8004534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042f4:	fa22 f303 	lsr.w	r3, r2, r3
 80042f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80042fa:	e111      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042fc:	4b8d      	ldr	r3, [pc, #564]	@ (8004534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042fe:	61bb      	str	r3, [r7, #24]
      break;
 8004300:	e10e      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004302:	4b8d      	ldr	r3, [pc, #564]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004304:	61bb      	str	r3, [r7, #24]
      break;
 8004306:	e10b      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004308:	4b8c      	ldr	r3, [pc, #560]	@ (800453c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800430a:	61bb      	str	r3, [r7, #24]
      break;
 800430c:	e108      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800430e:	4b88      	ldr	r3, [pc, #544]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004318:	4b85      	ldr	r3, [pc, #532]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800431a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431c:	091b      	lsrs	r3, r3, #4
 800431e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004322:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004324:	4b82      	ldr	r3, [pc, #520]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800432e:	4b80      	ldr	r3, [pc, #512]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004332:	08db      	lsrs	r3, r3, #3
 8004334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	ee07 3a90 	vmov	s15, r3
 8004342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004346:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 80e1 	beq.w	8004514 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b02      	cmp	r3, #2
 8004356:	f000 8083 	beq.w	8004460 <HAL_RCC_GetSysClockFreq+0x204>
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b02      	cmp	r3, #2
 800435e:	f200 80a1 	bhi.w	80044a4 <HAL_RCC_GetSysClockFreq+0x248>
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d003      	beq.n	8004370 <HAL_RCC_GetSysClockFreq+0x114>
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d056      	beq.n	800441c <HAL_RCC_GetSysClockFreq+0x1c0>
 800436e:	e099      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004370:	4b6f      	ldr	r3, [pc, #444]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b00      	cmp	r3, #0
 800437a:	d02d      	beq.n	80043d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800437c:	4b6c      	ldr	r3, [pc, #432]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	08db      	lsrs	r3, r3, #3
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	4a6b      	ldr	r2, [pc, #428]	@ (8004534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004388:	fa22 f303 	lsr.w	r3, r2, r3
 800438c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	ee07 3a90 	vmov	s15, r3
 8004394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	ee07 3a90 	vmov	s15, r3
 800439e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043a6:	4b62      	ldr	r3, [pc, #392]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ae:	ee07 3a90 	vmov	s15, r3
 80043b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004540 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80043d6:	e087      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004544 <HAL_RCC_GetSysClockFreq+0x2e8>
 80043e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ea:	4b51      	ldr	r3, [pc, #324]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f2:	ee07 3a90 	vmov	s15, r3
 80043f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80043fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004540 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800440a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800440e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004416:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800441a:	e065      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004426:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004548 <HAL_RCC_GetSysClockFreq+0x2ec>
 800442a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800442e:	4b40      	ldr	r3, [pc, #256]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004442:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004540 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800444a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800444e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800445e:	e043      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	ee07 3a90 	vmov	s15, r3
 8004466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800454c <HAL_RCC_GetSysClockFreq+0x2f0>
 800446e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004472:	4b2f      	ldr	r3, [pc, #188]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447a:	ee07 3a90 	vmov	s15, r3
 800447e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004482:	ed97 6a02 	vldr	s12, [r7, #8]
 8004486:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004540 <HAL_RCC_GetSysClockFreq+0x2e4>
 800448a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800448e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800449a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044a2:	e021      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	ee07 3a90 	vmov	s15, r3
 80044aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004548 <HAL_RCC_GetSysClockFreq+0x2ec>
 80044b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044be:	ee07 3a90 	vmov	s15, r3
 80044c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80044ca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004540 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80044e8:	4b11      	ldr	r3, [pc, #68]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ec:	0a5b      	lsrs	r3, r3, #9
 80044ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044f2:	3301      	adds	r3, #1
 80044f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	ee07 3a90 	vmov	s15, r3
 80044fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004500:	edd7 6a07 	vldr	s13, [r7, #28]
 8004504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800450c:	ee17 3a90 	vmov	r3, s15
 8004510:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004512:	e005      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	61bb      	str	r3, [r7, #24]
      break;
 8004518:	e002      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800451a:	4b07      	ldr	r3, [pc, #28]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800451c:	61bb      	str	r3, [r7, #24]
      break;
 800451e:	bf00      	nop
  }

  return sysclockfreq;
 8004520:	69bb      	ldr	r3, [r7, #24]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3724      	adds	r7, #36	@ 0x24
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	58024400 	.word	0x58024400
 8004534:	03d09000 	.word	0x03d09000
 8004538:	003d0900 	.word	0x003d0900
 800453c:	007a1200 	.word	0x007a1200
 8004540:	46000000 	.word	0x46000000
 8004544:	4c742400 	.word	0x4c742400
 8004548:	4a742400 	.word	0x4a742400
 800454c:	4af42400 	.word	0x4af42400

08004550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004556:	f7ff fe81 	bl	800425c <HAL_RCC_GetSysClockFreq>
 800455a:	4602      	mov	r2, r0
 800455c:	4b10      	ldr	r3, [pc, #64]	@ (80045a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	0a1b      	lsrs	r3, r3, #8
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	490f      	ldr	r1, [pc, #60]	@ (80045a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004568:	5ccb      	ldrb	r3, [r1, r3]
 800456a:	f003 031f 	and.w	r3, r3, #31
 800456e:	fa22 f303 	lsr.w	r3, r2, r3
 8004572:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004574:	4b0a      	ldr	r3, [pc, #40]	@ (80045a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	4a09      	ldr	r2, [pc, #36]	@ (80045a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800457e:	5cd3      	ldrb	r3, [r2, r3]
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	fa22 f303 	lsr.w	r3, r2, r3
 800458a:	4a07      	ldr	r2, [pc, #28]	@ (80045a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800458c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800458e:	4a07      	ldr	r2, [pc, #28]	@ (80045ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004594:	4b04      	ldr	r3, [pc, #16]	@ (80045a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004596:	681b      	ldr	r3, [r3, #0]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	58024400 	.word	0x58024400
 80045a4:	08008544 	.word	0x08008544
 80045a8:	24000004 	.word	0x24000004
 80045ac:	24000000 	.word	0x24000000

080045b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80045b4:	f7ff ffcc 	bl	8004550 <HAL_RCC_GetHCLKFreq>
 80045b8:	4602      	mov	r2, r0
 80045ba:	4b06      	ldr	r3, [pc, #24]	@ (80045d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	091b      	lsrs	r3, r3, #4
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	4904      	ldr	r1, [pc, #16]	@ (80045d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045c6:	5ccb      	ldrb	r3, [r1, r3]
 80045c8:	f003 031f 	and.w	r3, r3, #31
 80045cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	58024400 	.word	0x58024400
 80045d8:	08008544 	.word	0x08008544

080045dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80045e0:	f7ff ffb6 	bl	8004550 <HAL_RCC_GetHCLKFreq>
 80045e4:	4602      	mov	r2, r0
 80045e6:	4b06      	ldr	r3, [pc, #24]	@ (8004600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	0a1b      	lsrs	r3, r3, #8
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	4904      	ldr	r1, [pc, #16]	@ (8004604 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045f2:	5ccb      	ldrb	r3, [r1, r3]
 80045f4:	f003 031f 	and.w	r3, r3, #31
 80045f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	58024400 	.word	0x58024400
 8004604:	08008544 	.word	0x08008544

08004608 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800460c:	b0ca      	sub	sp, #296	@ 0x128
 800460e:	af00      	add	r7, sp, #0
 8004610:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004614:	2300      	movs	r3, #0
 8004616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800461a:	2300      	movs	r3, #0
 800461c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800462c:	2500      	movs	r5, #0
 800462e:	ea54 0305 	orrs.w	r3, r4, r5
 8004632:	d049      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004638:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800463a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800463e:	d02f      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004640:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004644:	d828      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004646:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800464a:	d01a      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800464c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004650:	d822      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004656:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800465a:	d007      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800465c:	e01c      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800465e:	4bb8      	ldr	r3, [pc, #736]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004662:	4ab7      	ldr	r2, [pc, #732]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004668:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800466a:	e01a      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800466c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004670:	3308      	adds	r3, #8
 8004672:	2102      	movs	r1, #2
 8004674:	4618      	mov	r0, r3
 8004676:	f002 fb61 	bl	8006d3c <RCCEx_PLL2_Config>
 800467a:	4603      	mov	r3, r0
 800467c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004680:	e00f      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004686:	3328      	adds	r3, #40	@ 0x28
 8004688:	2102      	movs	r1, #2
 800468a:	4618      	mov	r0, r3
 800468c:	f002 fc08 	bl	8006ea0 <RCCEx_PLL3_Config>
 8004690:	4603      	mov	r3, r0
 8004692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004696:	e004      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800469e:	e000      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80046a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10a      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80046aa:	4ba5      	ldr	r3, [pc, #660]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80046b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046b8:	4aa1      	ldr	r2, [pc, #644]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046ba:	430b      	orrs	r3, r1
 80046bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80046be:	e003      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80046d4:	f04f 0900 	mov.w	r9, #0
 80046d8:	ea58 0309 	orrs.w	r3, r8, r9
 80046dc:	d047      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80046de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d82a      	bhi.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80046e8:	a201      	add	r2, pc, #4	@ (adr r2, 80046f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80046ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ee:	bf00      	nop
 80046f0:	08004705 	.word	0x08004705
 80046f4:	08004713 	.word	0x08004713
 80046f8:	08004729 	.word	0x08004729
 80046fc:	08004747 	.word	0x08004747
 8004700:	08004747 	.word	0x08004747
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004704:	4b8e      	ldr	r3, [pc, #568]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004708:	4a8d      	ldr	r2, [pc, #564]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800470a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800470e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004710:	e01a      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004716:	3308      	adds	r3, #8
 8004718:	2100      	movs	r1, #0
 800471a:	4618      	mov	r0, r3
 800471c:	f002 fb0e 	bl	8006d3c <RCCEx_PLL2_Config>
 8004720:	4603      	mov	r3, r0
 8004722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004726:	e00f      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472c:	3328      	adds	r3, #40	@ 0x28
 800472e:	2100      	movs	r1, #0
 8004730:	4618      	mov	r0, r3
 8004732:	f002 fbb5 	bl	8006ea0 <RCCEx_PLL3_Config>
 8004736:	4603      	mov	r3, r0
 8004738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800473c:	e004      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004744:	e000      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004746:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004750:	4b7b      	ldr	r3, [pc, #492]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004754:	f023 0107 	bic.w	r1, r3, #7
 8004758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800475e:	4a78      	ldr	r2, [pc, #480]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004760:	430b      	orrs	r3, r1
 8004762:	6513      	str	r3, [r2, #80]	@ 0x50
 8004764:	e003      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800476a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800476e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004776:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800477a:	f04f 0b00 	mov.w	fp, #0
 800477e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004782:	d04c      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800478a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800478e:	d030      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004794:	d829      	bhi.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004796:	2bc0      	cmp	r3, #192	@ 0xc0
 8004798:	d02d      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800479a:	2bc0      	cmp	r3, #192	@ 0xc0
 800479c:	d825      	bhi.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800479e:	2b80      	cmp	r3, #128	@ 0x80
 80047a0:	d018      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80047a2:	2b80      	cmp	r3, #128	@ 0x80
 80047a4:	d821      	bhi.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80047aa:	2b40      	cmp	r3, #64	@ 0x40
 80047ac:	d007      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80047ae:	e01c      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047b0:	4b63      	ldr	r3, [pc, #396]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b4:	4a62      	ldr	r2, [pc, #392]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80047bc:	e01c      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c2:	3308      	adds	r3, #8
 80047c4:	2100      	movs	r1, #0
 80047c6:	4618      	mov	r0, r3
 80047c8:	f002 fab8 	bl	8006d3c <RCCEx_PLL2_Config>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80047d2:	e011      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d8:	3328      	adds	r3, #40	@ 0x28
 80047da:	2100      	movs	r1, #0
 80047dc:	4618      	mov	r0, r3
 80047de:	f002 fb5f 	bl	8006ea0 <RCCEx_PLL3_Config>
 80047e2:	4603      	mov	r3, r0
 80047e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80047e8:	e006      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047f0:	e002      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80047f2:	bf00      	nop
 80047f4:	e000      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80047f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10a      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004800:	4b4f      	ldr	r3, [pc, #316]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004804:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800480e:	4a4c      	ldr	r2, [pc, #304]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004810:	430b      	orrs	r3, r1
 8004812:	6513      	str	r3, [r2, #80]	@ 0x50
 8004814:	e003      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004816:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800481a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800481e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004826:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800482a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800482e:	2300      	movs	r3, #0
 8004830:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004834:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004838:	460b      	mov	r3, r1
 800483a:	4313      	orrs	r3, r2
 800483c:	d053      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800483e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004842:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004846:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800484a:	d035      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800484c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004850:	d82e      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004852:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004856:	d031      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004858:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800485c:	d828      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800485e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004862:	d01a      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004864:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004868:	d822      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800486e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004872:	d007      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004874:	e01c      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004876:	4b32      	ldr	r3, [pc, #200]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487a:	4a31      	ldr	r2, [pc, #196]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800487c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004880:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004882:	e01c      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004888:	3308      	adds	r3, #8
 800488a:	2100      	movs	r1, #0
 800488c:	4618      	mov	r0, r3
 800488e:	f002 fa55 	bl	8006d3c <RCCEx_PLL2_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004898:	e011      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800489a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489e:	3328      	adds	r3, #40	@ 0x28
 80048a0:	2100      	movs	r1, #0
 80048a2:	4618      	mov	r0, r3
 80048a4:	f002 fafc 	bl	8006ea0 <RCCEx_PLL3_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048ae:	e006      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048b6:	e002      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80048b8:	bf00      	nop
 80048ba:	e000      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80048bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10b      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80048c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ca:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80048ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80048d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048d8:	430b      	orrs	r3, r1
 80048da:	6593      	str	r3, [r2, #88]	@ 0x58
 80048dc:	e003      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80048e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80048f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80048f6:	2300      	movs	r3, #0
 80048f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80048fc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004900:	460b      	mov	r3, r1
 8004902:	4313      	orrs	r3, r2
 8004904:	d056      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800490e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004912:	d038      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004914:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004918:	d831      	bhi.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800491a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800491e:	d034      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004920:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004924:	d82b      	bhi.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004926:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800492a:	d01d      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800492c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004930:	d825      	bhi.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004932:	2b00      	cmp	r3, #0
 8004934:	d006      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004936:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800493a:	d00a      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800493c:	e01f      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800493e:	bf00      	nop
 8004940:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004944:	4ba2      	ldr	r3, [pc, #648]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004948:	4aa1      	ldr	r2, [pc, #644]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800494a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800494e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004950:	e01c      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004956:	3308      	adds	r3, #8
 8004958:	2100      	movs	r1, #0
 800495a:	4618      	mov	r0, r3
 800495c:	f002 f9ee 	bl	8006d3c <RCCEx_PLL2_Config>
 8004960:	4603      	mov	r3, r0
 8004962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004966:	e011      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496c:	3328      	adds	r3, #40	@ 0x28
 800496e:	2100      	movs	r1, #0
 8004970:	4618      	mov	r0, r3
 8004972:	f002 fa95 	bl	8006ea0 <RCCEx_PLL3_Config>
 8004976:	4603      	mov	r3, r0
 8004978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800497c:	e006      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004984:	e002      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004986:	bf00      	nop
 8004988:	e000      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800498a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800498c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10b      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004994:	4b8e      	ldr	r3, [pc, #568]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004998:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800499c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80049a4:	4a8a      	ldr	r2, [pc, #552]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049a6:	430b      	orrs	r3, r1
 80049a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80049aa:	e003      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049bc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80049c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80049c4:	2300      	movs	r3, #0
 80049c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80049ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80049ce:	460b      	mov	r3, r1
 80049d0:	4313      	orrs	r3, r2
 80049d2:	d03a      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80049d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049da:	2b30      	cmp	r3, #48	@ 0x30
 80049dc:	d01f      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80049de:	2b30      	cmp	r3, #48	@ 0x30
 80049e0:	d819      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d00c      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d815      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d019      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d111      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049f2:	4b77      	ldr	r3, [pc, #476]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f6:	4a76      	ldr	r2, [pc, #472]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80049fe:	e011      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a04:	3308      	adds	r3, #8
 8004a06:	2102      	movs	r1, #2
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f002 f997 	bl	8006d3c <RCCEx_PLL2_Config>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a14:	e006      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a1c:	e002      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a1e:	bf00      	nop
 8004a20:	e000      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a2c:	4b68      	ldr	r3, [pc, #416]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a30:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a3a:	4a65      	ldr	r2, [pc, #404]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a40:	e003      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004a56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004a60:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004a64:	460b      	mov	r3, r1
 8004a66:	4313      	orrs	r3, r2
 8004a68:	d051      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a74:	d035      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004a76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a7a:	d82e      	bhi.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a80:	d031      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004a82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a86:	d828      	bhi.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a8c:	d01a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004a8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a92:	d822      	bhi.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004a98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a9c:	d007      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004a9e:	e01c      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aa0:	4b4b      	ldr	r3, [pc, #300]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa4:	4a4a      	ldr	r2, [pc, #296]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004aac:	e01c      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab2:	3308      	adds	r3, #8
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f002 f940 	bl	8006d3c <RCCEx_PLL2_Config>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ac2:	e011      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac8:	3328      	adds	r3, #40	@ 0x28
 8004aca:	2100      	movs	r1, #0
 8004acc:	4618      	mov	r0, r3
 8004ace:	f002 f9e7 	bl	8006ea0 <RCCEx_PLL3_Config>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ad8:	e006      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ae0:	e002      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004ae2:	bf00      	nop
 8004ae4:	e000      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004af0:	4b37      	ldr	r3, [pc, #220]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004af4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004afe:	4a34      	ldr	r2, [pc, #208]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b00:	430b      	orrs	r3, r1
 8004b02:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b04:	e003      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b16:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004b1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b1e:	2300      	movs	r3, #0
 8004b20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004b24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	d056      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b38:	d033      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004b3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b3e:	d82c      	bhi.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b44:	d02f      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004b46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b4a:	d826      	bhi.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b50:	d02b      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004b52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b56:	d820      	bhi.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b5c:	d012      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004b5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b62:	d81a      	bhi.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d022      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b6c:	d115      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b72:	3308      	adds	r3, #8
 8004b74:	2101      	movs	r1, #1
 8004b76:	4618      	mov	r0, r3
 8004b78:	f002 f8e0 	bl	8006d3c <RCCEx_PLL2_Config>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b82:	e015      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b88:	3328      	adds	r3, #40	@ 0x28
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f002 f987 	bl	8006ea0 <RCCEx_PLL3_Config>
 8004b92:	4603      	mov	r3, r0
 8004b94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b98:	e00a      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ba0:	e006      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ba2:	bf00      	nop
 8004ba4:	e004      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ba6:	bf00      	nop
 8004ba8:	e002      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004baa:	bf00      	nop
 8004bac:	e000      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10d      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004bb8:	4b05      	ldr	r3, [pc, #20]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bbc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bc6:	4a02      	ldr	r2, [pc, #8]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	6513      	str	r3, [r2, #80]	@ 0x50
 8004bcc:	e006      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004bce:	bf00      	nop
 8004bd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004be8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004bec:	2300      	movs	r3, #0
 8004bee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004bf2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	d055      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c08:	d033      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c0e:	d82c      	bhi.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c14:	d02f      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c1a:	d826      	bhi.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c20:	d02b      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004c22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c26:	d820      	bhi.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c2c:	d012      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004c2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c32:	d81a      	bhi.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d022      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004c38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c3c:	d115      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c42:	3308      	adds	r3, #8
 8004c44:	2101      	movs	r1, #1
 8004c46:	4618      	mov	r0, r3
 8004c48:	f002 f878 	bl	8006d3c <RCCEx_PLL2_Config>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c52:	e015      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c58:	3328      	adds	r3, #40	@ 0x28
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f002 f91f 	bl	8006ea0 <RCCEx_PLL3_Config>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c68:	e00a      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c70:	e006      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c72:	bf00      	nop
 8004c74:	e004      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c76:	bf00      	nop
 8004c78:	e002      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c7a:	bf00      	nop
 8004c7c:	e000      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10b      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004c88:	4ba3      	ldr	r3, [pc, #652]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c8c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c98:	4a9f      	ldr	r2, [pc, #636]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c9a:	430b      	orrs	r3, r1
 8004c9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c9e:	e003      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ca4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004cbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	d037      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cd2:	d00e      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004cd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cd8:	d816      	bhi.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d018      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004cde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ce2:	d111      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ce4:	4b8c      	ldr	r3, [pc, #560]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce8:	4a8b      	ldr	r2, [pc, #556]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004cf0:	e00f      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf6:	3308      	adds	r3, #8
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f002 f81e 	bl	8006d3c <RCCEx_PLL2_Config>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d06:	e004      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d0e:	e000      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10a      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d1a:	4b7f      	ldr	r3, [pc, #508]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d1e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d28:	4a7b      	ldr	r2, [pc, #492]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d2a:	430b      	orrs	r3, r1
 8004d2c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d2e:	e003      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004d44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004d4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4313      	orrs	r3, r2
 8004d56:	d039      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d81c      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004d62:	a201      	add	r2, pc, #4	@ (adr r2, 8004d68 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d68:	08004da5 	.word	0x08004da5
 8004d6c:	08004d79 	.word	0x08004d79
 8004d70:	08004d87 	.word	0x08004d87
 8004d74:	08004da5 	.word	0x08004da5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d78:	4b67      	ldr	r3, [pc, #412]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7c:	4a66      	ldr	r2, [pc, #408]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004d84:	e00f      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8a:	3308      	adds	r3, #8
 8004d8c:	2102      	movs	r1, #2
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f001 ffd4 	bl	8006d3c <RCCEx_PLL2_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004d9a:	e004      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004da2:	e000      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004da4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004da6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10a      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004dae:	4b5a      	ldr	r3, [pc, #360]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004db2:	f023 0103 	bic.w	r1, r3, #3
 8004db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dbc:	4a56      	ldr	r2, [pc, #344]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dbe:	430b      	orrs	r3, r1
 8004dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dc2:	e003      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004dd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004de2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004de6:	460b      	mov	r3, r1
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f000 809f 	beq.w	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dee:	4b4b      	ldr	r3, [pc, #300]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a4a      	ldr	r2, [pc, #296]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dfa:	f7fc fb8b 	bl	8001514 <HAL_GetTick>
 8004dfe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e02:	e00b      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e04:	f7fc fb86 	bl	8001514 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b64      	cmp	r3, #100	@ 0x64
 8004e12:	d903      	bls.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e1a:	e005      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e1c:	4b3f      	ldr	r3, [pc, #252]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0ed      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004e28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d179      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e30:	4b39      	ldr	r3, [pc, #228]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e3c:	4053      	eors	r3, r2
 8004e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d015      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e46:	4b34      	ldr	r3, [pc, #208]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e4e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e52:	4b31      	ldr	r3, [pc, #196]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e56:	4a30      	ldr	r2, [pc, #192]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e5c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e5e:	4b2e      	ldr	r3, [pc, #184]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e62:	4a2d      	ldr	r2, [pc, #180]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e68:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004e6a:	4a2b      	ldr	r2, [pc, #172]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e70:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e7e:	d118      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7fc fb48 	bl	8001514 <HAL_GetTick>
 8004e84:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e88:	e00d      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e8a:	f7fc fb43 	bl	8001514 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004e94:	1ad2      	subs	r2, r2, r3
 8004e96:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d903      	bls.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004ea4:	e005      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0eb      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d129      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ebe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ec6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004eca:	d10e      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004ecc:	4b12      	ldr	r3, [pc, #72]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004edc:	091a      	lsrs	r2, r3, #4
 8004ede:	4b10      	ldr	r3, [pc, #64]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	6113      	str	r3, [r2, #16]
 8004ee8:	e005      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004eea:	4b0b      	ldr	r3, [pc, #44]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	4a0a      	ldr	r2, [pc, #40]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ef0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ef4:	6113      	str	r3, [r2, #16]
 8004ef6:	4b08      	ldr	r3, [pc, #32]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ef8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f06:	4a04      	ldr	r2, [pc, #16]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f0c:	e00e      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004f16:	e009      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004f18:	58024400 	.word	0x58024400
 8004f1c:	58024800 	.word	0x58024800
 8004f20:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	f002 0301 	and.w	r3, r2, #1
 8004f38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f42:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f000 8089 	beq.w	8005060 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f54:	2b28      	cmp	r3, #40	@ 0x28
 8004f56:	d86b      	bhi.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004f58:	a201      	add	r2, pc, #4	@ (adr r2, 8004f60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5e:	bf00      	nop
 8004f60:	08005039 	.word	0x08005039
 8004f64:	08005031 	.word	0x08005031
 8004f68:	08005031 	.word	0x08005031
 8004f6c:	08005031 	.word	0x08005031
 8004f70:	08005031 	.word	0x08005031
 8004f74:	08005031 	.word	0x08005031
 8004f78:	08005031 	.word	0x08005031
 8004f7c:	08005031 	.word	0x08005031
 8004f80:	08005005 	.word	0x08005005
 8004f84:	08005031 	.word	0x08005031
 8004f88:	08005031 	.word	0x08005031
 8004f8c:	08005031 	.word	0x08005031
 8004f90:	08005031 	.word	0x08005031
 8004f94:	08005031 	.word	0x08005031
 8004f98:	08005031 	.word	0x08005031
 8004f9c:	08005031 	.word	0x08005031
 8004fa0:	0800501b 	.word	0x0800501b
 8004fa4:	08005031 	.word	0x08005031
 8004fa8:	08005031 	.word	0x08005031
 8004fac:	08005031 	.word	0x08005031
 8004fb0:	08005031 	.word	0x08005031
 8004fb4:	08005031 	.word	0x08005031
 8004fb8:	08005031 	.word	0x08005031
 8004fbc:	08005031 	.word	0x08005031
 8004fc0:	08005039 	.word	0x08005039
 8004fc4:	08005031 	.word	0x08005031
 8004fc8:	08005031 	.word	0x08005031
 8004fcc:	08005031 	.word	0x08005031
 8004fd0:	08005031 	.word	0x08005031
 8004fd4:	08005031 	.word	0x08005031
 8004fd8:	08005031 	.word	0x08005031
 8004fdc:	08005031 	.word	0x08005031
 8004fe0:	08005039 	.word	0x08005039
 8004fe4:	08005031 	.word	0x08005031
 8004fe8:	08005031 	.word	0x08005031
 8004fec:	08005031 	.word	0x08005031
 8004ff0:	08005031 	.word	0x08005031
 8004ff4:	08005031 	.word	0x08005031
 8004ff8:	08005031 	.word	0x08005031
 8004ffc:	08005031 	.word	0x08005031
 8005000:	08005039 	.word	0x08005039
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005008:	3308      	adds	r3, #8
 800500a:	2101      	movs	r1, #1
 800500c:	4618      	mov	r0, r3
 800500e:	f001 fe95 	bl	8006d3c <RCCEx_PLL2_Config>
 8005012:	4603      	mov	r3, r0
 8005014:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005018:	e00f      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800501a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501e:	3328      	adds	r3, #40	@ 0x28
 8005020:	2101      	movs	r1, #1
 8005022:	4618      	mov	r0, r3
 8005024:	f001 ff3c 	bl	8006ea0 <RCCEx_PLL3_Config>
 8005028:	4603      	mov	r3, r0
 800502a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800502e:	e004      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005036:	e000      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800503a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10a      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005042:	4bbf      	ldr	r3, [pc, #764]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005046:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800504a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800504e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005050:	4abb      	ldr	r2, [pc, #748]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005052:	430b      	orrs	r3, r1
 8005054:	6553      	str	r3, [r2, #84]	@ 0x54
 8005056:	e003      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005058:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800505c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005068:	f002 0302 	and.w	r3, r2, #2
 800506c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005070:	2300      	movs	r3, #0
 8005072:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005076:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800507a:	460b      	mov	r3, r1
 800507c:	4313      	orrs	r3, r2
 800507e:	d041      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005084:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005086:	2b05      	cmp	r3, #5
 8005088:	d824      	bhi.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800508a:	a201      	add	r2, pc, #4	@ (adr r2, 8005090 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800508c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005090:	080050dd 	.word	0x080050dd
 8005094:	080050a9 	.word	0x080050a9
 8005098:	080050bf 	.word	0x080050bf
 800509c:	080050dd 	.word	0x080050dd
 80050a0:	080050dd 	.word	0x080050dd
 80050a4:	080050dd 	.word	0x080050dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ac:	3308      	adds	r3, #8
 80050ae:	2101      	movs	r1, #1
 80050b0:	4618      	mov	r0, r3
 80050b2:	f001 fe43 	bl	8006d3c <RCCEx_PLL2_Config>
 80050b6:	4603      	mov	r3, r0
 80050b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80050bc:	e00f      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c2:	3328      	adds	r3, #40	@ 0x28
 80050c4:	2101      	movs	r1, #1
 80050c6:	4618      	mov	r0, r3
 80050c8:	f001 feea 	bl	8006ea0 <RCCEx_PLL3_Config>
 80050cc:	4603      	mov	r3, r0
 80050ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80050d2:	e004      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050da:	e000      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80050dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10a      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80050e6:	4b96      	ldr	r3, [pc, #600]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ea:	f023 0107 	bic.w	r1, r3, #7
 80050ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050f4:	4a92      	ldr	r2, [pc, #584]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050f6:	430b      	orrs	r3, r1
 80050f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80050fa:	e003      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005100:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510c:	f002 0304 	and.w	r3, r2, #4
 8005110:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005114:	2300      	movs	r3, #0
 8005116:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800511a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800511e:	460b      	mov	r3, r1
 8005120:	4313      	orrs	r3, r2
 8005122:	d044      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005128:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800512c:	2b05      	cmp	r3, #5
 800512e:	d825      	bhi.n	800517c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005130:	a201      	add	r2, pc, #4	@ (adr r2, 8005138 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005136:	bf00      	nop
 8005138:	08005185 	.word	0x08005185
 800513c:	08005151 	.word	0x08005151
 8005140:	08005167 	.word	0x08005167
 8005144:	08005185 	.word	0x08005185
 8005148:	08005185 	.word	0x08005185
 800514c:	08005185 	.word	0x08005185
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005154:	3308      	adds	r3, #8
 8005156:	2101      	movs	r1, #1
 8005158:	4618      	mov	r0, r3
 800515a:	f001 fdef 	bl	8006d3c <RCCEx_PLL2_Config>
 800515e:	4603      	mov	r3, r0
 8005160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005164:	e00f      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800516a:	3328      	adds	r3, #40	@ 0x28
 800516c:	2101      	movs	r1, #1
 800516e:	4618      	mov	r0, r3
 8005170:	f001 fe96 	bl	8006ea0 <RCCEx_PLL3_Config>
 8005174:	4603      	mov	r3, r0
 8005176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800517a:	e004      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005182:	e000      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10b      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800518e:	4b6c      	ldr	r3, [pc, #432]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005192:	f023 0107 	bic.w	r1, r3, #7
 8005196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800519a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800519e:	4a68      	ldr	r2, [pc, #416]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051a0:	430b      	orrs	r3, r1
 80051a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80051a4:	e003      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b6:	f002 0320 	and.w	r3, r2, #32
 80051ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80051be:	2300      	movs	r3, #0
 80051c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80051c8:	460b      	mov	r3, r1
 80051ca:	4313      	orrs	r3, r2
 80051cc:	d055      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80051ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051da:	d033      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80051dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051e0:	d82c      	bhi.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e6:	d02f      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80051e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ec:	d826      	bhi.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051f2:	d02b      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80051f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051f8:	d820      	bhi.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051fe:	d012      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005200:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005204:	d81a      	bhi.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005206:	2b00      	cmp	r3, #0
 8005208:	d022      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800520a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800520e:	d115      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005214:	3308      	adds	r3, #8
 8005216:	2100      	movs	r1, #0
 8005218:	4618      	mov	r0, r3
 800521a:	f001 fd8f 	bl	8006d3c <RCCEx_PLL2_Config>
 800521e:	4603      	mov	r3, r0
 8005220:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005224:	e015      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800522a:	3328      	adds	r3, #40	@ 0x28
 800522c:	2102      	movs	r1, #2
 800522e:	4618      	mov	r0, r3
 8005230:	f001 fe36 	bl	8006ea0 <RCCEx_PLL3_Config>
 8005234:	4603      	mov	r3, r0
 8005236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800523a:	e00a      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005242:	e006      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005244:	bf00      	nop
 8005246:	e004      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005248:	bf00      	nop
 800524a:	e002      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800524c:	bf00      	nop
 800524e:	e000      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10b      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800525a:	4b39      	ldr	r3, [pc, #228]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800525c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800525e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800526a:	4a35      	ldr	r2, [pc, #212]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800526c:	430b      	orrs	r3, r1
 800526e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005270:	e003      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005276:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800527a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005282:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005286:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800528a:	2300      	movs	r3, #0
 800528c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005290:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005294:	460b      	mov	r3, r1
 8005296:	4313      	orrs	r3, r2
 8005298:	d058      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800529a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80052a6:	d033      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80052a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80052ac:	d82c      	bhi.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052b2:	d02f      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80052b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052b8:	d826      	bhi.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052be:	d02b      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80052c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052c4:	d820      	bhi.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052ca:	d012      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80052cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052d0:	d81a      	bhi.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d022      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80052d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052da:	d115      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e0:	3308      	adds	r3, #8
 80052e2:	2100      	movs	r1, #0
 80052e4:	4618      	mov	r0, r3
 80052e6:	f001 fd29 	bl	8006d3c <RCCEx_PLL2_Config>
 80052ea:	4603      	mov	r3, r0
 80052ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80052f0:	e015      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f6:	3328      	adds	r3, #40	@ 0x28
 80052f8:	2102      	movs	r1, #2
 80052fa:	4618      	mov	r0, r3
 80052fc:	f001 fdd0 	bl	8006ea0 <RCCEx_PLL3_Config>
 8005300:	4603      	mov	r3, r0
 8005302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005306:	e00a      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800530e:	e006      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005310:	bf00      	nop
 8005312:	e004      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005314:	bf00      	nop
 8005316:	e002      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005318:	bf00      	nop
 800531a:	e000      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800531c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800531e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10e      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005326:	4b06      	ldr	r3, [pc, #24]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800532a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800532e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005332:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005336:	4a02      	ldr	r2, [pc, #8]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005338:	430b      	orrs	r3, r1
 800533a:	6593      	str	r3, [r2, #88]	@ 0x58
 800533c:	e006      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800533e:	bf00      	nop
 8005340:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005348:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800534c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005354:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005358:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800535c:	2300      	movs	r3, #0
 800535e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005362:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005366:	460b      	mov	r3, r1
 8005368:	4313      	orrs	r3, r2
 800536a:	d055      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800536c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005370:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005374:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005378:	d033      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800537a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800537e:	d82c      	bhi.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005384:	d02f      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005386:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800538a:	d826      	bhi.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800538c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005390:	d02b      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005392:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005396:	d820      	bhi.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005398:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800539c:	d012      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800539e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053a2:	d81a      	bhi.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d022      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80053a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053ac:	d115      	bne.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b2:	3308      	adds	r3, #8
 80053b4:	2100      	movs	r1, #0
 80053b6:	4618      	mov	r0, r3
 80053b8:	f001 fcc0 	bl	8006d3c <RCCEx_PLL2_Config>
 80053bc:	4603      	mov	r3, r0
 80053be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80053c2:	e015      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c8:	3328      	adds	r3, #40	@ 0x28
 80053ca:	2102      	movs	r1, #2
 80053cc:	4618      	mov	r0, r3
 80053ce:	f001 fd67 	bl	8006ea0 <RCCEx_PLL3_Config>
 80053d2:	4603      	mov	r3, r0
 80053d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80053d8:	e00a      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053e0:	e006      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053e2:	bf00      	nop
 80053e4:	e004      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053e6:	bf00      	nop
 80053e8:	e002      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053ea:	bf00      	nop
 80053ec:	e000      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10b      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80053f8:	4ba1      	ldr	r3, [pc, #644]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053fc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005404:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005408:	4a9d      	ldr	r2, [pc, #628]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800540a:	430b      	orrs	r3, r1
 800540c:	6593      	str	r3, [r2, #88]	@ 0x58
 800540e:	e003      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005410:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005414:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800541c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005420:	f002 0308 	and.w	r3, r2, #8
 8005424:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005428:	2300      	movs	r3, #0
 800542a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800542e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005432:	460b      	mov	r3, r1
 8005434:	4313      	orrs	r3, r2
 8005436:	d01e      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800543c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005444:	d10c      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800544a:	3328      	adds	r3, #40	@ 0x28
 800544c:	2102      	movs	r1, #2
 800544e:	4618      	mov	r0, r3
 8005450:	f001 fd26 	bl	8006ea0 <RCCEx_PLL3_Config>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005460:	4b87      	ldr	r3, [pc, #540]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005464:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800546c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005470:	4a83      	ldr	r2, [pc, #524]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005472:	430b      	orrs	r3, r1
 8005474:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	f002 0310 	and.w	r3, r2, #16
 8005482:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005486:	2300      	movs	r3, #0
 8005488:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800548c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005490:	460b      	mov	r3, r1
 8005492:	4313      	orrs	r3, r2
 8005494:	d01e      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800549a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800549e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054a2:	d10c      	bne.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a8:	3328      	adds	r3, #40	@ 0x28
 80054aa:	2102      	movs	r1, #2
 80054ac:	4618      	mov	r0, r3
 80054ae:	f001 fcf7 	bl	8006ea0 <RCCEx_PLL3_Config>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054be:	4b70      	ldr	r3, [pc, #448]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80054c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054ce:	4a6c      	ldr	r2, [pc, #432]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054d0:	430b      	orrs	r3, r1
 80054d2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80054e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054e4:	2300      	movs	r3, #0
 80054e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80054ee:	460b      	mov	r3, r1
 80054f0:	4313      	orrs	r3, r2
 80054f2:	d03e      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80054f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005500:	d022      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005502:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005506:	d81b      	bhi.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800550c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005510:	d00b      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005512:	e015      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005518:	3308      	adds	r3, #8
 800551a:	2100      	movs	r1, #0
 800551c:	4618      	mov	r0, r3
 800551e:	f001 fc0d 	bl	8006d3c <RCCEx_PLL2_Config>
 8005522:	4603      	mov	r3, r0
 8005524:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005528:	e00f      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800552a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800552e:	3328      	adds	r3, #40	@ 0x28
 8005530:	2102      	movs	r1, #2
 8005532:	4618      	mov	r0, r3
 8005534:	f001 fcb4 	bl	8006ea0 <RCCEx_PLL3_Config>
 8005538:	4603      	mov	r3, r0
 800553a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800553e:	e004      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005546:	e000      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800554a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10b      	bne.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005552:	4b4b      	ldr	r3, [pc, #300]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005556:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800555a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800555e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005562:	4a47      	ldr	r2, [pc, #284]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005564:	430b      	orrs	r3, r1
 8005566:	6593      	str	r3, [r2, #88]	@ 0x58
 8005568:	e003      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800556a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800556e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800557e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005580:	2300      	movs	r3, #0
 8005582:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005584:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005588:	460b      	mov	r3, r1
 800558a:	4313      	orrs	r3, r2
 800558c:	d03b      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800558e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005596:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800559a:	d01f      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800559c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055a0:	d818      	bhi.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80055a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055a6:	d003      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80055a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055ac:	d007      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80055ae:	e011      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055b0:	4b33      	ldr	r3, [pc, #204]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b4:	4a32      	ldr	r2, [pc, #200]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80055bc:	e00f      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c2:	3328      	adds	r3, #40	@ 0x28
 80055c4:	2101      	movs	r1, #1
 80055c6:	4618      	mov	r0, r3
 80055c8:	f001 fc6a 	bl	8006ea0 <RCCEx_PLL3_Config>
 80055cc:	4603      	mov	r3, r0
 80055ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80055d2:	e004      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055da:	e000      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80055dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10b      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055e6:	4b26      	ldr	r3, [pc, #152]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80055ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f6:	4a22      	ldr	r2, [pc, #136]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055f8:	430b      	orrs	r3, r1
 80055fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80055fc:	e003      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005602:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005612:	673b      	str	r3, [r7, #112]	@ 0x70
 8005614:	2300      	movs	r3, #0
 8005616:	677b      	str	r3, [r7, #116]	@ 0x74
 8005618:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800561c:	460b      	mov	r3, r1
 800561e:	4313      	orrs	r3, r2
 8005620:	d034      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800562c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005630:	d007      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005632:	e011      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005634:	4b12      	ldr	r3, [pc, #72]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005638:	4a11      	ldr	r2, [pc, #68]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800563a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800563e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005640:	e00e      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005646:	3308      	adds	r3, #8
 8005648:	2102      	movs	r1, #2
 800564a:	4618      	mov	r0, r3
 800564c:	f001 fb76 	bl	8006d3c <RCCEx_PLL2_Config>
 8005650:	4603      	mov	r3, r0
 8005652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005656:	e003      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800565e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10d      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005668:	4b05      	ldr	r3, [pc, #20]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800566a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800566c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005676:	4a02      	ldr	r2, [pc, #8]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005678:	430b      	orrs	r3, r1
 800567a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800567c:	e006      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800567e:	bf00      	nop
 8005680:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005688:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800568c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005694:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005698:	66bb      	str	r3, [r7, #104]	@ 0x68
 800569a:	2300      	movs	r3, #0
 800569c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800569e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80056a2:	460b      	mov	r3, r1
 80056a4:	4313      	orrs	r3, r2
 80056a6:	d00c      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ac:	3328      	adds	r3, #40	@ 0x28
 80056ae:	2102      	movs	r1, #2
 80056b0:	4618      	mov	r0, r3
 80056b2:	f001 fbf5 	bl	8006ea0 <RCCEx_PLL3_Config>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80056ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80056d0:	2300      	movs	r3, #0
 80056d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80056d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80056d8:	460b      	mov	r3, r1
 80056da:	4313      	orrs	r3, r2
 80056dc:	d038      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80056de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056ea:	d018      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80056ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056f0:	d811      	bhi.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80056f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056f6:	d014      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80056f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056fc:	d80b      	bhi.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d011      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005706:	d106      	bne.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005708:	4bc3      	ldr	r3, [pc, #780]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800570a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570c:	4ac2      	ldr	r2, [pc, #776]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800570e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005712:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005714:	e008      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800571c:	e004      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800571e:	bf00      	nop
 8005720:	e002      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005722:	bf00      	nop
 8005724:	e000      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005728:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10b      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005730:	4bb9      	ldr	r3, [pc, #740]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005734:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800573c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005740:	4ab5      	ldr	r2, [pc, #724]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005742:	430b      	orrs	r3, r1
 8005744:	6553      	str	r3, [r2, #84]	@ 0x54
 8005746:	e003      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800574c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005758:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800575c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800575e:	2300      	movs	r3, #0
 8005760:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005762:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005766:	460b      	mov	r3, r1
 8005768:	4313      	orrs	r3, r2
 800576a:	d009      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800576c:	4baa      	ldr	r3, [pc, #680]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800576e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005770:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800577a:	4aa7      	ldr	r2, [pc, #668]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800577c:	430b      	orrs	r3, r1
 800577e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005788:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800578c:	653b      	str	r3, [r7, #80]	@ 0x50
 800578e:	2300      	movs	r3, #0
 8005790:	657b      	str	r3, [r7, #84]	@ 0x54
 8005792:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005796:	460b      	mov	r3, r1
 8005798:	4313      	orrs	r3, r2
 800579a:	d00a      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800579c:	4b9e      	ldr	r3, [pc, #632]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80057a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80057ac:	4a9a      	ldr	r2, [pc, #616]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057ae:	430b      	orrs	r3, r1
 80057b0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80057be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057c0:	2300      	movs	r3, #0
 80057c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80057c8:	460b      	mov	r3, r1
 80057ca:	4313      	orrs	r3, r2
 80057cc:	d009      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057ce:	4b92      	ldr	r3, [pc, #584]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057d2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80057d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057dc:	4a8e      	ldr	r2, [pc, #568]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057de:	430b      	orrs	r3, r1
 80057e0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80057e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80057ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80057f0:	2300      	movs	r3, #0
 80057f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80057f4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80057f8:	460b      	mov	r3, r1
 80057fa:	4313      	orrs	r3, r2
 80057fc:	d00e      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057fe:	4b86      	ldr	r3, [pc, #536]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	4a85      	ldr	r2, [pc, #532]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005804:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005808:	6113      	str	r3, [r2, #16]
 800580a:	4b83      	ldr	r3, [pc, #524]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800580c:	6919      	ldr	r1, [r3, #16]
 800580e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005812:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005816:	4a80      	ldr	r2, [pc, #512]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005818:	430b      	orrs	r3, r1
 800581a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800581c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005824:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005828:	63bb      	str	r3, [r7, #56]	@ 0x38
 800582a:	2300      	movs	r3, #0
 800582c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800582e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005832:	460b      	mov	r3, r1
 8005834:	4313      	orrs	r3, r2
 8005836:	d009      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005838:	4b77      	ldr	r3, [pc, #476]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800583a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800583c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005846:	4a74      	ldr	r2, [pc, #464]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005848:	430b      	orrs	r3, r1
 800584a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800584c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005858:	633b      	str	r3, [r7, #48]	@ 0x30
 800585a:	2300      	movs	r3, #0
 800585c:	637b      	str	r3, [r7, #52]	@ 0x34
 800585e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005862:	460b      	mov	r3, r1
 8005864:	4313      	orrs	r3, r2
 8005866:	d00a      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005868:	4b6b      	ldr	r3, [pc, #428]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800586a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005874:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005878:	4a67      	ldr	r2, [pc, #412]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800587a:	430b      	orrs	r3, r1
 800587c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800587e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005886:	2100      	movs	r1, #0
 8005888:	62b9      	str	r1, [r7, #40]	@ 0x28
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005890:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005894:	460b      	mov	r3, r1
 8005896:	4313      	orrs	r3, r2
 8005898:	d011      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800589a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800589e:	3308      	adds	r3, #8
 80058a0:	2100      	movs	r1, #0
 80058a2:	4618      	mov	r0, r3
 80058a4:	f001 fa4a 	bl	8006d3c <RCCEx_PLL2_Config>
 80058a8:	4603      	mov	r3, r0
 80058aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80058ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80058be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	2100      	movs	r1, #0
 80058c8:	6239      	str	r1, [r7, #32]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80058d0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80058d4:	460b      	mov	r3, r1
 80058d6:	4313      	orrs	r3, r2
 80058d8:	d011      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058de:	3308      	adds	r3, #8
 80058e0:	2101      	movs	r1, #1
 80058e2:	4618      	mov	r0, r3
 80058e4:	f001 fa2a 	bl	8006d3c <RCCEx_PLL2_Config>
 80058e8:	4603      	mov	r3, r0
 80058ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80058ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80058fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005906:	2100      	movs	r1, #0
 8005908:	61b9      	str	r1, [r7, #24]
 800590a:	f003 0304 	and.w	r3, r3, #4
 800590e:	61fb      	str	r3, [r7, #28]
 8005910:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005914:	460b      	mov	r3, r1
 8005916:	4313      	orrs	r3, r2
 8005918:	d011      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800591a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800591e:	3308      	adds	r3, #8
 8005920:	2102      	movs	r1, #2
 8005922:	4618      	mov	r0, r3
 8005924:	f001 fa0a 	bl	8006d3c <RCCEx_PLL2_Config>
 8005928:	4603      	mov	r3, r0
 800592a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800592e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800593a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800593e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005946:	2100      	movs	r1, #0
 8005948:	6139      	str	r1, [r7, #16]
 800594a:	f003 0308 	and.w	r3, r3, #8
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005954:	460b      	mov	r3, r1
 8005956:	4313      	orrs	r3, r2
 8005958:	d011      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800595a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595e:	3328      	adds	r3, #40	@ 0x28
 8005960:	2100      	movs	r1, #0
 8005962:	4618      	mov	r0, r3
 8005964:	f001 fa9c 	bl	8006ea0 <RCCEx_PLL3_Config>
 8005968:	4603      	mov	r3, r0
 800596a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800596e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800597a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800597e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005986:	2100      	movs	r1, #0
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	f003 0310 	and.w	r3, r3, #16
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005994:	460b      	mov	r3, r1
 8005996:	4313      	orrs	r3, r2
 8005998:	d011      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800599a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599e:	3328      	adds	r3, #40	@ 0x28
 80059a0:	2101      	movs	r1, #1
 80059a2:	4618      	mov	r0, r3
 80059a4:	f001 fa7c 	bl	8006ea0 <RCCEx_PLL3_Config>
 80059a8:	4603      	mov	r3, r0
 80059aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80059ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80059be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c6:	2100      	movs	r1, #0
 80059c8:	6039      	str	r1, [r7, #0]
 80059ca:	f003 0320 	and.w	r3, r3, #32
 80059ce:	607b      	str	r3, [r7, #4]
 80059d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80059d4:	460b      	mov	r3, r1
 80059d6:	4313      	orrs	r3, r2
 80059d8:	d011      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059de:	3328      	adds	r3, #40	@ 0x28
 80059e0:	2102      	movs	r1, #2
 80059e2:	4618      	mov	r0, r3
 80059e4:	f001 fa5c 	bl	8006ea0 <RCCEx_PLL3_Config>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80059ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80059fe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	e000      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005a12:	46bd      	mov	sp, r7
 8005a14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a18:	58024400 	.word	0x58024400

08005a1c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b090      	sub	sp, #64	@ 0x40
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a2a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005a2e:	430b      	orrs	r3, r1
 8005a30:	f040 8094 	bne.w	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005a34:	4b9e      	ldr	r3, [pc, #632]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a40:	2b04      	cmp	r3, #4
 8005a42:	f200 8087 	bhi.w	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005a46:	a201      	add	r2, pc, #4	@ (adr r2, 8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4c:	08005a61 	.word	0x08005a61
 8005a50:	08005a89 	.word	0x08005a89
 8005a54:	08005ab1 	.word	0x08005ab1
 8005a58:	08005b4d 	.word	0x08005b4d
 8005a5c:	08005ad9 	.word	0x08005ad9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a60:	4b93      	ldr	r3, [pc, #588]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a6c:	d108      	bne.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 f810 	bl	8006a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a7c:	f000 bd45 	b.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a80:	2300      	movs	r3, #0
 8005a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a84:	f000 bd41 	b.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a88:	4b89      	ldr	r3, [pc, #548]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a94:	d108      	bne.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a96:	f107 0318 	add.w	r3, r7, #24
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 fd54 	bl	8006548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005aa4:	f000 bd31 	b.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005aac:	f000 bd2d 	b.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ab0:	4b7f      	ldr	r3, [pc, #508]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005abc:	d108      	bne.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005abe:	f107 030c 	add.w	r3, r7, #12
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fe94 	bl	80067f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005acc:	f000 bd1d 	b.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ad4:	f000 bd19 	b.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005ad8:	4b75      	ldr	r3, [pc, #468]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005adc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ae0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ae2:	4b73      	ldr	r3, [pc, #460]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0304 	and.w	r3, r3, #4
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d10c      	bne.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d109      	bne.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005af4:	4b6e      	ldr	r3, [pc, #440]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	08db      	lsrs	r3, r3, #3
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	4a6d      	ldr	r2, [pc, #436]	@ (8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005b00:	fa22 f303 	lsr.w	r3, r2, r3
 8005b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b06:	e01f      	b.n	8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b08:	4b69      	ldr	r3, [pc, #420]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b14:	d106      	bne.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b1c:	d102      	bne.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005b1e:	4b66      	ldr	r3, [pc, #408]	@ (8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b22:	e011      	b.n	8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b24:	4b62      	ldr	r3, [pc, #392]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b30:	d106      	bne.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b38:	d102      	bne.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005b3a:	4b60      	ldr	r3, [pc, #384]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b3e:	e003      	b.n	8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005b40:	2300      	movs	r3, #0
 8005b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005b44:	f000 bce1 	b.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b48:	f000 bcdf 	b.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b4c:	4b5c      	ldr	r3, [pc, #368]	@ (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b50:	f000 bcdb 	b.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b58:	f000 bcd7 	b.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b60:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005b64:	430b      	orrs	r3, r1
 8005b66:	f040 80ad 	bne.w	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005b6a:	4b51      	ldr	r3, [pc, #324]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b6e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005b72:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b7a:	d056      	beq.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b82:	f200 8090 	bhi.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b88:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b8a:	f000 8088 	beq.w	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b90:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b92:	f200 8088 	bhi.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b98:	2b80      	cmp	r3, #128	@ 0x80
 8005b9a:	d032      	beq.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9e:	2b80      	cmp	r3, #128	@ 0x80
 8005ba0:	f200 8081 	bhi.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bac:	2b40      	cmp	r3, #64	@ 0x40
 8005bae:	d014      	beq.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005bb0:	e079      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005bb2:	4b3f      	ldr	r3, [pc, #252]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bbe:	d108      	bne.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 ff67 	bl	8006a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bce:	f000 bc9c 	b.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bd6:	f000 bc98 	b.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005bda:	4b35      	ldr	r3, [pc, #212]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005be2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005be6:	d108      	bne.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005be8:	f107 0318 	add.w	r3, r7, #24
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 fcab 	bl	8006548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bf6:	f000 bc88 	b.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bfe:	f000 bc84 	b.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c02:	4b2b      	ldr	r3, [pc, #172]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c0e:	d108      	bne.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c10:	f107 030c 	add.w	r3, r7, #12
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 fdeb 	bl	80067f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c1e:	f000 bc74 	b.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c22:	2300      	movs	r3, #0
 8005c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c26:	f000 bc70 	b.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c2a:	4b21      	ldr	r3, [pc, #132]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c32:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c34:	4b1e      	ldr	r3, [pc, #120]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d10c      	bne.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d109      	bne.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c46:	4b1a      	ldr	r3, [pc, #104]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	08db      	lsrs	r3, r3, #3
 8005c4c:	f003 0303 	and.w	r3, r3, #3
 8005c50:	4a18      	ldr	r2, [pc, #96]	@ (8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005c52:	fa22 f303 	lsr.w	r3, r2, r3
 8005c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c58:	e01f      	b.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c5a:	4b15      	ldr	r3, [pc, #84]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c66:	d106      	bne.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c6e:	d102      	bne.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005c70:	4b11      	ldr	r3, [pc, #68]	@ (8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c74:	e011      	b.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c76:	4b0e      	ldr	r3, [pc, #56]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c82:	d106      	bne.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c8a:	d102      	bne.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c90:	e003      	b.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005c96:	f000 bc38 	b.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c9a:	f000 bc36 	b.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005c9e:	4b08      	ldr	r3, [pc, #32]	@ (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ca2:	f000 bc32 	b.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005caa:	f000 bc2e 	b.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005cae:	bf00      	nop
 8005cb0:	58024400 	.word	0x58024400
 8005cb4:	03d09000 	.word	0x03d09000
 8005cb8:	003d0900 	.word	0x003d0900
 8005cbc:	007a1200 	.word	0x007a1200
 8005cc0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cc8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005ccc:	430b      	orrs	r3, r1
 8005cce:	f040 809c 	bne.w	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005cd2:	4b9e      	ldr	r3, [pc, #632]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8005cda:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ce2:	d054      	beq.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cea:	f200 808b 	bhi.w	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005cf4:	f000 8083 	beq.w	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005cfe:	f200 8081 	bhi.w	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d08:	d02f      	beq.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d10:	d878      	bhi.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d004      	beq.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d1e:	d012      	beq.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005d20:	e070      	b.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d22:	4b8a      	ldr	r3, [pc, #552]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d2e:	d107      	bne.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 feaf 	bl	8006a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d3e:	e3e4      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d40:	2300      	movs	r3, #0
 8005d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d44:	e3e1      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d46:	4b81      	ldr	r3, [pc, #516]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d52:	d107      	bne.n	8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d54:	f107 0318 	add.w	r3, r7, #24
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 fbf5 	bl	8006548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d62:	e3d2      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d64:	2300      	movs	r3, #0
 8005d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d68:	e3cf      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d6a:	4b78      	ldr	r3, [pc, #480]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d76:	d107      	bne.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d78:	f107 030c 	add.w	r3, r7, #12
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fd37 	bl	80067f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d86:	e3c0      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d8c:	e3bd      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d8e:	4b6f      	ldr	r3, [pc, #444]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d96:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d98:	4b6c      	ldr	r3, [pc, #432]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b04      	cmp	r3, #4
 8005da2:	d10c      	bne.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d109      	bne.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005daa:	4b68      	ldr	r3, [pc, #416]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	08db      	lsrs	r3, r3, #3
 8005db0:	f003 0303 	and.w	r3, r3, #3
 8005db4:	4a66      	ldr	r2, [pc, #408]	@ (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005db6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dbc:	e01e      	b.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005dbe:	4b63      	ldr	r3, [pc, #396]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dca:	d106      	bne.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dd2:	d102      	bne.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005dd4:	4b5f      	ldr	r3, [pc, #380]	@ (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dd8:	e010      	b.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005dda:	4b5c      	ldr	r3, [pc, #368]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005de2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005de6:	d106      	bne.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dee:	d102      	bne.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005df0:	4b59      	ldr	r3, [pc, #356]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005df4:	e002      	b.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005df6:	2300      	movs	r3, #0
 8005df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005dfa:	e386      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005dfc:	e385      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005dfe:	4b57      	ldr	r3, [pc, #348]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e02:	e382      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e08:	e37f      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e0e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005e12:	430b      	orrs	r3, r1
 8005e14:	f040 80a7 	bne.w	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005e18:	4b4c      	ldr	r3, [pc, #304]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e1c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005e20:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e28:	d055      	beq.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e30:	f200 8096 	bhi.w	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e36:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e3a:	f000 8084 	beq.w	8005f46 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e40:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e44:	f200 808c 	bhi.w	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e4e:	d030      	beq.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e56:	f200 8083 	bhi.w	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d004      	beq.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e66:	d012      	beq.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005e68:	e07a      	b.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e6a:	4b38      	ldr	r3, [pc, #224]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e76:	d107      	bne.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fe0b 	bl	8006a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e86:	e340      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e8c:	e33d      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e8e:	4b2f      	ldr	r3, [pc, #188]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e9a:	d107      	bne.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e9c:	f107 0318 	add.w	r3, r7, #24
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 fb51 	bl	8006548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005eaa:	e32e      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005eac:	2300      	movs	r3, #0
 8005eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eb0:	e32b      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005eb2:	4b26      	ldr	r3, [pc, #152]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005eba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ebe:	d107      	bne.n	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ec0:	f107 030c 	add.w	r3, r7, #12
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 fc93 	bl	80067f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ece:	e31c      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ed4:	e319      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ede:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	d10c      	bne.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d109      	bne.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ef2:	4b16      	ldr	r3, [pc, #88]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	08db      	lsrs	r3, r3, #3
 8005ef8:	f003 0303 	and.w	r3, r3, #3
 8005efc:	4a14      	ldr	r2, [pc, #80]	@ (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005efe:	fa22 f303 	lsr.w	r3, r2, r3
 8005f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f04:	e01e      	b.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f06:	4b11      	ldr	r3, [pc, #68]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f12:	d106      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f1a:	d102      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f20:	e010      	b.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f22:	4b0a      	ldr	r3, [pc, #40]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f2e:	d106      	bne.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f36:	d102      	bne.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005f38:	4b07      	ldr	r3, [pc, #28]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f3c:	e002      	b.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005f42:	e2e2      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f44:	e2e1      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005f46:	4b05      	ldr	r3, [pc, #20]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f4a:	e2de      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f4c:	58024400 	.word	0x58024400
 8005f50:	03d09000 	.word	0x03d09000
 8005f54:	003d0900 	.word	0x003d0900
 8005f58:	007a1200 	.word	0x007a1200
 8005f5c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005f60:	2300      	movs	r3, #0
 8005f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f64:	e2d1      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f6a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005f6e:	430b      	orrs	r3, r1
 8005f70:	f040 809c 	bne.w	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005f74:	4b93      	ldr	r3, [pc, #588]	@ (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f78:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005f7c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f84:	d054      	beq.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f8c:	f200 808b 	bhi.w	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f96:	f000 8083 	beq.w	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fa0:	f200 8081 	bhi.w	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005faa:	d02f      	beq.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fb2:	d878      	bhi.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d004      	beq.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fc0:	d012      	beq.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005fc2:	e070      	b.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005fc4:	4b7f      	ldr	r3, [pc, #508]	@ (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fd0:	d107      	bne.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fd5e 	bl	8006a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fe0:	e293      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fe6:	e290      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fe8:	4b76      	ldr	r3, [pc, #472]	@ (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ff0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ff4:	d107      	bne.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ff6:	f107 0318 	add.w	r3, r7, #24
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 faa4 	bl	8006548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006004:	e281      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006006:	2300      	movs	r3, #0
 8006008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800600a:	e27e      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800600c:	4b6d      	ldr	r3, [pc, #436]	@ (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006014:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006018:	d107      	bne.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800601a:	f107 030c 	add.w	r3, r7, #12
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fbe6 	bl	80067f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006028:	e26f      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800602a:	2300      	movs	r3, #0
 800602c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800602e:	e26c      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006030:	4b64      	ldr	r3, [pc, #400]	@ (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006034:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006038:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800603a:	4b62      	ldr	r3, [pc, #392]	@ (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0304 	and.w	r3, r3, #4
 8006042:	2b04      	cmp	r3, #4
 8006044:	d10c      	bne.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006048:	2b00      	cmp	r3, #0
 800604a:	d109      	bne.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800604c:	4b5d      	ldr	r3, [pc, #372]	@ (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	08db      	lsrs	r3, r3, #3
 8006052:	f003 0303 	and.w	r3, r3, #3
 8006056:	4a5c      	ldr	r2, [pc, #368]	@ (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006058:	fa22 f303 	lsr.w	r3, r2, r3
 800605c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800605e:	e01e      	b.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006060:	4b58      	ldr	r3, [pc, #352]	@ (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006068:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800606c:	d106      	bne.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800606e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006070:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006074:	d102      	bne.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006076:	4b55      	ldr	r3, [pc, #340]	@ (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006078:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800607a:	e010      	b.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800607c:	4b51      	ldr	r3, [pc, #324]	@ (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006084:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006088:	d106      	bne.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800608a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800608c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006090:	d102      	bne.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006092:	4b4f      	ldr	r3, [pc, #316]	@ (80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006094:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006096:	e002      	b.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006098:	2300      	movs	r3, #0
 800609a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800609c:	e235      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800609e:	e234      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80060a0:	4b4c      	ldr	r3, [pc, #304]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80060a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060a4:	e231      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80060a6:	2300      	movs	r3, #0
 80060a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060aa:	e22e      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80060ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060b0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80060b4:	430b      	orrs	r3, r1
 80060b6:	f040 808f 	bne.w	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80060ba:	4b42      	ldr	r3, [pc, #264]	@ (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80060bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060be:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80060c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80060c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060ca:	d06b      	beq.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80060cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060d2:	d874      	bhi.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80060d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060da:	d056      	beq.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80060dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060e2:	d86c      	bhi.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80060e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060ea:	d03b      	beq.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80060ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060f2:	d864      	bhi.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80060f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060fa:	d021      	beq.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80060fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006102:	d85c      	bhi.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006106:	2b00      	cmp	r3, #0
 8006108:	d004      	beq.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800610a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006110:	d004      	beq.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006112:	e054      	b.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006114:	f7fe fa4c 	bl	80045b0 <HAL_RCC_GetPCLK1Freq>
 8006118:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800611a:	e1f6      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800611c:	4b29      	ldr	r3, [pc, #164]	@ (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006124:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006128:	d107      	bne.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800612a:	f107 0318 	add.w	r3, r7, #24
 800612e:	4618      	mov	r0, r3
 8006130:	f000 fa0a 	bl	8006548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006138:	e1e7      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800613a:	2300      	movs	r3, #0
 800613c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800613e:	e1e4      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006140:	4b20      	ldr	r3, [pc, #128]	@ (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006148:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800614c:	d107      	bne.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800614e:	f107 030c 	add.w	r3, r7, #12
 8006152:	4618      	mov	r0, r3
 8006154:	f000 fb4c 	bl	80067f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800615c:	e1d5      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800615e:	2300      	movs	r3, #0
 8006160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006162:	e1d2      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006164:	4b17      	ldr	r3, [pc, #92]	@ (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b04      	cmp	r3, #4
 800616e:	d109      	bne.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006170:	4b14      	ldr	r3, [pc, #80]	@ (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	08db      	lsrs	r3, r3, #3
 8006176:	f003 0303 	and.w	r3, r3, #3
 800617a:	4a13      	ldr	r2, [pc, #76]	@ (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800617c:	fa22 f303 	lsr.w	r3, r2, r3
 8006180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006182:	e1c2      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006184:	2300      	movs	r3, #0
 8006186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006188:	e1bf      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800618a:	4b0e      	ldr	r3, [pc, #56]	@ (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006196:	d102      	bne.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006198:	4b0c      	ldr	r3, [pc, #48]	@ (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800619a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800619c:	e1b5      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800619e:	2300      	movs	r3, #0
 80061a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061a2:	e1b2      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061a4:	4b07      	ldr	r3, [pc, #28]	@ (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061b0:	d102      	bne.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80061b2:	4b07      	ldr	r3, [pc, #28]	@ (80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80061b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061b6:	e1a8      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061bc:	e1a5      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061c2:	e1a2      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80061c4:	58024400 	.word	0x58024400
 80061c8:	03d09000 	.word	0x03d09000
 80061cc:	003d0900 	.word	0x003d0900
 80061d0:	007a1200 	.word	0x007a1200
 80061d4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80061d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061dc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80061e0:	430b      	orrs	r3, r1
 80061e2:	d173      	bne.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80061e4:	4b9c      	ldr	r3, [pc, #624]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80061e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061ec:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80061ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061f4:	d02f      	beq.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80061f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061fc:	d863      	bhi.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80061fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006200:	2b00      	cmp	r3, #0
 8006202:	d004      	beq.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006206:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800620a:	d012      	beq.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800620c:	e05b      	b.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800620e:	4b92      	ldr	r3, [pc, #584]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006216:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800621a:	d107      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800621c:	f107 0318 	add.w	r3, r7, #24
 8006220:	4618      	mov	r0, r3
 8006222:	f000 f991 	bl	8006548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800622a:	e16e      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800622c:	2300      	movs	r3, #0
 800622e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006230:	e16b      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006232:	4b89      	ldr	r3, [pc, #548]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800623a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800623e:	d107      	bne.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006240:	f107 030c 	add.w	r3, r7, #12
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fad3 	bl	80067f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800624e:	e15c      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006250:	2300      	movs	r3, #0
 8006252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006254:	e159      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006256:	4b80      	ldr	r3, [pc, #512]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800625a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800625e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006260:	4b7d      	ldr	r3, [pc, #500]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b04      	cmp	r3, #4
 800626a:	d10c      	bne.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800626c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800626e:	2b00      	cmp	r3, #0
 8006270:	d109      	bne.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006272:	4b79      	ldr	r3, [pc, #484]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	08db      	lsrs	r3, r3, #3
 8006278:	f003 0303 	and.w	r3, r3, #3
 800627c:	4a77      	ldr	r2, [pc, #476]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800627e:	fa22 f303 	lsr.w	r3, r2, r3
 8006282:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006284:	e01e      	b.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006286:	4b74      	ldr	r3, [pc, #464]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800628e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006292:	d106      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006296:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800629a:	d102      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800629c:	4b70      	ldr	r3, [pc, #448]	@ (8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800629e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062a0:	e010      	b.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062a2:	4b6d      	ldr	r3, [pc, #436]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062ae:	d106      	bne.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80062b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062b6:	d102      	bne.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80062b8:	4b6a      	ldr	r3, [pc, #424]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80062ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062bc:	e002      	b.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80062c2:	e122      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80062c4:	e121      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80062c6:	2300      	movs	r3, #0
 80062c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062ca:	e11e      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80062cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062d0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80062d4:	430b      	orrs	r3, r1
 80062d6:	d133      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80062d8:	4b5f      	ldr	r3, [pc, #380]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80062da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80062e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d004      	beq.n	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80062e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062ee:	d012      	beq.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80062f0:	e023      	b.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062f2:	4b59      	ldr	r3, [pc, #356]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062fe:	d107      	bne.n	8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006300:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fbc7 	bl	8006a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800630a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800630e:	e0fc      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006310:	2300      	movs	r3, #0
 8006312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006314:	e0f9      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006316:	4b50      	ldr	r3, [pc, #320]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800631e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006322:	d107      	bne.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006324:	f107 0318 	add.w	r3, r7, #24
 8006328:	4618      	mov	r0, r3
 800632a:	f000 f90d 	bl	8006548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006332:	e0ea      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006334:	2300      	movs	r3, #0
 8006336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006338:	e0e7      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800633a:	2300      	movs	r3, #0
 800633c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800633e:	e0e4      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006344:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006348:	430b      	orrs	r3, r1
 800634a:	f040 808d 	bne.w	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800634e:	4b42      	ldr	r3, [pc, #264]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006352:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006356:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800635e:	d06b      	beq.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006362:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006366:	d874      	bhi.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800636e:	d056      	beq.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006376:	d86c      	bhi.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800637a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800637e:	d03b      	beq.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006382:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006386:	d864      	bhi.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800638e:	d021      	beq.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006392:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006396:	d85c      	bhi.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639a:	2b00      	cmp	r3, #0
 800639c:	d004      	beq.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800639e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063a4:	d004      	beq.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80063a6:	e054      	b.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80063a8:	f000 f8b8 	bl	800651c <HAL_RCCEx_GetD3PCLK1Freq>
 80063ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063ae:	e0ac      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063b0:	4b29      	ldr	r3, [pc, #164]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063bc:	d107      	bne.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063be:	f107 0318 	add.w	r3, r7, #24
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 f8c0 	bl	8006548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063cc:	e09d      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063ce:	2300      	movs	r3, #0
 80063d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063d2:	e09a      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063d4:	4b20      	ldr	r3, [pc, #128]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063e0:	d107      	bne.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063e2:	f107 030c 	add.w	r3, r7, #12
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fa02 	bl	80067f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063f0:	e08b      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063f6:	e088      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063f8:	4b17      	ldr	r3, [pc, #92]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b04      	cmp	r3, #4
 8006402:	d109      	bne.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006404:	4b14      	ldr	r3, [pc, #80]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	08db      	lsrs	r3, r3, #3
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	4a13      	ldr	r2, [pc, #76]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006410:	fa22 f303 	lsr.w	r3, r2, r3
 8006414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006416:	e078      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006418:	2300      	movs	r3, #0
 800641a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800641c:	e075      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800641e:	4b0e      	ldr	r3, [pc, #56]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800642a:	d102      	bne.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800642c:	4b0c      	ldr	r3, [pc, #48]	@ (8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800642e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006430:	e06b      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006432:	2300      	movs	r3, #0
 8006434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006436:	e068      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006438:	4b07      	ldr	r3, [pc, #28]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006440:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006444:	d102      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006446:	4b07      	ldr	r3, [pc, #28]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800644a:	e05e      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800644c:	2300      	movs	r3, #0
 800644e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006450:	e05b      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006452:	2300      	movs	r3, #0
 8006454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006456:	e058      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006458:	58024400 	.word	0x58024400
 800645c:	03d09000 	.word	0x03d09000
 8006460:	003d0900 	.word	0x003d0900
 8006464:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800646c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006470:	430b      	orrs	r3, r1
 8006472:	d148      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006474:	4b27      	ldr	r3, [pc, #156]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006478:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800647c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800647e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006480:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006484:	d02a      	beq.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800648c:	d838      	bhi.n	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800648e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006490:	2b00      	cmp	r3, #0
 8006492:	d004      	beq.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006496:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800649a:	d00d      	beq.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800649c:	e030      	b.n	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800649e:	4b1d      	ldr	r3, [pc, #116]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064aa:	d102      	bne.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80064ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80064ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064b0:	e02b      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064b2:	2300      	movs	r3, #0
 80064b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064b6:	e028      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064b8:	4b16      	ldr	r3, [pc, #88]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064c4:	d107      	bne.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 fae4 	bl	8006a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064d4:	e019      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064d6:	2300      	movs	r3, #0
 80064d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064da:	e016      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064e8:	d107      	bne.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064ea:	f107 0318 	add.w	r3, r7, #24
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 f82a 	bl	8006548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064f8:	e007      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064fa:	2300      	movs	r3, #0
 80064fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064fe:	e004      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006504:	e001      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006506:	2300      	movs	r3, #0
 8006508:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800650a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800650c:	4618      	mov	r0, r3
 800650e:	3740      	adds	r7, #64	@ 0x40
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	58024400 	.word	0x58024400
 8006518:	007a1200 	.word	0x007a1200

0800651c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006520:	f7fe f816 	bl	8004550 <HAL_RCC_GetHCLKFreq>
 8006524:	4602      	mov	r2, r0
 8006526:	4b06      	ldr	r3, [pc, #24]	@ (8006540 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	091b      	lsrs	r3, r3, #4
 800652c:	f003 0307 	and.w	r3, r3, #7
 8006530:	4904      	ldr	r1, [pc, #16]	@ (8006544 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006532:	5ccb      	ldrb	r3, [r1, r3]
 8006534:	f003 031f 	and.w	r3, r3, #31
 8006538:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800653c:	4618      	mov	r0, r3
 800653e:	bd80      	pop	{r7, pc}
 8006540:	58024400 	.word	0x58024400
 8006544:	08008544 	.word	0x08008544

08006548 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006548:	b480      	push	{r7}
 800654a:	b089      	sub	sp, #36	@ 0x24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006550:	4ba1      	ldr	r3, [pc, #644]	@ (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006554:	f003 0303 	and.w	r3, r3, #3
 8006558:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800655a:	4b9f      	ldr	r3, [pc, #636]	@ (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800655c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800655e:	0b1b      	lsrs	r3, r3, #12
 8006560:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006564:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006566:	4b9c      	ldr	r3, [pc, #624]	@ (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800656a:	091b      	lsrs	r3, r3, #4
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006572:	4b99      	ldr	r3, [pc, #612]	@ (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006576:	08db      	lsrs	r3, r3, #3
 8006578:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	fb02 f303 	mul.w	r3, r2, r3
 8006582:	ee07 3a90 	vmov	s15, r3
 8006586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 8111 	beq.w	80067b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	2b02      	cmp	r3, #2
 800659a:	f000 8083 	beq.w	80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	f200 80a1 	bhi.w	80066e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d056      	beq.n	8006660 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80065b2:	e099      	b.n	80066e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065b4:	4b88      	ldr	r3, [pc, #544]	@ (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0320 	and.w	r3, r3, #32
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d02d      	beq.n	800661c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065c0:	4b85      	ldr	r3, [pc, #532]	@ (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	08db      	lsrs	r3, r3, #3
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	4a84      	ldr	r2, [pc, #528]	@ (80067dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80065cc:	fa22 f303 	lsr.w	r3, r2, r3
 80065d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	ee07 3a90 	vmov	s15, r3
 80065d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	ee07 3a90 	vmov	s15, r3
 80065e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ea:	4b7b      	ldr	r3, [pc, #492]	@ (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f2:	ee07 3a90 	vmov	s15, r3
 80065f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80065fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80067e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800660a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800660e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006616:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800661a:	e087      	b.n	800672c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	ee07 3a90 	vmov	s15, r3
 8006622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006626:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80067e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800662a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800662e:	4b6a      	ldr	r3, [pc, #424]	@ (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006636:	ee07 3a90 	vmov	s15, r3
 800663a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800663e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006642:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80067e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800664a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800664e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800665a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800665e:	e065      	b.n	800672c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	ee07 3a90 	vmov	s15, r3
 8006666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800666a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80067e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800666e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006672:	4b59      	ldr	r3, [pc, #356]	@ (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800667a:	ee07 3a90 	vmov	s15, r3
 800667e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006682:	ed97 6a03 	vldr	s12, [r7, #12]
 8006686:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80067e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800668a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800668e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800669a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800669e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066a2:	e043      	b.n	800672c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	ee07 3a90 	vmov	s15, r3
 80066aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80067ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80066b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066b6:	4b48      	ldr	r3, [pc, #288]	@ (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066be:	ee07 3a90 	vmov	s15, r3
 80066c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80067e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066e6:	e021      	b.n	800672c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	ee07 3a90 	vmov	s15, r3
 80066ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80067e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80066f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066fa:	4b37      	ldr	r3, [pc, #220]	@ (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006702:	ee07 3a90 	vmov	s15, r3
 8006706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800670a:	ed97 6a03 	vldr	s12, [r7, #12]
 800670e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80067e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800671a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800671e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800672a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800672c:	4b2a      	ldr	r3, [pc, #168]	@ (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800672e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006730:	0a5b      	lsrs	r3, r3, #9
 8006732:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006736:	ee07 3a90 	vmov	s15, r3
 800673a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006742:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006746:	edd7 6a07 	vldr	s13, [r7, #28]
 800674a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800674e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006752:	ee17 2a90 	vmov	r2, s15
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800675a:	4b1f      	ldr	r3, [pc, #124]	@ (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800675c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800675e:	0c1b      	lsrs	r3, r3, #16
 8006760:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006764:	ee07 3a90 	vmov	s15, r3
 8006768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006770:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006774:	edd7 6a07 	vldr	s13, [r7, #28]
 8006778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800677c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006780:	ee17 2a90 	vmov	r2, s15
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006788:	4b13      	ldr	r3, [pc, #76]	@ (80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800678a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800678c:	0e1b      	lsrs	r3, r3, #24
 800678e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006792:	ee07 3a90 	vmov	s15, r3
 8006796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800679a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800679e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80067a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067ae:	ee17 2a90 	vmov	r2, s15
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80067b6:	e008      	b.n	80067ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	609a      	str	r2, [r3, #8]
}
 80067ca:	bf00      	nop
 80067cc:	3724      	adds	r7, #36	@ 0x24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	58024400 	.word	0x58024400
 80067dc:	03d09000 	.word	0x03d09000
 80067e0:	46000000 	.word	0x46000000
 80067e4:	4c742400 	.word	0x4c742400
 80067e8:	4a742400 	.word	0x4a742400
 80067ec:	4af42400 	.word	0x4af42400

080067f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b089      	sub	sp, #36	@ 0x24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067f8:	4ba1      	ldr	r3, [pc, #644]	@ (8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fc:	f003 0303 	and.w	r3, r3, #3
 8006800:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006802:	4b9f      	ldr	r3, [pc, #636]	@ (8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006806:	0d1b      	lsrs	r3, r3, #20
 8006808:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800680c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800680e:	4b9c      	ldr	r3, [pc, #624]	@ (8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006812:	0a1b      	lsrs	r3, r3, #8
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800681a:	4b99      	ldr	r3, [pc, #612]	@ (8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800681c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800681e:	08db      	lsrs	r3, r3, #3
 8006820:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	fb02 f303 	mul.w	r3, r2, r3
 800682a:	ee07 3a90 	vmov	s15, r3
 800682e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006832:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 8111 	beq.w	8006a60 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	2b02      	cmp	r3, #2
 8006842:	f000 8083 	beq.w	800694c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	2b02      	cmp	r3, #2
 800684a:	f200 80a1 	bhi.w	8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d003      	beq.n	800685c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d056      	beq.n	8006908 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800685a:	e099      	b.n	8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800685c:	4b88      	ldr	r3, [pc, #544]	@ (8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0320 	and.w	r3, r3, #32
 8006864:	2b00      	cmp	r3, #0
 8006866:	d02d      	beq.n	80068c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006868:	4b85      	ldr	r3, [pc, #532]	@ (8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	08db      	lsrs	r3, r3, #3
 800686e:	f003 0303 	and.w	r3, r3, #3
 8006872:	4a84      	ldr	r2, [pc, #528]	@ (8006a84 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006874:	fa22 f303 	lsr.w	r3, r2, r3
 8006878:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	ee07 3a90 	vmov	s15, r3
 8006880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	ee07 3a90 	vmov	s15, r3
 800688a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006892:	4b7b      	ldr	r3, [pc, #492]	@ (8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800689a:	ee07 3a90 	vmov	s15, r3
 800689e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80068a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006a88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80068c2:	e087      	b.n	80069d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	ee07 3a90 	vmov	s15, r3
 80068ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006a8c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80068d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068d6:	4b6a      	ldr	r3, [pc, #424]	@ (8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068de:	ee07 3a90 	vmov	s15, r3
 80068e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80068ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006a88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006906:	e065      	b.n	80069d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	ee07 3a90 	vmov	s15, r3
 800690e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006912:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800691a:	4b59      	ldr	r3, [pc, #356]	@ (8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800691c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006922:	ee07 3a90 	vmov	s15, r3
 8006926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800692a:	ed97 6a03 	vldr	s12, [r7, #12]
 800692e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006a88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800693a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800693e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800694a:	e043      	b.n	80069d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	ee07 3a90 	vmov	s15, r3
 8006952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006956:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006a94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800695a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800695e:	4b48      	ldr	r3, [pc, #288]	@ (8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800696e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006972:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006a88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800697a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800697e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800698a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800698e:	e021      	b.n	80069d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	ee07 3a90 	vmov	s15, r3
 8006996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800699e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069a2:	4b37      	ldr	r3, [pc, #220]	@ (8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069aa:	ee07 3a90 	vmov	s15, r3
 80069ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80069b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006a88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80069d4:	4b2a      	ldr	r3, [pc, #168]	@ (8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d8:	0a5b      	lsrs	r3, r3, #9
 80069da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069de:	ee07 3a90 	vmov	s15, r3
 80069e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80069f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069fa:	ee17 2a90 	vmov	r2, s15
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006a02:	4b1f      	ldr	r3, [pc, #124]	@ (8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a06:	0c1b      	lsrs	r3, r3, #16
 8006a08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a0c:	ee07 3a90 	vmov	s15, r3
 8006a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a28:	ee17 2a90 	vmov	r2, s15
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006a30:	4b13      	ldr	r3, [pc, #76]	@ (8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a34:	0e1b      	lsrs	r3, r3, #24
 8006a36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a3a:	ee07 3a90 	vmov	s15, r3
 8006a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a56:	ee17 2a90 	vmov	r2, s15
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006a5e:	e008      	b.n	8006a72 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	609a      	str	r2, [r3, #8]
}
 8006a72:	bf00      	nop
 8006a74:	3724      	adds	r7, #36	@ 0x24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	58024400 	.word	0x58024400
 8006a84:	03d09000 	.word	0x03d09000
 8006a88:	46000000 	.word	0x46000000
 8006a8c:	4c742400 	.word	0x4c742400
 8006a90:	4a742400 	.word	0x4a742400
 8006a94:	4af42400 	.word	0x4af42400

08006a98 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b089      	sub	sp, #36	@ 0x24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006aa0:	4ba0      	ldr	r3, [pc, #640]	@ (8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa4:	f003 0303 	and.w	r3, r3, #3
 8006aa8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006aaa:	4b9e      	ldr	r3, [pc, #632]	@ (8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aae:	091b      	lsrs	r3, r3, #4
 8006ab0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ab4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006ab6:	4b9b      	ldr	r3, [pc, #620]	@ (8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006ac0:	4b98      	ldr	r3, [pc, #608]	@ (8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ac4:	08db      	lsrs	r3, r3, #3
 8006ac6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	fb02 f303 	mul.w	r3, r2, r3
 8006ad0:	ee07 3a90 	vmov	s15, r3
 8006ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f000 8111 	beq.w	8006d06 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	f000 8083 	beq.w	8006bf2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	f200 80a1 	bhi.w	8006c36 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d056      	beq.n	8006bae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006b00:	e099      	b.n	8006c36 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b02:	4b88      	ldr	r3, [pc, #544]	@ (8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0320 	and.w	r3, r3, #32
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d02d      	beq.n	8006b6a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b0e:	4b85      	ldr	r3, [pc, #532]	@ (8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	08db      	lsrs	r3, r3, #3
 8006b14:	f003 0303 	and.w	r3, r3, #3
 8006b18:	4a83      	ldr	r2, [pc, #524]	@ (8006d28 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b1e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	ee07 3a90 	vmov	s15, r3
 8006b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	ee07 3a90 	vmov	s15, r3
 8006b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b38:	4b7a      	ldr	r3, [pc, #488]	@ (8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b40:	ee07 3a90 	vmov	s15, r3
 8006b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b48:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b4c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006d2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006b50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b64:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b68:	e087      	b.n	8006c7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	ee07 3a90 	vmov	s15, r3
 8006b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b74:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006d30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006b78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b7c:	4b69      	ldr	r3, [pc, #420]	@ (8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b84:	ee07 3a90 	vmov	s15, r3
 8006b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b90:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006d2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006b94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bac:	e065      	b.n	8006c7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	ee07 3a90 	vmov	s15, r3
 8006bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006d34 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006bbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bc0:	4b58      	ldr	r3, [pc, #352]	@ (8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc8:	ee07 3a90 	vmov	s15, r3
 8006bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bd4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006d2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006bd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006be0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006be4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bf0:	e043      	b.n	8006c7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	ee07 3a90 	vmov	s15, r3
 8006bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006c00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c04:	4b47      	ldr	r3, [pc, #284]	@ (8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c0c:	ee07 3a90 	vmov	s15, r3
 8006c10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c14:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c18:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006d2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c34:	e021      	b.n	8006c7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	ee07 3a90 	vmov	s15, r3
 8006c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c40:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006d30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006c44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c48:	4b36      	ldr	r3, [pc, #216]	@ (8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c50:	ee07 3a90 	vmov	s15, r3
 8006c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c58:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c5c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006d2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c78:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c7e:	0a5b      	lsrs	r3, r3, #9
 8006c80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c84:	ee07 3a90 	vmov	s15, r3
 8006c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c94:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ca0:	ee17 2a90 	vmov	r2, s15
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cac:	0c1b      	lsrs	r3, r3, #16
 8006cae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cb2:	ee07 3a90 	vmov	s15, r3
 8006cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cce:	ee17 2a90 	vmov	r2, s15
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006cd6:	4b13      	ldr	r3, [pc, #76]	@ (8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cda:	0e1b      	lsrs	r3, r3, #24
 8006cdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ce0:	ee07 3a90 	vmov	s15, r3
 8006ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ce8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cfc:	ee17 2a90 	vmov	r2, s15
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006d04:	e008      	b.n	8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	609a      	str	r2, [r3, #8]
}
 8006d18:	bf00      	nop
 8006d1a:	3724      	adds	r7, #36	@ 0x24
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	58024400 	.word	0x58024400
 8006d28:	03d09000 	.word	0x03d09000
 8006d2c:	46000000 	.word	0x46000000
 8006d30:	4c742400 	.word	0x4c742400
 8006d34:	4a742400 	.word	0x4a742400
 8006d38:	4af42400 	.word	0x4af42400

08006d3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d4a:	4b53      	ldr	r3, [pc, #332]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d4e:	f003 0303 	and.w	r3, r3, #3
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d101      	bne.n	8006d5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e099      	b.n	8006e8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d5a:	4b4f      	ldr	r3, [pc, #316]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a4e      	ldr	r2, [pc, #312]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006d60:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d66:	f7fa fbd5 	bl	8001514 <HAL_GetTick>
 8006d6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d6c:	e008      	b.n	8006d80 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d6e:	f7fa fbd1 	bl	8001514 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d901      	bls.n	8006d80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e086      	b.n	8006e8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d80:	4b45      	ldr	r3, [pc, #276]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1f0      	bne.n	8006d6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006d8c:	4b42      	ldr	r3, [pc, #264]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d90:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	031b      	lsls	r3, r3, #12
 8006d9a:	493f      	ldr	r1, [pc, #252]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	3b01      	subs	r3, #1
 8006da6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	3b01      	subs	r3, #1
 8006db0:	025b      	lsls	r3, r3, #9
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	431a      	orrs	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	041b      	lsls	r3, r3, #16
 8006dbe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	061b      	lsls	r3, r3, #24
 8006dcc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006dd0:	4931      	ldr	r1, [pc, #196]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006dd6:	4b30      	ldr	r3, [pc, #192]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	492d      	ldr	r1, [pc, #180]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006de8:	4b2b      	ldr	r3, [pc, #172]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dec:	f023 0220 	bic.w	r2, r3, #32
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	4928      	ldr	r1, [pc, #160]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006dfa:	4b27      	ldr	r3, [pc, #156]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfe:	4a26      	ldr	r2, [pc, #152]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006e00:	f023 0310 	bic.w	r3, r3, #16
 8006e04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006e06:	4b24      	ldr	r3, [pc, #144]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006e08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e0a:	4b24      	ldr	r3, [pc, #144]	@ (8006e9c <RCCEx_PLL2_Config+0x160>)
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	69d2      	ldr	r2, [r2, #28]
 8006e12:	00d2      	lsls	r2, r2, #3
 8006e14:	4920      	ldr	r1, [pc, #128]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006e20:	f043 0310 	orr.w	r3, r3, #16
 8006e24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d106      	bne.n	8006e3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e30:	4a19      	ldr	r2, [pc, #100]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006e32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e38:	e00f      	b.n	8006e5a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d106      	bne.n	8006e4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e40:	4b15      	ldr	r3, [pc, #84]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e44:	4a14      	ldr	r2, [pc, #80]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006e46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e4c:	e005      	b.n	8006e5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e4e:	4b12      	ldr	r3, [pc, #72]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e52:	4a11      	ldr	r2, [pc, #68]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006e54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006e58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006e60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e66:	f7fa fb55 	bl	8001514 <HAL_GetTick>
 8006e6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e6c:	e008      	b.n	8006e80 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e6e:	f7fa fb51 	bl	8001514 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d901      	bls.n	8006e80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e006      	b.n	8006e8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e80:	4b05      	ldr	r3, [pc, #20]	@ (8006e98 <RCCEx_PLL2_Config+0x15c>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d0f0      	beq.n	8006e6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	58024400 	.word	0x58024400
 8006e9c:	ffff0007 	.word	0xffff0007

08006ea0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006eae:	4b53      	ldr	r3, [pc, #332]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb2:	f003 0303 	and.w	r3, r3, #3
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	d101      	bne.n	8006ebe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e099      	b.n	8006ff2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006ebe:	4b4f      	ldr	r3, [pc, #316]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a4e      	ldr	r2, [pc, #312]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006ec4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eca:	f7fa fb23 	bl	8001514 <HAL_GetTick>
 8006ece:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ed0:	e008      	b.n	8006ee4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006ed2:	f7fa fb1f 	bl	8001514 <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d901      	bls.n	8006ee4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e086      	b.n	8006ff2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ee4:	4b45      	ldr	r3, [pc, #276]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1f0      	bne.n	8006ed2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006ef0:	4b42      	ldr	r3, [pc, #264]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	051b      	lsls	r3, r3, #20
 8006efe:	493f      	ldr	r1, [pc, #252]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	3b01      	subs	r3, #1
 8006f14:	025b      	lsls	r3, r3, #9
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	041b      	lsls	r3, r3, #16
 8006f22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f26:	431a      	orrs	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	061b      	lsls	r3, r3, #24
 8006f30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f34:	4931      	ldr	r1, [pc, #196]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f3a:	4b30      	ldr	r3, [pc, #192]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	492d      	ldr	r1, [pc, #180]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f50:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	4928      	ldr	r1, [pc, #160]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f5e:	4b27      	ldr	r3, [pc, #156]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f62:	4a26      	ldr	r2, [pc, #152]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006f64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006f6a:	4b24      	ldr	r3, [pc, #144]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006f6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f6e:	4b24      	ldr	r3, [pc, #144]	@ (8007000 <RCCEx_PLL3_Config+0x160>)
 8006f70:	4013      	ands	r3, r2
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	69d2      	ldr	r2, [r2, #28]
 8006f76:	00d2      	lsls	r2, r2, #3
 8006f78:	4920      	ldr	r1, [pc, #128]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f82:	4a1e      	ldr	r2, [pc, #120]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d106      	bne.n	8006f9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006f90:	4b1a      	ldr	r3, [pc, #104]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f94:	4a19      	ldr	r2, [pc, #100]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006f96:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f9c:	e00f      	b.n	8006fbe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d106      	bne.n	8006fb2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006fa4:	4b15      	ldr	r3, [pc, #84]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa8:	4a14      	ldr	r2, [pc, #80]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006faa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006fae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006fb0:	e005      	b.n	8006fbe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006fb2:	4b12      	ldr	r3, [pc, #72]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb6:	4a11      	ldr	r2, [pc, #68]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006fb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fca:	f7fa faa3 	bl	8001514 <HAL_GetTick>
 8006fce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006fd0:	e008      	b.n	8006fe4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006fd2:	f7fa fa9f 	bl	8001514 <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d901      	bls.n	8006fe4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e006      	b.n	8006ff2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006fe4:	4b05      	ldr	r3, [pc, #20]	@ (8006ffc <RCCEx_PLL3_Config+0x15c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d0f0      	beq.n	8006fd2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	58024400 	.word	0x58024400
 8007000:	ffff0007 	.word	0xffff0007

08007004 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e049      	b.n	80070aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d106      	bne.n	8007030 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7fa f82a 	bl	8001084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3304      	adds	r3, #4
 8007040:	4619      	mov	r1, r3
 8007042:	4610      	mov	r0, r2
 8007044:	f000 f836 	bl	80070b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
	...

080070b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a46      	ldr	r2, [pc, #280]	@ (80071e0 <TIM_Base_SetConfig+0x12c>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d013      	beq.n	80070f4 <TIM_Base_SetConfig+0x40>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070d2:	d00f      	beq.n	80070f4 <TIM_Base_SetConfig+0x40>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a43      	ldr	r2, [pc, #268]	@ (80071e4 <TIM_Base_SetConfig+0x130>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d00b      	beq.n	80070f4 <TIM_Base_SetConfig+0x40>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a42      	ldr	r2, [pc, #264]	@ (80071e8 <TIM_Base_SetConfig+0x134>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d007      	beq.n	80070f4 <TIM_Base_SetConfig+0x40>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a41      	ldr	r2, [pc, #260]	@ (80071ec <TIM_Base_SetConfig+0x138>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d003      	beq.n	80070f4 <TIM_Base_SetConfig+0x40>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a40      	ldr	r2, [pc, #256]	@ (80071f0 <TIM_Base_SetConfig+0x13c>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d108      	bne.n	8007106 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a35      	ldr	r2, [pc, #212]	@ (80071e0 <TIM_Base_SetConfig+0x12c>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d01f      	beq.n	800714e <TIM_Base_SetConfig+0x9a>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007114:	d01b      	beq.n	800714e <TIM_Base_SetConfig+0x9a>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a32      	ldr	r2, [pc, #200]	@ (80071e4 <TIM_Base_SetConfig+0x130>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d017      	beq.n	800714e <TIM_Base_SetConfig+0x9a>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a31      	ldr	r2, [pc, #196]	@ (80071e8 <TIM_Base_SetConfig+0x134>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d013      	beq.n	800714e <TIM_Base_SetConfig+0x9a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a30      	ldr	r2, [pc, #192]	@ (80071ec <TIM_Base_SetConfig+0x138>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d00f      	beq.n	800714e <TIM_Base_SetConfig+0x9a>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a2f      	ldr	r2, [pc, #188]	@ (80071f0 <TIM_Base_SetConfig+0x13c>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d00b      	beq.n	800714e <TIM_Base_SetConfig+0x9a>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a2e      	ldr	r2, [pc, #184]	@ (80071f4 <TIM_Base_SetConfig+0x140>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d007      	beq.n	800714e <TIM_Base_SetConfig+0x9a>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a2d      	ldr	r2, [pc, #180]	@ (80071f8 <TIM_Base_SetConfig+0x144>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d003      	beq.n	800714e <TIM_Base_SetConfig+0x9a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a2c      	ldr	r2, [pc, #176]	@ (80071fc <TIM_Base_SetConfig+0x148>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d108      	bne.n	8007160 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	4313      	orrs	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	4313      	orrs	r3, r2
 800716c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a16      	ldr	r2, [pc, #88]	@ (80071e0 <TIM_Base_SetConfig+0x12c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d00f      	beq.n	80071ac <TIM_Base_SetConfig+0xf8>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a18      	ldr	r2, [pc, #96]	@ (80071f0 <TIM_Base_SetConfig+0x13c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00b      	beq.n	80071ac <TIM_Base_SetConfig+0xf8>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a17      	ldr	r2, [pc, #92]	@ (80071f4 <TIM_Base_SetConfig+0x140>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d007      	beq.n	80071ac <TIM_Base_SetConfig+0xf8>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a16      	ldr	r2, [pc, #88]	@ (80071f8 <TIM_Base_SetConfig+0x144>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d003      	beq.n	80071ac <TIM_Base_SetConfig+0xf8>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a15      	ldr	r2, [pc, #84]	@ (80071fc <TIM_Base_SetConfig+0x148>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d103      	bne.n	80071b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	691a      	ldr	r2, [r3, #16]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d105      	bne.n	80071d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	f023 0201 	bic.w	r2, r3, #1
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	611a      	str	r2, [r3, #16]
  }
}
 80071d2:	bf00      	nop
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	40010000 	.word	0x40010000
 80071e4:	40000400 	.word	0x40000400
 80071e8:	40000800 	.word	0x40000800
 80071ec:	40000c00 	.word	0x40000c00
 80071f0:	40010400 	.word	0x40010400
 80071f4:	40014000 	.word	0x40014000
 80071f8:	40014400 	.word	0x40014400
 80071fc:	40014800 	.word	0x40014800

08007200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007210:	2b01      	cmp	r3, #1
 8007212:	d101      	bne.n	8007218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007214:	2302      	movs	r3, #2
 8007216:	e06d      	b.n	80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a30      	ldr	r2, [pc, #192]	@ (8007300 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d004      	beq.n	800724c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a2f      	ldr	r2, [pc, #188]	@ (8007304 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d108      	bne.n	800725e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007252:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	4313      	orrs	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007264:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a20      	ldr	r2, [pc, #128]	@ (8007300 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d022      	beq.n	80072c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800728a:	d01d      	beq.n	80072c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a1d      	ldr	r2, [pc, #116]	@ (8007308 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d018      	beq.n	80072c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a1c      	ldr	r2, [pc, #112]	@ (800730c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d013      	beq.n	80072c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a1a      	ldr	r2, [pc, #104]	@ (8007310 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d00e      	beq.n	80072c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a15      	ldr	r2, [pc, #84]	@ (8007304 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d009      	beq.n	80072c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a16      	ldr	r2, [pc, #88]	@ (8007314 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d004      	beq.n	80072c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a15      	ldr	r2, [pc, #84]	@ (8007318 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d10c      	bne.n	80072e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	40010000 	.word	0x40010000
 8007304:	40010400 	.word	0x40010400
 8007308:	40000400 	.word	0x40000400
 800730c:	40000800 	.word	0x40000800
 8007310:	40000c00 	.word	0x40000c00
 8007314:	40001800 	.word	0x40001800
 8007318:	40014000 	.word	0x40014000

0800731c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e042      	b.n	80073b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007334:	2b00      	cmp	r3, #0
 8007336:	d106      	bne.n	8007346 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7f9 fec1 	bl	80010c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2224      	movs	r2, #36	@ 0x24
 800734a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f022 0201 	bic.w	r2, r2, #1
 800735c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fd90 	bl	8007e8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f825 	bl	80073bc <UART_SetConfig>
 8007372:	4603      	mov	r3, r0
 8007374:	2b01      	cmp	r3, #1
 8007376:	d101      	bne.n	800737c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e01b      	b.n	80073b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800738a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800739a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f042 0201 	orr.w	r2, r2, #1
 80073aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fe0f 	bl	8007fd0 <UART_CheckIdleState>
 80073b2:	4603      	mov	r3, r0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073c0:	b092      	sub	sp, #72	@ 0x48
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073c6:	2300      	movs	r3, #0
 80073c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	689a      	ldr	r2, [r3, #8]
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	431a      	orrs	r2, r3
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	431a      	orrs	r2, r3
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	4bbe      	ldr	r3, [pc, #760]	@ (80076e4 <UART_SetConfig+0x328>)
 80073ec:	4013      	ands	r3, r2
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	6812      	ldr	r2, [r2, #0]
 80073f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80073f4:	430b      	orrs	r3, r1
 80073f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	68da      	ldr	r2, [r3, #12]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4ab3      	ldr	r2, [pc, #716]	@ (80076e8 <UART_SetConfig+0x32c>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d004      	beq.n	8007428 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007424:	4313      	orrs	r3, r2
 8007426:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689a      	ldr	r2, [r3, #8]
 800742e:	4baf      	ldr	r3, [pc, #700]	@ (80076ec <UART_SetConfig+0x330>)
 8007430:	4013      	ands	r3, r2
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	6812      	ldr	r2, [r2, #0]
 8007436:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007438:	430b      	orrs	r3, r1
 800743a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007442:	f023 010f 	bic.w	r1, r3, #15
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4aa6      	ldr	r2, [pc, #664]	@ (80076f0 <UART_SetConfig+0x334>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d177      	bne.n	800754c <UART_SetConfig+0x190>
 800745c:	4ba5      	ldr	r3, [pc, #660]	@ (80076f4 <UART_SetConfig+0x338>)
 800745e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007460:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007464:	2b28      	cmp	r3, #40	@ 0x28
 8007466:	d86d      	bhi.n	8007544 <UART_SetConfig+0x188>
 8007468:	a201      	add	r2, pc, #4	@ (adr r2, 8007470 <UART_SetConfig+0xb4>)
 800746a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746e:	bf00      	nop
 8007470:	08007515 	.word	0x08007515
 8007474:	08007545 	.word	0x08007545
 8007478:	08007545 	.word	0x08007545
 800747c:	08007545 	.word	0x08007545
 8007480:	08007545 	.word	0x08007545
 8007484:	08007545 	.word	0x08007545
 8007488:	08007545 	.word	0x08007545
 800748c:	08007545 	.word	0x08007545
 8007490:	0800751d 	.word	0x0800751d
 8007494:	08007545 	.word	0x08007545
 8007498:	08007545 	.word	0x08007545
 800749c:	08007545 	.word	0x08007545
 80074a0:	08007545 	.word	0x08007545
 80074a4:	08007545 	.word	0x08007545
 80074a8:	08007545 	.word	0x08007545
 80074ac:	08007545 	.word	0x08007545
 80074b0:	08007525 	.word	0x08007525
 80074b4:	08007545 	.word	0x08007545
 80074b8:	08007545 	.word	0x08007545
 80074bc:	08007545 	.word	0x08007545
 80074c0:	08007545 	.word	0x08007545
 80074c4:	08007545 	.word	0x08007545
 80074c8:	08007545 	.word	0x08007545
 80074cc:	08007545 	.word	0x08007545
 80074d0:	0800752d 	.word	0x0800752d
 80074d4:	08007545 	.word	0x08007545
 80074d8:	08007545 	.word	0x08007545
 80074dc:	08007545 	.word	0x08007545
 80074e0:	08007545 	.word	0x08007545
 80074e4:	08007545 	.word	0x08007545
 80074e8:	08007545 	.word	0x08007545
 80074ec:	08007545 	.word	0x08007545
 80074f0:	08007535 	.word	0x08007535
 80074f4:	08007545 	.word	0x08007545
 80074f8:	08007545 	.word	0x08007545
 80074fc:	08007545 	.word	0x08007545
 8007500:	08007545 	.word	0x08007545
 8007504:	08007545 	.word	0x08007545
 8007508:	08007545 	.word	0x08007545
 800750c:	08007545 	.word	0x08007545
 8007510:	0800753d 	.word	0x0800753d
 8007514:	2301      	movs	r3, #1
 8007516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800751a:	e222      	b.n	8007962 <UART_SetConfig+0x5a6>
 800751c:	2304      	movs	r3, #4
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007522:	e21e      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007524:	2308      	movs	r3, #8
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800752a:	e21a      	b.n	8007962 <UART_SetConfig+0x5a6>
 800752c:	2310      	movs	r3, #16
 800752e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007532:	e216      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007534:	2320      	movs	r3, #32
 8007536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800753a:	e212      	b.n	8007962 <UART_SetConfig+0x5a6>
 800753c:	2340      	movs	r3, #64	@ 0x40
 800753e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007542:	e20e      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007544:	2380      	movs	r3, #128	@ 0x80
 8007546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800754a:	e20a      	b.n	8007962 <UART_SetConfig+0x5a6>
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a69      	ldr	r2, [pc, #420]	@ (80076f8 <UART_SetConfig+0x33c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d130      	bne.n	80075b8 <UART_SetConfig+0x1fc>
 8007556:	4b67      	ldr	r3, [pc, #412]	@ (80076f4 <UART_SetConfig+0x338>)
 8007558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800755a:	f003 0307 	and.w	r3, r3, #7
 800755e:	2b05      	cmp	r3, #5
 8007560:	d826      	bhi.n	80075b0 <UART_SetConfig+0x1f4>
 8007562:	a201      	add	r2, pc, #4	@ (adr r2, 8007568 <UART_SetConfig+0x1ac>)
 8007564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007568:	08007581 	.word	0x08007581
 800756c:	08007589 	.word	0x08007589
 8007570:	08007591 	.word	0x08007591
 8007574:	08007599 	.word	0x08007599
 8007578:	080075a1 	.word	0x080075a1
 800757c:	080075a9 	.word	0x080075a9
 8007580:	2300      	movs	r3, #0
 8007582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007586:	e1ec      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007588:	2304      	movs	r3, #4
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800758e:	e1e8      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007590:	2308      	movs	r3, #8
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007596:	e1e4      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007598:	2310      	movs	r3, #16
 800759a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759e:	e1e0      	b.n	8007962 <UART_SetConfig+0x5a6>
 80075a0:	2320      	movs	r3, #32
 80075a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a6:	e1dc      	b.n	8007962 <UART_SetConfig+0x5a6>
 80075a8:	2340      	movs	r3, #64	@ 0x40
 80075aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ae:	e1d8      	b.n	8007962 <UART_SetConfig+0x5a6>
 80075b0:	2380      	movs	r3, #128	@ 0x80
 80075b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075b6:	e1d4      	b.n	8007962 <UART_SetConfig+0x5a6>
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a4f      	ldr	r2, [pc, #316]	@ (80076fc <UART_SetConfig+0x340>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d130      	bne.n	8007624 <UART_SetConfig+0x268>
 80075c2:	4b4c      	ldr	r3, [pc, #304]	@ (80076f4 <UART_SetConfig+0x338>)
 80075c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075c6:	f003 0307 	and.w	r3, r3, #7
 80075ca:	2b05      	cmp	r3, #5
 80075cc:	d826      	bhi.n	800761c <UART_SetConfig+0x260>
 80075ce:	a201      	add	r2, pc, #4	@ (adr r2, 80075d4 <UART_SetConfig+0x218>)
 80075d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d4:	080075ed 	.word	0x080075ed
 80075d8:	080075f5 	.word	0x080075f5
 80075dc:	080075fd 	.word	0x080075fd
 80075e0:	08007605 	.word	0x08007605
 80075e4:	0800760d 	.word	0x0800760d
 80075e8:	08007615 	.word	0x08007615
 80075ec:	2300      	movs	r3, #0
 80075ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075f2:	e1b6      	b.n	8007962 <UART_SetConfig+0x5a6>
 80075f4:	2304      	movs	r3, #4
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075fa:	e1b2      	b.n	8007962 <UART_SetConfig+0x5a6>
 80075fc:	2308      	movs	r3, #8
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007602:	e1ae      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007604:	2310      	movs	r3, #16
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760a:	e1aa      	b.n	8007962 <UART_SetConfig+0x5a6>
 800760c:	2320      	movs	r3, #32
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007612:	e1a6      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007614:	2340      	movs	r3, #64	@ 0x40
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761a:	e1a2      	b.n	8007962 <UART_SetConfig+0x5a6>
 800761c:	2380      	movs	r3, #128	@ 0x80
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007622:	e19e      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a35      	ldr	r2, [pc, #212]	@ (8007700 <UART_SetConfig+0x344>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d130      	bne.n	8007690 <UART_SetConfig+0x2d4>
 800762e:	4b31      	ldr	r3, [pc, #196]	@ (80076f4 <UART_SetConfig+0x338>)
 8007630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007632:	f003 0307 	and.w	r3, r3, #7
 8007636:	2b05      	cmp	r3, #5
 8007638:	d826      	bhi.n	8007688 <UART_SetConfig+0x2cc>
 800763a:	a201      	add	r2, pc, #4	@ (adr r2, 8007640 <UART_SetConfig+0x284>)
 800763c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007640:	08007659 	.word	0x08007659
 8007644:	08007661 	.word	0x08007661
 8007648:	08007669 	.word	0x08007669
 800764c:	08007671 	.word	0x08007671
 8007650:	08007679 	.word	0x08007679
 8007654:	08007681 	.word	0x08007681
 8007658:	2300      	movs	r3, #0
 800765a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800765e:	e180      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007660:	2304      	movs	r3, #4
 8007662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007666:	e17c      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007668:	2308      	movs	r3, #8
 800766a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800766e:	e178      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007670:	2310      	movs	r3, #16
 8007672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007676:	e174      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007678:	2320      	movs	r3, #32
 800767a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800767e:	e170      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007680:	2340      	movs	r3, #64	@ 0x40
 8007682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007686:	e16c      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007688:	2380      	movs	r3, #128	@ 0x80
 800768a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800768e:	e168      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a1b      	ldr	r2, [pc, #108]	@ (8007704 <UART_SetConfig+0x348>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d142      	bne.n	8007720 <UART_SetConfig+0x364>
 800769a:	4b16      	ldr	r3, [pc, #88]	@ (80076f4 <UART_SetConfig+0x338>)
 800769c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800769e:	f003 0307 	and.w	r3, r3, #7
 80076a2:	2b05      	cmp	r3, #5
 80076a4:	d838      	bhi.n	8007718 <UART_SetConfig+0x35c>
 80076a6:	a201      	add	r2, pc, #4	@ (adr r2, 80076ac <UART_SetConfig+0x2f0>)
 80076a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ac:	080076c5 	.word	0x080076c5
 80076b0:	080076cd 	.word	0x080076cd
 80076b4:	080076d5 	.word	0x080076d5
 80076b8:	080076dd 	.word	0x080076dd
 80076bc:	08007709 	.word	0x08007709
 80076c0:	08007711 	.word	0x08007711
 80076c4:	2300      	movs	r3, #0
 80076c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ca:	e14a      	b.n	8007962 <UART_SetConfig+0x5a6>
 80076cc:	2304      	movs	r3, #4
 80076ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076d2:	e146      	b.n	8007962 <UART_SetConfig+0x5a6>
 80076d4:	2308      	movs	r3, #8
 80076d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076da:	e142      	b.n	8007962 <UART_SetConfig+0x5a6>
 80076dc:	2310      	movs	r3, #16
 80076de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076e2:	e13e      	b.n	8007962 <UART_SetConfig+0x5a6>
 80076e4:	cfff69f3 	.word	0xcfff69f3
 80076e8:	58000c00 	.word	0x58000c00
 80076ec:	11fff4ff 	.word	0x11fff4ff
 80076f0:	40011000 	.word	0x40011000
 80076f4:	58024400 	.word	0x58024400
 80076f8:	40004400 	.word	0x40004400
 80076fc:	40004800 	.word	0x40004800
 8007700:	40004c00 	.word	0x40004c00
 8007704:	40005000 	.word	0x40005000
 8007708:	2320      	movs	r3, #32
 800770a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800770e:	e128      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007710:	2340      	movs	r3, #64	@ 0x40
 8007712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007716:	e124      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007718:	2380      	movs	r3, #128	@ 0x80
 800771a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800771e:	e120      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4acb      	ldr	r2, [pc, #812]	@ (8007a54 <UART_SetConfig+0x698>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d176      	bne.n	8007818 <UART_SetConfig+0x45c>
 800772a:	4bcb      	ldr	r3, [pc, #812]	@ (8007a58 <UART_SetConfig+0x69c>)
 800772c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800772e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007732:	2b28      	cmp	r3, #40	@ 0x28
 8007734:	d86c      	bhi.n	8007810 <UART_SetConfig+0x454>
 8007736:	a201      	add	r2, pc, #4	@ (adr r2, 800773c <UART_SetConfig+0x380>)
 8007738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773c:	080077e1 	.word	0x080077e1
 8007740:	08007811 	.word	0x08007811
 8007744:	08007811 	.word	0x08007811
 8007748:	08007811 	.word	0x08007811
 800774c:	08007811 	.word	0x08007811
 8007750:	08007811 	.word	0x08007811
 8007754:	08007811 	.word	0x08007811
 8007758:	08007811 	.word	0x08007811
 800775c:	080077e9 	.word	0x080077e9
 8007760:	08007811 	.word	0x08007811
 8007764:	08007811 	.word	0x08007811
 8007768:	08007811 	.word	0x08007811
 800776c:	08007811 	.word	0x08007811
 8007770:	08007811 	.word	0x08007811
 8007774:	08007811 	.word	0x08007811
 8007778:	08007811 	.word	0x08007811
 800777c:	080077f1 	.word	0x080077f1
 8007780:	08007811 	.word	0x08007811
 8007784:	08007811 	.word	0x08007811
 8007788:	08007811 	.word	0x08007811
 800778c:	08007811 	.word	0x08007811
 8007790:	08007811 	.word	0x08007811
 8007794:	08007811 	.word	0x08007811
 8007798:	08007811 	.word	0x08007811
 800779c:	080077f9 	.word	0x080077f9
 80077a0:	08007811 	.word	0x08007811
 80077a4:	08007811 	.word	0x08007811
 80077a8:	08007811 	.word	0x08007811
 80077ac:	08007811 	.word	0x08007811
 80077b0:	08007811 	.word	0x08007811
 80077b4:	08007811 	.word	0x08007811
 80077b8:	08007811 	.word	0x08007811
 80077bc:	08007801 	.word	0x08007801
 80077c0:	08007811 	.word	0x08007811
 80077c4:	08007811 	.word	0x08007811
 80077c8:	08007811 	.word	0x08007811
 80077cc:	08007811 	.word	0x08007811
 80077d0:	08007811 	.word	0x08007811
 80077d4:	08007811 	.word	0x08007811
 80077d8:	08007811 	.word	0x08007811
 80077dc:	08007809 	.word	0x08007809
 80077e0:	2301      	movs	r3, #1
 80077e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077e6:	e0bc      	b.n	8007962 <UART_SetConfig+0x5a6>
 80077e8:	2304      	movs	r3, #4
 80077ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ee:	e0b8      	b.n	8007962 <UART_SetConfig+0x5a6>
 80077f0:	2308      	movs	r3, #8
 80077f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077f6:	e0b4      	b.n	8007962 <UART_SetConfig+0x5a6>
 80077f8:	2310      	movs	r3, #16
 80077fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077fe:	e0b0      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007800:	2320      	movs	r3, #32
 8007802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007806:	e0ac      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007808:	2340      	movs	r3, #64	@ 0x40
 800780a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800780e:	e0a8      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007810:	2380      	movs	r3, #128	@ 0x80
 8007812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007816:	e0a4      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a8f      	ldr	r2, [pc, #572]	@ (8007a5c <UART_SetConfig+0x6a0>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d130      	bne.n	8007884 <UART_SetConfig+0x4c8>
 8007822:	4b8d      	ldr	r3, [pc, #564]	@ (8007a58 <UART_SetConfig+0x69c>)
 8007824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007826:	f003 0307 	and.w	r3, r3, #7
 800782a:	2b05      	cmp	r3, #5
 800782c:	d826      	bhi.n	800787c <UART_SetConfig+0x4c0>
 800782e:	a201      	add	r2, pc, #4	@ (adr r2, 8007834 <UART_SetConfig+0x478>)
 8007830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007834:	0800784d 	.word	0x0800784d
 8007838:	08007855 	.word	0x08007855
 800783c:	0800785d 	.word	0x0800785d
 8007840:	08007865 	.word	0x08007865
 8007844:	0800786d 	.word	0x0800786d
 8007848:	08007875 	.word	0x08007875
 800784c:	2300      	movs	r3, #0
 800784e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007852:	e086      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007854:	2304      	movs	r3, #4
 8007856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785a:	e082      	b.n	8007962 <UART_SetConfig+0x5a6>
 800785c:	2308      	movs	r3, #8
 800785e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007862:	e07e      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007864:	2310      	movs	r3, #16
 8007866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786a:	e07a      	b.n	8007962 <UART_SetConfig+0x5a6>
 800786c:	2320      	movs	r3, #32
 800786e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007872:	e076      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007874:	2340      	movs	r3, #64	@ 0x40
 8007876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787a:	e072      	b.n	8007962 <UART_SetConfig+0x5a6>
 800787c:	2380      	movs	r3, #128	@ 0x80
 800787e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007882:	e06e      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a75      	ldr	r2, [pc, #468]	@ (8007a60 <UART_SetConfig+0x6a4>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d130      	bne.n	80078f0 <UART_SetConfig+0x534>
 800788e:	4b72      	ldr	r3, [pc, #456]	@ (8007a58 <UART_SetConfig+0x69c>)
 8007890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007892:	f003 0307 	and.w	r3, r3, #7
 8007896:	2b05      	cmp	r3, #5
 8007898:	d826      	bhi.n	80078e8 <UART_SetConfig+0x52c>
 800789a:	a201      	add	r2, pc, #4	@ (adr r2, 80078a0 <UART_SetConfig+0x4e4>)
 800789c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a0:	080078b9 	.word	0x080078b9
 80078a4:	080078c1 	.word	0x080078c1
 80078a8:	080078c9 	.word	0x080078c9
 80078ac:	080078d1 	.word	0x080078d1
 80078b0:	080078d9 	.word	0x080078d9
 80078b4:	080078e1 	.word	0x080078e1
 80078b8:	2300      	movs	r3, #0
 80078ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078be:	e050      	b.n	8007962 <UART_SetConfig+0x5a6>
 80078c0:	2304      	movs	r3, #4
 80078c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078c6:	e04c      	b.n	8007962 <UART_SetConfig+0x5a6>
 80078c8:	2308      	movs	r3, #8
 80078ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ce:	e048      	b.n	8007962 <UART_SetConfig+0x5a6>
 80078d0:	2310      	movs	r3, #16
 80078d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078d6:	e044      	b.n	8007962 <UART_SetConfig+0x5a6>
 80078d8:	2320      	movs	r3, #32
 80078da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078de:	e040      	b.n	8007962 <UART_SetConfig+0x5a6>
 80078e0:	2340      	movs	r3, #64	@ 0x40
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078e6:	e03c      	b.n	8007962 <UART_SetConfig+0x5a6>
 80078e8:	2380      	movs	r3, #128	@ 0x80
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ee:	e038      	b.n	8007962 <UART_SetConfig+0x5a6>
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a5b      	ldr	r2, [pc, #364]	@ (8007a64 <UART_SetConfig+0x6a8>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d130      	bne.n	800795c <UART_SetConfig+0x5a0>
 80078fa:	4b57      	ldr	r3, [pc, #348]	@ (8007a58 <UART_SetConfig+0x69c>)
 80078fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078fe:	f003 0307 	and.w	r3, r3, #7
 8007902:	2b05      	cmp	r3, #5
 8007904:	d826      	bhi.n	8007954 <UART_SetConfig+0x598>
 8007906:	a201      	add	r2, pc, #4	@ (adr r2, 800790c <UART_SetConfig+0x550>)
 8007908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790c:	08007925 	.word	0x08007925
 8007910:	0800792d 	.word	0x0800792d
 8007914:	08007935 	.word	0x08007935
 8007918:	0800793d 	.word	0x0800793d
 800791c:	08007945 	.word	0x08007945
 8007920:	0800794d 	.word	0x0800794d
 8007924:	2302      	movs	r3, #2
 8007926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800792a:	e01a      	b.n	8007962 <UART_SetConfig+0x5a6>
 800792c:	2304      	movs	r3, #4
 800792e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007932:	e016      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007934:	2308      	movs	r3, #8
 8007936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793a:	e012      	b.n	8007962 <UART_SetConfig+0x5a6>
 800793c:	2310      	movs	r3, #16
 800793e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007942:	e00e      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007944:	2320      	movs	r3, #32
 8007946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800794a:	e00a      	b.n	8007962 <UART_SetConfig+0x5a6>
 800794c:	2340      	movs	r3, #64	@ 0x40
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007952:	e006      	b.n	8007962 <UART_SetConfig+0x5a6>
 8007954:	2380      	movs	r3, #128	@ 0x80
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795a:	e002      	b.n	8007962 <UART_SetConfig+0x5a6>
 800795c:	2380      	movs	r3, #128	@ 0x80
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a3f      	ldr	r2, [pc, #252]	@ (8007a64 <UART_SetConfig+0x6a8>)
 8007968:	4293      	cmp	r3, r2
 800796a:	f040 80f8 	bne.w	8007b5e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800796e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007972:	2b20      	cmp	r3, #32
 8007974:	dc46      	bgt.n	8007a04 <UART_SetConfig+0x648>
 8007976:	2b02      	cmp	r3, #2
 8007978:	f2c0 8082 	blt.w	8007a80 <UART_SetConfig+0x6c4>
 800797c:	3b02      	subs	r3, #2
 800797e:	2b1e      	cmp	r3, #30
 8007980:	d87e      	bhi.n	8007a80 <UART_SetConfig+0x6c4>
 8007982:	a201      	add	r2, pc, #4	@ (adr r2, 8007988 <UART_SetConfig+0x5cc>)
 8007984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007988:	08007a0b 	.word	0x08007a0b
 800798c:	08007a81 	.word	0x08007a81
 8007990:	08007a13 	.word	0x08007a13
 8007994:	08007a81 	.word	0x08007a81
 8007998:	08007a81 	.word	0x08007a81
 800799c:	08007a81 	.word	0x08007a81
 80079a0:	08007a23 	.word	0x08007a23
 80079a4:	08007a81 	.word	0x08007a81
 80079a8:	08007a81 	.word	0x08007a81
 80079ac:	08007a81 	.word	0x08007a81
 80079b0:	08007a81 	.word	0x08007a81
 80079b4:	08007a81 	.word	0x08007a81
 80079b8:	08007a81 	.word	0x08007a81
 80079bc:	08007a81 	.word	0x08007a81
 80079c0:	08007a33 	.word	0x08007a33
 80079c4:	08007a81 	.word	0x08007a81
 80079c8:	08007a81 	.word	0x08007a81
 80079cc:	08007a81 	.word	0x08007a81
 80079d0:	08007a81 	.word	0x08007a81
 80079d4:	08007a81 	.word	0x08007a81
 80079d8:	08007a81 	.word	0x08007a81
 80079dc:	08007a81 	.word	0x08007a81
 80079e0:	08007a81 	.word	0x08007a81
 80079e4:	08007a81 	.word	0x08007a81
 80079e8:	08007a81 	.word	0x08007a81
 80079ec:	08007a81 	.word	0x08007a81
 80079f0:	08007a81 	.word	0x08007a81
 80079f4:	08007a81 	.word	0x08007a81
 80079f8:	08007a81 	.word	0x08007a81
 80079fc:	08007a81 	.word	0x08007a81
 8007a00:	08007a73 	.word	0x08007a73
 8007a04:	2b40      	cmp	r3, #64	@ 0x40
 8007a06:	d037      	beq.n	8007a78 <UART_SetConfig+0x6bc>
 8007a08:	e03a      	b.n	8007a80 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a0a:	f7fe fd87 	bl	800651c <HAL_RCCEx_GetD3PCLK1Freq>
 8007a0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a10:	e03c      	b.n	8007a8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fe fd96 	bl	8006548 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a20:	e034      	b.n	8007a8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a22:	f107 0318 	add.w	r3, r7, #24
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fe fee2 	bl	80067f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a30:	e02c      	b.n	8007a8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a32:	4b09      	ldr	r3, [pc, #36]	@ (8007a58 <UART_SetConfig+0x69c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0320 	and.w	r3, r3, #32
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d016      	beq.n	8007a6c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a3e:	4b06      	ldr	r3, [pc, #24]	@ (8007a58 <UART_SetConfig+0x69c>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	08db      	lsrs	r3, r3, #3
 8007a44:	f003 0303 	and.w	r3, r3, #3
 8007a48:	4a07      	ldr	r2, [pc, #28]	@ (8007a68 <UART_SetConfig+0x6ac>)
 8007a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a50:	e01c      	b.n	8007a8c <UART_SetConfig+0x6d0>
 8007a52:	bf00      	nop
 8007a54:	40011400 	.word	0x40011400
 8007a58:	58024400 	.word	0x58024400
 8007a5c:	40007800 	.word	0x40007800
 8007a60:	40007c00 	.word	0x40007c00
 8007a64:	58000c00 	.word	0x58000c00
 8007a68:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007a6c:	4b9d      	ldr	r3, [pc, #628]	@ (8007ce4 <UART_SetConfig+0x928>)
 8007a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a70:	e00c      	b.n	8007a8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a72:	4b9d      	ldr	r3, [pc, #628]	@ (8007ce8 <UART_SetConfig+0x92c>)
 8007a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a76:	e009      	b.n	8007a8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a7e:	e005      	b.n	8007a8c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007a8a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 81de 	beq.w	8007e50 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a98:	4a94      	ldr	r2, [pc, #592]	@ (8007cec <UART_SetConfig+0x930>)
 8007a9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007aa6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	4613      	mov	r3, r2
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	4413      	add	r3, r2
 8007ab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d305      	bcc.n	8007ac4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007abe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d903      	bls.n	8007acc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007aca:	e1c1      	b.n	8007e50 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ace:	2200      	movs	r2, #0
 8007ad0:	60bb      	str	r3, [r7, #8]
 8007ad2:	60fa      	str	r2, [r7, #12]
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad8:	4a84      	ldr	r2, [pc, #528]	@ (8007cec <UART_SetConfig+0x930>)
 8007ada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	603b      	str	r3, [r7, #0]
 8007ae4:	607a      	str	r2, [r7, #4]
 8007ae6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007aee:	f7f8 fbf3 	bl	80002d8 <__aeabi_uldivmod>
 8007af2:	4602      	mov	r2, r0
 8007af4:	460b      	mov	r3, r1
 8007af6:	4610      	mov	r0, r2
 8007af8:	4619      	mov	r1, r3
 8007afa:	f04f 0200 	mov.w	r2, #0
 8007afe:	f04f 0300 	mov.w	r3, #0
 8007b02:	020b      	lsls	r3, r1, #8
 8007b04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b08:	0202      	lsls	r2, r0, #8
 8007b0a:	6979      	ldr	r1, [r7, #20]
 8007b0c:	6849      	ldr	r1, [r1, #4]
 8007b0e:	0849      	lsrs	r1, r1, #1
 8007b10:	2000      	movs	r0, #0
 8007b12:	460c      	mov	r4, r1
 8007b14:	4605      	mov	r5, r0
 8007b16:	eb12 0804 	adds.w	r8, r2, r4
 8007b1a:	eb43 0905 	adc.w	r9, r3, r5
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	469a      	mov	sl, r3
 8007b26:	4693      	mov	fp, r2
 8007b28:	4652      	mov	r2, sl
 8007b2a:	465b      	mov	r3, fp
 8007b2c:	4640      	mov	r0, r8
 8007b2e:	4649      	mov	r1, r9
 8007b30:	f7f8 fbd2 	bl	80002d8 <__aeabi_uldivmod>
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	4613      	mov	r3, r2
 8007b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b42:	d308      	bcc.n	8007b56 <UART_SetConfig+0x79a>
 8007b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b4a:	d204      	bcs.n	8007b56 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b52:	60da      	str	r2, [r3, #12]
 8007b54:	e17c      	b.n	8007e50 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b5c:	e178      	b.n	8007e50 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	69db      	ldr	r3, [r3, #28]
 8007b62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b66:	f040 80c5 	bne.w	8007cf4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007b6a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007b6e:	2b20      	cmp	r3, #32
 8007b70:	dc48      	bgt.n	8007c04 <UART_SetConfig+0x848>
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	db7b      	blt.n	8007c6e <UART_SetConfig+0x8b2>
 8007b76:	2b20      	cmp	r3, #32
 8007b78:	d879      	bhi.n	8007c6e <UART_SetConfig+0x8b2>
 8007b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b80 <UART_SetConfig+0x7c4>)
 8007b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b80:	08007c0b 	.word	0x08007c0b
 8007b84:	08007c13 	.word	0x08007c13
 8007b88:	08007c6f 	.word	0x08007c6f
 8007b8c:	08007c6f 	.word	0x08007c6f
 8007b90:	08007c1b 	.word	0x08007c1b
 8007b94:	08007c6f 	.word	0x08007c6f
 8007b98:	08007c6f 	.word	0x08007c6f
 8007b9c:	08007c6f 	.word	0x08007c6f
 8007ba0:	08007c2b 	.word	0x08007c2b
 8007ba4:	08007c6f 	.word	0x08007c6f
 8007ba8:	08007c6f 	.word	0x08007c6f
 8007bac:	08007c6f 	.word	0x08007c6f
 8007bb0:	08007c6f 	.word	0x08007c6f
 8007bb4:	08007c6f 	.word	0x08007c6f
 8007bb8:	08007c6f 	.word	0x08007c6f
 8007bbc:	08007c6f 	.word	0x08007c6f
 8007bc0:	08007c3b 	.word	0x08007c3b
 8007bc4:	08007c6f 	.word	0x08007c6f
 8007bc8:	08007c6f 	.word	0x08007c6f
 8007bcc:	08007c6f 	.word	0x08007c6f
 8007bd0:	08007c6f 	.word	0x08007c6f
 8007bd4:	08007c6f 	.word	0x08007c6f
 8007bd8:	08007c6f 	.word	0x08007c6f
 8007bdc:	08007c6f 	.word	0x08007c6f
 8007be0:	08007c6f 	.word	0x08007c6f
 8007be4:	08007c6f 	.word	0x08007c6f
 8007be8:	08007c6f 	.word	0x08007c6f
 8007bec:	08007c6f 	.word	0x08007c6f
 8007bf0:	08007c6f 	.word	0x08007c6f
 8007bf4:	08007c6f 	.word	0x08007c6f
 8007bf8:	08007c6f 	.word	0x08007c6f
 8007bfc:	08007c6f 	.word	0x08007c6f
 8007c00:	08007c61 	.word	0x08007c61
 8007c04:	2b40      	cmp	r3, #64	@ 0x40
 8007c06:	d02e      	beq.n	8007c66 <UART_SetConfig+0x8aa>
 8007c08:	e031      	b.n	8007c6e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c0a:	f7fc fcd1 	bl	80045b0 <HAL_RCC_GetPCLK1Freq>
 8007c0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c10:	e033      	b.n	8007c7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c12:	f7fc fce3 	bl	80045dc <HAL_RCC_GetPCLK2Freq>
 8007c16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c18:	e02f      	b.n	8007c7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fe fc92 	bl	8006548 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c28:	e027      	b.n	8007c7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c2a:	f107 0318 	add.w	r3, r7, #24
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe fdde 	bl	80067f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c38:	e01f      	b.n	8007c7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8007cf0 <UART_SetConfig+0x934>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0320 	and.w	r3, r3, #32
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d009      	beq.n	8007c5a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c46:	4b2a      	ldr	r3, [pc, #168]	@ (8007cf0 <UART_SetConfig+0x934>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	08db      	lsrs	r3, r3, #3
 8007c4c:	f003 0303 	and.w	r3, r3, #3
 8007c50:	4a24      	ldr	r2, [pc, #144]	@ (8007ce4 <UART_SetConfig+0x928>)
 8007c52:	fa22 f303 	lsr.w	r3, r2, r3
 8007c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c58:	e00f      	b.n	8007c7a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007c5a:	4b22      	ldr	r3, [pc, #136]	@ (8007ce4 <UART_SetConfig+0x928>)
 8007c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c5e:	e00c      	b.n	8007c7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c60:	4b21      	ldr	r3, [pc, #132]	@ (8007ce8 <UART_SetConfig+0x92c>)
 8007c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c64:	e009      	b.n	8007c7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c6c:	e005      	b.n	8007c7a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007c78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 80e7 	beq.w	8007e50 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c86:	4a19      	ldr	r2, [pc, #100]	@ (8007cec <UART_SetConfig+0x930>)
 8007c88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c90:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c94:	005a      	lsls	r2, r3, #1
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	085b      	lsrs	r3, r3, #1
 8007c9c:	441a      	add	r2, r3
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007caa:	2b0f      	cmp	r3, #15
 8007cac:	d916      	bls.n	8007cdc <UART_SetConfig+0x920>
 8007cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cb4:	d212      	bcs.n	8007cdc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	f023 030f 	bic.w	r3, r3, #15
 8007cbe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc2:	085b      	lsrs	r3, r3, #1
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007cd8:	60da      	str	r2, [r3, #12]
 8007cda:	e0b9      	b.n	8007e50 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007ce2:	e0b5      	b.n	8007e50 <UART_SetConfig+0xa94>
 8007ce4:	03d09000 	.word	0x03d09000
 8007ce8:	003d0900 	.word	0x003d0900
 8007cec:	0800855c 	.word	0x0800855c
 8007cf0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cf4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007cf8:	2b20      	cmp	r3, #32
 8007cfa:	dc49      	bgt.n	8007d90 <UART_SetConfig+0x9d4>
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	db7c      	blt.n	8007dfa <UART_SetConfig+0xa3e>
 8007d00:	2b20      	cmp	r3, #32
 8007d02:	d87a      	bhi.n	8007dfa <UART_SetConfig+0xa3e>
 8007d04:	a201      	add	r2, pc, #4	@ (adr r2, 8007d0c <UART_SetConfig+0x950>)
 8007d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0a:	bf00      	nop
 8007d0c:	08007d97 	.word	0x08007d97
 8007d10:	08007d9f 	.word	0x08007d9f
 8007d14:	08007dfb 	.word	0x08007dfb
 8007d18:	08007dfb 	.word	0x08007dfb
 8007d1c:	08007da7 	.word	0x08007da7
 8007d20:	08007dfb 	.word	0x08007dfb
 8007d24:	08007dfb 	.word	0x08007dfb
 8007d28:	08007dfb 	.word	0x08007dfb
 8007d2c:	08007db7 	.word	0x08007db7
 8007d30:	08007dfb 	.word	0x08007dfb
 8007d34:	08007dfb 	.word	0x08007dfb
 8007d38:	08007dfb 	.word	0x08007dfb
 8007d3c:	08007dfb 	.word	0x08007dfb
 8007d40:	08007dfb 	.word	0x08007dfb
 8007d44:	08007dfb 	.word	0x08007dfb
 8007d48:	08007dfb 	.word	0x08007dfb
 8007d4c:	08007dc7 	.word	0x08007dc7
 8007d50:	08007dfb 	.word	0x08007dfb
 8007d54:	08007dfb 	.word	0x08007dfb
 8007d58:	08007dfb 	.word	0x08007dfb
 8007d5c:	08007dfb 	.word	0x08007dfb
 8007d60:	08007dfb 	.word	0x08007dfb
 8007d64:	08007dfb 	.word	0x08007dfb
 8007d68:	08007dfb 	.word	0x08007dfb
 8007d6c:	08007dfb 	.word	0x08007dfb
 8007d70:	08007dfb 	.word	0x08007dfb
 8007d74:	08007dfb 	.word	0x08007dfb
 8007d78:	08007dfb 	.word	0x08007dfb
 8007d7c:	08007dfb 	.word	0x08007dfb
 8007d80:	08007dfb 	.word	0x08007dfb
 8007d84:	08007dfb 	.word	0x08007dfb
 8007d88:	08007dfb 	.word	0x08007dfb
 8007d8c:	08007ded 	.word	0x08007ded
 8007d90:	2b40      	cmp	r3, #64	@ 0x40
 8007d92:	d02e      	beq.n	8007df2 <UART_SetConfig+0xa36>
 8007d94:	e031      	b.n	8007dfa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d96:	f7fc fc0b 	bl	80045b0 <HAL_RCC_GetPCLK1Freq>
 8007d9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d9c:	e033      	b.n	8007e06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d9e:	f7fc fc1d 	bl	80045dc <HAL_RCC_GetPCLK2Freq>
 8007da2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007da4:	e02f      	b.n	8007e06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007da6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe fbcc 	bl	8006548 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007db4:	e027      	b.n	8007e06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007db6:	f107 0318 	add.w	r3, r7, #24
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fe fd18 	bl	80067f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dc4:	e01f      	b.n	8007e06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8007e7c <UART_SetConfig+0xac0>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d009      	beq.n	8007de6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8007e7c <UART_SetConfig+0xac0>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	08db      	lsrs	r3, r3, #3
 8007dd8:	f003 0303 	and.w	r3, r3, #3
 8007ddc:	4a28      	ldr	r2, [pc, #160]	@ (8007e80 <UART_SetConfig+0xac4>)
 8007dde:	fa22 f303 	lsr.w	r3, r2, r3
 8007de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007de4:	e00f      	b.n	8007e06 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007de6:	4b26      	ldr	r3, [pc, #152]	@ (8007e80 <UART_SetConfig+0xac4>)
 8007de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dea:	e00c      	b.n	8007e06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007dec:	4b25      	ldr	r3, [pc, #148]	@ (8007e84 <UART_SetConfig+0xac8>)
 8007dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007df0:	e009      	b.n	8007e06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007df2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007df8:	e005      	b.n	8007e06 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007e04:	bf00      	nop
    }

    if (pclk != 0U)
 8007e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d021      	beq.n	8007e50 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e10:	4a1d      	ldr	r2, [pc, #116]	@ (8007e88 <UART_SetConfig+0xacc>)
 8007e12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e16:	461a      	mov	r2, r3
 8007e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	085b      	lsrs	r3, r3, #1
 8007e24:	441a      	add	r2, r3
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e32:	2b0f      	cmp	r3, #15
 8007e34:	d909      	bls.n	8007e4a <UART_SetConfig+0xa8e>
 8007e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e3c:	d205      	bcs.n	8007e4a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	60da      	str	r2, [r3, #12]
 8007e48:	e002      	b.n	8007e50 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	2200      	movs	r2, #0
 8007e64:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007e6c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3748      	adds	r7, #72	@ 0x48
 8007e74:	46bd      	mov	sp, r7
 8007e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e7a:	bf00      	nop
 8007e7c:	58024400 	.word	0x58024400
 8007e80:	03d09000 	.word	0x03d09000
 8007e84:	003d0900 	.word	0x003d0900
 8007e88:	0800855c 	.word	0x0800855c

08007e8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e98:	f003 0308 	and.w	r3, r3, #8
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00a      	beq.n	8007eb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00a      	beq.n	8007ed8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007edc:	f003 0302 	and.w	r3, r3, #2
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00a      	beq.n	8007efa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	430a      	orrs	r2, r1
 8007ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007efe:	f003 0304 	and.w	r3, r3, #4
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00a      	beq.n	8007f1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f20:	f003 0310 	and.w	r3, r3, #16
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00a      	beq.n	8007f3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f42:	f003 0320 	and.w	r3, r3, #32
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00a      	beq.n	8007f60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d01a      	beq.n	8007fa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f8a:	d10a      	bne.n	8007fa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	430a      	orrs	r2, r1
 8007fa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00a      	beq.n	8007fc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	430a      	orrs	r2, r1
 8007fc2:	605a      	str	r2, [r3, #4]
  }
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b098      	sub	sp, #96	@ 0x60
 8007fd4:	af02      	add	r7, sp, #8
 8007fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fe0:	f7f9 fa98 	bl	8001514 <HAL_GetTick>
 8007fe4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 0308 	and.w	r3, r3, #8
 8007ff0:	2b08      	cmp	r3, #8
 8007ff2:	d12f      	bne.n	8008054 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ff4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f88e 	bl	8008124 <UART_WaitOnFlagUntilTimeout>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d022      	beq.n	8008054 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008016:	e853 3f00 	ldrex	r3, [r3]
 800801a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800801c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800801e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008022:	653b      	str	r3, [r7, #80]	@ 0x50
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	461a      	mov	r2, r3
 800802a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800802c:	647b      	str	r3, [r7, #68]	@ 0x44
 800802e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008030:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008032:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008034:	e841 2300 	strex	r3, r2, [r1]
 8008038:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800803a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1e6      	bne.n	800800e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2220      	movs	r2, #32
 8008044:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e063      	b.n	800811c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0304 	and.w	r3, r3, #4
 800805e:	2b04      	cmp	r3, #4
 8008060:	d149      	bne.n	80080f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008062:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800806a:	2200      	movs	r2, #0
 800806c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f857 	bl	8008124 <UART_WaitOnFlagUntilTimeout>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d03c      	beq.n	80080f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008084:	e853 3f00 	ldrex	r3, [r3]
 8008088:	623b      	str	r3, [r7, #32]
   return(result);
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008090:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800809a:	633b      	str	r3, [r7, #48]	@ 0x30
 800809c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1e6      	bne.n	800807c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3308      	adds	r3, #8
 80080b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	e853 3f00 	ldrex	r3, [r3]
 80080bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f023 0301 	bic.w	r3, r3, #1
 80080c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3308      	adds	r3, #8
 80080cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080ce:	61fa      	str	r2, [r7, #28]
 80080d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d2:	69b9      	ldr	r1, [r7, #24]
 80080d4:	69fa      	ldr	r2, [r7, #28]
 80080d6:	e841 2300 	strex	r3, r2, [r1]
 80080da:	617b      	str	r3, [r7, #20]
   return(result);
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1e5      	bne.n	80080ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2220      	movs	r2, #32
 80080e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e012      	b.n	800811c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2220      	movs	r2, #32
 80080fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3758      	adds	r7, #88	@ 0x58
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	603b      	str	r3, [r7, #0]
 8008130:	4613      	mov	r3, r2
 8008132:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008134:	e04f      	b.n	80081d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813c:	d04b      	beq.n	80081d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800813e:	f7f9 f9e9 	bl	8001514 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	69ba      	ldr	r2, [r7, #24]
 800814a:	429a      	cmp	r2, r3
 800814c:	d302      	bcc.n	8008154 <UART_WaitOnFlagUntilTimeout+0x30>
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e04e      	b.n	80081f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0304 	and.w	r3, r3, #4
 8008162:	2b00      	cmp	r3, #0
 8008164:	d037      	beq.n	80081d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2b80      	cmp	r3, #128	@ 0x80
 800816a:	d034      	beq.n	80081d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2b40      	cmp	r3, #64	@ 0x40
 8008170:	d031      	beq.n	80081d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	f003 0308 	and.w	r3, r3, #8
 800817c:	2b08      	cmp	r3, #8
 800817e:	d110      	bne.n	80081a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2208      	movs	r2, #8
 8008186:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 f839 	bl	8008200 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2208      	movs	r2, #8
 8008192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e029      	b.n	80081f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	69db      	ldr	r3, [r3, #28]
 80081a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081b0:	d111      	bne.n	80081d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f000 f81f 	bl	8008200 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2220      	movs	r2, #32
 80081c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e00f      	b.n	80081f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	69da      	ldr	r2, [r3, #28]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	4013      	ands	r3, r2
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	bf0c      	ite	eq
 80081e6:	2301      	moveq	r3, #1
 80081e8:	2300      	movne	r3, #0
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	461a      	mov	r2, r3
 80081ee:	79fb      	ldrb	r3, [r7, #7]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d0a0      	beq.n	8008136 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008200:	b480      	push	{r7}
 8008202:	b095      	sub	sp, #84	@ 0x54
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008210:	e853 3f00 	ldrex	r3, [r3]
 8008214:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008218:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800821c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008226:	643b      	str	r3, [r7, #64]	@ 0x40
 8008228:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800822c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800822e:	e841 2300 	strex	r3, r2, [r1]
 8008232:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1e6      	bne.n	8008208 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3308      	adds	r3, #8
 8008240:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	e853 3f00 	ldrex	r3, [r3]
 8008248:	61fb      	str	r3, [r7, #28]
   return(result);
 800824a:	69fa      	ldr	r2, [r7, #28]
 800824c:	4b1e      	ldr	r3, [pc, #120]	@ (80082c8 <UART_EndRxTransfer+0xc8>)
 800824e:	4013      	ands	r3, r2
 8008250:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3308      	adds	r3, #8
 8008258:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800825a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800825c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008260:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008262:	e841 2300 	strex	r3, r2, [r1]
 8008266:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1e5      	bne.n	800823a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008272:	2b01      	cmp	r3, #1
 8008274:	d118      	bne.n	80082a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	e853 3f00 	ldrex	r3, [r3]
 8008282:	60bb      	str	r3, [r7, #8]
   return(result);
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	f023 0310 	bic.w	r3, r3, #16
 800828a:	647b      	str	r3, [r7, #68]	@ 0x44
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	461a      	mov	r2, r3
 8008292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008294:	61bb      	str	r3, [r7, #24]
 8008296:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008298:	6979      	ldr	r1, [r7, #20]
 800829a:	69ba      	ldr	r2, [r7, #24]
 800829c:	e841 2300 	strex	r3, r2, [r1]
 80082a0:	613b      	str	r3, [r7, #16]
   return(result);
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1e6      	bne.n	8008276 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2220      	movs	r2, #32
 80082ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80082bc:	bf00      	nop
 80082be:	3754      	adds	r7, #84	@ 0x54
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr
 80082c8:	effffffe 	.word	0xeffffffe

080082cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d101      	bne.n	80082e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80082de:	2302      	movs	r3, #2
 80082e0:	e027      	b.n	8008332 <HAL_UARTEx_DisableFifoMode+0x66>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2224      	movs	r2, #36	@ 0x24
 80082ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f022 0201 	bic.w	r2, r2, #1
 8008308:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008310:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2220      	movs	r2, #32
 8008324:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3714      	adds	r7, #20
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b084      	sub	sp, #16
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800834e:	2b01      	cmp	r3, #1
 8008350:	d101      	bne.n	8008356 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008352:	2302      	movs	r3, #2
 8008354:	e02d      	b.n	80083b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2201      	movs	r2, #1
 800835a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2224      	movs	r2, #36	@ 0x24
 8008362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f022 0201 	bic.w	r2, r2, #1
 800837c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	430a      	orrs	r2, r1
 8008390:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f850 	bl	8008438 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2220      	movs	r2, #32
 80083a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d101      	bne.n	80083d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80083ce:	2302      	movs	r3, #2
 80083d0:	e02d      	b.n	800842e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2224      	movs	r2, #36	@ 0x24
 80083de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f022 0201 	bic.w	r2, r2, #1
 80083f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	683a      	ldr	r2, [r7, #0]
 800840a:	430a      	orrs	r2, r1
 800840c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f812 	bl	8008438 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2220      	movs	r2, #32
 8008420:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
	...

08008438 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008444:	2b00      	cmp	r3, #0
 8008446:	d108      	bne.n	800845a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008458:	e031      	b.n	80084be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800845a:	2310      	movs	r3, #16
 800845c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800845e:	2310      	movs	r3, #16
 8008460:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	0e5b      	lsrs	r3, r3, #25
 800846a:	b2db      	uxtb	r3, r3
 800846c:	f003 0307 	and.w	r3, r3, #7
 8008470:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	0f5b      	lsrs	r3, r3, #29
 800847a:	b2db      	uxtb	r3, r3
 800847c:	f003 0307 	and.w	r3, r3, #7
 8008480:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008482:	7bbb      	ldrb	r3, [r7, #14]
 8008484:	7b3a      	ldrb	r2, [r7, #12]
 8008486:	4911      	ldr	r1, [pc, #68]	@ (80084cc <UARTEx_SetNbDataToProcess+0x94>)
 8008488:	5c8a      	ldrb	r2, [r1, r2]
 800848a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800848e:	7b3a      	ldrb	r2, [r7, #12]
 8008490:	490f      	ldr	r1, [pc, #60]	@ (80084d0 <UARTEx_SetNbDataToProcess+0x98>)
 8008492:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008494:	fb93 f3f2 	sdiv	r3, r3, r2
 8008498:	b29a      	uxth	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
 80084a2:	7b7a      	ldrb	r2, [r7, #13]
 80084a4:	4909      	ldr	r1, [pc, #36]	@ (80084cc <UARTEx_SetNbDataToProcess+0x94>)
 80084a6:	5c8a      	ldrb	r2, [r1, r2]
 80084a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084ac:	7b7a      	ldrb	r2, [r7, #13]
 80084ae:	4908      	ldr	r1, [pc, #32]	@ (80084d0 <UARTEx_SetNbDataToProcess+0x98>)
 80084b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80084be:	bf00      	nop
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	08008574 	.word	0x08008574
 80084d0:	0800857c 	.word	0x0800857c

080084d4 <memset>:
 80084d4:	4402      	add	r2, r0
 80084d6:	4603      	mov	r3, r0
 80084d8:	4293      	cmp	r3, r2
 80084da:	d100      	bne.n	80084de <memset+0xa>
 80084dc:	4770      	bx	lr
 80084de:	f803 1b01 	strb.w	r1, [r3], #1
 80084e2:	e7f9      	b.n	80084d8 <memset+0x4>

080084e4 <__libc_init_array>:
 80084e4:	b570      	push	{r4, r5, r6, lr}
 80084e6:	4d0d      	ldr	r5, [pc, #52]	@ (800851c <__libc_init_array+0x38>)
 80084e8:	4c0d      	ldr	r4, [pc, #52]	@ (8008520 <__libc_init_array+0x3c>)
 80084ea:	1b64      	subs	r4, r4, r5
 80084ec:	10a4      	asrs	r4, r4, #2
 80084ee:	2600      	movs	r6, #0
 80084f0:	42a6      	cmp	r6, r4
 80084f2:	d109      	bne.n	8008508 <__libc_init_array+0x24>
 80084f4:	4d0b      	ldr	r5, [pc, #44]	@ (8008524 <__libc_init_array+0x40>)
 80084f6:	4c0c      	ldr	r4, [pc, #48]	@ (8008528 <__libc_init_array+0x44>)
 80084f8:	f000 f818 	bl	800852c <_init>
 80084fc:	1b64      	subs	r4, r4, r5
 80084fe:	10a4      	asrs	r4, r4, #2
 8008500:	2600      	movs	r6, #0
 8008502:	42a6      	cmp	r6, r4
 8008504:	d105      	bne.n	8008512 <__libc_init_array+0x2e>
 8008506:	bd70      	pop	{r4, r5, r6, pc}
 8008508:	f855 3b04 	ldr.w	r3, [r5], #4
 800850c:	4798      	blx	r3
 800850e:	3601      	adds	r6, #1
 8008510:	e7ee      	b.n	80084f0 <__libc_init_array+0xc>
 8008512:	f855 3b04 	ldr.w	r3, [r5], #4
 8008516:	4798      	blx	r3
 8008518:	3601      	adds	r6, #1
 800851a:	e7f2      	b.n	8008502 <__libc_init_array+0x1e>
 800851c:	0800858c 	.word	0x0800858c
 8008520:	0800858c 	.word	0x0800858c
 8008524:	0800858c 	.word	0x0800858c
 8008528:	08008590 	.word	0x08008590

0800852c <_init>:
 800852c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800852e:	bf00      	nop
 8008530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008532:	bc08      	pop	{r3}
 8008534:	469e      	mov	lr, r3
 8008536:	4770      	bx	lr

08008538 <_fini>:
 8008538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853a:	bf00      	nop
 800853c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800853e:	bc08      	pop	{r3}
 8008540:	469e      	mov	lr, r3
 8008542:	4770      	bx	lr
