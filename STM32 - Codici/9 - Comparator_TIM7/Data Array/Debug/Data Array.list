
Data Array.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fc8  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009260  08009260  0000a260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080092a0  080092a0  0000a2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080092a8  080092a8  0000a2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080092ac  080092ac  0000a2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  080092b0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000ab4  24000010  080092c0  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000ac4  080092c0  0000bac4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b0f0  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000308f  00000000  00000000  0002612e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014c8  00000000  00000000  000291c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001029  00000000  00000000  0002a688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a085  00000000  00000000  0002b6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d542  00000000  00000000  00065736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017ab60  00000000  00000000  00082c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fd7d8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005848  00000000  00000000  001fd81c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000091  00000000  00000000  00203064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009248 	.word	0x08009248

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08009248 	.word	0x08009248

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ADCx_custom_init>:
 */

#include "Custom_ADC.h"


void ADCx_custom_init(ADC_TypeDef *ADCx, uint8_t INx_Pin){
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]

//	ADCx->CR &= ~ADC_CR_ADSTART;

	ADCx->SQR1 = 0; // per azzerare la configurazione dell'ide
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2200      	movs	r2, #0
 80005d8:	631a      	str	r2, [r3, #48]	@ 0x30

	ADCx->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere 0=1
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	631a      	str	r2, [r3, #48]	@ 0x30

	ADCx->SQR1 |= (INx_Pin << ADC_SQR1_SQ1_Pos);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005e6:	78fb      	ldrb	r3, [r7, #3]
 80005e8:	019b      	lsls	r3, r3, #6
 80005ea:	431a      	orrs	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	631a      	str	r2, [r3, #48]	@ 0x30

	ADCx->PCSEL = 0;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
	ADCx->PCSEL |= (1 << (ADC_PCSEL_PCSEL_Pos + INx_Pin)); // Dichiaro quali canali leggere : 18 e 19
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	78fa      	ldrb	r2, [r7, #3]
 80005fc:	2101      	movs	r1, #1
 80005fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000602:	431a      	orrs	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	61da      	str	r2, [r3, #28]

	/* Calibrazione */
	ADCx->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	609a      	str	r2, [r3, #8]
	ADCx->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	609a      	str	r2, [r3, #8]
	ADCx->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	f023 0201 	bic.w	r2, r3, #1
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	609a      	str	r2, [r3, #8]
	ADCx->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	609a      	str	r2, [r3, #8]


	while((ADCx->CR & ADC_CR_ADCAL) != 0){};
 8000638:	bf00      	nop
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	2b00      	cmp	r3, #0
 8000640:	dbfb      	blt.n	800063a <ADCx_custom_init+0x72>
	// FIne calibrazione

	ADCx->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f043 0201 	orr.w	r2, r3, #1
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	601a      	str	r2, [r3, #0]
	ADCx->CR |= ADC_CR_ADEN;		// Accendo l' ADC
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	f043 0201 	orr.w	r2, r3, #1
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	609a      	str	r2, [r3, #8]

	while((ADCx->ISR & ADC_ISR_ADRDY) != 0){}
 800065a:	bf00      	nop
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f9      	bne.n	800065c <ADCx_custom_init+0x94>

	ADCx->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f043 0201 	orr.w	r2, r3, #1
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	601a      	str	r2, [r3, #0]
	// Fine accensione

	/* ADR INIZIALIZZATO */
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <ADC_custom_init>:

void ADC_custom_init(){
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

	/*	PRIMO ADC	*/

	/*	IN0 -> PIN PC2 o A4
	 * */
	ADCx_custom_init(ADC3, 0);
 8000684:	2100      	movs	r1, #0
 8000686:	4817      	ldr	r0, [pc, #92]	@ (80006e4 <ADC_custom_init+0x64>)
 8000688:	f7ff ff9e 	bl	80005c8 <ADCx_custom_init>
	ADC3->IER &= ~ADC_IER_EOCIE;	// interrupt ADC
 800068c:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <ADC_custom_init+0x64>)
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	4a14      	ldr	r2, [pc, #80]	@ (80006e4 <ADC_custom_init+0x64>)
 8000692:	f023 0304 	bic.w	r3, r3, #4
 8000696:	6053      	str	r3, [r2, #4]

	// TIM6 set to 240Mhz
	TIM6->PSC = 1; // TIM6 CLOCK/PSC
 8000698:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <ADC_custom_init+0x68>)
 800069a:	2201      	movs	r2, #1
 800069c:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 1;	// TIM6 CLOCK/PSC/ARR
 800069e:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <ADC_custom_init+0x68>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->CNT = 0;
 80006a4:	4b10      	ldr	r3, [pc, #64]	@ (80006e8 <ADC_custom_init+0x68>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->DIER &= ~TIM_DIER_UIE;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <ADC_custom_init+0x68>)
 80006ac:	68db      	ldr	r3, [r3, #12]
 80006ae:	4a0e      	ldr	r2, [pc, #56]	@ (80006e8 <ADC_custom_init+0x68>)
 80006b0:	f023 0301 	bic.w	r3, r3, #1
 80006b4:	60d3      	str	r3, [r2, #12]

	TIM7->PSC = 10; // TIM6 CLOCK/PSC
 80006b6:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <ADC_custom_init+0x6c>)
 80006b8:	220a      	movs	r2, #10
 80006ba:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM7->ARR = 10;	// TIM6 CLOCK/PSC/ARR
 80006bc:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <ADC_custom_init+0x6c>)
 80006be:	220a      	movs	r2, #10
 80006c0:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM7->CNT = 0;
 80006c2:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <ADC_custom_init+0x6c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM7->DIER |= TIM_DIER_UIE;
 80006c8:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <ADC_custom_init+0x6c>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	4a07      	ldr	r2, [pc, #28]	@ (80006ec <ADC_custom_init+0x6c>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	60d3      	str	r3, [r2, #12]
	TIM7->CR1 &= ~TIM_CR1_CEN;
 80006d4:	4b05      	ldr	r3, [pc, #20]	@ (80006ec <ADC_custom_init+0x6c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a04      	ldr	r2, [pc, #16]	@ (80006ec <ADC_custom_init+0x6c>)
 80006da:	f023 0301 	bic.w	r3, r3, #1
 80006de:	6013      	str	r3, [r2, #0]
	// 240 Mhz -> 20 Mhz -> 1 Mhz
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	58026000 	.word	0x58026000
 80006e8:	40001000 	.word	0x40001000
 80006ec:	40001400 	.word	0x40001400

080006f0 <blink>:
bool triggd = 	 false;
bool acquiring = false;
bool enable = 	 false;
bool pre_triggd = false;

void blink(){
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
	if(GPIOE->IDR & GPIO_IDR_ID1){
 80006f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000724 <blink+0x34>)
 80006f6:	691b      	ldr	r3, [r3, #16]
 80006f8:	f003 0302 	and.w	r3, r3, #2
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d006      	beq.n	800070e <blink+0x1e>
		GPIOE->BSRR |= GPIO_BSRR_BR1;
 8000700:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <blink+0x34>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a07      	ldr	r2, [pc, #28]	@ (8000724 <blink+0x34>)
 8000706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800070a:	6193      	str	r3, [r2, #24]
	}else{
		GPIOE->BSRR |= GPIO_BSRR_BS1;
	}
}
 800070c:	e005      	b.n	800071a <blink+0x2a>
		GPIOE->BSRR |= GPIO_BSRR_BS1;
 800070e:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <blink+0x34>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	4a04      	ldr	r2, [pc, #16]	@ (8000724 <blink+0x34>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6193      	str	r3, [r2, #24]
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	58021000 	.word	0x58021000

08000728 <COMP_custom_init>:

void COMP_custom_init(){
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

	DAC1->CR |= DAC_CR_EN1;			// attivo DAC
 800072c:	4b13      	ldr	r3, [pc, #76]	@ (800077c <COMP_custom_init+0x54>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a12      	ldr	r2, [pc, #72]	@ (800077c <COMP_custom_init+0x54>)
 8000732:	f043 0301 	orr.w	r3, r3, #1
 8000736:	6013      	str	r3, [r2, #0]

	DAC1->DHR12R1 = V_to_uint12_t(0.8);			// imposto soglia del comparatore IN 12 BIT NON 16
 8000738:	4b10      	ldr	r3, [pc, #64]	@ (800077c <COMP_custom_init+0x54>)
 800073a:	f44f 4204 	mov.w	r2, #33792	@ 0x8400
 800073e:	609a      	str	r2, [r3, #8]

	DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <COMP_custom_init+0x54>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	4a0d      	ldr	r2, [pc, #52]	@ (800077c <COMP_custom_init+0x54>)
 8000746:	f043 0301 	orr.w	r3, r3, #1
 800074a:	6053      	str	r3, [r2, #4]

	COMP2->CFGR |= COMP_CFGRx_EN;	// attivo il comparatore
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <COMP_custom_init+0x58>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0b      	ldr	r2, [pc, #44]	@ (8000780 <COMP_custom_init+0x58>)
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	6013      	str	r3, [r2, #0]

	triggd = false;
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <COMP_custom_init+0x5c>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
	acquiring = false;
 800075e:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <COMP_custom_init+0x60>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
	enable = false;
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <COMP_custom_init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
	pre_triggd = false;
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <COMP_custom_init+0x68>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40007400 	.word	0x40007400
 8000780:	58003810 	.word	0x58003810
 8000784:	2400002c 	.word	0x2400002c
 8000788:	2400002d 	.word	0x2400002d
 800078c:	2400002e 	.word	0x2400002e
 8000790:	2400002f 	.word	0x2400002f

08000794 <COMP_custom_interrupt>:


void COMP_custom_interrupt(){
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

	if(COMP12->SR & COMP_SR_C2VAL){
 8000798:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <COMP_custom_interrupt+0x5c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f003 0302 	and.w	r3, r3, #2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d01f      	beq.n	80007e4 <COMP_custom_interrupt+0x50>
		if(!(TIM6->CR1 & TIM_CR1_CEN) && !acquiring && enable){
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <COMP_custom_interrupt+0x60>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d11c      	bne.n	80007ea <COMP_custom_interrupt+0x56>
 80007b0:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <COMP_custom_interrupt+0x64>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	f083 0301 	eor.w	r3, r3, #1
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d015      	beq.n	80007ea <COMP_custom_interrupt+0x56>
 80007be:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <COMP_custom_interrupt+0x68>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d011      	beq.n	80007ea <COMP_custom_interrupt+0x56>

			blink();
 80007c6:	f7ff ff93 	bl	80006f0 <blink>
			acquiring = true;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <COMP_custom_interrupt+0x64>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
			pre_triggd = false;
 80007d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <COMP_custom_interrupt+0x6c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
			TIM6->CR1 |= TIM_CR1_CEN;
 80007d6:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <COMP_custom_interrupt+0x60>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a06      	ldr	r2, [pc, #24]	@ (80007f4 <COMP_custom_interrupt+0x60>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6013      	str	r3, [r2, #0]
		}
	}else{
		pre_triggd = true;
	}
}
 80007e2:	e002      	b.n	80007ea <COMP_custom_interrupt+0x56>
		pre_triggd = true;
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <COMP_custom_interrupt+0x6c>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	58003800 	.word	0x58003800
 80007f4:	40001000 	.word	0x40001000
 80007f8:	2400002d 	.word	0x2400002d
 80007fc:	2400002e 	.word	0x2400002e
 8000800:	2400002f 	.word	0x2400002f

08000804 <DMA_custom_init>:

#define DMA_DATA_BUFF_SIZE 1000

uint16_t DMA_data_buffer[DMA_DATA_BUFF_SIZE];

void DMA_custom_init(){
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

	DMA1_Stream0->M0AR = (uint32_t) (&DMA_data_buffer);	// inidico l'indirizzo dello storarge di dati
 8000808:	4b1e      	ldr	r3, [pc, #120]	@ (8000884 <DMA_custom_init+0x80>)
 800080a:	4a1f      	ldr	r2, [pc, #124]	@ (8000888 <DMA_custom_init+0x84>)
 800080c:	60da      	str	r2, [r3, #12]
	DMA1_Stream1->M0AR = (uint32_t) (&DMA_data_buffer);
 800080e:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <DMA_custom_init+0x88>)
 8000810:	4a1d      	ldr	r2, [pc, #116]	@ (8000888 <DMA_custom_init+0x84>)
 8000812:	60da      	str	r2, [r3, #12]

	DMA1_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
 8000814:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <DMA_custom_init+0x80>)
 8000816:	4a1e      	ldr	r2, [pc, #120]	@ (8000890 <DMA_custom_init+0x8c>)
 8000818:	609a      	str	r2, [r3, #8]
	DMA1_Stream1->PAR = (uint32_t) (&USART3->TDR);
 800081a:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <DMA_custom_init+0x88>)
 800081c:	4a1d      	ldr	r2, [pc, #116]	@ (8000894 <DMA_custom_init+0x90>)
 800081e:	609a      	str	r2, [r3, #8]

	DMA1_Stream0->NDTR = DMA_DATA_BUFF_SIZE;			// numero elementi da prendere da ADC3
 8000820:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <DMA_custom_init+0x80>)
 8000822:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000826:	605a      	str	r2, [r3, #4]
	DMA1_Stream1->NDTR = DMA_DATA_BUFF_SIZE*2;			// numero elementi da mandare a USART3
 8000828:	4b18      	ldr	r3, [pc, #96]	@ (800088c <DMA_custom_init+0x88>)
 800082a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800082e:	605a      	str	r2, [r3, #4]

	DMA1_Stream0->CR |= DMA_SxCR_TCIE;		// disablilito interrupt di fine ricezione
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <DMA_custom_init+0x80>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a13      	ldr	r2, [pc, #76]	@ (8000884 <DMA_custom_init+0x80>)
 8000836:	f043 0310 	orr.w	r3, r3, #16
 800083a:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_TCIE;		// abilito interrupt di fine trasmissione
 800083c:	4b13      	ldr	r3, [pc, #76]	@ (800088c <DMA_custom_init+0x88>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a12      	ldr	r2, [pc, #72]	@ (800088c <DMA_custom_init+0x88>)
 8000842:	f043 0310 	orr.w	r3, r3, #16
 8000846:	6013      	str	r3, [r2, #0]

	ADC3->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);	// DMA in cont mode
 8000848:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <DMA_custom_init+0x94>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	4a12      	ldr	r2, [pc, #72]	@ (8000898 <DMA_custom_init+0x94>)
 800084e:	f043 0303 	orr.w	r3, r3, #3
 8000852:	60d3      	str	r3, [r2, #12]

	DMA1_Stream0->CR |= DMA_SxCR_EN;
 8000854:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <DMA_custom_init+0x80>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a0a      	ldr	r2, [pc, #40]	@ (8000884 <DMA_custom_init+0x80>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_EN;
 8000860:	4b0a      	ldr	r3, [pc, #40]	@ (800088c <DMA_custom_init+0x88>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a09      	ldr	r2, [pc, #36]	@ (800088c <DMA_custom_init+0x88>)
 8000866:	f043 0301 	orr.w	r3, r3, #1
 800086a:	6013      	str	r3, [r2, #0]

	ADC3->CR  |= ADC_CR_ADSTART;
 800086c:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <DMA_custom_init+0x94>)
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	4a09      	ldr	r2, [pc, #36]	@ (8000898 <DMA_custom_init+0x94>)
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	6093      	str	r3, [r2, #8]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40020010 	.word	0x40020010
 8000888:	24000030 	.word	0x24000030
 800088c:	40020028 	.word	0x40020028
 8000890:	58026040 	.word	0x58026040
 8000894:	40004828 	.word	0x40004828
 8000898:	58026000 	.word	0x58026000

0800089c <DMA_custom_interrupt_tx>:

void DMA_custom_interrupt_tx(){
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0


	USART3->CR3 &= ~USART_CR3_DMAT;			  // SPENGO trasmissione usart
 80008a0:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <DMA_custom_interrupt_tx+0x58>)
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	4a13      	ldr	r2, [pc, #76]	@ (80008f4 <DMA_custom_interrupt_tx+0x58>)
 80008a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80008aa:	6093      	str	r3, [r2, #8]

	DMA1->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <DMA_custom_interrupt_tx+0x5c>)
 80008ae:	f04f 32ff 	mov.w	r2, #4294967295
 80008b2:	609a      	str	r2, [r3, #8]
	DMA1->HIFCR = 0xffffffff;
 80008b4:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <DMA_custom_interrupt_tx+0x5c>)
 80008b6:	f04f 32ff 	mov.w	r2, #4294967295
 80008ba:	60da      	str	r2, [r3, #12]


	extern bool acquiring;
	extern bool pre_triggd;

	acquiring = false;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <DMA_custom_interrupt_tx+0x60>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
	DMA1_Stream0->NDTR = DMA_DATA_BUFF_SIZE;			// numero elementi da prendere da ADC3
 80008c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <DMA_custom_interrupt_tx+0x64>)
 80008c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008c8:	605a      	str	r2, [r3, #4]
	pre_triggd = false;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <DMA_custom_interrupt_tx+0x68>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]

	DMA1_Stream0->CR |= DMA_SxCR_EN;
 80008d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <DMA_custom_interrupt_tx+0x64>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000900 <DMA_custom_interrupt_tx+0x64>)
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_EN;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <DMA_custom_interrupt_tx+0x6c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a09      	ldr	r2, [pc, #36]	@ (8000908 <DMA_custom_interrupt_tx+0x6c>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	6013      	str	r3, [r2, #0]
//	TIM7->CR1 |= TIM_CR1_CEN;

}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40004800 	.word	0x40004800
 80008f8:	40020000 	.word	0x40020000
 80008fc:	2400002d 	.word	0x2400002d
 8000900:	40020010 	.word	0x40020010
 8000904:	2400002f 	.word	0x2400002f
 8000908:	40020028 	.word	0x40020028

0800090c <DMA_custom_interrupt_rx>:

void DMA_custom_interrupt_rx(){
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

	TIM6->CR1 &= ~TIM_CR1_CEN;
 8000910:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <DMA_custom_interrupt_rx+0x40>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a0d      	ldr	r2, [pc, #52]	@ (800094c <DMA_custom_interrupt_rx+0x40>)
 8000916:	f023 0301 	bic.w	r3, r3, #1
 800091a:	6013      	str	r3, [r2, #0]

	DMA1->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <DMA_custom_interrupt_rx+0x44>)
 800091e:	f04f 32ff 	mov.w	r2, #4294967295
 8000922:	609a      	str	r2, [r3, #8]
	DMA1->HIFCR = 0xffffffff;
 8000924:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <DMA_custom_interrupt_rx+0x44>)
 8000926:	f04f 32ff 	mov.w	r2, #4294967295
 800092a:	60da      	str	r2, [r3, #12]

	DMA1_Stream1->NDTR = DMA_DATA_BUFF_SIZE*2;
 800092c:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <DMA_custom_interrupt_rx+0x48>)
 800092e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000932:	605a      	str	r2, [r3, #4]

	USART3->CR3 |= USART_CR3_DMAT;
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <DMA_custom_interrupt_rx+0x4c>)
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	4a07      	ldr	r2, [pc, #28]	@ (8000958 <DMA_custom_interrupt_rx+0x4c>)
 800093a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800093e:	6093      	str	r3, [r2, #8]
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40001000 	.word	0x40001000
 8000950:	40020000 	.word	0x40020000
 8000954:	40020028 	.word	0x40020028
 8000958:	40004800 	.word	0x40004800

0800095c <USART_custom_init>:
 *      Author: yehan
 */

#include "Custom_USART.h"

void USART_custom_init(){
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

	USART3->CR1 |= USART_CR1_TE;
 8000960:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <USART_custom_init+0x4c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a10      	ldr	r2, [pc, #64]	@ (80009a8 <USART_custom_init+0x4c>)
 8000966:	f043 0308 	orr.w	r3, r3, #8
 800096a:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_RE;
 800096c:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <USART_custom_init+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0d      	ldr	r2, [pc, #52]	@ (80009a8 <USART_custom_init+0x4c>)
 8000972:	f043 0304 	orr.w	r3, r3, #4
 8000976:	6013      	str	r3, [r2, #0]

	USART3->CR1 &= ~USART_CR1_TXEIE;
 8000978:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <USART_custom_init+0x4c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a0a      	ldr	r2, [pc, #40]	@ (80009a8 <USART_custom_init+0x4c>)
 800097e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000982:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_RXNEIE;
 8000984:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <USART_custom_init+0x4c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a07      	ldr	r2, [pc, #28]	@ (80009a8 <USART_custom_init+0x4c>)
 800098a:	f043 0320 	orr.w	r3, r3, #32
 800098e:	6013      	str	r3, [r2, #0]

	USART3->CR1 |= USART_CR1_UE;
 8000990:	4b05      	ldr	r3, [pc, #20]	@ (80009a8 <USART_custom_init+0x4c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a04      	ldr	r2, [pc, #16]	@ (80009a8 <USART_custom_init+0x4c>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	6013      	str	r3, [r2, #0]
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40004800 	.word	0x40004800

080009ac <USART_custom_interrupt>:

void USART_custom_interrupt(){
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0

	extern bool enable;

	char data = USART3->RDR;
 80009b2:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <USART_custom_interrupt+0x5c>)
 80009b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009b6:	71fb      	strb	r3, [r7, #7]

	if(data == '?'){
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80009bc:	d10b      	bne.n	80009d6 <USART_custom_interrupt+0x2a>

//		USART3->CR3 &= ~USART_CR3_DMAT;	// spengo l'usart
		if((TIM7->CR1 & TIM_CR1_CEN) == 0){
 80009be:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <USART_custom_interrupt+0x60>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d105      	bne.n	80009d6 <USART_custom_interrupt+0x2a>
			TIM7->CR1 |= TIM_CR1_CEN;
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <USART_custom_interrupt+0x60>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a0f      	ldr	r2, [pc, #60]	@ (8000a0c <USART_custom_interrupt+0x60>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6013      	str	r3, [r2, #0]
		}
//		TIM6->CR1 |= TIM_CR1_CEN;		// accendo l'adc
	}

	USART3->ICR |= USART_ICR_ORECF;  //Cancella l'overrun. Capita quando si entra in debug
 80009d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <USART_custom_interrupt+0x5c>)
 80009d8:	6a1b      	ldr	r3, [r3, #32]
 80009da:	4a0b      	ldr	r2, [pc, #44]	@ (8000a08 <USART_custom_interrupt+0x5c>)
 80009dc:	f043 0308 	orr.w	r3, r3, #8
 80009e0:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF;   //Azzeramento flag interrupt trasmissione
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <USART_custom_interrupt+0x5c>)
 80009e4:	6a1b      	ldr	r3, [r3, #32]
 80009e6:	4a08      	ldr	r2, [pc, #32]	@ (8000a08 <USART_custom_interrupt+0x5c>)
 80009e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009ec:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <USART_custom_interrupt+0x5c>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	4a05      	ldr	r2, [pc, #20]	@ (8000a08 <USART_custom_interrupt+0x5c>)
 80009f4:	f043 0308 	orr.w	r3, r3, #8
 80009f8:	6193      	str	r3, [r2, #24]
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40004800 	.word	0x40004800
 8000a0c:	40001400 	.word	0x40001400

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a14:	f000 fefc 	bl	8001810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a18:	f000 f81a 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1c:	f000 fa76 	bl	8000f0c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a20:	f000 fa4c 	bl	8000ebc <MX_DMA_Init>
  MX_ADC3_Init();
 8000a24:	f000 f8c2 	bl	8000bac <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8000a28:	f000 f9fa 	bl	8000e20 <MX_USART3_UART_Init>
  MX_COMP2_Init();
 8000a2c:	f000 f92e 	bl	8000c8c <MX_COMP2_Init>
  MX_DAC1_Init();
 8000a30:	f000 f958 	bl	8000ce4 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000a34:	f000 f988 	bl	8000d48 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000a38:	f000 f9bc 	bl	8000db4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  COMP_custom_init();
 8000a3c:	f7ff fe74 	bl	8000728 <COMP_custom_init>
  USART_custom_init();
 8000a40:	f7ff ff8c 	bl	800095c <USART_custom_init>
  ADC_custom_init();
 8000a44:	f7ff fe1c 	bl	8000680 <ADC_custom_init>
  DMA_custom_init();
 8000a48:	f7ff fedc 	bl	8000804 <DMA_custom_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <main+0x3c>

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b09e      	sub	sp, #120	@ 0x78
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a5a:	224c      	movs	r2, #76	@ 0x4c
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f008 fbc6 	bl	80091f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2220      	movs	r2, #32
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f008 fbbf 	bl	80091f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a72:	2002      	movs	r0, #2
 8000a74:	f003 fae0 	bl	8004038 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	4b48      	ldr	r3, [pc, #288]	@ (8000ba0 <SystemClock_Config+0x150>)
 8000a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a80:	4a47      	ldr	r2, [pc, #284]	@ (8000ba0 <SystemClock_Config+0x150>)
 8000a82:	f023 0301 	bic.w	r3, r3, #1
 8000a86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a88:	4b45      	ldr	r3, [pc, #276]	@ (8000ba0 <SystemClock_Config+0x150>)
 8000a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	4b44      	ldr	r3, [pc, #272]	@ (8000ba4 <SystemClock_Config+0x154>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	4a43      	ldr	r2, [pc, #268]	@ (8000ba4 <SystemClock_Config+0x154>)
 8000a98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a9c:	6193      	str	r3, [r2, #24]
 8000a9e:	4b41      	ldr	r3, [pc, #260]	@ (8000ba4 <SystemClock_Config+0x154>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aaa:	bf00      	nop
 8000aac:	4b3d      	ldr	r3, [pc, #244]	@ (8000ba4 <SystemClock_Config+0x154>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ab4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ab8:	d1f8      	bne.n	8000aac <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	4b3b      	ldr	r3, [pc, #236]	@ (8000ba8 <SystemClock_Config+0x158>)
 8000abc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ac0:	4a39      	ldr	r2, [pc, #228]	@ (8000ba8 <SystemClock_Config+0x158>)
 8000ac2:	f043 0302 	orr.w	r3, r3, #2
 8000ac6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000aca:	4b37      	ldr	r3, [pc, #220]	@ (8000ba8 <SystemClock_Config+0x158>)
 8000acc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ad0:	f003 0302 	and.w	r3, r3, #2
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ad8:	2300      	movs	r3, #0
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	4b31      	ldr	r3, [pc, #196]	@ (8000ba4 <SystemClock_Config+0x154>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a30      	ldr	r2, [pc, #192]	@ (8000ba4 <SystemClock_Config+0x154>)
 8000ae2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b2e      	ldr	r3, [pc, #184]	@ (8000ba4 <SystemClock_Config+0x154>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba0 <SystemClock_Config+0x150>)
 8000af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000af6:	4a2a      	ldr	r2, [pc, #168]	@ (8000ba0 <SystemClock_Config+0x150>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000afe:	4b28      	ldr	r3, [pc, #160]	@ (8000ba0 <SystemClock_Config+0x150>)
 8000b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b0a:	bf00      	nop
 8000b0c:	4b25      	ldr	r3, [pc, #148]	@ (8000ba4 <SystemClock_Config+0x154>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b18:	d1f8      	bne.n	8000b0c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b1e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b24:	2302      	movs	r3, #2
 8000b26:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000b30:	2378      	movs	r3, #120	@ 0x78
 8000b32:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b40:	230c      	movs	r3, #12
 8000b42:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b50:	4618      	mov	r0, r3
 8000b52:	f003 faab 	bl	80040ac <HAL_RCC_OscConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000b5c:	f000 fb06 	bl	800116c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b60:	233f      	movs	r3, #63	@ 0x3f
 8000b62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b64:	2303      	movs	r3, #3
 8000b66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b70:	2340      	movs	r3, #64	@ 0x40
 8000b72:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b74:	2340      	movs	r3, #64	@ 0x40
 8000b76:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b7e:	2340      	movs	r3, #64	@ 0x40
 8000b80:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	2104      	movs	r1, #4
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f003 fee9 	bl	8004960 <HAL_RCC_ClockConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000b94:	f000 faea 	bl	800116c <Error_Handler>
  }
}
 8000b98:	bf00      	nop
 8000b9a:	3778      	adds	r7, #120	@ 0x78
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	58000400 	.word	0x58000400
 8000ba4:	58024800 	.word	0x58024800
 8000ba8:	58024400 	.word	0x58024400

08000bac <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
 8000bc0:	615a      	str	r2, [r3, #20]
 8000bc2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000c84 <MX_ADC3_Init+0xd8>)
 8000bc6:	4a30      	ldr	r2, [pc, #192]	@ (8000c88 <MX_ADC3_Init+0xdc>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bca:	4b2e      	ldr	r3, [pc, #184]	@ (8000c84 <MX_ADC3_Init+0xd8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c84 <MX_ADC3_Init+0xd8>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8000c84 <MX_ADC3_Init+0xd8>)
 8000bd8:	2204      	movs	r2, #4
 8000bda:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000bdc:	4b29      	ldr	r3, [pc, #164]	@ (8000c84 <MX_ADC3_Init+0xd8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000be2:	4b28      	ldr	r3, [pc, #160]	@ (8000c84 <MX_ADC3_Init+0xd8>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000be8:	4b26      	ldr	r3, [pc, #152]	@ (8000c84 <MX_ADC3_Init+0xd8>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000bee:	4b25      	ldr	r3, [pc, #148]	@ (8000c84 <MX_ADC3_Init+0xd8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000bf4:	4b23      	ldr	r3, [pc, #140]	@ (8000c84 <MX_ADC3_Init+0xd8>)
 8000bf6:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000bfa:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000bfc:	4b21      	ldr	r3, [pc, #132]	@ (8000c84 <MX_ADC3_Init+0xd8>)
 8000bfe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c02:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	@ (8000c84 <MX_ADC3_Init+0xd8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c84 <MX_ADC3_Init+0xd8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c10:	4b1c      	ldr	r3, [pc, #112]	@ (8000c84 <MX_ADC3_Init+0xd8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000c16:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <MX_ADC3_Init+0xd8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	@ (8000c84 <MX_ADC3_Init+0xd8>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c24:	4817      	ldr	r0, [pc, #92]	@ (8000c84 <MX_ADC3_Init+0xd8>)
 8000c26:	f001 f87f 	bl	8001d28 <HAL_ADC_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000c30:	f000 fa9c 	bl	800116c <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000c34:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <MX_ADC3_Init+0xd8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c3a:	4812      	ldr	r0, [pc, #72]	@ (8000c84 <MX_ADC3_Init+0xd8>)
 8000c3c:	f001 f874 	bl	8001d28 <HAL_ADC_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000c46:	f000 fa91 	bl	800116c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c4e:	2306      	movs	r3, #6
 8000c50:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c56:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c5a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <MX_ADC3_Init+0xd8>)
 8000c6e:	f001 f9fd 	bl	800206c <HAL_ADC_ConfigChannel>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000c78:	f000 fa78 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	24000800 	.word	0x24000800
 8000c88:	58026000 	.word	0x58026000

08000c8c <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <MX_COMP2_Init+0x50>)
 8000c92:	4a13      	ldr	r2, [pc, #76]	@ (8000ce0 <MX_COMP2_Init+0x54>)
 8000c94:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000c96:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <MX_COMP2_Init+0x50>)
 8000c98:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c9c:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <MX_COMP2_Init+0x50>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cdc <MX_COMP2_Init+0x50>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <MX_COMP2_Init+0x50>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <MX_COMP2_Init+0x50>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <MX_COMP2_Init+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <MX_COMP2_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <MX_COMP2_Init+0x50>)
 8000cc4:	2211      	movs	r2, #17
 8000cc6:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	@ (8000cdc <MX_COMP2_Init+0x50>)
 8000cca:	f001 fe37 	bl	800293c <HAL_COMP_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 8000cd4:	f000 fa4a 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	240008dc 	.word	0x240008dc
 8000ce0:	58003810 	.word	0x58003810

08000ce4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	@ 0x28
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2224      	movs	r2, #36	@ 0x24
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f008 fa7d 	bl	80091f0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000cf6:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <MX_DAC1_Init+0x5c>)
 8000cf8:	4a12      	ldr	r2, [pc, #72]	@ (8000d44 <MX_DAC1_Init+0x60>)
 8000cfa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000cfc:	4810      	ldr	r0, [pc, #64]	@ (8000d40 <MX_DAC1_Init+0x5c>)
 8000cfe:	f002 f8d4 	bl	8002eaa <HAL_DAC_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000d08:	f000 fa30 	bl	800116c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000d14:	2302      	movs	r3, #2
 8000d16:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	2200      	movs	r2, #0
 8000d24:	4619      	mov	r1, r3
 8000d26:	4806      	ldr	r0, [pc, #24]	@ (8000d40 <MX_DAC1_Init+0x5c>)
 8000d28:	f002 f8e2 	bl	8002ef0 <HAL_DAC_ConfigChannel>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000d32:	f000 fa1b 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	@ 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	24000908 	.word	0x24000908
 8000d44:	40007400 	.word	0x40007400

08000d48 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d58:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <MX_TIM6_Init+0x64>)
 8000d5a:	4a15      	ldr	r2, [pc, #84]	@ (8000db0 <MX_TIM6_Init+0x68>)
 8000d5c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000d5e:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <MX_TIM6_Init+0x64>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d64:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <MX_TIM6_Init+0x64>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <MX_TIM6_Init+0x64>)
 8000d6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d70:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <MX_TIM6_Init+0x64>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d78:	480c      	ldr	r0, [pc, #48]	@ (8000dac <MX_TIM6_Init+0x64>)
 8000d7a:	f006 fe7b 	bl	8007a74 <HAL_TIM_Base_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000d84:	f000 f9f2 	bl	800116c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d88:	2320      	movs	r3, #32
 8000d8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	@ (8000dac <MX_TIM6_Init+0x64>)
 8000d96:	f007 f8a3 	bl	8007ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000da0:	f000 f9e4 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	2400091c 	.word	0x2400091c
 8000db0:	40001000 	.word	0x40001000

08000db4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000dc4:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <MX_TIM7_Init+0x64>)
 8000dc6:	4a15      	ldr	r2, [pc, #84]	@ (8000e1c <MX_TIM7_Init+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000dca:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <MX_TIM7_Init+0x64>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <MX_TIM7_Init+0x64>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000dd6:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <MX_TIM7_Init+0x64>)
 8000dd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ddc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <MX_TIM7_Init+0x64>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000de4:	480c      	ldr	r0, [pc, #48]	@ (8000e18 <MX_TIM7_Init+0x64>)
 8000de6:	f006 fe45 	bl	8007a74 <HAL_TIM_Base_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000df0:	f000 f9bc 	bl	800116c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df4:	2300      	movs	r3, #0
 8000df6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	@ (8000e18 <MX_TIM7_Init+0x64>)
 8000e02:	f007 f86d 	bl	8007ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000e0c:	f000 f9ae 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	24000968 	.word	0x24000968
 8000e1c:	40001400 	.word	0x40001400

08000e20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e24:	4b22      	ldr	r3, [pc, #136]	@ (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e26:	4a23      	ldr	r2, [pc, #140]	@ (8000eb4 <MX_USART3_UART_Init+0x94>)
 8000e28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8000e2a:	4b21      	ldr	r3, [pc, #132]	@ (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e2c:	4a22      	ldr	r2, [pc, #136]	@ (8000eb8 <MX_USART3_UART_Init+0x98>)
 8000e2e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e30:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e36:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e42:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e44:	220c      	movs	r2, #12
 8000e46:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e48:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e4e:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e54:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e5a:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e60:	4b13      	ldr	r3, [pc, #76]	@ (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e66:	4812      	ldr	r0, [pc, #72]	@ (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e68:	f007 f8e6 	bl	8008038 <HAL_UART_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000e72:	f000 f97b 	bl	800116c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e76:	2100      	movs	r1, #0
 8000e78:	480d      	ldr	r0, [pc, #52]	@ (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e7a:	f008 f8ee 	bl	800905a <HAL_UARTEx_SetTxFifoThreshold>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000e84:	f000 f972 	bl	800116c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4809      	ldr	r0, [pc, #36]	@ (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e8c:	f008 f923 	bl	80090d6 <HAL_UARTEx_SetRxFifoThreshold>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000e96:	f000 f969 	bl	800116c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e9c:	f008 f8a4 	bl	8008fe8 <HAL_UARTEx_DisableFifoMode>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000ea6:	f000 f961 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	240009b4 	.word	0x240009b4
 8000eb4:	40004800 	.word	0x40004800
 8000eb8:	000f4240 	.word	0x000f4240

08000ebc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec2:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <MX_DMA_Init+0x4c>)
 8000ec4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ec8:	4a0f      	ldr	r2, [pc, #60]	@ (8000f08 <MX_DMA_Init+0x4c>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f08 <MX_DMA_Init+0x4c>)
 8000ed4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	200b      	movs	r0, #11
 8000ee6:	f001 ffac 	bl	8002e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000eea:	200b      	movs	r0, #11
 8000eec:	f001 ffc3 	bl	8002e76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	200c      	movs	r0, #12
 8000ef6:	f001 ffa4 	bl	8002e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000efa:	200c      	movs	r0, #12
 8000efc:	f001 ffbb 	bl	8002e76 <HAL_NVIC_EnableIRQ>

}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	58024400 	.word	0x58024400

08000f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	@ 0x30
 8000f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	4b8b      	ldr	r3, [pc, #556]	@ (8001150 <MX_GPIO_Init+0x244>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f28:	4a89      	ldr	r2, [pc, #548]	@ (8001150 <MX_GPIO_Init+0x244>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f32:	4b87      	ldr	r3, [pc, #540]	@ (8001150 <MX_GPIO_Init+0x244>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f40:	4b83      	ldr	r3, [pc, #524]	@ (8001150 <MX_GPIO_Init+0x244>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f46:	4a82      	ldr	r2, [pc, #520]	@ (8001150 <MX_GPIO_Init+0x244>)
 8000f48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f50:	4b7f      	ldr	r3, [pc, #508]	@ (8001150 <MX_GPIO_Init+0x244>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b7c      	ldr	r3, [pc, #496]	@ (8001150 <MX_GPIO_Init+0x244>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f64:	4a7a      	ldr	r2, [pc, #488]	@ (8001150 <MX_GPIO_Init+0x244>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f6e:	4b78      	ldr	r3, [pc, #480]	@ (8001150 <MX_GPIO_Init+0x244>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7c:	4b74      	ldr	r3, [pc, #464]	@ (8001150 <MX_GPIO_Init+0x244>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f82:	4a73      	ldr	r2, [pc, #460]	@ (8001150 <MX_GPIO_Init+0x244>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8c:	4b70      	ldr	r3, [pc, #448]	@ (8001150 <MX_GPIO_Init+0x244>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f9a:	4b6d      	ldr	r3, [pc, #436]	@ (8001150 <MX_GPIO_Init+0x244>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa0:	4a6b      	ldr	r2, [pc, #428]	@ (8001150 <MX_GPIO_Init+0x244>)
 8000fa2:	f043 0310 	orr.w	r3, r3, #16
 8000fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000faa:	4b69      	ldr	r3, [pc, #420]	@ (8001150 <MX_GPIO_Init+0x244>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb0:	f003 0310 	and.w	r3, r3, #16
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb8:	4b65      	ldr	r3, [pc, #404]	@ (8001150 <MX_GPIO_Init+0x244>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbe:	4a64      	ldr	r2, [pc, #400]	@ (8001150 <MX_GPIO_Init+0x244>)
 8000fc0:	f043 0308 	orr.w	r3, r3, #8
 8000fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fc8:	4b61      	ldr	r3, [pc, #388]	@ (8001150 <MX_GPIO_Init+0x244>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fd6:	4b5e      	ldr	r3, [pc, #376]	@ (8001150 <MX_GPIO_Init+0x244>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fdc:	4a5c      	ldr	r2, [pc, #368]	@ (8001150 <MX_GPIO_Init+0x244>)
 8000fde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe6:	4b5a      	ldr	r3, [pc, #360]	@ (8001150 <MX_GPIO_Init+0x244>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ffa:	4856      	ldr	r0, [pc, #344]	@ (8001154 <MX_GPIO_Init+0x248>)
 8000ffc:	f003 f802 	bl	8004004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001006:	4854      	ldr	r0, [pc, #336]	@ (8001158 <MX_GPIO_Init+0x24c>)
 8001008:	f002 fffc 	bl	8004004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	2102      	movs	r1, #2
 8001010:	4852      	ldr	r0, [pc, #328]	@ (800115c <MX_GPIO_Init+0x250>)
 8001012:	f002 fff7 	bl	8004004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001016:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800101a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101c:	2300      	movs	r3, #0
 800101e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	484d      	ldr	r0, [pc, #308]	@ (8001160 <MX_GPIO_Init+0x254>)
 800102c:	f002 fe3a 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001030:	2332      	movs	r3, #50	@ 0x32
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001040:	230b      	movs	r3, #11
 8001042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4619      	mov	r1, r3
 800104a:	4845      	ldr	r0, [pc, #276]	@ (8001160 <MX_GPIO_Init+0x254>)
 800104c:	f002 fe2a 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001050:	2386      	movs	r3, #134	@ 0x86
 8001052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001060:	230b      	movs	r3, #11
 8001062:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4619      	mov	r1, r3
 800106a:	483e      	ldr	r0, [pc, #248]	@ (8001164 <MX_GPIO_Init+0x258>)
 800106c:	f002 fe1a 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001070:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	2301      	movs	r3, #1
 8001078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	4832      	ldr	r0, [pc, #200]	@ (8001154 <MX_GPIO_Init+0x248>)
 800108a:	f002 fe0b 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800108e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010a0:	230b      	movs	r3, #11
 80010a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	482a      	ldr	r0, [pc, #168]	@ (8001154 <MX_GPIO_Init+0x248>)
 80010ac:	f002 fdfa 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80010b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	4823      	ldr	r0, [pc, #140]	@ (8001158 <MX_GPIO_Init+0x24c>)
 80010ca:	f002 fdeb 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80010ce:	2380      	movs	r3, #128	@ 0x80
 80010d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	4821      	ldr	r0, [pc, #132]	@ (8001168 <MX_GPIO_Init+0x25c>)
 80010e4:	f002 fdde 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80010e8:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80010fa:	230a      	movs	r3, #10
 80010fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 031c 	add.w	r3, r7, #28
 8001102:	4619      	mov	r1, r3
 8001104:	4817      	ldr	r0, [pc, #92]	@ (8001164 <MX_GPIO_Init+0x258>)
 8001106:	f002 fdcd 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800110a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800110e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800111c:	230b      	movs	r3, #11
 800111e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	4810      	ldr	r0, [pc, #64]	@ (8001168 <MX_GPIO_Init+0x25c>)
 8001128:	f002 fdbc 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800112c:	2302      	movs	r3, #2
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001130:	2301      	movs	r3, #1
 8001132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	@ (800115c <MX_GPIO_Init+0x250>)
 8001144:	f002 fdae 	bl	8003ca4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001148:	bf00      	nop
 800114a:	3730      	adds	r7, #48	@ 0x30
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	58024400 	.word	0x58024400
 8001154:	58020400 	.word	0x58020400
 8001158:	58020c00 	.word	0x58020c00
 800115c:	58021000 	.word	0x58021000
 8001160:	58020800 	.word	0x58020800
 8001164:	58020000 	.word	0x58020000
 8001168:	58021800 	.word	0x58021800

0800116c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <Error_Handler+0x8>

08001178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <HAL_MspInit+0x5c>)
 8001180:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001184:	4a13      	ldr	r2, [pc, #76]	@ (80011d4 <HAL_MspInit+0x5c>)
 8001186:	f043 0302 	orr.w	r3, r3, #2
 800118a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800118e:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <HAL_MspInit+0x5c>)
 8001190:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 800119c:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <HAL_MspInit+0x5c>)
 800119e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011a2:	4a0c      	ldr	r2, [pc, #48]	@ (80011d4 <HAL_MspInit+0x5c>)
 80011a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011a8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011ac:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <HAL_MspInit+0x5c>)
 80011ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f000 fbc6 	bl	800194c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80011c0:	f000 fbec 	bl	800199c <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80011c4:	2000      	movs	r0, #0
 80011c6:	f000 fbd5 	bl	8001974 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	58024400 	.word	0x58024400

080011d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b0b4      	sub	sp, #208	@ 0xd0
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	22c0      	movs	r2, #192	@ 0xc0
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f008 f801 	bl	80091f0 <memset>
  if(hadc->Instance==ADC3)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a3e      	ldr	r2, [pc, #248]	@ (80012ec <HAL_ADC_MspInit+0x114>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d175      	bne.n	80012e4 <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011f8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001204:	2302      	movs	r3, #2
 8001206:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 50;
 8001208:	2332      	movs	r3, #50	@ 0x32
 800120a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800120c:	2302      	movs	r3, #2
 800120e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001210:	2302      	movs	r3, #2
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001214:	2302      	movs	r3, #2
 8001216:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001218:	2380      	movs	r3, #128	@ 0x80
 800121a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800121c:	2300      	movs	r3, #0
 800121e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	4618      	mov	r0, r3
 8001230:	f003 ff22 	bl	8005078 <HAL_RCCEx_PeriphCLKConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 800123a:	f7ff ff97 	bl	800116c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800123e:	4b2c      	ldr	r3, [pc, #176]	@ (80012f0 <HAL_ADC_MspInit+0x118>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001244:	4a2a      	ldr	r2, [pc, #168]	@ (80012f0 <HAL_ADC_MspInit+0x118>)
 8001246:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800124a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800124e:	4b28      	ldr	r3, [pc, #160]	@ (80012f0 <HAL_ADC_MspInit+0x118>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001254:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800125c:	4b24      	ldr	r3, [pc, #144]	@ (80012f0 <HAL_ADC_MspInit+0x118>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001262:	4a23      	ldr	r2, [pc, #140]	@ (80012f0 <HAL_ADC_MspInit+0x118>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800126c:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <HAL_ADC_MspInit+0x118>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800127a:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 800127e:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001282:	f000 fbaf 	bl	80019e4 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 8001286:	4b1b      	ldr	r3, [pc, #108]	@ (80012f4 <HAL_ADC_MspInit+0x11c>)
 8001288:	4a1b      	ldr	r2, [pc, #108]	@ (80012f8 <HAL_ADC_MspInit+0x120>)
 800128a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800128c:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <HAL_ADC_MspInit+0x11c>)
 800128e:	2273      	movs	r2, #115	@ 0x73
 8001290:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <HAL_ADC_MspInit+0x11c>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001298:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <HAL_ADC_MspInit+0x11c>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <HAL_ADC_MspInit+0x11c>)
 80012a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012a4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012a6:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <HAL_ADC_MspInit+0x11c>)
 80012a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012ac:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <HAL_ADC_MspInit+0x11c>)
 80012b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012b4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80012b6:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <HAL_ADC_MspInit+0x11c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80012bc:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <HAL_ADC_MspInit+0x11c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012c2:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <HAL_ADC_MspInit+0x11c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80012c8:	480a      	ldr	r0, [pc, #40]	@ (80012f4 <HAL_ADC_MspInit+0x11c>)
 80012ca:	f001 ff53 	bl	8003174 <HAL_DMA_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 80012d4:	f7ff ff4a 	bl	800116c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a06      	ldr	r2, [pc, #24]	@ (80012f4 <HAL_ADC_MspInit+0x11c>)
 80012dc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80012de:	4a05      	ldr	r2, [pc, #20]	@ (80012f4 <HAL_ADC_MspInit+0x11c>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 80012e4:	bf00      	nop
 80012e6:	37d0      	adds	r7, #208	@ 0xd0
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	58026000 	.word	0x58026000
 80012f0:	58024400 	.word	0x58024400
 80012f4:	24000864 	.word	0x24000864
 80012f8:	40020010 	.word	0x40020010

080012fc <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	@ 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a1c      	ldr	r2, [pc, #112]	@ (800138c <HAL_COMP_MspInit+0x90>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d132      	bne.n	8001384 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 800131e:	4b1c      	ldr	r3, [pc, #112]	@ (8001390 <HAL_COMP_MspInit+0x94>)
 8001320:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001324:	4a1a      	ldr	r2, [pc, #104]	@ (8001390 <HAL_COMP_MspInit+0x94>)
 8001326:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800132a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800132e:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <HAL_COMP_MspInit+0x94>)
 8001330:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001334:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800133c:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <HAL_COMP_MspInit+0x94>)
 800133e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001342:	4a13      	ldr	r2, [pc, #76]	@ (8001390 <HAL_COMP_MspInit+0x94>)
 8001344:	f043 0310 	orr.w	r3, r3, #16
 8001348:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800134c:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <HAL_COMP_MspInit+0x94>)
 800134e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001352:	f003 0310 	and.w	r3, r3, #16
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800135a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800135e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001360:	2303      	movs	r3, #3
 8001362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	4809      	ldr	r0, [pc, #36]	@ (8001394 <HAL_COMP_MspInit+0x98>)
 8001370:	f002 fc98 	bl	8003ca4 <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	2089      	movs	r0, #137	@ 0x89
 800137a:	f001 fd62 	bl	8002e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 800137e:	2089      	movs	r0, #137	@ 0x89
 8001380:	f001 fd79 	bl	8002e76 <HAL_NVIC_EnableIRQ>

  /* USER CODE END COMP2_MspInit 1 */

  }

}
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	@ 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	58003810 	.word	0x58003810
 8001390:	58024400 	.word	0x58024400
 8001394:	58021000 	.word	0x58021000

08001398 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0b      	ldr	r2, [pc, #44]	@ (80013d4 <HAL_DAC_MspInit+0x3c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d10e      	bne.n	80013c8 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80013aa:	4b0b      	ldr	r3, [pc, #44]	@ (80013d8 <HAL_DAC_MspInit+0x40>)
 80013ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013b0:	4a09      	ldr	r2, [pc, #36]	@ (80013d8 <HAL_DAC_MspInit+0x40>)
 80013b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80013b6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013ba:	4b07      	ldr	r3, [pc, #28]	@ (80013d8 <HAL_DAC_MspInit+0x40>)
 80013bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	40007400 	.word	0x40007400
 80013d8:	58024400 	.word	0x58024400

080013dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a19      	ldr	r2, [pc, #100]	@ (8001450 <HAL_TIM_Base_MspInit+0x74>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d10f      	bne.n	800140e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013ee:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <HAL_TIM_Base_MspInit+0x78>)
 80013f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013f4:	4a17      	ldr	r2, [pc, #92]	@ (8001454 <HAL_TIM_Base_MspInit+0x78>)
 80013f6:	f043 0310 	orr.w	r3, r3, #16
 80013fa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013fe:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <HAL_TIM_Base_MspInit+0x78>)
 8001400:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001404:	f003 0310 	and.w	r3, r3, #16
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800140c:	e01b      	b.n	8001446 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM7)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a11      	ldr	r2, [pc, #68]	@ (8001458 <HAL_TIM_Base_MspInit+0x7c>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d116      	bne.n	8001446 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001418:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <HAL_TIM_Base_MspInit+0x78>)
 800141a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800141e:	4a0d      	ldr	r2, [pc, #52]	@ (8001454 <HAL_TIM_Base_MspInit+0x78>)
 8001420:	f043 0320 	orr.w	r3, r3, #32
 8001424:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001428:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <HAL_TIM_Base_MspInit+0x78>)
 800142a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800142e:	f003 0320 	and.w	r3, r3, #32
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	2037      	movs	r0, #55	@ 0x37
 800143c:	f001 fd01 	bl	8002e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001440:	2037      	movs	r0, #55	@ 0x37
 8001442:	f001 fd18 	bl	8002e76 <HAL_NVIC_EnableIRQ>
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40001000 	.word	0x40001000
 8001454:	58024400 	.word	0x58024400
 8001458:	40001400 	.word	0x40001400

0800145c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b0ba      	sub	sp, #232	@ 0xe8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	22c0      	movs	r2, #192	@ 0xc0
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f007 feb7 	bl	80091f0 <memset>
  if(huart->Instance==USART3)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a41      	ldr	r2, [pc, #260]	@ (800158c <HAL_UART_MspInit+0x130>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d17b      	bne.n	8001584 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800148c:	f04f 0202 	mov.w	r2, #2
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001498:	2300      	movs	r3, #0
 800149a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	4618      	mov	r0, r3
 80014a4:	f003 fde8 	bl	8005078 <HAL_RCCEx_PeriphCLKConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80014ae:	f7ff fe5d 	bl	800116c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014b2:	4b37      	ldr	r3, [pc, #220]	@ (8001590 <HAL_UART_MspInit+0x134>)
 80014b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014b8:	4a35      	ldr	r2, [pc, #212]	@ (8001590 <HAL_UART_MspInit+0x134>)
 80014ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014be:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014c2:	4b33      	ldr	r3, [pc, #204]	@ (8001590 <HAL_UART_MspInit+0x134>)
 80014c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001590 <HAL_UART_MspInit+0x134>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d6:	4a2e      	ldr	r2, [pc, #184]	@ (8001590 <HAL_UART_MspInit+0x134>)
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001590 <HAL_UART_MspInit+0x134>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001508:	2307      	movs	r3, #7
 800150a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800150e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001512:	4619      	mov	r1, r3
 8001514:	481f      	ldr	r0, [pc, #124]	@ (8001594 <HAL_UART_MspInit+0x138>)
 8001516:	f002 fbc5 	bl	8003ca4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 800151a:	4b1f      	ldr	r3, [pc, #124]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 800151c:	4a1f      	ldr	r2, [pc, #124]	@ (800159c <HAL_UART_MspInit+0x140>)
 800151e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001520:	4b1d      	ldr	r3, [pc, #116]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 8001522:	222e      	movs	r2, #46	@ 0x2e
 8001524:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001526:	4b1c      	ldr	r3, [pc, #112]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 8001528:	2240      	movs	r2, #64	@ 0x40
 800152a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800152c:	4b1a      	ldr	r3, [pc, #104]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001532:	4b19      	ldr	r3, [pc, #100]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 8001534:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001538:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800153a:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001540:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001546:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 8001548:	2200      	movs	r2, #0
 800154a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800154c:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 800154e:	2200      	movs	r2, #0
 8001550:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001552:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 8001554:	2200      	movs	r2, #0
 8001556:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001558:	480f      	ldr	r0, [pc, #60]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 800155a:	f001 fe0b 	bl	8003174 <HAL_DMA_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001564:	f7ff fe02 	bl	800116c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a0b      	ldr	r2, [pc, #44]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 800156c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800156e:	4a0a      	ldr	r2, [pc, #40]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001574:	2200      	movs	r2, #0
 8001576:	2100      	movs	r1, #0
 8001578:	2027      	movs	r0, #39	@ 0x27
 800157a:	f001 fc62 	bl	8002e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800157e:	2027      	movs	r0, #39	@ 0x27
 8001580:	f001 fc79 	bl	8002e76 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001584:	bf00      	nop
 8001586:	37e8      	adds	r7, #232	@ 0xe8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40004800 	.word	0x40004800
 8001590:	58024400 	.word	0x58024400
 8001594:	58020c00 	.word	0x58020c00
 8001598:	24000a48 	.word	0x24000a48
 800159c:	40020028 	.word	0x40020028

080015a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <NMI_Handler+0x4>

080015a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <HardFault_Handler+0x4>

080015b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <MemManage_Handler+0x4>

080015b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <BusFault_Handler+0x4>

080015c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <UsageFault_Handler+0x4>

080015c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f6:	f000 f97d 	bl	80018f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}

080015fe <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	DMA_custom_interrupt_rx();
 8001602:	f7ff f983 	bl	800090c <DMA_custom_interrupt_rx>
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}

0800160a <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
	DMA_custom_interrupt_tx();
 800160e:	f7ff f945 	bl	800089c <DMA_custom_interrupt_tx>
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}

08001616 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	USART_custom_interrupt();
 800161a:	f7ff f9c7 	bl	80009ac <USART_custom_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(!acquiring){
 8001628:	4b14      	ldr	r3, [pc, #80]	@ (800167c <TIM7_IRQHandler+0x58>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	f083 0301 	eor.w	r3, r3, #1
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d01d      	beq.n	8001672 <TIM7_IRQHandler+0x4e>
		if(COMP12->SR & COMP_SR_C2VAL){
 8001636:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <TIM7_IRQHandler+0x5c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d013      	beq.n	800166a <TIM7_IRQHandler+0x46>
			if(pre_triggd){
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <TIM7_IRQHandler+0x60>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d013      	beq.n	8001672 <TIM7_IRQHandler+0x4e>
				acquiring = true;
 800164a:	4b0c      	ldr	r3, [pc, #48]	@ (800167c <TIM7_IRQHandler+0x58>)
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
				TIM6->CR1 |= TIM_CR1_CEN;
 8001650:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <TIM7_IRQHandler+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0c      	ldr	r2, [pc, #48]	@ (8001688 <TIM7_IRQHandler+0x64>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6013      	str	r3, [r2, #0]
				TIM7->CR1 &= ~TIM_CR1_CEN;
 800165c:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <TIM7_IRQHandler+0x68>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0a      	ldr	r2, [pc, #40]	@ (800168c <TIM7_IRQHandler+0x68>)
 8001662:	f023 0301 	bic.w	r3, r3, #1
 8001666:	6013      	str	r3, [r2, #0]
				return;
 8001668:	e006      	b.n	8001678 <TIM7_IRQHandler+0x54>
			}
		}else{
			pre_triggd = true;
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <TIM7_IRQHandler+0x60>)
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
			return;
 8001670:	e002      	b.n	8001678 <TIM7_IRQHandler+0x54>
		}
	}

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001672:	4807      	ldr	r0, [pc, #28]	@ (8001690 <TIM7_IRQHandler+0x6c>)
 8001674:	f006 fa55 	bl	8007b22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	2400002d 	.word	0x2400002d
 8001680:	58003800 	.word	0x58003800
 8001684:	2400002f 	.word	0x2400002f
 8001688:	40001000 	.word	0x40001000
 800168c:	40001400 	.word	0x40001400
 8001690:	24000968 	.word	0x24000968

08001694 <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */
	COMP_custom_interrupt();
 8001698:	f7ff f87c 	bl	8000794 <COMP_custom_interrupt>

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <COMP1_IRQHandler+0x14>)
 800169e:	f001 fa77 	bl	8002b90 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	240008dc 	.word	0x240008dc

080016ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016b0:	4b37      	ldr	r3, [pc, #220]	@ (8001790 <SystemInit+0xe4>)
 80016b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016b6:	4a36      	ldr	r2, [pc, #216]	@ (8001790 <SystemInit+0xe4>)
 80016b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016c0:	4b34      	ldr	r3, [pc, #208]	@ (8001794 <SystemInit+0xe8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	2b06      	cmp	r3, #6
 80016ca:	d807      	bhi.n	80016dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016cc:	4b31      	ldr	r3, [pc, #196]	@ (8001794 <SystemInit+0xe8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f023 030f 	bic.w	r3, r3, #15
 80016d4:	4a2f      	ldr	r2, [pc, #188]	@ (8001794 <SystemInit+0xe8>)
 80016d6:	f043 0307 	orr.w	r3, r3, #7
 80016da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001798 <SystemInit+0xec>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a2d      	ldr	r2, [pc, #180]	@ (8001798 <SystemInit+0xec>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001798 <SystemInit+0xec>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001798 <SystemInit+0xec>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4929      	ldr	r1, [pc, #164]	@ (8001798 <SystemInit+0xec>)
 80016f4:	4b29      	ldr	r3, [pc, #164]	@ (800179c <SystemInit+0xf0>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016fa:	4b26      	ldr	r3, [pc, #152]	@ (8001794 <SystemInit+0xe8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001706:	4b23      	ldr	r3, [pc, #140]	@ (8001794 <SystemInit+0xe8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 030f 	bic.w	r3, r3, #15
 800170e:	4a21      	ldr	r2, [pc, #132]	@ (8001794 <SystemInit+0xe8>)
 8001710:	f043 0307 	orr.w	r3, r3, #7
 8001714:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001716:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <SystemInit+0xec>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800171c:	4b1e      	ldr	r3, [pc, #120]	@ (8001798 <SystemInit+0xec>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001722:	4b1d      	ldr	r3, [pc, #116]	@ (8001798 <SystemInit+0xec>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001728:	4b1b      	ldr	r3, [pc, #108]	@ (8001798 <SystemInit+0xec>)
 800172a:	4a1d      	ldr	r2, [pc, #116]	@ (80017a0 <SystemInit+0xf4>)
 800172c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800172e:	4b1a      	ldr	r3, [pc, #104]	@ (8001798 <SystemInit+0xec>)
 8001730:	4a1c      	ldr	r2, [pc, #112]	@ (80017a4 <SystemInit+0xf8>)
 8001732:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001734:	4b18      	ldr	r3, [pc, #96]	@ (8001798 <SystemInit+0xec>)
 8001736:	4a1c      	ldr	r2, [pc, #112]	@ (80017a8 <SystemInit+0xfc>)
 8001738:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800173a:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <SystemInit+0xec>)
 800173c:	2200      	movs	r2, #0
 800173e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001740:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <SystemInit+0xec>)
 8001742:	4a19      	ldr	r2, [pc, #100]	@ (80017a8 <SystemInit+0xfc>)
 8001744:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001746:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <SystemInit+0xec>)
 8001748:	2200      	movs	r2, #0
 800174a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800174c:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <SystemInit+0xec>)
 800174e:	4a16      	ldr	r2, [pc, #88]	@ (80017a8 <SystemInit+0xfc>)
 8001750:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001752:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <SystemInit+0xec>)
 8001754:	2200      	movs	r2, #0
 8001756:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001758:	4b0f      	ldr	r3, [pc, #60]	@ (8001798 <SystemInit+0xec>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0e      	ldr	r2, [pc, #56]	@ (8001798 <SystemInit+0xec>)
 800175e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001762:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001764:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <SystemInit+0xec>)
 8001766:	2200      	movs	r2, #0
 8001768:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <SystemInit+0x100>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <SystemInit+0x104>)
 8001770:	4013      	ands	r3, r2
 8001772:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001776:	d202      	bcs.n	800177e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001778:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <SystemInit+0x108>)
 800177a:	2201      	movs	r2, #1
 800177c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800177e:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <SystemInit+0x10c>)
 8001780:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001784:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00
 8001794:	52002000 	.word	0x52002000
 8001798:	58024400 	.word	0x58024400
 800179c:	eaf6ed7f 	.word	0xeaf6ed7f
 80017a0:	02020200 	.word	0x02020200
 80017a4:	01ff0000 	.word	0x01ff0000
 80017a8:	01010280 	.word	0x01010280
 80017ac:	5c001000 	.word	0x5c001000
 80017b0:	ffff0000 	.word	0xffff0000
 80017b4:	51008108 	.word	0x51008108
 80017b8:	52004000 	.word	0x52004000

080017bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017c0:	f7ff ff74 	bl	80016ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c4:	480c      	ldr	r0, [pc, #48]	@ (80017f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017c6:	490d      	ldr	r1, [pc, #52]	@ (80017fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001800 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0a      	ldr	r2, [pc, #40]	@ (8001804 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001808 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ea:	f007 fd09 	bl	8009200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ee:	f7ff f90f 	bl	8000a10 <main>
  bx  lr
 80017f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017f4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017fc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001800:	080092b0 	.word	0x080092b0
  ldr r2, =_sbss
 8001804:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001808:	24000ac4 	.word	0x24000ac4

0800180c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC3_IRQHandler>
	...

08001810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001816:	2003      	movs	r0, #3
 8001818:	f001 fb08 	bl	8002e2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800181c:	f003 fa56 	bl	8004ccc <HAL_RCC_GetSysClockFreq>
 8001820:	4602      	mov	r2, r0
 8001822:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <HAL_Init+0x68>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	f003 030f 	and.w	r3, r3, #15
 800182c:	4913      	ldr	r1, [pc, #76]	@ (800187c <HAL_Init+0x6c>)
 800182e:	5ccb      	ldrb	r3, [r1, r3]
 8001830:	f003 031f 	and.w	r3, r3, #31
 8001834:	fa22 f303 	lsr.w	r3, r2, r3
 8001838:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800183a:	4b0f      	ldr	r3, [pc, #60]	@ (8001878 <HAL_Init+0x68>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	4a0e      	ldr	r2, [pc, #56]	@ (800187c <HAL_Init+0x6c>)
 8001844:	5cd3      	ldrb	r3, [r2, r3]
 8001846:	f003 031f 	and.w	r3, r3, #31
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
 8001850:	4a0b      	ldr	r2, [pc, #44]	@ (8001880 <HAL_Init+0x70>)
 8001852:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001854:	4a0b      	ldr	r2, [pc, #44]	@ (8001884 <HAL_Init+0x74>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800185a:	2000      	movs	r0, #0
 800185c:	f000 f814 	bl	8001888 <HAL_InitTick>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e002      	b.n	8001870 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800186a:	f7ff fc85 	bl	8001178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	58024400 	.word	0x58024400
 800187c:	08009260 	.word	0x08009260
 8001880:	24000004 	.word	0x24000004
 8001884:	24000000 	.word	0x24000000

08001888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001890:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <HAL_InitTick+0x60>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e021      	b.n	80018e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800189c:	4b13      	ldr	r3, [pc, #76]	@ (80018ec <HAL_InitTick+0x64>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <HAL_InitTick+0x60>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f001 faed 	bl	8002e92 <HAL_SYSTICK_Config>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e00e      	b.n	80018e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b0f      	cmp	r3, #15
 80018c6:	d80a      	bhi.n	80018de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c8:	2200      	movs	r2, #0
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f001 fab7 	bl	8002e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d4:	4a06      	ldr	r2, [pc, #24]	@ (80018f0 <HAL_InitTick+0x68>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	e000      	b.n	80018e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	2400000c 	.word	0x2400000c
 80018ec:	24000000 	.word	0x24000000
 80018f0:	24000008 	.word	0x24000008

080018f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <HAL_IncTick+0x20>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_IncTick+0x24>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4413      	add	r3, r2
 8001904:	4a04      	ldr	r2, [pc, #16]	@ (8001918 <HAL_IncTick+0x24>)
 8001906:	6013      	str	r3, [r2, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	2400000c 	.word	0x2400000c
 8001918:	24000ac0 	.word	0x24000ac0

0800191c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return uwTick;
 8001920:	4b03      	ldr	r3, [pc, #12]	@ (8001930 <HAL_GetTick+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	24000ac0 	.word	0x24000ac0

08001934 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001938:	4b03      	ldr	r3, [pc, #12]	@ (8001948 <HAL_GetREVID+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	0c1b      	lsrs	r3, r3, #16
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	5c001000 	.word	0x5c001000

0800194c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800195c:	4904      	ldr	r1, [pc, #16]	@ (8001970 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4313      	orrs	r3, r2
 8001962:	600b      	str	r3, [r1, #0]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	58003c00 	.word	0x58003c00

08001974 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 800197c:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 0202 	bic.w	r2, r3, #2
 8001984:	4904      	ldr	r1, [pc, #16]	@ (8001998 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4313      	orrs	r3, r2
 800198a:	600b      	str	r3, [r1, #0]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	58003c00 	.word	0x58003c00

0800199c <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80019a2:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a0e      	ldr	r2, [pc, #56]	@ (80019e0 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80019ae:	f7ff ffb5 	bl	800191c <HAL_GetTick>
 80019b2:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80019b4:	e008      	b.n	80019c8 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80019b6:	f7ff ffb1 	bl	800191c <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b0a      	cmp	r3, #10
 80019c2:	d901      	bls.n	80019c8 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e006      	b.n	80019d6 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80019c8:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	58003c00 	.word	0x58003c00

080019e4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80019ee:	4b07      	ldr	r3, [pc, #28]	@ (8001a0c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	401a      	ands	r2, r3
 80019f8:	4904      	ldr	r1, [pc, #16]	@ (8001a0c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	58000400 	.word	0x58000400

08001a10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	609a      	str	r2, [r3, #8]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	3360      	adds	r3, #96	@ 0x60
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001aac:	bf00      	nop
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f003 031f 	and.w	r3, r3, #31
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	611a      	str	r2, [r3, #16]
}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b087      	sub	sp, #28
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	3360      	adds	r3, #96	@ 0x60
 8001afa:	461a      	mov	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	601a      	str	r2, [r3, #0]
  }
}
 8001b14:	bf00      	nop
 8001b16:	371c      	adds	r7, #28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	3330      	adds	r3, #48	@ 0x30
 8001b30:	461a      	mov	r2, r3
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	4413      	add	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	211f      	movs	r1, #31
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	401a      	ands	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	0e9b      	lsrs	r3, r3, #26
 8001b58:	f003 011f 	and.w	r1, r3, #31
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	431a      	orrs	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b6c:	bf00      	nop
 8001b6e:	371c      	adds	r7, #28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3314      	adds	r3, #20
 8001b88:	461a      	mov	r2, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	0e5b      	lsrs	r3, r3, #25
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	4413      	add	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	0d1b      	lsrs	r3, r3, #20
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	2107      	movs	r1, #7
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	401a      	ands	r2, r3
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	0d1b      	lsrs	r3, r3, #20
 8001bb2:	f003 031f 	and.w	r3, r3, #31
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001bc2:	bf00      	nop
 8001bc4:	371c      	adds	r7, #28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001be8:	43db      	mvns	r3, r3
 8001bea:	401a      	ands	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f003 0318 	and.w	r3, r3, #24
 8001bf2:	4908      	ldr	r1, [pc, #32]	@ (8001c14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bf4:	40d9      	lsrs	r1, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	400b      	ands	r3, r1
 8001bfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	000fffff 	.word	0x000fffff

08001c18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	4b04      	ldr	r3, [pc, #16]	@ (8001c38 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6093      	str	r3, [r2, #8]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	5fffffc0 	.word	0x5fffffc0

08001c3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c50:	d101      	bne.n	8001c56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <LL_ADC_EnableInternalRegulator+0x24>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	6fffffc0 	.word	0x6fffffc0

08001c8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ca0:	d101      	bne.n	8001ca6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <LL_ADC_IsEnabled+0x18>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <LL_ADC_IsEnabled+0x1a>
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d101      	bne.n	8001cf2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d101      	bne.n	8001d18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	b089      	sub	sp, #36	@ 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e18f      	b.n	8002062 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d109      	bne.n	8001d64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff fa41 	bl	80011d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff67 	bl	8001c3c <LL_ADC_IsDeepPowerDownEnabled>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d004      	beq.n	8001d7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff4d 	bl	8001c18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ff82 	bl	8001c8c <LL_ADC_IsInternalRegulatorEnabled>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d114      	bne.n	8001db8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff ff66 	bl	8001c64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d98:	4b87      	ldr	r3, [pc, #540]	@ (8001fb8 <HAL_ADC_Init+0x290>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	099b      	lsrs	r3, r3, #6
 8001d9e:	4a87      	ldr	r2, [pc, #540]	@ (8001fbc <HAL_ADC_Init+0x294>)
 8001da0:	fba2 2303 	umull	r2, r3, r2, r3
 8001da4:	099b      	lsrs	r3, r3, #6
 8001da6:	3301      	adds	r3, #1
 8001da8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001daa:	e002      	b.n	8001db2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f9      	bne.n	8001dac <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff65 	bl	8001c8c <LL_ADC_IsInternalRegulatorEnabled>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10d      	bne.n	8001de4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dcc:	f043 0210 	orr.w	r2, r3, #16
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd8:	f043 0201 	orr.w	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff76 	bl	8001cda <LL_ADC_REG_IsConversionOngoing>
 8001dee:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f040 8129 	bne.w	8002050 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f040 8125 	bne.w	8002050 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e0e:	f043 0202 	orr.w	r2, r3, #2
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ff4a 	bl	8001cb4 <LL_ADC_IsEnabled>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d136      	bne.n	8001e94 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a65      	ldr	r2, [pc, #404]	@ (8001fc0 <HAL_ADC_Init+0x298>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d004      	beq.n	8001e3a <HAL_ADC_Init+0x112>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a63      	ldr	r2, [pc, #396]	@ (8001fc4 <HAL_ADC_Init+0x29c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d10e      	bne.n	8001e58 <HAL_ADC_Init+0x130>
 8001e3a:	4861      	ldr	r0, [pc, #388]	@ (8001fc0 <HAL_ADC_Init+0x298>)
 8001e3c:	f7ff ff3a 	bl	8001cb4 <LL_ADC_IsEnabled>
 8001e40:	4604      	mov	r4, r0
 8001e42:	4860      	ldr	r0, [pc, #384]	@ (8001fc4 <HAL_ADC_Init+0x29c>)
 8001e44:	f7ff ff36 	bl	8001cb4 <LL_ADC_IsEnabled>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4323      	orrs	r3, r4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	e008      	b.n	8001e6a <HAL_ADC_Init+0x142>
 8001e58:	485b      	ldr	r0, [pc, #364]	@ (8001fc8 <HAL_ADC_Init+0x2a0>)
 8001e5a:	f7ff ff2b 	bl	8001cb4 <LL_ADC_IsEnabled>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bf0c      	ite	eq
 8001e64:	2301      	moveq	r3, #1
 8001e66:	2300      	movne	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d012      	beq.n	8001e94 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a53      	ldr	r2, [pc, #332]	@ (8001fc0 <HAL_ADC_Init+0x298>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d004      	beq.n	8001e82 <HAL_ADC_Init+0x15a>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a51      	ldr	r2, [pc, #324]	@ (8001fc4 <HAL_ADC_Init+0x29c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d101      	bne.n	8001e86 <HAL_ADC_Init+0x15e>
 8001e82:	4a52      	ldr	r2, [pc, #328]	@ (8001fcc <HAL_ADC_Init+0x2a4>)
 8001e84:	e000      	b.n	8001e88 <HAL_ADC_Init+0x160>
 8001e86:	4a52      	ldr	r2, [pc, #328]	@ (8001fd0 <HAL_ADC_Init+0x2a8>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4610      	mov	r0, r2
 8001e90:	f7ff fdbe 	bl	8001a10 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001e94:	f7ff fd4e 	bl	8001934 <HAL_GetREVID>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d914      	bls.n	8001ecc <HAL_ADC_Init+0x1a4>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b10      	cmp	r3, #16
 8001ea8:	d110      	bne.n	8001ecc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7d5b      	ldrb	r3, [r3, #21]
 8001eae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001eb4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001eba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	7f1b      	ldrb	r3, [r3, #28]
 8001ec0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001ec2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ec4:	f043 030c 	orr.w	r3, r3, #12
 8001ec8:	61bb      	str	r3, [r7, #24]
 8001eca:	e00d      	b.n	8001ee8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7d5b      	ldrb	r3, [r3, #21]
 8001ed0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ed6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001edc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	7f1b      	ldrb	r3, [r3, #28]
 8001ee2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7f1b      	ldrb	r3, [r3, #28]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d106      	bne.n	8001efe <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	045b      	lsls	r3, r3, #17
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d009      	beq.n	8001f1a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f12:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd4 <HAL_ADC_Init+0x2ac>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	69b9      	ldr	r1, [r7, #24]
 8001f2a:	430b      	orrs	r3, r1
 8001f2c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fed1 	bl	8001cda <LL_ADC_REG_IsConversionOngoing>
 8001f38:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fede 	bl	8001d00 <LL_ADC_INJ_IsConversionOngoing>
 8001f44:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d15f      	bne.n	800200c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d15c      	bne.n	800200c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	7d1b      	ldrb	r3, [r3, #20]
 8001f56:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd8 <HAL_ADC_Init+0x2b0>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	69b9      	ldr	r1, [r7, #24]
 8001f70:	430b      	orrs	r3, r1
 8001f72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d130      	bne.n	8001fe0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f82:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	4b14      	ldr	r3, [pc, #80]	@ (8001fdc <HAL_ADC_Init+0x2b4>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f92:	3a01      	subs	r2, #1
 8001f94:	0411      	lsls	r1, r2, #16
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f9a:	4311      	orrs	r1, r2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fa0:	4311      	orrs	r1, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	611a      	str	r2, [r3, #16]
 8001fb4:	e01c      	b.n	8001ff0 <HAL_ADC_Init+0x2c8>
 8001fb6:	bf00      	nop
 8001fb8:	24000000 	.word	0x24000000
 8001fbc:	053e2d63 	.word	0x053e2d63
 8001fc0:	40022000 	.word	0x40022000
 8001fc4:	40022100 	.word	0x40022100
 8001fc8:	58026000 	.word	0x58026000
 8001fcc:	40022300 	.word	0x40022300
 8001fd0:	58026300 	.word	0x58026300
 8001fd4:	fff0c003 	.word	0xfff0c003
 8001fd8:	ffffbffc 	.word	0xffffbffc
 8001fdc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691a      	ldr	r2, [r3, #16]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0201 	bic.w	r2, r2, #1
 8001fee:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 fb8c 	bl	8002724 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d10c      	bne.n	800202e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	f023 010f 	bic.w	r1, r3, #15
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	1e5a      	subs	r2, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	631a      	str	r2, [r3, #48]	@ 0x30
 800202c:	e007      	b.n	800203e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 020f 	bic.w	r2, r2, #15
 800203c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002042:	f023 0303 	bic.w	r3, r3, #3
 8002046:	f043 0201 	orr.w	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	655a      	str	r2, [r3, #84]	@ 0x54
 800204e:	e007      	b.n	8002060 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002054:	f043 0210 	orr.w	r2, r3, #16
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002060:	7ffb      	ldrb	r3, [r7, #31]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3724      	adds	r7, #36	@ 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd90      	pop	{r4, r7, pc}
 800206a:	bf00      	nop

0800206c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b0a1      	sub	sp, #132	@ 0x84
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a65      	ldr	r2, [pc, #404]	@ (800221c <HAL_ADC_ConfigChannel+0x1b0>)
 8002086:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x2a>
 8002092:	2302      	movs	r3, #2
 8002094:	e32e      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x688>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fe19 	bl	8001cda <LL_ADC_REG_IsConversionOngoing>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 8313 	bne.w	80026d6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	db2c      	blt.n	8002112 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d108      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x6a>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	0e9b      	lsrs	r3, r3, #26
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	2201      	movs	r2, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	e016      	b.n	8002104 <HAL_ADC_ConfigChannel+0x98>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020e6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80020ee:	2320      	movs	r3, #32
 80020f0:	e003      	b.n	80020fa <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80020f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020f4:	fab3 f383 	clz	r3, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	2201      	movs	r2, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	69d1      	ldr	r1, [r2, #28]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	430b      	orrs	r3, r1
 8002110:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	f7ff fcfe 	bl	8001b20 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff fdd6 	bl	8001cda <LL_ADC_REG_IsConversionOngoing>
 800212e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fde3 	bl	8001d00 <LL_ADC_INJ_IsConversionOngoing>
 800213a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800213c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800213e:	2b00      	cmp	r3, #0
 8002140:	f040 80b8 	bne.w	80022b4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002144:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002146:	2b00      	cmp	r3, #0
 8002148:	f040 80b4 	bne.w	80022b4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	6819      	ldr	r1, [r3, #0]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	461a      	mov	r2, r3
 800215a:	f7ff fd0d 	bl	8001b78 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800215e:	4b30      	ldr	r3, [pc, #192]	@ (8002220 <HAL_ADC_ConfigChannel+0x1b4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002166:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800216a:	d10b      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x118>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	e01d      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x154>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10b      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x13e>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	e00a      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x154>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	695a      	ldr	r2, [r3, #20]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	089b      	lsrs	r3, r3, #2
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d02c      	beq.n	8002224 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6919      	ldr	r1, [r3, #16]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021d8:	f7ff fc4e 	bl	8001a78 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	6919      	ldr	r1, [r3, #16]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	7e5b      	ldrb	r3, [r3, #25]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d102      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x186>
 80021ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80021f0:	e000      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x188>
 80021f2:	2300      	movs	r3, #0
 80021f4:	461a      	mov	r2, r3
 80021f6:	f7ff fc78 	bl	8001aea <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6919      	ldr	r1, [r3, #16]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	7e1b      	ldrb	r3, [r3, #24]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d102      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x1a4>
 800220a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800220e:	e000      	b.n	8002212 <HAL_ADC_ConfigChannel+0x1a6>
 8002210:	2300      	movs	r3, #0
 8002212:	461a      	mov	r2, r3
 8002214:	f7ff fc50 	bl	8001ab8 <LL_ADC_SetDataRightShift>
 8002218:	e04c      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x248>
 800221a:	bf00      	nop
 800221c:	47ff0000 	.word	0x47ff0000
 8002220:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800222a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	069b      	lsls	r3, r3, #26
 8002234:	429a      	cmp	r2, r3
 8002236:	d107      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002246:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800224e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	069b      	lsls	r3, r3, #26
 8002258:	429a      	cmp	r2, r3
 800225a:	d107      	bne.n	800226c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800226a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002272:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	069b      	lsls	r3, r3, #26
 800227c:	429a      	cmp	r2, r3
 800227e:	d107      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800228e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002296:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	069b      	lsls	r3, r3, #26
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d107      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80022b2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fcfb 	bl	8001cb4 <LL_ADC_IsEnabled>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f040 8211 	bne.w	80026e8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6819      	ldr	r1, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	461a      	mov	r2, r3
 80022d4:	f7ff fc7c 	bl	8001bd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4aa1      	ldr	r2, [pc, #644]	@ (8002564 <HAL_ADC_ConfigChannel+0x4f8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	f040 812e 	bne.w	8002540 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10b      	bne.n	800230c <HAL_ADC_ConfigChannel+0x2a0>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	0e9b      	lsrs	r3, r3, #26
 80022fa:	3301      	adds	r3, #1
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	2b09      	cmp	r3, #9
 8002302:	bf94      	ite	ls
 8002304:	2301      	movls	r3, #1
 8002306:	2300      	movhi	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	e019      	b.n	8002340 <HAL_ADC_ConfigChannel+0x2d4>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800231a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800231c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800231e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002324:	2320      	movs	r3, #32
 8002326:	e003      	b.n	8002330 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002328:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	3301      	adds	r3, #1
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	2b09      	cmp	r3, #9
 8002338:	bf94      	ite	ls
 800233a:	2301      	movls	r3, #1
 800233c:	2300      	movhi	r3, #0
 800233e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002340:	2b00      	cmp	r3, #0
 8002342:	d079      	beq.n	8002438 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800234c:	2b00      	cmp	r3, #0
 800234e:	d107      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x2f4>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	0e9b      	lsrs	r3, r3, #26
 8002356:	3301      	adds	r3, #1
 8002358:	069b      	lsls	r3, r3, #26
 800235a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800235e:	e015      	b.n	800238c <HAL_ADC_ConfigChannel+0x320>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800236e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002370:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002378:	2320      	movs	r3, #32
 800237a:	e003      	b.n	8002384 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800237c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	3301      	adds	r3, #1
 8002386:	069b      	lsls	r3, r3, #26
 8002388:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002394:	2b00      	cmp	r3, #0
 8002396:	d109      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x340>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	0e9b      	lsrs	r3, r3, #26
 800239e:	3301      	adds	r3, #1
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	2101      	movs	r1, #1
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	e017      	b.n	80023dc <HAL_ADC_ConfigChannel+0x370>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80023ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023bc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80023be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80023c4:	2320      	movs	r3, #32
 80023c6:	e003      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80023c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	3301      	adds	r3, #1
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	2101      	movs	r1, #1
 80023d8:	fa01 f303 	lsl.w	r3, r1, r3
 80023dc:	ea42 0103 	orr.w	r1, r2, r3
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10a      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x396>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	0e9b      	lsrs	r3, r3, #26
 80023f2:	3301      	adds	r3, #1
 80023f4:	f003 021f 	and.w	r2, r3, #31
 80023f8:	4613      	mov	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	051b      	lsls	r3, r3, #20
 8002400:	e018      	b.n	8002434 <HAL_ADC_ConfigChannel+0x3c8>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002412:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800241a:	2320      	movs	r3, #32
 800241c:	e003      	b.n	8002426 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800241e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002420:	fab3 f383 	clz	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	3301      	adds	r3, #1
 8002428:	f003 021f 	and.w	r2, r3, #31
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002434:	430b      	orrs	r3, r1
 8002436:	e07e      	b.n	8002536 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002440:	2b00      	cmp	r3, #0
 8002442:	d107      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x3e8>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0e9b      	lsrs	r3, r3, #26
 800244a:	3301      	adds	r3, #1
 800244c:	069b      	lsls	r3, r3, #26
 800244e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002452:	e015      	b.n	8002480 <HAL_ADC_ConfigChannel+0x414>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800246c:	2320      	movs	r3, #32
 800246e:	e003      	b.n	8002478 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	3301      	adds	r3, #1
 800247a:	069b      	lsls	r3, r3, #26
 800247c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002488:	2b00      	cmp	r3, #0
 800248a:	d109      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x434>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	0e9b      	lsrs	r3, r3, #26
 8002492:	3301      	adds	r3, #1
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	2101      	movs	r1, #1
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	e017      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x464>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa93 f3a3 	rbit	r3, r3
 80024ac:	61bb      	str	r3, [r7, #24]
  return result;
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80024b8:	2320      	movs	r3, #32
 80024ba:	e003      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	3301      	adds	r3, #1
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	2101      	movs	r1, #1
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	ea42 0103 	orr.w	r1, r2, r3
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10d      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x490>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	0e9b      	lsrs	r3, r3, #26
 80024e6:	3301      	adds	r3, #1
 80024e8:	f003 021f 	and.w	r2, r3, #31
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	3b1e      	subs	r3, #30
 80024f4:	051b      	lsls	r3, r3, #20
 80024f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024fa:	e01b      	b.n	8002534 <HAL_ADC_ConfigChannel+0x4c8>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	60fb      	str	r3, [r7, #12]
  return result;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002514:	2320      	movs	r3, #32
 8002516:	e003      	b.n	8002520 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3301      	adds	r3, #1
 8002522:	f003 021f 	and.w	r2, r3, #31
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	3b1e      	subs	r3, #30
 800252e:	051b      	lsls	r3, r3, #20
 8002530:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002534:	430b      	orrs	r3, r1
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	6892      	ldr	r2, [r2, #8]
 800253a:	4619      	mov	r1, r3
 800253c:	f7ff fb1c 	bl	8001b78 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	f280 80cf 	bge.w	80026e8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a06      	ldr	r2, [pc, #24]	@ (8002568 <HAL_ADC_ConfigChannel+0x4fc>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d004      	beq.n	800255e <HAL_ADC_ConfigChannel+0x4f2>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a04      	ldr	r2, [pc, #16]	@ (800256c <HAL_ADC_ConfigChannel+0x500>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d10a      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x508>
 800255e:	4b04      	ldr	r3, [pc, #16]	@ (8002570 <HAL_ADC_ConfigChannel+0x504>)
 8002560:	e009      	b.n	8002576 <HAL_ADC_ConfigChannel+0x50a>
 8002562:	bf00      	nop
 8002564:	47ff0000 	.word	0x47ff0000
 8002568:	40022000 	.word	0x40022000
 800256c:	40022100 	.word	0x40022100
 8002570:	40022300 	.word	0x40022300
 8002574:	4b61      	ldr	r3, [pc, #388]	@ (80026fc <HAL_ADC_ConfigChannel+0x690>)
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fa70 	bl	8001a5c <LL_ADC_GetCommonPathInternalCh>
 800257c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a5f      	ldr	r2, [pc, #380]	@ (8002700 <HAL_ADC_ConfigChannel+0x694>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d004      	beq.n	8002592 <HAL_ADC_ConfigChannel+0x526>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a5d      	ldr	r2, [pc, #372]	@ (8002704 <HAL_ADC_ConfigChannel+0x698>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d10e      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x544>
 8002592:	485b      	ldr	r0, [pc, #364]	@ (8002700 <HAL_ADC_ConfigChannel+0x694>)
 8002594:	f7ff fb8e 	bl	8001cb4 <LL_ADC_IsEnabled>
 8002598:	4604      	mov	r4, r0
 800259a:	485a      	ldr	r0, [pc, #360]	@ (8002704 <HAL_ADC_ConfigChannel+0x698>)
 800259c:	f7ff fb8a 	bl	8001cb4 <LL_ADC_IsEnabled>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4323      	orrs	r3, r4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bf0c      	ite	eq
 80025a8:	2301      	moveq	r3, #1
 80025aa:	2300      	movne	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	e008      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x556>
 80025b0:	4855      	ldr	r0, [pc, #340]	@ (8002708 <HAL_ADC_ConfigChannel+0x69c>)
 80025b2:	f7ff fb7f 	bl	8001cb4 <LL_ADC_IsEnabled>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bf0c      	ite	eq
 80025bc:	2301      	moveq	r3, #1
 80025be:	2300      	movne	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d07d      	beq.n	80026c2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a50      	ldr	r2, [pc, #320]	@ (800270c <HAL_ADC_ConfigChannel+0x6a0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d130      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x5c6>
 80025d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d12b      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a4a      	ldr	r2, [pc, #296]	@ (8002708 <HAL_ADC_ConfigChannel+0x69c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	f040 8081 	bne.w	80026e8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a45      	ldr	r2, [pc, #276]	@ (8002700 <HAL_ADC_ConfigChannel+0x694>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d004      	beq.n	80025fa <HAL_ADC_ConfigChannel+0x58e>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a43      	ldr	r2, [pc, #268]	@ (8002704 <HAL_ADC_ConfigChannel+0x698>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d101      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x592>
 80025fa:	4a45      	ldr	r2, [pc, #276]	@ (8002710 <HAL_ADC_ConfigChannel+0x6a4>)
 80025fc:	e000      	b.n	8002600 <HAL_ADC_ConfigChannel+0x594>
 80025fe:	4a3f      	ldr	r2, [pc, #252]	@ (80026fc <HAL_ADC_ConfigChannel+0x690>)
 8002600:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002602:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002606:	4619      	mov	r1, r3
 8002608:	4610      	mov	r0, r2
 800260a:	f7ff fa14 	bl	8001a36 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800260e:	4b41      	ldr	r3, [pc, #260]	@ (8002714 <HAL_ADC_ConfigChannel+0x6a8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	099b      	lsrs	r3, r3, #6
 8002614:	4a40      	ldr	r2, [pc, #256]	@ (8002718 <HAL_ADC_ConfigChannel+0x6ac>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	099b      	lsrs	r3, r3, #6
 800261c:	3301      	adds	r3, #1
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002622:	e002      	b.n	800262a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	3b01      	subs	r3, #1
 8002628:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f9      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002630:	e05a      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a39      	ldr	r2, [pc, #228]	@ (800271c <HAL_ADC_ConfigChannel+0x6b0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d11e      	bne.n	800267a <HAL_ADC_ConfigChannel+0x60e>
 800263c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800263e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d119      	bne.n	800267a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <HAL_ADC_ConfigChannel+0x69c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d14b      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a2a      	ldr	r2, [pc, #168]	@ (8002700 <HAL_ADC_ConfigChannel+0x694>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d004      	beq.n	8002664 <HAL_ADC_ConfigChannel+0x5f8>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a29      	ldr	r2, [pc, #164]	@ (8002704 <HAL_ADC_ConfigChannel+0x698>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d101      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x5fc>
 8002664:	4a2a      	ldr	r2, [pc, #168]	@ (8002710 <HAL_ADC_ConfigChannel+0x6a4>)
 8002666:	e000      	b.n	800266a <HAL_ADC_ConfigChannel+0x5fe>
 8002668:	4a24      	ldr	r2, [pc, #144]	@ (80026fc <HAL_ADC_ConfigChannel+0x690>)
 800266a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800266c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002670:	4619      	mov	r1, r3
 8002672:	4610      	mov	r0, r2
 8002674:	f7ff f9df 	bl	8001a36 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002678:	e036      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a28      	ldr	r2, [pc, #160]	@ (8002720 <HAL_ADC_ConfigChannel+0x6b4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d131      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x67c>
 8002684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d12c      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a1d      	ldr	r2, [pc, #116]	@ (8002708 <HAL_ADC_ConfigChannel+0x69c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d127      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a18      	ldr	r2, [pc, #96]	@ (8002700 <HAL_ADC_ConfigChannel+0x694>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d004      	beq.n	80026ac <HAL_ADC_ConfigChannel+0x640>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a17      	ldr	r2, [pc, #92]	@ (8002704 <HAL_ADC_ConfigChannel+0x698>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d101      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x644>
 80026ac:	4a18      	ldr	r2, [pc, #96]	@ (8002710 <HAL_ADC_ConfigChannel+0x6a4>)
 80026ae:	e000      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x646>
 80026b0:	4a12      	ldr	r2, [pc, #72]	@ (80026fc <HAL_ADC_ConfigChannel+0x690>)
 80026b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026b8:	4619      	mov	r1, r3
 80026ba:	4610      	mov	r0, r2
 80026bc:	f7ff f9bb 	bl	8001a36 <LL_ADC_SetCommonPathInternalCh>
 80026c0:	e012      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c6:	f043 0220 	orr.w	r2, r3, #32
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80026d4:	e008      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026da:	f043 0220 	orr.w	r2, r3, #32
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80026f0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3784      	adds	r7, #132	@ 0x84
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd90      	pop	{r4, r7, pc}
 80026fc:	58026300 	.word	0x58026300
 8002700:	40022000 	.word	0x40022000
 8002704:	40022100 	.word	0x40022100
 8002708:	58026000 	.word	0x58026000
 800270c:	cb840000 	.word	0xcb840000
 8002710:	40022300 	.word	0x40022300
 8002714:	24000000 	.word	0x24000000
 8002718:	053e2d63 	.word	0x053e2d63
 800271c:	c7520000 	.word	0xc7520000
 8002720:	cfb80000 	.word	0xcfb80000

08002724 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a7a      	ldr	r2, [pc, #488]	@ (800291c <ADC_ConfigureBoostMode+0x1f8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d004      	beq.n	8002740 <ADC_ConfigureBoostMode+0x1c>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a79      	ldr	r2, [pc, #484]	@ (8002920 <ADC_ConfigureBoostMode+0x1fc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d109      	bne.n	8002754 <ADC_ConfigureBoostMode+0x30>
 8002740:	4b78      	ldr	r3, [pc, #480]	@ (8002924 <ADC_ConfigureBoostMode+0x200>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002748:	2b00      	cmp	r3, #0
 800274a:	bf14      	ite	ne
 800274c:	2301      	movne	r3, #1
 800274e:	2300      	moveq	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	e008      	b.n	8002766 <ADC_ConfigureBoostMode+0x42>
 8002754:	4b74      	ldr	r3, [pc, #464]	@ (8002928 <ADC_ConfigureBoostMode+0x204>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800275c:	2b00      	cmp	r3, #0
 800275e:	bf14      	ite	ne
 8002760:	2301      	movne	r3, #1
 8002762:	2300      	moveq	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d01c      	beq.n	80027a4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800276a:	f002 fc29 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>
 800276e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002778:	d010      	beq.n	800279c <ADC_ConfigureBoostMode+0x78>
 800277a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800277e:	d873      	bhi.n	8002868 <ADC_ConfigureBoostMode+0x144>
 8002780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002784:	d002      	beq.n	800278c <ADC_ConfigureBoostMode+0x68>
 8002786:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800278a:	d16d      	bne.n	8002868 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	0c1b      	lsrs	r3, r3, #16
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	fbb2 f3f3 	udiv	r3, r2, r3
 8002798:	60fb      	str	r3, [r7, #12]
        break;
 800279a:	e068      	b.n	800286e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	089b      	lsrs	r3, r3, #2
 80027a0:	60fb      	str	r3, [r7, #12]
        break;
 80027a2:	e064      	b.n	800286e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80027a4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80027a8:	f04f 0100 	mov.w	r1, #0
 80027ac:	f003 fe6e 	bl	800648c <HAL_RCCEx_GetPeriphCLKFreq>
 80027b0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80027ba:	d051      	beq.n	8002860 <ADC_ConfigureBoostMode+0x13c>
 80027bc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80027c0:	d854      	bhi.n	800286c <ADC_ConfigureBoostMode+0x148>
 80027c2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80027c6:	d047      	beq.n	8002858 <ADC_ConfigureBoostMode+0x134>
 80027c8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80027cc:	d84e      	bhi.n	800286c <ADC_ConfigureBoostMode+0x148>
 80027ce:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80027d2:	d03d      	beq.n	8002850 <ADC_ConfigureBoostMode+0x12c>
 80027d4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80027d8:	d848      	bhi.n	800286c <ADC_ConfigureBoostMode+0x148>
 80027da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027de:	d033      	beq.n	8002848 <ADC_ConfigureBoostMode+0x124>
 80027e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027e4:	d842      	bhi.n	800286c <ADC_ConfigureBoostMode+0x148>
 80027e6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80027ea:	d029      	beq.n	8002840 <ADC_ConfigureBoostMode+0x11c>
 80027ec:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80027f0:	d83c      	bhi.n	800286c <ADC_ConfigureBoostMode+0x148>
 80027f2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80027f6:	d01a      	beq.n	800282e <ADC_ConfigureBoostMode+0x10a>
 80027f8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80027fc:	d836      	bhi.n	800286c <ADC_ConfigureBoostMode+0x148>
 80027fe:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002802:	d014      	beq.n	800282e <ADC_ConfigureBoostMode+0x10a>
 8002804:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002808:	d830      	bhi.n	800286c <ADC_ConfigureBoostMode+0x148>
 800280a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800280e:	d00e      	beq.n	800282e <ADC_ConfigureBoostMode+0x10a>
 8002810:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002814:	d82a      	bhi.n	800286c <ADC_ConfigureBoostMode+0x148>
 8002816:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800281a:	d008      	beq.n	800282e <ADC_ConfigureBoostMode+0x10a>
 800281c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002820:	d824      	bhi.n	800286c <ADC_ConfigureBoostMode+0x148>
 8002822:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002826:	d002      	beq.n	800282e <ADC_ConfigureBoostMode+0x10a>
 8002828:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800282c:	d11e      	bne.n	800286c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	0c9b      	lsrs	r3, r3, #18
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	fbb2 f3f3 	udiv	r3, r2, r3
 800283c:	60fb      	str	r3, [r7, #12]
        break;
 800283e:	e016      	b.n	800286e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	60fb      	str	r3, [r7, #12]
        break;
 8002846:	e012      	b.n	800286e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	60fb      	str	r3, [r7, #12]
        break;
 800284e:	e00e      	b.n	800286e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	099b      	lsrs	r3, r3, #6
 8002854:	60fb      	str	r3, [r7, #12]
        break;
 8002856:	e00a      	b.n	800286e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	09db      	lsrs	r3, r3, #7
 800285c:	60fb      	str	r3, [r7, #12]
        break;
 800285e:	e006      	b.n	800286e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	60fb      	str	r3, [r7, #12]
        break;
 8002866:	e002      	b.n	800286e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002868:	bf00      	nop
 800286a:	e000      	b.n	800286e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800286c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800286e:	f7ff f861 	bl	8001934 <HAL_GetREVID>
 8002872:	4603      	mov	r3, r0
 8002874:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002878:	4293      	cmp	r3, r2
 800287a:	d815      	bhi.n	80028a8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4a2b      	ldr	r2, [pc, #172]	@ (800292c <ADC_ConfigureBoostMode+0x208>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d908      	bls.n	8002896 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002892:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002894:	e03e      	b.n	8002914 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028a4:	609a      	str	r2, [r3, #8]
}
 80028a6:	e035      	b.n	8002914 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	085b      	lsrs	r3, r3, #1
 80028ac:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002930 <ADC_ConfigureBoostMode+0x20c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d808      	bhi.n	80028c8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80028c4:	609a      	str	r2, [r3, #8]
}
 80028c6:	e025      	b.n	8002914 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002934 <ADC_ConfigureBoostMode+0x210>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d80a      	bhi.n	80028e6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028e2:	609a      	str	r2, [r3, #8]
}
 80028e4:	e016      	b.n	8002914 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4a13      	ldr	r2, [pc, #76]	@ (8002938 <ADC_ConfigureBoostMode+0x214>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d80a      	bhi.n	8002904 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002900:	609a      	str	r2, [r3, #8]
}
 8002902:	e007      	b.n	8002914 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002912:	609a      	str	r2, [r3, #8]
}
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40022000 	.word	0x40022000
 8002920:	40022100 	.word	0x40022100
 8002924:	40022300 	.word	0x40022300
 8002928:	58026300 	.word	0x58026300
 800292c:	01312d00 	.word	0x01312d00
 8002930:	005f5e10 	.word	0x005f5e10
 8002934:	00bebc20 	.word	0x00bebc20
 8002938:	017d7840 	.word	0x017d7840

0800293c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d102      	bne.n	8002958 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	77fb      	strb	r3, [r7, #31]
 8002956:	e10e      	b.n	8002b76 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002962:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002966:	d102      	bne.n	800296e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	77fb      	strb	r3, [r7, #31]
 800296c:	e103      	b.n	8002b76 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d109      	bne.n	800298e <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7fe fcb7 	bl	80012fc <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80029a2:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 80029a8:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 80029ae:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 80029b4:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b6e      	ldr	r3, [pc, #440]	@ (8002b80 <HAL_COMP_Init+0x244>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	6979      	ldr	r1, [r7, #20]
 80029ce:	430b      	orrs	r3, r1
 80029d0:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b10      	cmp	r3, #16
 80029d8:	d108      	bne.n	80029ec <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0210 	orr.w	r2, r2, #16
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	e007      	b.n	80029fc <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0210 	bic.w	r2, r2, #16
 80029fa:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d016      	beq.n	8002a38 <HAL_COMP_Init+0xfc>
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d013      	beq.n	8002a38 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a10:	4b5c      	ldr	r3, [pc, #368]	@ (8002b84 <HAL_COMP_Init+0x248>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	099b      	lsrs	r3, r3, #6
 8002a16:	4a5c      	ldr	r2, [pc, #368]	@ (8002b88 <HAL_COMP_Init+0x24c>)
 8002a18:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1c:	099b      	lsrs	r3, r3, #6
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 8002a2a:	e002      	b.n	8002a32 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1f9      	bne.n	8002a2c <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a53      	ldr	r2, [pc, #332]	@ (8002b8c <HAL_COMP_Init+0x250>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d102      	bne.n	8002a48 <HAL_COMP_Init+0x10c>
 8002a42:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002a46:	e001      	b.n	8002a4c <HAL_COMP_Init+0x110>
 8002a48:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a4c:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d06d      	beq.n	8002b36 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	f003 0310 	and.w	r3, r3, #16
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 8002a66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]
 8002a76:	e008      	b.n	8002a8a <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8002a78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a86:	4013      	ands	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d008      	beq.n	8002aa8 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8002a96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	604b      	str	r3, [r1, #4]
 8002aa6:	e008      	b.n	8002aba <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8002aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 8002aba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8002ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ad4:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002ad8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8002ae4:	e00a      	b.n	8002afc <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8002ae6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aea:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002af6:	4013      	ands	r3, r2
 8002af8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8002b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b0c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002b10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8002b1c:	e021      	b.n	8002b62 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 8002b1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b22:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b2e:	4013      	ands	r3, r2
 8002b30:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8002b34:	e015      	b.n	8002b62 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8002b36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b3a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b46:	4013      	ands	r3, r2
 8002b48:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8002b4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b50:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d103      	bne.n	8002b76 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 8002b76:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3720      	adds	r7, #32
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	f0e8cce1 	.word	0xf0e8cce1
 8002b84:	24000000 	.word	0x24000000
 8002b88:	053e2d63 	.word	0x053e2d63
 8002b8c:	5800380c 	.word	0x5800380c

08002b90 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a33      	ldr	r2, [pc, #204]	@ (8002c6c <HAL_COMP_IRQHandler+0xdc>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d102      	bne.n	8002ba8 <HAL_COMP_IRQHandler+0x18>
 8002ba2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002ba6:	e001      	b.n	8002bac <HAL_COMP_IRQHandler+0x1c>
 8002ba8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002bac:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 8002bae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d014      	beq.n	8002be8 <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 8002bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8002c70 <HAL_COMP_IRQHandler+0xe0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0310 	and.w	r3, r3, #16
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d006      	beq.n	8002bd8 <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8002bca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bce:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8002bd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8002bd6:	e004      	b.n	8002be2 <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 8002bd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f848 	bl	8002c78 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf2:	2b40      	cmp	r3, #64	@ 0x40
 8002bf4:	d136      	bne.n	8002c64 <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 8002bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8002c74 <HAL_COMP_IRQHandler+0xe4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c02:	d101      	bne.n	8002c08 <HAL_COMP_IRQHandler+0x78>
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <HAL_COMP_IRQHandler+0x7a>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 8002c0e:	4b19      	ldr	r3, [pc, #100]	@ (8002c74 <HAL_COMP_IRQHandler+0xe4>)
 8002c10:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002c14:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c24:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 8002c26:	4b13      	ldr	r3, [pc, #76]	@ (8002c74 <HAL_COMP_IRQHandler+0xe4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c32:	d101      	bne.n	8002c38 <HAL_COMP_IRQHandler+0xa8>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <HAL_COMP_IRQHandler+0xaa>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00b      	beq.n	8002c56 <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c74 <HAL_COMP_IRQHandler+0xe4>)
 8002c40:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c44:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c54:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f80a 	bl	8002c78 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	5800380c 	.word	0x5800380c
 8002c70:	58003810 	.word	0x58003810
 8002c74:	58003800 	.word	0x58003800

08002c78 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
   /* Prevent unused argument(s) compilation warning */
   UNUSED(hcomp);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <__NVIC_SetPriorityGrouping+0x40>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cb4:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cba:	4a04      	ldr	r2, [pc, #16]	@ (8002ccc <__NVIC_SetPriorityGrouping+0x40>)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	60d3      	str	r3, [r2, #12]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000ed00 	.word	0xe000ed00
 8002cd0:	05fa0000 	.word	0x05fa0000

08002cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd8:	4b04      	ldr	r3, [pc, #16]	@ (8002cec <__NVIC_GetPriorityGrouping+0x18>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	0a1b      	lsrs	r3, r3, #8
 8002cde:	f003 0307 	and.w	r3, r3, #7
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	db0b      	blt.n	8002d1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	f003 021f 	and.w	r2, r3, #31
 8002d08:	4907      	ldr	r1, [pc, #28]	@ (8002d28 <__NVIC_EnableIRQ+0x38>)
 8002d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	2001      	movs	r0, #1
 8002d12:	fa00 f202 	lsl.w	r2, r0, r2
 8002d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000e100 	.word	0xe000e100

08002d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	6039      	str	r1, [r7, #0]
 8002d36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	db0a      	blt.n	8002d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	490c      	ldr	r1, [pc, #48]	@ (8002d78 <__NVIC_SetPriority+0x4c>)
 8002d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d4a:	0112      	lsls	r2, r2, #4
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	440b      	add	r3, r1
 8002d50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d54:	e00a      	b.n	8002d6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	4908      	ldr	r1, [pc, #32]	@ (8002d7c <__NVIC_SetPriority+0x50>)
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	3b04      	subs	r3, #4
 8002d64:	0112      	lsls	r2, r2, #4
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	440b      	add	r3, r1
 8002d6a:	761a      	strb	r2, [r3, #24]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	e000e100 	.word	0xe000e100
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b089      	sub	sp, #36	@ 0x24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f1c3 0307 	rsb	r3, r3, #7
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	bf28      	it	cs
 8002d9e:	2304      	movcs	r3, #4
 8002da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3304      	adds	r3, #4
 8002da6:	2b06      	cmp	r3, #6
 8002da8:	d902      	bls.n	8002db0 <NVIC_EncodePriority+0x30>
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3b03      	subs	r3, #3
 8002dae:	e000      	b.n	8002db2 <NVIC_EncodePriority+0x32>
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	f04f 32ff 	mov.w	r2, #4294967295
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd2:	43d9      	mvns	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd8:	4313      	orrs	r3, r2
         );
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3724      	adds	r7, #36	@ 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002df8:	d301      	bcc.n	8002dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e00f      	b.n	8002e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8002e28 <SysTick_Config+0x40>)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e06:	210f      	movs	r1, #15
 8002e08:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0c:	f7ff ff8e 	bl	8002d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e10:	4b05      	ldr	r3, [pc, #20]	@ (8002e28 <SysTick_Config+0x40>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e16:	4b04      	ldr	r3, [pc, #16]	@ (8002e28 <SysTick_Config+0x40>)
 8002e18:	2207      	movs	r2, #7
 8002e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	e000e010 	.word	0xe000e010

08002e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff ff29 	bl	8002c8c <__NVIC_SetPriorityGrouping>
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b086      	sub	sp, #24
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	4603      	mov	r3, r0
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e50:	f7ff ff40 	bl	8002cd4 <__NVIC_GetPriorityGrouping>
 8002e54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	6978      	ldr	r0, [r7, #20]
 8002e5c:	f7ff ff90 	bl	8002d80 <NVIC_EncodePriority>
 8002e60:	4602      	mov	r2, r0
 8002e62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff ff5f 	bl	8002d2c <__NVIC_SetPriority>
}
 8002e6e:	bf00      	nop
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff33 	bl	8002cf0 <__NVIC_EnableIRQ>
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff ffa4 	bl	8002de8 <SysTick_Config>
 8002ea0:	4603      	mov	r3, r0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e014      	b.n	8002ee6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	791b      	ldrb	r3, [r3, #4]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d105      	bne.n	8002ed2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7fe fa63 	bl	8001398 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	@ 0x28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <HAL_DAC_ConfigChannel+0x1e>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e12a      	b.n	8003168 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	795b      	ldrb	r3, [r3, #5]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_DAC_ConfigChannel+0x2e>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e124      	b.n	8003168 <HAL_DAC_ConfigChannel+0x278>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2202      	movs	r2, #2
 8002f28:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d17a      	bne.n	8003028 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002f32:	f7fe fcf3 	bl	800191c <HAL_GetTick>
 8002f36:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d13d      	bne.n	8002fba <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f3e:	e018      	b.n	8002f72 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f40:	f7fe fcec 	bl	800191c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d911      	bls.n	8002f72 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f54:	4b86      	ldr	r3, [pc, #536]	@ (8003170 <HAL_DAC_ConfigChannel+0x280>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00a      	beq.n	8002f72 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	f043 0208 	orr.w	r2, r3, #8
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e0fa      	b.n	8003168 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f78:	4b7d      	ldr	r3, [pc, #500]	@ (8003170 <HAL_DAC_ConfigChannel+0x280>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1df      	bne.n	8002f40 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	6992      	ldr	r2, [r2, #24]
 8002f88:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f8a:	e020      	b.n	8002fce <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f8c:	f7fe fcc6 	bl	800191c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d90f      	bls.n	8002fba <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	da0a      	bge.n	8002fba <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f043 0208 	orr.w	r2, r3, #8
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e0d6      	b.n	8003168 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	dbe3      	blt.n	8002f8c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	6992      	ldr	r2, [r2, #24]
 8002fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002fde:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	ea02 0103 	and.w	r1, r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	69da      	ldr	r2, [r3, #28]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	21ff      	movs	r1, #255	@ 0xff
 800300a:	fa01 f303 	lsl.w	r3, r1, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	ea02 0103 	and.w	r1, r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	6a1a      	ldr	r2, [r3, #32]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	409a      	lsls	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d11d      	bne.n	800306c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003036:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	221f      	movs	r2, #31
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003072:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2207      	movs	r2, #7
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d102      	bne.n	8003096 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8003090:	2300      	movs	r3, #0
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
 8003094:	e00f      	b.n	80030b6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d102      	bne.n	80030a4 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800309e:	2301      	movs	r3, #1
 80030a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030a2:	e008      	b.n	80030b6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d102      	bne.n	80030b2 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80030ac:	2301      	movs	r3, #1
 80030ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b0:	e001      	b.n	80030b6 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	4313      	orrs	r3, r2
 80030c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c2:	4313      	orrs	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6819      	ldr	r1, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43da      	mvns	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	400a      	ands	r2, r1
 80030fc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6819      	ldr	r1, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	22c0      	movs	r2, #192	@ 0xc0
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43da      	mvns	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	400a      	ands	r2, r1
 8003156:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003164:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003168:	4618      	mov	r0, r3
 800316a:	3728      	adds	r7, #40	@ 0x28
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20008000 	.word	0x20008000

08003174 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800317c:	f7fe fbce 	bl	800191c <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e316      	b.n	80037ba <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a66      	ldr	r2, [pc, #408]	@ (800332c <HAL_DMA_Init+0x1b8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d04a      	beq.n	800322c <HAL_DMA_Init+0xb8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a65      	ldr	r2, [pc, #404]	@ (8003330 <HAL_DMA_Init+0x1bc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d045      	beq.n	800322c <HAL_DMA_Init+0xb8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a63      	ldr	r2, [pc, #396]	@ (8003334 <HAL_DMA_Init+0x1c0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d040      	beq.n	800322c <HAL_DMA_Init+0xb8>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a62      	ldr	r2, [pc, #392]	@ (8003338 <HAL_DMA_Init+0x1c4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d03b      	beq.n	800322c <HAL_DMA_Init+0xb8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a60      	ldr	r2, [pc, #384]	@ (800333c <HAL_DMA_Init+0x1c8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d036      	beq.n	800322c <HAL_DMA_Init+0xb8>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a5f      	ldr	r2, [pc, #380]	@ (8003340 <HAL_DMA_Init+0x1cc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d031      	beq.n	800322c <HAL_DMA_Init+0xb8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a5d      	ldr	r2, [pc, #372]	@ (8003344 <HAL_DMA_Init+0x1d0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d02c      	beq.n	800322c <HAL_DMA_Init+0xb8>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a5c      	ldr	r2, [pc, #368]	@ (8003348 <HAL_DMA_Init+0x1d4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d027      	beq.n	800322c <HAL_DMA_Init+0xb8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a5a      	ldr	r2, [pc, #360]	@ (800334c <HAL_DMA_Init+0x1d8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d022      	beq.n	800322c <HAL_DMA_Init+0xb8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a59      	ldr	r2, [pc, #356]	@ (8003350 <HAL_DMA_Init+0x1dc>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d01d      	beq.n	800322c <HAL_DMA_Init+0xb8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a57      	ldr	r2, [pc, #348]	@ (8003354 <HAL_DMA_Init+0x1e0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d018      	beq.n	800322c <HAL_DMA_Init+0xb8>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a56      	ldr	r2, [pc, #344]	@ (8003358 <HAL_DMA_Init+0x1e4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d013      	beq.n	800322c <HAL_DMA_Init+0xb8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a54      	ldr	r2, [pc, #336]	@ (800335c <HAL_DMA_Init+0x1e8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00e      	beq.n	800322c <HAL_DMA_Init+0xb8>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a53      	ldr	r2, [pc, #332]	@ (8003360 <HAL_DMA_Init+0x1ec>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d009      	beq.n	800322c <HAL_DMA_Init+0xb8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a51      	ldr	r2, [pc, #324]	@ (8003364 <HAL_DMA_Init+0x1f0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <HAL_DMA_Init+0xb8>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a50      	ldr	r2, [pc, #320]	@ (8003368 <HAL_DMA_Init+0x1f4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d101      	bne.n	8003230 <HAL_DMA_Init+0xbc>
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <HAL_DMA_Init+0xbe>
 8003230:	2300      	movs	r3, #0
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 813b 	beq.w	80034ae <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a37      	ldr	r2, [pc, #220]	@ (800332c <HAL_DMA_Init+0x1b8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d04a      	beq.n	80032e8 <HAL_DMA_Init+0x174>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a36      	ldr	r2, [pc, #216]	@ (8003330 <HAL_DMA_Init+0x1bc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d045      	beq.n	80032e8 <HAL_DMA_Init+0x174>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a34      	ldr	r2, [pc, #208]	@ (8003334 <HAL_DMA_Init+0x1c0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d040      	beq.n	80032e8 <HAL_DMA_Init+0x174>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a33      	ldr	r2, [pc, #204]	@ (8003338 <HAL_DMA_Init+0x1c4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d03b      	beq.n	80032e8 <HAL_DMA_Init+0x174>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a31      	ldr	r2, [pc, #196]	@ (800333c <HAL_DMA_Init+0x1c8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d036      	beq.n	80032e8 <HAL_DMA_Init+0x174>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a30      	ldr	r2, [pc, #192]	@ (8003340 <HAL_DMA_Init+0x1cc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d031      	beq.n	80032e8 <HAL_DMA_Init+0x174>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a2e      	ldr	r2, [pc, #184]	@ (8003344 <HAL_DMA_Init+0x1d0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d02c      	beq.n	80032e8 <HAL_DMA_Init+0x174>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a2d      	ldr	r2, [pc, #180]	@ (8003348 <HAL_DMA_Init+0x1d4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d027      	beq.n	80032e8 <HAL_DMA_Init+0x174>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a2b      	ldr	r2, [pc, #172]	@ (800334c <HAL_DMA_Init+0x1d8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d022      	beq.n	80032e8 <HAL_DMA_Init+0x174>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a2a      	ldr	r2, [pc, #168]	@ (8003350 <HAL_DMA_Init+0x1dc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d01d      	beq.n	80032e8 <HAL_DMA_Init+0x174>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a28      	ldr	r2, [pc, #160]	@ (8003354 <HAL_DMA_Init+0x1e0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d018      	beq.n	80032e8 <HAL_DMA_Init+0x174>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a27      	ldr	r2, [pc, #156]	@ (8003358 <HAL_DMA_Init+0x1e4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d013      	beq.n	80032e8 <HAL_DMA_Init+0x174>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a25      	ldr	r2, [pc, #148]	@ (800335c <HAL_DMA_Init+0x1e8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00e      	beq.n	80032e8 <HAL_DMA_Init+0x174>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a24      	ldr	r2, [pc, #144]	@ (8003360 <HAL_DMA_Init+0x1ec>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d009      	beq.n	80032e8 <HAL_DMA_Init+0x174>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a22      	ldr	r2, [pc, #136]	@ (8003364 <HAL_DMA_Init+0x1f0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d004      	beq.n	80032e8 <HAL_DMA_Init+0x174>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a21      	ldr	r2, [pc, #132]	@ (8003368 <HAL_DMA_Init+0x1f4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d108      	bne.n	80032fa <HAL_DMA_Init+0x186>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0201 	bic.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	e007      	b.n	800330a <HAL_DMA_Init+0x196>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0201 	bic.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800330a:	e02f      	b.n	800336c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800330c:	f7fe fb06 	bl	800191c <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b05      	cmp	r3, #5
 8003318:	d928      	bls.n	800336c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2220      	movs	r2, #32
 800331e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2203      	movs	r2, #3
 8003324:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e246      	b.n	80037ba <HAL_DMA_Init+0x646>
 800332c:	40020010 	.word	0x40020010
 8003330:	40020028 	.word	0x40020028
 8003334:	40020040 	.word	0x40020040
 8003338:	40020058 	.word	0x40020058
 800333c:	40020070 	.word	0x40020070
 8003340:	40020088 	.word	0x40020088
 8003344:	400200a0 	.word	0x400200a0
 8003348:	400200b8 	.word	0x400200b8
 800334c:	40020410 	.word	0x40020410
 8003350:	40020428 	.word	0x40020428
 8003354:	40020440 	.word	0x40020440
 8003358:	40020458 	.word	0x40020458
 800335c:	40020470 	.word	0x40020470
 8003360:	40020488 	.word	0x40020488
 8003364:	400204a0 	.word	0x400204a0
 8003368:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1c8      	bne.n	800330c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4b83      	ldr	r3, [pc, #524]	@ (8003594 <HAL_DMA_Init+0x420>)
 8003386:	4013      	ands	r3, r2
 8003388:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003392:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033aa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d107      	bne.n	80033d0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c8:	4313      	orrs	r3, r2
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80033d0:	4b71      	ldr	r3, [pc, #452]	@ (8003598 <HAL_DMA_Init+0x424>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	4b71      	ldr	r3, [pc, #452]	@ (800359c <HAL_DMA_Init+0x428>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033dc:	d328      	bcc.n	8003430 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b28      	cmp	r3, #40	@ 0x28
 80033e4:	d903      	bls.n	80033ee <HAL_DMA_Init+0x27a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80033ec:	d917      	bls.n	800341e <HAL_DMA_Init+0x2aa>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80033f4:	d903      	bls.n	80033fe <HAL_DMA_Init+0x28a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b42      	cmp	r3, #66	@ 0x42
 80033fc:	d90f      	bls.n	800341e <HAL_DMA_Init+0x2aa>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b46      	cmp	r3, #70	@ 0x46
 8003404:	d903      	bls.n	800340e <HAL_DMA_Init+0x29a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b48      	cmp	r3, #72	@ 0x48
 800340c:	d907      	bls.n	800341e <HAL_DMA_Init+0x2aa>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b4e      	cmp	r3, #78	@ 0x4e
 8003414:	d905      	bls.n	8003422 <HAL_DMA_Init+0x2ae>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b52      	cmp	r3, #82	@ 0x52
 800341c:	d801      	bhi.n	8003422 <HAL_DMA_Init+0x2ae>
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <HAL_DMA_Init+0x2b0>
 8003422:	2300      	movs	r3, #0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800342e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f023 0307 	bic.w	r3, r3, #7
 8003446:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003456:	2b04      	cmp	r3, #4
 8003458:	d117      	bne.n	800348a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00e      	beq.n	800348a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fa8f 	bl	8003990 <DMA_CheckFifoParam>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2240      	movs	r2, #64	@ 0x40
 800347c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e197      	b.n	80037ba <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f9ca 	bl	800382c <DMA_CalcBaseAndBitshift>
 8003498:	4603      	mov	r3, r0
 800349a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	223f      	movs	r2, #63	@ 0x3f
 80034a6:	409a      	lsls	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	e0cd      	b.n	800364a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a3b      	ldr	r2, [pc, #236]	@ (80035a0 <HAL_DMA_Init+0x42c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d022      	beq.n	80034fe <HAL_DMA_Init+0x38a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a39      	ldr	r2, [pc, #228]	@ (80035a4 <HAL_DMA_Init+0x430>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d01d      	beq.n	80034fe <HAL_DMA_Init+0x38a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a38      	ldr	r2, [pc, #224]	@ (80035a8 <HAL_DMA_Init+0x434>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d018      	beq.n	80034fe <HAL_DMA_Init+0x38a>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a36      	ldr	r2, [pc, #216]	@ (80035ac <HAL_DMA_Init+0x438>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d013      	beq.n	80034fe <HAL_DMA_Init+0x38a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a35      	ldr	r2, [pc, #212]	@ (80035b0 <HAL_DMA_Init+0x43c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00e      	beq.n	80034fe <HAL_DMA_Init+0x38a>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a33      	ldr	r2, [pc, #204]	@ (80035b4 <HAL_DMA_Init+0x440>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d009      	beq.n	80034fe <HAL_DMA_Init+0x38a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a32      	ldr	r2, [pc, #200]	@ (80035b8 <HAL_DMA_Init+0x444>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d004      	beq.n	80034fe <HAL_DMA_Init+0x38a>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a30      	ldr	r2, [pc, #192]	@ (80035bc <HAL_DMA_Init+0x448>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d101      	bne.n	8003502 <HAL_DMA_Init+0x38e>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <HAL_DMA_Init+0x390>
 8003502:	2300      	movs	r3, #0
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 8097 	beq.w	8003638 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a24      	ldr	r2, [pc, #144]	@ (80035a0 <HAL_DMA_Init+0x42c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d021      	beq.n	8003558 <HAL_DMA_Init+0x3e4>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a22      	ldr	r2, [pc, #136]	@ (80035a4 <HAL_DMA_Init+0x430>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d01c      	beq.n	8003558 <HAL_DMA_Init+0x3e4>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a21      	ldr	r2, [pc, #132]	@ (80035a8 <HAL_DMA_Init+0x434>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d017      	beq.n	8003558 <HAL_DMA_Init+0x3e4>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1f      	ldr	r2, [pc, #124]	@ (80035ac <HAL_DMA_Init+0x438>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d012      	beq.n	8003558 <HAL_DMA_Init+0x3e4>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1e      	ldr	r2, [pc, #120]	@ (80035b0 <HAL_DMA_Init+0x43c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00d      	beq.n	8003558 <HAL_DMA_Init+0x3e4>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1c      	ldr	r2, [pc, #112]	@ (80035b4 <HAL_DMA_Init+0x440>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d008      	beq.n	8003558 <HAL_DMA_Init+0x3e4>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1b      	ldr	r2, [pc, #108]	@ (80035b8 <HAL_DMA_Init+0x444>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d003      	beq.n	8003558 <HAL_DMA_Init+0x3e4>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a19      	ldr	r2, [pc, #100]	@ (80035bc <HAL_DMA_Init+0x448>)
 8003556:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	4b13      	ldr	r3, [pc, #76]	@ (80035c0 <HAL_DMA_Init+0x44c>)
 8003574:	4013      	ands	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b40      	cmp	r3, #64	@ 0x40
 800357e:	d021      	beq.n	80035c4 <HAL_DMA_Init+0x450>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b80      	cmp	r3, #128	@ 0x80
 8003586:	d102      	bne.n	800358e <HAL_DMA_Init+0x41a>
 8003588:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800358c:	e01b      	b.n	80035c6 <HAL_DMA_Init+0x452>
 800358e:	2300      	movs	r3, #0
 8003590:	e019      	b.n	80035c6 <HAL_DMA_Init+0x452>
 8003592:	bf00      	nop
 8003594:	fe10803f 	.word	0xfe10803f
 8003598:	5c001000 	.word	0x5c001000
 800359c:	ffff0000 	.word	0xffff0000
 80035a0:	58025408 	.word	0x58025408
 80035a4:	5802541c 	.word	0x5802541c
 80035a8:	58025430 	.word	0x58025430
 80035ac:	58025444 	.word	0x58025444
 80035b0:	58025458 	.word	0x58025458
 80035b4:	5802546c 	.word	0x5802546c
 80035b8:	58025480 	.word	0x58025480
 80035bc:	58025494 	.word	0x58025494
 80035c0:	fffe000f 	.word	0xfffe000f
 80035c4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68d2      	ldr	r2, [r2, #12]
 80035ca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035f4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	461a      	mov	r2, r3
 800360a:	4b6e      	ldr	r3, [pc, #440]	@ (80037c4 <HAL_DMA_Init+0x650>)
 800360c:	4413      	add	r3, r2
 800360e:	4a6e      	ldr	r2, [pc, #440]	@ (80037c8 <HAL_DMA_Init+0x654>)
 8003610:	fba2 2303 	umull	r2, r3, r2, r3
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	009a      	lsls	r2, r3, #2
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f905 	bl	800382c <DMA_CalcBaseAndBitshift>
 8003622:	4603      	mov	r3, r0
 8003624:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362a:	f003 031f 	and.w	r3, r3, #31
 800362e:	2201      	movs	r2, #1
 8003630:	409a      	lsls	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	e008      	b.n	800364a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2240      	movs	r2, #64	@ 0x40
 800363c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2203      	movs	r2, #3
 8003642:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e0b7      	b.n	80037ba <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a5f      	ldr	r2, [pc, #380]	@ (80037cc <HAL_DMA_Init+0x658>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d072      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a5d      	ldr	r2, [pc, #372]	@ (80037d0 <HAL_DMA_Init+0x65c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d06d      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a5c      	ldr	r2, [pc, #368]	@ (80037d4 <HAL_DMA_Init+0x660>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d068      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a5a      	ldr	r2, [pc, #360]	@ (80037d8 <HAL_DMA_Init+0x664>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d063      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a59      	ldr	r2, [pc, #356]	@ (80037dc <HAL_DMA_Init+0x668>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d05e      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a57      	ldr	r2, [pc, #348]	@ (80037e0 <HAL_DMA_Init+0x66c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d059      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a56      	ldr	r2, [pc, #344]	@ (80037e4 <HAL_DMA_Init+0x670>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d054      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a54      	ldr	r2, [pc, #336]	@ (80037e8 <HAL_DMA_Init+0x674>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d04f      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a53      	ldr	r2, [pc, #332]	@ (80037ec <HAL_DMA_Init+0x678>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d04a      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a51      	ldr	r2, [pc, #324]	@ (80037f0 <HAL_DMA_Init+0x67c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d045      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a50      	ldr	r2, [pc, #320]	@ (80037f4 <HAL_DMA_Init+0x680>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d040      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a4e      	ldr	r2, [pc, #312]	@ (80037f8 <HAL_DMA_Init+0x684>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d03b      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a4d      	ldr	r2, [pc, #308]	@ (80037fc <HAL_DMA_Init+0x688>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d036      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a4b      	ldr	r2, [pc, #300]	@ (8003800 <HAL_DMA_Init+0x68c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d031      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a4a      	ldr	r2, [pc, #296]	@ (8003804 <HAL_DMA_Init+0x690>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d02c      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a48      	ldr	r2, [pc, #288]	@ (8003808 <HAL_DMA_Init+0x694>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d027      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a47      	ldr	r2, [pc, #284]	@ (800380c <HAL_DMA_Init+0x698>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d022      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a45      	ldr	r2, [pc, #276]	@ (8003810 <HAL_DMA_Init+0x69c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d01d      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a44      	ldr	r2, [pc, #272]	@ (8003814 <HAL_DMA_Init+0x6a0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d018      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a42      	ldr	r2, [pc, #264]	@ (8003818 <HAL_DMA_Init+0x6a4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d013      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a41      	ldr	r2, [pc, #260]	@ (800381c <HAL_DMA_Init+0x6a8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d00e      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a3f      	ldr	r2, [pc, #252]	@ (8003820 <HAL_DMA_Init+0x6ac>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d009      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a3e      	ldr	r2, [pc, #248]	@ (8003824 <HAL_DMA_Init+0x6b0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d004      	beq.n	800373a <HAL_DMA_Init+0x5c6>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a3c      	ldr	r2, [pc, #240]	@ (8003828 <HAL_DMA_Init+0x6b4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d101      	bne.n	800373e <HAL_DMA_Init+0x5ca>
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <HAL_DMA_Init+0x5cc>
 800373e:	2300      	movs	r3, #0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d032      	beq.n	80037aa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f99f 	bl	8003a88 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b80      	cmp	r3, #128	@ 0x80
 8003750:	d102      	bne.n	8003758 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800376c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d010      	beq.n	8003798 <HAL_DMA_Init+0x624>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b08      	cmp	r3, #8
 800377c:	d80c      	bhi.n	8003798 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fa1c 	bl	8003bbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	e008      	b.n	80037aa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	a7fdabf8 	.word	0xa7fdabf8
 80037c8:	cccccccd 	.word	0xcccccccd
 80037cc:	40020010 	.word	0x40020010
 80037d0:	40020028 	.word	0x40020028
 80037d4:	40020040 	.word	0x40020040
 80037d8:	40020058 	.word	0x40020058
 80037dc:	40020070 	.word	0x40020070
 80037e0:	40020088 	.word	0x40020088
 80037e4:	400200a0 	.word	0x400200a0
 80037e8:	400200b8 	.word	0x400200b8
 80037ec:	40020410 	.word	0x40020410
 80037f0:	40020428 	.word	0x40020428
 80037f4:	40020440 	.word	0x40020440
 80037f8:	40020458 	.word	0x40020458
 80037fc:	40020470 	.word	0x40020470
 8003800:	40020488 	.word	0x40020488
 8003804:	400204a0 	.word	0x400204a0
 8003808:	400204b8 	.word	0x400204b8
 800380c:	58025408 	.word	0x58025408
 8003810:	5802541c 	.word	0x5802541c
 8003814:	58025430 	.word	0x58025430
 8003818:	58025444 	.word	0x58025444
 800381c:	58025458 	.word	0x58025458
 8003820:	5802546c 	.word	0x5802546c
 8003824:	58025480 	.word	0x58025480
 8003828:	58025494 	.word	0x58025494

0800382c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a42      	ldr	r2, [pc, #264]	@ (8003944 <DMA_CalcBaseAndBitshift+0x118>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d04a      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a41      	ldr	r2, [pc, #260]	@ (8003948 <DMA_CalcBaseAndBitshift+0x11c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d045      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a3f      	ldr	r2, [pc, #252]	@ (800394c <DMA_CalcBaseAndBitshift+0x120>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d040      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a3e      	ldr	r2, [pc, #248]	@ (8003950 <DMA_CalcBaseAndBitshift+0x124>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d03b      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a3c      	ldr	r2, [pc, #240]	@ (8003954 <DMA_CalcBaseAndBitshift+0x128>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d036      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a3b      	ldr	r2, [pc, #236]	@ (8003958 <DMA_CalcBaseAndBitshift+0x12c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d031      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a39      	ldr	r2, [pc, #228]	@ (800395c <DMA_CalcBaseAndBitshift+0x130>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d02c      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a38      	ldr	r2, [pc, #224]	@ (8003960 <DMA_CalcBaseAndBitshift+0x134>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d027      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a36      	ldr	r2, [pc, #216]	@ (8003964 <DMA_CalcBaseAndBitshift+0x138>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d022      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a35      	ldr	r2, [pc, #212]	@ (8003968 <DMA_CalcBaseAndBitshift+0x13c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d01d      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a33      	ldr	r2, [pc, #204]	@ (800396c <DMA_CalcBaseAndBitshift+0x140>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d018      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a32      	ldr	r2, [pc, #200]	@ (8003970 <DMA_CalcBaseAndBitshift+0x144>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d013      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a30      	ldr	r2, [pc, #192]	@ (8003974 <DMA_CalcBaseAndBitshift+0x148>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00e      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a2f      	ldr	r2, [pc, #188]	@ (8003978 <DMA_CalcBaseAndBitshift+0x14c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d009      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a2d      	ldr	r2, [pc, #180]	@ (800397c <DMA_CalcBaseAndBitshift+0x150>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d004      	beq.n	80038d4 <DMA_CalcBaseAndBitshift+0xa8>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003980 <DMA_CalcBaseAndBitshift+0x154>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d101      	bne.n	80038d8 <DMA_CalcBaseAndBitshift+0xac>
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <DMA_CalcBaseAndBitshift+0xae>
 80038d8:	2300      	movs	r3, #0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d024      	beq.n	8003928 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	3b10      	subs	r3, #16
 80038e6:	4a27      	ldr	r2, [pc, #156]	@ (8003984 <DMA_CalcBaseAndBitshift+0x158>)
 80038e8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	4a24      	ldr	r2, [pc, #144]	@ (8003988 <DMA_CalcBaseAndBitshift+0x15c>)
 80038f8:	5cd3      	ldrb	r3, [r2, r3]
 80038fa:	461a      	mov	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b03      	cmp	r3, #3
 8003904:	d908      	bls.n	8003918 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	4b1f      	ldr	r3, [pc, #124]	@ (800398c <DMA_CalcBaseAndBitshift+0x160>)
 800390e:	4013      	ands	r3, r2
 8003910:	1d1a      	adds	r2, r3, #4
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	659a      	str	r2, [r3, #88]	@ 0x58
 8003916:	e00d      	b.n	8003934 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	4b1b      	ldr	r3, [pc, #108]	@ (800398c <DMA_CalcBaseAndBitshift+0x160>)
 8003920:	4013      	ands	r3, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6593      	str	r3, [r2, #88]	@ 0x58
 8003926:	e005      	b.n	8003934 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	40020010 	.word	0x40020010
 8003948:	40020028 	.word	0x40020028
 800394c:	40020040 	.word	0x40020040
 8003950:	40020058 	.word	0x40020058
 8003954:	40020070 	.word	0x40020070
 8003958:	40020088 	.word	0x40020088
 800395c:	400200a0 	.word	0x400200a0
 8003960:	400200b8 	.word	0x400200b8
 8003964:	40020410 	.word	0x40020410
 8003968:	40020428 	.word	0x40020428
 800396c:	40020440 	.word	0x40020440
 8003970:	40020458 	.word	0x40020458
 8003974:	40020470 	.word	0x40020470
 8003978:	40020488 	.word	0x40020488
 800397c:	400204a0 	.word	0x400204a0
 8003980:	400204b8 	.word	0x400204b8
 8003984:	aaaaaaab 	.word	0xaaaaaaab
 8003988:	08009270 	.word	0x08009270
 800398c:	fffffc00 	.word	0xfffffc00

08003990 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d120      	bne.n	80039e6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d858      	bhi.n	8003a5e <DMA_CheckFifoParam+0xce>
 80039ac:	a201      	add	r2, pc, #4	@ (adr r2, 80039b4 <DMA_CheckFifoParam+0x24>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039c5 	.word	0x080039c5
 80039b8:	080039d7 	.word	0x080039d7
 80039bc:	080039c5 	.word	0x080039c5
 80039c0:	08003a5f 	.word	0x08003a5f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d048      	beq.n	8003a62 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80039d4:	e045      	b.n	8003a62 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80039de:	d142      	bne.n	8003a66 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80039e4:	e03f      	b.n	8003a66 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039ee:	d123      	bne.n	8003a38 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d838      	bhi.n	8003a6a <DMA_CheckFifoParam+0xda>
 80039f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003a00 <DMA_CheckFifoParam+0x70>)
 80039fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fe:	bf00      	nop
 8003a00:	08003a11 	.word	0x08003a11
 8003a04:	08003a17 	.word	0x08003a17
 8003a08:	08003a11 	.word	0x08003a11
 8003a0c:	08003a29 	.word	0x08003a29
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
        break;
 8003a14:	e030      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d025      	beq.n	8003a6e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a26:	e022      	b.n	8003a6e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a30:	d11f      	bne.n	8003a72 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a36:	e01c      	b.n	8003a72 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d902      	bls.n	8003a46 <DMA_CheckFifoParam+0xb6>
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d003      	beq.n	8003a4c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003a44:	e018      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	73fb      	strb	r3, [r7, #15]
        break;
 8003a4a:	e015      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00e      	beq.n	8003a76 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8003a5c:	e00b      	b.n	8003a76 <DMA_CheckFifoParam+0xe6>
        break;
 8003a5e:	bf00      	nop
 8003a60:	e00a      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
        break;
 8003a62:	bf00      	nop
 8003a64:	e008      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
        break;
 8003a66:	bf00      	nop
 8003a68:	e006      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
        break;
 8003a6a:	bf00      	nop
 8003a6c:	e004      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
        break;
 8003a6e:	bf00      	nop
 8003a70:	e002      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
        break;
 8003a72:	bf00      	nop
 8003a74:	e000      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
    break;
 8003a76:	bf00      	nop
    }
  }

  return status;
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop

08003a88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a38      	ldr	r2, [pc, #224]	@ (8003b7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d022      	beq.n	8003ae6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a36      	ldr	r2, [pc, #216]	@ (8003b80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d01d      	beq.n	8003ae6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a35      	ldr	r2, [pc, #212]	@ (8003b84 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d018      	beq.n	8003ae6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a33      	ldr	r2, [pc, #204]	@ (8003b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a32      	ldr	r2, [pc, #200]	@ (8003b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00e      	beq.n	8003ae6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a30      	ldr	r2, [pc, #192]	@ (8003b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d009      	beq.n	8003ae6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2f      	ldr	r2, [pc, #188]	@ (8003b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a2d      	ldr	r2, [pc, #180]	@ (8003b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d101      	bne.n	8003aea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003aea:	2300      	movs	r3, #0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01a      	beq.n	8003b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	3b08      	subs	r3, #8
 8003af8:	4a28      	ldr	r2, [pc, #160]	@ (8003b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	091b      	lsrs	r3, r3, #4
 8003b00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4b26      	ldr	r3, [pc, #152]	@ (8003ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003b06:	4413      	add	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a24      	ldr	r2, [pc, #144]	@ (8003ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003b14:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	409a      	lsls	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003b24:	e024      	b.n	8003b70 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	3b10      	subs	r3, #16
 8003b2e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003b30:	fba2 2303 	umull	r2, r3, r2, r3
 8003b34:	091b      	lsrs	r3, r3, #4
 8003b36:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4a1c      	ldr	r2, [pc, #112]	@ (8003bac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d806      	bhi.n	8003b4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4a1b      	ldr	r2, [pc, #108]	@ (8003bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d902      	bls.n	8003b4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	3308      	adds	r3, #8
 8003b4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4b18      	ldr	r3, [pc, #96]	@ (8003bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	461a      	mov	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a16      	ldr	r2, [pc, #88]	@ (8003bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003b60:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	2201      	movs	r2, #1
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b70:	bf00      	nop
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	58025408 	.word	0x58025408
 8003b80:	5802541c 	.word	0x5802541c
 8003b84:	58025430 	.word	0x58025430
 8003b88:	58025444 	.word	0x58025444
 8003b8c:	58025458 	.word	0x58025458
 8003b90:	5802546c 	.word	0x5802546c
 8003b94:	58025480 	.word	0x58025480
 8003b98:	58025494 	.word	0x58025494
 8003b9c:	cccccccd 	.word	0xcccccccd
 8003ba0:	16009600 	.word	0x16009600
 8003ba4:	58025880 	.word	0x58025880
 8003ba8:	aaaaaaab 	.word	0xaaaaaaab
 8003bac:	400204b8 	.word	0x400204b8
 8003bb0:	4002040f 	.word	0x4002040f
 8003bb4:	10008200 	.word	0x10008200
 8003bb8:	40020880 	.word	0x40020880

08003bbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d04a      	beq.n	8003c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d847      	bhi.n	8003c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a25      	ldr	r2, [pc, #148]	@ (8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d022      	beq.n	8003c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a24      	ldr	r2, [pc, #144]	@ (8003c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d01d      	beq.n	8003c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a22      	ldr	r2, [pc, #136]	@ (8003c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d018      	beq.n	8003c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a21      	ldr	r2, [pc, #132]	@ (8003c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d013      	beq.n	8003c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1f      	ldr	r2, [pc, #124]	@ (8003c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00e      	beq.n	8003c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a1e      	ldr	r2, [pc, #120]	@ (8003c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d009      	beq.n	8003c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a1c      	ldr	r2, [pc, #112]	@ (8003c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d004      	beq.n	8003c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a1b      	ldr	r2, [pc, #108]	@ (8003c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d101      	bne.n	8003c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4b17      	ldr	r3, [pc, #92]	@ (8003c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a15      	ldr	r2, [pc, #84]	@ (8003c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003c44:	671a      	str	r2, [r3, #112]	@ 0x70
 8003c46:	e009      	b.n	8003c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4b14      	ldr	r3, [pc, #80]	@ (8003c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	461a      	mov	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a11      	ldr	r2, [pc, #68]	@ (8003ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003c5a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	2201      	movs	r2, #1
 8003c62:	409a      	lsls	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003c68:	bf00      	nop
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	58025408 	.word	0x58025408
 8003c78:	5802541c 	.word	0x5802541c
 8003c7c:	58025430 	.word	0x58025430
 8003c80:	58025444 	.word	0x58025444
 8003c84:	58025458 	.word	0x58025458
 8003c88:	5802546c 	.word	0x5802546c
 8003c8c:	58025480 	.word	0x58025480
 8003c90:	58025494 	.word	0x58025494
 8003c94:	1600963f 	.word	0x1600963f
 8003c98:	58025940 	.word	0x58025940
 8003c9c:	1000823f 	.word	0x1000823f
 8003ca0:	40020940 	.word	0x40020940

08003ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b089      	sub	sp, #36	@ 0x24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003cb2:	4b89      	ldr	r3, [pc, #548]	@ (8003ed8 <HAL_GPIO_Init+0x234>)
 8003cb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003cb6:	e194      	b.n	8003fe2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 8186 	beq.w	8003fdc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d005      	beq.n	8003ce8 <HAL_GPIO_Init+0x44>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d130      	bne.n	8003d4a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d1e:	2201      	movs	r2, #1
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43db      	mvns	r3, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	091b      	lsrs	r3, r3, #4
 8003d34:	f003 0201 	and.w	r2, r3, #1
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d017      	beq.n	8003d86 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	2203      	movs	r2, #3
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d123      	bne.n	8003dda <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	08da      	lsrs	r2, r3, #3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3208      	adds	r2, #8
 8003d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	220f      	movs	r2, #15
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	43db      	mvns	r3, r3
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	4013      	ands	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	08da      	lsrs	r2, r3, #3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3208      	adds	r2, #8
 8003dd4:	69b9      	ldr	r1, [r7, #24]
 8003dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	2203      	movs	r2, #3
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	43db      	mvns	r3, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4013      	ands	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 0203 	and.w	r2, r3, #3
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 80e0 	beq.w	8003fdc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8003edc <HAL_GPIO_Init+0x238>)
 8003e1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e22:	4a2e      	ldr	r2, [pc, #184]	@ (8003edc <HAL_GPIO_Init+0x238>)
 8003e24:	f043 0302 	orr.w	r3, r3, #2
 8003e28:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003edc <HAL_GPIO_Init+0x238>)
 8003e2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e3a:	4a29      	ldr	r2, [pc, #164]	@ (8003ee0 <HAL_GPIO_Init+0x23c>)
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	089b      	lsrs	r3, r3, #2
 8003e40:	3302      	adds	r3, #2
 8003e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	220f      	movs	r2, #15
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43db      	mvns	r3, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a20      	ldr	r2, [pc, #128]	@ (8003ee4 <HAL_GPIO_Init+0x240>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d052      	beq.n	8003f0c <HAL_GPIO_Init+0x268>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a1f      	ldr	r2, [pc, #124]	@ (8003ee8 <HAL_GPIO_Init+0x244>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d031      	beq.n	8003ed2 <HAL_GPIO_Init+0x22e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a1e      	ldr	r2, [pc, #120]	@ (8003eec <HAL_GPIO_Init+0x248>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d02b      	beq.n	8003ece <HAL_GPIO_Init+0x22a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef0 <HAL_GPIO_Init+0x24c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d025      	beq.n	8003eca <HAL_GPIO_Init+0x226>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a1c      	ldr	r2, [pc, #112]	@ (8003ef4 <HAL_GPIO_Init+0x250>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d01f      	beq.n	8003ec6 <HAL_GPIO_Init+0x222>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a1b      	ldr	r2, [pc, #108]	@ (8003ef8 <HAL_GPIO_Init+0x254>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d019      	beq.n	8003ec2 <HAL_GPIO_Init+0x21e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a1a      	ldr	r2, [pc, #104]	@ (8003efc <HAL_GPIO_Init+0x258>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d013      	beq.n	8003ebe <HAL_GPIO_Init+0x21a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a19      	ldr	r2, [pc, #100]	@ (8003f00 <HAL_GPIO_Init+0x25c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00d      	beq.n	8003eba <HAL_GPIO_Init+0x216>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a18      	ldr	r2, [pc, #96]	@ (8003f04 <HAL_GPIO_Init+0x260>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d007      	beq.n	8003eb6 <HAL_GPIO_Init+0x212>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a17      	ldr	r2, [pc, #92]	@ (8003f08 <HAL_GPIO_Init+0x264>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d101      	bne.n	8003eb2 <HAL_GPIO_Init+0x20e>
 8003eae:	2309      	movs	r3, #9
 8003eb0:	e02d      	b.n	8003f0e <HAL_GPIO_Init+0x26a>
 8003eb2:	230a      	movs	r3, #10
 8003eb4:	e02b      	b.n	8003f0e <HAL_GPIO_Init+0x26a>
 8003eb6:	2308      	movs	r3, #8
 8003eb8:	e029      	b.n	8003f0e <HAL_GPIO_Init+0x26a>
 8003eba:	2307      	movs	r3, #7
 8003ebc:	e027      	b.n	8003f0e <HAL_GPIO_Init+0x26a>
 8003ebe:	2306      	movs	r3, #6
 8003ec0:	e025      	b.n	8003f0e <HAL_GPIO_Init+0x26a>
 8003ec2:	2305      	movs	r3, #5
 8003ec4:	e023      	b.n	8003f0e <HAL_GPIO_Init+0x26a>
 8003ec6:	2304      	movs	r3, #4
 8003ec8:	e021      	b.n	8003f0e <HAL_GPIO_Init+0x26a>
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e01f      	b.n	8003f0e <HAL_GPIO_Init+0x26a>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e01d      	b.n	8003f0e <HAL_GPIO_Init+0x26a>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e01b      	b.n	8003f0e <HAL_GPIO_Init+0x26a>
 8003ed6:	bf00      	nop
 8003ed8:	58000080 	.word	0x58000080
 8003edc:	58024400 	.word	0x58024400
 8003ee0:	58000400 	.word	0x58000400
 8003ee4:	58020000 	.word	0x58020000
 8003ee8:	58020400 	.word	0x58020400
 8003eec:	58020800 	.word	0x58020800
 8003ef0:	58020c00 	.word	0x58020c00
 8003ef4:	58021000 	.word	0x58021000
 8003ef8:	58021400 	.word	0x58021400
 8003efc:	58021800 	.word	0x58021800
 8003f00:	58021c00 	.word	0x58021c00
 8003f04:	58022000 	.word	0x58022000
 8003f08:	58022400 	.word	0x58022400
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	f002 0203 	and.w	r2, r2, #3
 8003f14:	0092      	lsls	r2, r2, #2
 8003f16:	4093      	lsls	r3, r2
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f1e:	4938      	ldr	r1, [pc, #224]	@ (8004000 <HAL_GPIO_Init+0x35c>)
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	089b      	lsrs	r3, r3, #2
 8003f24:	3302      	adds	r3, #2
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	43db      	mvns	r3, r3
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003f52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003f80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f47f ae63 	bne.w	8003cb8 <HAL_GPIO_Init+0x14>
  }
}
 8003ff2:	bf00      	nop
 8003ff4:	bf00      	nop
 8003ff6:	3724      	adds	r7, #36	@ 0x24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	58000400 	.word	0x58000400

08004004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	807b      	strh	r3, [r7, #2]
 8004010:	4613      	mov	r3, r2
 8004012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004014:	787b      	ldrb	r3, [r7, #1]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800401a:	887a      	ldrh	r2, [r7, #2]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004020:	e003      	b.n	800402a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004022:	887b      	ldrh	r3, [r7, #2]
 8004024:	041a      	lsls	r2, r3, #16
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	619a      	str	r2, [r3, #24]
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
	...

08004038 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004040:	4b19      	ldr	r3, [pc, #100]	@ (80040a8 <HAL_PWREx_ConfigSupply+0x70>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b04      	cmp	r3, #4
 800404a:	d00a      	beq.n	8004062 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800404c:	4b16      	ldr	r3, [pc, #88]	@ (80040a8 <HAL_PWREx_ConfigSupply+0x70>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	d001      	beq.n	800405e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e01f      	b.n	800409e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	e01d      	b.n	800409e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004062:	4b11      	ldr	r3, [pc, #68]	@ (80040a8 <HAL_PWREx_ConfigSupply+0x70>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f023 0207 	bic.w	r2, r3, #7
 800406a:	490f      	ldr	r1, [pc, #60]	@ (80040a8 <HAL_PWREx_ConfigSupply+0x70>)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4313      	orrs	r3, r2
 8004070:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004072:	f7fd fc53 	bl	800191c <HAL_GetTick>
 8004076:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004078:	e009      	b.n	800408e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800407a:	f7fd fc4f 	bl	800191c <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004088:	d901      	bls.n	800408e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e007      	b.n	800409e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800408e:	4b06      	ldr	r3, [pc, #24]	@ (80040a8 <HAL_PWREx_ConfigSupply+0x70>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004096:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800409a:	d1ee      	bne.n	800407a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	58024800 	.word	0x58024800

080040ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08c      	sub	sp, #48	@ 0x30
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d102      	bne.n	80040c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f000 bc48 	b.w	8004950 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 8088 	beq.w	80041de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ce:	4b99      	ldr	r3, [pc, #612]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040d8:	4b96      	ldr	r3, [pc, #600]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 80040da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80040de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d007      	beq.n	80040f4 <HAL_RCC_OscConfig+0x48>
 80040e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e6:	2b18      	cmp	r3, #24
 80040e8:	d111      	bne.n	800410e <HAL_RCC_OscConfig+0x62>
 80040ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d10c      	bne.n	800410e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f4:	4b8f      	ldr	r3, [pc, #572]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d06d      	beq.n	80041dc <HAL_RCC_OscConfig+0x130>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d169      	bne.n	80041dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	f000 bc21 	b.w	8004950 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004116:	d106      	bne.n	8004126 <HAL_RCC_OscConfig+0x7a>
 8004118:	4b86      	ldr	r3, [pc, #536]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a85      	ldr	r2, [pc, #532]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 800411e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	e02e      	b.n	8004184 <HAL_RCC_OscConfig+0xd8>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10c      	bne.n	8004148 <HAL_RCC_OscConfig+0x9c>
 800412e:	4b81      	ldr	r3, [pc, #516]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a80      	ldr	r2, [pc, #512]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 8004134:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	4b7e      	ldr	r3, [pc, #504]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a7d      	ldr	r2, [pc, #500]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 8004140:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	e01d      	b.n	8004184 <HAL_RCC_OscConfig+0xd8>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004150:	d10c      	bne.n	800416c <HAL_RCC_OscConfig+0xc0>
 8004152:	4b78      	ldr	r3, [pc, #480]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a77      	ldr	r2, [pc, #476]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 8004158:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	4b75      	ldr	r3, [pc, #468]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a74      	ldr	r2, [pc, #464]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 8004164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	e00b      	b.n	8004184 <HAL_RCC_OscConfig+0xd8>
 800416c:	4b71      	ldr	r3, [pc, #452]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a70      	ldr	r2, [pc, #448]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 8004172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004176:	6013      	str	r3, [r2, #0]
 8004178:	4b6e      	ldr	r3, [pc, #440]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a6d      	ldr	r2, [pc, #436]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 800417e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d013      	beq.n	80041b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fd fbc6 	bl	800191c <HAL_GetTick>
 8004190:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004194:	f7fd fbc2 	bl	800191c <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b64      	cmp	r3, #100	@ 0x64
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e3d4      	b.n	8004950 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041a6:	4b63      	ldr	r3, [pc, #396]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCC_OscConfig+0xe8>
 80041b2:	e014      	b.n	80041de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fd fbb2 	bl	800191c <HAL_GetTick>
 80041b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041bc:	f7fd fbae 	bl	800191c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b64      	cmp	r3, #100	@ 0x64
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e3c0      	b.n	8004950 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041ce:	4b59      	ldr	r3, [pc, #356]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f0      	bne.n	80041bc <HAL_RCC_OscConfig+0x110>
 80041da:	e000      	b.n	80041de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 80ca 	beq.w	8004380 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ec:	4b51      	ldr	r3, [pc, #324]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041f6:	4b4f      	ldr	r3, [pc, #316]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 80041f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <HAL_RCC_OscConfig+0x166>
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	2b18      	cmp	r3, #24
 8004206:	d156      	bne.n	80042b6 <HAL_RCC_OscConfig+0x20a>
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d151      	bne.n	80042b6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004212:	4b48      	ldr	r3, [pc, #288]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0304 	and.w	r3, r3, #4
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_RCC_OscConfig+0x17e>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e392      	b.n	8004950 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800422a:	4b42      	ldr	r3, [pc, #264]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f023 0219 	bic.w	r2, r3, #25
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	493f      	ldr	r1, [pc, #252]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 8004238:	4313      	orrs	r3, r2
 800423a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423c:	f7fd fb6e 	bl	800191c <HAL_GetTick>
 8004240:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004244:	f7fd fb6a 	bl	800191c <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e37c      	b.n	8004950 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004256:	4b37      	ldr	r3, [pc, #220]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004262:	f7fd fb67 	bl	8001934 <HAL_GetREVID>
 8004266:	4603      	mov	r3, r0
 8004268:	f241 0203 	movw	r2, #4099	@ 0x1003
 800426c:	4293      	cmp	r3, r2
 800426e:	d817      	bhi.n	80042a0 <HAL_RCC_OscConfig+0x1f4>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	2b40      	cmp	r3, #64	@ 0x40
 8004276:	d108      	bne.n	800428a <HAL_RCC_OscConfig+0x1de>
 8004278:	4b2e      	ldr	r3, [pc, #184]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004280:	4a2c      	ldr	r2, [pc, #176]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 8004282:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004286:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004288:	e07a      	b.n	8004380 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428a:	4b2a      	ldr	r3, [pc, #168]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	031b      	lsls	r3, r3, #12
 8004298:	4926      	ldr	r1, [pc, #152]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 800429a:	4313      	orrs	r3, r2
 800429c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800429e:	e06f      	b.n	8004380 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a0:	4b24      	ldr	r3, [pc, #144]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	061b      	lsls	r3, r3, #24
 80042ae:	4921      	ldr	r1, [pc, #132]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042b4:	e064      	b.n	8004380 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d047      	beq.n	800434e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042be:	4b1d      	ldr	r3, [pc, #116]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 0219 	bic.w	r2, r3, #25
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	491a      	ldr	r1, [pc, #104]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d0:	f7fd fb24 	bl	800191c <HAL_GetTick>
 80042d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042d8:	f7fd fb20 	bl	800191c <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e332      	b.n	8004950 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042ea:	4b12      	ldr	r3, [pc, #72]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f6:	f7fd fb1d 	bl	8001934 <HAL_GetREVID>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004300:	4293      	cmp	r3, r2
 8004302:	d819      	bhi.n	8004338 <HAL_RCC_OscConfig+0x28c>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	2b40      	cmp	r3, #64	@ 0x40
 800430a:	d108      	bne.n	800431e <HAL_RCC_OscConfig+0x272>
 800430c:	4b09      	ldr	r3, [pc, #36]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004314:	4a07      	ldr	r2, [pc, #28]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 8004316:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800431a:	6053      	str	r3, [r2, #4]
 800431c:	e030      	b.n	8004380 <HAL_RCC_OscConfig+0x2d4>
 800431e:	4b05      	ldr	r3, [pc, #20]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	031b      	lsls	r3, r3, #12
 800432c:	4901      	ldr	r1, [pc, #4]	@ (8004334 <HAL_RCC_OscConfig+0x288>)
 800432e:	4313      	orrs	r3, r2
 8004330:	604b      	str	r3, [r1, #4]
 8004332:	e025      	b.n	8004380 <HAL_RCC_OscConfig+0x2d4>
 8004334:	58024400 	.word	0x58024400
 8004338:	4b9a      	ldr	r3, [pc, #616]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	061b      	lsls	r3, r3, #24
 8004346:	4997      	ldr	r1, [pc, #604]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 8004348:	4313      	orrs	r3, r2
 800434a:	604b      	str	r3, [r1, #4]
 800434c:	e018      	b.n	8004380 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800434e:	4b95      	ldr	r3, [pc, #596]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a94      	ldr	r2, [pc, #592]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 8004354:	f023 0301 	bic.w	r3, r3, #1
 8004358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435a:	f7fd fadf 	bl	800191c <HAL_GetTick>
 800435e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004362:	f7fd fadb 	bl	800191c <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e2ed      	b.n	8004950 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004374:	4b8b      	ldr	r3, [pc, #556]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1f0      	bne.n	8004362 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 80a9 	beq.w	80044e0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800438e:	4b85      	ldr	r3, [pc, #532]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004396:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004398:	4b82      	ldr	r3, [pc, #520]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d007      	beq.n	80043b4 <HAL_RCC_OscConfig+0x308>
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	2b18      	cmp	r3, #24
 80043a8:	d13a      	bne.n	8004420 <HAL_RCC_OscConfig+0x374>
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d135      	bne.n	8004420 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043b4:	4b7b      	ldr	r3, [pc, #492]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <HAL_RCC_OscConfig+0x320>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	2b80      	cmp	r3, #128	@ 0x80
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e2c1      	b.n	8004950 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043cc:	f7fd fab2 	bl	8001934 <HAL_GetREVID>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d817      	bhi.n	800440a <HAL_RCC_OscConfig+0x35e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	2b20      	cmp	r3, #32
 80043e0:	d108      	bne.n	80043f4 <HAL_RCC_OscConfig+0x348>
 80043e2:	4b70      	ldr	r3, [pc, #448]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80043ea:	4a6e      	ldr	r2, [pc, #440]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 80043ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043f0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043f2:	e075      	b.n	80044e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043f4:	4b6b      	ldr	r3, [pc, #428]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	069b      	lsls	r3, r3, #26
 8004402:	4968      	ldr	r1, [pc, #416]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 8004404:	4313      	orrs	r3, r2
 8004406:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004408:	e06a      	b.n	80044e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800440a:	4b66      	ldr	r3, [pc, #408]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	061b      	lsls	r3, r3, #24
 8004418:	4962      	ldr	r1, [pc, #392]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 800441a:	4313      	orrs	r3, r2
 800441c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800441e:	e05f      	b.n	80044e0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d042      	beq.n	80044ae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004428:	4b5e      	ldr	r3, [pc, #376]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a5d      	ldr	r2, [pc, #372]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 800442e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fd fa72 	bl	800191c <HAL_GetTick>
 8004438:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800443c:	f7fd fa6e 	bl	800191c <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e280      	b.n	8004950 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800444e:	4b55      	ldr	r3, [pc, #340]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800445a:	f7fd fa6b 	bl	8001934 <HAL_GetREVID>
 800445e:	4603      	mov	r3, r0
 8004460:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004464:	4293      	cmp	r3, r2
 8004466:	d817      	bhi.n	8004498 <HAL_RCC_OscConfig+0x3ec>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	2b20      	cmp	r3, #32
 800446e:	d108      	bne.n	8004482 <HAL_RCC_OscConfig+0x3d6>
 8004470:	4b4c      	ldr	r3, [pc, #304]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004478:	4a4a      	ldr	r2, [pc, #296]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 800447a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800447e:	6053      	str	r3, [r2, #4]
 8004480:	e02e      	b.n	80044e0 <HAL_RCC_OscConfig+0x434>
 8004482:	4b48      	ldr	r3, [pc, #288]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	069b      	lsls	r3, r3, #26
 8004490:	4944      	ldr	r1, [pc, #272]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 8004492:	4313      	orrs	r3, r2
 8004494:	604b      	str	r3, [r1, #4]
 8004496:	e023      	b.n	80044e0 <HAL_RCC_OscConfig+0x434>
 8004498:	4b42      	ldr	r3, [pc, #264]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	061b      	lsls	r3, r3, #24
 80044a6:	493f      	ldr	r1, [pc, #252]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60cb      	str	r3, [r1, #12]
 80044ac:	e018      	b.n	80044e0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80044ae:	4b3d      	ldr	r3, [pc, #244]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a3c      	ldr	r2, [pc, #240]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 80044b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ba:	f7fd fa2f 	bl	800191c <HAL_GetTick>
 80044be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80044c2:	f7fd fa2b 	bl	800191c <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e23d      	b.n	8004950 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044d4:	4b33      	ldr	r3, [pc, #204]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f0      	bne.n	80044c2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0308 	and.w	r3, r3, #8
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d036      	beq.n	800455a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d019      	beq.n	8004528 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044f4:	4b2b      	ldr	r3, [pc, #172]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 80044f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044f8:	4a2a      	ldr	r2, [pc, #168]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004500:	f7fd fa0c 	bl	800191c <HAL_GetTick>
 8004504:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004508:	f7fd fa08 	bl	800191c <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e21a      	b.n	8004950 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800451a:	4b22      	ldr	r3, [pc, #136]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 800451c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0x45c>
 8004526:	e018      	b.n	800455a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004528:	4b1e      	ldr	r3, [pc, #120]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 800452a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800452c:	4a1d      	ldr	r2, [pc, #116]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 800452e:	f023 0301 	bic.w	r3, r3, #1
 8004532:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004534:	f7fd f9f2 	bl	800191c <HAL_GetTick>
 8004538:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800453c:	f7fd f9ee 	bl	800191c <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e200      	b.n	8004950 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800454e:	4b15      	ldr	r3, [pc, #84]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 8004550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f0      	bne.n	800453c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b00      	cmp	r3, #0
 8004564:	d039      	beq.n	80045da <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d01c      	beq.n	80045a8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800456e:	4b0d      	ldr	r3, [pc, #52]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a0c      	ldr	r2, [pc, #48]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 8004574:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004578:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800457a:	f7fd f9cf 	bl	800191c <HAL_GetTick>
 800457e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004582:	f7fd f9cb 	bl	800191c <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e1dd      	b.n	8004950 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004594:	4b03      	ldr	r3, [pc, #12]	@ (80045a4 <HAL_RCC_OscConfig+0x4f8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0x4d6>
 80045a0:	e01b      	b.n	80045da <HAL_RCC_OscConfig+0x52e>
 80045a2:	bf00      	nop
 80045a4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045a8:	4b9b      	ldr	r3, [pc, #620]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a9a      	ldr	r2, [pc, #616]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 80045ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045b4:	f7fd f9b2 	bl	800191c <HAL_GetTick>
 80045b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045bc:	f7fd f9ae 	bl	800191c <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e1c0      	b.n	8004950 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045ce:	4b92      	ldr	r3, [pc, #584]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 8081 	beq.w	80046ea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045e8:	4b8c      	ldr	r3, [pc, #560]	@ (800481c <HAL_RCC_OscConfig+0x770>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a8b      	ldr	r2, [pc, #556]	@ (800481c <HAL_RCC_OscConfig+0x770>)
 80045ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045f4:	f7fd f992 	bl	800191c <HAL_GetTick>
 80045f8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045fc:	f7fd f98e 	bl	800191c <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b64      	cmp	r3, #100	@ 0x64
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e1a0      	b.n	8004950 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800460e:	4b83      	ldr	r3, [pc, #524]	@ (800481c <HAL_RCC_OscConfig+0x770>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f0      	beq.n	80045fc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d106      	bne.n	8004630 <HAL_RCC_OscConfig+0x584>
 8004622:	4b7d      	ldr	r3, [pc, #500]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 8004624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004626:	4a7c      	ldr	r2, [pc, #496]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	6713      	str	r3, [r2, #112]	@ 0x70
 800462e:	e02d      	b.n	800468c <HAL_RCC_OscConfig+0x5e0>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10c      	bne.n	8004652 <HAL_RCC_OscConfig+0x5a6>
 8004638:	4b77      	ldr	r3, [pc, #476]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 800463a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463c:	4a76      	ldr	r2, [pc, #472]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 800463e:	f023 0301 	bic.w	r3, r3, #1
 8004642:	6713      	str	r3, [r2, #112]	@ 0x70
 8004644:	4b74      	ldr	r3, [pc, #464]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 8004646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004648:	4a73      	ldr	r2, [pc, #460]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 800464a:	f023 0304 	bic.w	r3, r3, #4
 800464e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004650:	e01c      	b.n	800468c <HAL_RCC_OscConfig+0x5e0>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	2b05      	cmp	r3, #5
 8004658:	d10c      	bne.n	8004674 <HAL_RCC_OscConfig+0x5c8>
 800465a:	4b6f      	ldr	r3, [pc, #444]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465e:	4a6e      	ldr	r2, [pc, #440]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 8004660:	f043 0304 	orr.w	r3, r3, #4
 8004664:	6713      	str	r3, [r2, #112]	@ 0x70
 8004666:	4b6c      	ldr	r3, [pc, #432]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466a:	4a6b      	ldr	r2, [pc, #428]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	6713      	str	r3, [r2, #112]	@ 0x70
 8004672:	e00b      	b.n	800468c <HAL_RCC_OscConfig+0x5e0>
 8004674:	4b68      	ldr	r3, [pc, #416]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 8004676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004678:	4a67      	ldr	r2, [pc, #412]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 800467a:	f023 0301 	bic.w	r3, r3, #1
 800467e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004680:	4b65      	ldr	r3, [pc, #404]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 8004682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004684:	4a64      	ldr	r2, [pc, #400]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 8004686:	f023 0304 	bic.w	r3, r3, #4
 800468a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d015      	beq.n	80046c0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004694:	f7fd f942 	bl	800191c <HAL_GetTick>
 8004698:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800469a:	e00a      	b.n	80046b2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469c:	f7fd f93e 	bl	800191c <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e14e      	b.n	8004950 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046b2:	4b59      	ldr	r3, [pc, #356]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0ee      	beq.n	800469c <HAL_RCC_OscConfig+0x5f0>
 80046be:	e014      	b.n	80046ea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c0:	f7fd f92c 	bl	800191c <HAL_GetTick>
 80046c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046c6:	e00a      	b.n	80046de <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c8:	f7fd f928 	bl	800191c <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e138      	b.n	8004950 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046de:	4b4e      	ldr	r3, [pc, #312]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1ee      	bne.n	80046c8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 812d 	beq.w	800494e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80046f4:	4b48      	ldr	r3, [pc, #288]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046fc:	2b18      	cmp	r3, #24
 80046fe:	f000 80bd 	beq.w	800487c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004706:	2b02      	cmp	r3, #2
 8004708:	f040 809e 	bne.w	8004848 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470c:	4b42      	ldr	r3, [pc, #264]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a41      	ldr	r2, [pc, #260]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 8004712:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004718:	f7fd f900 	bl	800191c <HAL_GetTick>
 800471c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004720:	f7fd f8fc 	bl	800191c <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e10e      	b.n	8004950 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004732:	4b39      	ldr	r3, [pc, #228]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800473e:	4b36      	ldr	r3, [pc, #216]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 8004740:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004742:	4b37      	ldr	r3, [pc, #220]	@ (8004820 <HAL_RCC_OscConfig+0x774>)
 8004744:	4013      	ands	r3, r2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800474e:	0112      	lsls	r2, r2, #4
 8004750:	430a      	orrs	r2, r1
 8004752:	4931      	ldr	r1, [pc, #196]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 8004754:	4313      	orrs	r3, r2
 8004756:	628b      	str	r3, [r1, #40]	@ 0x28
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475c:	3b01      	subs	r3, #1
 800475e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004766:	3b01      	subs	r3, #1
 8004768:	025b      	lsls	r3, r3, #9
 800476a:	b29b      	uxth	r3, r3
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004772:	3b01      	subs	r3, #1
 8004774:	041b      	lsls	r3, r3, #16
 8004776:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004780:	3b01      	subs	r3, #1
 8004782:	061b      	lsls	r3, r3, #24
 8004784:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004788:	4923      	ldr	r1, [pc, #140]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 800478a:	4313      	orrs	r3, r2
 800478c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800478e:	4b22      	ldr	r3, [pc, #136]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 8004790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004792:	4a21      	ldr	r2, [pc, #132]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 8004794:	f023 0301 	bic.w	r3, r3, #1
 8004798:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800479a:	4b1f      	ldr	r3, [pc, #124]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 800479c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800479e:	4b21      	ldr	r3, [pc, #132]	@ (8004824 <HAL_RCC_OscConfig+0x778>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80047a6:	00d2      	lsls	r2, r2, #3
 80047a8:	491b      	ldr	r1, [pc, #108]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80047ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 80047b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b2:	f023 020c 	bic.w	r2, r3, #12
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ba:	4917      	ldr	r1, [pc, #92]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80047c0:	4b15      	ldr	r3, [pc, #84]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 80047c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c4:	f023 0202 	bic.w	r2, r3, #2
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047cc:	4912      	ldr	r1, [pc, #72]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80047d2:	4b11      	ldr	r3, [pc, #68]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 80047d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d6:	4a10      	ldr	r2, [pc, #64]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 80047d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047de:	4b0e      	ldr	r3, [pc, #56]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 80047e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e2:	4a0d      	ldr	r2, [pc, #52]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 80047e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80047ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 80047ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 80047f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80047f6:	4b08      	ldr	r3, [pc, #32]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 80047f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fa:	4a07      	ldr	r2, [pc, #28]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 80047fc:	f043 0301 	orr.w	r3, r3, #1
 8004800:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004802:	4b05      	ldr	r3, [pc, #20]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a04      	ldr	r2, [pc, #16]	@ (8004818 <HAL_RCC_OscConfig+0x76c>)
 8004808:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800480c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480e:	f7fd f885 	bl	800191c <HAL_GetTick>
 8004812:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004814:	e011      	b.n	800483a <HAL_RCC_OscConfig+0x78e>
 8004816:	bf00      	nop
 8004818:	58024400 	.word	0x58024400
 800481c:	58024800 	.word	0x58024800
 8004820:	fffffc0c 	.word	0xfffffc0c
 8004824:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004828:	f7fd f878 	bl	800191c <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e08a      	b.n	8004950 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800483a:	4b47      	ldr	r3, [pc, #284]	@ (8004958 <HAL_RCC_OscConfig+0x8ac>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0f0      	beq.n	8004828 <HAL_RCC_OscConfig+0x77c>
 8004846:	e082      	b.n	800494e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004848:	4b43      	ldr	r3, [pc, #268]	@ (8004958 <HAL_RCC_OscConfig+0x8ac>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a42      	ldr	r2, [pc, #264]	@ (8004958 <HAL_RCC_OscConfig+0x8ac>)
 800484e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7fd f862 	bl	800191c <HAL_GetTick>
 8004858:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800485c:	f7fd f85e 	bl	800191c <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e070      	b.n	8004950 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800486e:	4b3a      	ldr	r3, [pc, #232]	@ (8004958 <HAL_RCC_OscConfig+0x8ac>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x7b0>
 800487a:	e068      	b.n	800494e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800487c:	4b36      	ldr	r3, [pc, #216]	@ (8004958 <HAL_RCC_OscConfig+0x8ac>)
 800487e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004880:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004882:	4b35      	ldr	r3, [pc, #212]	@ (8004958 <HAL_RCC_OscConfig+0x8ac>)
 8004884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004886:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488c:	2b01      	cmp	r3, #1
 800488e:	d031      	beq.n	80048f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f003 0203 	and.w	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800489a:	429a      	cmp	r2, r3
 800489c:	d12a      	bne.n	80048f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d122      	bne.n	80048f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d11a      	bne.n	80048f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	0a5b      	lsrs	r3, r3, #9
 80048c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d111      	bne.n	80048f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	0c1b      	lsrs	r3, r3, #16
 80048d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048de:	429a      	cmp	r2, r3
 80048e0:	d108      	bne.n	80048f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	0e1b      	lsrs	r3, r3, #24
 80048e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e02b      	b.n	8004950 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80048f8:	4b17      	ldr	r3, [pc, #92]	@ (8004958 <HAL_RCC_OscConfig+0x8ac>)
 80048fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048fc:	08db      	lsrs	r3, r3, #3
 80048fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004902:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	429a      	cmp	r2, r3
 800490c:	d01f      	beq.n	800494e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800490e:	4b12      	ldr	r3, [pc, #72]	@ (8004958 <HAL_RCC_OscConfig+0x8ac>)
 8004910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004912:	4a11      	ldr	r2, [pc, #68]	@ (8004958 <HAL_RCC_OscConfig+0x8ac>)
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800491a:	f7fc ffff 	bl	800191c <HAL_GetTick>
 800491e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004920:	bf00      	nop
 8004922:	f7fc fffb 	bl	800191c <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492a:	4293      	cmp	r3, r2
 800492c:	d0f9      	beq.n	8004922 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800492e:	4b0a      	ldr	r3, [pc, #40]	@ (8004958 <HAL_RCC_OscConfig+0x8ac>)
 8004930:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004932:	4b0a      	ldr	r3, [pc, #40]	@ (800495c <HAL_RCC_OscConfig+0x8b0>)
 8004934:	4013      	ands	r3, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800493a:	00d2      	lsls	r2, r2, #3
 800493c:	4906      	ldr	r1, [pc, #24]	@ (8004958 <HAL_RCC_OscConfig+0x8ac>)
 800493e:	4313      	orrs	r3, r2
 8004940:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004942:	4b05      	ldr	r3, [pc, #20]	@ (8004958 <HAL_RCC_OscConfig+0x8ac>)
 8004944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004946:	4a04      	ldr	r2, [pc, #16]	@ (8004958 <HAL_RCC_OscConfig+0x8ac>)
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3730      	adds	r7, #48	@ 0x30
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	58024400 	.word	0x58024400
 800495c:	ffff0007 	.word	0xffff0007

08004960 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e19c      	b.n	8004cae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004974:	4b8a      	ldr	r3, [pc, #552]	@ (8004ba0 <HAL_RCC_ClockConfig+0x240>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d910      	bls.n	80049a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004982:	4b87      	ldr	r3, [pc, #540]	@ (8004ba0 <HAL_RCC_ClockConfig+0x240>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f023 020f 	bic.w	r2, r3, #15
 800498a:	4985      	ldr	r1, [pc, #532]	@ (8004ba0 <HAL_RCC_ClockConfig+0x240>)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	4313      	orrs	r3, r2
 8004990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004992:	4b83      	ldr	r3, [pc, #524]	@ (8004ba0 <HAL_RCC_ClockConfig+0x240>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d001      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e184      	b.n	8004cae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d010      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	4b7b      	ldr	r3, [pc, #492]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049bc:	429a      	cmp	r2, r3
 80049be:	d908      	bls.n	80049d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049c0:	4b78      	ldr	r3, [pc, #480]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	4975      	ldr	r1, [pc, #468]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d010      	beq.n	8004a00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695a      	ldr	r2, [r3, #20]
 80049e2:	4b70      	ldr	r3, [pc, #448]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d908      	bls.n	8004a00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049ee:	4b6d      	ldr	r3, [pc, #436]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	496a      	ldr	r1, [pc, #424]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0310 	and.w	r3, r3, #16
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d010      	beq.n	8004a2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699a      	ldr	r2, [r3, #24]
 8004a10:	4b64      	ldr	r3, [pc, #400]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d908      	bls.n	8004a2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a1c:	4b61      	ldr	r3, [pc, #388]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	495e      	ldr	r1, [pc, #376]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d010      	beq.n	8004a5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69da      	ldr	r2, [r3, #28]
 8004a3e:	4b59      	ldr	r3, [pc, #356]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d908      	bls.n	8004a5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a4a:	4b56      	ldr	r3, [pc, #344]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	4953      	ldr	r1, [pc, #332]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d010      	beq.n	8004a8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	4b4d      	ldr	r3, [pc, #308]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	f003 030f 	and.w	r3, r3, #15
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d908      	bls.n	8004a8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a78:	4b4a      	ldr	r3, [pc, #296]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	f023 020f 	bic.w	r2, r3, #15
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4947      	ldr	r1, [pc, #284]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d055      	beq.n	8004b42 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004a96:	4b43      	ldr	r3, [pc, #268]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	4940      	ldr	r1, [pc, #256]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d107      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ab0:	4b3c      	ldr	r3, [pc, #240]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d121      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e0f6      	b.n	8004cae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d107      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ac8:	4b36      	ldr	r3, [pc, #216]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d115      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e0ea      	b.n	8004cae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d107      	bne.n	8004af0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ae0:	4b30      	ldr	r3, [pc, #192]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d109      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e0de      	b.n	8004cae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004af0:	4b2c      	ldr	r3, [pc, #176]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0d6      	b.n	8004cae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b00:	4b28      	ldr	r3, [pc, #160]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f023 0207 	bic.w	r2, r3, #7
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	4925      	ldr	r1, [pc, #148]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b12:	f7fc ff03 	bl	800191c <HAL_GetTick>
 8004b16:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b18:	e00a      	b.n	8004b30 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b1a:	f7fc feff 	bl	800191c <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e0be      	b.n	8004cae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b30:	4b1c      	ldr	r3, [pc, #112]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d1eb      	bne.n	8004b1a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d010      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	4b14      	ldr	r3, [pc, #80]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d208      	bcs.n	8004b70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b5e:	4b11      	ldr	r3, [pc, #68]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	f023 020f 	bic.w	r2, r3, #15
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	490e      	ldr	r1, [pc, #56]	@ (8004ba4 <HAL_RCC_ClockConfig+0x244>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b70:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba0 <HAL_RCC_ClockConfig+0x240>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d214      	bcs.n	8004ba8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b08      	ldr	r3, [pc, #32]	@ (8004ba0 <HAL_RCC_ClockConfig+0x240>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f023 020f 	bic.w	r2, r3, #15
 8004b86:	4906      	ldr	r1, [pc, #24]	@ (8004ba0 <HAL_RCC_ClockConfig+0x240>)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8e:	4b04      	ldr	r3, [pc, #16]	@ (8004ba0 <HAL_RCC_ClockConfig+0x240>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d005      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e086      	b.n	8004cae <HAL_RCC_ClockConfig+0x34e>
 8004ba0:	52002000 	.word	0x52002000
 8004ba4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d010      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	4b3f      	ldr	r3, [pc, #252]	@ (8004cb8 <HAL_RCC_ClockConfig+0x358>)
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d208      	bcs.n	8004bd6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004bc4:	4b3c      	ldr	r3, [pc, #240]	@ (8004cb8 <HAL_RCC_ClockConfig+0x358>)
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	4939      	ldr	r1, [pc, #228]	@ (8004cb8 <HAL_RCC_ClockConfig+0x358>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d010      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695a      	ldr	r2, [r3, #20]
 8004be6:	4b34      	ldr	r3, [pc, #208]	@ (8004cb8 <HAL_RCC_ClockConfig+0x358>)
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d208      	bcs.n	8004c04 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004bf2:	4b31      	ldr	r3, [pc, #196]	@ (8004cb8 <HAL_RCC_ClockConfig+0x358>)
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	492e      	ldr	r1, [pc, #184]	@ (8004cb8 <HAL_RCC_ClockConfig+0x358>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0310 	and.w	r3, r3, #16
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d010      	beq.n	8004c32 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699a      	ldr	r2, [r3, #24]
 8004c14:	4b28      	ldr	r3, [pc, #160]	@ (8004cb8 <HAL_RCC_ClockConfig+0x358>)
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d208      	bcs.n	8004c32 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c20:	4b25      	ldr	r3, [pc, #148]	@ (8004cb8 <HAL_RCC_ClockConfig+0x358>)
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	4922      	ldr	r1, [pc, #136]	@ (8004cb8 <HAL_RCC_ClockConfig+0x358>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0320 	and.w	r3, r3, #32
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d010      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69da      	ldr	r2, [r3, #28]
 8004c42:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb8 <HAL_RCC_ClockConfig+0x358>)
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d208      	bcs.n	8004c60 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8004cb8 <HAL_RCC_ClockConfig+0x358>)
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	4917      	ldr	r1, [pc, #92]	@ (8004cb8 <HAL_RCC_ClockConfig+0x358>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c60:	f000 f834 	bl	8004ccc <HAL_RCC_GetSysClockFreq>
 8004c64:	4602      	mov	r2, r0
 8004c66:	4b14      	ldr	r3, [pc, #80]	@ (8004cb8 <HAL_RCC_ClockConfig+0x358>)
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	0a1b      	lsrs	r3, r3, #8
 8004c6c:	f003 030f 	and.w	r3, r3, #15
 8004c70:	4912      	ldr	r1, [pc, #72]	@ (8004cbc <HAL_RCC_ClockConfig+0x35c>)
 8004c72:	5ccb      	ldrb	r3, [r1, r3]
 8004c74:	f003 031f 	and.w	r3, r3, #31
 8004c78:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004cb8 <HAL_RCC_ClockConfig+0x358>)
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	4a0d      	ldr	r2, [pc, #52]	@ (8004cbc <HAL_RCC_ClockConfig+0x35c>)
 8004c88:	5cd3      	ldrb	r3, [r2, r3]
 8004c8a:	f003 031f 	and.w	r3, r3, #31
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	fa22 f303 	lsr.w	r3, r2, r3
 8004c94:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc0 <HAL_RCC_ClockConfig+0x360>)
 8004c96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c98:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc4 <HAL_RCC_ClockConfig+0x364>)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <HAL_RCC_ClockConfig+0x368>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fc fdf0 	bl	8001888 <HAL_InitTick>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	58024400 	.word	0x58024400
 8004cbc:	08009260 	.word	0x08009260
 8004cc0:	24000004 	.word	0x24000004
 8004cc4:	24000000 	.word	0x24000000
 8004cc8:	24000008 	.word	0x24000008

08004ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b089      	sub	sp, #36	@ 0x24
 8004cd0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cd2:	4bb3      	ldr	r3, [pc, #716]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cda:	2b18      	cmp	r3, #24
 8004cdc:	f200 8155 	bhi.w	8004f8a <HAL_RCC_GetSysClockFreq+0x2be>
 8004ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce6:	bf00      	nop
 8004ce8:	08004d4d 	.word	0x08004d4d
 8004cec:	08004f8b 	.word	0x08004f8b
 8004cf0:	08004f8b 	.word	0x08004f8b
 8004cf4:	08004f8b 	.word	0x08004f8b
 8004cf8:	08004f8b 	.word	0x08004f8b
 8004cfc:	08004f8b 	.word	0x08004f8b
 8004d00:	08004f8b 	.word	0x08004f8b
 8004d04:	08004f8b 	.word	0x08004f8b
 8004d08:	08004d73 	.word	0x08004d73
 8004d0c:	08004f8b 	.word	0x08004f8b
 8004d10:	08004f8b 	.word	0x08004f8b
 8004d14:	08004f8b 	.word	0x08004f8b
 8004d18:	08004f8b 	.word	0x08004f8b
 8004d1c:	08004f8b 	.word	0x08004f8b
 8004d20:	08004f8b 	.word	0x08004f8b
 8004d24:	08004f8b 	.word	0x08004f8b
 8004d28:	08004d79 	.word	0x08004d79
 8004d2c:	08004f8b 	.word	0x08004f8b
 8004d30:	08004f8b 	.word	0x08004f8b
 8004d34:	08004f8b 	.word	0x08004f8b
 8004d38:	08004f8b 	.word	0x08004f8b
 8004d3c:	08004f8b 	.word	0x08004f8b
 8004d40:	08004f8b 	.word	0x08004f8b
 8004d44:	08004f8b 	.word	0x08004f8b
 8004d48:	08004d7f 	.word	0x08004d7f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d4c:	4b94      	ldr	r3, [pc, #592]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0320 	and.w	r3, r3, #32
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d009      	beq.n	8004d6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d58:	4b91      	ldr	r3, [pc, #580]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	08db      	lsrs	r3, r3, #3
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	4a90      	ldr	r2, [pc, #576]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d64:	fa22 f303 	lsr.w	r3, r2, r3
 8004d68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004d6a:	e111      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d6c:	4b8d      	ldr	r3, [pc, #564]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d6e:	61bb      	str	r3, [r7, #24]
      break;
 8004d70:	e10e      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004d72:	4b8d      	ldr	r3, [pc, #564]	@ (8004fa8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d74:	61bb      	str	r3, [r7, #24]
      break;
 8004d76:	e10b      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004d78:	4b8c      	ldr	r3, [pc, #560]	@ (8004fac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004d7a:	61bb      	str	r3, [r7, #24]
      break;
 8004d7c:	e108      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d7e:	4b88      	ldr	r3, [pc, #544]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004d88:	4b85      	ldr	r3, [pc, #532]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d92:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004d94:	4b82      	ldr	r3, [pc, #520]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004d9e:	4b80      	ldr	r3, [pc, #512]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da2:	08db      	lsrs	r3, r3, #3
 8004da4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	fb02 f303 	mul.w	r3, r2, r3
 8004dae:	ee07 3a90 	vmov	s15, r3
 8004db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 80e1 	beq.w	8004f84 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	f000 8083 	beq.w	8004ed0 <HAL_RCC_GetSysClockFreq+0x204>
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	f200 80a1 	bhi.w	8004f14 <HAL_RCC_GetSysClockFreq+0x248>
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <HAL_RCC_GetSysClockFreq+0x114>
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d056      	beq.n	8004e8c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004dde:	e099      	b.n	8004f14 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004de0:	4b6f      	ldr	r3, [pc, #444]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d02d      	beq.n	8004e48 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004dec:	4b6c      	ldr	r3, [pc, #432]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	08db      	lsrs	r3, r3, #3
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	4a6b      	ldr	r2, [pc, #428]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004df8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dfc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	ee07 3a90 	vmov	s15, r3
 8004e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	ee07 3a90 	vmov	s15, r3
 8004e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e16:	4b62      	ldr	r3, [pc, #392]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e26:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e2a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004fb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e42:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004e46:	e087      	b.n	8004f58 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e52:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004fb4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5a:	4b51      	ldr	r3, [pc, #324]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e6e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004fb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e8a:	e065      	b.n	8004f58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e96:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004fb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e9e:	4b40      	ldr	r3, [pc, #256]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eae:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eb2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004fb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ece:	e043      	b.n	8004f58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	ee07 3a90 	vmov	s15, r3
 8004ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eda:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004fbc <HAL_RCC_GetSysClockFreq+0x2f0>
 8004ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ef6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004fb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f12:	e021      	b.n	8004f58 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004fb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f26:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2e:	ee07 3a90 	vmov	s15, r3
 8004f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f3a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004fb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f56:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004f58:	4b11      	ldr	r3, [pc, #68]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5c:	0a5b      	lsrs	r3, r3, #9
 8004f5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f62:	3301      	adds	r3, #1
 8004f64:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	ee07 3a90 	vmov	s15, r3
 8004f6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f70:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f7c:	ee17 3a90 	vmov	r3, s15
 8004f80:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004f82:	e005      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	61bb      	str	r3, [r7, #24]
      break;
 8004f88:	e002      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004f8a:	4b07      	ldr	r3, [pc, #28]	@ (8004fa8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f8c:	61bb      	str	r3, [r7, #24]
      break;
 8004f8e:	bf00      	nop
  }

  return sysclockfreq;
 8004f90:	69bb      	ldr	r3, [r7, #24]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3724      	adds	r7, #36	@ 0x24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	58024400 	.word	0x58024400
 8004fa4:	03d09000 	.word	0x03d09000
 8004fa8:	003d0900 	.word	0x003d0900
 8004fac:	007a1200 	.word	0x007a1200
 8004fb0:	46000000 	.word	0x46000000
 8004fb4:	4c742400 	.word	0x4c742400
 8004fb8:	4a742400 	.word	0x4a742400
 8004fbc:	4af42400 	.word	0x4af42400

08004fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004fc6:	f7ff fe81 	bl	8004ccc <HAL_RCC_GetSysClockFreq>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	4b10      	ldr	r3, [pc, #64]	@ (8005010 <HAL_RCC_GetHCLKFreq+0x50>)
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	0a1b      	lsrs	r3, r3, #8
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	490f      	ldr	r1, [pc, #60]	@ (8005014 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fd8:	5ccb      	ldrb	r3, [r1, r3]
 8004fda:	f003 031f 	and.w	r3, r3, #31
 8004fde:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8005010 <HAL_RCC_GetHCLKFreq+0x50>)
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	4a09      	ldr	r2, [pc, #36]	@ (8005014 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fee:	5cd3      	ldrb	r3, [r2, r3]
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffa:	4a07      	ldr	r2, [pc, #28]	@ (8005018 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ffc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ffe:	4a07      	ldr	r2, [pc, #28]	@ (800501c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005004:	4b04      	ldr	r3, [pc, #16]	@ (8005018 <HAL_RCC_GetHCLKFreq+0x58>)
 8005006:	681b      	ldr	r3, [r3, #0]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	58024400 	.word	0x58024400
 8005014:	08009260 	.word	0x08009260
 8005018:	24000004 	.word	0x24000004
 800501c:	24000000 	.word	0x24000000

08005020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005024:	f7ff ffcc 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>
 8005028:	4602      	mov	r2, r0
 800502a:	4b06      	ldr	r3, [pc, #24]	@ (8005044 <HAL_RCC_GetPCLK1Freq+0x24>)
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	091b      	lsrs	r3, r3, #4
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	4904      	ldr	r1, [pc, #16]	@ (8005048 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005036:	5ccb      	ldrb	r3, [r1, r3]
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005040:	4618      	mov	r0, r3
 8005042:	bd80      	pop	{r7, pc}
 8005044:	58024400 	.word	0x58024400
 8005048:	08009260 	.word	0x08009260

0800504c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005050:	f7ff ffb6 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>
 8005054:	4602      	mov	r2, r0
 8005056:	4b06      	ldr	r3, [pc, #24]	@ (8005070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	0a1b      	lsrs	r3, r3, #8
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	4904      	ldr	r1, [pc, #16]	@ (8005074 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005062:	5ccb      	ldrb	r3, [r1, r3]
 8005064:	f003 031f 	and.w	r3, r3, #31
 8005068:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800506c:	4618      	mov	r0, r3
 800506e:	bd80      	pop	{r7, pc}
 8005070:	58024400 	.word	0x58024400
 8005074:	08009260 	.word	0x08009260

08005078 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800507c:	b0ca      	sub	sp, #296	@ 0x128
 800507e:	af00      	add	r7, sp, #0
 8005080:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005084:	2300      	movs	r3, #0
 8005086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800508a:	2300      	movs	r3, #0
 800508c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800509c:	2500      	movs	r5, #0
 800509e:	ea54 0305 	orrs.w	r3, r4, r5
 80050a2:	d049      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80050a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80050ae:	d02f      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80050b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80050b4:	d828      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80050b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050ba:	d01a      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80050bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050c0:	d822      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80050c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050ca:	d007      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050cc:	e01c      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050ce:	4bb8      	ldr	r3, [pc, #736]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d2:	4ab7      	ldr	r2, [pc, #732]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80050da:	e01a      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e0:	3308      	adds	r3, #8
 80050e2:	2102      	movs	r1, #2
 80050e4:	4618      	mov	r0, r3
 80050e6:	f002 fb61 	bl	80077ac <RCCEx_PLL2_Config>
 80050ea:	4603      	mov	r3, r0
 80050ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80050f0:	e00f      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f6:	3328      	adds	r3, #40	@ 0x28
 80050f8:	2102      	movs	r1, #2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f002 fc08 	bl	8007910 <RCCEx_PLL3_Config>
 8005100:	4603      	mov	r3, r0
 8005102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005106:	e004      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800510e:	e000      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10a      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800511a:	4ba5      	ldr	r3, [pc, #660]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800511c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800511e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005126:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005128:	4aa1      	ldr	r2, [pc, #644]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800512a:	430b      	orrs	r3, r1
 800512c:	6513      	str	r3, [r2, #80]	@ 0x50
 800512e:	e003      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005134:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005140:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005144:	f04f 0900 	mov.w	r9, #0
 8005148:	ea58 0309 	orrs.w	r3, r8, r9
 800514c:	d047      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800514e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005154:	2b04      	cmp	r3, #4
 8005156:	d82a      	bhi.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005158:	a201      	add	r2, pc, #4	@ (adr r2, 8005160 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800515a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515e:	bf00      	nop
 8005160:	08005175 	.word	0x08005175
 8005164:	08005183 	.word	0x08005183
 8005168:	08005199 	.word	0x08005199
 800516c:	080051b7 	.word	0x080051b7
 8005170:	080051b7 	.word	0x080051b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005174:	4b8e      	ldr	r3, [pc, #568]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005178:	4a8d      	ldr	r2, [pc, #564]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800517a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800517e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005180:	e01a      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005186:	3308      	adds	r3, #8
 8005188:	2100      	movs	r1, #0
 800518a:	4618      	mov	r0, r3
 800518c:	f002 fb0e 	bl	80077ac <RCCEx_PLL2_Config>
 8005190:	4603      	mov	r3, r0
 8005192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005196:	e00f      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800519c:	3328      	adds	r3, #40	@ 0x28
 800519e:	2100      	movs	r1, #0
 80051a0:	4618      	mov	r0, r3
 80051a2:	f002 fbb5 	bl	8007910 <RCCEx_PLL3_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051ac:	e004      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051b4:	e000      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80051b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10a      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051c0:	4b7b      	ldr	r3, [pc, #492]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051c4:	f023 0107 	bic.w	r1, r3, #7
 80051c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ce:	4a78      	ldr	r2, [pc, #480]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051d0:	430b      	orrs	r3, r1
 80051d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80051d4:	e003      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80051de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80051ea:	f04f 0b00 	mov.w	fp, #0
 80051ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80051f2:	d04c      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80051f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051fe:	d030      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005200:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005204:	d829      	bhi.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005206:	2bc0      	cmp	r3, #192	@ 0xc0
 8005208:	d02d      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800520a:	2bc0      	cmp	r3, #192	@ 0xc0
 800520c:	d825      	bhi.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800520e:	2b80      	cmp	r3, #128	@ 0x80
 8005210:	d018      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005212:	2b80      	cmp	r3, #128	@ 0x80
 8005214:	d821      	bhi.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800521a:	2b40      	cmp	r3, #64	@ 0x40
 800521c:	d007      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800521e:	e01c      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005220:	4b63      	ldr	r3, [pc, #396]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005224:	4a62      	ldr	r2, [pc, #392]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005226:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800522a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800522c:	e01c      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800522e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005232:	3308      	adds	r3, #8
 8005234:	2100      	movs	r1, #0
 8005236:	4618      	mov	r0, r3
 8005238:	f002 fab8 	bl	80077ac <RCCEx_PLL2_Config>
 800523c:	4603      	mov	r3, r0
 800523e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005242:	e011      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005248:	3328      	adds	r3, #40	@ 0x28
 800524a:	2100      	movs	r1, #0
 800524c:	4618      	mov	r0, r3
 800524e:	f002 fb5f 	bl	8007910 <RCCEx_PLL3_Config>
 8005252:	4603      	mov	r3, r0
 8005254:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005258:	e006      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005260:	e002      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005262:	bf00      	nop
 8005264:	e000      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005266:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005270:	4b4f      	ldr	r3, [pc, #316]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005274:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800527c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800527e:	4a4c      	ldr	r2, [pc, #304]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005280:	430b      	orrs	r3, r1
 8005282:	6513      	str	r3, [r2, #80]	@ 0x50
 8005284:	e003      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800528a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800528e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800529a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800529e:	2300      	movs	r3, #0
 80052a0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80052a4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80052a8:	460b      	mov	r3, r1
 80052aa:	4313      	orrs	r3, r2
 80052ac:	d053      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80052ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80052b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80052ba:	d035      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80052bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80052c0:	d82e      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80052c2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80052c6:	d031      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80052c8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80052cc:	d828      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80052ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052d2:	d01a      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80052d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052d8:	d822      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80052de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052e2:	d007      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80052e4:	e01c      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052e6:	4b32      	ldr	r3, [pc, #200]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ea:	4a31      	ldr	r2, [pc, #196]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052f2:	e01c      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f8:	3308      	adds	r3, #8
 80052fa:	2100      	movs	r1, #0
 80052fc:	4618      	mov	r0, r3
 80052fe:	f002 fa55 	bl	80077ac <RCCEx_PLL2_Config>
 8005302:	4603      	mov	r3, r0
 8005304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005308:	e011      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800530a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800530e:	3328      	adds	r3, #40	@ 0x28
 8005310:	2100      	movs	r1, #0
 8005312:	4618      	mov	r0, r3
 8005314:	f002 fafc 	bl	8007910 <RCCEx_PLL3_Config>
 8005318:	4603      	mov	r3, r0
 800531a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800531e:	e006      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005326:	e002      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005328:	bf00      	nop
 800532a:	e000      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800532c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800532e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10b      	bne.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005336:	4b1e      	ldr	r3, [pc, #120]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800533e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005342:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005346:	4a1a      	ldr	r2, [pc, #104]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005348:	430b      	orrs	r3, r1
 800534a:	6593      	str	r3, [r2, #88]	@ 0x58
 800534c:	e003      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005352:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005362:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005366:	2300      	movs	r3, #0
 8005368:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800536c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005370:	460b      	mov	r3, r1
 8005372:	4313      	orrs	r3, r2
 8005374:	d056      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800537a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800537e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005382:	d038      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005384:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005388:	d831      	bhi.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 800538a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800538e:	d034      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005390:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005394:	d82b      	bhi.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005396:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800539a:	d01d      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800539c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053a0:	d825      	bhi.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d006      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80053a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053aa:	d00a      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80053ac:	e01f      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80053ae:	bf00      	nop
 80053b0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053b4:	4ba2      	ldr	r3, [pc, #648]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b8:	4aa1      	ldr	r2, [pc, #644]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053c0:	e01c      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c6:	3308      	adds	r3, #8
 80053c8:	2100      	movs	r1, #0
 80053ca:	4618      	mov	r0, r3
 80053cc:	f002 f9ee 	bl	80077ac <RCCEx_PLL2_Config>
 80053d0:	4603      	mov	r3, r0
 80053d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80053d6:	e011      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053dc:	3328      	adds	r3, #40	@ 0x28
 80053de:	2100      	movs	r1, #0
 80053e0:	4618      	mov	r0, r3
 80053e2:	f002 fa95 	bl	8007910 <RCCEx_PLL3_Config>
 80053e6:	4603      	mov	r3, r0
 80053e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053ec:	e006      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053f4:	e002      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80053f6:	bf00      	nop
 80053f8:	e000      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80053fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10b      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005404:	4b8e      	ldr	r3, [pc, #568]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005408:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800540c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005410:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005414:	4a8a      	ldr	r2, [pc, #552]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005416:	430b      	orrs	r3, r1
 8005418:	6593      	str	r3, [r2, #88]	@ 0x58
 800541a:	e003      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005420:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005430:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005434:	2300      	movs	r3, #0
 8005436:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800543a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800543e:	460b      	mov	r3, r1
 8005440:	4313      	orrs	r3, r2
 8005442:	d03a      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800544a:	2b30      	cmp	r3, #48	@ 0x30
 800544c:	d01f      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800544e:	2b30      	cmp	r3, #48	@ 0x30
 8005450:	d819      	bhi.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005452:	2b20      	cmp	r3, #32
 8005454:	d00c      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005456:	2b20      	cmp	r3, #32
 8005458:	d815      	bhi.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d019      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800545e:	2b10      	cmp	r3, #16
 8005460:	d111      	bne.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005462:	4b77      	ldr	r3, [pc, #476]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005466:	4a76      	ldr	r2, [pc, #472]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005468:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800546c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800546e:	e011      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005474:	3308      	adds	r3, #8
 8005476:	2102      	movs	r1, #2
 8005478:	4618      	mov	r0, r3
 800547a:	f002 f997 	bl	80077ac <RCCEx_PLL2_Config>
 800547e:	4603      	mov	r3, r0
 8005480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005484:	e006      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800548c:	e002      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800548e:	bf00      	nop
 8005490:	e000      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10a      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800549c:	4b68      	ldr	r3, [pc, #416]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800549e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054a0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80054a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054aa:	4a65      	ldr	r2, [pc, #404]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054ac:	430b      	orrs	r3, r1
 80054ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054b0:	e003      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80054ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80054c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80054ca:	2300      	movs	r3, #0
 80054cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80054d0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4313      	orrs	r3, r2
 80054d8:	d051      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80054da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054e4:	d035      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80054e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054ea:	d82e      	bhi.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80054ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80054f0:	d031      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80054f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80054f6:	d828      	bhi.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80054f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054fc:	d01a      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80054fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005502:	d822      	bhi.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d003      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800550c:	d007      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800550e:	e01c      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005510:	4b4b      	ldr	r3, [pc, #300]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005514:	4a4a      	ldr	r2, [pc, #296]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800551a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800551c:	e01c      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800551e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005522:	3308      	adds	r3, #8
 8005524:	2100      	movs	r1, #0
 8005526:	4618      	mov	r0, r3
 8005528:	f002 f940 	bl	80077ac <RCCEx_PLL2_Config>
 800552c:	4603      	mov	r3, r0
 800552e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005532:	e011      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005538:	3328      	adds	r3, #40	@ 0x28
 800553a:	2100      	movs	r1, #0
 800553c:	4618      	mov	r0, r3
 800553e:	f002 f9e7 	bl	8007910 <RCCEx_PLL3_Config>
 8005542:	4603      	mov	r3, r0
 8005544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005548:	e006      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005550:	e002      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005552:	bf00      	nop
 8005554:	e000      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005556:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005558:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10a      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005560:	4b37      	ldr	r3, [pc, #220]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005564:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800556c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800556e:	4a34      	ldr	r2, [pc, #208]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005570:	430b      	orrs	r3, r1
 8005572:	6513      	str	r3, [r2, #80]	@ 0x50
 8005574:	e003      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800557a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800557e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005586:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800558a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800558e:	2300      	movs	r3, #0
 8005590:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005594:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005598:	460b      	mov	r3, r1
 800559a:	4313      	orrs	r3, r2
 800559c:	d056      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800559e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055a8:	d033      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80055aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055ae:	d82c      	bhi.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80055b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80055b4:	d02f      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80055b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80055ba:	d826      	bhi.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80055bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055c0:	d02b      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80055c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055c6:	d820      	bhi.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80055c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055cc:	d012      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80055ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055d2:	d81a      	bhi.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d022      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80055d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055dc:	d115      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e2:	3308      	adds	r3, #8
 80055e4:	2101      	movs	r1, #1
 80055e6:	4618      	mov	r0, r3
 80055e8:	f002 f8e0 	bl	80077ac <RCCEx_PLL2_Config>
 80055ec:	4603      	mov	r3, r0
 80055ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80055f2:	e015      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f8:	3328      	adds	r3, #40	@ 0x28
 80055fa:	2101      	movs	r1, #1
 80055fc:	4618      	mov	r0, r3
 80055fe:	f002 f987 	bl	8007910 <RCCEx_PLL3_Config>
 8005602:	4603      	mov	r3, r0
 8005604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005608:	e00a      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005610:	e006      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005612:	bf00      	nop
 8005614:	e004      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005616:	bf00      	nop
 8005618:	e002      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800561a:	bf00      	nop
 800561c:	e000      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800561e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10d      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005628:	4b05      	ldr	r3, [pc, #20]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800562a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800562c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005634:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005636:	4a02      	ldr	r2, [pc, #8]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005638:	430b      	orrs	r3, r1
 800563a:	6513      	str	r3, [r2, #80]	@ 0x50
 800563c:	e006      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800563e:	bf00      	nop
 8005640:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005648:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800564c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005654:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005658:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800565c:	2300      	movs	r3, #0
 800565e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005662:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005666:	460b      	mov	r3, r1
 8005668:	4313      	orrs	r3, r2
 800566a:	d055      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800566c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005670:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005674:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005678:	d033      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800567a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800567e:	d82c      	bhi.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005684:	d02f      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800568a:	d826      	bhi.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x662>
 800568c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005690:	d02b      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005692:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005696:	d820      	bhi.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800569c:	d012      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800569e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056a2:	d81a      	bhi.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x662>
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d022      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x676>
 80056a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056ac:	d115      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b2:	3308      	adds	r3, #8
 80056b4:	2101      	movs	r1, #1
 80056b6:	4618      	mov	r0, r3
 80056b8:	f002 f878 	bl	80077ac <RCCEx_PLL2_Config>
 80056bc:	4603      	mov	r3, r0
 80056be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80056c2:	e015      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c8:	3328      	adds	r3, #40	@ 0x28
 80056ca:	2101      	movs	r1, #1
 80056cc:	4618      	mov	r0, r3
 80056ce:	f002 f91f 	bl	8007910 <RCCEx_PLL3_Config>
 80056d2:	4603      	mov	r3, r0
 80056d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80056d8:	e00a      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056e0:	e006      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80056e2:	bf00      	nop
 80056e4:	e004      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80056e6:	bf00      	nop
 80056e8:	e002      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80056ea:	bf00      	nop
 80056ec:	e000      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80056ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10b      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80056f8:	4ba3      	ldr	r3, [pc, #652]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056fc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005704:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005708:	4a9f      	ldr	r2, [pc, #636]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800570a:	430b      	orrs	r3, r1
 800570c:	6593      	str	r3, [r2, #88]	@ 0x58
 800570e:	e003      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005710:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005714:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005724:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005728:	2300      	movs	r3, #0
 800572a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800572e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005732:	460b      	mov	r3, r1
 8005734:	4313      	orrs	r3, r2
 8005736:	d037      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800573c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800573e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005742:	d00e      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005748:	d816      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800574a:	2b00      	cmp	r3, #0
 800574c:	d018      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800574e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005752:	d111      	bne.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005754:	4b8c      	ldr	r3, [pc, #560]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005758:	4a8b      	ldr	r2, [pc, #556]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800575a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800575e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005760:	e00f      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005766:	3308      	adds	r3, #8
 8005768:	2101      	movs	r1, #1
 800576a:	4618      	mov	r0, r3
 800576c:	f002 f81e 	bl	80077ac <RCCEx_PLL2_Config>
 8005770:	4603      	mov	r3, r0
 8005772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005776:	e004      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800577e:	e000      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800578a:	4b7f      	ldr	r3, [pc, #508]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800578c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800578e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005798:	4a7b      	ldr	r2, [pc, #492]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800579a:	430b      	orrs	r3, r1
 800579c:	6513      	str	r3, [r2, #80]	@ 0x50
 800579e:	e003      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80057a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80057b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057b8:	2300      	movs	r3, #0
 80057ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80057be:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4313      	orrs	r3, r2
 80057c6:	d039      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80057c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057ce:	2b03      	cmp	r3, #3
 80057d0:	d81c      	bhi.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80057d2:	a201      	add	r2, pc, #4	@ (adr r2, 80057d8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	08005815 	.word	0x08005815
 80057dc:	080057e9 	.word	0x080057e9
 80057e0:	080057f7 	.word	0x080057f7
 80057e4:	08005815 	.word	0x08005815
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e8:	4b67      	ldr	r3, [pc, #412]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ec:	4a66      	ldr	r2, [pc, #408]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80057f4:	e00f      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fa:	3308      	adds	r3, #8
 80057fc:	2102      	movs	r1, #2
 80057fe:	4618      	mov	r0, r3
 8005800:	f001 ffd4 	bl	80077ac <RCCEx_PLL2_Config>
 8005804:	4603      	mov	r3, r0
 8005806:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800580a:	e004      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005812:	e000      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005814:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005816:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10a      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800581e:	4b5a      	ldr	r3, [pc, #360]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005822:	f023 0103 	bic.w	r1, r3, #3
 8005826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800582c:	4a56      	ldr	r2, [pc, #344]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800582e:	430b      	orrs	r3, r1
 8005830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005832:	e003      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005834:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005838:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800583c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005844:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005848:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800584c:	2300      	movs	r3, #0
 800584e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005852:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005856:	460b      	mov	r3, r1
 8005858:	4313      	orrs	r3, r2
 800585a:	f000 809f 	beq.w	800599c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800585e:	4b4b      	ldr	r3, [pc, #300]	@ (800598c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a4a      	ldr	r2, [pc, #296]	@ (800598c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005868:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800586a:	f7fc f857 	bl	800191c <HAL_GetTick>
 800586e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005872:	e00b      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005874:	f7fc f852 	bl	800191c <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b64      	cmp	r3, #100	@ 0x64
 8005882:	d903      	bls.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800588a:	e005      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800588c:	4b3f      	ldr	r3, [pc, #252]	@ (800598c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0ed      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005898:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800589c:	2b00      	cmp	r3, #0
 800589e:	d179      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80058a0:	4b39      	ldr	r3, [pc, #228]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80058a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058ac:	4053      	eors	r3, r2
 80058ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d015      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058b6:	4b34      	ldr	r3, [pc, #208]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058c2:	4b31      	ldr	r3, [pc, #196]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c6:	4a30      	ldr	r2, [pc, #192]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058cc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058ce:	4b2e      	ldr	r3, [pc, #184]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d2:	4a2d      	ldr	r2, [pc, #180]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058d8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80058da:	4a2b      	ldr	r2, [pc, #172]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058e0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80058e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058ee:	d118      	bne.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f0:	f7fc f814 	bl	800191c <HAL_GetTick>
 80058f4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058f8:	e00d      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fa:	f7fc f80f 	bl	800191c <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005904:	1ad2      	subs	r2, r2, r3
 8005906:	f241 3388 	movw	r3, #5000	@ 0x1388
 800590a:	429a      	cmp	r2, r3
 800590c:	d903      	bls.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005914:	e005      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005916:	4b1c      	ldr	r3, [pc, #112]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0eb      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005926:	2b00      	cmp	r3, #0
 8005928:	d129      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800592a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005932:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005936:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800593a:	d10e      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800593c:	4b12      	ldr	r3, [pc, #72]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005948:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800594c:	091a      	lsrs	r2, r3, #4
 800594e:	4b10      	ldr	r3, [pc, #64]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005950:	4013      	ands	r3, r2
 8005952:	4a0d      	ldr	r2, [pc, #52]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005954:	430b      	orrs	r3, r1
 8005956:	6113      	str	r3, [r2, #16]
 8005958:	e005      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800595a:	4b0b      	ldr	r3, [pc, #44]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	4a0a      	ldr	r2, [pc, #40]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005960:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005964:	6113      	str	r3, [r2, #16]
 8005966:	4b08      	ldr	r3, [pc, #32]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005968:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800596a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800596e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005976:	4a04      	ldr	r2, [pc, #16]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005978:	430b      	orrs	r3, r1
 800597a:	6713      	str	r3, [r2, #112]	@ 0x70
 800597c:	e00e      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800597e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005982:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005986:	e009      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005988:	58024400 	.word	0x58024400
 800598c:	58024800 	.word	0x58024800
 8005990:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005998:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800599c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a4:	f002 0301 	and.w	r3, r2, #1
 80059a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059ac:	2300      	movs	r3, #0
 80059ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80059b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f000 8089 	beq.w	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80059be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059c4:	2b28      	cmp	r3, #40	@ 0x28
 80059c6:	d86b      	bhi.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80059c8:	a201      	add	r2, pc, #4	@ (adr r2, 80059d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80059ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ce:	bf00      	nop
 80059d0:	08005aa9 	.word	0x08005aa9
 80059d4:	08005aa1 	.word	0x08005aa1
 80059d8:	08005aa1 	.word	0x08005aa1
 80059dc:	08005aa1 	.word	0x08005aa1
 80059e0:	08005aa1 	.word	0x08005aa1
 80059e4:	08005aa1 	.word	0x08005aa1
 80059e8:	08005aa1 	.word	0x08005aa1
 80059ec:	08005aa1 	.word	0x08005aa1
 80059f0:	08005a75 	.word	0x08005a75
 80059f4:	08005aa1 	.word	0x08005aa1
 80059f8:	08005aa1 	.word	0x08005aa1
 80059fc:	08005aa1 	.word	0x08005aa1
 8005a00:	08005aa1 	.word	0x08005aa1
 8005a04:	08005aa1 	.word	0x08005aa1
 8005a08:	08005aa1 	.word	0x08005aa1
 8005a0c:	08005aa1 	.word	0x08005aa1
 8005a10:	08005a8b 	.word	0x08005a8b
 8005a14:	08005aa1 	.word	0x08005aa1
 8005a18:	08005aa1 	.word	0x08005aa1
 8005a1c:	08005aa1 	.word	0x08005aa1
 8005a20:	08005aa1 	.word	0x08005aa1
 8005a24:	08005aa1 	.word	0x08005aa1
 8005a28:	08005aa1 	.word	0x08005aa1
 8005a2c:	08005aa1 	.word	0x08005aa1
 8005a30:	08005aa9 	.word	0x08005aa9
 8005a34:	08005aa1 	.word	0x08005aa1
 8005a38:	08005aa1 	.word	0x08005aa1
 8005a3c:	08005aa1 	.word	0x08005aa1
 8005a40:	08005aa1 	.word	0x08005aa1
 8005a44:	08005aa1 	.word	0x08005aa1
 8005a48:	08005aa1 	.word	0x08005aa1
 8005a4c:	08005aa1 	.word	0x08005aa1
 8005a50:	08005aa9 	.word	0x08005aa9
 8005a54:	08005aa1 	.word	0x08005aa1
 8005a58:	08005aa1 	.word	0x08005aa1
 8005a5c:	08005aa1 	.word	0x08005aa1
 8005a60:	08005aa1 	.word	0x08005aa1
 8005a64:	08005aa1 	.word	0x08005aa1
 8005a68:	08005aa1 	.word	0x08005aa1
 8005a6c:	08005aa1 	.word	0x08005aa1
 8005a70:	08005aa9 	.word	0x08005aa9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a78:	3308      	adds	r3, #8
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f001 fe95 	bl	80077ac <RCCEx_PLL2_Config>
 8005a82:	4603      	mov	r3, r0
 8005a84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005a88:	e00f      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8e:	3328      	adds	r3, #40	@ 0x28
 8005a90:	2101      	movs	r1, #1
 8005a92:	4618      	mov	r0, r3
 8005a94:	f001 ff3c 	bl	8007910 <RCCEx_PLL3_Config>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005a9e:	e004      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005aa6:	e000      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ab2:	4bbf      	ldr	r3, [pc, #764]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005abe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ac0:	4abb      	ldr	r2, [pc, #748]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ac2:	430b      	orrs	r3, r1
 8005ac4:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ac6:	e003      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005acc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad8:	f002 0302 	and.w	r3, r2, #2
 8005adc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005ae6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005aea:	460b      	mov	r3, r1
 8005aec:	4313      	orrs	r3, r2
 8005aee:	d041      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005af6:	2b05      	cmp	r3, #5
 8005af8:	d824      	bhi.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005afa:	a201      	add	r2, pc, #4	@ (adr r2, 8005b00 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b00:	08005b4d 	.word	0x08005b4d
 8005b04:	08005b19 	.word	0x08005b19
 8005b08:	08005b2f 	.word	0x08005b2f
 8005b0c:	08005b4d 	.word	0x08005b4d
 8005b10:	08005b4d 	.word	0x08005b4d
 8005b14:	08005b4d 	.word	0x08005b4d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	2101      	movs	r1, #1
 8005b20:	4618      	mov	r0, r3
 8005b22:	f001 fe43 	bl	80077ac <RCCEx_PLL2_Config>
 8005b26:	4603      	mov	r3, r0
 8005b28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b2c:	e00f      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b32:	3328      	adds	r3, #40	@ 0x28
 8005b34:	2101      	movs	r1, #1
 8005b36:	4618      	mov	r0, r3
 8005b38:	f001 feea 	bl	8007910 <RCCEx_PLL3_Config>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b42:	e004      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b4a:	e000      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10a      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005b56:	4b96      	ldr	r3, [pc, #600]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b5a:	f023 0107 	bic.w	r1, r3, #7
 8005b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b64:	4a92      	ldr	r2, [pc, #584]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b66:	430b      	orrs	r3, r1
 8005b68:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b6a:	e003      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7c:	f002 0304 	and.w	r3, r2, #4
 8005b80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b84:	2300      	movs	r3, #0
 8005b86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b8a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4313      	orrs	r3, r2
 8005b92:	d044      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b9c:	2b05      	cmp	r3, #5
 8005b9e:	d825      	bhi.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba6:	bf00      	nop
 8005ba8:	08005bf5 	.word	0x08005bf5
 8005bac:	08005bc1 	.word	0x08005bc1
 8005bb0:	08005bd7 	.word	0x08005bd7
 8005bb4:	08005bf5 	.word	0x08005bf5
 8005bb8:	08005bf5 	.word	0x08005bf5
 8005bbc:	08005bf5 	.word	0x08005bf5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc4:	3308      	adds	r3, #8
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f001 fdef 	bl	80077ac <RCCEx_PLL2_Config>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005bd4:	e00f      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bda:	3328      	adds	r3, #40	@ 0x28
 8005bdc:	2101      	movs	r1, #1
 8005bde:	4618      	mov	r0, r3
 8005be0:	f001 fe96 	bl	8007910 <RCCEx_PLL3_Config>
 8005be4:	4603      	mov	r3, r0
 8005be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005bea:	e004      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bf2:	e000      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10b      	bne.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005bfe:	4b6c      	ldr	r3, [pc, #432]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c02:	f023 0107 	bic.w	r1, r3, #7
 8005c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c0e:	4a68      	ldr	r2, [pc, #416]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c10:	430b      	orrs	r3, r1
 8005c12:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c14:	e003      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c26:	f002 0320 	and.w	r3, r2, #32
 8005c2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	d055      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c4a:	d033      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c50:	d82c      	bhi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c56:	d02f      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c5c:	d826      	bhi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c62:	d02b      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005c64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c68:	d820      	bhi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c6e:	d012      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005c70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c74:	d81a      	bhi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d022      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005c7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c7e:	d115      	bne.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c84:	3308      	adds	r3, #8
 8005c86:	2100      	movs	r1, #0
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f001 fd8f 	bl	80077ac <RCCEx_PLL2_Config>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005c94:	e015      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9a:	3328      	adds	r3, #40	@ 0x28
 8005c9c:	2102      	movs	r1, #2
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 fe36 	bl	8007910 <RCCEx_PLL3_Config>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005caa:	e00a      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cb2:	e006      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005cb4:	bf00      	nop
 8005cb6:	e004      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005cb8:	bf00      	nop
 8005cba:	e002      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005cbc:	bf00      	nop
 8005cbe:	e000      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10b      	bne.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cca:	4b39      	ldr	r3, [pc, #228]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cda:	4a35      	ldr	r2, [pc, #212]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ce0:	e003      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ce6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005cf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005d00:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005d04:	460b      	mov	r3, r1
 8005d06:	4313      	orrs	r3, r2
 8005d08:	d058      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d12:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005d16:	d033      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005d18:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005d1c:	d82c      	bhi.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d22:	d02f      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d28:	d826      	bhi.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d2e:	d02b      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005d30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d34:	d820      	bhi.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d3a:	d012      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005d3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d40:	d81a      	bhi.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d022      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005d46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d4a:	d115      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d50:	3308      	adds	r3, #8
 8005d52:	2100      	movs	r1, #0
 8005d54:	4618      	mov	r0, r3
 8005d56:	f001 fd29 	bl	80077ac <RCCEx_PLL2_Config>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d60:	e015      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d66:	3328      	adds	r3, #40	@ 0x28
 8005d68:	2102      	movs	r1, #2
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f001 fdd0 	bl	8007910 <RCCEx_PLL3_Config>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d76:	e00a      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d7e:	e006      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005d80:	bf00      	nop
 8005d82:	e004      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005d84:	bf00      	nop
 8005d86:	e002      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005d88:	bf00      	nop
 8005d8a:	e000      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10e      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d96:	4b06      	ldr	r3, [pc, #24]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d9a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005da6:	4a02      	ldr	r2, [pc, #8]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005da8:	430b      	orrs	r3, r1
 8005daa:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dac:	e006      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005dae:	bf00      	nop
 8005db0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005db8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005dc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005dd2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	d055      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005de4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005de8:	d033      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005dea:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005dee:	d82c      	bhi.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005df0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005df4:	d02f      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005df6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dfa:	d826      	bhi.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005dfc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005e00:	d02b      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005e02:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005e06:	d820      	bhi.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005e08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e0c:	d012      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005e0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e12:	d81a      	bhi.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d022      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005e18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e1c:	d115      	bne.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e22:	3308      	adds	r3, #8
 8005e24:	2100      	movs	r1, #0
 8005e26:	4618      	mov	r0, r3
 8005e28:	f001 fcc0 	bl	80077ac <RCCEx_PLL2_Config>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e32:	e015      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e38:	3328      	adds	r3, #40	@ 0x28
 8005e3a:	2102      	movs	r1, #2
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f001 fd67 	bl	8007910 <RCCEx_PLL3_Config>
 8005e42:	4603      	mov	r3, r0
 8005e44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e48:	e00a      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e50:	e006      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e52:	bf00      	nop
 8005e54:	e004      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e56:	bf00      	nop
 8005e58:	e002      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e5a:	bf00      	nop
 8005e5c:	e000      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10b      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005e68:	4ba1      	ldr	r3, [pc, #644]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e6c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005e78:	4a9d      	ldr	r2, [pc, #628]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e7a:	430b      	orrs	r3, r1
 8005e7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e7e:	e003      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e90:	f002 0308 	and.w	r3, r2, #8
 8005e94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005e9e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	d01e      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eb4:	d10c      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eba:	3328      	adds	r3, #40	@ 0x28
 8005ebc:	2102      	movs	r1, #2
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f001 fd26 	bl	8007910 <RCCEx_PLL3_Config>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005ed0:	4b87      	ldr	r3, [pc, #540]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ee0:	4a83      	ldr	r2, [pc, #524]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ee2:	430b      	orrs	r3, r1
 8005ee4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f002 0310 	and.w	r3, r2, #16
 8005ef2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005efc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005f00:	460b      	mov	r3, r1
 8005f02:	4313      	orrs	r3, r2
 8005f04:	d01e      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f12:	d10c      	bne.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f18:	3328      	adds	r3, #40	@ 0x28
 8005f1a:	2102      	movs	r1, #2
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f001 fcf7 	bl	8007910 <RCCEx_PLL3_Config>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f2e:	4b70      	ldr	r3, [pc, #448]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f32:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f3e:	4a6c      	ldr	r2, [pc, #432]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f40:	430b      	orrs	r3, r1
 8005f42:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005f50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f54:	2300      	movs	r3, #0
 8005f56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f5a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4313      	orrs	r3, r2
 8005f62:	d03e      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f70:	d022      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005f72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f76:	d81b      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f80:	d00b      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005f82:	e015      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f88:	3308      	adds	r3, #8
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f001 fc0d 	bl	80077ac <RCCEx_PLL2_Config>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005f98:	e00f      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f9e:	3328      	adds	r3, #40	@ 0x28
 8005fa0:	2102      	movs	r1, #2
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f001 fcb4 	bl	8007910 <RCCEx_PLL3_Config>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005fae:	e004      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fb6:	e000      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10b      	bne.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fc2:	4b4b      	ldr	r3, [pc, #300]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005fd2:	4a47      	ldr	r2, [pc, #284]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fd8:	e003      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005fee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ff4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	d03b      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006006:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800600a:	d01f      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800600c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006010:	d818      	bhi.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006012:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006016:	d003      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006018:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800601c:	d007      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800601e:	e011      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006020:	4b33      	ldr	r3, [pc, #204]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006024:	4a32      	ldr	r2, [pc, #200]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006026:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800602a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800602c:	e00f      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800602e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006032:	3328      	adds	r3, #40	@ 0x28
 8006034:	2101      	movs	r1, #1
 8006036:	4618      	mov	r0, r3
 8006038:	f001 fc6a 	bl	8007910 <RCCEx_PLL3_Config>
 800603c:	4603      	mov	r3, r0
 800603e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006042:	e004      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800604a:	e000      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800604c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800604e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10b      	bne.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006056:	4b26      	ldr	r3, [pc, #152]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800605a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800605e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006066:	4a22      	ldr	r2, [pc, #136]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006068:	430b      	orrs	r3, r1
 800606a:	6553      	str	r3, [r2, #84]	@ 0x54
 800606c:	e003      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006072:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006082:	673b      	str	r3, [r7, #112]	@ 0x70
 8006084:	2300      	movs	r3, #0
 8006086:	677b      	str	r3, [r7, #116]	@ 0x74
 8006088:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800608c:	460b      	mov	r3, r1
 800608e:	4313      	orrs	r3, r2
 8006090:	d034      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006098:	2b00      	cmp	r3, #0
 800609a:	d003      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800609c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a0:	d007      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80060a2:	e011      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060a4:	4b12      	ldr	r3, [pc, #72]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a8:	4a11      	ldr	r2, [pc, #68]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80060b0:	e00e      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b6:	3308      	adds	r3, #8
 80060b8:	2102      	movs	r1, #2
 80060ba:	4618      	mov	r0, r3
 80060bc:	f001 fb76 	bl	80077ac <RCCEx_PLL2_Config>
 80060c0:	4603      	mov	r3, r0
 80060c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80060c6:	e003      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10d      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80060d8:	4b05      	ldr	r3, [pc, #20]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80060e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e6:	4a02      	ldr	r2, [pc, #8]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060e8:	430b      	orrs	r3, r1
 80060ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80060ec:	e006      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80060ee:	bf00      	nop
 80060f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80060fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006108:	66bb      	str	r3, [r7, #104]	@ 0x68
 800610a:	2300      	movs	r3, #0
 800610c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800610e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006112:	460b      	mov	r3, r1
 8006114:	4313      	orrs	r3, r2
 8006116:	d00c      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800611c:	3328      	adds	r3, #40	@ 0x28
 800611e:	2102      	movs	r1, #2
 8006120:	4618      	mov	r0, r3
 8006122:	f001 fbf5 	bl	8007910 <RCCEx_PLL3_Config>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800613e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006140:	2300      	movs	r3, #0
 8006142:	667b      	str	r3, [r7, #100]	@ 0x64
 8006144:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006148:	460b      	mov	r3, r1
 800614a:	4313      	orrs	r3, r2
 800614c:	d038      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800614e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006156:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800615a:	d018      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800615c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006160:	d811      	bhi.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006162:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006166:	d014      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800616c:	d80b      	bhi.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800616e:	2b00      	cmp	r3, #0
 8006170:	d011      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006176:	d106      	bne.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006178:	4bc3      	ldr	r3, [pc, #780]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800617a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617c:	4ac2      	ldr	r2, [pc, #776]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800617e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006182:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006184:	e008      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800618c:	e004      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800618e:	bf00      	nop
 8006190:	e002      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006192:	bf00      	nop
 8006194:	e000      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006196:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006198:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10b      	bne.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061a0:	4bb9      	ldr	r3, [pc, #740]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061b0:	4ab5      	ldr	r2, [pc, #724]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061b2:	430b      	orrs	r3, r1
 80061b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80061b6:	e003      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80061c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80061cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061ce:	2300      	movs	r3, #0
 80061d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80061d6:	460b      	mov	r3, r1
 80061d8:	4313      	orrs	r3, r2
 80061da:	d009      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80061dc:	4baa      	ldr	r3, [pc, #680]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80061e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ea:	4aa7      	ldr	r2, [pc, #668]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061ec:	430b      	orrs	r3, r1
 80061ee:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80061f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80061fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80061fe:	2300      	movs	r3, #0
 8006200:	657b      	str	r3, [r7, #84]	@ 0x54
 8006202:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006206:	460b      	mov	r3, r1
 8006208:	4313      	orrs	r3, r2
 800620a:	d00a      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800620c:	4b9e      	ldr	r3, [pc, #632]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006218:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800621c:	4a9a      	ldr	r2, [pc, #616]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800621e:	430b      	orrs	r3, r1
 8006220:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800622e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006230:	2300      	movs	r3, #0
 8006232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006234:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006238:	460b      	mov	r3, r1
 800623a:	4313      	orrs	r3, r2
 800623c:	d009      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800623e:	4b92      	ldr	r3, [pc, #584]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006242:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800624a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800624c:	4a8e      	ldr	r2, [pc, #568]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800624e:	430b      	orrs	r3, r1
 8006250:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800625e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006260:	2300      	movs	r3, #0
 8006262:	647b      	str	r3, [r7, #68]	@ 0x44
 8006264:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006268:	460b      	mov	r3, r1
 800626a:	4313      	orrs	r3, r2
 800626c:	d00e      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800626e:	4b86      	ldr	r3, [pc, #536]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	4a85      	ldr	r2, [pc, #532]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006274:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006278:	6113      	str	r3, [r2, #16]
 800627a:	4b83      	ldr	r3, [pc, #524]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800627c:	6919      	ldr	r1, [r3, #16]
 800627e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006282:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006286:	4a80      	ldr	r2, [pc, #512]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006288:	430b      	orrs	r3, r1
 800628a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800628c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006294:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006298:	63bb      	str	r3, [r7, #56]	@ 0x38
 800629a:	2300      	movs	r3, #0
 800629c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800629e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80062a2:	460b      	mov	r3, r1
 80062a4:	4313      	orrs	r3, r2
 80062a6:	d009      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80062a8:	4b77      	ldr	r3, [pc, #476]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ac:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80062b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b6:	4a74      	ldr	r2, [pc, #464]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062b8:	430b      	orrs	r3, r1
 80062ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80062c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80062ca:	2300      	movs	r3, #0
 80062cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80062d2:	460b      	mov	r3, r1
 80062d4:	4313      	orrs	r3, r2
 80062d6:	d00a      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062d8:	4b6b      	ldr	r3, [pc, #428]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062dc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80062e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062e8:	4a67      	ldr	r2, [pc, #412]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062ea:	430b      	orrs	r3, r1
 80062ec:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80062ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f6:	2100      	movs	r1, #0
 80062f8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006300:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006304:	460b      	mov	r3, r1
 8006306:	4313      	orrs	r3, r2
 8006308:	d011      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800630a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630e:	3308      	adds	r3, #8
 8006310:	2100      	movs	r1, #0
 8006312:	4618      	mov	r0, r3
 8006314:	f001 fa4a 	bl	80077ac <RCCEx_PLL2_Config>
 8006318:	4603      	mov	r3, r0
 800631a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800631e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800632a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800632e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006336:	2100      	movs	r1, #0
 8006338:	6239      	str	r1, [r7, #32]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006340:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006344:	460b      	mov	r3, r1
 8006346:	4313      	orrs	r3, r2
 8006348:	d011      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800634a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634e:	3308      	adds	r3, #8
 8006350:	2101      	movs	r1, #1
 8006352:	4618      	mov	r0, r3
 8006354:	f001 fa2a 	bl	80077ac <RCCEx_PLL2_Config>
 8006358:	4603      	mov	r3, r0
 800635a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800635e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800636a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800636e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	2100      	movs	r1, #0
 8006378:	61b9      	str	r1, [r7, #24]
 800637a:	f003 0304 	and.w	r3, r3, #4
 800637e:	61fb      	str	r3, [r7, #28]
 8006380:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006384:	460b      	mov	r3, r1
 8006386:	4313      	orrs	r3, r2
 8006388:	d011      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800638a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638e:	3308      	adds	r3, #8
 8006390:	2102      	movs	r1, #2
 8006392:	4618      	mov	r0, r3
 8006394:	f001 fa0a 	bl	80077ac <RCCEx_PLL2_Config>
 8006398:	4603      	mov	r3, r0
 800639a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800639e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80063ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b6:	2100      	movs	r1, #0
 80063b8:	6139      	str	r1, [r7, #16]
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	617b      	str	r3, [r7, #20]
 80063c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80063c4:	460b      	mov	r3, r1
 80063c6:	4313      	orrs	r3, r2
 80063c8:	d011      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ce:	3328      	adds	r3, #40	@ 0x28
 80063d0:	2100      	movs	r1, #0
 80063d2:	4618      	mov	r0, r3
 80063d4:	f001 fa9c 	bl	8007910 <RCCEx_PLL3_Config>
 80063d8:	4603      	mov	r3, r0
 80063da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80063de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80063ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	2100      	movs	r1, #0
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	f003 0310 	and.w	r3, r3, #16
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006404:	460b      	mov	r3, r1
 8006406:	4313      	orrs	r3, r2
 8006408:	d011      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800640a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800640e:	3328      	adds	r3, #40	@ 0x28
 8006410:	2101      	movs	r1, #1
 8006412:	4618      	mov	r0, r3
 8006414:	f001 fa7c 	bl	8007910 <RCCEx_PLL3_Config>
 8006418:	4603      	mov	r3, r0
 800641a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800641e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006426:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800642a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800642e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	2100      	movs	r1, #0
 8006438:	6039      	str	r1, [r7, #0]
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	607b      	str	r3, [r7, #4]
 8006440:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006444:	460b      	mov	r3, r1
 8006446:	4313      	orrs	r3, r2
 8006448:	d011      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800644a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800644e:	3328      	adds	r3, #40	@ 0x28
 8006450:	2102      	movs	r1, #2
 8006452:	4618      	mov	r0, r3
 8006454:	f001 fa5c 	bl	8007910 <RCCEx_PLL3_Config>
 8006458:	4603      	mov	r3, r0
 800645a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800645e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006466:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800646a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800646e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	e000      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
}
 800647c:	4618      	mov	r0, r3
 800647e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006482:	46bd      	mov	sp, r7
 8006484:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006488:	58024400 	.word	0x58024400

0800648c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b090      	sub	sp, #64	@ 0x40
 8006490:	af00      	add	r7, sp, #0
 8006492:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006496:	e9d7 2300 	ldrd	r2, r3, [r7]
 800649a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800649e:	430b      	orrs	r3, r1
 80064a0:	f040 8094 	bne.w	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80064a4:	4b9e      	ldr	r3, [pc, #632]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80064ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	f200 8087 	bhi.w	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80064b6:	a201      	add	r2, pc, #4	@ (adr r2, 80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80064b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064bc:	080064d1 	.word	0x080064d1
 80064c0:	080064f9 	.word	0x080064f9
 80064c4:	08006521 	.word	0x08006521
 80064c8:	080065bd 	.word	0x080065bd
 80064cc:	08006549 	.word	0x08006549
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064d0:	4b93      	ldr	r3, [pc, #588]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064dc:	d108      	bne.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064e2:	4618      	mov	r0, r3
 80064e4:	f001 f810 	bl	8007508 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064ec:	f000 bd45 	b.w	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064f0:	2300      	movs	r3, #0
 80064f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064f4:	f000 bd41 	b.w	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064f8:	4b89      	ldr	r3, [pc, #548]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006500:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006504:	d108      	bne.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006506:	f107 0318 	add.w	r3, r7, #24
 800650a:	4618      	mov	r0, r3
 800650c:	f000 fd54 	bl	8006fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006514:	f000 bd31 	b.w	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006518:	2300      	movs	r3, #0
 800651a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800651c:	f000 bd2d 	b.w	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006520:	4b7f      	ldr	r3, [pc, #508]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006528:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800652c:	d108      	bne.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800652e:	f107 030c 	add.w	r3, r7, #12
 8006532:	4618      	mov	r0, r3
 8006534:	f000 fe94 	bl	8007260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800653c:	f000 bd1d 	b.w	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006540:	2300      	movs	r3, #0
 8006542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006544:	f000 bd19 	b.w	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006548:	4b75      	ldr	r3, [pc, #468]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800654a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800654c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006550:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006552:	4b73      	ldr	r3, [pc, #460]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	2b04      	cmp	r3, #4
 800655c:	d10c      	bne.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800655e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006560:	2b00      	cmp	r3, #0
 8006562:	d109      	bne.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006564:	4b6e      	ldr	r3, [pc, #440]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	08db      	lsrs	r3, r3, #3
 800656a:	f003 0303 	and.w	r3, r3, #3
 800656e:	4a6d      	ldr	r2, [pc, #436]	@ (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006570:	fa22 f303 	lsr.w	r3, r2, r3
 8006574:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006576:	e01f      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006578:	4b69      	ldr	r3, [pc, #420]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006584:	d106      	bne.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006588:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800658c:	d102      	bne.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800658e:	4b66      	ldr	r3, [pc, #408]	@ (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006590:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006592:	e011      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006594:	4b62      	ldr	r3, [pc, #392]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800659c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065a0:	d106      	bne.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80065a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065a8:	d102      	bne.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80065aa:	4b60      	ldr	r3, [pc, #384]	@ (800672c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80065ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065ae:	e003      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80065b0:	2300      	movs	r3, #0
 80065b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80065b4:	f000 bce1 	b.w	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80065b8:	f000 bcdf 	b.w	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80065bc:	4b5c      	ldr	r3, [pc, #368]	@ (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80065be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065c0:	f000 bcdb 	b.w	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065c8:	f000 bcd7 	b.w	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80065cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065d0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80065d4:	430b      	orrs	r3, r1
 80065d6:	f040 80ad 	bne.w	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80065da:	4b51      	ldr	r3, [pc, #324]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065de:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80065e2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80065e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065ea:	d056      	beq.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80065ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065f2:	f200 8090 	bhi.w	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80065f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f8:	2bc0      	cmp	r3, #192	@ 0xc0
 80065fa:	f000 8088 	beq.w	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80065fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006600:	2bc0      	cmp	r3, #192	@ 0xc0
 8006602:	f200 8088 	bhi.w	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006608:	2b80      	cmp	r3, #128	@ 0x80
 800660a:	d032      	beq.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800660c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660e:	2b80      	cmp	r3, #128	@ 0x80
 8006610:	f200 8081 	bhi.w	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800661a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661c:	2b40      	cmp	r3, #64	@ 0x40
 800661e:	d014      	beq.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006620:	e079      	b.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006622:	4b3f      	ldr	r3, [pc, #252]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800662a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800662e:	d108      	bne.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006630:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006634:	4618      	mov	r0, r3
 8006636:	f000 ff67 	bl	8007508 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800663a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800663e:	f000 bc9c 	b.w	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006642:	2300      	movs	r3, #0
 8006644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006646:	f000 bc98 	b.w	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800664a:	4b35      	ldr	r3, [pc, #212]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006652:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006656:	d108      	bne.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006658:	f107 0318 	add.w	r3, r7, #24
 800665c:	4618      	mov	r0, r3
 800665e:	f000 fcab 	bl	8006fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006666:	f000 bc88 	b.w	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800666a:	2300      	movs	r3, #0
 800666c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800666e:	f000 bc84 	b.w	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006672:	4b2b      	ldr	r3, [pc, #172]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800667a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800667e:	d108      	bne.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006680:	f107 030c 	add.w	r3, r7, #12
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fdeb 	bl	8007260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800668e:	f000 bc74 	b.w	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006696:	f000 bc70 	b.w	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800669a:	4b21      	ldr	r3, [pc, #132]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800669c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800669e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80066a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066a4:	4b1e      	ldr	r3, [pc, #120]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	d10c      	bne.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80066b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d109      	bne.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066b6:	4b1a      	ldr	r3, [pc, #104]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	08db      	lsrs	r3, r3, #3
 80066bc:	f003 0303 	and.w	r3, r3, #3
 80066c0:	4a18      	ldr	r2, [pc, #96]	@ (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80066c2:	fa22 f303 	lsr.w	r3, r2, r3
 80066c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066c8:	e01f      	b.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066ca:	4b15      	ldr	r3, [pc, #84]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066d6:	d106      	bne.n	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80066d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066de:	d102      	bne.n	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80066e0:	4b11      	ldr	r3, [pc, #68]	@ (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80066e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066e4:	e011      	b.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066f2:	d106      	bne.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80066f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066fa:	d102      	bne.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80066fc:	4b0b      	ldr	r3, [pc, #44]	@ (800672c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80066fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006700:	e003      	b.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006702:	2300      	movs	r3, #0
 8006704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006706:	f000 bc38 	b.w	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800670a:	f000 bc36 	b.w	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800670e:	4b08      	ldr	r3, [pc, #32]	@ (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006712:	f000 bc32 	b.w	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006716:	2300      	movs	r3, #0
 8006718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800671a:	f000 bc2e 	b.w	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800671e:	bf00      	nop
 8006720:	58024400 	.word	0x58024400
 8006724:	03d09000 	.word	0x03d09000
 8006728:	003d0900 	.word	0x003d0900
 800672c:	007a1200 	.word	0x007a1200
 8006730:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006738:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800673c:	430b      	orrs	r3, r1
 800673e:	f040 809c 	bne.w	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006742:	4b9e      	ldr	r3, [pc, #632]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006746:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800674a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800674c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006752:	d054      	beq.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006756:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800675a:	f200 808b 	bhi.w	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800675e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006760:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006764:	f000 8083 	beq.w	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800676e:	f200 8081 	bhi.w	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006774:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006778:	d02f      	beq.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800677a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006780:	d878      	bhi.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006784:	2b00      	cmp	r3, #0
 8006786:	d004      	beq.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800678e:	d012      	beq.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006790:	e070      	b.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006792:	4b8a      	ldr	r3, [pc, #552]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800679a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800679e:	d107      	bne.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 feaf 	bl	8007508 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067ae:	e3e4      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067b0:	2300      	movs	r3, #0
 80067b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067b4:	e3e1      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067b6:	4b81      	ldr	r3, [pc, #516]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067c2:	d107      	bne.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067c4:	f107 0318 	add.w	r3, r7, #24
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 fbf5 	bl	8006fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067d2:	e3d2      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067d4:	2300      	movs	r3, #0
 80067d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067d8:	e3cf      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067da:	4b78      	ldr	r3, [pc, #480]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067e6:	d107      	bne.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067e8:	f107 030c 	add.w	r3, r7, #12
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 fd37 	bl	8007260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067f6:	e3c0      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067fc:	e3bd      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80067fe:	4b6f      	ldr	r3, [pc, #444]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006802:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006806:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006808:	4b6c      	ldr	r3, [pc, #432]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b04      	cmp	r3, #4
 8006812:	d10c      	bne.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006816:	2b00      	cmp	r3, #0
 8006818:	d109      	bne.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800681a:	4b68      	ldr	r3, [pc, #416]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	08db      	lsrs	r3, r3, #3
 8006820:	f003 0303 	and.w	r3, r3, #3
 8006824:	4a66      	ldr	r2, [pc, #408]	@ (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006826:	fa22 f303 	lsr.w	r3, r2, r3
 800682a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800682c:	e01e      	b.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800682e:	4b63      	ldr	r3, [pc, #396]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800683a:	d106      	bne.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800683c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800683e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006842:	d102      	bne.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006844:	4b5f      	ldr	r3, [pc, #380]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006846:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006848:	e010      	b.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800684a:	4b5c      	ldr	r3, [pc, #368]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006852:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006856:	d106      	bne.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800685a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800685e:	d102      	bne.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006860:	4b59      	ldr	r3, [pc, #356]	@ (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006862:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006864:	e002      	b.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006866:	2300      	movs	r3, #0
 8006868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800686a:	e386      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800686c:	e385      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800686e:	4b57      	ldr	r3, [pc, #348]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006872:	e382      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006874:	2300      	movs	r3, #0
 8006876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006878:	e37f      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800687a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800687e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006882:	430b      	orrs	r3, r1
 8006884:	f040 80a7 	bne.w	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006888:	4b4c      	ldr	r3, [pc, #304]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800688a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800688c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006890:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006894:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006898:	d055      	beq.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800689a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068a0:	f200 8096 	bhi.w	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80068a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80068aa:	f000 8084 	beq.w	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80068ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80068b4:	f200 808c 	bhi.w	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80068b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068be:	d030      	beq.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80068c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068c6:	f200 8083 	bhi.w	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80068ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d004      	beq.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80068d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068d6:	d012      	beq.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80068d8:	e07a      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068da:	4b38      	ldr	r3, [pc, #224]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068e6:	d107      	bne.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 fe0b 	bl	8007508 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068f6:	e340      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068f8:	2300      	movs	r3, #0
 80068fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068fc:	e33d      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068fe:	4b2f      	ldr	r3, [pc, #188]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006906:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800690a:	d107      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800690c:	f107 0318 	add.w	r3, r7, #24
 8006910:	4618      	mov	r0, r3
 8006912:	f000 fb51 	bl	8006fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800691a:	e32e      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800691c:	2300      	movs	r3, #0
 800691e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006920:	e32b      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006922:	4b26      	ldr	r3, [pc, #152]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800692a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800692e:	d107      	bne.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006930:	f107 030c 	add.w	r3, r7, #12
 8006934:	4618      	mov	r0, r3
 8006936:	f000 fc93 	bl	8007260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800693e:	e31c      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006944:	e319      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006946:	4b1d      	ldr	r3, [pc, #116]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800694a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800694e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006950:	4b1a      	ldr	r3, [pc, #104]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b04      	cmp	r3, #4
 800695a:	d10c      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800695c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006962:	4b16      	ldr	r3, [pc, #88]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	08db      	lsrs	r3, r3, #3
 8006968:	f003 0303 	and.w	r3, r3, #3
 800696c:	4a14      	ldr	r2, [pc, #80]	@ (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800696e:	fa22 f303 	lsr.w	r3, r2, r3
 8006972:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006974:	e01e      	b.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006976:	4b11      	ldr	r3, [pc, #68]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800697e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006982:	d106      	bne.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006986:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800698a:	d102      	bne.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800698c:	4b0d      	ldr	r3, [pc, #52]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800698e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006990:	e010      	b.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006992:	4b0a      	ldr	r3, [pc, #40]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800699a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800699e:	d106      	bne.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80069a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069a6:	d102      	bne.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80069a8:	4b07      	ldr	r3, [pc, #28]	@ (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80069aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069ac:	e002      	b.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80069ae:	2300      	movs	r3, #0
 80069b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80069b2:	e2e2      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069b4:	e2e1      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80069b6:	4b05      	ldr	r3, [pc, #20]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80069b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069ba:	e2de      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069bc:	58024400 	.word	0x58024400
 80069c0:	03d09000 	.word	0x03d09000
 80069c4:	003d0900 	.word	0x003d0900
 80069c8:	007a1200 	.word	0x007a1200
 80069cc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80069d0:	2300      	movs	r3, #0
 80069d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069d4:	e2d1      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80069d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069da:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80069de:	430b      	orrs	r3, r1
 80069e0:	f040 809c 	bne.w	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80069e4:	4b93      	ldr	r3, [pc, #588]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80069e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069e8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80069ec:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80069ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069f4:	d054      	beq.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80069f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069fc:	f200 808b 	bhi.w	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a06:	f000 8083 	beq.w	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a10:	f200 8081 	bhi.w	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a1a:	d02f      	beq.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a22:	d878      	bhi.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d004      	beq.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a30:	d012      	beq.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006a32:	e070      	b.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a34:	4b7f      	ldr	r3, [pc, #508]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a40:	d107      	bne.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fd5e 	bl	8007508 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a50:	e293      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a52:	2300      	movs	r3, #0
 8006a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a56:	e290      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a58:	4b76      	ldr	r3, [pc, #472]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a64:	d107      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a66:	f107 0318 	add.w	r3, r7, #24
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 faa4 	bl	8006fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a74:	e281      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a76:	2300      	movs	r3, #0
 8006a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a7a:	e27e      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a7c:	4b6d      	ldr	r3, [pc, #436]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a88:	d107      	bne.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a8a:	f107 030c 	add.w	r3, r7, #12
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 fbe6 	bl	8007260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a98:	e26f      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a9e:	e26c      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006aa0:	4b64      	ldr	r3, [pc, #400]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aa4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006aa8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006aaa:	4b62      	ldr	r3, [pc, #392]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0304 	and.w	r3, r3, #4
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	d10c      	bne.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d109      	bne.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006abc:	4b5d      	ldr	r3, [pc, #372]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	08db      	lsrs	r3, r3, #3
 8006ac2:	f003 0303 	and.w	r3, r3, #3
 8006ac6:	4a5c      	ldr	r2, [pc, #368]	@ (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8006acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ace:	e01e      	b.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ad0:	4b58      	ldr	r3, [pc, #352]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ad8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006adc:	d106      	bne.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ae0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ae4:	d102      	bne.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ae6:	4b55      	ldr	r3, [pc, #340]	@ (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006aea:	e010      	b.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006aec:	4b51      	ldr	r3, [pc, #324]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006af4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006af8:	d106      	bne.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006afc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b00:	d102      	bne.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b02:	4b4f      	ldr	r3, [pc, #316]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b06:	e002      	b.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006b0c:	e235      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b0e:	e234      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b10:	4b4c      	ldr	r3, [pc, #304]	@ (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b14:	e231      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006b16:	2300      	movs	r3, #0
 8006b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b1a:	e22e      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006b1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b20:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006b24:	430b      	orrs	r3, r1
 8006b26:	f040 808f 	bne.w	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006b2a:	4b42      	ldr	r3, [pc, #264]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b2e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006b32:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b3a:	d06b      	beq.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b42:	d874      	bhi.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b4a:	d056      	beq.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b52:	d86c      	bhi.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b5a:	d03b      	beq.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b62:	d864      	bhi.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b6a:	d021      	beq.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b72:	d85c      	bhi.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d004      	beq.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b80:	d004      	beq.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006b82:	e054      	b.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006b84:	f7fe fa4c 	bl	8005020 <HAL_RCC_GetPCLK1Freq>
 8006b88:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b8a:	e1f6      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b8c:	4b29      	ldr	r3, [pc, #164]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b98:	d107      	bne.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b9a:	f107 0318 	add.w	r3, r7, #24
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 fa0a 	bl	8006fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ba8:	e1e7      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bae:	e1e4      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006bb0:	4b20      	ldr	r3, [pc, #128]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bbc:	d107      	bne.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bbe:	f107 030c 	add.w	r3, r7, #12
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 fb4c 	bl	8007260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bcc:	e1d5      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bd2:	e1d2      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bd4:	4b17      	ldr	r3, [pc, #92]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0304 	and.w	r3, r3, #4
 8006bdc:	2b04      	cmp	r3, #4
 8006bde:	d109      	bne.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006be0:	4b14      	ldr	r3, [pc, #80]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	08db      	lsrs	r3, r3, #3
 8006be6:	f003 0303 	and.w	r3, r3, #3
 8006bea:	4a13      	ldr	r2, [pc, #76]	@ (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006bec:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bf2:	e1c2      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bf8:	e1bf      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c06:	d102      	bne.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006c08:	4b0c      	ldr	r3, [pc, #48]	@ (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c0c:	e1b5      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c12:	e1b2      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006c14:	4b07      	ldr	r3, [pc, #28]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c20:	d102      	bne.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006c22:	4b07      	ldr	r3, [pc, #28]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c26:	e1a8      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c2c:	e1a5      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c32:	e1a2      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c34:	58024400 	.word	0x58024400
 8006c38:	03d09000 	.word	0x03d09000
 8006c3c:	003d0900 	.word	0x003d0900
 8006c40:	007a1200 	.word	0x007a1200
 8006c44:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c4c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006c50:	430b      	orrs	r3, r1
 8006c52:	d173      	bne.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006c54:	4b9c      	ldr	r3, [pc, #624]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c5c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c64:	d02f      	beq.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c6c:	d863      	bhi.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c7a:	d012      	beq.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006c7c:	e05b      	b.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c7e:	4b92      	ldr	r3, [pc, #584]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c8a:	d107      	bne.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c8c:	f107 0318 	add.w	r3, r7, #24
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 f991 	bl	8006fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c9a:	e16e      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ca0:	e16b      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ca2:	4b89      	ldr	r3, [pc, #548]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006caa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cae:	d107      	bne.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cb0:	f107 030c 	add.w	r3, r7, #12
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fad3 	bl	8007260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cbe:	e15c      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cc4:	e159      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cc6:	4b80      	ldr	r3, [pc, #512]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006cce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cd0:	4b7d      	ldr	r3, [pc, #500]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	d10c      	bne.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d109      	bne.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ce2:	4b79      	ldr	r3, [pc, #484]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	08db      	lsrs	r3, r3, #3
 8006ce8:	f003 0303 	and.w	r3, r3, #3
 8006cec:	4a77      	ldr	r2, [pc, #476]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006cee:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cf4:	e01e      	b.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cf6:	4b74      	ldr	r3, [pc, #464]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d02:	d106      	bne.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d0a:	d102      	bne.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d0c:	4b70      	ldr	r3, [pc, #448]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d10:	e010      	b.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d12:	4b6d      	ldr	r3, [pc, #436]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d1e:	d106      	bne.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d26:	d102      	bne.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d28:	4b6a      	ldr	r3, [pc, #424]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d2c:	e002      	b.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006d32:	e122      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d34:	e121      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006d36:	2300      	movs	r3, #0
 8006d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d3a:	e11e      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006d3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d40:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006d44:	430b      	orrs	r3, r1
 8006d46:	d133      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006d48:	4b5f      	ldr	r3, [pc, #380]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d50:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d5e:	d012      	beq.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006d60:	e023      	b.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d62:	4b59      	ldr	r3, [pc, #356]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d6e:	d107      	bne.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 fbc7 	bl	8007508 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d7e:	e0fc      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d80:	2300      	movs	r3, #0
 8006d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d84:	e0f9      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d86:	4b50      	ldr	r3, [pc, #320]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d92:	d107      	bne.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d94:	f107 0318 	add.w	r3, r7, #24
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 f90d 	bl	8006fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006da2:	e0ea      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006da8:	e0e7      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006daa:	2300      	movs	r3, #0
 8006dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dae:	e0e4      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006db4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006db8:	430b      	orrs	r3, r1
 8006dba:	f040 808d 	bne.w	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006dbe:	4b42      	ldr	r3, [pc, #264]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006dc6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006dce:	d06b      	beq.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006dd6:	d874      	bhi.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dde:	d056      	beq.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006de6:	d86c      	bhi.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006dee:	d03b      	beq.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006df6:	d864      	bhi.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dfe:	d021      	beq.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e06:	d85c      	bhi.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d004      	beq.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e14:	d004      	beq.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006e16:	e054      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006e18:	f000 f8b8 	bl	8006f8c <HAL_RCCEx_GetD3PCLK1Freq>
 8006e1c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e1e:	e0ac      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e20:	4b29      	ldr	r3, [pc, #164]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e2c:	d107      	bne.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e2e:	f107 0318 	add.w	r3, r7, #24
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 f8c0 	bl	8006fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e3c:	e09d      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e42:	e09a      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e44:	4b20      	ldr	r3, [pc, #128]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e50:	d107      	bne.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e52:	f107 030c 	add.w	r3, r7, #12
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fa02 	bl	8007260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e60:	e08b      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e66:	e088      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e68:	4b17      	ldr	r3, [pc, #92]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b04      	cmp	r3, #4
 8006e72:	d109      	bne.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e74:	4b14      	ldr	r3, [pc, #80]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	08db      	lsrs	r3, r3, #3
 8006e7a:	f003 0303 	and.w	r3, r3, #3
 8006e7e:	4a13      	ldr	r2, [pc, #76]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006e80:	fa22 f303 	lsr.w	r3, r2, r3
 8006e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e86:	e078      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e8c:	e075      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e9a:	d102      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ea0:	e06b      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ea6:	e068      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ea8:	4b07      	ldr	r3, [pc, #28]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eb4:	d102      	bne.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006eb6:	4b07      	ldr	r3, [pc, #28]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eba:	e05e      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ec0:	e05b      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ec6:	e058      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ec8:	58024400 	.word	0x58024400
 8006ecc:	03d09000 	.word	0x03d09000
 8006ed0:	003d0900 	.word	0x003d0900
 8006ed4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006ed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006edc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006ee0:	430b      	orrs	r3, r1
 8006ee2:	d148      	bne.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006ee4:	4b27      	ldr	r3, [pc, #156]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ee8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006eec:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ef4:	d02a      	beq.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006efc:	d838      	bhi.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d004      	beq.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f0a:	d00d      	beq.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006f0c:	e030      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f1a:	d102      	bne.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f20:	e02b      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f22:	2300      	movs	r3, #0
 8006f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f26:	e028      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f28:	4b16      	ldr	r3, [pc, #88]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f34:	d107      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fae4 	bl	8007508 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f44:	e019      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f4a:	e016      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f58:	d107      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f5a:	f107 0318 	add.w	r3, r7, #24
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 f82a 	bl	8006fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f68:	e007      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f6e:	e004      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f70:	2300      	movs	r3, #0
 8006f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f74:	e001      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006f76:	2300      	movs	r3, #0
 8006f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3740      	adds	r7, #64	@ 0x40
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	58024400 	.word	0x58024400
 8006f88:	007a1200 	.word	0x007a1200

08006f8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006f90:	f7fe f816 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>
 8006f94:	4602      	mov	r2, r0
 8006f96:	4b06      	ldr	r3, [pc, #24]	@ (8006fb0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	091b      	lsrs	r3, r3, #4
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	4904      	ldr	r1, [pc, #16]	@ (8006fb4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006fa2:	5ccb      	ldrb	r3, [r1, r3]
 8006fa4:	f003 031f 	and.w	r3, r3, #31
 8006fa8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	58024400 	.word	0x58024400
 8006fb4:	08009260 	.word	0x08009260

08006fb8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b089      	sub	sp, #36	@ 0x24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fc0:	4ba1      	ldr	r3, [pc, #644]	@ (8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc4:	f003 0303 	and.w	r3, r3, #3
 8006fc8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006fca:	4b9f      	ldr	r3, [pc, #636]	@ (8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fce:	0b1b      	lsrs	r3, r3, #12
 8006fd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fd4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006fd6:	4b9c      	ldr	r3, [pc, #624]	@ (8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fda:	091b      	lsrs	r3, r3, #4
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006fe2:	4b99      	ldr	r3, [pc, #612]	@ (8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe6:	08db      	lsrs	r3, r3, #3
 8006fe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	fb02 f303 	mul.w	r3, r2, r3
 8006ff2:	ee07 3a90 	vmov	s15, r3
 8006ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2b00      	cmp	r3, #0
 8007002:	f000 8111 	beq.w	8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	2b02      	cmp	r3, #2
 800700a:	f000 8083 	beq.w	8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	2b02      	cmp	r3, #2
 8007012:	f200 80a1 	bhi.w	8007158 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d003      	beq.n	8007024 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d056      	beq.n	80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007022:	e099      	b.n	8007158 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007024:	4b88      	ldr	r3, [pc, #544]	@ (8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0320 	and.w	r3, r3, #32
 800702c:	2b00      	cmp	r3, #0
 800702e:	d02d      	beq.n	800708c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007030:	4b85      	ldr	r3, [pc, #532]	@ (8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	08db      	lsrs	r3, r3, #3
 8007036:	f003 0303 	and.w	r3, r3, #3
 800703a:	4a84      	ldr	r2, [pc, #528]	@ (800724c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800703c:	fa22 f303 	lsr.w	r3, r2, r3
 8007040:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	ee07 3a90 	vmov	s15, r3
 8007048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	ee07 3a90 	vmov	s15, r3
 8007052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800705a:	4b7b      	ldr	r3, [pc, #492]	@ (8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800705c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007062:	ee07 3a90 	vmov	s15, r3
 8007066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800706a:	ed97 6a03 	vldr	s12, [r7, #12]
 800706e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007250 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800707a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800707e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007086:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800708a:	e087      	b.n	800719c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007096:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800709a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800709e:	4b6a      	ldr	r3, [pc, #424]	@ (8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a6:	ee07 3a90 	vmov	s15, r3
 80070aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80070b2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007250 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070ce:	e065      	b.n	800719c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070da:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007258 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e2:	4b59      	ldr	r3, [pc, #356]	@ (8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070f6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007250 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800710a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007112:	e043      	b.n	800719c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800725c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007126:	4b48      	ldr	r3, [pc, #288]	@ (8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800712a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007136:	ed97 6a03 	vldr	s12, [r7, #12]
 800713a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007250 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800713e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800714a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800714e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007152:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007156:	e021      	b.n	800719c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	ee07 3a90 	vmov	s15, r3
 800715e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007162:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007258 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800716a:	4b37      	ldr	r3, [pc, #220]	@ (8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800716c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800716e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007172:	ee07 3a90 	vmov	s15, r3
 8007176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800717a:	ed97 6a03 	vldr	s12, [r7, #12]
 800717e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007250 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800718a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800718e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007196:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800719a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800719c:	4b2a      	ldr	r3, [pc, #168]	@ (8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800719e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a0:	0a5b      	lsrs	r3, r3, #9
 80071a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80071ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071c2:	ee17 2a90 	vmov	r2, s15
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80071ca:	4b1f      	ldr	r3, [pc, #124]	@ (8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ce:	0c1b      	lsrs	r3, r3, #16
 80071d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071d4:	ee07 3a90 	vmov	s15, r3
 80071d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80071e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071f0:	ee17 2a90 	vmov	r2, s15
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80071f8:	4b13      	ldr	r3, [pc, #76]	@ (8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071fc:	0e1b      	lsrs	r3, r3, #24
 80071fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800720e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007212:	edd7 6a07 	vldr	s13, [r7, #28]
 8007216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800721a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800721e:	ee17 2a90 	vmov	r2, s15
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007226:	e008      	b.n	800723a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	609a      	str	r2, [r3, #8]
}
 800723a:	bf00      	nop
 800723c:	3724      	adds	r7, #36	@ 0x24
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	58024400 	.word	0x58024400
 800724c:	03d09000 	.word	0x03d09000
 8007250:	46000000 	.word	0x46000000
 8007254:	4c742400 	.word	0x4c742400
 8007258:	4a742400 	.word	0x4a742400
 800725c:	4af42400 	.word	0x4af42400

08007260 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007260:	b480      	push	{r7}
 8007262:	b089      	sub	sp, #36	@ 0x24
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007268:	4ba1      	ldr	r3, [pc, #644]	@ (80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800726a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800726c:	f003 0303 	and.w	r3, r3, #3
 8007270:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007272:	4b9f      	ldr	r3, [pc, #636]	@ (80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007276:	0d1b      	lsrs	r3, r3, #20
 8007278:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800727c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800727e:	4b9c      	ldr	r3, [pc, #624]	@ (80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007282:	0a1b      	lsrs	r3, r3, #8
 8007284:	f003 0301 	and.w	r3, r3, #1
 8007288:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800728a:	4b99      	ldr	r3, [pc, #612]	@ (80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800728c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800728e:	08db      	lsrs	r3, r3, #3
 8007290:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	fb02 f303 	mul.w	r3, r2, r3
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 8111 	beq.w	80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	f000 8083 	beq.w	80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	f200 80a1 	bhi.w	8007400 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d003      	beq.n	80072cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d056      	beq.n	8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80072ca:	e099      	b.n	8007400 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072cc:	4b88      	ldr	r3, [pc, #544]	@ (80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0320 	and.w	r3, r3, #32
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d02d      	beq.n	8007334 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072d8:	4b85      	ldr	r3, [pc, #532]	@ (80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	08db      	lsrs	r3, r3, #3
 80072de:	f003 0303 	and.w	r3, r3, #3
 80072e2:	4a84      	ldr	r2, [pc, #528]	@ (80074f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80072e4:	fa22 f303 	lsr.w	r3, r2, r3
 80072e8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	ee07 3a90 	vmov	s15, r3
 80072f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007302:	4b7b      	ldr	r3, [pc, #492]	@ (80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730a:	ee07 3a90 	vmov	s15, r3
 800730e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007312:	ed97 6a03 	vldr	s12, [r7, #12]
 8007316:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80074f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800731a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800731e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800732a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800732e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007332:	e087      	b.n	8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007346:	4b6a      	ldr	r3, [pc, #424]	@ (80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800734e:	ee07 3a90 	vmov	s15, r3
 8007352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007356:	ed97 6a03 	vldr	s12, [r7, #12]
 800735a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80074f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800735e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800736a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800736e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007376:	e065      	b.n	8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007382:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007500 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800738a:	4b59      	ldr	r3, [pc, #356]	@ (80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800738c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007392:	ee07 3a90 	vmov	s15, r3
 8007396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800739a:	ed97 6a03 	vldr	s12, [r7, #12]
 800739e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80074f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073ba:	e043      	b.n	8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007504 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80073ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ce:	4b48      	ldr	r3, [pc, #288]	@ (80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d6:	ee07 3a90 	vmov	s15, r3
 80073da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073de:	ed97 6a03 	vldr	s12, [r7, #12]
 80073e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80074f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073fe:	e021      	b.n	8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007500 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800740e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007412:	4b37      	ldr	r3, [pc, #220]	@ (80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007422:	ed97 6a03 	vldr	s12, [r7, #12]
 8007426:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80074f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800742a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800742e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800743a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800743e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007442:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007444:	4b2a      	ldr	r3, [pc, #168]	@ (80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007448:	0a5b      	lsrs	r3, r3, #9
 800744a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007456:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800745a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800745e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800746a:	ee17 2a90 	vmov	r2, s15
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007472:	4b1f      	ldr	r3, [pc, #124]	@ (80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007476:	0c1b      	lsrs	r3, r3, #16
 8007478:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800747c:	ee07 3a90 	vmov	s15, r3
 8007480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007484:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007488:	ee37 7a87 	vadd.f32	s14, s15, s14
 800748c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007498:	ee17 2a90 	vmov	r2, s15
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80074a0:	4b13      	ldr	r3, [pc, #76]	@ (80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a4:	0e1b      	lsrs	r3, r3, #24
 80074a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80074be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074c6:	ee17 2a90 	vmov	r2, s15
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80074ce:	e008      	b.n	80074e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	609a      	str	r2, [r3, #8]
}
 80074e2:	bf00      	nop
 80074e4:	3724      	adds	r7, #36	@ 0x24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	58024400 	.word	0x58024400
 80074f4:	03d09000 	.word	0x03d09000
 80074f8:	46000000 	.word	0x46000000
 80074fc:	4c742400 	.word	0x4c742400
 8007500:	4a742400 	.word	0x4a742400
 8007504:	4af42400 	.word	0x4af42400

08007508 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007508:	b480      	push	{r7}
 800750a:	b089      	sub	sp, #36	@ 0x24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007510:	4ba0      	ldr	r3, [pc, #640]	@ (8007794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007514:	f003 0303 	and.w	r3, r3, #3
 8007518:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800751a:	4b9e      	ldr	r3, [pc, #632]	@ (8007794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800751c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751e:	091b      	lsrs	r3, r3, #4
 8007520:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007524:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007526:	4b9b      	ldr	r3, [pc, #620]	@ (8007794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007530:	4b98      	ldr	r3, [pc, #608]	@ (8007794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007534:	08db      	lsrs	r3, r3, #3
 8007536:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	fb02 f303 	mul.w	r3, r2, r3
 8007540:	ee07 3a90 	vmov	s15, r3
 8007544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007548:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2b00      	cmp	r3, #0
 8007550:	f000 8111 	beq.w	8007776 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	2b02      	cmp	r3, #2
 8007558:	f000 8083 	beq.w	8007662 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	2b02      	cmp	r3, #2
 8007560:	f200 80a1 	bhi.w	80076a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d056      	beq.n	800761e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007570:	e099      	b.n	80076a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007572:	4b88      	ldr	r3, [pc, #544]	@ (8007794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0320 	and.w	r3, r3, #32
 800757a:	2b00      	cmp	r3, #0
 800757c:	d02d      	beq.n	80075da <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800757e:	4b85      	ldr	r3, [pc, #532]	@ (8007794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	08db      	lsrs	r3, r3, #3
 8007584:	f003 0303 	and.w	r3, r3, #3
 8007588:	4a83      	ldr	r2, [pc, #524]	@ (8007798 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800758a:	fa22 f303 	lsr.w	r3, r2, r3
 800758e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	ee07 3a90 	vmov	s15, r3
 8007596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	ee07 3a90 	vmov	s15, r3
 80075a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a8:	4b7a      	ldr	r3, [pc, #488]	@ (8007794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b0:	ee07 3a90 	vmov	s15, r3
 80075b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80075bc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800779c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80075d8:	e087      	b.n	80076ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	ee07 3a90 	vmov	s15, r3
 80075e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80077a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80075e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ec:	4b69      	ldr	r3, [pc, #420]	@ (8007794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f4:	ee07 3a90 	vmov	s15, r3
 80075f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007600:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800779c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800760c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007618:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800761c:	e065      	b.n	80076ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	ee07 3a90 	vmov	s15, r3
 8007624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007628:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80077a4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800762c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007630:	4b58      	ldr	r3, [pc, #352]	@ (8007794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007638:	ee07 3a90 	vmov	s15, r3
 800763c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007640:	ed97 6a03 	vldr	s12, [r7, #12]
 8007644:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800779c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007648:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800764c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007650:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007654:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800765c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007660:	e043      	b.n	80076ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	ee07 3a90 	vmov	s15, r3
 8007668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80077a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007670:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007674:	4b47      	ldr	r3, [pc, #284]	@ (8007794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767c:	ee07 3a90 	vmov	s15, r3
 8007680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007684:	ed97 6a03 	vldr	s12, [r7, #12]
 8007688:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800779c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800768c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007690:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007694:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007698:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800769c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076a4:	e021      	b.n	80076ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	ee07 3a90 	vmov	s15, r3
 80076ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80077a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80076b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b8:	4b36      	ldr	r3, [pc, #216]	@ (8007794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c0:	ee07 3a90 	vmov	s15, r3
 80076c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80076cc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800779c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076e8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80076ea:	4b2a      	ldr	r3, [pc, #168]	@ (8007794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ee:	0a5b      	lsrs	r3, r3, #9
 80076f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076f4:	ee07 3a90 	vmov	s15, r3
 80076f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007700:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007704:	edd7 6a07 	vldr	s13, [r7, #28]
 8007708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800770c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007710:	ee17 2a90 	vmov	r2, s15
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007718:	4b1e      	ldr	r3, [pc, #120]	@ (8007794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800771a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800771c:	0c1b      	lsrs	r3, r3, #16
 800771e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007722:	ee07 3a90 	vmov	s15, r3
 8007726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800772a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800772e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007732:	edd7 6a07 	vldr	s13, [r7, #28]
 8007736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800773a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800773e:	ee17 2a90 	vmov	r2, s15
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007746:	4b13      	ldr	r3, [pc, #76]	@ (8007794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800774a:	0e1b      	lsrs	r3, r3, #24
 800774c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007750:	ee07 3a90 	vmov	s15, r3
 8007754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007758:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800775c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007760:	edd7 6a07 	vldr	s13, [r7, #28]
 8007764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800776c:	ee17 2a90 	vmov	r2, s15
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007774:	e008      	b.n	8007788 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	609a      	str	r2, [r3, #8]
}
 8007788:	bf00      	nop
 800778a:	3724      	adds	r7, #36	@ 0x24
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	58024400 	.word	0x58024400
 8007798:	03d09000 	.word	0x03d09000
 800779c:	46000000 	.word	0x46000000
 80077a0:	4c742400 	.word	0x4c742400
 80077a4:	4a742400 	.word	0x4a742400
 80077a8:	4af42400 	.word	0x4af42400

080077ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077ba:	4b53      	ldr	r3, [pc, #332]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 80077bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077be:	f003 0303 	and.w	r3, r3, #3
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d101      	bne.n	80077ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e099      	b.n	80078fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80077ca:	4b4f      	ldr	r3, [pc, #316]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a4e      	ldr	r2, [pc, #312]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 80077d0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80077d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077d6:	f7fa f8a1 	bl	800191c <HAL_GetTick>
 80077da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077dc:	e008      	b.n	80077f0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80077de:	f7fa f89d 	bl	800191c <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d901      	bls.n	80077f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e086      	b.n	80078fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077f0:	4b45      	ldr	r3, [pc, #276]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1f0      	bne.n	80077de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80077fc:	4b42      	ldr	r3, [pc, #264]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 80077fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007800:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	031b      	lsls	r3, r3, #12
 800780a:	493f      	ldr	r1, [pc, #252]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 800780c:	4313      	orrs	r3, r2
 800780e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	3b01      	subs	r3, #1
 8007816:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	3b01      	subs	r3, #1
 8007820:	025b      	lsls	r3, r3, #9
 8007822:	b29b      	uxth	r3, r3
 8007824:	431a      	orrs	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	3b01      	subs	r3, #1
 800782c:	041b      	lsls	r3, r3, #16
 800782e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007832:	431a      	orrs	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	3b01      	subs	r3, #1
 800783a:	061b      	lsls	r3, r3, #24
 800783c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007840:	4931      	ldr	r1, [pc, #196]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007842:	4313      	orrs	r3, r2
 8007844:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007846:	4b30      	ldr	r3, [pc, #192]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	492d      	ldr	r1, [pc, #180]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007854:	4313      	orrs	r3, r2
 8007856:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007858:	4b2b      	ldr	r3, [pc, #172]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 800785a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785c:	f023 0220 	bic.w	r2, r3, #32
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	4928      	ldr	r1, [pc, #160]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007866:	4313      	orrs	r3, r2
 8007868:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800786a:	4b27      	ldr	r3, [pc, #156]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 800786c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786e:	4a26      	ldr	r2, [pc, #152]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007870:	f023 0310 	bic.w	r3, r3, #16
 8007874:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007876:	4b24      	ldr	r3, [pc, #144]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007878:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800787a:	4b24      	ldr	r3, [pc, #144]	@ (800790c <RCCEx_PLL2_Config+0x160>)
 800787c:	4013      	ands	r3, r2
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	69d2      	ldr	r2, [r2, #28]
 8007882:	00d2      	lsls	r2, r2, #3
 8007884:	4920      	ldr	r1, [pc, #128]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007886:	4313      	orrs	r3, r2
 8007888:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800788a:	4b1f      	ldr	r3, [pc, #124]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 800788c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788e:	4a1e      	ldr	r2, [pc, #120]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007890:	f043 0310 	orr.w	r3, r3, #16
 8007894:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d106      	bne.n	80078aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800789c:	4b1a      	ldr	r3, [pc, #104]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 800789e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a0:	4a19      	ldr	r2, [pc, #100]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80078a8:	e00f      	b.n	80078ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d106      	bne.n	80078be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80078b0:	4b15      	ldr	r3, [pc, #84]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b4:	4a14      	ldr	r2, [pc, #80]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80078bc:	e005      	b.n	80078ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80078be:	4b12      	ldr	r3, [pc, #72]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c2:	4a11      	ldr	r2, [pc, #68]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80078c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80078ca:	4b0f      	ldr	r3, [pc, #60]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a0e      	ldr	r2, [pc, #56]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80078d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078d6:	f7fa f821 	bl	800191c <HAL_GetTick>
 80078da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078dc:	e008      	b.n	80078f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078de:	f7fa f81d 	bl	800191c <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d901      	bls.n	80078f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e006      	b.n	80078fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078f0:	4b05      	ldr	r3, [pc, #20]	@ (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d0f0      	beq.n	80078de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	58024400 	.word	0x58024400
 800790c:	ffff0007 	.word	0xffff0007

08007910 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800791e:	4b53      	ldr	r3, [pc, #332]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007922:	f003 0303 	and.w	r3, r3, #3
 8007926:	2b03      	cmp	r3, #3
 8007928:	d101      	bne.n	800792e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e099      	b.n	8007a62 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800792e:	4b4f      	ldr	r3, [pc, #316]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a4e      	ldr	r2, [pc, #312]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007934:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800793a:	f7f9 ffef 	bl	800191c <HAL_GetTick>
 800793e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007940:	e008      	b.n	8007954 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007942:	f7f9 ffeb 	bl	800191c <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	2b02      	cmp	r3, #2
 800794e:	d901      	bls.n	8007954 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e086      	b.n	8007a62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007954:	4b45      	ldr	r3, [pc, #276]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1f0      	bne.n	8007942 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007960:	4b42      	ldr	r3, [pc, #264]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007964:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	051b      	lsls	r3, r3, #20
 800796e:	493f      	ldr	r1, [pc, #252]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007970:	4313      	orrs	r3, r2
 8007972:	628b      	str	r3, [r1, #40]	@ 0x28
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	3b01      	subs	r3, #1
 800797a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	3b01      	subs	r3, #1
 8007984:	025b      	lsls	r3, r3, #9
 8007986:	b29b      	uxth	r3, r3
 8007988:	431a      	orrs	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	3b01      	subs	r3, #1
 8007990:	041b      	lsls	r3, r3, #16
 8007992:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007996:	431a      	orrs	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	3b01      	subs	r3, #1
 800799e:	061b      	lsls	r3, r3, #24
 80079a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80079a4:	4931      	ldr	r1, [pc, #196]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80079aa:	4b30      	ldr	r3, [pc, #192]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	492d      	ldr	r1, [pc, #180]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079b8:	4313      	orrs	r3, r2
 80079ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80079bc:	4b2b      	ldr	r3, [pc, #172]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	4928      	ldr	r1, [pc, #160]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80079ce:	4b27      	ldr	r3, [pc, #156]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d2:	4a26      	ldr	r2, [pc, #152]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80079da:	4b24      	ldr	r3, [pc, #144]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079de:	4b24      	ldr	r3, [pc, #144]	@ (8007a70 <RCCEx_PLL3_Config+0x160>)
 80079e0:	4013      	ands	r3, r2
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	69d2      	ldr	r2, [r2, #28]
 80079e6:	00d2      	lsls	r2, r2, #3
 80079e8:	4920      	ldr	r1, [pc, #128]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80079ee:	4b1f      	ldr	r3, [pc, #124]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f2:	4a1e      	ldr	r2, [pc, #120]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d106      	bne.n	8007a0e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007a00:	4b1a      	ldr	r3, [pc, #104]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a04:	4a19      	ldr	r2, [pc, #100]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007a0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a0c:	e00f      	b.n	8007a2e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d106      	bne.n	8007a22 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007a14:	4b15      	ldr	r3, [pc, #84]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a18:	4a14      	ldr	r2, [pc, #80]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a1a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a20:	e005      	b.n	8007a2e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007a22:	4b12      	ldr	r3, [pc, #72]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a26:	4a11      	ldr	r2, [pc, #68]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a0e      	ldr	r2, [pc, #56]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a3a:	f7f9 ff6f 	bl	800191c <HAL_GetTick>
 8007a3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a40:	e008      	b.n	8007a54 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a42:	f7f9 ff6b 	bl	800191c <HAL_GetTick>
 8007a46:	4602      	mov	r2, r0
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d901      	bls.n	8007a54 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e006      	b.n	8007a62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a54:	4b05      	ldr	r3, [pc, #20]	@ (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d0f0      	beq.n	8007a42 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	58024400 	.word	0x58024400
 8007a70:	ffff0007 	.word	0xffff0007

08007a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e049      	b.n	8007b1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d106      	bne.n	8007aa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7f9 fc9e 	bl	80013dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	3304      	adds	r3, #4
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	4610      	mov	r0, r2
 8007ab4:	f000 f96e 	bl	8007d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	f003 0302 	and.w	r3, r3, #2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d020      	beq.n	8007b86 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d01b      	beq.n	8007b86 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f06f 0202 	mvn.w	r2, #2
 8007b56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	f003 0303 	and.w	r3, r3, #3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f8f3 	bl	8007d58 <HAL_TIM_IC_CaptureCallback>
 8007b72:	e005      	b.n	8007b80 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f8e5 	bl	8007d44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f8f6 	bl	8007d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f003 0304 	and.w	r3, r3, #4
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d020      	beq.n	8007bd2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f003 0304 	and.w	r3, r3, #4
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d01b      	beq.n	8007bd2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f06f 0204 	mvn.w	r2, #4
 8007ba2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d003      	beq.n	8007bc0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f8cd 	bl	8007d58 <HAL_TIM_IC_CaptureCallback>
 8007bbe:	e005      	b.n	8007bcc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f8bf 	bl	8007d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f8d0 	bl	8007d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	f003 0308 	and.w	r3, r3, #8
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d020      	beq.n	8007c1e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f003 0308 	and.w	r3, r3, #8
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d01b      	beq.n	8007c1e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f06f 0208 	mvn.w	r2, #8
 8007bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2204      	movs	r2, #4
 8007bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	69db      	ldr	r3, [r3, #28]
 8007bfc:	f003 0303 	and.w	r3, r3, #3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f8a7 	bl	8007d58 <HAL_TIM_IC_CaptureCallback>
 8007c0a:	e005      	b.n	8007c18 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f899 	bl	8007d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f8aa 	bl	8007d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	f003 0310 	and.w	r3, r3, #16
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d020      	beq.n	8007c6a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f003 0310 	and.w	r3, r3, #16
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d01b      	beq.n	8007c6a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f06f 0210 	mvn.w	r2, #16
 8007c3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2208      	movs	r2, #8
 8007c40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	69db      	ldr	r3, [r3, #28]
 8007c48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d003      	beq.n	8007c58 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f881 	bl	8007d58 <HAL_TIM_IC_CaptureCallback>
 8007c56:	e005      	b.n	8007c64 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f873 	bl	8007d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f884 	bl	8007d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	f003 0301 	and.w	r3, r3, #1
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00c      	beq.n	8007c8e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d007      	beq.n	8007c8e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f06f 0201 	mvn.w	r2, #1
 8007c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f851 	bl	8007d30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d104      	bne.n	8007ca2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00c      	beq.n	8007cbc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d007      	beq.n	8007cbc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f9aa 	bl	8008010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00c      	beq.n	8007ce0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d007      	beq.n	8007ce0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f9a2 	bl	8008024 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00c      	beq.n	8007d04 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d007      	beq.n	8007d04 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f83e 	bl	8007d80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	f003 0320 	and.w	r3, r3, #32
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00c      	beq.n	8007d28 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f003 0320 	and.w	r3, r3, #32
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d007      	beq.n	8007d28 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f06f 0220 	mvn.w	r2, #32
 8007d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f96a 	bl	8007ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a46      	ldr	r2, [pc, #280]	@ (8007ec0 <TIM_Base_SetConfig+0x12c>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d013      	beq.n	8007dd4 <TIM_Base_SetConfig+0x40>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007db2:	d00f      	beq.n	8007dd4 <TIM_Base_SetConfig+0x40>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a43      	ldr	r2, [pc, #268]	@ (8007ec4 <TIM_Base_SetConfig+0x130>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d00b      	beq.n	8007dd4 <TIM_Base_SetConfig+0x40>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a42      	ldr	r2, [pc, #264]	@ (8007ec8 <TIM_Base_SetConfig+0x134>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d007      	beq.n	8007dd4 <TIM_Base_SetConfig+0x40>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a41      	ldr	r2, [pc, #260]	@ (8007ecc <TIM_Base_SetConfig+0x138>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d003      	beq.n	8007dd4 <TIM_Base_SetConfig+0x40>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a40      	ldr	r2, [pc, #256]	@ (8007ed0 <TIM_Base_SetConfig+0x13c>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d108      	bne.n	8007de6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a35      	ldr	r2, [pc, #212]	@ (8007ec0 <TIM_Base_SetConfig+0x12c>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d01f      	beq.n	8007e2e <TIM_Base_SetConfig+0x9a>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007df4:	d01b      	beq.n	8007e2e <TIM_Base_SetConfig+0x9a>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a32      	ldr	r2, [pc, #200]	@ (8007ec4 <TIM_Base_SetConfig+0x130>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d017      	beq.n	8007e2e <TIM_Base_SetConfig+0x9a>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a31      	ldr	r2, [pc, #196]	@ (8007ec8 <TIM_Base_SetConfig+0x134>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d013      	beq.n	8007e2e <TIM_Base_SetConfig+0x9a>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a30      	ldr	r2, [pc, #192]	@ (8007ecc <TIM_Base_SetConfig+0x138>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d00f      	beq.n	8007e2e <TIM_Base_SetConfig+0x9a>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a2f      	ldr	r2, [pc, #188]	@ (8007ed0 <TIM_Base_SetConfig+0x13c>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d00b      	beq.n	8007e2e <TIM_Base_SetConfig+0x9a>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a2e      	ldr	r2, [pc, #184]	@ (8007ed4 <TIM_Base_SetConfig+0x140>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d007      	beq.n	8007e2e <TIM_Base_SetConfig+0x9a>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a2d      	ldr	r2, [pc, #180]	@ (8007ed8 <TIM_Base_SetConfig+0x144>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d003      	beq.n	8007e2e <TIM_Base_SetConfig+0x9a>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a2c      	ldr	r2, [pc, #176]	@ (8007edc <TIM_Base_SetConfig+0x148>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d108      	bne.n	8007e40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	689a      	ldr	r2, [r3, #8]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a16      	ldr	r2, [pc, #88]	@ (8007ec0 <TIM_Base_SetConfig+0x12c>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d00f      	beq.n	8007e8c <TIM_Base_SetConfig+0xf8>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a18      	ldr	r2, [pc, #96]	@ (8007ed0 <TIM_Base_SetConfig+0x13c>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d00b      	beq.n	8007e8c <TIM_Base_SetConfig+0xf8>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a17      	ldr	r2, [pc, #92]	@ (8007ed4 <TIM_Base_SetConfig+0x140>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d007      	beq.n	8007e8c <TIM_Base_SetConfig+0xf8>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a16      	ldr	r2, [pc, #88]	@ (8007ed8 <TIM_Base_SetConfig+0x144>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d003      	beq.n	8007e8c <TIM_Base_SetConfig+0xf8>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a15      	ldr	r2, [pc, #84]	@ (8007edc <TIM_Base_SetConfig+0x148>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d103      	bne.n	8007e94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	691a      	ldr	r2, [r3, #16]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d105      	bne.n	8007eb2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	f023 0201 	bic.w	r2, r3, #1
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	611a      	str	r2, [r3, #16]
  }
}
 8007eb2:	bf00      	nop
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	40010000 	.word	0x40010000
 8007ec4:	40000400 	.word	0x40000400
 8007ec8:	40000800 	.word	0x40000800
 8007ecc:	40000c00 	.word	0x40000c00
 8007ed0:	40010400 	.word	0x40010400
 8007ed4:	40014000 	.word	0x40014000
 8007ed8:	40014400 	.word	0x40014400
 8007edc:	40014800 	.word	0x40014800

08007ee0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d101      	bne.n	8007ef8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	e06d      	b.n	8007fd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a30      	ldr	r2, [pc, #192]	@ (8007fe0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d004      	beq.n	8007f2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a2f      	ldr	r2, [pc, #188]	@ (8007fe4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d108      	bne.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007f32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a20      	ldr	r2, [pc, #128]	@ (8007fe0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d022      	beq.n	8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f6a:	d01d      	beq.n	8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a1d      	ldr	r2, [pc, #116]	@ (8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d018      	beq.n	8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8007fec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d013      	beq.n	8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a1a      	ldr	r2, [pc, #104]	@ (8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d00e      	beq.n	8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a15      	ldr	r2, [pc, #84]	@ (8007fe4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d009      	beq.n	8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a16      	ldr	r2, [pc, #88]	@ (8007ff4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d004      	beq.n	8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a15      	ldr	r2, [pc, #84]	@ (8007ff8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d10c      	bne.n	8007fc2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr
 8007fe0:	40010000 	.word	0x40010000
 8007fe4:	40010400 	.word	0x40010400
 8007fe8:	40000400 	.word	0x40000400
 8007fec:	40000800 	.word	0x40000800
 8007ff0:	40000c00 	.word	0x40000c00
 8007ff4:	40001800 	.word	0x40001800
 8007ff8:	40014000 	.word	0x40014000

08007ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e042      	b.n	80080d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008050:	2b00      	cmp	r3, #0
 8008052:	d106      	bne.n	8008062 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7f9 f9fd 	bl	800145c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2224      	movs	r2, #36	@ 0x24
 8008066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f022 0201 	bic.w	r2, r2, #1
 8008078:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800807e:	2b00      	cmp	r3, #0
 8008080:	d002      	beq.n	8008088 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fd90 	bl	8008ba8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f825 	bl	80080d8 <UART_SetConfig>
 800808e:	4603      	mov	r3, r0
 8008090:	2b01      	cmp	r3, #1
 8008092:	d101      	bne.n	8008098 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e01b      	b.n	80080d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685a      	ldr	r2, [r3, #4]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80080a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	689a      	ldr	r2, [r3, #8]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80080b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0201 	orr.w	r2, r2, #1
 80080c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fe0f 	bl	8008cec <UART_CheckIdleState>
 80080ce:	4603      	mov	r3, r0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080dc:	b092      	sub	sp, #72	@ 0x48
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	689a      	ldr	r2, [r3, #8]
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	431a      	orrs	r2, r3
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	431a      	orrs	r2, r3
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	4bbe      	ldr	r3, [pc, #760]	@ (8008400 <UART_SetConfig+0x328>)
 8008108:	4013      	ands	r3, r2
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	6812      	ldr	r2, [r2, #0]
 800810e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008110:	430b      	orrs	r3, r1
 8008112:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	68da      	ldr	r2, [r3, #12]
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	430a      	orrs	r2, r1
 8008128:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4ab3      	ldr	r2, [pc, #716]	@ (8008404 <UART_SetConfig+0x32c>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d004      	beq.n	8008144 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	6a1b      	ldr	r3, [r3, #32]
 800813e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008140:	4313      	orrs	r3, r2
 8008142:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	689a      	ldr	r2, [r3, #8]
 800814a:	4baf      	ldr	r3, [pc, #700]	@ (8008408 <UART_SetConfig+0x330>)
 800814c:	4013      	ands	r3, r2
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	6812      	ldr	r2, [r2, #0]
 8008152:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008154:	430b      	orrs	r3, r1
 8008156:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815e:	f023 010f 	bic.w	r1, r3, #15
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	430a      	orrs	r2, r1
 800816c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4aa6      	ldr	r2, [pc, #664]	@ (800840c <UART_SetConfig+0x334>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d177      	bne.n	8008268 <UART_SetConfig+0x190>
 8008178:	4ba5      	ldr	r3, [pc, #660]	@ (8008410 <UART_SetConfig+0x338>)
 800817a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800817c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008180:	2b28      	cmp	r3, #40	@ 0x28
 8008182:	d86d      	bhi.n	8008260 <UART_SetConfig+0x188>
 8008184:	a201      	add	r2, pc, #4	@ (adr r2, 800818c <UART_SetConfig+0xb4>)
 8008186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818a:	bf00      	nop
 800818c:	08008231 	.word	0x08008231
 8008190:	08008261 	.word	0x08008261
 8008194:	08008261 	.word	0x08008261
 8008198:	08008261 	.word	0x08008261
 800819c:	08008261 	.word	0x08008261
 80081a0:	08008261 	.word	0x08008261
 80081a4:	08008261 	.word	0x08008261
 80081a8:	08008261 	.word	0x08008261
 80081ac:	08008239 	.word	0x08008239
 80081b0:	08008261 	.word	0x08008261
 80081b4:	08008261 	.word	0x08008261
 80081b8:	08008261 	.word	0x08008261
 80081bc:	08008261 	.word	0x08008261
 80081c0:	08008261 	.word	0x08008261
 80081c4:	08008261 	.word	0x08008261
 80081c8:	08008261 	.word	0x08008261
 80081cc:	08008241 	.word	0x08008241
 80081d0:	08008261 	.word	0x08008261
 80081d4:	08008261 	.word	0x08008261
 80081d8:	08008261 	.word	0x08008261
 80081dc:	08008261 	.word	0x08008261
 80081e0:	08008261 	.word	0x08008261
 80081e4:	08008261 	.word	0x08008261
 80081e8:	08008261 	.word	0x08008261
 80081ec:	08008249 	.word	0x08008249
 80081f0:	08008261 	.word	0x08008261
 80081f4:	08008261 	.word	0x08008261
 80081f8:	08008261 	.word	0x08008261
 80081fc:	08008261 	.word	0x08008261
 8008200:	08008261 	.word	0x08008261
 8008204:	08008261 	.word	0x08008261
 8008208:	08008261 	.word	0x08008261
 800820c:	08008251 	.word	0x08008251
 8008210:	08008261 	.word	0x08008261
 8008214:	08008261 	.word	0x08008261
 8008218:	08008261 	.word	0x08008261
 800821c:	08008261 	.word	0x08008261
 8008220:	08008261 	.word	0x08008261
 8008224:	08008261 	.word	0x08008261
 8008228:	08008261 	.word	0x08008261
 800822c:	08008259 	.word	0x08008259
 8008230:	2301      	movs	r3, #1
 8008232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008236:	e222      	b.n	800867e <UART_SetConfig+0x5a6>
 8008238:	2304      	movs	r3, #4
 800823a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800823e:	e21e      	b.n	800867e <UART_SetConfig+0x5a6>
 8008240:	2308      	movs	r3, #8
 8008242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008246:	e21a      	b.n	800867e <UART_SetConfig+0x5a6>
 8008248:	2310      	movs	r3, #16
 800824a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800824e:	e216      	b.n	800867e <UART_SetConfig+0x5a6>
 8008250:	2320      	movs	r3, #32
 8008252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008256:	e212      	b.n	800867e <UART_SetConfig+0x5a6>
 8008258:	2340      	movs	r3, #64	@ 0x40
 800825a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800825e:	e20e      	b.n	800867e <UART_SetConfig+0x5a6>
 8008260:	2380      	movs	r3, #128	@ 0x80
 8008262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008266:	e20a      	b.n	800867e <UART_SetConfig+0x5a6>
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a69      	ldr	r2, [pc, #420]	@ (8008414 <UART_SetConfig+0x33c>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d130      	bne.n	80082d4 <UART_SetConfig+0x1fc>
 8008272:	4b67      	ldr	r3, [pc, #412]	@ (8008410 <UART_SetConfig+0x338>)
 8008274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008276:	f003 0307 	and.w	r3, r3, #7
 800827a:	2b05      	cmp	r3, #5
 800827c:	d826      	bhi.n	80082cc <UART_SetConfig+0x1f4>
 800827e:	a201      	add	r2, pc, #4	@ (adr r2, 8008284 <UART_SetConfig+0x1ac>)
 8008280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008284:	0800829d 	.word	0x0800829d
 8008288:	080082a5 	.word	0x080082a5
 800828c:	080082ad 	.word	0x080082ad
 8008290:	080082b5 	.word	0x080082b5
 8008294:	080082bd 	.word	0x080082bd
 8008298:	080082c5 	.word	0x080082c5
 800829c:	2300      	movs	r3, #0
 800829e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082a2:	e1ec      	b.n	800867e <UART_SetConfig+0x5a6>
 80082a4:	2304      	movs	r3, #4
 80082a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082aa:	e1e8      	b.n	800867e <UART_SetConfig+0x5a6>
 80082ac:	2308      	movs	r3, #8
 80082ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082b2:	e1e4      	b.n	800867e <UART_SetConfig+0x5a6>
 80082b4:	2310      	movs	r3, #16
 80082b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ba:	e1e0      	b.n	800867e <UART_SetConfig+0x5a6>
 80082bc:	2320      	movs	r3, #32
 80082be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082c2:	e1dc      	b.n	800867e <UART_SetConfig+0x5a6>
 80082c4:	2340      	movs	r3, #64	@ 0x40
 80082c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ca:	e1d8      	b.n	800867e <UART_SetConfig+0x5a6>
 80082cc:	2380      	movs	r3, #128	@ 0x80
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d2:	e1d4      	b.n	800867e <UART_SetConfig+0x5a6>
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a4f      	ldr	r2, [pc, #316]	@ (8008418 <UART_SetConfig+0x340>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d130      	bne.n	8008340 <UART_SetConfig+0x268>
 80082de:	4b4c      	ldr	r3, [pc, #304]	@ (8008410 <UART_SetConfig+0x338>)
 80082e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082e2:	f003 0307 	and.w	r3, r3, #7
 80082e6:	2b05      	cmp	r3, #5
 80082e8:	d826      	bhi.n	8008338 <UART_SetConfig+0x260>
 80082ea:	a201      	add	r2, pc, #4	@ (adr r2, 80082f0 <UART_SetConfig+0x218>)
 80082ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f0:	08008309 	.word	0x08008309
 80082f4:	08008311 	.word	0x08008311
 80082f8:	08008319 	.word	0x08008319
 80082fc:	08008321 	.word	0x08008321
 8008300:	08008329 	.word	0x08008329
 8008304:	08008331 	.word	0x08008331
 8008308:	2300      	movs	r3, #0
 800830a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800830e:	e1b6      	b.n	800867e <UART_SetConfig+0x5a6>
 8008310:	2304      	movs	r3, #4
 8008312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008316:	e1b2      	b.n	800867e <UART_SetConfig+0x5a6>
 8008318:	2308      	movs	r3, #8
 800831a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800831e:	e1ae      	b.n	800867e <UART_SetConfig+0x5a6>
 8008320:	2310      	movs	r3, #16
 8008322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008326:	e1aa      	b.n	800867e <UART_SetConfig+0x5a6>
 8008328:	2320      	movs	r3, #32
 800832a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800832e:	e1a6      	b.n	800867e <UART_SetConfig+0x5a6>
 8008330:	2340      	movs	r3, #64	@ 0x40
 8008332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008336:	e1a2      	b.n	800867e <UART_SetConfig+0x5a6>
 8008338:	2380      	movs	r3, #128	@ 0x80
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800833e:	e19e      	b.n	800867e <UART_SetConfig+0x5a6>
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a35      	ldr	r2, [pc, #212]	@ (800841c <UART_SetConfig+0x344>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d130      	bne.n	80083ac <UART_SetConfig+0x2d4>
 800834a:	4b31      	ldr	r3, [pc, #196]	@ (8008410 <UART_SetConfig+0x338>)
 800834c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800834e:	f003 0307 	and.w	r3, r3, #7
 8008352:	2b05      	cmp	r3, #5
 8008354:	d826      	bhi.n	80083a4 <UART_SetConfig+0x2cc>
 8008356:	a201      	add	r2, pc, #4	@ (adr r2, 800835c <UART_SetConfig+0x284>)
 8008358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835c:	08008375 	.word	0x08008375
 8008360:	0800837d 	.word	0x0800837d
 8008364:	08008385 	.word	0x08008385
 8008368:	0800838d 	.word	0x0800838d
 800836c:	08008395 	.word	0x08008395
 8008370:	0800839d 	.word	0x0800839d
 8008374:	2300      	movs	r3, #0
 8008376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800837a:	e180      	b.n	800867e <UART_SetConfig+0x5a6>
 800837c:	2304      	movs	r3, #4
 800837e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008382:	e17c      	b.n	800867e <UART_SetConfig+0x5a6>
 8008384:	2308      	movs	r3, #8
 8008386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800838a:	e178      	b.n	800867e <UART_SetConfig+0x5a6>
 800838c:	2310      	movs	r3, #16
 800838e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008392:	e174      	b.n	800867e <UART_SetConfig+0x5a6>
 8008394:	2320      	movs	r3, #32
 8008396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800839a:	e170      	b.n	800867e <UART_SetConfig+0x5a6>
 800839c:	2340      	movs	r3, #64	@ 0x40
 800839e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083a2:	e16c      	b.n	800867e <UART_SetConfig+0x5a6>
 80083a4:	2380      	movs	r3, #128	@ 0x80
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083aa:	e168      	b.n	800867e <UART_SetConfig+0x5a6>
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a1b      	ldr	r2, [pc, #108]	@ (8008420 <UART_SetConfig+0x348>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d142      	bne.n	800843c <UART_SetConfig+0x364>
 80083b6:	4b16      	ldr	r3, [pc, #88]	@ (8008410 <UART_SetConfig+0x338>)
 80083b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ba:	f003 0307 	and.w	r3, r3, #7
 80083be:	2b05      	cmp	r3, #5
 80083c0:	d838      	bhi.n	8008434 <UART_SetConfig+0x35c>
 80083c2:	a201      	add	r2, pc, #4	@ (adr r2, 80083c8 <UART_SetConfig+0x2f0>)
 80083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c8:	080083e1 	.word	0x080083e1
 80083cc:	080083e9 	.word	0x080083e9
 80083d0:	080083f1 	.word	0x080083f1
 80083d4:	080083f9 	.word	0x080083f9
 80083d8:	08008425 	.word	0x08008425
 80083dc:	0800842d 	.word	0x0800842d
 80083e0:	2300      	movs	r3, #0
 80083e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083e6:	e14a      	b.n	800867e <UART_SetConfig+0x5a6>
 80083e8:	2304      	movs	r3, #4
 80083ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ee:	e146      	b.n	800867e <UART_SetConfig+0x5a6>
 80083f0:	2308      	movs	r3, #8
 80083f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083f6:	e142      	b.n	800867e <UART_SetConfig+0x5a6>
 80083f8:	2310      	movs	r3, #16
 80083fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083fe:	e13e      	b.n	800867e <UART_SetConfig+0x5a6>
 8008400:	cfff69f3 	.word	0xcfff69f3
 8008404:	58000c00 	.word	0x58000c00
 8008408:	11fff4ff 	.word	0x11fff4ff
 800840c:	40011000 	.word	0x40011000
 8008410:	58024400 	.word	0x58024400
 8008414:	40004400 	.word	0x40004400
 8008418:	40004800 	.word	0x40004800
 800841c:	40004c00 	.word	0x40004c00
 8008420:	40005000 	.word	0x40005000
 8008424:	2320      	movs	r3, #32
 8008426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800842a:	e128      	b.n	800867e <UART_SetConfig+0x5a6>
 800842c:	2340      	movs	r3, #64	@ 0x40
 800842e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008432:	e124      	b.n	800867e <UART_SetConfig+0x5a6>
 8008434:	2380      	movs	r3, #128	@ 0x80
 8008436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800843a:	e120      	b.n	800867e <UART_SetConfig+0x5a6>
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4acb      	ldr	r2, [pc, #812]	@ (8008770 <UART_SetConfig+0x698>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d176      	bne.n	8008534 <UART_SetConfig+0x45c>
 8008446:	4bcb      	ldr	r3, [pc, #812]	@ (8008774 <UART_SetConfig+0x69c>)
 8008448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800844a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800844e:	2b28      	cmp	r3, #40	@ 0x28
 8008450:	d86c      	bhi.n	800852c <UART_SetConfig+0x454>
 8008452:	a201      	add	r2, pc, #4	@ (adr r2, 8008458 <UART_SetConfig+0x380>)
 8008454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008458:	080084fd 	.word	0x080084fd
 800845c:	0800852d 	.word	0x0800852d
 8008460:	0800852d 	.word	0x0800852d
 8008464:	0800852d 	.word	0x0800852d
 8008468:	0800852d 	.word	0x0800852d
 800846c:	0800852d 	.word	0x0800852d
 8008470:	0800852d 	.word	0x0800852d
 8008474:	0800852d 	.word	0x0800852d
 8008478:	08008505 	.word	0x08008505
 800847c:	0800852d 	.word	0x0800852d
 8008480:	0800852d 	.word	0x0800852d
 8008484:	0800852d 	.word	0x0800852d
 8008488:	0800852d 	.word	0x0800852d
 800848c:	0800852d 	.word	0x0800852d
 8008490:	0800852d 	.word	0x0800852d
 8008494:	0800852d 	.word	0x0800852d
 8008498:	0800850d 	.word	0x0800850d
 800849c:	0800852d 	.word	0x0800852d
 80084a0:	0800852d 	.word	0x0800852d
 80084a4:	0800852d 	.word	0x0800852d
 80084a8:	0800852d 	.word	0x0800852d
 80084ac:	0800852d 	.word	0x0800852d
 80084b0:	0800852d 	.word	0x0800852d
 80084b4:	0800852d 	.word	0x0800852d
 80084b8:	08008515 	.word	0x08008515
 80084bc:	0800852d 	.word	0x0800852d
 80084c0:	0800852d 	.word	0x0800852d
 80084c4:	0800852d 	.word	0x0800852d
 80084c8:	0800852d 	.word	0x0800852d
 80084cc:	0800852d 	.word	0x0800852d
 80084d0:	0800852d 	.word	0x0800852d
 80084d4:	0800852d 	.word	0x0800852d
 80084d8:	0800851d 	.word	0x0800851d
 80084dc:	0800852d 	.word	0x0800852d
 80084e0:	0800852d 	.word	0x0800852d
 80084e4:	0800852d 	.word	0x0800852d
 80084e8:	0800852d 	.word	0x0800852d
 80084ec:	0800852d 	.word	0x0800852d
 80084f0:	0800852d 	.word	0x0800852d
 80084f4:	0800852d 	.word	0x0800852d
 80084f8:	08008525 	.word	0x08008525
 80084fc:	2301      	movs	r3, #1
 80084fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008502:	e0bc      	b.n	800867e <UART_SetConfig+0x5a6>
 8008504:	2304      	movs	r3, #4
 8008506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800850a:	e0b8      	b.n	800867e <UART_SetConfig+0x5a6>
 800850c:	2308      	movs	r3, #8
 800850e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008512:	e0b4      	b.n	800867e <UART_SetConfig+0x5a6>
 8008514:	2310      	movs	r3, #16
 8008516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800851a:	e0b0      	b.n	800867e <UART_SetConfig+0x5a6>
 800851c:	2320      	movs	r3, #32
 800851e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008522:	e0ac      	b.n	800867e <UART_SetConfig+0x5a6>
 8008524:	2340      	movs	r3, #64	@ 0x40
 8008526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800852a:	e0a8      	b.n	800867e <UART_SetConfig+0x5a6>
 800852c:	2380      	movs	r3, #128	@ 0x80
 800852e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008532:	e0a4      	b.n	800867e <UART_SetConfig+0x5a6>
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a8f      	ldr	r2, [pc, #572]	@ (8008778 <UART_SetConfig+0x6a0>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d130      	bne.n	80085a0 <UART_SetConfig+0x4c8>
 800853e:	4b8d      	ldr	r3, [pc, #564]	@ (8008774 <UART_SetConfig+0x69c>)
 8008540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008542:	f003 0307 	and.w	r3, r3, #7
 8008546:	2b05      	cmp	r3, #5
 8008548:	d826      	bhi.n	8008598 <UART_SetConfig+0x4c0>
 800854a:	a201      	add	r2, pc, #4	@ (adr r2, 8008550 <UART_SetConfig+0x478>)
 800854c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008550:	08008569 	.word	0x08008569
 8008554:	08008571 	.word	0x08008571
 8008558:	08008579 	.word	0x08008579
 800855c:	08008581 	.word	0x08008581
 8008560:	08008589 	.word	0x08008589
 8008564:	08008591 	.word	0x08008591
 8008568:	2300      	movs	r3, #0
 800856a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800856e:	e086      	b.n	800867e <UART_SetConfig+0x5a6>
 8008570:	2304      	movs	r3, #4
 8008572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008576:	e082      	b.n	800867e <UART_SetConfig+0x5a6>
 8008578:	2308      	movs	r3, #8
 800857a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800857e:	e07e      	b.n	800867e <UART_SetConfig+0x5a6>
 8008580:	2310      	movs	r3, #16
 8008582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008586:	e07a      	b.n	800867e <UART_SetConfig+0x5a6>
 8008588:	2320      	movs	r3, #32
 800858a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800858e:	e076      	b.n	800867e <UART_SetConfig+0x5a6>
 8008590:	2340      	movs	r3, #64	@ 0x40
 8008592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008596:	e072      	b.n	800867e <UART_SetConfig+0x5a6>
 8008598:	2380      	movs	r3, #128	@ 0x80
 800859a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800859e:	e06e      	b.n	800867e <UART_SetConfig+0x5a6>
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a75      	ldr	r2, [pc, #468]	@ (800877c <UART_SetConfig+0x6a4>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d130      	bne.n	800860c <UART_SetConfig+0x534>
 80085aa:	4b72      	ldr	r3, [pc, #456]	@ (8008774 <UART_SetConfig+0x69c>)
 80085ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ae:	f003 0307 	and.w	r3, r3, #7
 80085b2:	2b05      	cmp	r3, #5
 80085b4:	d826      	bhi.n	8008604 <UART_SetConfig+0x52c>
 80085b6:	a201      	add	r2, pc, #4	@ (adr r2, 80085bc <UART_SetConfig+0x4e4>)
 80085b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085bc:	080085d5 	.word	0x080085d5
 80085c0:	080085dd 	.word	0x080085dd
 80085c4:	080085e5 	.word	0x080085e5
 80085c8:	080085ed 	.word	0x080085ed
 80085cc:	080085f5 	.word	0x080085f5
 80085d0:	080085fd 	.word	0x080085fd
 80085d4:	2300      	movs	r3, #0
 80085d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085da:	e050      	b.n	800867e <UART_SetConfig+0x5a6>
 80085dc:	2304      	movs	r3, #4
 80085de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085e2:	e04c      	b.n	800867e <UART_SetConfig+0x5a6>
 80085e4:	2308      	movs	r3, #8
 80085e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ea:	e048      	b.n	800867e <UART_SetConfig+0x5a6>
 80085ec:	2310      	movs	r3, #16
 80085ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085f2:	e044      	b.n	800867e <UART_SetConfig+0x5a6>
 80085f4:	2320      	movs	r3, #32
 80085f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085fa:	e040      	b.n	800867e <UART_SetConfig+0x5a6>
 80085fc:	2340      	movs	r3, #64	@ 0x40
 80085fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008602:	e03c      	b.n	800867e <UART_SetConfig+0x5a6>
 8008604:	2380      	movs	r3, #128	@ 0x80
 8008606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800860a:	e038      	b.n	800867e <UART_SetConfig+0x5a6>
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a5b      	ldr	r2, [pc, #364]	@ (8008780 <UART_SetConfig+0x6a8>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d130      	bne.n	8008678 <UART_SetConfig+0x5a0>
 8008616:	4b57      	ldr	r3, [pc, #348]	@ (8008774 <UART_SetConfig+0x69c>)
 8008618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800861a:	f003 0307 	and.w	r3, r3, #7
 800861e:	2b05      	cmp	r3, #5
 8008620:	d826      	bhi.n	8008670 <UART_SetConfig+0x598>
 8008622:	a201      	add	r2, pc, #4	@ (adr r2, 8008628 <UART_SetConfig+0x550>)
 8008624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008628:	08008641 	.word	0x08008641
 800862c:	08008649 	.word	0x08008649
 8008630:	08008651 	.word	0x08008651
 8008634:	08008659 	.word	0x08008659
 8008638:	08008661 	.word	0x08008661
 800863c:	08008669 	.word	0x08008669
 8008640:	2302      	movs	r3, #2
 8008642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008646:	e01a      	b.n	800867e <UART_SetConfig+0x5a6>
 8008648:	2304      	movs	r3, #4
 800864a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800864e:	e016      	b.n	800867e <UART_SetConfig+0x5a6>
 8008650:	2308      	movs	r3, #8
 8008652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008656:	e012      	b.n	800867e <UART_SetConfig+0x5a6>
 8008658:	2310      	movs	r3, #16
 800865a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800865e:	e00e      	b.n	800867e <UART_SetConfig+0x5a6>
 8008660:	2320      	movs	r3, #32
 8008662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008666:	e00a      	b.n	800867e <UART_SetConfig+0x5a6>
 8008668:	2340      	movs	r3, #64	@ 0x40
 800866a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800866e:	e006      	b.n	800867e <UART_SetConfig+0x5a6>
 8008670:	2380      	movs	r3, #128	@ 0x80
 8008672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008676:	e002      	b.n	800867e <UART_SetConfig+0x5a6>
 8008678:	2380      	movs	r3, #128	@ 0x80
 800867a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a3f      	ldr	r2, [pc, #252]	@ (8008780 <UART_SetConfig+0x6a8>)
 8008684:	4293      	cmp	r3, r2
 8008686:	f040 80f8 	bne.w	800887a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800868a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800868e:	2b20      	cmp	r3, #32
 8008690:	dc46      	bgt.n	8008720 <UART_SetConfig+0x648>
 8008692:	2b02      	cmp	r3, #2
 8008694:	f2c0 8082 	blt.w	800879c <UART_SetConfig+0x6c4>
 8008698:	3b02      	subs	r3, #2
 800869a:	2b1e      	cmp	r3, #30
 800869c:	d87e      	bhi.n	800879c <UART_SetConfig+0x6c4>
 800869e:	a201      	add	r2, pc, #4	@ (adr r2, 80086a4 <UART_SetConfig+0x5cc>)
 80086a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a4:	08008727 	.word	0x08008727
 80086a8:	0800879d 	.word	0x0800879d
 80086ac:	0800872f 	.word	0x0800872f
 80086b0:	0800879d 	.word	0x0800879d
 80086b4:	0800879d 	.word	0x0800879d
 80086b8:	0800879d 	.word	0x0800879d
 80086bc:	0800873f 	.word	0x0800873f
 80086c0:	0800879d 	.word	0x0800879d
 80086c4:	0800879d 	.word	0x0800879d
 80086c8:	0800879d 	.word	0x0800879d
 80086cc:	0800879d 	.word	0x0800879d
 80086d0:	0800879d 	.word	0x0800879d
 80086d4:	0800879d 	.word	0x0800879d
 80086d8:	0800879d 	.word	0x0800879d
 80086dc:	0800874f 	.word	0x0800874f
 80086e0:	0800879d 	.word	0x0800879d
 80086e4:	0800879d 	.word	0x0800879d
 80086e8:	0800879d 	.word	0x0800879d
 80086ec:	0800879d 	.word	0x0800879d
 80086f0:	0800879d 	.word	0x0800879d
 80086f4:	0800879d 	.word	0x0800879d
 80086f8:	0800879d 	.word	0x0800879d
 80086fc:	0800879d 	.word	0x0800879d
 8008700:	0800879d 	.word	0x0800879d
 8008704:	0800879d 	.word	0x0800879d
 8008708:	0800879d 	.word	0x0800879d
 800870c:	0800879d 	.word	0x0800879d
 8008710:	0800879d 	.word	0x0800879d
 8008714:	0800879d 	.word	0x0800879d
 8008718:	0800879d 	.word	0x0800879d
 800871c:	0800878f 	.word	0x0800878f
 8008720:	2b40      	cmp	r3, #64	@ 0x40
 8008722:	d037      	beq.n	8008794 <UART_SetConfig+0x6bc>
 8008724:	e03a      	b.n	800879c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008726:	f7fe fc31 	bl	8006f8c <HAL_RCCEx_GetD3PCLK1Freq>
 800872a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800872c:	e03c      	b.n	80087a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800872e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008732:	4618      	mov	r0, r3
 8008734:	f7fe fc40 	bl	8006fb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800873a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800873c:	e034      	b.n	80087a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800873e:	f107 0318 	add.w	r3, r7, #24
 8008742:	4618      	mov	r0, r3
 8008744:	f7fe fd8c 	bl	8007260 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800874c:	e02c      	b.n	80087a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800874e:	4b09      	ldr	r3, [pc, #36]	@ (8008774 <UART_SetConfig+0x69c>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0320 	and.w	r3, r3, #32
 8008756:	2b00      	cmp	r3, #0
 8008758:	d016      	beq.n	8008788 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800875a:	4b06      	ldr	r3, [pc, #24]	@ (8008774 <UART_SetConfig+0x69c>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	08db      	lsrs	r3, r3, #3
 8008760:	f003 0303 	and.w	r3, r3, #3
 8008764:	4a07      	ldr	r2, [pc, #28]	@ (8008784 <UART_SetConfig+0x6ac>)
 8008766:	fa22 f303 	lsr.w	r3, r2, r3
 800876a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800876c:	e01c      	b.n	80087a8 <UART_SetConfig+0x6d0>
 800876e:	bf00      	nop
 8008770:	40011400 	.word	0x40011400
 8008774:	58024400 	.word	0x58024400
 8008778:	40007800 	.word	0x40007800
 800877c:	40007c00 	.word	0x40007c00
 8008780:	58000c00 	.word	0x58000c00
 8008784:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008788:	4b9d      	ldr	r3, [pc, #628]	@ (8008a00 <UART_SetConfig+0x928>)
 800878a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800878c:	e00c      	b.n	80087a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800878e:	4b9d      	ldr	r3, [pc, #628]	@ (8008a04 <UART_SetConfig+0x92c>)
 8008790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008792:	e009      	b.n	80087a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008794:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800879a:	e005      	b.n	80087a8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800879c:	2300      	movs	r3, #0
 800879e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80087a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80087a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f000 81de 	beq.w	8008b6c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b4:	4a94      	ldr	r2, [pc, #592]	@ (8008a08 <UART_SetConfig+0x930>)
 80087b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087ba:	461a      	mov	r2, r3
 80087bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087be:	fbb3 f3f2 	udiv	r3, r3, r2
 80087c2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	4613      	mov	r3, r2
 80087ca:	005b      	lsls	r3, r3, #1
 80087cc:	4413      	add	r3, r2
 80087ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d305      	bcc.n	80087e0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087dc:	429a      	cmp	r2, r3
 80087de:	d903      	bls.n	80087e8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80087e6:	e1c1      	b.n	8008b6c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ea:	2200      	movs	r2, #0
 80087ec:	60bb      	str	r3, [r7, #8]
 80087ee:	60fa      	str	r2, [r7, #12]
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f4:	4a84      	ldr	r2, [pc, #528]	@ (8008a08 <UART_SetConfig+0x930>)
 80087f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	2200      	movs	r2, #0
 80087fe:	603b      	str	r3, [r7, #0]
 8008800:	607a      	str	r2, [r7, #4]
 8008802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008806:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800880a:	f7f7 fd65 	bl	80002d8 <__aeabi_uldivmod>
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	4610      	mov	r0, r2
 8008814:	4619      	mov	r1, r3
 8008816:	f04f 0200 	mov.w	r2, #0
 800881a:	f04f 0300 	mov.w	r3, #0
 800881e:	020b      	lsls	r3, r1, #8
 8008820:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008824:	0202      	lsls	r2, r0, #8
 8008826:	6979      	ldr	r1, [r7, #20]
 8008828:	6849      	ldr	r1, [r1, #4]
 800882a:	0849      	lsrs	r1, r1, #1
 800882c:	2000      	movs	r0, #0
 800882e:	460c      	mov	r4, r1
 8008830:	4605      	mov	r5, r0
 8008832:	eb12 0804 	adds.w	r8, r2, r4
 8008836:	eb43 0905 	adc.w	r9, r3, r5
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	469a      	mov	sl, r3
 8008842:	4693      	mov	fp, r2
 8008844:	4652      	mov	r2, sl
 8008846:	465b      	mov	r3, fp
 8008848:	4640      	mov	r0, r8
 800884a:	4649      	mov	r1, r9
 800884c:	f7f7 fd44 	bl	80002d8 <__aeabi_uldivmod>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	4613      	mov	r3, r2
 8008856:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800885a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800885e:	d308      	bcc.n	8008872 <UART_SetConfig+0x79a>
 8008860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008862:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008866:	d204      	bcs.n	8008872 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800886e:	60da      	str	r2, [r3, #12]
 8008870:	e17c      	b.n	8008b6c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008878:	e178      	b.n	8008b6c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	69db      	ldr	r3, [r3, #28]
 800887e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008882:	f040 80c5 	bne.w	8008a10 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008886:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800888a:	2b20      	cmp	r3, #32
 800888c:	dc48      	bgt.n	8008920 <UART_SetConfig+0x848>
 800888e:	2b00      	cmp	r3, #0
 8008890:	db7b      	blt.n	800898a <UART_SetConfig+0x8b2>
 8008892:	2b20      	cmp	r3, #32
 8008894:	d879      	bhi.n	800898a <UART_SetConfig+0x8b2>
 8008896:	a201      	add	r2, pc, #4	@ (adr r2, 800889c <UART_SetConfig+0x7c4>)
 8008898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889c:	08008927 	.word	0x08008927
 80088a0:	0800892f 	.word	0x0800892f
 80088a4:	0800898b 	.word	0x0800898b
 80088a8:	0800898b 	.word	0x0800898b
 80088ac:	08008937 	.word	0x08008937
 80088b0:	0800898b 	.word	0x0800898b
 80088b4:	0800898b 	.word	0x0800898b
 80088b8:	0800898b 	.word	0x0800898b
 80088bc:	08008947 	.word	0x08008947
 80088c0:	0800898b 	.word	0x0800898b
 80088c4:	0800898b 	.word	0x0800898b
 80088c8:	0800898b 	.word	0x0800898b
 80088cc:	0800898b 	.word	0x0800898b
 80088d0:	0800898b 	.word	0x0800898b
 80088d4:	0800898b 	.word	0x0800898b
 80088d8:	0800898b 	.word	0x0800898b
 80088dc:	08008957 	.word	0x08008957
 80088e0:	0800898b 	.word	0x0800898b
 80088e4:	0800898b 	.word	0x0800898b
 80088e8:	0800898b 	.word	0x0800898b
 80088ec:	0800898b 	.word	0x0800898b
 80088f0:	0800898b 	.word	0x0800898b
 80088f4:	0800898b 	.word	0x0800898b
 80088f8:	0800898b 	.word	0x0800898b
 80088fc:	0800898b 	.word	0x0800898b
 8008900:	0800898b 	.word	0x0800898b
 8008904:	0800898b 	.word	0x0800898b
 8008908:	0800898b 	.word	0x0800898b
 800890c:	0800898b 	.word	0x0800898b
 8008910:	0800898b 	.word	0x0800898b
 8008914:	0800898b 	.word	0x0800898b
 8008918:	0800898b 	.word	0x0800898b
 800891c:	0800897d 	.word	0x0800897d
 8008920:	2b40      	cmp	r3, #64	@ 0x40
 8008922:	d02e      	beq.n	8008982 <UART_SetConfig+0x8aa>
 8008924:	e031      	b.n	800898a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008926:	f7fc fb7b 	bl	8005020 <HAL_RCC_GetPCLK1Freq>
 800892a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800892c:	e033      	b.n	8008996 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800892e:	f7fc fb8d 	bl	800504c <HAL_RCC_GetPCLK2Freq>
 8008932:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008934:	e02f      	b.n	8008996 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008936:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe fb3c 	bl	8006fb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008944:	e027      	b.n	8008996 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008946:	f107 0318 	add.w	r3, r7, #24
 800894a:	4618      	mov	r0, r3
 800894c:	f7fe fc88 	bl	8007260 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008954:	e01f      	b.n	8008996 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008956:	4b2d      	ldr	r3, [pc, #180]	@ (8008a0c <UART_SetConfig+0x934>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 0320 	and.w	r3, r3, #32
 800895e:	2b00      	cmp	r3, #0
 8008960:	d009      	beq.n	8008976 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008962:	4b2a      	ldr	r3, [pc, #168]	@ (8008a0c <UART_SetConfig+0x934>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	08db      	lsrs	r3, r3, #3
 8008968:	f003 0303 	and.w	r3, r3, #3
 800896c:	4a24      	ldr	r2, [pc, #144]	@ (8008a00 <UART_SetConfig+0x928>)
 800896e:	fa22 f303 	lsr.w	r3, r2, r3
 8008972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008974:	e00f      	b.n	8008996 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008976:	4b22      	ldr	r3, [pc, #136]	@ (8008a00 <UART_SetConfig+0x928>)
 8008978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800897a:	e00c      	b.n	8008996 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800897c:	4b21      	ldr	r3, [pc, #132]	@ (8008a04 <UART_SetConfig+0x92c>)
 800897e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008980:	e009      	b.n	8008996 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008988:	e005      	b.n	8008996 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008994:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 80e7 	beq.w	8008b6c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089a2:	4a19      	ldr	r2, [pc, #100]	@ (8008a08 <UART_SetConfig+0x930>)
 80089a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089a8:	461a      	mov	r2, r3
 80089aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80089b0:	005a      	lsls	r2, r3, #1
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	085b      	lsrs	r3, r3, #1
 80089b8:	441a      	add	r2, r3
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c6:	2b0f      	cmp	r3, #15
 80089c8:	d916      	bls.n	80089f8 <UART_SetConfig+0x920>
 80089ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089d0:	d212      	bcs.n	80089f8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	f023 030f 	bic.w	r3, r3, #15
 80089da:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089de:	085b      	lsrs	r3, r3, #1
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	f003 0307 	and.w	r3, r3, #7
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80089ea:	4313      	orrs	r3, r2
 80089ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80089f4:	60da      	str	r2, [r3, #12]
 80089f6:	e0b9      	b.n	8008b6c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80089fe:	e0b5      	b.n	8008b6c <UART_SetConfig+0xa94>
 8008a00:	03d09000 	.word	0x03d09000
 8008a04:	003d0900 	.word	0x003d0900
 8008a08:	08009278 	.word	0x08009278
 8008a0c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a10:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008a14:	2b20      	cmp	r3, #32
 8008a16:	dc49      	bgt.n	8008aac <UART_SetConfig+0x9d4>
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	db7c      	blt.n	8008b16 <UART_SetConfig+0xa3e>
 8008a1c:	2b20      	cmp	r3, #32
 8008a1e:	d87a      	bhi.n	8008b16 <UART_SetConfig+0xa3e>
 8008a20:	a201      	add	r2, pc, #4	@ (adr r2, 8008a28 <UART_SetConfig+0x950>)
 8008a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a26:	bf00      	nop
 8008a28:	08008ab3 	.word	0x08008ab3
 8008a2c:	08008abb 	.word	0x08008abb
 8008a30:	08008b17 	.word	0x08008b17
 8008a34:	08008b17 	.word	0x08008b17
 8008a38:	08008ac3 	.word	0x08008ac3
 8008a3c:	08008b17 	.word	0x08008b17
 8008a40:	08008b17 	.word	0x08008b17
 8008a44:	08008b17 	.word	0x08008b17
 8008a48:	08008ad3 	.word	0x08008ad3
 8008a4c:	08008b17 	.word	0x08008b17
 8008a50:	08008b17 	.word	0x08008b17
 8008a54:	08008b17 	.word	0x08008b17
 8008a58:	08008b17 	.word	0x08008b17
 8008a5c:	08008b17 	.word	0x08008b17
 8008a60:	08008b17 	.word	0x08008b17
 8008a64:	08008b17 	.word	0x08008b17
 8008a68:	08008ae3 	.word	0x08008ae3
 8008a6c:	08008b17 	.word	0x08008b17
 8008a70:	08008b17 	.word	0x08008b17
 8008a74:	08008b17 	.word	0x08008b17
 8008a78:	08008b17 	.word	0x08008b17
 8008a7c:	08008b17 	.word	0x08008b17
 8008a80:	08008b17 	.word	0x08008b17
 8008a84:	08008b17 	.word	0x08008b17
 8008a88:	08008b17 	.word	0x08008b17
 8008a8c:	08008b17 	.word	0x08008b17
 8008a90:	08008b17 	.word	0x08008b17
 8008a94:	08008b17 	.word	0x08008b17
 8008a98:	08008b17 	.word	0x08008b17
 8008a9c:	08008b17 	.word	0x08008b17
 8008aa0:	08008b17 	.word	0x08008b17
 8008aa4:	08008b17 	.word	0x08008b17
 8008aa8:	08008b09 	.word	0x08008b09
 8008aac:	2b40      	cmp	r3, #64	@ 0x40
 8008aae:	d02e      	beq.n	8008b0e <UART_SetConfig+0xa36>
 8008ab0:	e031      	b.n	8008b16 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ab2:	f7fc fab5 	bl	8005020 <HAL_RCC_GetPCLK1Freq>
 8008ab6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ab8:	e033      	b.n	8008b22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008aba:	f7fc fac7 	bl	800504c <HAL_RCC_GetPCLK2Freq>
 8008abe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ac0:	e02f      	b.n	8008b22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ac2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7fe fa76 	bl	8006fb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ad0:	e027      	b.n	8008b22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ad2:	f107 0318 	add.w	r3, r7, #24
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fe fbc2 	bl	8007260 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ae0:	e01f      	b.n	8008b22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8008b98 <UART_SetConfig+0xac0>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 0320 	and.w	r3, r3, #32
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d009      	beq.n	8008b02 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008aee:	4b2a      	ldr	r3, [pc, #168]	@ (8008b98 <UART_SetConfig+0xac0>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	08db      	lsrs	r3, r3, #3
 8008af4:	f003 0303 	and.w	r3, r3, #3
 8008af8:	4a28      	ldr	r2, [pc, #160]	@ (8008b9c <UART_SetConfig+0xac4>)
 8008afa:	fa22 f303 	lsr.w	r3, r2, r3
 8008afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b00:	e00f      	b.n	8008b22 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008b02:	4b26      	ldr	r3, [pc, #152]	@ (8008b9c <UART_SetConfig+0xac4>)
 8008b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b06:	e00c      	b.n	8008b22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b08:	4b25      	ldr	r3, [pc, #148]	@ (8008ba0 <UART_SetConfig+0xac8>)
 8008b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b0c:	e009      	b.n	8008b22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b14:	e005      	b.n	8008b22 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008b20:	bf00      	nop
    }

    if (pclk != 0U)
 8008b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d021      	beq.n	8008b6c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ba4 <UART_SetConfig+0xacc>)
 8008b2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b32:	461a      	mov	r2, r3
 8008b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b36:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	085b      	lsrs	r3, r3, #1
 8008b40:	441a      	add	r2, r3
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4e:	2b0f      	cmp	r3, #15
 8008b50:	d909      	bls.n	8008b66 <UART_SetConfig+0xa8e>
 8008b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b58:	d205      	bcs.n	8008b66 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	60da      	str	r2, [r3, #12]
 8008b64:	e002      	b.n	8008b6c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2200      	movs	r2, #0
 8008b86:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008b88:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3748      	adds	r7, #72	@ 0x48
 8008b90:	46bd      	mov	sp, r7
 8008b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b96:	bf00      	nop
 8008b98:	58024400 	.word	0x58024400
 8008b9c:	03d09000 	.word	0x03d09000
 8008ba0:	003d0900 	.word	0x003d0900
 8008ba4:	08009278 	.word	0x08009278

08008ba8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb4:	f003 0308 	and.w	r3, r3, #8
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00a      	beq.n	8008bd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd6:	f003 0301 	and.w	r3, r3, #1
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00a      	beq.n	8008bf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf8:	f003 0302 	and.w	r3, r3, #2
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00a      	beq.n	8008c16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c1a:	f003 0304 	and.w	r3, r3, #4
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00a      	beq.n	8008c38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	430a      	orrs	r2, r1
 8008c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c3c:	f003 0310 	and.w	r3, r3, #16
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00a      	beq.n	8008c5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	430a      	orrs	r2, r1
 8008c58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c5e:	f003 0320 	and.w	r3, r3, #32
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00a      	beq.n	8008c7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	430a      	orrs	r2, r1
 8008c7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d01a      	beq.n	8008cbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	430a      	orrs	r2, r1
 8008c9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ca2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ca6:	d10a      	bne.n	8008cbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	430a      	orrs	r2, r1
 8008cbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00a      	beq.n	8008ce0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	430a      	orrs	r2, r1
 8008cde:	605a      	str	r2, [r3, #4]
  }
}
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b098      	sub	sp, #96	@ 0x60
 8008cf0:	af02      	add	r7, sp, #8
 8008cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cfc:	f7f8 fe0e 	bl	800191c <HAL_GetTick>
 8008d00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0308 	and.w	r3, r3, #8
 8008d0c:	2b08      	cmp	r3, #8
 8008d0e:	d12f      	bne.n	8008d70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f88e 	bl	8008e40 <UART_WaitOnFlagUntilTimeout>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d022      	beq.n	8008d70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d32:	e853 3f00 	ldrex	r3, [r3]
 8008d36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	461a      	mov	r2, r3
 8008d46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d48:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d4a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d50:	e841 2300 	strex	r3, r2, [r1]
 8008d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1e6      	bne.n	8008d2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2220      	movs	r2, #32
 8008d60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e063      	b.n	8008e38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 0304 	and.w	r3, r3, #4
 8008d7a:	2b04      	cmp	r3, #4
 8008d7c:	d149      	bne.n	8008e12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d7e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d86:	2200      	movs	r2, #0
 8008d88:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f857 	bl	8008e40 <UART_WaitOnFlagUntilTimeout>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d03c      	beq.n	8008e12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da0:	e853 3f00 	ldrex	r3, [r3]
 8008da4:	623b      	str	r3, [r7, #32]
   return(result);
 8008da6:	6a3b      	ldr	r3, [r7, #32]
 8008da8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008dac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	461a      	mov	r2, r3
 8008db4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008db6:	633b      	str	r3, [r7, #48]	@ 0x30
 8008db8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008dbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dbe:	e841 2300 	strex	r3, r2, [r1]
 8008dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1e6      	bne.n	8008d98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	3308      	adds	r3, #8
 8008dd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	e853 3f00 	ldrex	r3, [r3]
 8008dd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f023 0301 	bic.w	r3, r3, #1
 8008de0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	3308      	adds	r3, #8
 8008de8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008dea:	61fa      	str	r2, [r7, #28]
 8008dec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dee:	69b9      	ldr	r1, [r7, #24]
 8008df0:	69fa      	ldr	r2, [r7, #28]
 8008df2:	e841 2300 	strex	r3, r2, [r1]
 8008df6:	617b      	str	r3, [r7, #20]
   return(result);
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1e5      	bne.n	8008dca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2220      	movs	r2, #32
 8008e02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e012      	b.n	8008e38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2220      	movs	r2, #32
 8008e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2220      	movs	r2, #32
 8008e1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3758      	adds	r7, #88	@ 0x58
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	603b      	str	r3, [r7, #0]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e50:	e04f      	b.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e58:	d04b      	beq.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e5a:	f7f8 fd5f 	bl	800191c <HAL_GetTick>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	1ad3      	subs	r3, r2, r3
 8008e64:	69ba      	ldr	r2, [r7, #24]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d302      	bcc.n	8008e70 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d101      	bne.n	8008e74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e70:	2303      	movs	r3, #3
 8008e72:	e04e      	b.n	8008f12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 0304 	and.w	r3, r3, #4
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d037      	beq.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	2b80      	cmp	r3, #128	@ 0x80
 8008e86:	d034      	beq.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	2b40      	cmp	r3, #64	@ 0x40
 8008e8c:	d031      	beq.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	69db      	ldr	r3, [r3, #28]
 8008e94:	f003 0308 	and.w	r3, r3, #8
 8008e98:	2b08      	cmp	r3, #8
 8008e9a:	d110      	bne.n	8008ebe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2208      	movs	r2, #8
 8008ea2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 f839 	bl	8008f1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2208      	movs	r2, #8
 8008eae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e029      	b.n	8008f12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	69db      	ldr	r3, [r3, #28]
 8008ec4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ec8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ecc:	d111      	bne.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008ed6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f000 f81f 	bl	8008f1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e00f      	b.n	8008f12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	69da      	ldr	r2, [r3, #28]
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	4013      	ands	r3, r2
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	bf0c      	ite	eq
 8008f02:	2301      	moveq	r3, #1
 8008f04:	2300      	movne	r3, #0
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	461a      	mov	r2, r3
 8008f0a:	79fb      	ldrb	r3, [r7, #7]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d0a0      	beq.n	8008e52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
	...

08008f1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b095      	sub	sp, #84	@ 0x54
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f2c:	e853 3f00 	ldrex	r3, [r3]
 8008f30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f42:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f44:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e6      	bne.n	8008f24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3308      	adds	r3, #8
 8008f5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5e:	6a3b      	ldr	r3, [r7, #32]
 8008f60:	e853 3f00 	ldrex	r3, [r3]
 8008f64:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f66:	69fa      	ldr	r2, [r7, #28]
 8008f68:	4b1e      	ldr	r3, [pc, #120]	@ (8008fe4 <UART_EndRxTransfer+0xc8>)
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3308      	adds	r3, #8
 8008f74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f7e:	e841 2300 	strex	r3, r2, [r1]
 8008f82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1e5      	bne.n	8008f56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d118      	bne.n	8008fc4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	e853 3f00 	ldrex	r3, [r3]
 8008f9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	f023 0310 	bic.w	r3, r3, #16
 8008fa6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	461a      	mov	r2, r3
 8008fae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fb0:	61bb      	str	r3, [r7, #24]
 8008fb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb4:	6979      	ldr	r1, [r7, #20]
 8008fb6:	69ba      	ldr	r2, [r7, #24]
 8008fb8:	e841 2300 	strex	r3, r2, [r1]
 8008fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1e6      	bne.n	8008f92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2220      	movs	r2, #32
 8008fc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008fd8:	bf00      	nop
 8008fda:	3754      	adds	r7, #84	@ 0x54
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	effffffe 	.word	0xeffffffe

08008fe8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d101      	bne.n	8008ffe <HAL_UARTEx_DisableFifoMode+0x16>
 8008ffa:	2302      	movs	r3, #2
 8008ffc:	e027      	b.n	800904e <HAL_UARTEx_DisableFifoMode+0x66>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2201      	movs	r2, #1
 8009002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2224      	movs	r2, #36	@ 0x24
 800900a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f022 0201 	bic.w	r2, r2, #1
 8009024:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800902c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2220      	movs	r2, #32
 8009040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b084      	sub	sp, #16
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800906a:	2b01      	cmp	r3, #1
 800906c:	d101      	bne.n	8009072 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800906e:	2302      	movs	r3, #2
 8009070:	e02d      	b.n	80090ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2224      	movs	r2, #36	@ 0x24
 800907e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f022 0201 	bic.w	r2, r2, #1
 8009098:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	683a      	ldr	r2, [r7, #0]
 80090aa:	430a      	orrs	r2, r1
 80090ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f850 	bl	8009154 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2220      	movs	r2, #32
 80090c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b084      	sub	sp, #16
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
 80090de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d101      	bne.n	80090ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80090ea:	2302      	movs	r3, #2
 80090ec:	e02d      	b.n	800914a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2224      	movs	r2, #36	@ 0x24
 80090fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f022 0201 	bic.w	r2, r2, #1
 8009114:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	683a      	ldr	r2, [r7, #0]
 8009126:	430a      	orrs	r2, r1
 8009128:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f812 	bl	8009154 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2220      	movs	r2, #32
 800913c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
	...

08009154 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009160:	2b00      	cmp	r3, #0
 8009162:	d108      	bne.n	8009176 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009174:	e031      	b.n	80091da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009176:	2310      	movs	r3, #16
 8009178:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800917a:	2310      	movs	r3, #16
 800917c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	0e5b      	lsrs	r3, r3, #25
 8009186:	b2db      	uxtb	r3, r3
 8009188:	f003 0307 	and.w	r3, r3, #7
 800918c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	0f5b      	lsrs	r3, r3, #29
 8009196:	b2db      	uxtb	r3, r3
 8009198:	f003 0307 	and.w	r3, r3, #7
 800919c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800919e:	7bbb      	ldrb	r3, [r7, #14]
 80091a0:	7b3a      	ldrb	r2, [r7, #12]
 80091a2:	4911      	ldr	r1, [pc, #68]	@ (80091e8 <UARTEx_SetNbDataToProcess+0x94>)
 80091a4:	5c8a      	ldrb	r2, [r1, r2]
 80091a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80091aa:	7b3a      	ldrb	r2, [r7, #12]
 80091ac:	490f      	ldr	r1, [pc, #60]	@ (80091ec <UARTEx_SetNbDataToProcess+0x98>)
 80091ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091bc:	7bfb      	ldrb	r3, [r7, #15]
 80091be:	7b7a      	ldrb	r2, [r7, #13]
 80091c0:	4909      	ldr	r1, [pc, #36]	@ (80091e8 <UARTEx_SetNbDataToProcess+0x94>)
 80091c2:	5c8a      	ldrb	r2, [r1, r2]
 80091c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80091c8:	7b7a      	ldrb	r2, [r7, #13]
 80091ca:	4908      	ldr	r1, [pc, #32]	@ (80091ec <UARTEx_SetNbDataToProcess+0x98>)
 80091cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80091da:	bf00      	nop
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	08009290 	.word	0x08009290
 80091ec:	08009298 	.word	0x08009298

080091f0 <memset>:
 80091f0:	4402      	add	r2, r0
 80091f2:	4603      	mov	r3, r0
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d100      	bne.n	80091fa <memset+0xa>
 80091f8:	4770      	bx	lr
 80091fa:	f803 1b01 	strb.w	r1, [r3], #1
 80091fe:	e7f9      	b.n	80091f4 <memset+0x4>

08009200 <__libc_init_array>:
 8009200:	b570      	push	{r4, r5, r6, lr}
 8009202:	4d0d      	ldr	r5, [pc, #52]	@ (8009238 <__libc_init_array+0x38>)
 8009204:	4c0d      	ldr	r4, [pc, #52]	@ (800923c <__libc_init_array+0x3c>)
 8009206:	1b64      	subs	r4, r4, r5
 8009208:	10a4      	asrs	r4, r4, #2
 800920a:	2600      	movs	r6, #0
 800920c:	42a6      	cmp	r6, r4
 800920e:	d109      	bne.n	8009224 <__libc_init_array+0x24>
 8009210:	4d0b      	ldr	r5, [pc, #44]	@ (8009240 <__libc_init_array+0x40>)
 8009212:	4c0c      	ldr	r4, [pc, #48]	@ (8009244 <__libc_init_array+0x44>)
 8009214:	f000 f818 	bl	8009248 <_init>
 8009218:	1b64      	subs	r4, r4, r5
 800921a:	10a4      	asrs	r4, r4, #2
 800921c:	2600      	movs	r6, #0
 800921e:	42a6      	cmp	r6, r4
 8009220:	d105      	bne.n	800922e <__libc_init_array+0x2e>
 8009222:	bd70      	pop	{r4, r5, r6, pc}
 8009224:	f855 3b04 	ldr.w	r3, [r5], #4
 8009228:	4798      	blx	r3
 800922a:	3601      	adds	r6, #1
 800922c:	e7ee      	b.n	800920c <__libc_init_array+0xc>
 800922e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009232:	4798      	blx	r3
 8009234:	3601      	adds	r6, #1
 8009236:	e7f2      	b.n	800921e <__libc_init_array+0x1e>
 8009238:	080092a8 	.word	0x080092a8
 800923c:	080092a8 	.word	0x080092a8
 8009240:	080092a8 	.word	0x080092a8
 8009244:	080092ac 	.word	0x080092ac

08009248 <_init>:
 8009248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924a:	bf00      	nop
 800924c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924e:	bc08      	pop	{r3}
 8009250:	469e      	mov	lr, r3
 8009252:	4770      	bx	lr

08009254 <_fini>:
 8009254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009256:	bf00      	nop
 8009258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800925a:	bc08      	pop	{r3}
 800925c:	469e      	mov	lr, r3
 800925e:	4770      	bx	lr
