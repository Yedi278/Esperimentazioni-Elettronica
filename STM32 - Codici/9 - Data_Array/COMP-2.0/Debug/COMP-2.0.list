
COMP-2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056fc  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005994  08005994  00006994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080059d4  080059d4  000069d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080059dc  080059dc  000069dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080059e0  080059e0  000069e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  080059e4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000f68  24000010  080059f4  00007010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000f78  080059f4  00007f78  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024d40  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003be9  00000000  00000000  0002bd7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00010ebe  00000000  00000000  0002f967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001268  00000000  00000000  00040828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000020c9  00000000  00000000  00041a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003a3ed  00000000  00000000  00043b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00027d89  00000000  00000000  0007df46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017bebd  00000000  00000000  000a5ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00221b8c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000034f4  00000000  00000000  00221bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000008f  00000000  00000000  002250c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800597c 	.word	0x0800597c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800597c 	.word	0x0800597c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ADC_custom_init>:

void ADCx_custom_init(ADC_TypeDef *ADCx, uint8_t INx_Pin){

//	ADCx->CR &= ~ADC_CR_ADSTART;

	ADCx->SQR1 = 0; // per azzerare la configurazione dell'ide
 80005c8:	4b25      	ldr	r3, [pc, #148]	@ (8000660 <ADC_custom_init+0x98>)
 80005ca:	2200      	movs	r2, #0
	// Fine accensione

	/* ADR INIZIALIZZATO */
}

void ADC_custom_init(){
 80005cc:	b410      	push	{r4}
	ADCx->SQR1 = 0; // per azzerare la configurazione dell'ide
 80005ce:	631a      	str	r2, [r3, #48]	@ 0x30
	ADCx->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere 0=1
 80005d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80005d2:	6319      	str	r1, [r3, #48]	@ 0x30
	ADCx->SQR1 |= (INx_Pin << ADC_SQR1_SQ1_Pos);
 80005d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80005d6:	6319      	str	r1, [r3, #48]	@ 0x30
	ADCx->PCSEL = 0;
 80005d8:	61da      	str	r2, [r3, #28]
	ADCx->PCSEL |= (1 << (ADC_PCSEL_PCSEL_Pos + INx_Pin)); // Dichiaro quali canali leggere : 18 e 19
 80005da:	69da      	ldr	r2, [r3, #28]
 80005dc:	f042 0201 	orr.w	r2, r2, #1
 80005e0:	61da      	str	r2, [r3, #28]
	ADCx->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 80005e2:	689a      	ldr	r2, [r3, #8]
 80005e4:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 80005e8:	609a      	str	r2, [r3, #8]
	ADCx->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 80005ea:	689a      	ldr	r2, [r3, #8]
 80005ec:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80005f0:	609a      	str	r2, [r3, #8]
	ADCx->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 80005f2:	689a      	ldr	r2, [r3, #8]
 80005f4:	f022 0201 	bic.w	r2, r2, #1
 80005f8:	609a      	str	r2, [r3, #8]
	ADCx->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 80005fa:	689a      	ldr	r2, [r3, #8]
 80005fc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000600:	609a      	str	r2, [r3, #8]
	while((ADCx->CR & ADC_CR_ADCAL) != 0){};
 8000602:	689a      	ldr	r2, [r3, #8]
 8000604:	2a00      	cmp	r2, #0
 8000606:	dbfc      	blt.n	8000602 <ADC_custom_init+0x3a>
	ADCx->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 8000608:	6819      	ldr	r1, [r3, #0]
	while((ADCx->ISR & ADC_ISR_ADRDY) != 0){}
 800060a:	4a15      	ldr	r2, [pc, #84]	@ (8000660 <ADC_custom_init+0x98>)
	ADCx->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 800060c:	f041 0101 	orr.w	r1, r1, #1
 8000610:	6019      	str	r1, [r3, #0]
	ADCx->CR |= ADC_CR_ADEN;		// Accendo l' ADC
 8000612:	6899      	ldr	r1, [r3, #8]
 8000614:	f041 0101 	orr.w	r1, r1, #1
 8000618:	6099      	str	r1, [r3, #8]
	while((ADCx->ISR & ADC_ISR_ADRDY) != 0){}
 800061a:	6813      	ldr	r3, [r2, #0]
 800061c:	f013 0301 	ands.w	r3, r3, #1
 8000620:	d1fb      	bne.n	800061a <ADC_custom_init+0x52>
	ADCx->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 8000622:	6814      	ldr	r4, [r2, #0]

	ADCx_custom_init(ADC3, 0);
	ADC3->IER &= ~ADC_IER_EOCIE;	// interrupt ADC

	// TIM6 set to 240Mhz
	TIM6->PSC = 1; // TIM6 CLOCK/PSC
 8000624:	2001      	movs	r0, #1
 8000626:	490f      	ldr	r1, [pc, #60]	@ (8000664 <ADC_custom_init+0x9c>)
	ADCx->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 8000628:	4304      	orrs	r4, r0
 800062a:	6014      	str	r4, [r2, #0]
	ADC3->IER &= ~ADC_IER_EOCIE;	// interrupt ADC
 800062c:	6854      	ldr	r4, [r2, #4]
 800062e:	f024 0404 	bic.w	r4, r4, #4
 8000632:	6054      	str	r4, [r2, #4]
	TIM6->PSC = 1; // TIM6 CLOCK/PSC
 8000634:	6288      	str	r0, [r1, #40]	@ 0x28
	TIM6->ARR = 1;	// TIM6 CLOCK/PSC/ARR
 8000636:	62c8      	str	r0, [r1, #44]	@ 0x2c
	TIM6->CNT = 0;
 8000638:	624b      	str	r3, [r1, #36]	@ 0x24
	TIM6->DIER &= ~TIM_DIER_UIE;
 800063a:	68cc      	ldr	r4, [r1, #12]

	TIM7->PSC = 1;
 800063c:	4a0a      	ldr	r2, [pc, #40]	@ (8000668 <ADC_custom_init+0xa0>)
	TIM6->DIER &= ~TIM_DIER_UIE;
 800063e:	f024 0401 	bic.w	r4, r4, #1
 8000642:	60cc      	str	r4, [r1, #12]
	TIM7->PSC = 1;
 8000644:	6290      	str	r0, [r2, #40]	@ 0x28
	TIM7->ARR = 1;
 8000646:	62d0      	str	r0, [r2, #44]	@ 0x2c
	TIM7->CNT = 0;
 8000648:	6253      	str	r3, [r2, #36]	@ 0x24
	TIM7->DIER |= TIM_DIER_UIE;
 800064a:	68d3      	ldr	r3, [r2, #12]
	TIM7->CR1 &= ~TIM_CR1_CEN;
}
 800064c:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM7->DIER |= TIM_DIER_UIE;
 8000650:	4303      	orrs	r3, r0
 8000652:	60d3      	str	r3, [r2, #12]
	TIM7->CR1 &= ~TIM_CR1_CEN;
 8000654:	6813      	ldr	r3, [r2, #0]
 8000656:	f023 0301 	bic.w	r3, r3, #1
 800065a:	6013      	str	r3, [r2, #0]
}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	58026000 	.word	0x58026000
 8000664:	40001000 	.word	0x40001000
 8000668:	40001400 	.word	0x40001400

0800066c <COMP_custom_init>:
	}
}

void COMP_custom_init(){

	DAC1->CR |= DAC_CR_EN1;			// attivo DAC
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <COMP_custom_init+0x40>)

	DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;

	COMP2->CFGR |= COMP_CFGRx_EN;	// attivo il comparatore

	triggd = false;
 800066e:	2200      	movs	r2, #0
	COMP2->CFGR |= COMP_CFGRx_EN;	// attivo il comparatore
 8000670:	480f      	ldr	r0, [pc, #60]	@ (80006b0 <COMP_custom_init+0x44>)
	DAC1->CR |= DAC_CR_EN1;			// attivo DAC
 8000672:	6819      	ldr	r1, [r3, #0]
void COMP_custom_init(){
 8000674:	b410      	push	{r4}
	DAC1->CR |= DAC_CR_EN1;			// attivo DAC
 8000676:	f041 0101 	orr.w	r1, r1, #1
	DAC1->DHR12R1 = V_to_uint12_t(0.8);			// imposto soglia del comparatore IN 12 BIT NON 16
 800067a:	f44f 4404 	mov.w	r4, #33792	@ 0x8400
	DAC1->CR |= DAC_CR_EN1;			// attivo DAC
 800067e:	6019      	str	r1, [r3, #0]
	DAC1->DHR12R1 = V_to_uint12_t(0.8);			// imposto soglia del comparatore IN 12 BIT NON 16
 8000680:	609c      	str	r4, [r3, #8]
	DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 8000682:	6859      	ldr	r1, [r3, #4]
	triggd = false;
 8000684:	4c0b      	ldr	r4, [pc, #44]	@ (80006b4 <COMP_custom_init+0x48>)
	DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 8000686:	f041 0101 	orr.w	r1, r1, #1
 800068a:	6059      	str	r1, [r3, #4]
	COMP2->CFGR |= COMP_CFGRx_EN;	// attivo il comparatore
 800068c:	f8d0 3810 	ldr.w	r3, [r0, #2064]	@ 0x810
	acquiring = false;
	enable = false;
 8000690:	4909      	ldr	r1, [pc, #36]	@ (80006b8 <COMP_custom_init+0x4c>)
	COMP2->CFGR |= COMP_CFGRx_EN;	// attivo il comparatore
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	f8c0 3810 	str.w	r3, [r0, #2064]	@ 0x810
	acquiring = false;
 800069a:	4808      	ldr	r0, [pc, #32]	@ (80006bc <COMP_custom_init+0x50>)
	pre_triggd = false;
 800069c:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <COMP_custom_init+0x54>)
	triggd = false;
 800069e:	7022      	strb	r2, [r4, #0]
	acquiring = false;
 80006a0:	7002      	strb	r2, [r0, #0]
}
 80006a2:	f85d 4b04 	ldr.w	r4, [sp], #4
	enable = false;
 80006a6:	700a      	strb	r2, [r1, #0]
	pre_triggd = false;
 80006a8:	701a      	strb	r2, [r3, #0]
}
 80006aa:	4770      	bx	lr
 80006ac:	40007400 	.word	0x40007400
 80006b0:	58003000 	.word	0x58003000
 80006b4:	2400002f 	.word	0x2400002f
 80006b8:	2400002d 	.word	0x2400002d
 80006bc:	2400002e 	.word	0x2400002e
 80006c0:	2400002c 	.word	0x2400002c

080006c4 <TIM7_custom_interrupt>:

void TIM7_custom_interrupt(){
	if(!acquiring){
 80006c4:	4a0f      	ldr	r2, [pc, #60]	@ (8000704 <TIM7_custom_interrupt+0x40>)
 80006c6:	7813      	ldrb	r3, [r2, #0]
 80006c8:	b933      	cbnz	r3, 80006d8 <TIM7_custom_interrupt+0x14>
		if(COMP12->SR & COMP_SR_C2VAL){
 80006ca:	490f      	ldr	r1, [pc, #60]	@ (8000708 <TIM7_custom_interrupt+0x44>)
 80006cc:	6809      	ldr	r1, [r1, #0]
 80006ce:	0789      	lsls	r1, r1, #30
 80006d0:	d503      	bpl.n	80006da <TIM7_custom_interrupt+0x16>
			if(pre_triggd){
 80006d2:	490e      	ldr	r1, [pc, #56]	@ (800070c <TIM7_custom_interrupt+0x48>)
 80006d4:	7808      	ldrb	r0, [r1, #0]
 80006d6:	b920      	cbnz	r0, 80006e2 <TIM7_custom_interrupt+0x1e>
 80006d8:	4770      	bx	lr
				TIM7->CR1 &= ~TIM_CR1_CEN;
				pre_triggd = false;
				return;
			}
		}else{
			pre_triggd = true;
 80006da:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <TIM7_custom_interrupt+0x48>)
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]
			return;
 80006e0:	4770      	bx	lr
void TIM7_custom_interrupt(){
 80006e2:	b410      	push	{r4}
				acquiring = true;
 80006e4:	2001      	movs	r0, #1
				TIM6->CR1 |= TIM_CR1_CEN;
 80006e6:	4c0a      	ldr	r4, [pc, #40]	@ (8000710 <TIM7_custom_interrupt+0x4c>)
				acquiring = true;
 80006e8:	7010      	strb	r0, [r2, #0]
				TIM6->CR1 |= TIM_CR1_CEN;
 80006ea:	6822      	ldr	r2, [r4, #0]
				TIM7->CR1 &= ~TIM_CR1_CEN;
 80006ec:	4809      	ldr	r0, [pc, #36]	@ (8000714 <TIM7_custom_interrupt+0x50>)
				TIM6->CR1 |= TIM_CR1_CEN;
 80006ee:	f042 0201 	orr.w	r2, r2, #1
 80006f2:	6022      	str	r2, [r4, #0]
				TIM7->CR1 &= ~TIM_CR1_CEN;
 80006f4:	6802      	ldr	r2, [r0, #0]
		}
	}
}
 80006f6:	f85d 4b04 	ldr.w	r4, [sp], #4
				TIM7->CR1 &= ~TIM_CR1_CEN;
 80006fa:	f022 0201 	bic.w	r2, r2, #1
 80006fe:	6002      	str	r2, [r0, #0]
				pre_triggd = false;
 8000700:	700b      	strb	r3, [r1, #0]
}
 8000702:	4770      	bx	lr
 8000704:	2400002e 	.word	0x2400002e
 8000708:	58003800 	.word	0x58003800
 800070c:	2400002c 	.word	0x2400002c
 8000710:	40001000 	.word	0x40001000
 8000714:	40001400 	.word	0x40001400

08000718 <DMA_custom_init>:

void DMA_custom_init(){

	data_index = 0;

	DMA1_Stream0->M0AR = (uint32_t) (&DMA_data_buffer[0][0]);	// inidico l'indirizzo dello storarge di dati
 8000718:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <DMA_custom_init+0x5c>)
 800071a:	4a17      	ldr	r2, [pc, #92]	@ (8000778 <DMA_custom_init+0x60>)
	data_index = 0;
 800071c:	4817      	ldr	r0, [pc, #92]	@ (800077c <DMA_custom_init+0x64>)
	DMA1_Stream1->M0AR = (uint32_t) (&DMA_data_buffer[0][0]);

	DMA1_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
 800071e:	4918      	ldr	r1, [pc, #96]	@ (8000780 <DMA_custom_init+0x68>)
void DMA_custom_init(){
 8000720:	b410      	push	{r4}
	data_index = 0;
 8000722:	2400      	movs	r4, #0
 8000724:	8004      	strh	r4, [r0, #0]
	DMA1_Stream1->PAR = (uint32_t) (&USART3->TDR);

	DMA1_Stream0->NDTR = DATA_LENGTH;			// numero elementi da prendere da ADC3
 8000726:	f44f 70c8 	mov.w	r0, #400	@ 0x190
	DMA1_Stream0->M0AR = (uint32_t) (&DMA_data_buffer[0][0]);	// inidico l'indirizzo dello storarge di dati
 800072a:	61da      	str	r2, [r3, #28]
	DMA1_Stream1->PAR = (uint32_t) (&USART3->TDR);
 800072c:	4c15      	ldr	r4, [pc, #84]	@ (8000784 <DMA_custom_init+0x6c>)
	DMA1_Stream1->M0AR = (uint32_t) (&DMA_data_buffer[0][0]);
 800072e:	635a      	str	r2, [r3, #52]	@ 0x34
	DMA1_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
 8000730:	6199      	str	r1, [r3, #24]
	DMA1_Stream1->NDTR = DATA_LENGTH*2*DATA_COUNTS;			// numero elementi da mandare a USART3
 8000732:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
	DMA1_Stream1->PAR = (uint32_t) (&USART3->TDR);
 8000736:	631c      	str	r4, [r3, #48]	@ 0x30
	DMA1_Stream0->NDTR = DATA_LENGTH;			// numero elementi da prendere da ADC3
 8000738:	6158      	str	r0, [r3, #20]
	DMA1_Stream1->NDTR = DATA_LENGTH*2*DATA_COUNTS;			// numero elementi da mandare a USART3
 800073a:	62d9      	str	r1, [r3, #44]	@ 0x2c

	DMA1_Stream0->CR |= DMA_SxCR_TCIE;		// ablilito interrupt di fine ricezione
 800073c:	6919      	ldr	r1, [r3, #16]
	DMA1_Stream1->CR |= DMA_SxCR_TCIE;		// abilito interrupt di fine trasmissione

	ADC3->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);	// DMA in cont mode
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <DMA_custom_init+0x70>)
	DMA1_Stream0->CR |= DMA_SxCR_TCIE;		// ablilito interrupt di fine ricezione
 8000740:	f041 0110 	orr.w	r1, r1, #16

	DMA1_Stream0->CR |= DMA_SxCR_EN;
	DMA1_Stream1->CR |= DMA_SxCR_EN;

	ADC3->CR |= ADC_CR_ADSTART;
}
 8000744:	f85d 4b04 	ldr.w	r4, [sp], #4
	DMA1_Stream0->CR |= DMA_SxCR_TCIE;		// ablilito interrupt di fine ricezione
 8000748:	6119      	str	r1, [r3, #16]
	DMA1_Stream1->CR |= DMA_SxCR_TCIE;		// abilito interrupt di fine trasmissione
 800074a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800074c:	f041 0110 	orr.w	r1, r1, #16
 8000750:	6299      	str	r1, [r3, #40]	@ 0x28
	ADC3->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);	// DMA in cont mode
 8000752:	68d1      	ldr	r1, [r2, #12]
 8000754:	f041 0103 	orr.w	r1, r1, #3
 8000758:	60d1      	str	r1, [r2, #12]
	DMA1_Stream0->CR |= DMA_SxCR_EN;
 800075a:	6919      	ldr	r1, [r3, #16]
 800075c:	f041 0101 	orr.w	r1, r1, #1
 8000760:	6119      	str	r1, [r3, #16]
	DMA1_Stream1->CR |= DMA_SxCR_EN;
 8000762:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000764:	f041 0101 	orr.w	r1, r1, #1
 8000768:	6299      	str	r1, [r3, #40]	@ 0x28
	ADC3->CR |= ADC_CR_ADSTART;
 800076a:	6893      	ldr	r3, [r2, #8]
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6093      	str	r3, [r2, #8]
}
 8000772:	4770      	bx	lr
 8000774:	40020000 	.word	0x40020000
 8000778:	24000034 	.word	0x24000034
 800077c:	24000030 	.word	0x24000030
 8000780:	58026040 	.word	0x58026040
 8000784:	40004828 	.word	0x40004828
 8000788:	58026000 	.word	0x58026000

0800078c <DMA_custom_interrupt_tx>:

void DMA_custom_interrupt_tx(){
 800078c:	b410      	push	{r4}

	USART3->CR3 &= ~USART_CR3_DMAT;			  // SPENGO trasmissione usart
 800078e:	4c0e      	ldr	r4, [pc, #56]	@ (80007c8 <DMA_custom_interrupt_tx+0x3c>)

	DMA1->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 8000790:	f04f 30ff 	mov.w	r0, #4294967295
 8000794:	4b0d      	ldr	r3, [pc, #52]	@ (80007cc <DMA_custom_interrupt_tx+0x40>)
	DMA1->HIFCR = 0xffffffff;

	acquiring = false;
 8000796:	2100      	movs	r1, #0
	USART3->CR3 &= ~USART_CR3_DMAT;			  // SPENGO trasmissione usart
 8000798:	68a2      	ldr	r2, [r4, #8]
 800079a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800079e:	60a2      	str	r2, [r4, #8]
	DMA1_Stream0->NDTR = DATA_LENGTH;			// numero elementi da prendere da ADC3
 80007a0:	f44f 74c8 	mov.w	r4, #400	@ 0x190
	acquiring = false;
 80007a4:	4a0a      	ldr	r2, [pc, #40]	@ (80007d0 <DMA_custom_interrupt_tx+0x44>)
	DMA1->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 80007a6:	6098      	str	r0, [r3, #8]
	DMA1->HIFCR = 0xffffffff;
 80007a8:	60d8      	str	r0, [r3, #12]
	acquiring = false;
 80007aa:	7011      	strb	r1, [r2, #0]
	pre_triggd = false;
 80007ac:	4a09      	ldr	r2, [pc, #36]	@ (80007d4 <DMA_custom_interrupt_tx+0x48>)
	DMA1_Stream0->NDTR = DATA_LENGTH;			// numero elementi da prendere da ADC3
 80007ae:	615c      	str	r4, [r3, #20]
	pre_triggd = false;
 80007b0:	7011      	strb	r1, [r2, #0]

	DMA1_Stream0->CR |= DMA_SxCR_EN;
 80007b2:	691a      	ldr	r2, [r3, #16]
	DMA1_Stream1->CR |= DMA_SxCR_EN;
}
 80007b4:	f85d 4b04 	ldr.w	r4, [sp], #4
	DMA1_Stream0->CR |= DMA_SxCR_EN;
 80007b8:	f042 0201 	orr.w	r2, r2, #1
 80007bc:	611a      	str	r2, [r3, #16]
	DMA1_Stream1->CR |= DMA_SxCR_EN;
 80007be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80007c0:	f042 0201 	orr.w	r2, r2, #1
 80007c4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80007c6:	4770      	bx	lr
 80007c8:	40004800 	.word	0x40004800
 80007cc:	40020000 	.word	0x40020000
 80007d0:	2400002e 	.word	0x2400002e
 80007d4:	2400002c 	.word	0x2400002c

080007d8 <DMA_custom_interrupt_rx>:

void DMA_custom_interrupt_rx(){
 80007d8:	b410      	push	{r4}

	TIM6->CR1 &= ~TIM_CR1_CEN;
 80007da:	4c1b      	ldr	r4, [pc, #108]	@ (8000848 <DMA_custom_interrupt_rx+0x70>)

	DMA1->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295
	DMA1->HIFCR = 0xffffffff;


	if(data_index < DATA_COUNTS){
 80007e0:	491a      	ldr	r1, [pc, #104]	@ (800084c <DMA_custom_interrupt_rx+0x74>)
	TIM6->CR1 &= ~TIM_CR1_CEN;
 80007e2:	6822      	ldr	r2, [r4, #0]
	DMA1->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 80007e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <DMA_custom_interrupt_rx+0x78>)
	TIM6->CR1 &= ~TIM_CR1_CEN;
 80007e6:	f022 0201 	bic.w	r2, r2, #1
 80007ea:	6022      	str	r2, [r4, #0]
	if(data_index < DATA_COUNTS){
 80007ec:	880a      	ldrh	r2, [r1, #0]
	DMA1->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 80007ee:	6098      	str	r0, [r3, #8]
	if(data_index < DATA_COUNTS){
 80007f0:	2a03      	cmp	r2, #3
	DMA1->HIFCR = 0xffffffff;
 80007f2:	60d8      	str	r0, [r3, #12]
	if(data_index < DATA_COUNTS){
 80007f4:	d90d      	bls.n	8000812 <DMA_custom_interrupt_rx+0x3a>
		TIM7->CR1 |= TIM_CR1_CEN;
		return;

	}else{
		data_index = 0;
		DMA1_Stream1->CR |= DMA_SxCR_EN;
 80007f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
		USART3->CR3 |= USART_CR3_DMAT;
 80007f8:	4816      	ldr	r0, [pc, #88]	@ (8000854 <DMA_custom_interrupt_rx+0x7c>)
		DMA1_Stream1->CR |= DMA_SxCR_EN;
 80007fa:	f042 0201 	orr.w	r2, r2, #1
	}
}
 80007fe:	f85d 4b04 	ldr.w	r4, [sp], #4
		DMA1_Stream1->CR |= DMA_SxCR_EN;
 8000802:	629a      	str	r2, [r3, #40]	@ 0x28
		data_index = 0;
 8000804:	2200      	movs	r2, #0
		USART3->CR3 |= USART_CR3_DMAT;
 8000806:	6883      	ldr	r3, [r0, #8]
 8000808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800080c:	6083      	str	r3, [r0, #8]
 800080e:	800a      	strh	r2, [r1, #0]
}
 8000810:	4770      	bx	lr
		DMA1_Stream0->M0AR = (uint32_t)(&DMA_data_buffer[data_index][0]);
 8000812:	f44f 7448 	mov.w	r4, #800	@ 0x320
 8000816:	4810      	ldr	r0, [pc, #64]	@ (8000858 <DMA_custom_interrupt_rx+0x80>)
 8000818:	fb04 0002 	mla	r0, r4, r2, r0
		DMA1_Stream0->NDTR = DATA_LENGTH;
 800081c:	f44f 74c8 	mov.w	r4, #400	@ 0x190
		data_index++;
 8000820:	3201      	adds	r2, #1
		DMA1_Stream0->M0AR = (uint32_t)(&DMA_data_buffer[data_index][0]);
 8000822:	61d8      	str	r0, [r3, #28]
		DMA1_Stream0->NDTR = DATA_LENGTH;
 8000824:	615c      	str	r4, [r3, #20]
		acquiring = false;
 8000826:	2400      	movs	r4, #0
 8000828:	480c      	ldr	r0, [pc, #48]	@ (800085c <DMA_custom_interrupt_rx+0x84>)
		data_index++;
 800082a:	b292      	uxth	r2, r2
		acquiring = false;
 800082c:	7004      	strb	r4, [r0, #0]
		DMA1_Stream0->CR |= DMA_SxCR_EN;
 800082e:	6918      	ldr	r0, [r3, #16]
		TIM7->CR1 |= TIM_CR1_CEN;
 8000830:	4c0b      	ldr	r4, [pc, #44]	@ (8000860 <DMA_custom_interrupt_rx+0x88>)
		DMA1_Stream0->CR |= DMA_SxCR_EN;
 8000832:	f040 0001 	orr.w	r0, r0, #1
 8000836:	6118      	str	r0, [r3, #16]
		TIM7->CR1 |= TIM_CR1_CEN;
 8000838:	6823      	ldr	r3, [r4, #0]
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	6023      	str	r3, [r4, #0]
}
 8000840:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000844:	800a      	strh	r2, [r1, #0]
 8000846:	4770      	bx	lr
 8000848:	40001000 	.word	0x40001000
 800084c:	24000030 	.word	0x24000030
 8000850:	40020000 	.word	0x40020000
 8000854:	40004800 	.word	0x40004800
 8000858:	24000034 	.word	0x24000034
 800085c:	2400002e 	.word	0x2400002e
 8000860:	40001400 	.word	0x40001400

08000864 <USART_custom_init>:

#include "Custom_USART.h"

void USART_custom_init(){

	USART3->CR1 |= USART_CR1_TE;
 8000864:	4b0a      	ldr	r3, [pc, #40]	@ (8000890 <USART_custom_init+0x2c>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	f042 0208 	orr.w	r2, r2, #8
 800086c:	601a      	str	r2, [r3, #0]
	USART3->CR1 |= USART_CR1_RE;
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	f042 0204 	orr.w	r2, r2, #4
 8000874:	601a      	str	r2, [r3, #0]

	USART3->CR1 &= ~USART_CR1_TXEIE;
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800087c:	601a      	str	r2, [r3, #0]
	USART3->CR1 |= USART_CR1_RXNEIE;
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	f042 0220 	orr.w	r2, r2, #32
 8000884:	601a      	str	r2, [r3, #0]

	USART3->CR1 |= USART_CR1_UE;
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	f042 0201 	orr.w	r2, r2, #1
 800088c:	601a      	str	r2, [r3, #0]
}
 800088e:	4770      	bx	lr
 8000890:	40004800 	.word	0x40004800

08000894 <USART_custom_interrupt>:

void USART_custom_interrupt(){

	char data = USART3->RDR;
 8000894:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <USART_custom_interrupt+0x38>)
 8000896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24

	if(data == '?'){
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b3f      	cmp	r3, #63	@ 0x3f
 800089c:	d00d      	beq.n	80008ba <USART_custom_interrupt+0x26>
		if((TIM7->CR1 & TIM_CR1_CEN) == 0){
			TIM7->CR1 |= TIM_CR1_CEN;
		}
	}

	USART3->ICR |= USART_ICR_ORECF;  //Cancella l'overrun. Capita quando si entra in debug
 800089e:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <USART_custom_interrupt+0x38>)
 80008a0:	6a1a      	ldr	r2, [r3, #32]
 80008a2:	f042 0208 	orr.w	r2, r2, #8
 80008a6:	621a      	str	r2, [r3, #32]
	USART3->ICR |= USART_ICR_TCCF;   //Azzeramento flag interrupt trasmissione
 80008a8:	6a1a      	ldr	r2, [r3, #32]
 80008aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80008ae:	621a      	str	r2, [r3, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 80008b0:	699a      	ldr	r2, [r3, #24]
 80008b2:	f042 0208 	orr.w	r2, r2, #8
 80008b6:	619a      	str	r2, [r3, #24]
}
 80008b8:	4770      	bx	lr
		if((TIM7->CR1 & TIM_CR1_CEN) == 0){
 80008ba:	4b05      	ldr	r3, [pc, #20]	@ (80008d0 <USART_custom_interrupt+0x3c>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	07d2      	lsls	r2, r2, #31
 80008c0:	d4ed      	bmi.n	800089e <USART_custom_interrupt+0xa>
			TIM7->CR1 |= TIM_CR1_CEN;
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	f042 0201 	orr.w	r2, r2, #1
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	e7e8      	b.n	800089e <USART_custom_interrupt+0xa>
 80008cc:	40004800 	.word	0x40004800
 80008d0:	40001400 	.word	0x40001400
 80008d4:	00000000 	.word	0x00000000

080008d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d8:	b530      	push	{r4, r5, lr}
 80008da:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008dc:	224c      	movs	r2, #76	@ 0x4c
 80008de:	2100      	movs	r1, #0
 80008e0:	a80a      	add	r0, sp, #40	@ 0x28
 80008e2:	f005 f81f 	bl	8005924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e6:	2220      	movs	r2, #32
 80008e8:	2100      	movs	r1, #0
 80008ea:	a802      	add	r0, sp, #8
 80008ec:	f005 f81a 	bl	8005924 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008f0:	2002      	movs	r0, #2
 80008f2:	f002 f853 	bl	800299c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008f6:	4a28      	ldr	r2, [pc, #160]	@ (8000998 <SystemClock_Config+0xc0>)
 80008f8:	2100      	movs	r1, #0
 80008fa:	4b28      	ldr	r3, [pc, #160]	@ (800099c <SystemClock_Config+0xc4>)
 80008fc:	9101      	str	r1, [sp, #4]
 80008fe:	6991      	ldr	r1, [r2, #24]
 8000900:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8000904:	6191      	str	r1, [r2, #24]
 8000906:	6991      	ldr	r1, [r2, #24]
 8000908:	f401 4140 	and.w	r1, r1, #49152	@ 0xc000
 800090c:	9101      	str	r1, [sp, #4]
 800090e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000910:	f041 0101 	orr.w	r1, r1, #1
 8000914:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	9301      	str	r3, [sp, #4]
 800091e:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000920:	6993      	ldr	r3, [r2, #24]
 8000922:	049b      	lsls	r3, r3, #18
 8000924:	d5fc      	bpl.n	8000920 <SystemClock_Config+0x48>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000926:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000928:	2278      	movs	r2, #120	@ 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092a:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800092c:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092e:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000930:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000934:	220c      	movs	r2, #12
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000936:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8000990 <SystemClock_Config+0xb8>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093a:	e9cd 3313 	strd	r3, r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800093e:	e9cd 3417 	strd	r3, r4, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000942:	e9cd 3219 	strd	r3, r2, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000946:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000948:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800094c:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	f002 f8ba 	bl	8002ac8 <HAL_RCC_OscConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	b108      	cbz	r0, 800095c <SystemClock_Config+0x84>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095a:	e7fe      	b.n	800095a <SystemClock_Config+0x82>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800095c:	2240      	movs	r2, #64	@ 0x40
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800095e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000960:	2308      	movs	r3, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000962:	253f      	movs	r5, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000964:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000966:	2403      	movs	r4, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000968:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096a:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800096e:	9207      	str	r2, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000970:	e9cd 3205 	strd	r3, r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000974:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000978:	e9cd 3208 	strd	r3, r2, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800097c:	f002 fc24 	bl	80031c8 <HAL_RCC_ClockConfig>
 8000980:	b108      	cbz	r0, 8000986 <SystemClock_Config+0xae>
 8000982:	b672      	cpsid	i
  while (1)
 8000984:	e7fe      	b.n	8000984 <SystemClock_Config+0xac>
}
 8000986:	b01f      	add	sp, #124	@ 0x7c
 8000988:	bd30      	pop	{r4, r5, pc}
 800098a:	bf00      	nop
 800098c:	f3af 8000 	nop.w
 8000990:	00000001 	.word	0x00000001
 8000994:	00050000 	.word	0x00050000
 8000998:	58024800 	.word	0x58024800
 800099c:	58000400 	.word	0x58000400

080009a0 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	4dbd      	ldr	r5, [pc, #756]	@ (8000c98 <main+0x2f8>)
  GPIO_InitStruct.Pin = B1_Pin;
 80009a4:	f44f 5900 	mov.w	r9, #8192	@ 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2602      	movs	r6, #2
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009aa:	f04f 0801 	mov.w	r8, #1
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b092      	sub	sp, #72	@ 0x48
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b2:	270b      	movs	r7, #11
  HAL_Init();
 80009b4:	f000 fc80 	bl	80012b8 <HAL_Init>
  SystemClock_Config();
 80009b8:	f7ff ff8e 	bl	80008d8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	940d      	str	r4, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009be:	4622      	mov	r2, r4
 80009c0:	f244 0101 	movw	r1, #16385	@ 0x4001
 80009c4:	48b5      	ldr	r0, [pc, #724]	@ (8000c9c <main+0x2fc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 80009ca:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80009d2:	f043 0304 	orr.w	r3, r3, #4
 80009d6:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80009da:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	9302      	str	r3, [sp, #8]
 80009e4:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80009ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ee:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80009f2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80009f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009fa:	9303      	str	r3, [sp, #12]
 80009fc:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000a0a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	9304      	str	r3, [sp, #16]
 8000a14:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000a1a:	f043 0302 	orr.w	r3, r3, #2
 8000a1e:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000a22:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	9305      	str	r3, [sp, #20]
 8000a2c:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a2e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000a32:	f043 0310 	orr.w	r3, r3, #16
 8000a36:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000a3a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000a3e:	f003 0310 	and.w	r3, r3, #16
 8000a42:	9306      	str	r3, [sp, #24]
 8000a44:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a46:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000a4a:	f043 0308 	orr.w	r3, r3, #8
 8000a4e:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000a52:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000a56:	f003 0308 	and.w	r3, r3, #8
 8000a5a:	9307      	str	r3, [sp, #28]
 8000a5c:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a5e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a66:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000a6a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a72:	9308      	str	r3, [sp, #32]
 8000a74:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a76:	f001 ff8d 	bl	8002994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a7a:	4622      	mov	r2, r4
 8000a7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a80:	4887      	ldr	r0, [pc, #540]	@ (8000ca0 <main+0x300>)
 8000a82:	f001 ff87 	bl	8002994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a86:	4622      	mov	r2, r4
 8000a88:	2102      	movs	r1, #2
 8000a8a:	4886      	ldr	r0, [pc, #536]	@ (8000ca4 <main+0x304>)
 8000a8c:	f001 ff82 	bl	8002994 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a90:	a909      	add	r1, sp, #36	@ 0x24
 8000a92:	4885      	ldr	r0, [pc, #532]	@ (8000ca8 <main+0x308>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pin = B1_Pin;
 8000a96:	e9cd 9409 	strd	r9, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f001 fe39 	bl	8002710 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a9e:	2332      	movs	r3, #50	@ 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa0:	a909      	add	r1, sp, #36	@ 0x24
 8000aa2:	4881      	ldr	r0, [pc, #516]	@ (8000ca8 <main+0x308>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000aa4:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	960a      	str	r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aa8:	970d      	str	r7, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aae:	f001 fe2f 	bl	8002710 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ab2:	2386      	movs	r3, #134	@ 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	a909      	add	r1, sp, #36	@ 0x24
 8000ab6:	487d      	ldr	r0, [pc, #500]	@ (8000cac <main+0x30c>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ab8:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	e9cd 640a 	strd	r6, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000abe:	e9cd 470c 	strd	r4, r7, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f001 fe25 	bl	8002710 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ac6:	f244 0301 	movw	r3, #16385	@ 0x4001
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aca:	a909      	add	r1, sp, #36	@ 0x24
 8000acc:	4873      	ldr	r0, [pc, #460]	@ (8000c9c <main+0x2fc>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ace:	e9cd 3809 	strd	r3, r8, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	f001 fe1b 	bl	8002710 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	a909      	add	r1, sp, #36	@ 0x24
 8000adc:	486f      	ldr	r0, [pc, #444]	@ (8000c9c <main+0x2fc>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ade:	970d      	str	r7, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	e9cd 9609 	strd	r9, r6, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ae4:	f44f 6980 	mov.w	r9, #1024	@ 0x400
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f001 fe10 	bl	8002710 <HAL_GPIO_Init>
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000af0:	a909      	add	r1, sp, #36	@ 0x24
 8000af2:	486b      	ldr	r0, [pc, #428]	@ (8000ca0 <main+0x300>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000af6:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	e9cd 840a 	strd	r8, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f001 fe07 	bl	8002710 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b02:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	a909      	add	r1, sp, #36	@ 0x24
 8000b08:	4868      	ldr	r0, [pc, #416]	@ (8000cac <main+0x30c>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b0a:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b0c:	230a      	movs	r3, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b10:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	e9cd 640a 	strd	r6, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f001 fdfb 	bl	8002710 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b1a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b1e:	a909      	add	r1, sp, #36	@ 0x24
 8000b20:	4863      	ldr	r0, [pc, #396]	@ (8000cb0 <main+0x310>)
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b22:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	e9cd 640a 	strd	r6, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b28:	e9cd 470c 	strd	r4, r7, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b2c:	f001 fdf0 	bl	8002710 <HAL_GPIO_Init>
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b30:	a909      	add	r1, sp, #36	@ 0x24
 8000b32:	485c      	ldr	r0, [pc, #368]	@ (8000ca4 <main+0x304>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	e9cd 6809 	strd	r6, r8, [sp, #36]	@ 0x24
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f001 fde8 	bl	8002710 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b40:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b44:	4622      	mov	r2, r4
 8000b46:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b48:	ea43 0308 	orr.w	r3, r3, r8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b4c:	4638      	mov	r0, r7
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b4e:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8000b52:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  hadc3.Instance = ADC3;
 8000b56:	4d57      	ldr	r5, [pc, #348]	@ (8000cb4 <main+0x314>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b58:	ea03 0308 	and.w	r3, r3, r8
 8000b5c:	9301      	str	r3, [sp, #4]
 8000b5e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b60:	f001 f948 	bl	8001df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b64:	4638      	mov	r0, r7
 8000b66:	f001 f981 	bl	8001e6c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b6a:	4622      	mov	r2, r4
 8000b6c:	4621      	mov	r1, r4
 8000b6e:	200c      	movs	r0, #12
 8000b70:	f001 f940 	bl	8001df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b74:	200c      	movs	r0, #12
 8000b76:	f001 f979 	bl	8001e6c <HAL_NVIC_EnableIRQ>
  hadc3.Instance = ADC3;
 8000b7a:	4b4f      	ldr	r3, [pc, #316]	@ (8000cb8 <main+0x318>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b7c:	940f      	str	r4, [sp, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b7e:	4628      	mov	r0, r5
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b80:	606c      	str	r4, [r5, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b82:	60ec      	str	r4, [r5, #12]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b84:	82ac      	strh	r4, [r5, #20]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b86:	772c      	strb	r4, [r5, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b88:	636c      	str	r4, [r5, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000b8a:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc3.Instance = ADC3;
 8000b8e:	602b      	str	r3, [r5, #0]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000b90:	f44f 63b4 	mov.w	r3, #1440	@ 0x5a0
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b94:	f8c5 9028 	str.w	r9, [r5, #40]	@ 0x28
  hadc3.Init.NbrOfConversion = 1;
 8000b98:	f8c5 8018 	str.w	r8, [r5, #24]
  hadc3.Init.Oversampling.Ratio = 1;
 8000b9c:	f8c5 803c 	str.w	r8, [r5, #60]	@ 0x3c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000ba0:	626b      	str	r3, [r5, #36]	@ 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba2:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 8000ba6:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8000baa:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bae:	e9c5 440b 	strd	r4, r4, [r5, #44]	@ 0x2c
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bb2:	2404      	movs	r4, #4
 8000bb4:	612c      	str	r4, [r5, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bb6:	f000 ff4f 	bl	8001a58 <HAL_ADC_Init>
 8000bba:	b108      	cbz	r0, 8000bc0 <main+0x220>
 8000bbc:	b672      	cpsid	i
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <main+0x21e>
  sConfig.Channel = ADC_CHANNEL_0;
 8000bc0:	4603      	mov	r3, r0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bc2:	a909      	add	r1, sp, #36	@ 0x24
 8000bc4:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_0;
 8000bc6:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bca:	930b      	str	r3, [sp, #44]	@ 0x2c
  sConfig.Offset = 0;
 8000bcc:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bce:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd2:	2306      	movs	r3, #6
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bd4:	940d      	str	r4, [sp, #52]	@ 0x34
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd6:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bd8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000bdc:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bde:	f000 fbe9 	bl	80013b4 <HAL_ADC_ConfigChannel>
 8000be2:	4601      	mov	r1, r0
 8000be4:	b970      	cbnz	r0, 8000c04 <main+0x264>
  DAC_ChannelConfTypeDef sConfig = {0};
 8000be6:	2224      	movs	r2, #36	@ 0x24
  hdac1.Instance = DAC1;
 8000be8:	4c34      	ldr	r4, [pc, #208]	@ (8000cbc <main+0x31c>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8000bea:	eb0d 0002 	add.w	r0, sp, r2
 8000bee:	f004 fe99 	bl	8005924 <memset>
  hdac1.Instance = DAC1;
 8000bf2:	4b33      	ldr	r3, [pc, #204]	@ (8000cc0 <main+0x320>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000bf4:	4620      	mov	r0, r4
  hdac1.Instance = DAC1;
 8000bf6:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000bf8:	f001 f95c 	bl	8001eb4 <HAL_DAC_Init>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	b118      	cbz	r0, 8000c08 <main+0x268>
 8000c00:	b672      	cpsid	i
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <main+0x262>
 8000c04:	b672      	cpsid	i
 8000c06:	e7fe      	b.n	8000c06 <main+0x266>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c08:	4620      	mov	r0, r4
 8000c0a:	a909      	add	r1, sp, #36	@ 0x24
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c0c:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c0e:	e9cd 2209 	strd	r2, r2, [sp, #36]	@ 0x24
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000c12:	e9cd 260b 	strd	r2, r6, [sp, #44]	@ 0x2c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c16:	f001 f963 	bl	8001ee0 <HAL_DAC_ConfigChannel>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	b990      	cbnz	r0, 8000c44 <main+0x2a4>
  htim6.Instance = TIM6;
 8000c1e:	4c29      	ldr	r4, [pc, #164]	@ (8000cc4 <main+0x324>)
  htim6.Init.Period = 65535;
 8000c20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  htim6.Instance = TIM6;
 8000c24:	4928      	ldr	r1, [pc, #160]	@ (8000cc8 <main+0x328>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c26:	900b      	str	r0, [sp, #44]	@ 0x2c
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c28:	61a3      	str	r3, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  htim6.Init.Prescaler = 0;
 8000c2e:	e9c4 1000 	strd	r1, r0, [r4]
  htim6.Init.Period = 65535;
 8000c32:	e9c4 0202 	strd	r0, r2, [r4, #8]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c36:	4620      	mov	r0, r4
 8000c38:	f004 f8a6 	bl	8004d88 <HAL_TIM_Base_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	b118      	cbz	r0, 8000c48 <main+0x2a8>
 8000c40:	b672      	cpsid	i
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <main+0x2a2>
 8000c44:	b672      	cpsid	i
 8000c46:	e7fe      	b.n	8000c46 <main+0x2a6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c48:	2220      	movs	r2, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c4a:	a909      	add	r1, sp, #36	@ 0x24
 8000c4c:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4e:	930b      	str	r3, [sp, #44]	@ 0x2c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c50:	9209      	str	r2, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c52:	f004 f9f1 	bl	8005038 <HAL_TIMEx_MasterConfigSynchronization>
 8000c56:	4603      	mov	r3, r0
 8000c58:	b108      	cbz	r0, 8000c5e <main+0x2be>
 8000c5a:	b672      	cpsid	i
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <main+0x2bc>
  huart3.Instance = USART3;
 8000c5e:	4c1b      	ldr	r4, [pc, #108]	@ (8000ccc <main+0x32c>)
 8000c60:	491b      	ldr	r1, [pc, #108]	@ (8000cd0 <main+0x330>)
  huart3.Init.BaudRate = 1000000;
 8000c62:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd4 <main+0x334>)
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c64:	4620      	mov	r0, r4
  huart3.Init.BaudRate = 1000000;
 8000c66:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c6a:	220c      	movs	r2, #12
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c6c:	e9c4 3303 	strd	r3, r3, [r4, #12]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c70:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c74:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c78:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c7c:	f004 fd7c 	bl	8005778 <HAL_UART_Init>
 8000c80:	4601      	mov	r1, r0
 8000c82:	b108      	cbz	r0, 8000c88 <main+0x2e8>
 8000c84:	b672      	cpsid	i
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <main+0x2e6>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c88:	4620      	mov	r0, r4
 8000c8a:	f004 fdc7 	bl	800581c <HAL_UARTEx_SetTxFifoThreshold>
 8000c8e:	4601      	mov	r1, r0
 8000c90:	b310      	cbz	r0, 8000cd8 <main+0x338>
 8000c92:	b672      	cpsid	i
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <main+0x2f4>
 8000c96:	bf00      	nop
 8000c98:	58024400 	.word	0x58024400
 8000c9c:	58020400 	.word	0x58020400
 8000ca0:	58020c00 	.word	0x58020c00
 8000ca4:	58021000 	.word	0x58021000
 8000ca8:	58020800 	.word	0x58020800
 8000cac:	58020000 	.word	0x58020000
 8000cb0:	58021800 	.word	0x58021800
 8000cb4:	24000f10 	.word	0x24000f10
 8000cb8:	58026000 	.word	0x58026000
 8000cbc:	24000e58 	.word	0x24000e58
 8000cc0:	40007400 	.word	0x40007400
 8000cc4:	24000e0c 	.word	0x24000e0c
 8000cc8:	40001000 	.word	0x40001000
 8000ccc:	24000d2c 	.word	0x24000d2c
 8000cd0:	40004800 	.word	0x40004800
 8000cd4:	000f4240 	.word	0x000f4240
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f004 fde1 	bl	80058a0 <HAL_UARTEx_SetRxFifoThreshold>
 8000cde:	b108      	cbz	r0, 8000ce4 <main+0x344>
 8000ce0:	b672      	cpsid	i
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <main+0x342>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f004 fd7b 	bl	80057e0 <HAL_UARTEx_DisableFifoMode>
 8000cea:	b108      	cbz	r0, 8000cf0 <main+0x350>
 8000cec:	b672      	cpsid	i
  while (1)
 8000cee:	e7fe      	b.n	8000cee <main+0x34e>
  hcomp2.Instance = COMP2;
 8000cf0:	481c      	ldr	r0, [pc, #112]	@ (8000d64 <main+0x3c4>)
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8000cf2:	2300      	movs	r3, #0
  hcomp2.Instance = COMP2;
 8000cf4:	491c      	ldr	r1, [pc, #112]	@ (8000d68 <main+0x3c8>)
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000cf6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8000cfa:	60c3      	str	r3, [r0, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000cfc:	6183      	str	r3, [r0, #24]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000cfe:	61c3      	str	r3, [r0, #28]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000d00:	6203      	str	r3, [r0, #32]
  hcomp2.Instance = COMP2;
 8000d02:	6001      	str	r1, [r0, #0]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000d04:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000d08:	e9c0 3301 	strd	r3, r3, [r0, #4]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000d0c:	f000 ffb0 	bl	8001c70 <HAL_COMP_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	b108      	cbz	r0, 8000d18 <main+0x378>
 8000d14:	b672      	cpsid	i
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <main+0x376>
  htim7.Instance = TIM7;
 8000d18:	4c14      	ldr	r4, [pc, #80]	@ (8000d6c <main+0x3cc>)
  htim7.Init.Period = 65535;
 8000d1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  htim7.Instance = TIM7;
 8000d1e:	4914      	ldr	r1, [pc, #80]	@ (8000d70 <main+0x3d0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d20:	900b      	str	r0, [sp, #44]	@ 0x2c
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d22:	61a3      	str	r3, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d24:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  htim7.Init.Prescaler = 0;
 8000d28:	e9c4 1000 	strd	r1, r0, [r4]
  htim7.Init.Period = 65535;
 8000d2c:	e9c4 0202 	strd	r0, r2, [r4, #8]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d30:	4620      	mov	r0, r4
 8000d32:	f004 f829 	bl	8004d88 <HAL_TIM_Base_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	b108      	cbz	r0, 8000d3e <main+0x39e>
 8000d3a:	b672      	cpsid	i
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <main+0x39c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d3e:	a909      	add	r1, sp, #36	@ 0x24
 8000d40:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d42:	9309      	str	r3, [sp, #36]	@ 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d44:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d46:	f004 f977 	bl	8005038 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4a:	b108      	cbz	r0, 8000d50 <main+0x3b0>
 8000d4c:	b672      	cpsid	i
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <main+0x3ae>
  COMP_custom_init();
 8000d50:	f7ff fc8c 	bl	800066c <COMP_custom_init>
  ADC_custom_init();
 8000d54:	f7ff fc38 	bl	80005c8 <ADC_custom_init>
  USART_custom_init();
 8000d58:	f7ff fd84 	bl	8000864 <USART_custom_init>
  DMA_custom_init();
 8000d5c:	f7ff fcdc 	bl	8000718 <DMA_custom_init>
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <main+0x3c0>
 8000d62:	bf00      	nop
 8000d64:	24000e6c 	.word	0x24000e6c
 8000d68:	58003810 	.word	0x58003810
 8000d6c:	24000dc0 	.word	0x24000dc0
 8000d70:	40001400 	.word	0x40001400

08000d74 <Error_Handler>:
 8000d74:	b672      	cpsid	i
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <Error_Handler+0x2>

08000d78 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d78:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <HAL_MspInit+0x4c>)
  */
  __HAL_RCC_VREF_CLK_ENABLE();

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8000d7a:	2000      	movs	r0, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000d80:	f042 0202 	orr.w	r2, r2, #2
{
 8000d84:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
{
 8000d8a:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000d90:	f002 0202 	and.w	r2, r2, #2
 8000d94:	9200      	str	r2, [sp, #0]
 8000d96:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_VREF_CLK_ENABLE();
 8000d98:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000d9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000da0:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000da4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000da8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8000db0:	f000 faca 	bl	8001348 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000db4:	f000 fadc 	bl	8001370 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000db8:	2000      	movs	r0, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dba:	b003      	add	sp, #12
 8000dbc:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000dc0:	f000 bacc 	b.w	800135c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 8000dc4:	58024400 	.word	0x58024400

08000dc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dc8:	b530      	push	{r4, r5, lr}
 8000dca:	b0b3      	sub	sp, #204	@ 0xcc
 8000dcc:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dce:	22c0      	movs	r2, #192	@ 0xc0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	a802      	add	r0, sp, #8
 8000dd4:	f004 fda6 	bl	8005924 <memset>
  if(hadc->Instance==ADC3)
 8000dd8:	4b31      	ldr	r3, [pc, #196]	@ (8000ea0 <HAL_ADC_MspInit+0xd8>)
 8000dda:	6822      	ldr	r2, [r4, #0]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d001      	beq.n	8000de4 <HAL_ADC_MspInit+0x1c>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8000de0:	b033      	add	sp, #204	@ 0xcc
 8000de2:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000de4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8000e90 <HAL_ADC_MspInit+0xc8>
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000de8:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL2.PLL2N = 50;
 8000dea:	2232      	movs	r2, #50	@ 0x32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dec:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000dee:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000df0:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000df2:	ed8d 7b02 	vstr	d7, [sp, #8]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000df6:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8000e98 <HAL_ADC_MspInit+0xd0>
    PeriphClkInitStruct.PLL2.PLL2N = 50;
 8000dfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000dfe:	ed8d 7b08 	vstr	d7, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e02:	f002 fcbf 	bl	8003784 <HAL_RCCEx_PeriphCLKConfig>
 8000e06:	2800      	cmp	r0, #0
 8000e08:	d13a      	bne.n	8000e80 <HAL_ADC_MspInit+0xb8>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000e0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ea4 <HAL_ADC_MspInit+0xdc>)
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000e0c:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
    hdma_adc3.Instance = DMA1_Stream0;
 8000e10:	4d25      	ldr	r5, [pc, #148]	@ (8000ea8 <HAL_ADC_MspInit+0xe0>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000e12:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000e16:	4608      	mov	r0, r1
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000e18:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000e1c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000e20:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000e24:	f002 7280 	and.w	r2, r2, #16777216	@ 0x1000000
 8000e28:	9200      	str	r2, [sp, #0]
 8000e2a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000e30:	f042 0204 	orr.w	r2, r2, #4
 8000e34:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	9301      	str	r3, [sp, #4]
 8000e42:	9b01      	ldr	r3, [sp, #4]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000e44:	f000 faac 	bl	80013a0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e48:	2300      	movs	r3, #0
    hdma_adc3.Instance = DMA1_Stream0;
 8000e4a:	4918      	ldr	r1, [pc, #96]	@ (8000eac <HAL_ADC_MspInit+0xe4>)
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000e4c:	2273      	movs	r2, #115	@ 0x73
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000e4e:	4628      	mov	r0, r5
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000e50:	61eb      	str	r3, [r5, #28]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e52:	626b      	str	r3, [r5, #36]	@ 0x24
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000e54:	e885 000e 	stmia.w	r5, {r1, r2, r3}
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000e58:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000e60:	e9c5 3103 	strd	r3, r1, [r5, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e64:	616a      	str	r2, [r5, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e6a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e6e:	61a9      	str	r1, [r5, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e70:	622a      	str	r2, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000e72:	f001 f9c7 	bl	8002204 <HAL_DMA_Init>
 8000e76:	b930      	cbnz	r0, 8000e86 <HAL_ADC_MspInit+0xbe>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000e78:	64e5      	str	r5, [r4, #76]	@ 0x4c
 8000e7a:	63ac      	str	r4, [r5, #56]	@ 0x38
}
 8000e7c:	b033      	add	sp, #204	@ 0xcc
 8000e7e:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8000e80:	f7ff ff78 	bl	8000d74 <Error_Handler>
 8000e84:	e7c1      	b.n	8000e0a <HAL_ADC_MspInit+0x42>
      Error_Handler();
 8000e86:	f7ff ff75 	bl	8000d74 <Error_Handler>
 8000e8a:	e7f5      	b.n	8000e78 <HAL_ADC_MspInit+0xb0>
 8000e8c:	f3af 8000 	nop.w
 8000e90:	00080000 	.word	0x00080000
 8000e94:	00000000 	.word	0x00000000
 8000e98:	00000002 	.word	0x00000002
 8000e9c:	00000080 	.word	0x00000080
 8000ea0:	58026000 	.word	0x58026000
 8000ea4:	58024400 	.word	0x58024400
 8000ea8:	24000e98 	.word	0x24000e98
 8000eac:	40020010 	.word	0x40020010

08000eb0 <HAL_COMP_MspInit>:
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP2)
 8000eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f20 <HAL_COMP_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP2)
 8000eb4:	6801      	ldr	r1, [r0, #0]
{
 8000eb6:	b500      	push	{lr}
  if(hcomp->Instance==COMP2)
 8000eb8:	4291      	cmp	r1, r2
{
 8000eba:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000ec0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000ec4:	9306      	str	r3, [sp, #24]
  if(hcomp->Instance==COMP2)
 8000ec6:	d002      	beq.n	8000ece <HAL_COMP_MspInit+0x1e>

  /* USER CODE END COMP2_MspInit 1 */

  }

}
 8000ec8:	b009      	add	sp, #36	@ 0x24
 8000eca:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_COMP12_CLK_ENABLE();
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <HAL_COMP_MspInit+0x74>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed0:	a902      	add	r1, sp, #8
 8000ed2:	4815      	ldr	r0, [pc, #84]	@ (8000f28 <HAL_COMP_MspInit+0x78>)
    __HAL_RCC_COMP12_CLK_ENABLE();
 8000ed4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000ed8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000edc:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000ee0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000ee4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000ee8:	9200      	str	r2, [sp, #0]
 8000eea:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ef0:	f042 0210 	orr.w	r2, r2, #16
 8000ef4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efc:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f00:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8000f18 <HAL_COMP_MspInit+0x68>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f08:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f0c:	f001 fc00 	bl	8002710 <HAL_GPIO_Init>
}
 8000f10:	b009      	add	sp, #36	@ 0x24
 8000f12:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f16:	bf00      	nop
 8000f18:	00000200 	.word	0x00000200
 8000f1c:	00000003 	.word	0x00000003
 8000f20:	58003810 	.word	0x58003810
 8000f24:	58024400 	.word	0x58024400
 8000f28:	58021000 	.word	0x58021000
 8000f2c:	00000000 	.word	0x00000000

08000f30 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8000f30:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa0 <HAL_DAC_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	2300      	movs	r3, #0
  if(hdac->Instance==DAC1)
 8000f34:	6801      	ldr	r1, [r0, #0]
{
 8000f36:	b500      	push	{lr}
  if(hdac->Instance==DAC1)
 8000f38:	4291      	cmp	r1, r2
{
 8000f3a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000f40:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000f44:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC1)
 8000f46:	d002      	beq.n	8000f4e <HAL_DAC_MspInit+0x1e>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000f48:	b009      	add	sp, #36	@ 0x24
 8000f4a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <HAL_DAC_MspInit+0x74>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	a902      	add	r1, sp, #8
 8000f52:	4815      	ldr	r0, [pc, #84]	@ (8000fa8 <HAL_DAC_MspInit+0x78>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000f54:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000f58:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8000f5c:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8000f60:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000f64:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8000f68:	9200      	str	r2, [sp, #0]
 8000f6a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f70:	f042 0201 	orr.w	r2, r2, #1
 8000f74:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7c:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f80:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8000f98 <HAL_DAC_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f88:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f001 fbc0 	bl	8002710 <HAL_GPIO_Init>
}
 8000f90:	b009      	add	sp, #36	@ 0x24
 8000f92:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f96:	bf00      	nop
 8000f98:	00000010 	.word	0x00000010
 8000f9c:	00000003 	.word	0x00000003
 8000fa0:	40007400 	.word	0x40007400
 8000fa4:	58024400 	.word	0x58024400
 8000fa8:	58020000 	.word	0x58020000

08000fac <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8000fac:	4a18      	ldr	r2, [pc, #96]	@ (8001010 <HAL_TIM_Base_MspInit+0x64>)
 8000fae:	6803      	ldr	r3, [r0, #0]
 8000fb0:	4293      	cmp	r3, r2
{
 8000fb2:	b510      	push	{r4, lr}
 8000fb4:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM6)
 8000fb6:	d004      	beq.n	8000fc2 <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8000fb8:	4a16      	ldr	r2, [pc, #88]	@ (8001014 <HAL_TIM_Base_MspInit+0x68>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d010      	beq.n	8000fe0 <HAL_TIM_Base_MspInit+0x34>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000fbe:	b002      	add	sp, #8
 8000fc0:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fc2:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <HAL_TIM_Base_MspInit+0x6c>)
 8000fc4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000fc8:	f042 0210 	orr.w	r2, r2, #16
 8000fcc:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8000fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fd4:	f003 0310 	and.w	r3, r3, #16
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	9b00      	ldr	r3, [sp, #0]
}
 8000fdc:	b002      	add	sp, #8
 8000fde:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8001018 <HAL_TIM_Base_MspInit+0x6c>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2037      	movs	r0, #55	@ 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000fe6:	f8d3 40e8 	ldr.w	r4, [r3, #232]	@ 0xe8
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000fea:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000fec:	f044 0420 	orr.w	r4, r4, #32
 8000ff0:	f8c3 40e8 	str.w	r4, [r3, #232]	@ 0xe8
 8000ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ff8:	f003 0320 	and.w	r3, r3, #32
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001000:	f000 fef8 	bl	8001df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001004:	2037      	movs	r0, #55	@ 0x37
}
 8001006:	b002      	add	sp, #8
 8001008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800100c:	f000 bf2e 	b.w	8001e6c <HAL_NVIC_EnableIRQ>
 8001010:	40001000 	.word	0x40001000
 8001014:	40001400 	.word	0x40001400
 8001018:	58024400 	.word	0x58024400

0800101c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800101c:	b530      	push	{r4, r5, lr}
 800101e:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	2100      	movs	r1, #0
{
 8001022:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001024:	22c0      	movs	r2, #192	@ 0xc0
 8001026:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	9106      	str	r1, [sp, #24]
 800102a:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800102e:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001032:	f004 fc77 	bl	8005924 <memset>
  if(huart->Instance==USART3)
 8001036:	4b2f      	ldr	r3, [pc, #188]	@ (80010f4 <HAL_UART_MspInit+0xd8>)
 8001038:	6822      	ldr	r2, [r4, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	d001      	beq.n	8001042 <HAL_UART_MspInit+0x26>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800103e:	b039      	add	sp, #228	@ 0xe4
 8001040:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001042:	2202      	movs	r2, #2
 8001044:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001046:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001048:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800104c:	f002 fb9a 	bl	8003784 <HAL_RCCEx_PeriphCLKConfig>
 8001050:	2800      	cmp	r0, #0
 8001052:	d148      	bne.n	80010e6 <HAL_UART_MspInit+0xca>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001054:	4b28      	ldr	r3, [pc, #160]	@ (80010f8 <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001056:	2007      	movs	r0, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001058:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 800105a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800105e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001062:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001066:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800106a:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 800106e:	9200      	str	r2, [sp, #0]
 8001070:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001072:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001076:	f042 0208 	orr.w	r2, r2, #8
 800107a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800107e:	f44f 7240 	mov.w	r2, #768	@ 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001086:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001088:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108c:	481b      	ldr	r0, [pc, #108]	@ (80010fc <HAL_UART_MspInit+0xe0>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800108e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001090:	2302      	movs	r3, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001092:	9d01      	ldr	r5, [sp, #4]
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001094:	4d1a      	ldr	r5, [pc, #104]	@ (8001100 <HAL_UART_MspInit+0xe4>)
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001096:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800109a:	2200      	movs	r2, #0
 800109c:	2300      	movs	r3, #0
 800109e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a2:	f001 fb35 	bl	8002710 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80010a6:	4917      	ldr	r1, [pc, #92]	@ (8001104 <HAL_UART_MspInit+0xe8>)
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80010a8:	222e      	movs	r2, #46	@ 0x2e
 80010aa:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80010ac:	4628      	mov	r0, r5
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80010ae:	60eb      	str	r3, [r5, #12]
 80010b0:	616b      	str	r3, [r5, #20]
 80010b2:	e9c5 1200 	strd	r1, r2, [r5]
 80010b6:	2140      	movs	r1, #64	@ 0x40
 80010b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010bc:	e9c5 3306 	strd	r3, r3, [r5, #24]
 80010c0:	60a9      	str	r1, [r5, #8]
 80010c2:	612a      	str	r2, [r5, #16]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010c4:	e9c5 3308 	strd	r3, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80010c8:	f001 f89c 	bl	8002204 <HAL_DMA_Init>
 80010cc:	b970      	cbnz	r0, 80010ec <HAL_UART_MspInit+0xd0>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2027      	movs	r0, #39	@ 0x27
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80010d2:	67e5      	str	r5, [r4, #124]	@ 0x7c
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010d4:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80010d6:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010d8:	f000 fe8c 	bl	8001df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010dc:	2027      	movs	r0, #39	@ 0x27
 80010de:	f000 fec5 	bl	8001e6c <HAL_NVIC_EnableIRQ>
}
 80010e2:	b039      	add	sp, #228	@ 0xe4
 80010e4:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80010e6:	f7ff fe45 	bl	8000d74 <Error_Handler>
 80010ea:	e7b3      	b.n	8001054 <HAL_UART_MspInit+0x38>
      Error_Handler();
 80010ec:	f7ff fe42 	bl	8000d74 <Error_Handler>
 80010f0:	e7ed      	b.n	80010ce <HAL_UART_MspInit+0xb2>
 80010f2:	bf00      	nop
 80010f4:	40004800 	.word	0x40004800
 80010f8:	58024400 	.word	0x58024400
 80010fc:	58020c00 	.word	0x58020c00
 8001100:	24000cb4 	.word	0x24000cb4
 8001104:	40020028 	.word	0x40020028

08001108 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001108:	e7fe      	b.n	8001108 <NMI_Handler>
 800110a:	bf00      	nop

0800110c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <HardFault_Handler>
 800110e:	bf00      	nop

08001110 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <MemManage_Handler>
 8001112:	bf00      	nop

08001114 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <BusFault_Handler>
 8001116:	bf00      	nop

08001118 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <UsageFault_Handler>
 800111a:	bf00      	nop

0800111c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop

08001128 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001128:	f000 b8f6 	b.w	8001318 <HAL_IncTick>

0800112c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	// ADC3 trasmission

	DMA_custom_interrupt_rx();
 800112c:	f7ff bb54 	b.w	80007d8 <DMA_custom_interrupt_rx>

08001130 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
	// USART3 trasmission

	DMA_custom_interrupt_tx();
 8001130:	f7ff bb2c 	b.w	800078c <DMA_custom_interrupt_tx>

08001134 <USART3_IRQHandler>:
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */
	USART_custom_interrupt();
 8001134:	f7ff bbae 	b.w	8000894 <USART_custom_interrupt>

08001138 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001138:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */
	TIM7_custom_interrupt();
 800113a:	f7ff fac3 	bl	80006c4 <TIM7_custom_interrupt>

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800113e:	4802      	ldr	r0, [pc, #8]	@ (8001148 <TIM7_IRQHandler+0x10>)
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001140:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim7);
 8001144:	f003 becc 	b.w	8004ee0 <HAL_TIM_IRQHandler>
 8001148:	24000dc0 	.word	0x24000dc0

0800114c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800114c:	4927      	ldr	r1, [pc, #156]	@ (80011ec <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800114e:	4a28      	ldr	r2, [pc, #160]	@ (80011f0 <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001150:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 8001158:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800115a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800115e:	6813      	ldr	r3, [r2, #0]
 8001160:	f003 030f 	and.w	r3, r3, #15
 8001164:	2b06      	cmp	r3, #6
 8001166:	d805      	bhi.n	8001174 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001168:	6813      	ldr	r3, [r2, #0]
 800116a:	f023 030f 	bic.w	r3, r3, #15
 800116e:	f043 0307 	orr.w	r3, r3, #7
 8001172:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001174:	4b1f      	ldr	r3, [pc, #124]	@ (80011f4 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001176:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001178:	4a1f      	ldr	r2, [pc, #124]	@ (80011f8 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 800117a:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800117c:	481c      	ldr	r0, [pc, #112]	@ (80011f0 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 800117e:	f041 0101 	orr.w	r1, r1, #1
 8001182:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001184:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8001186:	6819      	ldr	r1, [r3, #0]
 8001188:	400a      	ands	r2, r1
 800118a:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800118c:	6803      	ldr	r3, [r0, #0]
 800118e:	071b      	lsls	r3, r3, #28
 8001190:	d505      	bpl.n	800119e <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001192:	6803      	ldr	r3, [r0, #0]
 8001194:	f023 030f 	bic.w	r3, r3, #15
 8001198:	f043 0307 	orr.w	r3, r3, #7
 800119c:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800119e:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <SystemInit+0xa8>)
 80011a0:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011a2:	4916      	ldr	r1, [pc, #88]	@ (80011fc <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 80011a4:	4c16      	ldr	r4, [pc, #88]	@ (8001200 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 80011a6:	4817      	ldr	r0, [pc, #92]	@ (8001204 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 80011a8:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80011aa:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80011ac:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80011ae:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 80011b0:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 80011b2:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011b6:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011ba:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011bc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011be:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011c0:	4c11      	ldr	r4, [pc, #68]	@ (8001208 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 80011c2:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011c6:	4911      	ldr	r1, [pc, #68]	@ (800120c <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 80011c8:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 80011ca:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	4019      	ands	r1, r3
 80011d0:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80011d4:	d203      	bcs.n	80011de <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <SystemInit+0xc4>)
 80011d8:	2201      	movs	r2, #1
 80011da:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011de:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <SystemInit+0xc8>)
 80011e0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011e8:	601a      	str	r2, [r3, #0]
}
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00
 80011f0:	52002000 	.word	0x52002000
 80011f4:	58024400 	.word	0x58024400
 80011f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80011fc:	01010280 	.word	0x01010280
 8001200:	02020200 	.word	0x02020200
 8001204:	01ff0000 	.word	0x01ff0000
 8001208:	5c001000 	.word	0x5c001000
 800120c:	ffff0000 	.word	0xffff0000
 8001210:	51008000 	.word	0x51008000
 8001214:	52004000 	.word	0x52004000

08001218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001218:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001250 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800121c:	f7ff ff96 	bl	800114c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001220:	480c      	ldr	r0, [pc, #48]	@ (8001254 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001222:	490d      	ldr	r1, [pc, #52]	@ (8001258 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001224:	4a0d      	ldr	r2, [pc, #52]	@ (800125c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001228:	e002      	b.n	8001230 <LoopCopyDataInit>

0800122a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800122c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122e:	3304      	adds	r3, #4

08001230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001234:	d3f9      	bcc.n	800122a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001236:	4a0a      	ldr	r2, [pc, #40]	@ (8001260 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001238:	4c0a      	ldr	r4, [pc, #40]	@ (8001264 <LoopFillZerobss+0x22>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800123c:	e001      	b.n	8001242 <LoopFillZerobss>

0800123e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001240:	3204      	adds	r2, #4

08001242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001244:	d3fb      	bcc.n	800123e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001246:	f004 fb75 	bl	8005934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124a:	f7ff fba9 	bl	80009a0 <main>
  bx  lr
 800124e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001250:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001254:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001258:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800125c:	080059e4 	.word	0x080059e4
  ldr r2, =_sbss
 8001260:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001264:	24000f78 	.word	0x24000f78

08001268 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC3_IRQHandler>
	...

0800126c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800126c:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <HAL_InitTick+0x40>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b90b      	cbnz	r3, 8001276 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8001272:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001274:	4770      	bx	lr
{
 8001276:	b510      	push	{r4, lr}
 8001278:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800127a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800127e:	4a0c      	ldr	r2, [pc, #48]	@ (80012b0 <HAL_InitTick+0x44>)
 8001280:	fbb0 f3f3 	udiv	r3, r0, r3
 8001284:	6810      	ldr	r0, [r2, #0]
 8001286:	fbb0 f0f3 	udiv	r0, r0, r3
 800128a:	f000 fdfd 	bl	8001e88 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	b908      	cbnz	r0, 8001294 <HAL_InitTick+0x28>
 8001290:	2c0f      	cmp	r4, #15
 8001292:	d901      	bls.n	8001298 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001294:	2001      	movs	r0, #1
}
 8001296:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	4621      	mov	r1, r4
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f000 fda8 	bl	8001df4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4b03      	ldr	r3, [pc, #12]	@ (80012b4 <HAL_InitTick+0x48>)
 80012a6:	2000      	movs	r0, #0
 80012a8:	601c      	str	r4, [r3, #0]
}
 80012aa:	bd10      	pop	{r4, pc}
 80012ac:	24000008 	.word	0x24000008
 80012b0:	24000004 	.word	0x24000004
 80012b4:	2400000c 	.word	0x2400000c

080012b8 <HAL_Init>:
{
 80012b8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ba:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012bc:	4c12      	ldr	r4, [pc, #72]	@ (8001308 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012be:	f000 fd87 	bl	8001dd0 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012c2:	f001 fef3 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <HAL_Init+0x54>)
 80012c8:	4911      	ldr	r1, [pc, #68]	@ (8001310 <HAL_Init+0x58>)
 80012ca:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012cc:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012ce:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012d2:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012d6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012d8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012da:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 80012de:	490d      	ldr	r1, [pc, #52]	@ (8001314 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012e0:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012e4:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012e6:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 80012ea:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ec:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012ee:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012f0:	f7ff ffbc 	bl	800126c <HAL_InitTick>
 80012f4:	b110      	cbz	r0, 80012fc <HAL_Init+0x44>
    return HAL_ERROR;
 80012f6:	2401      	movs	r4, #1
}
 80012f8:	4620      	mov	r0, r4
 80012fa:	bd10      	pop	{r4, pc}
 80012fc:	4604      	mov	r4, r0
  HAL_MspInit();
 80012fe:	f7ff fd3b 	bl	8000d78 <HAL_MspInit>
}
 8001302:	4620      	mov	r0, r4
 8001304:	bd10      	pop	{r4, pc}
 8001306:	bf00      	nop
 8001308:	24000000 	.word	0x24000000
 800130c:	58024400 	.word	0x58024400
 8001310:	08005994 	.word	0x08005994
 8001314:	24000004 	.word	0x24000004

08001318 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001318:	4a03      	ldr	r2, [pc, #12]	@ (8001328 <HAL_IncTick+0x10>)
 800131a:	4b04      	ldr	r3, [pc, #16]	@ (800132c <HAL_IncTick+0x14>)
 800131c:	6811      	ldr	r1, [r2, #0]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	440b      	add	r3, r1
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	24000f74 	.word	0x24000f74
 800132c:	24000008 	.word	0x24000008

08001330 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001330:	4b01      	ldr	r3, [pc, #4]	@ (8001338 <HAL_GetTick+0x8>)
 8001332:	6818      	ldr	r0, [r3, #0]
}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	24000f74 	.word	0x24000f74

0800133c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800133c:	4b01      	ldr	r3, [pc, #4]	@ (8001344 <HAL_GetREVID+0x8>)
 800133e:	6818      	ldr	r0, [r3, #0]
}
 8001340:	0c00      	lsrs	r0, r0, #16
 8001342:	4770      	bx	lr
 8001344:	5c001000 	.word	0x5c001000

08001348 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001348:	4a03      	ldr	r2, [pc, #12]	@ (8001358 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 800134a:	6813      	ldr	r3, [r2, #0]
 800134c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001350:	4303      	orrs	r3, r0
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	58003c00 	.word	0x58003c00

0800135c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 800135c:	4a03      	ldr	r2, [pc, #12]	@ (800136c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 800135e:	6813      	ldr	r3, [r2, #0]
 8001360:	f023 0302 	bic.w	r3, r3, #2
 8001364:	4303      	orrs	r3, r0
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	58003c00 	.word	0x58003c00

08001370 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001370:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001372:	4c0a      	ldr	r4, [pc, #40]	@ (800139c <HAL_SYSCFG_EnableVREFBUF+0x2c>)
 8001374:	6823      	ldr	r3, [r4, #0]
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800137c:	f7ff ffd8 	bl	8001330 <HAL_GetTick>
 8001380:	4605      	mov	r5, r0

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001382:	e004      	b.n	800138e <HAL_SYSCFG_EnableVREFBUF+0x1e>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001384:	f7ff ffd4 	bl	8001330 <HAL_GetTick>
 8001388:	1b40      	subs	r0, r0, r5
 800138a:	280a      	cmp	r0, #10
 800138c:	d804      	bhi.n	8001398 <HAL_SYSCFG_EnableVREFBUF+0x28>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 800138e:	6823      	ldr	r3, [r4, #0]
 8001390:	071b      	lsls	r3, r3, #28
 8001392:	d5f7      	bpl.n	8001384 <HAL_SYSCFG_EnableVREFBUF+0x14>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001394:	2000      	movs	r0, #0
}
 8001396:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8001398:	2003      	movs	r0, #3
}
 800139a:	bd38      	pop	{r3, r4, r5, pc}
 800139c:	58003c00 	.word	0x58003c00

080013a0 <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80013a0:	4a03      	ldr	r2, [pc, #12]	@ (80013b0 <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 80013a2:	6853      	ldr	r3, [r2, #4]
 80013a4:	ea23 0300 	bic.w	r3, r3, r0
 80013a8:	430b      	orrs	r3, r1
 80013aa:	6053      	str	r3, [r2, #4]
}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	58000400 	.word	0x58000400

080013b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013b4:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80013b6:	2200      	movs	r2, #0
{
 80013b8:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80013ba:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80013bc:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 80013c0:	2a01      	cmp	r2, #1
 80013c2:	f000 80f4 	beq.w	80015ae <HAL_ADC_ConfigChannel+0x1fa>
 80013c6:	2401      	movs	r4, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013c8:	6802      	ldr	r2, [r0, #0]
 80013ca:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80013cc:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013d0:	6890      	ldr	r0, [r2, #8]
 80013d2:	0745      	lsls	r5, r0, #29
 80013d4:	d509      	bpl.n	80013ea <HAL_ADC_ConfigChannel+0x36>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);

    tmp_hal_status = HAL_ERROR;
 80013d8:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013da:	f042 0220 	orr.w	r2, r2, #32
 80013de:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80013e6:	b002      	add	sp, #8
 80013e8:	bd70      	pop	{r4, r5, r6, pc}
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80013ea:	680d      	ldr	r5, [r1, #0]
 80013ec:	2d00      	cmp	r5, #0
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80013ee:	ea4f 6095 	mov.w	r0, r5, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80013f2:	db0d      	blt.n	8001410 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80013f4:	f3c5 0613 	ubfx	r6, r5, #0, #20
 80013f8:	2e00      	cmp	r6, #0
 80013fa:	f000 80c5 	beq.w	8001588 <HAL_ADC_ConfigChannel+0x1d4>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fe:	fa95 f5a5 	rbit	r5, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001402:	b115      	cbz	r5, 800140a <HAL_ADC_ConfigChannel+0x56>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001404:	fab5 f585 	clz	r5, r5
 8001408:	40ac      	lsls	r4, r5
 800140a:	69d5      	ldr	r5, [r2, #28]
 800140c:	432c      	orrs	r4, r5
 800140e:	61d4      	str	r4, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001410:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8001412:	f04f 0c1f 	mov.w	ip, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001416:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 800141a:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800141e:	09a5      	lsrs	r5, r4, #6
  MODIFY_REG(*preg,
 8001420:	ea04 040c 	and.w	r4, r4, ip
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001424:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 8001428:	fa0c fc04 	lsl.w	ip, ip, r4
 800142c:	40a0      	lsls	r0, r4
 800142e:	f85e 4005 	ldr.w	r4, [lr, r5]
 8001432:	ea24 0c0c 	bic.w	ip, r4, ip
 8001436:	ea4c 0000 	orr.w	r0, ip, r0
 800143a:	f84e 0005 	str.w	r0, [lr, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800143e:	6890      	ldr	r0, [r2, #8]
 8001440:	f010 0f04 	tst.w	r0, #4
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001444:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001446:	d101      	bne.n	800144c <HAL_ADC_ConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001448:	0704      	lsls	r4, r0, #28
 800144a:	d546      	bpl.n	80014da <HAL_ADC_ConfigChannel+0x126>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800144c:	6890      	ldr	r0, [r2, #8]
 800144e:	07c0      	lsls	r0, r0, #31
 8001450:	d441      	bmi.n	80014d6 <HAL_ADC_ConfigChannel+0x122>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001452:	68cd      	ldr	r5, [r1, #12]
 8001454:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8001456:	f005 0618 	and.w	r6, r5, #24
 800145a:	48b1      	ldr	r0, [pc, #708]	@ (8001720 <HAL_ADC_ConfigChannel+0x36c>)
 800145c:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 8001460:	40f0      	lsrs	r0, r6
 8001462:	f3c4 0613 	ubfx	r6, r4, #0, #20
 8001466:	4020      	ands	r0, r4
 8001468:	ea21 0106 	bic.w	r1, r1, r6
 800146c:	4301      	orrs	r1, r0
 800146e:	f8c2 10c0 	str.w	r1, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001472:	49ac      	ldr	r1, [pc, #688]	@ (8001724 <HAL_ADC_ConfigChannel+0x370>)
 8001474:	428d      	cmp	r5, r1
 8001476:	f000 808e 	beq.w	8001596 <HAL_ADC_ConfigChannel+0x1e2>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800147a:	2c00      	cmp	r4, #0
 800147c:	da2b      	bge.n	80014d6 <HAL_ADC_ConfigChannel+0x122>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800147e:	49aa      	ldr	r1, [pc, #680]	@ (8001728 <HAL_ADC_ConfigChannel+0x374>)
 8001480:	428a      	cmp	r2, r1
 8001482:	f000 80c2 	beq.w	800160a <HAL_ADC_ConfigChannel+0x256>
 8001486:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 800148a:	428a      	cmp	r2, r1
 800148c:	f000 80bd 	beq.w	800160a <HAL_ADC_ConfigChannel+0x256>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001490:	f101 51c0 	add.w	r1, r1, #402653184	@ 0x18000000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001494:	4da5      	ldr	r5, [pc, #660]	@ (800172c <HAL_ADC_ConfigChannel+0x378>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001496:	f501 4184 	add.w	r1, r1, #16896	@ 0x4200
 800149a:	6888      	ldr	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800149c:	68ae      	ldr	r6, [r5, #8]
 800149e:	07f6      	lsls	r6, r6, #31
 80014a0:	d499      	bmi.n	80013d6 <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80014a2:	4ea3      	ldr	r6, [pc, #652]	@ (8001730 <HAL_ADC_ConfigChannel+0x37c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014a4:	f000 7ce0 	and.w	ip, r0, #29360128	@ 0x1c00000
 80014a8:	42b4      	cmp	r4, r6
 80014aa:	f000 8186 	beq.w	80017ba <HAL_ADC_ConfigChannel+0x406>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80014ae:	4ea1      	ldr	r6, [pc, #644]	@ (8001734 <HAL_ADC_ConfigChannel+0x380>)
 80014b0:	42b4      	cmp	r4, r6
 80014b2:	f000 8173 	beq.w	800179c <HAL_ADC_ConfigChannel+0x3e8>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80014b6:	4da0      	ldr	r5, [pc, #640]	@ (8001738 <HAL_ADC_ConfigChannel+0x384>)
 80014b8:	42ac      	cmp	r4, r5
 80014ba:	d10c      	bne.n	80014d6 <HAL_ADC_ConfigChannel+0x122>
            if (ADC_VREFINT_INSTANCE(hadc))
 80014bc:	0240      	lsls	r0, r0, #9
 80014be:	d40a      	bmi.n	80014d6 <HAL_ADC_ConfigChannel+0x122>
 80014c0:	489a      	ldr	r0, [pc, #616]	@ (800172c <HAL_ADC_ConfigChannel+0x378>)
 80014c2:	4282      	cmp	r2, r0
 80014c4:	d107      	bne.n	80014d6 <HAL_ADC_ConfigChannel+0x122>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014c6:	688a      	ldr	r2, [r1, #8]
 80014c8:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80014cc:	ea42 020c 	orr.w	r2, r2, ip
 80014d0:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80014d4:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014d6:	2000      	movs	r0, #0
 80014d8:	e782      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x2c>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80014da:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80014dc:	f102 0c14 	add.w	ip, r2, #20
  MODIFY_REG(*preg,
 80014e0:	f04f 0e07 	mov.w	lr, #7
 80014e4:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80014e6:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 80014e8:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80014ec:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 80014f0:	fa0e fe04 	lsl.w	lr, lr, r4
 80014f4:	fa06 f404 	lsl.w	r4, r6, r4
 80014f8:	f85c 0005 	ldr.w	r0, [ip, r5]
 80014fc:	ea20 000e 	bic.w	r0, r0, lr
 8001500:	4320      	orrs	r0, r4
 8001502:	f84c 0005 	str.w	r0, [ip, r5]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001506:	488d      	ldr	r0, [pc, #564]	@ (800173c <HAL_ADC_ConfigChannel+0x388>)
 8001508:	694d      	ldr	r5, [r1, #20]
 800150a:	6800      	ldr	r0, [r0, #0]
 800150c:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 8001510:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8001514:	68d0      	ldr	r0, [r2, #12]
 8001516:	d039      	beq.n	800158c <HAL_ADC_ConfigChannel+0x1d8>
 8001518:	f010 0f10 	tst.w	r0, #16
 800151c:	68d0      	ldr	r0, [r2, #12]
 800151e:	d035      	beq.n	800158c <HAL_ADC_ConfigChannel+0x1d8>
 8001520:	0840      	lsrs	r0, r0, #1
 8001522:	f000 0008 	and.w	r0, r0, #8
 8001526:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001528:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800152a:	6808      	ldr	r0, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800152c:	2e04      	cmp	r6, #4
 800152e:	d041      	beq.n	80015b4 <HAL_ADC_ConfigChannel+0x200>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001530:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 8001534:	f000 44f8 	and.w	r4, r0, #2080374784	@ 0x7c000000
 8001538:	f85c 0026 	ldr.w	r0, [ip, r6, lsl #2]
 800153c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8001540:	4320      	orrs	r0, r4
 8001542:	4328      	orrs	r0, r5
 8001544:	f84c 0026 	str.w	r0, [ip, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001548:	7e4c      	ldrb	r4, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800154a:	690d      	ldr	r5, [r1, #16]
 800154c:	f1a4 0401 	sub.w	r4, r4, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001550:	f85c 0025 	ldr.w	r0, [ip, r5, lsl #2]
 8001554:	fab4 f484 	clz	r4, r4
 8001558:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800155c:	0964      	lsrs	r4, r4, #5
 800155e:	ea40 70c4 	orr.w	r0, r0, r4, lsl #31
 8001562:	f84c 0025 	str.w	r0, [ip, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001566:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001568:	690d      	ldr	r5, [r1, #16]
 800156a:	f1a0 0001 	sub.w	r0, r0, #1
 800156e:	6914      	ldr	r4, [r2, #16]
 8001570:	f005 051f 	and.w	r5, r5, #31
 8001574:	fab0 f080 	clz	r0, r0
 8001578:	f424 44f0 	bic.w	r4, r4, #30720	@ 0x7800
 800157c:	0940      	lsrs	r0, r0, #5
 800157e:	02c0      	lsls	r0, r0, #11
 8001580:	40a8      	lsls	r0, r5
 8001582:	4320      	orrs	r0, r4
 8001584:	6110      	str	r0, [r2, #16]
}
 8001586:	e761      	b.n	800144c <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001588:	4084      	lsls	r4, r0
 800158a:	e73e      	b.n	800140a <HAL_ADC_ConfigChannel+0x56>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800158c:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8001590:	0040      	lsls	r0, r0, #1
 8001592:	4085      	lsls	r5, r0
 8001594:	e7c8      	b.n	8001528 <HAL_ADC_ConfigChannel+0x174>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001596:	4964      	ldr	r1, [pc, #400]	@ (8001728 <HAL_ADC_ConfigChannel+0x374>)
 8001598:	428a      	cmp	r2, r1
 800159a:	f000 808a 	beq.w	80016b2 <HAL_ADC_ConfigChannel+0x2fe>
 800159e:	4968      	ldr	r1, [pc, #416]	@ (8001740 <HAL_ADC_ConfigChannel+0x38c>)
 80015a0:	428a      	cmp	r2, r1
 80015a2:	d04b      	beq.n	800163c <HAL_ADC_ConfigChannel+0x288>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80015a4:	69d1      	ldr	r1, [r2, #28]
 80015a6:	f041 0101 	orr.w	r1, r1, #1
 80015aa:	61d1      	str	r1, [r2, #28]
}
 80015ac:	e765      	b.n	800147a <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 80015ae:	2002      	movs	r0, #2
}
 80015b0:	b002      	add	sp, #8
 80015b2:	bd70      	pop	{r4, r5, r6, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015b4:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 80015b6:	0684      	lsls	r4, r0, #26
 80015b8:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 80015bc:	ebb5 6f80 	cmp.w	r5, r0, lsl #26
 80015c0:	d014      	beq.n	80015ec <HAL_ADC_ConfigChannel+0x238>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015c2:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 80015c4:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80015c8:	4284      	cmp	r4, r0
 80015ca:	d019      	beq.n	8001600 <HAL_ADC_ConfigChannel+0x24c>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015cc:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 80015ce:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80015d2:	4284      	cmp	r4, r0
 80015d4:	d00f      	beq.n	80015f6 <HAL_ADC_ConfigChannel+0x242>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015d6:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 80015d8:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80015dc:	4284      	cmp	r4, r0
 80015de:	f47f af35 	bne.w	800144c <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80015e2:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 80015e4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80015e8:	66d0      	str	r0, [r2, #108]	@ 0x6c
 80015ea:	e72f      	b.n	800144c <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80015ec:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 80015ee:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80015f2:	6610      	str	r0, [r2, #96]	@ 0x60
 80015f4:	e7e5      	b.n	80015c2 <HAL_ADC_ConfigChannel+0x20e>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80015f6:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 80015f8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80015fc:	6690      	str	r0, [r2, #104]	@ 0x68
 80015fe:	e7ea      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x222>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001600:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8001602:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001606:	6650      	str	r0, [r2, #100]	@ 0x64
 8001608:	e7e0      	b.n	80015cc <HAL_ADC_ConfigChannel+0x218>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800160a:	4d47      	ldr	r5, [pc, #284]	@ (8001728 <HAL_ADC_ConfigChannel+0x374>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800160c:	494d      	ldr	r1, [pc, #308]	@ (8001744 <HAL_ADC_ConfigChannel+0x390>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800160e:	f505 7580 	add.w	r5, r5, #256	@ 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001612:	6888      	ldr	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001614:	f855 6cf8 	ldr.w	r6, [r5, #-248]
 8001618:	68ad      	ldr	r5, [r5, #8]
 800161a:	07ed      	lsls	r5, r5, #31
 800161c:	f53f aedb 	bmi.w	80013d6 <HAL_ADC_ConfigChannel+0x22>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001620:	07f5      	lsls	r5, r6, #31
 8001622:	f53f aed8 	bmi.w	80013d6 <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001626:	4d42      	ldr	r5, [pc, #264]	@ (8001730 <HAL_ADC_ConfigChannel+0x37c>)
 8001628:	42ac      	cmp	r4, r5
 800162a:	f43f af54 	beq.w	80014d6 <HAL_ADC_ConfigChannel+0x122>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800162e:	4d41      	ldr	r5, [pc, #260]	@ (8001734 <HAL_ADC_ConfigChannel+0x380>)
 8001630:	42ac      	cmp	r4, r5
 8001632:	f43f af50 	beq.w	80014d6 <HAL_ADC_ConfigChannel+0x122>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001636:	f000 7ce0 	and.w	ip, r0, #29360128	@ 0x1c00000
 800163a:	e73c      	b.n	80014b6 <HAL_ADC_ConfigChannel+0x102>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800163c:	4942      	ldr	r1, [pc, #264]	@ (8001748 <HAL_ADC_ConfigChannel+0x394>)
 800163e:	428c      	cmp	r4, r1
 8001640:	f000 8092 	beq.w	8001768 <HAL_ADC_ConfigChannel+0x3b4>
 8001644:	4941      	ldr	r1, [pc, #260]	@ (800174c <HAL_ADC_ConfigChannel+0x398>)
 8001646:	428c      	cmp	r4, r1
 8001648:	f000 809a 	beq.w	8001780 <HAL_ADC_ConfigChannel+0x3cc>
 800164c:	4940      	ldr	r1, [pc, #256]	@ (8001750 <HAL_ADC_ConfigChannel+0x39c>)
 800164e:	428c      	cmp	r4, r1
 8001650:	f000 80d6 	beq.w	8001800 <HAL_ADC_ConfigChannel+0x44c>
 8001654:	493f      	ldr	r1, [pc, #252]	@ (8001754 <HAL_ADC_ConfigChannel+0x3a0>)
 8001656:	428c      	cmp	r4, r1
 8001658:	f000 80dc 	beq.w	8001814 <HAL_ADC_ConfigChannel+0x460>
 800165c:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8001660:	3110      	adds	r1, #16
 8001662:	428c      	cmp	r4, r1
 8001664:	f000 80e2 	beq.w	800182c <HAL_ADC_ConfigChannel+0x478>
 8001668:	493b      	ldr	r1, [pc, #236]	@ (8001758 <HAL_ADC_ConfigChannel+0x3a4>)
 800166a:	428c      	cmp	r4, r1
 800166c:	f000 80f6 	beq.w	800185c <HAL_ADC_ConfigChannel+0x4a8>
 8001670:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 8001674:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8001678:	428c      	cmp	r4, r1
 800167a:	f000 8104 	beq.w	8001886 <HAL_ADC_ConfigChannel+0x4d2>
 800167e:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8001682:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001686:	428c      	cmp	r4, r1
 8001688:	f000 810b 	beq.w	80018a2 <HAL_ADC_ConfigChannel+0x4ee>
 800168c:	4933      	ldr	r1, [pc, #204]	@ (800175c <HAL_ADC_ConfigChannel+0x3a8>)
 800168e:	428c      	cmp	r4, r1
 8001690:	d188      	bne.n	80015a4 <HAL_ADC_ConfigChannel+0x1f0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001692:	4a33      	ldr	r2, [pc, #204]	@ (8001760 <HAL_ADC_ConfigChannel+0x3ac>)
 8001694:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001698:	2a00      	cmp	r2, #0
 800169a:	f000 80cd 	beq.w	8001838 <HAL_ADC_ConfigChannel+0x484>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800169e:	4828      	ldr	r0, [pc, #160]	@ (8001740 <HAL_ADC_ConfigChannel+0x38c>)
  return __builtin_clz(value);
 80016a0:	fab2 f282 	clz	r2, r2
 80016a4:	2101      	movs	r1, #1
 80016a6:	69c4      	ldr	r4, [r0, #28]
 80016a8:	fa01 f202 	lsl.w	r2, r1, r2
 80016ac:	4322      	orrs	r2, r4
 80016ae:	61c2      	str	r2, [r0, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016b0:	e711      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x122>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80016b2:	4925      	ldr	r1, [pc, #148]	@ (8001748 <HAL_ADC_ConfigChannel+0x394>)
 80016b4:	428c      	cmp	r4, r1
 80016b6:	d057      	beq.n	8001768 <HAL_ADC_ConfigChannel+0x3b4>
 80016b8:	4924      	ldr	r1, [pc, #144]	@ (800174c <HAL_ADC_ConfigChannel+0x398>)
 80016ba:	428c      	cmp	r4, r1
 80016bc:	d060      	beq.n	8001780 <HAL_ADC_ConfigChannel+0x3cc>
 80016be:	4924      	ldr	r1, [pc, #144]	@ (8001750 <HAL_ADC_ConfigChannel+0x39c>)
 80016c0:	428c      	cmp	r4, r1
 80016c2:	f000 809d 	beq.w	8001800 <HAL_ADC_ConfigChannel+0x44c>
 80016c6:	4923      	ldr	r1, [pc, #140]	@ (8001754 <HAL_ADC_ConfigChannel+0x3a0>)
 80016c8:	428c      	cmp	r4, r1
 80016ca:	f000 80a3 	beq.w	8001814 <HAL_ADC_ConfigChannel+0x460>
 80016ce:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 80016d2:	3110      	adds	r1, #16
 80016d4:	428c      	cmp	r4, r1
 80016d6:	f000 80a3 	beq.w	8001820 <HAL_ADC_ConfigChannel+0x46c>
 80016da:	491f      	ldr	r1, [pc, #124]	@ (8001758 <HAL_ADC_ConfigChannel+0x3a4>)
 80016dc:	428c      	cmp	r4, r1
 80016de:	f000 80b1 	beq.w	8001844 <HAL_ADC_ConfigChannel+0x490>
 80016e2:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 80016e6:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80016ea:	428c      	cmp	r4, r1
 80016ec:	f000 80bd 	beq.w	800186a <HAL_ADC_ConfigChannel+0x4b6>
 80016f0:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 80016f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80016f8:	428c      	cmp	r4, r1
 80016fa:	f000 80bd 	beq.w	8001878 <HAL_ADC_ConfigChannel+0x4c4>
 80016fe:	4919      	ldr	r1, [pc, #100]	@ (8001764 <HAL_ADC_ConfigChannel+0x3b0>)
 8001700:	428c      	cmp	r4, r1
 8001702:	f000 80c7 	beq.w	8001894 <HAL_ADC_ConfigChannel+0x4e0>
 8001706:	4915      	ldr	r1, [pc, #84]	@ (800175c <HAL_ADC_ConfigChannel+0x3a8>)
 8001708:	428c      	cmp	r4, r1
 800170a:	f47f af4b 	bne.w	80015a4 <HAL_ADC_ConfigChannel+0x1f0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	4a14      	ldr	r2, [pc, #80]	@ (8001760 <HAL_ADC_ConfigChannel+0x3ac>)
 8001710:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001714:	2a00      	cmp	r2, #0
 8001716:	f000 809b 	beq.w	8001850 <HAL_ADC_ConfigChannel+0x49c>
 800171a:	4803      	ldr	r0, [pc, #12]	@ (8001728 <HAL_ADC_ConfigChannel+0x374>)
 800171c:	e7c0      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x2ec>
 800171e:	bf00      	nop
 8001720:	000fffff 	.word	0x000fffff
 8001724:	47ff0000 	.word	0x47ff0000
 8001728:	40022000 	.word	0x40022000
 800172c:	58026000 	.word	0x58026000
 8001730:	cb840000 	.word	0xcb840000
 8001734:	c7520000 	.word	0xc7520000
 8001738:	cfb80000 	.word	0xcfb80000
 800173c:	5c001000 	.word	0x5c001000
 8001740:	40022100 	.word	0x40022100
 8001744:	40022300 	.word	0x40022300
 8001748:	04300002 	.word	0x04300002
 800174c:	08600004 	.word	0x08600004
 8001750:	0c900008 	.word	0x0c900008
 8001754:	10c00010 	.word	0x10c00010
 8001758:	2a000400 	.word	0x2a000400
 800175c:	4b840000 	.word	0x4b840000
 8001760:	4fb80000 	.word	0x4fb80000
 8001764:	43210000 	.word	0x43210000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001768:	2101      	movs	r1, #1
 800176a:	fa91 f0a1 	rbit	r0, r1
  if (value == 0U)
 800176e:	2800      	cmp	r0, #0
 8001770:	d04b      	beq.n	800180a <HAL_ADC_ConfigChannel+0x456>
  return __builtin_clz(value);
 8001772:	fab0 f080 	clz	r0, r0
 8001776:	69d4      	ldr	r4, [r2, #28]
 8001778:	4081      	lsls	r1, r0
 800177a:	4321      	orrs	r1, r4
 800177c:	61d1      	str	r1, [r2, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800177e:	e6aa      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x122>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	494b      	ldr	r1, [pc, #300]	@ (80018b0 <HAL_ADC_ConfigChannel+0x4fc>)
 8001782:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8001786:	2900      	cmp	r1, #0
 8001788:	d03f      	beq.n	800180a <HAL_ADC_ConfigChannel+0x456>
  return __builtin_clz(value);
 800178a:	fab1 f181 	clz	r1, r1
 800178e:	2001      	movs	r0, #1
 8001790:	69d4      	ldr	r4, [r2, #28]
 8001792:	fa00 f101 	lsl.w	r1, r0, r1
 8001796:	4321      	orrs	r1, r4
 8001798:	61d1      	str	r1, [r2, #28]
 800179a:	e69c      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x122>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800179c:	01c4      	lsls	r4, r0, #7
 800179e:	f53f ae9a 	bmi.w	80014d6 <HAL_ADC_ConfigChannel+0x122>
 80017a2:	42aa      	cmp	r2, r5
 80017a4:	f47f ae97 	bne.w	80014d6 <HAL_ADC_ConfigChannel+0x122>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017a8:	688a      	ldr	r2, [r1, #8]
 80017aa:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80017ae:	ea42 020c 	orr.w	r2, r2, ip
 80017b2:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80017b6:	608a      	str	r2, [r1, #8]
}
 80017b8:	e68d      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x122>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80017ba:	0206      	lsls	r6, r0, #8
 80017bc:	f53f ae8b 	bmi.w	80014d6 <HAL_ADC_ConfigChannel+0x122>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80017c0:	42aa      	cmp	r2, r5
 80017c2:	f47f ae88 	bne.w	80014d6 <HAL_ADC_ConfigChannel+0x122>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017c6:	688a      	ldr	r2, [r1, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017c8:	483a      	ldr	r0, [pc, #232]	@ (80018b4 <HAL_ADC_ConfigChannel+0x500>)
 80017ca:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80017ce:	ea42 020c 	orr.w	r2, r2, ip
 80017d2:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80017d6:	608a      	str	r2, [r1, #8]
 80017d8:	6802      	ldr	r2, [r0, #0]
 80017da:	4937      	ldr	r1, [pc, #220]	@ (80018b8 <HAL_ADC_ConfigChannel+0x504>)
 80017dc:	0992      	lsrs	r2, r2, #6
 80017de:	fba1 1202 	umull	r1, r2, r1, r2
 80017e2:	0992      	lsrs	r2, r2, #6
 80017e4:	3201      	adds	r2, #1
 80017e6:	0052      	lsls	r2, r2, #1
 80017e8:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80017ea:	9a01      	ldr	r2, [sp, #4]
 80017ec:	2a00      	cmp	r2, #0
 80017ee:	f43f ae72 	beq.w	80014d6 <HAL_ADC_ConfigChannel+0x122>
                wait_loop_index--;
 80017f2:	9a01      	ldr	r2, [sp, #4]
 80017f4:	3a01      	subs	r2, #1
 80017f6:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80017f8:	9a01      	ldr	r2, [sp, #4]
 80017fa:	2a00      	cmp	r2, #0
 80017fc:	d1f9      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x43e>
 80017fe:	e66a      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x122>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	492e      	ldr	r1, [pc, #184]	@ (80018bc <HAL_ADC_ConfigChannel+0x508>)
 8001802:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8001806:	2900      	cmp	r1, #0
 8001808:	d1bf      	bne.n	800178a <HAL_ADC_ConfigChannel+0x3d6>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800180a:	69d1      	ldr	r1, [r2, #28]
 800180c:	f041 0101 	orr.w	r1, r1, #1
 8001810:	61d1      	str	r1, [r2, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001812:	e660      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x122>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	492a      	ldr	r1, [pc, #168]	@ (80018c0 <HAL_ADC_ConfigChannel+0x50c>)
 8001816:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 800181a:	2900      	cmp	r1, #0
 800181c:	d1b5      	bne.n	800178a <HAL_ADC_ConfigChannel+0x3d6>
 800181e:	e7f4      	b.n	800180a <HAL_ADC_ConfigChannel+0x456>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001820:	4928      	ldr	r1, [pc, #160]	@ (80018c4 <HAL_ADC_ConfigChannel+0x510>)
 8001822:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8001826:	2900      	cmp	r1, #0
 8001828:	d1af      	bne.n	800178a <HAL_ADC_ConfigChannel+0x3d6>
 800182a:	e7ee      	b.n	800180a <HAL_ADC_ConfigChannel+0x456>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182c:	4a25      	ldr	r2, [pc, #148]	@ (80018c4 <HAL_ADC_ConfigChannel+0x510>)
 800182e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001832:	2a00      	cmp	r2, #0
 8001834:	f47f af33 	bne.w	800169e <HAL_ADC_ConfigChannel+0x2ea>
 8001838:	4923      	ldr	r1, [pc, #140]	@ (80018c8 <HAL_ADC_ConfigChannel+0x514>)
 800183a:	69ca      	ldr	r2, [r1, #28]
 800183c:	f042 0201 	orr.w	r2, r2, #1
 8001840:	61ca      	str	r2, [r1, #28]
 8001842:	e648      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x122>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001844:	4a21      	ldr	r2, [pc, #132]	@ (80018cc <HAL_ADC_ConfigChannel+0x518>)
 8001846:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800184a:	2a00      	cmp	r2, #0
 800184c:	f47f af65 	bne.w	800171a <HAL_ADC_ConfigChannel+0x366>
 8001850:	491f      	ldr	r1, [pc, #124]	@ (80018d0 <HAL_ADC_ConfigChannel+0x51c>)
 8001852:	69ca      	ldr	r2, [r1, #28]
 8001854:	f042 0201 	orr.w	r2, r2, #1
 8001858:	61ca      	str	r2, [r1, #28]
 800185a:	e63c      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x122>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	4a1b      	ldr	r2, [pc, #108]	@ (80018cc <HAL_ADC_ConfigChannel+0x518>)
 800185e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001862:	2a00      	cmp	r2, #0
 8001864:	f47f af1b 	bne.w	800169e <HAL_ADC_ConfigChannel+0x2ea>
 8001868:	e7e6      	b.n	8001838 <HAL_ADC_ConfigChannel+0x484>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186a:	4a1a      	ldr	r2, [pc, #104]	@ (80018d4 <HAL_ADC_ConfigChannel+0x520>)
 800186c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001870:	2a00      	cmp	r2, #0
 8001872:	f47f af52 	bne.w	800171a <HAL_ADC_ConfigChannel+0x366>
 8001876:	e7eb      	b.n	8001850 <HAL_ADC_ConfigChannel+0x49c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	4a17      	ldr	r2, [pc, #92]	@ (80018d8 <HAL_ADC_ConfigChannel+0x524>)
 800187a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800187e:	2a00      	cmp	r2, #0
 8001880:	f47f af4b 	bne.w	800171a <HAL_ADC_ConfigChannel+0x366>
 8001884:	e7e4      	b.n	8001850 <HAL_ADC_ConfigChannel+0x49c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001886:	4a13      	ldr	r2, [pc, #76]	@ (80018d4 <HAL_ADC_ConfigChannel+0x520>)
 8001888:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800188c:	2a00      	cmp	r2, #0
 800188e:	f47f af06 	bne.w	800169e <HAL_ADC_ConfigChannel+0x2ea>
 8001892:	e7d1      	b.n	8001838 <HAL_ADC_ConfigChannel+0x484>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001894:	4a11      	ldr	r2, [pc, #68]	@ (80018dc <HAL_ADC_ConfigChannel+0x528>)
 8001896:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800189a:	2a00      	cmp	r2, #0
 800189c:	f47f af3d 	bne.w	800171a <HAL_ADC_ConfigChannel+0x366>
 80018a0:	e7d6      	b.n	8001850 <HAL_ADC_ConfigChannel+0x49c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	4a0d      	ldr	r2, [pc, #52]	@ (80018d8 <HAL_ADC_ConfigChannel+0x524>)
 80018a4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80018a8:	2a00      	cmp	r2, #0
 80018aa:	f47f aef8 	bne.w	800169e <HAL_ADC_ConfigChannel+0x2ea>
 80018ae:	e7c3      	b.n	8001838 <HAL_ADC_ConfigChannel+0x484>
 80018b0:	19200040 	.word	0x19200040
 80018b4:	24000004 	.word	0x24000004
 80018b8:	053e2d63 	.word	0x053e2d63
 80018bc:	1d500080 	.word	0x1d500080
 80018c0:	21800100 	.word	0x21800100
 80018c4:	25b00200 	.word	0x25b00200
 80018c8:	40022100 	.word	0x40022100
 80018cc:	2e300800 	.word	0x2e300800
 80018d0:	40022000 	.word	0x40022000
 80018d4:	32601000 	.word	0x32601000
 80018d8:	36902000 	.word	0x36902000
 80018dc:	47520000 	.word	0x47520000

080018e0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80018e0:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80018e2:	4a56      	ldr	r2, [pc, #344]	@ (8001a3c <ADC_ConfigureBoostMode+0x15c>)
{
 80018e4:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80018e6:	6803      	ldr	r3, [r0, #0]
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d025      	beq.n	8001938 <ADC_ConfigureBoostMode+0x58>
 80018ec:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d021      	beq.n	8001938 <ADC_ConfigureBoostMode+0x58>
 80018f4:	4b52      	ldr	r3, [pc, #328]	@ (8001a40 <ADC_ConfigureBoostMode+0x160>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 80018fc:	d021      	beq.n	8001942 <ADC_ConfigureBoostMode+0x62>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80018fe:	f001 fd8d 	bl	800341c <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8001902:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8001904:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8001906:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800190a:	f000 8086 	beq.w	8001a1a <ADC_ConfigureBoostMode+0x13a>
 800190e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001912:	d06f      	beq.n	80019f4 <ADC_ConfigureBoostMode+0x114>
 8001914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001918:	d07f      	beq.n	8001a1a <ADC_ConfigureBoostMode+0x13a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800191a:	f7ff fd0f 	bl	800133c <HAL_GetREVID>
 800191e:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001922:	4298      	cmp	r0, r3
 8001924:	d84b      	bhi.n	80019be <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 8001926:	4a47      	ldr	r2, [pc, #284]	@ (8001a44 <ADC_ConfigureBoostMode+0x164>)
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001928:	6823      	ldr	r3, [r4, #0]
    if (freq > 20000000UL)
 800192a:	4295      	cmp	r5, r2
 800192c:	d92a      	bls.n	8001984 <ADC_ConfigureBoostMode+0xa4>
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001934:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001936:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001938:	4b43      	ldr	r3, [pc, #268]	@ (8001a48 <ADC_ConfigureBoostMode+0x168>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8001940:	d1dd      	bne.n	80018fe <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001942:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001946:	2100      	movs	r1, #0
 8001948:	f003 f856 	bl	80049f8 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800194c:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800194e:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8001950:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001954:	d06b      	beq.n	8001a2e <ADC_ConfigureBoostMode+0x14e>
 8001956:	d808      	bhi.n	800196a <ADC_ConfigureBoostMode+0x8a>
 8001958:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800195c:	d054      	beq.n	8001a08 <ADC_ConfigureBoostMode+0x128>
 800195e:	d916      	bls.n	800198e <ADC_ConfigureBoostMode+0xae>
 8001960:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001964:	d1d9      	bne.n	800191a <ADC_ConfigureBoostMode+0x3a>
        freq /= 32UL;
 8001966:	0945      	lsrs	r5, r0, #5
        break;
 8001968:	e7d7      	b.n	800191a <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 800196a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800196e:	d049      	beq.n	8001a04 <ADC_ConfigureBoostMode+0x124>
 8001970:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8001974:	d1d1      	bne.n	800191a <ADC_ConfigureBoostMode+0x3a>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001976:	f7ff fce1 	bl	800133c <HAL_GetREVID>
 800197a:	f241 0303 	movw	r3, #4099	@ 0x1003
 800197e:	4298      	cmp	r0, r3
 8001980:	d82e      	bhi.n	80019e0 <ADC_ConfigureBoostMode+0x100>
 8001982:	6823      	ldr	r3, [r4, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800198a:	609a      	str	r2, [r3, #8]
}
 800198c:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 800198e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001992:	d006      	beq.n	80019a2 <ADC_ConfigureBoostMode+0xc2>
 8001994:	d90a      	bls.n	80019ac <ADC_ConfigureBoostMode+0xcc>
 8001996:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800199a:	d002      	beq.n	80019a2 <ADC_ConfigureBoostMode+0xc2>
 800199c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80019a0:	d1bb      	bne.n	800191a <ADC_ConfigureBoostMode+0x3a>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80019a2:	0c9b      	lsrs	r3, r3, #18
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 80019aa:	e7b6      	b.n	800191a <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 80019ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80019b0:	d0f7      	beq.n	80019a2 <ADC_ConfigureBoostMode+0xc2>
 80019b2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80019b6:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80019ba:	d0f2      	beq.n	80019a2 <ADC_ConfigureBoostMode+0xc2>
 80019bc:	e7ad      	b.n	800191a <ADC_ConfigureBoostMode+0x3a>
    if (freq <= 6250000UL)
 80019be:	4a23      	ldr	r2, [pc, #140]	@ (8001a4c <ADC_ConfigureBoostMode+0x16c>)
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80019c0:	6823      	ldr	r3, [r4, #0]
    if (freq <= 6250000UL)
 80019c2:	4295      	cmp	r5, r2
 80019c4:	d911      	bls.n	80019ea <ADC_ConfigureBoostMode+0x10a>
    else if (freq <= 12500000UL)
 80019c6:	4a22      	ldr	r2, [pc, #136]	@ (8001a50 <ADC_ConfigureBoostMode+0x170>)
 80019c8:	4295      	cmp	r5, r2
 80019ca:	d91f      	bls.n	8001a0c <ADC_ConfigureBoostMode+0x12c>
    else if (freq <= 25000000UL)
 80019cc:	4a21      	ldr	r2, [pc, #132]	@ (8001a54 <ADC_ConfigureBoostMode+0x174>)
 80019ce:	4295      	cmp	r5, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80019d0:	689a      	ldr	r2, [r3, #8]
    else if (freq <= 25000000UL)
 80019d2:	d82e      	bhi.n	8001a32 <ADC_ConfigureBoostMode+0x152>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80019d4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80019d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019dc:	609a      	str	r2, [r3, #8]
}
 80019de:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 80019e0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a4c <ADC_ConfigureBoostMode+0x16c>)
 80019e2:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	d310      	bcc.n	8001a0c <ADC_ConfigureBoostMode+0x12c>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80019f0:	609a      	str	r2, [r3, #8]
}
 80019f2:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 80019f4:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80019f6:	f7ff fca1 	bl	800133c <HAL_GetREVID>
 80019fa:	f241 0303 	movw	r3, #4099	@ 0x1003
 80019fe:	4298      	cmp	r0, r3
 8001a00:	d8dd      	bhi.n	80019be <ADC_ConfigureBoostMode+0xde>
 8001a02:	e790      	b.n	8001926 <ADC_ConfigureBoostMode+0x46>
        freq /= 128UL;
 8001a04:	09c5      	lsrs	r5, r0, #7
        break;
 8001a06:	e788      	b.n	800191a <ADC_ConfigureBoostMode+0x3a>
        freq /= 16UL;
 8001a08:	0905      	lsrs	r5, r0, #4
        break;
 8001a0a:	e786      	b.n	800191a <ADC_ConfigureBoostMode+0x3a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001a12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a16:	609a      	str	r2, [r3, #8]
}
 8001a18:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001a1a:	0c1b      	lsrs	r3, r3, #16
 8001a1c:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001a20:	f7ff fc8c 	bl	800133c <HAL_GetREVID>
 8001a24:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001a28:	4298      	cmp	r0, r3
 8001a2a:	d8c8      	bhi.n	80019be <ADC_ConfigureBoostMode+0xde>
 8001a2c:	e77b      	b.n	8001926 <ADC_ConfigureBoostMode+0x46>
        freq /= 64UL;
 8001a2e:	0985      	lsrs	r5, r0, #6
        break;
 8001a30:	e773      	b.n	800191a <ADC_ConfigureBoostMode+0x3a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001a32:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001a36:	609a      	str	r2, [r3, #8]
}
 8001a38:	bd38      	pop	{r3, r4, r5, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40022000 	.word	0x40022000
 8001a40:	58026300 	.word	0x58026300
 8001a44:	01312d00 	.word	0x01312d00
 8001a48:	40022300 	.word	0x40022300
 8001a4c:	00bebc21 	.word	0x00bebc21
 8001a50:	017d7841 	.word	0x017d7841
 8001a54:	02faf081 	.word	0x02faf081

08001a58 <HAL_ADC_Init>:
{
 8001a58:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8001a5a:	2300      	movs	r3, #0
{
 8001a5c:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8001a5e:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8001a60:	2800      	cmp	r0, #0
 8001a62:	f000 80a9 	beq.w	8001bb8 <HAL_ADC_Init+0x160>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a66:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8001a68:	4604      	mov	r4, r0
 8001a6a:	2d00      	cmp	r5, #0
 8001a6c:	f000 80aa 	beq.w	8001bc4 <HAL_ADC_Init+0x16c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a70:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a72:	6893      	ldr	r3, [r2, #8]
 8001a74:	009e      	lsls	r6, r3, #2
 8001a76:	d503      	bpl.n	8001a80 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a78:	6891      	ldr	r1, [r2, #8]
 8001a7a:	4b71      	ldr	r3, [pc, #452]	@ (8001c40 <HAL_ADC_Init+0x1e8>)
 8001a7c:	400b      	ands	r3, r1
 8001a7e:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a80:	6893      	ldr	r3, [r2, #8]
 8001a82:	00dd      	lsls	r5, r3, #3
 8001a84:	d416      	bmi.n	8001ab4 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a86:	4b6f      	ldr	r3, [pc, #444]	@ (8001c44 <HAL_ADC_Init+0x1ec>)
 8001a88:	496f      	ldr	r1, [pc, #444]	@ (8001c48 <HAL_ADC_Init+0x1f0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8001a8c:	6890      	ldr	r0, [r2, #8]
 8001a8e:	099b      	lsrs	r3, r3, #6
 8001a90:	fba1 1303 	umull	r1, r3, r1, r3
 8001a94:	496d      	ldr	r1, [pc, #436]	@ (8001c4c <HAL_ADC_Init+0x1f4>)
 8001a96:	099b      	lsrs	r3, r3, #6
 8001a98:	4001      	ands	r1, r0
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001aa0:	6091      	str	r1, [r2, #8]
 8001aa2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001aa4:	9b01      	ldr	r3, [sp, #4]
 8001aa6:	b12b      	cbz	r3, 8001ab4 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8001aa8:	9b01      	ldr	r3, [sp, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001aae:	9b01      	ldr	r3, [sp, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f9      	bne.n	8001aa8 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ab4:	6893      	ldr	r3, [r2, #8]
 8001ab6:	00d8      	lsls	r0, r3, #3
 8001ab8:	f100 8082 	bmi.w	8001bc0 <HAL_ADC_Init+0x168>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001abc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8001abe:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac0:	f043 0310 	orr.w	r3, r3, #16
 8001ac4:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001ac8:	432b      	orrs	r3, r5
 8001aca:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001acc:	6893      	ldr	r3, [r2, #8]
 8001ace:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ad2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001ad4:	d16c      	bne.n	8001bb0 <HAL_ADC_Init+0x158>
 8001ad6:	06d9      	lsls	r1, r3, #27
 8001ad8:	d46a      	bmi.n	8001bb0 <HAL_ADC_Init+0x158>
    ADC_STATE_CLR_SET(hadc->State,
 8001ada:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001adc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ae6:	6893      	ldr	r3, [r2, #8]
 8001ae8:	07db      	lsls	r3, r3, #31
 8001aea:	d40c      	bmi.n	8001b06 <HAL_ADC_Init+0xae>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001aec:	4b58      	ldr	r3, [pc, #352]	@ (8001c50 <HAL_ADC_Init+0x1f8>)
 8001aee:	429a      	cmp	r2, r3
 8001af0:	f000 8081 	beq.w	8001bf6 <HAL_ADC_Init+0x19e>
 8001af4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d07c      	beq.n	8001bf6 <HAL_ADC_Init+0x19e>
 8001afc:	4b55      	ldr	r3, [pc, #340]	@ (8001c54 <HAL_ADC_Init+0x1fc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	07d9      	lsls	r1, r3, #31
 8001b02:	f140 8089 	bpl.w	8001c18 <HAL_ADC_Init+0x1c0>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001b06:	f7ff fc19 	bl	800133c <HAL_GetREVID>
 8001b0a:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001b0e:	68a1      	ldr	r1, [r4, #8]
 8001b10:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b12:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001b14:	d85c      	bhi.n	8001bd0 <HAL_ADC_Init+0x178>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b16:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b1a:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b1c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001b1e:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8001b22:	4302      	orrs	r2, r0
 8001b24:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d103      	bne.n	8001b32 <HAL_ADC_Init+0xda>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b2a:	6a23      	ldr	r3, [r4, #32]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b32:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001b34:	b123      	cbz	r3, 8001b40 <HAL_ADC_Init+0xe8>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b36:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001b3a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001b3c:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b3e:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	4945      	ldr	r1, [pc, #276]	@ (8001c58 <HAL_ADC_Init+0x200>)
 8001b44:	68d8      	ldr	r0, [r3, #12]
 8001b46:	4001      	ands	r1, r0
 8001b48:	4311      	orrs	r1, r2
 8001b4a:	60d9      	str	r1, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b52:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b54:	d11c      	bne.n	8001b90 <HAL_ADC_Init+0x138>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b56:	0712      	lsls	r2, r2, #28
 8001b58:	d41a      	bmi.n	8001b90 <HAL_ADC_Init+0x138>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b5a:	68d8      	ldr	r0, [r3, #12]
 8001b5c:	4a3f      	ldr	r2, [pc, #252]	@ (8001c5c <HAL_ADC_Init+0x204>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b5e:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b60:	4002      	ands	r2, r0
 8001b62:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8001b66:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8001b6c:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8001b70:	2a01      	cmp	r2, #1
 8001b72:	d053      	beq.n	8001c1c <HAL_ADC_Init+0x1c4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	f022 0201 	bic.w	r2, r2, #1
 8001b7a:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b7c:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8001b7e:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001b82:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8001b86:	430a      	orrs	r2, r1
 8001b88:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8001b8a:	f7ff fea9 	bl	80018e0 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b8e:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b90:	68e2      	ldr	r2, [r4, #12]
 8001b92:	2a01      	cmp	r2, #1
 8001b94:	d027      	beq.n	8001be6 <HAL_ADC_Init+0x18e>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b98:	f022 020f 	bic.w	r2, r2, #15
 8001b9c:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b9e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
}
 8001ba0:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ba2:	f023 0303 	bic.w	r3, r3, #3
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8001bac:	b002      	add	sp, #8
 8001bae:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001bb2:	f043 0310 	orr.w	r3, r3, #16
 8001bb6:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8001bb8:	2501      	movs	r5, #1
}
 8001bba:	4628      	mov	r0, r5
 8001bbc:	b002      	add	sp, #8
 8001bbe:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc0:	2500      	movs	r5, #0
 8001bc2:	e783      	b.n	8001acc <HAL_ADC_Init+0x74>
    HAL_ADC_MspInit(hadc);
 8001bc4:	f7ff f900 	bl	8000dc8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001bc8:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8001bca:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8001bce:	e74f      	b.n	8001a70 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001bd0:	2910      	cmp	r1, #16
 8001bd2:	d1a0      	bne.n	8001b16 <HAL_ADC_Init+0xbe>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bd4:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bd6:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bd8:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001bdc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001bde:	430a      	orrs	r2, r1
 8001be0:	f042 021c 	orr.w	r2, r2, #28
 8001be4:	e79f      	b.n	8001b26 <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001be6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001be8:	69a2      	ldr	r2, [r4, #24]
 8001bea:	f021 010f 	bic.w	r1, r1, #15
 8001bee:	3a01      	subs	r2, #1
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bf4:	e7d3      	b.n	8001b9e <HAL_ADC_Init+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bf6:	4a16      	ldr	r2, [pc, #88]	@ (8001c50 <HAL_ADC_Init+0x1f8>)
 8001bf8:	4b19      	ldr	r3, [pc, #100]	@ (8001c60 <HAL_ADC_Init+0x208>)
 8001bfa:	6892      	ldr	r2, [r2, #8]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	07de      	lsls	r6, r3, #31
 8001c00:	d481      	bmi.n	8001b06 <HAL_ADC_Init+0xae>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c02:	07d0      	lsls	r0, r2, #31
 8001c04:	f53f af7f 	bmi.w	8001b06 <HAL_ADC_Init+0xae>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c08:	4a16      	ldr	r2, [pc, #88]	@ (8001c64 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c0a:	6893      	ldr	r3, [r2, #8]
 8001c0c:	6861      	ldr	r1, [r4, #4]
 8001c0e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001c12:	430b      	orrs	r3, r1
 8001c14:	6093      	str	r3, [r2, #8]
}
 8001c16:	e776      	b.n	8001b06 <HAL_ADC_Init+0xae>
 8001c18:	4a13      	ldr	r2, [pc, #76]	@ (8001c68 <HAL_ADC_Init+0x210>)
 8001c1a:	e7f6      	b.n	8001c0a <HAL_ADC_Init+0x1b2>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001c1c:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8001c20:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8001c22:	3901      	subs	r1, #1
 8001c24:	6918      	ldr	r0, [r3, #16]
 8001c26:	4332      	orrs	r2, r6
 8001c28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001c2c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	490e      	ldr	r1, [pc, #56]	@ (8001c6c <HAL_ADC_Init+0x214>)
 8001c32:	4001      	ands	r1, r0
 8001c34:	430a      	orrs	r2, r1
 8001c36:	f042 0201 	orr.w	r2, r2, #1
 8001c3a:	611a      	str	r2, [r3, #16]
 8001c3c:	e79e      	b.n	8001b7c <HAL_ADC_Init+0x124>
 8001c3e:	bf00      	nop
 8001c40:	5fffffc0 	.word	0x5fffffc0
 8001c44:	24000004 	.word	0x24000004
 8001c48:	053e2d63 	.word	0x053e2d63
 8001c4c:	6fffffc0 	.word	0x6fffffc0
 8001c50:	40022000 	.word	0x40022000
 8001c54:	58026000 	.word	0x58026000
 8001c58:	fff0c003 	.word	0xfff0c003
 8001c5c:	ffffbffc 	.word	0xffffbffc
 8001c60:	40022100 	.word	0x40022100
 8001c64:	40022300 	.word	0x40022300
 8001c68:	58026300 	.word	0x58026300
 8001c6c:	fc00f81e 	.word	0xfc00f81e

08001c70 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001c70:	b530      	push	{r4, r5, lr}
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8001c72:	2300      	movs	r3, #0
{
 8001c74:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8001c76:	9301      	str	r3, [sp, #4]

  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8001c78:	2800      	cmp	r0, #0
 8001c7a:	d063      	beq.n	8001d44 <HAL_COMP_Init+0xd4>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8001c7c:	6802      	ldr	r2, [r0, #0]
 8001c7e:	4604      	mov	r4, r0
 8001c80:	6813      	ldr	r3, [r2, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	db5e      	blt.n	8001d44 <HAL_COMP_Init+0xd4>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8001c86:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8001c8a:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 808e 	beq.w	8001db0 <HAL_COMP_Init+0x140>
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
              hcomp->Init.NonInvertingInput  |  \
 8001c94:	69e1      	ldr	r1, [r4, #28]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8001c96:	6810      	ldr	r0, [r2, #0]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8001c98:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8001c9c:	f000 0004 	and.w	r0, r0, #4
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8001ca0:	432b      	orrs	r3, r5
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 8001ca2:	6815      	ldr	r5, [r2, #0]
              hcomp->Init.NonInvertingInput  |  \
 8001ca4:	430b      	orrs	r3, r1
              hcomp->Init.BlankingSrce       |  \
 8001ca6:	6961      	ldr	r1, [r4, #20]
 8001ca8:	430b      	orrs	r3, r1
              hcomp->Init.Hysteresis         |  \
 8001caa:	69a1      	ldr	r1, [r4, #24]
 8001cac:	430b      	orrs	r3, r1
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8001cae:	68a1      	ldr	r1, [r4, #8]
 8001cb0:	430b      	orrs	r3, r1
    MODIFY_REG(hcomp->Instance->CFGR,
 8001cb2:	4943      	ldr	r1, [pc, #268]	@ (8001dc0 <HAL_COMP_Init+0x150>)
 8001cb4:	4029      	ands	r1, r5
 8001cb6:	430b      	orrs	r3, r1
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8001cb8:	6861      	ldr	r1, [r4, #4]
    MODIFY_REG(hcomp->Instance->CFGR,
 8001cba:	6013      	str	r3, [r2, #0]
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8001cbc:	2910      	cmp	r1, #16
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8001cbe:	6813      	ldr	r3, [r2, #0]
 8001cc0:	bf0c      	ite	eq
 8001cc2:	f043 0310 	orreq.w	r3, r3, #16
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8001cc6:	f023 0310 	bicne.w	r3, r3, #16
 8001cca:	6013      	str	r3, [r2, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8001ccc:	6813      	ldr	r3, [r2, #0]
 8001cce:	075d      	lsls	r5, r3, #29
 8001cd0:	d501      	bpl.n	8001cd6 <HAL_COMP_Init+0x66>
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	d156      	bne.n	8001d84 <HAL_COMP_Init+0x114>
       wait_loop_index --;
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001cd6:	493b      	ldr	r1, [pc, #236]	@ (8001dc4 <HAL_COMP_Init+0x154>)
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8001cd8:	6a23      	ldr	r3, [r4, #32]
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001cda:	428a      	cmp	r2, r1
 8001cdc:	bf15      	itete	ne
 8001cde:	f46f 1200 	mvnne.w	r2, #2097152	@ 0x200000
 8001ce2:	f46f 1280 	mvneq.w	r2, #1048576	@ 0x100000
 8001ce6:	f44f 1100 	movne.w	r1, #2097152	@ 0x200000
 8001cea:	f44f 1180 	moveq.w	r1, #1048576	@ 0x100000
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8001cee:	0798      	lsls	r0, r3, #30
 8001cf0:	d02b      	beq.n	8001d4a <HAL_COMP_Init+0xda>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 8001cf2:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8001cf6:	f013 0f10 	tst.w	r3, #16
        SET_BIT(EXTI->RTSR1, exti_line);
 8001cfa:	6828      	ldr	r0, [r5, #0]
 8001cfc:	bf14      	ite	ne
 8001cfe:	4308      	orrne	r0, r1
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8001d00:	4010      	andeq	r0, r2
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8001d02:	f013 0f20 	tst.w	r3, #32
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8001d06:	6028      	str	r0, [r5, #0]
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8001d08:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8001d0c:	6868      	ldr	r0, [r5, #4]
 8001d0e:	bf14      	ite	ne
 8001d10:	4308      	orrne	r0, r1
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8001d12:	4010      	andeq	r0, r2
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8001d14:	f013 0f02 	tst.w	r3, #2
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8001d18:	6068      	str	r0, [r5, #4]
      WRITE_REG(EXTI->PR1, exti_line);
 8001d1a:	f04f 40b0 	mov.w	r0, #1476395008	@ 0x58000000
 8001d1e:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8001d22:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
 8001d26:	bf14      	ite	ne
 8001d28:	430d      	orrne	r5, r1
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8001d2a:	4015      	andeq	r5, r2
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8001d2c:	07db      	lsls	r3, r3, #31
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8001d2e:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8001d32:	d51f      	bpl.n	8001d74 <HAL_COMP_Init+0x104>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8001d34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d38:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d42:	e00e      	b.n	8001d62 <HAL_COMP_Init+0xf2>
    status = HAL_ERROR;
 8001d44:	2001      	movs	r0, #1
    }
   
  }
  
  return status;
}
 8001d46:	b003      	add	sp, #12
 8001d48:	bd30      	pop	{r4, r5, pc}
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8001d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d4e:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8001d52:	4011      	ands	r1, r2
 8001d54:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8001d58:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8001d62:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8001d66:	b913      	cbnz	r3, 8001d6e <HAL_COMP_Init+0xfe>
      hcomp->State = HAL_COMP_STATE_READY;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  HAL_StatusTypeDef status = HAL_OK;
 8001d6e:	2000      	movs	r0, #0
}
 8001d70:	b003      	add	sp, #12
 8001d72:	bd30      	pop	{r4, r5, pc}
        CLEAR_BIT(EXTI->IMR1, exti_line);
 8001d74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d78:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8001d82:	e7ee      	b.n	8001d62 <HAL_COMP_Init+0xf2>
     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d84:	4b10      	ldr	r3, [pc, #64]	@ (8001dc8 <HAL_COMP_Init+0x158>)
 8001d86:	4911      	ldr	r1, [pc, #68]	@ (8001dcc <HAL_COMP_Init+0x15c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	099b      	lsrs	r3, r3, #6
 8001d8c:	fba1 1303 	umull	r1, r3, r1, r3
 8001d90:	099b      	lsrs	r3, r3, #6
 8001d92:	3301      	adds	r3, #1
 8001d94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	9301      	str	r3, [sp, #4]
     while(wait_loop_index != 0UL)
 8001d9c:	9b01      	ldr	r3, [sp, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d099      	beq.n	8001cd6 <HAL_COMP_Init+0x66>
       wait_loop_index --;
 8001da2:	9b01      	ldr	r3, [sp, #4]
 8001da4:	3b01      	subs	r3, #1
 8001da6:	9301      	str	r3, [sp, #4]
     while(wait_loop_index != 0UL)
 8001da8:	9b01      	ldr	r3, [sp, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f9      	bne.n	8001da2 <HAL_COMP_Init+0x132>
 8001dae:	e792      	b.n	8001cd6 <HAL_COMP_Init+0x66>
      hcomp->Lock = HAL_UNLOCKED;
 8001db0:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
      COMP_CLEAR_ERRORCODE(hcomp);
 8001db4:	6281      	str	r1, [r0, #40]	@ 0x28
      HAL_COMP_MspInit(hcomp);
 8001db6:	f7ff f87b 	bl	8000eb0 <HAL_COMP_MspInit>
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8001dba:	6822      	ldr	r2, [r4, #0]
 8001dbc:	e76a      	b.n	8001c94 <HAL_COMP_Init+0x24>
 8001dbe:	bf00      	nop
 8001dc0:	f0e8cce1 	.word	0xf0e8cce1
 8001dc4:	5800380c 	.word	0x5800380c
 8001dc8:	24000004 	.word	0x24000004
 8001dcc:	053e2d63 	.word	0x053e2d63

08001dd0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd0:	4906      	ldr	r1, [pc, #24]	@ (8001dec <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd2:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd6:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001dd8:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dda:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ddc:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de0:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de4:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8001de6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001de8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00
 8001df0:	05fa0000 	.word	0x05fa0000

08001df4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e60 <HAL_NVIC_SetPriority+0x6c>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dfc:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dfe:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e06:	f1be 0f04 	cmp.w	lr, #4
 8001e0a:	bf28      	it	cs
 8001e0c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e10:	f1bc 0f06 	cmp.w	ip, #6
 8001e14:	d91a      	bls.n	8001e4c <HAL_NVIC_SetPriority+0x58>
 8001e16:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1e:	fa03 f30c 	lsl.w	r3, r3, ip
 8001e22:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001e2a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	fa03 f30e 	lsl.w	r3, r3, lr
 8001e30:	ea21 0303 	bic.w	r3, r1, r3
 8001e34:	fa03 f30c 	lsl.w	r3, r3, ip
 8001e38:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001e40:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001e42:	db06      	blt.n	8001e52 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e44:	4a07      	ldr	r2, [pc, #28]	@ (8001e64 <HAL_NVIC_SetPriority+0x70>)
 8001e46:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001e48:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e4c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4e:	4694      	mov	ip, r2
 8001e50:	e7e9      	b.n	8001e26 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e52:	f000 000f 	and.w	r0, r0, #15
 8001e56:	4a04      	ldr	r2, [pc, #16]	@ (8001e68 <HAL_NVIC_SetPriority+0x74>)
 8001e58:	5413      	strb	r3, [r2, r0]
 8001e5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e5e:	bf00      	nop
 8001e60:	e000ed00 	.word	0xe000ed00
 8001e64:	e000e400 	.word	0xe000e400
 8001e68:	e000ed14 	.word	0xe000ed14

08001e6c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	db07      	blt.n	8001e80 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e70:	2301      	movs	r3, #1
 8001e72:	f000 011f 	and.w	r1, r0, #31
 8001e76:	4a03      	ldr	r2, [pc, #12]	@ (8001e84 <HAL_NVIC_EnableIRQ+0x18>)
 8001e78:	0940      	lsrs	r0, r0, #5
 8001e7a:	408b      	lsls	r3, r1
 8001e7c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000e100 	.word	0xe000e100

08001e88 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e88:	1e43      	subs	r3, r0, #1
 8001e8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e8e:	d301      	bcc.n	8001e94 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e90:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001e92:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e94:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e98:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9a:	4905      	ldr	r1, [pc, #20]	@ (8001eb0 <HAL_SYSTICK_Config+0x28>)
 8001e9c:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea0:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ea2:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea4:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea8:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eaa:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001eb4:	b188      	cbz	r0, 8001eda <HAL_DAC_Init+0x26>
{
 8001eb6:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001eb8:	7903      	ldrb	r3, [r0, #4]
 8001eba:	4604      	mov	r4, r0
 8001ebc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001ec0:	b13b      	cbz	r3, 8001ed2 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ec2:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ec4:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ec6:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ec8:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8001eca:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ecc:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8001ece:	7122      	strb	r2, [r4, #4]
}
 8001ed0:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8001ed2:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8001ed4:	f7ff f82c 	bl	8000f30 <HAL_DAC_MspInit>
 8001ed8:	e7f3      	b.n	8001ec2 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8001eda:	2001      	movs	r0, #1
}
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop

08001ee0 <HAL_DAC_ConfigChannel>:
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001ee0:	2800      	cmp	r0, #0
 8001ee2:	f000 8086 	beq.w	8001ff2 <HAL_DAC_ConfigChannel+0x112>
{
 8001ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eea:	460d      	mov	r5, r1
  if ((hdac == NULL) || (sConfig == NULL))
 8001eec:	2900      	cmp	r1, #0
 8001eee:	d04d      	beq.n	8001f8c <HAL_DAC_ConfigChannel+0xac>
    }
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ef0:	7943      	ldrb	r3, [r0, #5]
 8001ef2:	4604      	mov	r4, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8001ef4:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d079      	beq.n	8001fee <HAL_DAC_ConfigChannel+0x10e>
 8001efa:	2301      	movs	r3, #1

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001efc:	2904      	cmp	r1, #4
 8001efe:	4616      	mov	r6, r2
  __HAL_LOCK(hdac);
 8001f00:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f02:	f04f 0302 	mov.w	r3, #2
 8001f06:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001f08:	d043      	beq.n	8001f92 <HAL_DAC_ConfigChannel+0xb2>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001f0a:	f002 0210 	and.w	r2, r2, #16

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001f0e:	6803      	ldr	r3, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001f10:	6928      	ldr	r0, [r5, #16]
 8001f12:	2801      	cmp	r0, #1
 8001f14:	d108      	bne.n	8001f28 <HAL_DAC_ConfigChannel+0x48>
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001f16:	201f      	movs	r0, #31
    tmpreg1 = hdac->Instance->CCR;
 8001f18:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001f1a:	4090      	lsls	r0, r2
 8001f1c:	ea26 0600 	bic.w	r6, r6, r0
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f20:	6968      	ldr	r0, [r5, #20]
 8001f22:	4090      	lsls	r0, r2
 8001f24:	4330      	orrs	r0, r6
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001f26:	6398      	str	r0, [r3, #56]	@ 0x38
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001f28:	2007      	movs	r0, #7
  tmpreg1 = hdac->Instance->MCR;
 8001f2a:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001f2c:	4090      	lsls	r0, r2
 8001f2e:	ea26 0600 	bic.w	r6, r6, r0
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001f32:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001f36:	2801      	cmp	r0, #1
 8001f38:	d055      	beq.n	8001fe6 <HAL_DAC_ConfigChannel+0x106>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001f3a:	2802      	cmp	r0, #2
 8001f3c:	d055      	beq.n	8001fea <HAL_DAC_ConfigChannel+0x10a>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001f3e:	fab7 f087 	clz	r0, r7
 8001f42:	0940      	lsrs	r0, r0, #5
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001f44:	4339      	orrs	r1, r7
 8001f46:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f48:	6868      	ldr	r0, [r5, #4]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001f4a:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f4e:	4091      	lsls	r1, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f50:	4090      	lsls	r0, r2
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001f52:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f54:	4331      	orrs	r1, r6
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f56:	2601      	movs	r6, #1
  hdac->Instance->MCR = tmpreg1;
 8001f58:	63d9      	str	r1, [r3, #60]	@ 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001f5a:	6819      	ldr	r1, [r3, #0]
 8001f5c:	ea21 0105 	bic.w	r1, r1, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001f60:	f640 75fe 	movw	r5, #4094	@ 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001f64:	6019      	str	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001f66:	4095      	lsls	r5, r2
  tmpreg1 = hdac->Instance->CR;
 8001f68:	6819      	ldr	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001f6a:	ea21 0105 	bic.w	r1, r1, r5

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f6e:	2500      	movs	r5, #0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f70:	4301      	orrs	r1, r0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001f72:	20c0      	movs	r0, #192	@ 0xc0
  hdac->Instance->CR = tmpreg1;
 8001f74:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001f76:	fa00 f102 	lsl.w	r1, r0, r2
 8001f7a:	681a      	ldr	r2, [r3, #0]

  /* Return function status */
  return status;
 8001f7c:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001f7e:	ea22 0201 	bic.w	r2, r2, r1
 8001f82:	601a      	str	r2, [r3, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8001f84:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 8001f86:	7165      	strb	r5, [r4, #5]
}
 8001f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001f8c:	2001      	movs	r0, #1
}
 8001f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 8001f92:	f7ff f9cd 	bl	8001330 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001f96:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001f98:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8001f9a:	b9be      	cbnz	r6, 8001fcc <HAL_DAC_ConfigChannel+0xec>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001f9c:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8002030 <HAL_DAC_ConfigChannel+0x150>
 8001fa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fa2:	ea12 0f08 	tst.w	r2, r8
 8001fa6:	d026      	beq.n	8001ff6 <HAL_DAC_ConfigChannel+0x116>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001fa8:	f7ff f9c2 	bl	8001330 <HAL_GetTick>
 8001fac:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001fae:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001fb0:	2801      	cmp	r0, #1
 8001fb2:	d9f5      	bls.n	8001fa0 <HAL_DAC_ConfigChannel+0xc0>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001fb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fb6:	ea12 0f08 	tst.w	r2, r8
 8001fba:	d0f1      	beq.n	8001fa0 <HAL_DAC_ConfigChannel+0xc0>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001fbc:	6923      	ldr	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001fbe:	2203      	movs	r2, #3
            return HAL_TIMEOUT;
 8001fc0:	2003      	movs	r0, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001fc2:	f043 0308 	orr.w	r3, r3, #8
 8001fc6:	6123      	str	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001fc8:	7122      	strb	r2, [r4, #4]
            return HAL_TIMEOUT;
 8001fca:	e7dd      	b.n	8001f88 <HAL_DAC_ConfigChannel+0xa8>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001fcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fce:	2a00      	cmp	r2, #0
 8001fd0:	da2a      	bge.n	8002028 <HAL_DAC_ConfigChannel+0x148>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001fd2:	f7ff f9ad 	bl	8001330 <HAL_GetTick>
 8001fd6:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001fd8:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001fda:	2801      	cmp	r0, #1
 8001fdc:	d9f6      	bls.n	8001fcc <HAL_DAC_ConfigChannel+0xec>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001fde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fe0:	2a00      	cmp	r2, #0
 8001fe2:	daf3      	bge.n	8001fcc <HAL_DAC_ConfigChannel+0xec>
 8001fe4:	e7ea      	b.n	8001fbc <HAL_DAC_ConfigChannel+0xdc>
    connectOnChip = 0x00000000UL;
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	e7ac      	b.n	8001f44 <HAL_DAC_ConfigChannel+0x64>
    connectOnChip = DAC_MCR_MODE1_0;
 8001fea:	2001      	movs	r0, #1
 8001fec:	e7aa      	b.n	8001f44 <HAL_DAC_ConfigChannel+0x64>
  __HAL_LOCK(hdac);
 8001fee:	2002      	movs	r0, #2
 8001ff0:	e7ca      	b.n	8001f88 <HAL_DAC_ConfigChannel+0xa8>
    return HAL_ERROR;
 8001ff2:	2001      	movs	r0, #1
}
 8001ff4:	4770      	bx	lr
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001ff6:	69aa      	ldr	r2, [r5, #24]
 8001ff8:	641a      	str	r2, [r3, #64]	@ 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001ffa:	f006 0210 	and.w	r2, r6, #16
 8001ffe:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 8002002:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8002004:	4090      	lsls	r0, r2
 8002006:	ea21 0100 	bic.w	r1, r1, r0
 800200a:	69e8      	ldr	r0, [r5, #28]
 800200c:	4090      	lsls	r0, r2
 800200e:	4301      	orrs	r1, r0
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002010:	20ff      	movs	r0, #255	@ 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002012:	6499      	str	r1, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002014:	4090      	lsls	r0, r2
 8002016:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002018:	ea21 0100 	bic.w	r1, r1, r0
 800201c:	6a28      	ldr	r0, [r5, #32]
 800201e:	4090      	lsls	r0, r2
 8002020:	4301      	orrs	r1, r0
 8002022:	64d9      	str	r1, [r3, #76]	@ 0x4c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002024:	6829      	ldr	r1, [r5, #0]
 8002026:	e773      	b.n	8001f10 <HAL_DAC_ConfigChannel+0x30>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002028:	69aa      	ldr	r2, [r5, #24]
 800202a:	645a      	str	r2, [r3, #68]	@ 0x44
 800202c:	e7e5      	b.n	8001ffa <HAL_DAC_ConfigChannel+0x11a>
 800202e:	bf00      	nop
 8002030:	20008000 	.word	0x20008000

08002034 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002034:	4936      	ldr	r1, [pc, #216]	@ (8002110 <DMA_CalcBaseAndBitshift+0xdc>)
{
 8002036:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002038:	6803      	ldr	r3, [r0, #0]
 800203a:	428b      	cmp	r3, r1
 800203c:	d033      	beq.n	80020a6 <DMA_CalcBaseAndBitshift+0x72>
 800203e:	3118      	adds	r1, #24
 8002040:	1a59      	subs	r1, r3, r1
 8002042:	fab1 f181 	clz	r1, r1
 8002046:	0949      	lsrs	r1, r1, #5
 8002048:	bb69      	cbnz	r1, 80020a6 <DMA_CalcBaseAndBitshift+0x72>
 800204a:	4832      	ldr	r0, [pc, #200]	@ (8002114 <DMA_CalcBaseAndBitshift+0xe0>)
 800204c:	4283      	cmp	r3, r0
 800204e:	d03e      	beq.n	80020ce <DMA_CalcBaseAndBitshift+0x9a>
 8002050:	3018      	adds	r0, #24
 8002052:	4283      	cmp	r3, r0
 8002054:	d03e      	beq.n	80020d4 <DMA_CalcBaseAndBitshift+0xa0>
 8002056:	3018      	adds	r0, #24
 8002058:	4283      	cmp	r3, r0
 800205a:	d034      	beq.n	80020c6 <DMA_CalcBaseAndBitshift+0x92>
 800205c:	3018      	adds	r0, #24
 800205e:	4283      	cmp	r3, r0
 8002060:	d03b      	beq.n	80020da <DMA_CalcBaseAndBitshift+0xa6>
 8002062:	3018      	adds	r0, #24
 8002064:	4283      	cmp	r3, r0
 8002066:	d03e      	beq.n	80020e6 <DMA_CalcBaseAndBitshift+0xb2>
 8002068:	3018      	adds	r0, #24
 800206a:	4283      	cmp	r3, r0
 800206c:	d02a      	beq.n	80020c4 <DMA_CalcBaseAndBitshift+0x90>
 800206e:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8002072:	4283      	cmp	r3, r0
 8002074:	d035      	beq.n	80020e2 <DMA_CalcBaseAndBitshift+0xae>
 8002076:	4928      	ldr	r1, [pc, #160]	@ (8002118 <DMA_CalcBaseAndBitshift+0xe4>)
 8002078:	428b      	cmp	r3, r1
 800207a:	d031      	beq.n	80020e0 <DMA_CalcBaseAndBitshift+0xac>
 800207c:	3118      	adds	r1, #24
 800207e:	428b      	cmp	r3, r1
 8002080:	d034      	beq.n	80020ec <DMA_CalcBaseAndBitshift+0xb8>
 8002082:	3118      	adds	r1, #24
 8002084:	428b      	cmp	r3, r1
 8002086:	d034      	beq.n	80020f2 <DMA_CalcBaseAndBitshift+0xbe>
 8002088:	3118      	adds	r1, #24
 800208a:	428b      	cmp	r3, r1
 800208c:	d034      	beq.n	80020f8 <DMA_CalcBaseAndBitshift+0xc4>
 800208e:	3118      	adds	r1, #24
 8002090:	428b      	cmp	r3, r1
 8002092:	d034      	beq.n	80020fe <DMA_CalcBaseAndBitshift+0xca>
 8002094:	3118      	adds	r1, #24
 8002096:	428b      	cmp	r3, r1
 8002098:	d034      	beq.n	8002104 <DMA_CalcBaseAndBitshift+0xd0>
 800209a:	3118      	adds	r1, #24
 800209c:	428b      	cmp	r3, r1
 800209e:	d034      	beq.n	800210a <DMA_CalcBaseAndBitshift+0xd6>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80020a0:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
 80020a4:	e011      	b.n	80020ca <DMA_CalcBaseAndBitshift+0x96>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	491c      	ldr	r1, [pc, #112]	@ (800211c <DMA_CalcBaseAndBitshift+0xe8>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80020aa:	481d      	ldr	r0, [pc, #116]	@ (8002120 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80020ac:	3b10      	subs	r3, #16
 80020ae:	fba1 1303 	umull	r1, r3, r1, r3
{
 80020b2:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80020b4:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80020b6:	4c1b      	ldr	r4, [pc, #108]	@ (8002124 <DMA_CalcBaseAndBitshift+0xf0>)
 80020b8:	5ce1      	ldrb	r1, [r4, r3]
  }

  return hdma->StreamBaseAddress;
}
 80020ba:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80020be:	e9c2 0116 	strd	r0, r1, [r2, #88]	@ 0x58
}
 80020c2:	4770      	bx	lr
 80020c4:	2116      	movs	r1, #22
 80020c6:	4818      	ldr	r0, [pc, #96]	@ (8002128 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80020c8:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80020ca:	6590      	str	r0, [r2, #88]	@ 0x58
}
 80020cc:	4770      	bx	lr
 80020ce:	2110      	movs	r1, #16
 80020d0:	4813      	ldr	r0, [pc, #76]	@ (8002120 <DMA_CalcBaseAndBitshift+0xec>)
 80020d2:	e7f9      	b.n	80020c8 <DMA_CalcBaseAndBitshift+0x94>
 80020d4:	2116      	movs	r1, #22
 80020d6:	4812      	ldr	r0, [pc, #72]	@ (8002120 <DMA_CalcBaseAndBitshift+0xec>)
 80020d8:	e7f6      	b.n	80020c8 <DMA_CalcBaseAndBitshift+0x94>
 80020da:	2106      	movs	r1, #6
 80020dc:	4812      	ldr	r0, [pc, #72]	@ (8002128 <DMA_CalcBaseAndBitshift+0xf4>)
 80020de:	e7f3      	b.n	80020c8 <DMA_CalcBaseAndBitshift+0x94>
 80020e0:	2106      	movs	r1, #6
 80020e2:	4812      	ldr	r0, [pc, #72]	@ (800212c <DMA_CalcBaseAndBitshift+0xf8>)
 80020e4:	e7f0      	b.n	80020c8 <DMA_CalcBaseAndBitshift+0x94>
 80020e6:	2110      	movs	r1, #16
 80020e8:	480f      	ldr	r0, [pc, #60]	@ (8002128 <DMA_CalcBaseAndBitshift+0xf4>)
 80020ea:	e7ed      	b.n	80020c8 <DMA_CalcBaseAndBitshift+0x94>
 80020ec:	2110      	movs	r1, #16
 80020ee:	480f      	ldr	r0, [pc, #60]	@ (800212c <DMA_CalcBaseAndBitshift+0xf8>)
 80020f0:	e7ea      	b.n	80020c8 <DMA_CalcBaseAndBitshift+0x94>
 80020f2:	2116      	movs	r1, #22
 80020f4:	480d      	ldr	r0, [pc, #52]	@ (800212c <DMA_CalcBaseAndBitshift+0xf8>)
 80020f6:	e7e7      	b.n	80020c8 <DMA_CalcBaseAndBitshift+0x94>
 80020f8:	2100      	movs	r1, #0
 80020fa:	480d      	ldr	r0, [pc, #52]	@ (8002130 <DMA_CalcBaseAndBitshift+0xfc>)
 80020fc:	e7e4      	b.n	80020c8 <DMA_CalcBaseAndBitshift+0x94>
 80020fe:	2106      	movs	r1, #6
 8002100:	480b      	ldr	r0, [pc, #44]	@ (8002130 <DMA_CalcBaseAndBitshift+0xfc>)
 8002102:	e7e1      	b.n	80020c8 <DMA_CalcBaseAndBitshift+0x94>
 8002104:	2110      	movs	r1, #16
 8002106:	480a      	ldr	r0, [pc, #40]	@ (8002130 <DMA_CalcBaseAndBitshift+0xfc>)
 8002108:	e7de      	b.n	80020c8 <DMA_CalcBaseAndBitshift+0x94>
 800210a:	2116      	movs	r1, #22
 800210c:	4808      	ldr	r0, [pc, #32]	@ (8002130 <DMA_CalcBaseAndBitshift+0xfc>)
 800210e:	e7db      	b.n	80020c8 <DMA_CalcBaseAndBitshift+0x94>
 8002110:	40020010 	.word	0x40020010
 8002114:	40020040 	.word	0x40020040
 8002118:	40020428 	.word	0x40020428
 800211c:	aaaaaaab 	.word	0xaaaaaaab
 8002120:	40020000 	.word	0x40020000
 8002124:	080059a4 	.word	0x080059a4
 8002128:	40020004 	.word	0x40020004
 800212c:	40020400 	.word	0x40020400
 8002130:	40020404 	.word	0x40020404

08002134 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002134:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002136:	4b27      	ldr	r3, [pc, #156]	@ (80021d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8002138:	4927      	ldr	r1, [pc, #156]	@ (80021d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 800213a:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800213c:	4d27      	ldr	r5, [pc, #156]	@ (80021dc <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 800213e:	4c28      	ldr	r4, [pc, #160]	@ (80021e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8002140:	42aa      	cmp	r2, r5
 8002142:	bf18      	it	ne
 8002144:	429a      	cmpne	r2, r3
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	428a      	cmp	r2, r1
 800214e:	bf08      	it	eq
 8002150:	f043 0301 	orreq.w	r3, r3, #1
 8002154:	3128      	adds	r1, #40	@ 0x28
 8002156:	42a2      	cmp	r2, r4
 8002158:	bf08      	it	eq
 800215a:	f043 0301 	orreq.w	r3, r3, #1
 800215e:	3428      	adds	r4, #40	@ 0x28
 8002160:	428a      	cmp	r2, r1
 8002162:	bf08      	it	eq
 8002164:	f043 0301 	orreq.w	r3, r3, #1
 8002168:	3128      	adds	r1, #40	@ 0x28
 800216a:	42a2      	cmp	r2, r4
 800216c:	bf08      	it	eq
 800216e:	f043 0301 	orreq.w	r3, r3, #1
 8002172:	428a      	cmp	r2, r1
 8002174:	bf08      	it	eq
 8002176:	f043 0301 	orreq.w	r3, r3, #1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800217a:	b2d1      	uxtb	r1, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800217c:	b913      	cbnz	r3, 8002184 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 800217e:	4b19      	ldr	r3, [pc, #100]	@ (80021e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8002180:	429a      	cmp	r2, r3
 8002182:	d112      	bne.n	80021aa <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002184:	f1a1 0308 	sub.w	r3, r1, #8
 8002188:	4917      	ldr	r1, [pc, #92]	@ (80021e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800218a:	4a18      	ldr	r2, [pc, #96]	@ (80021ec <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800218c:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002190:	2101      	movs	r1, #1
 8002192:	4c17      	ldr	r4, [pc, #92]	@ (80021f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002194:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002198:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800219c:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800219e:	4099      	lsls	r1, r3
 80021a0:	6681      	str	r1, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80021a2:	e9c0 2418 	strd	r2, r4, [r0, #96]	@ 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80021a6:	bc30      	pop	{r4, r5}
 80021a8:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80021aa:	f1a1 0310 	sub.w	r3, r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80021ae:	4911      	ldr	r1, [pc, #68]	@ (80021f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80021b0:	4c11      	ldr	r4, [pc, #68]	@ (80021f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80021b2:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80021b4:	fba4 4303 	umull	r4, r3, r4, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80021b8:	29a8      	cmp	r1, #168	@ 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80021ba:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80021be:	d800      	bhi.n	80021c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 80021c0:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80021c2:	4a0e      	ldr	r2, [pc, #56]	@ (80021fc <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80021c4:	f003 041f 	and.w	r4, r3, #31
 80021c8:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80021ca:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80021cc:	40a1      	lsls	r1, r4
 80021ce:	4c0c      	ldr	r4, [pc, #48]	@ (8002200 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80021d0:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80021d2:	e7e5      	b.n	80021a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 80021d4:	58025408 	.word	0x58025408
 80021d8:	58025430 	.word	0x58025430
 80021dc:	5802541c 	.word	0x5802541c
 80021e0:	58025444 	.word	0x58025444
 80021e4:	58025494 	.word	0x58025494
 80021e8:	cccccccd 	.word	0xcccccccd
 80021ec:	16009600 	.word	0x16009600
 80021f0:	58025880 	.word	0x58025880
 80021f4:	bffdfbf0 	.word	0xbffdfbf0
 80021f8:	aaaaaaab 	.word	0xaaaaaaab
 80021fc:	10008200 	.word	0x10008200
 8002200:	40020880 	.word	0x40020880

08002204 <HAL_DMA_Init>:
{
 8002204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002208:	4605      	mov	r5, r0
 800220a:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 800220c:	f7ff f890 	bl	8001330 <HAL_GetTick>
  if(hdma == NULL)
 8002210:	2d00      	cmp	r5, #0
 8002212:	f000 8203 	beq.w	800261c <HAL_DMA_Init+0x418>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002216:	682c      	ldr	r4, [r5, #0]
 8002218:	4606      	mov	r6, r0
 800221a:	4b65      	ldr	r3, [pc, #404]	@ (80023b0 <HAL_DMA_Init+0x1ac>)
 800221c:	429c      	cmp	r4, r3
 800221e:	f000 80bc 	beq.w	800239a <HAL_DMA_Init+0x196>
 8002222:	3318      	adds	r3, #24
 8002224:	429c      	cmp	r4, r3
 8002226:	f000 80b8 	beq.w	800239a <HAL_DMA_Init+0x196>
 800222a:	3318      	adds	r3, #24
 800222c:	429c      	cmp	r4, r3
 800222e:	f000 80b4 	beq.w	800239a <HAL_DMA_Init+0x196>
 8002232:	3318      	adds	r3, #24
 8002234:	429c      	cmp	r4, r3
 8002236:	f000 80b0 	beq.w	800239a <HAL_DMA_Init+0x196>
 800223a:	3318      	adds	r3, #24
 800223c:	429c      	cmp	r4, r3
 800223e:	f000 80ac 	beq.w	800239a <HAL_DMA_Init+0x196>
 8002242:	3318      	adds	r3, #24
 8002244:	429c      	cmp	r4, r3
 8002246:	f000 80a8 	beq.w	800239a <HAL_DMA_Init+0x196>
 800224a:	3318      	adds	r3, #24
 800224c:	429c      	cmp	r4, r3
 800224e:	f000 80a4 	beq.w	800239a <HAL_DMA_Init+0x196>
 8002252:	3318      	adds	r3, #24
 8002254:	429c      	cmp	r4, r3
 8002256:	f000 80a0 	beq.w	800239a <HAL_DMA_Init+0x196>
 800225a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800225e:	429c      	cmp	r4, r3
 8002260:	f000 809b 	beq.w	800239a <HAL_DMA_Init+0x196>
 8002264:	3318      	adds	r3, #24
 8002266:	429c      	cmp	r4, r3
 8002268:	f000 8097 	beq.w	800239a <HAL_DMA_Init+0x196>
 800226c:	3318      	adds	r3, #24
 800226e:	429c      	cmp	r4, r3
 8002270:	f000 8093 	beq.w	800239a <HAL_DMA_Init+0x196>
 8002274:	3318      	adds	r3, #24
 8002276:	429c      	cmp	r4, r3
 8002278:	f000 808f 	beq.w	800239a <HAL_DMA_Init+0x196>
 800227c:	3318      	adds	r3, #24
 800227e:	429c      	cmp	r4, r3
 8002280:	f000 808b 	beq.w	800239a <HAL_DMA_Init+0x196>
 8002284:	3318      	adds	r3, #24
 8002286:	429c      	cmp	r4, r3
 8002288:	f000 8087 	beq.w	800239a <HAL_DMA_Init+0x196>
 800228c:	3318      	adds	r3, #24
 800228e:	429c      	cmp	r4, r3
 8002290:	f000 8083 	beq.w	800239a <HAL_DMA_Init+0x196>
 8002294:	3318      	adds	r3, #24
 8002296:	429c      	cmp	r4, r3
 8002298:	d07f      	beq.n	800239a <HAL_DMA_Init+0x196>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800229a:	4946      	ldr	r1, [pc, #280]	@ (80023b4 <HAL_DMA_Init+0x1b0>)
 800229c:	4a46      	ldr	r2, [pc, #280]	@ (80023b8 <HAL_DMA_Init+0x1b4>)
 800229e:	4b47      	ldr	r3, [pc, #284]	@ (80023bc <HAL_DMA_Init+0x1b8>)
 80022a0:	eba4 0901 	sub.w	r9, r4, r1
 80022a4:	1aa2      	subs	r2, r4, r2
 80022a6:	4f46      	ldr	r7, [pc, #280]	@ (80023c0 <HAL_DMA_Init+0x1bc>)
 80022a8:	eba4 0803 	sub.w	r8, r4, r3
 80022ac:	fab9 f989 	clz	r9, r9
 80022b0:	3314      	adds	r3, #20
 80022b2:	fab2 f282 	clz	r2, r2
 80022b6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80022ba:	fab8 f888 	clz	r8, r8
 80022be:	eba4 0a03 	sub.w	sl, r4, r3
 80022c2:	0952      	lsrs	r2, r2, #5
 80022c4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80022c8:	1be7      	subs	r7, r4, r7
 80022ca:	faba fa8a 	clz	sl, sl
 80022ce:	ea49 0102 	orr.w	r1, r9, r2
 80022d2:	4e3c      	ldr	r6, [pc, #240]	@ (80023c4 <HAL_DMA_Init+0x1c0>)
 80022d4:	fab7 f787 	clz	r7, r7
 80022d8:	483b      	ldr	r0, [pc, #236]	@ (80023c8 <HAL_DMA_Init+0x1c4>)
 80022da:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80022de:	ea48 0101 	orr.w	r1, r8, r1
 80022e2:	1ba6      	subs	r6, r4, r6
 80022e4:	eba4 0b00 	sub.w	fp, r4, r0
 80022e8:	097f      	lsrs	r7, r7, #5
 80022ea:	ea4a 0101 	orr.w	r1, sl, r1
 80022ee:	fab6 f686 	clz	r6, r6
 80022f2:	3014      	adds	r0, #20
 80022f4:	fabb fb8b 	clz	fp, fp
 80022f8:	4339      	orrs	r1, r7
 80022fa:	0976      	lsrs	r6, r6, #5
 80022fc:	1a23      	subs	r3, r4, r0
 80022fe:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8002302:	4331      	orrs	r1, r6
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	ea5b 0101 	orrs.w	r1, fp, r1
 800230c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8002310:	9301      	str	r3, [sp, #4]
 8002312:	d102      	bne.n	800231a <HAL_DMA_Init+0x116>
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 81d4 	beq.w	80026c2 <HAL_DMA_Init+0x4be>
    hdma->State = HAL_DMA_STATE_BUSY;
 800231a:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800231c:	f8df c0b4 	ldr.w	ip, [pc, #180]	@ 80023d4 <HAL_DMA_Init+0x1d0>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002320:	f885 1035 	strb.w	r1, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8002324:	2100      	movs	r1, #0
 8002326:	f885 1034 	strb.w	r1, [r5, #52]	@ 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800232a:	6821      	ldr	r1, [r4, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800232c:	ea01 0c0c 	and.w	ip, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002330:	68a9      	ldr	r1, [r5, #8]
 8002332:	2940      	cmp	r1, #64	@ 0x40
 8002334:	f000 81c2 	beq.w	80026bc <HAL_DMA_Init+0x4b8>
 8002338:	f1a1 0180 	sub.w	r1, r1, #128	@ 0x80
 800233c:	fab1 f181 	clz	r1, r1
 8002340:	0949      	lsrs	r1, r1, #5
 8002342:	ea4f 3e81 	mov.w	lr, r1, lsl #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002346:	6929      	ldr	r1, [r5, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002348:	68e8      	ldr	r0, [r5, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800234a:	08c9      	lsrs	r1, r1, #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800234c:	4b1f      	ldr	r3, [pc, #124]	@ (80023cc <HAL_DMA_Init+0x1c8>)
 800234e:	9200      	str	r2, [sp, #0]
 8002350:	ea41 00d0 	orr.w	r0, r1, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002354:	6969      	ldr	r1, [r5, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002356:	4423      	add	r3, r4
 8002358:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800235c:	69a9      	ldr	r1, [r5, #24]
 800235e:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002362:	69e9      	ldr	r1, [r5, #28]
 8002364:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002368:	6a29      	ldr	r1, [r5, #32]
 800236a:	ea40 1111 	orr.w	r1, r0, r1, lsr #4
 800236e:	ea41 010c 	orr.w	r1, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002372:	ea4e 0101 	orr.w	r1, lr, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002376:	6021      	str	r1, [r4, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002378:	4915      	ldr	r1, [pc, #84]	@ (80023d0 <HAL_DMA_Init+0x1cc>)
 800237a:	fba1 0103 	umull	r0, r1, r1, r3
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800237e:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002380:	0909      	lsrs	r1, r1, #4
 8002382:	0089      	lsls	r1, r1, #2
 8002384:	65e9      	str	r1, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002386:	f7ff fe55 	bl	8002034 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800238a:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800238c:	9a00      	ldr	r2, [sp, #0]
 800238e:	f001 041f 	and.w	r4, r1, #31
 8002392:	2101      	movs	r1, #1
 8002394:	40a1      	lsls	r1, r4
 8002396:	6041      	str	r1, [r0, #4]
 8002398:	e0e2      	b.n	8002560 <HAL_DMA_Init+0x35c>
    hdma->State = HAL_DMA_STATE_BUSY;
 800239a:	2302      	movs	r3, #2
 800239c:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80023a0:	2300      	movs	r3, #0
 80023a2:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	f023 0301 	bic.w	r3, r3, #1
 80023ac:	6023      	str	r3, [r4, #0]
 80023ae:	e01a      	b.n	80023e6 <HAL_DMA_Init+0x1e2>
 80023b0:	40020010 	.word	0x40020010
 80023b4:	58025408 	.word	0x58025408
 80023b8:	5802541c 	.word	0x5802541c
 80023bc:	58025430 	.word	0x58025430
 80023c0:	58025458 	.word	0x58025458
 80023c4:	5802546c 	.word	0x5802546c
 80023c8:	58025480 	.word	0x58025480
 80023cc:	a7fdabf8 	.word	0xa7fdabf8
 80023d0:	cccccccd 	.word	0xcccccccd
 80023d4:	fffe000f 	.word	0xfffe000f
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023d8:	f7fe ffaa 	bl	8001330 <HAL_GetTick>
 80023dc:	1b80      	subs	r0, r0, r6
 80023de:	2805      	cmp	r0, #5
 80023e0:	f200 8117 	bhi.w	8002612 <HAL_DMA_Init+0x40e>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023e4:	682c      	ldr	r4, [r5, #0]
 80023e6:	6823      	ldr	r3, [r4, #0]
 80023e8:	07df      	lsls	r7, r3, #31
 80023ea:	d4f5      	bmi.n	80023d8 <HAL_DMA_Init+0x1d4>
    registerValue |=  hdma->Init.Direction           |
 80023ec:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f0:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 80023f2:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f4:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80023f6:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f8:	430b      	orrs	r3, r1
 80023fa:	6969      	ldr	r1, [r5, #20]
 80023fc:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023fe:	69e9      	ldr	r1, [r5, #28]
 8002400:	4313      	orrs	r3, r2
 8002402:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002404:	49b2      	ldr	r1, [pc, #712]	@ (80026d0 <HAL_DMA_Init+0x4cc>)
 8002406:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8002408:	6a28      	ldr	r0, [r5, #32]
 800240a:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800240c:	48b1      	ldr	r0, [pc, #708]	@ (80026d4 <HAL_DMA_Init+0x4d0>)
    registerValue |=  hdma->Init.Direction           |
 800240e:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002410:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8002412:	2904      	cmp	r1, #4
 8002414:	f000 8117 	beq.w	8002646 <HAL_DMA_Init+0x442>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002418:	6806      	ldr	r6, [r0, #0]
 800241a:	48af      	ldr	r0, [pc, #700]	@ (80026d8 <HAL_DMA_Init+0x4d4>)
 800241c:	4030      	ands	r0, r6
 800241e:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8002422:	f080 80d5 	bcs.w	80025d0 <HAL_DMA_Init+0x3cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002426:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002428:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800242a:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 800242e:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002430:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002432:	4628      	mov	r0, r5
 8002434:	f7ff fdfe 	bl	8002034 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002438:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 800243a:	233f      	movs	r3, #63	@ 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800243c:	49a7      	ldr	r1, [pc, #668]	@ (80026dc <HAL_DMA_Init+0x4d8>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800243e:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002442:	4fa7      	ldr	r7, [pc, #668]	@ (80026e0 <HAL_DMA_Init+0x4dc>)
 8002444:	4ea7      	ldr	r6, [pc, #668]	@ (80026e4 <HAL_DMA_Init+0x4e0>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002446:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002448:	4aa7      	ldr	r2, [pc, #668]	@ (80026e8 <HAL_DMA_Init+0x4e4>)
 800244a:	1be7      	subs	r7, r4, r7
 800244c:	1ba6      	subs	r6, r4, r6
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800244e:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002450:	eba4 0902 	sub.w	r9, r4, r2
 8002454:	4ba5      	ldr	r3, [pc, #660]	@ (80026ec <HAL_DMA_Init+0x4e8>)
 8002456:	3214      	adds	r2, #20
 8002458:	fab9 f989 	clz	r9, r9
 800245c:	48a4      	ldr	r0, [pc, #656]	@ (80026f0 <HAL_DMA_Init+0x4ec>)
 800245e:	eba4 0803 	sub.w	r8, r4, r3
 8002462:	4ba4      	ldr	r3, [pc, #656]	@ (80026f4 <HAL_DMA_Init+0x4f0>)
 8002464:	1aa2      	subs	r2, r4, r2
 8002466:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800246a:	429c      	cmp	r4, r3
 800246c:	bf18      	it	ne
 800246e:	428c      	cmpne	r4, r1
 8002470:	f103 0318 	add.w	r3, r3, #24
 8002474:	fab2 f282 	clz	r2, r2
 8002478:	fab8 f888 	clz	r8, r8
 800247c:	bf0c      	ite	eq
 800247e:	2101      	moveq	r1, #1
 8002480:	2100      	movne	r1, #0
 8002482:	0952      	lsrs	r2, r2, #5
 8002484:	fab7 f787 	clz	r7, r7
 8002488:	429c      	cmp	r4, r3
 800248a:	bf08      	it	eq
 800248c:	f041 0101 	orreq.w	r1, r1, #1
 8002490:	3318      	adds	r3, #24
 8002492:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8002496:	eba4 0b00 	sub.w	fp, r4, r0
 800249a:	429c      	cmp	r4, r3
 800249c:	bf08      	it	eq
 800249e:	f041 0101 	orreq.w	r1, r1, #1
 80024a2:	3318      	adds	r3, #24
 80024a4:	097f      	lsrs	r7, r7, #5
 80024a6:	fab6 f686 	clz	r6, r6
 80024aa:	429c      	cmp	r4, r3
 80024ac:	bf08      	it	eq
 80024ae:	f041 0101 	orreq.w	r1, r1, #1
 80024b2:	3318      	adds	r3, #24
 80024b4:	3014      	adds	r0, #20
 80024b6:	0976      	lsrs	r6, r6, #5
 80024b8:	429c      	cmp	r4, r3
 80024ba:	bf08      	it	eq
 80024bc:	f041 0101 	orreq.w	r1, r1, #1
 80024c0:	3318      	adds	r3, #24
 80024c2:	fabb fb8b 	clz	fp, fp
 80024c6:	429c      	cmp	r4, r3
 80024c8:	bf08      	it	eq
 80024ca:	f041 0101 	orreq.w	r1, r1, #1
 80024ce:	3318      	adds	r3, #24
 80024d0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80024d4:	429c      	cmp	r4, r3
 80024d6:	bf08      	it	eq
 80024d8:	f041 0101 	orreq.w	r1, r1, #1
 80024dc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80024e0:	429c      	cmp	r4, r3
 80024e2:	bf08      	it	eq
 80024e4:	f041 0101 	orreq.w	r1, r1, #1
 80024e8:	3318      	adds	r3, #24
 80024ea:	429c      	cmp	r4, r3
 80024ec:	bf08      	it	eq
 80024ee:	f041 0101 	orreq.w	r1, r1, #1
 80024f2:	3318      	adds	r3, #24
 80024f4:	429c      	cmp	r4, r3
 80024f6:	bf08      	it	eq
 80024f8:	f041 0101 	orreq.w	r1, r1, #1
 80024fc:	3318      	adds	r3, #24
 80024fe:	429c      	cmp	r4, r3
 8002500:	bf08      	it	eq
 8002502:	f041 0101 	orreq.w	r1, r1, #1
 8002506:	3318      	adds	r3, #24
 8002508:	429c      	cmp	r4, r3
 800250a:	bf08      	it	eq
 800250c:	f041 0101 	orreq.w	r1, r1, #1
 8002510:	3318      	adds	r3, #24
 8002512:	429c      	cmp	r4, r3
 8002514:	bf08      	it	eq
 8002516:	f041 0101 	orreq.w	r1, r1, #1
 800251a:	3318      	adds	r3, #24
 800251c:	429c      	cmp	r4, r3
 800251e:	bf08      	it	eq
 8002520:	f041 0101 	orreq.w	r1, r1, #1
 8002524:	3318      	adds	r3, #24
 8002526:	429c      	cmp	r4, r3
 8002528:	bf08      	it	eq
 800252a:	f041 0101 	orreq.w	r1, r1, #1
 800252e:	4b72      	ldr	r3, [pc, #456]	@ (80026f8 <HAL_DMA_Init+0x4f4>)
 8002530:	ea49 0101 	orr.w	r1, r9, r1
 8002534:	eba4 0a03 	sub.w	sl, r4, r3
 8002538:	1a23      	subs	r3, r4, r0
 800253a:	4311      	orrs	r1, r2
 800253c:	faba fa8a 	clz	sl, sl
 8002540:	fab3 f383 	clz	r3, r3
 8002544:	ea48 0101 	orr.w	r1, r8, r1
 8002548:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	ea4a 0101 	orr.w	r1, sl, r1
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	4339      	orrs	r1, r7
 8002556:	4331      	orrs	r1, r6
 8002558:	ea5b 0101 	orrs.w	r1, fp, r1
 800255c:	d100      	bne.n	8002560 <HAL_DMA_Init+0x35c>
 800255e:	b37b      	cbz	r3, 80025c0 <HAL_DMA_Init+0x3bc>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002560:	4628      	mov	r0, r5
 8002562:	9200      	str	r2, [sp, #0]
 8002564:	f7ff fde6 	bl	8002134 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002568:	68a9      	ldr	r1, [r5, #8]
 800256a:	9a00      	ldr	r2, [sp, #0]
 800256c:	2980      	cmp	r1, #128	@ 0x80
 800256e:	d05e      	beq.n	800262e <HAL_DMA_Init+0x42a>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002570:	6868      	ldr	r0, [r5, #4]
 8002572:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002574:	b2c4      	uxtb	r4, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002576:	3801      	subs	r0, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002578:	e9d5 c119 	ldrd	ip, r1, [r5, #100]	@ 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800257c:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800257e:	601c      	str	r4, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002580:	f8cc 1004 	str.w	r1, [ip, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002584:	d85a      	bhi.n	800263c <HAL_DMA_Init+0x438>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002586:	ea49 090a 	orr.w	r9, r9, sl
 800258a:	9b01      	ldr	r3, [sp, #4]
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800258c:	1e60      	subs	r0, r4, #1
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800258e:	ea48 0809 	orr.w	r8, r8, r9
 8002592:	ea47 0708 	orr.w	r7, r7, r8
 8002596:	433e      	orrs	r6, r7
 8002598:	ea43 0a06 	orr.w	sl, r3, r6
 800259c:	ea5b 0a0a 	orrs.w	sl, fp, sl
 80025a0:	d102      	bne.n	80025a8 <HAL_DMA_Init+0x3a4>
 80025a2:	2a00      	cmp	r2, #0
 80025a4:	f000 8085 	beq.w	80026b2 <HAL_DMA_Init+0x4ae>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80025a8:	4a54      	ldr	r2, [pc, #336]	@ (80026fc <HAL_DMA_Init+0x4f8>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80025aa:	4955      	ldr	r1, [pc, #340]	@ (8002700 <HAL_DMA_Init+0x4fc>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80025ac:	4422      	add	r2, r4
 80025ae:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80025b0:	2301      	movs	r3, #1
 80025b2:	4083      	lsls	r3, r0
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80025b4:	2000      	movs	r0, #0
 80025b6:	e9c5 211b 	strd	r2, r1, [r5, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80025ba:	676b      	str	r3, [r5, #116]	@ 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80025bc:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025be:	604b      	str	r3, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80025c2:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c4:	6568      	str	r0, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80025c6:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
}
 80025ca:	b003      	add	sp, #12
 80025cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80025d0:	6868      	ldr	r0, [r5, #4]
 80025d2:	f1a0 0629 	sub.w	r6, r0, #41	@ 0x29
 80025d6:	2e1f      	cmp	r6, #31
 80025d8:	d924      	bls.n	8002624 <HAL_DMA_Init+0x420>
 80025da:	384f      	subs	r0, #79	@ 0x4f
 80025dc:	2803      	cmp	r0, #3
 80025de:	d801      	bhi.n	80025e4 <HAL_DMA_Init+0x3e0>
        registerValue |= DMA_SxCR_TRBUFF;
 80025e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80025e4:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025e6:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80025e8:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025ea:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80025ee:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025f2:	f47f af1d 	bne.w	8002430 <HAL_DMA_Init+0x22c>
 80025f6:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 80025f8:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80025fa:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025fc:	2800      	cmp	r0, #0
 80025fe:	f43f af17 	beq.w	8002430 <HAL_DMA_Init+0x22c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002602:	bb8a      	cbnz	r2, 8002668 <HAL_DMA_Init+0x464>
    switch (hdma->Init.FIFOThreshold)
 8002604:	2901      	cmp	r1, #1
 8002606:	d04f      	beq.n	80026a8 <HAL_DMA_Init+0x4a4>
 8002608:	f031 0202 	bics.w	r2, r1, #2
 800260c:	f47f af10 	bne.w	8002430 <HAL_DMA_Init+0x22c>
 8002610:	e032      	b.n	8002678 <HAL_DMA_Init+0x474>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002612:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8002614:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002616:	656a      	str	r2, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8002618:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 800261c:	2001      	movs	r0, #1
}
 800261e:	b003      	add	sp, #12
 8002620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002624:	4837      	ldr	r0, [pc, #220]	@ (8002704 <HAL_DMA_Init+0x500>)
 8002626:	40f0      	lsrs	r0, r6
 8002628:	07c0      	lsls	r0, r0, #31
 800262a:	d5db      	bpl.n	80025e4 <HAL_DMA_Init+0x3e0>
 800262c:	e7d8      	b.n	80025e0 <HAL_DMA_Init+0x3dc>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800262e:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002630:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8002632:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	@ 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002636:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002638:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800263a:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002642:	676b      	str	r3, [r5, #116]	@ 0x74
 8002644:	e7bc      	b.n	80025c0 <HAL_DMA_Init+0x3bc>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002646:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002648:	e9d5 060b 	ldrd	r0, r6, [r5, #44]	@ 0x2c
 800264c:	4306      	orrs	r6, r0
 800264e:	4333      	orrs	r3, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002650:	4e21      	ldr	r6, [pc, #132]	@ (80026d8 <HAL_DMA_Init+0x4d4>)
 8002652:	403e      	ands	r6, r7
 8002654:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
 8002658:	d2ba      	bcs.n	80025d0 <HAL_DMA_Init+0x3cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800265a:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800265c:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800265e:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002662:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002666:	e7c7      	b.n	80025f8 <HAL_DMA_Init+0x3f4>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002668:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800266c:	d00d      	beq.n	800268a <HAL_DMA_Init+0x486>
    switch (hdma->Init.FIFOThreshold)
 800266e:	2902      	cmp	r1, #2
 8002670:	d905      	bls.n	800267e <HAL_DMA_Init+0x47a>
 8002672:	2903      	cmp	r1, #3
 8002674:	f47f aedc 	bne.w	8002430 <HAL_DMA_Init+0x22c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002678:	01c2      	lsls	r2, r0, #7
 800267a:	f57f aed9 	bpl.w	8002430 <HAL_DMA_Init+0x22c>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800267e:	2240      	movs	r2, #64	@ 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8002680:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002682:	656a      	str	r2, [r5, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8002684:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
          return HAL_ERROR;
 8002688:	e7c8      	b.n	800261c <HAL_DMA_Init+0x418>
    switch (hdma->Init.FIFOThreshold)
 800268a:	2903      	cmp	r1, #3
 800268c:	f63f aed0 	bhi.w	8002430 <HAL_DMA_Init+0x22c>
 8002690:	a201      	add	r2, pc, #4	@ (adr r2, 8002698 <HAL_DMA_Init+0x494>)
 8002692:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8002696:	bf00      	nop
 8002698:	0800267f 	.word	0x0800267f
 800269c:	08002679 	.word	0x08002679
 80026a0:	0800267f 	.word	0x0800267f
 80026a4:	080026a9 	.word	0x080026a9
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026a8:	f1b0 7fc0 	cmp.w	r0, #25165824	@ 0x1800000
 80026ac:	f47f aec0 	bne.w	8002430 <HAL_DMA_Init+0x22c>
 80026b0:	e7e5      	b.n	800267e <HAL_DMA_Init+0x47a>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80026b2:	4a15      	ldr	r2, [pc, #84]	@ (8002708 <HAL_DMA_Init+0x504>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80026b4:	4915      	ldr	r1, [pc, #84]	@ (800270c <HAL_DMA_Init+0x508>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80026b6:	4422      	add	r2, r4
 80026b8:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80026ba:	e779      	b.n	80025b0 <HAL_DMA_Init+0x3ac>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026bc:	f04f 0e10 	mov.w	lr, #16
 80026c0:	e641      	b.n	8002346 <HAL_DMA_Init+0x142>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026c2:	2240      	movs	r2, #64	@ 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80026c4:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026c6:	656a      	str	r2, [r5, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80026c8:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 80026cc:	e7a6      	b.n	800261c <HAL_DMA_Init+0x418>
 80026ce:	bf00      	nop
 80026d0:	fe10803f 	.word	0xfe10803f
 80026d4:	5c001000 	.word	0x5c001000
 80026d8:	ffff0000 	.word	0xffff0000
 80026dc:	40020010 	.word	0x40020010
 80026e0:	58025458 	.word	0x58025458
 80026e4:	5802546c 	.word	0x5802546c
 80026e8:	58025408 	.word	0x58025408
 80026ec:	58025430 	.word	0x58025430
 80026f0:	58025480 	.word	0x58025480
 80026f4:	40020028 	.word	0x40020028
 80026f8:	58025444 	.word	0x58025444
 80026fc:	1600963f 	.word	0x1600963f
 8002700:	58025940 	.word	0x58025940
 8002704:	c3c0003f 	.word	0xc3c0003f
 8002708:	1000823f 	.word	0x1000823f
 800270c:	40020940 	.word	0x40020940

08002710 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002714:	680c      	ldr	r4, [r1, #0]
{
 8002716:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002718:	2c00      	cmp	r4, #0
 800271a:	f000 80a5 	beq.w	8002868 <HAL_GPIO_Init+0x158>
  uint32_t position = 0x00U;
 800271e:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002720:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002724:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002728:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800272a:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
 800272e:	ea1c 0a04 	ands.w	sl, ip, r4
 8002732:	f000 8094 	beq.w	800285e <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002736:	9900      	ldr	r1, [sp, #0]
 8002738:	005f      	lsls	r7, r3, #1
 800273a:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800273c:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800273e:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002742:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002746:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800274a:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800274c:	f1b8 0f01 	cmp.w	r8, #1
 8002750:	f240 808d 	bls.w	800286e <HAL_GPIO_Init+0x15e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002754:	2a03      	cmp	r2, #3
 8002756:	f040 80cb 	bne.w	80028f0 <HAL_GPIO_Init+0x1e0>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800275a:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 800275c:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800275e:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002762:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002766:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 800276a:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800276c:	d077      	beq.n	800285e <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276e:	4e7f      	ldr	r6, [pc, #508]	@ (800296c <HAL_GPIO_Init+0x25c>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002770:	f003 0703 	and.w	r7, r3, #3
 8002774:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002776:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800277a:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277c:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002780:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002784:	497a      	ldr	r1, [pc, #488]	@ (8002970 <HAL_GPIO_Init+0x260>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002786:	f8c6 20f4 	str.w	r2, [r6, #244]	@ 0xf4
 800278a:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
 800278e:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002792:	4288      	cmp	r0, r1
 8002794:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002798:	f002 0202 	and.w	r2, r2, #2
 800279c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80027a0:	9203      	str	r2, [sp, #12]
 80027a2:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80027a4:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027a6:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027aa:	d031      	beq.n	8002810 <HAL_GPIO_Init+0x100>
 80027ac:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80027b0:	4288      	cmp	r0, r1
 80027b2:	f000 80b0 	beq.w	8002916 <HAL_GPIO_Init+0x206>
 80027b6:	496f      	ldr	r1, [pc, #444]	@ (8002974 <HAL_GPIO_Init+0x264>)
 80027b8:	4288      	cmp	r0, r1
 80027ba:	f000 80b2 	beq.w	8002922 <HAL_GPIO_Init+0x212>
 80027be:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 8002978 <HAL_GPIO_Init+0x268>
 80027c2:	4560      	cmp	r0, ip
 80027c4:	f000 80a1 	beq.w	800290a <HAL_GPIO_Init+0x1fa>
 80027c8:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 800297c <HAL_GPIO_Init+0x26c>
 80027cc:	4560      	cmp	r0, ip
 80027ce:	f000 80b4 	beq.w	800293a <HAL_GPIO_Init+0x22a>
 80027d2:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 8002980 <HAL_GPIO_Init+0x270>
 80027d6:	4560      	cmp	r0, ip
 80027d8:	f000 80b5 	beq.w	8002946 <HAL_GPIO_Init+0x236>
 80027dc:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 8002984 <HAL_GPIO_Init+0x274>
 80027e0:	4560      	cmp	r0, ip
 80027e2:	f000 80a4 	beq.w	800292e <HAL_GPIO_Init+0x21e>
 80027e6:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8002988 <HAL_GPIO_Init+0x278>
 80027ea:	4560      	cmp	r0, ip
 80027ec:	f000 80b1 	beq.w	8002952 <HAL_GPIO_Init+0x242>
 80027f0:	f8df c198 	ldr.w	ip, [pc, #408]	@ 800298c <HAL_GPIO_Init+0x27c>
 80027f4:	4560      	cmp	r0, ip
 80027f6:	f000 80b2 	beq.w	800295e <HAL_GPIO_Init+0x24e>
 80027fa:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8002990 <HAL_GPIO_Init+0x280>
 80027fe:	4560      	cmp	r0, ip
 8002800:	bf0c      	ite	eq
 8002802:	f04f 0c09 	moveq.w	ip, #9
 8002806:	f04f 0c0a 	movne.w	ip, #10
 800280a:	fa0c f707 	lsl.w	r7, ip, r7
 800280e:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002810:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002812:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 8002814:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
 8002818:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
 800281c:	bf4c      	ite	mi
 800281e:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
 8002822:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002824:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
 8002826:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
 800282a:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
 800282e:	bf54      	ite	pl
 8002830:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8002832:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002836:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8002838:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800283c:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 8002840:	bf54      	ite	pl
 8002842:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8002844:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002848:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800284a:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800284e:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 8002852:	bf54      	ite	pl
 8002854:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8002856:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800285a:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
 800285e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002860:	fa34 f203 	lsrs.w	r2, r4, r3
 8002864:	f47f af61 	bne.w	800272a <HAL_GPIO_Init+0x1a>
  }
}
 8002868:	b005      	add	sp, #20
 800286a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 800286e:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002870:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
 8002872:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002876:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002878:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800287c:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002880:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002882:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002886:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
 8002888:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800288c:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8002890:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002894:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002898:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800289c:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 80028a0:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a4:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
 80028a8:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028ac:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028b0:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 80028b4:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b8:	f47f af4f 	bne.w	800275a <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028bc:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028c0:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 80028c2:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028c6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028ca:	6909      	ldr	r1, [r1, #16]
 80028cc:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80028d0:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
 80028d4:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028d8:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028da:	210f      	movs	r1, #15
 80028dc:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028e0:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028e2:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028e6:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 80028ea:	f8c8 c020 	str.w	ip, [r8, #32]
 80028ee:	e734      	b.n	800275a <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f0:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
 80028f2:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f6:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028f8:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028fc:	fa01 fc07 	lsl.w	ip, r1, r7
 8002900:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8002904:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002908:	e727      	b.n	800275a <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800290a:	f04f 0c03 	mov.w	ip, #3
 800290e:	fa0c f707 	lsl.w	r7, ip, r7
 8002912:	433a      	orrs	r2, r7
 8002914:	e77c      	b.n	8002810 <HAL_GPIO_Init+0x100>
 8002916:	f04f 0c01 	mov.w	ip, #1
 800291a:	fa0c f707 	lsl.w	r7, ip, r7
 800291e:	433a      	orrs	r2, r7
 8002920:	e776      	b.n	8002810 <HAL_GPIO_Init+0x100>
 8002922:	f04f 0c02 	mov.w	ip, #2
 8002926:	fa0c f707 	lsl.w	r7, ip, r7
 800292a:	433a      	orrs	r2, r7
 800292c:	e770      	b.n	8002810 <HAL_GPIO_Init+0x100>
 800292e:	f04f 0c06 	mov.w	ip, #6
 8002932:	fa0c f707 	lsl.w	r7, ip, r7
 8002936:	433a      	orrs	r2, r7
 8002938:	e76a      	b.n	8002810 <HAL_GPIO_Init+0x100>
 800293a:	f04f 0c04 	mov.w	ip, #4
 800293e:	fa0c f707 	lsl.w	r7, ip, r7
 8002942:	433a      	orrs	r2, r7
 8002944:	e764      	b.n	8002810 <HAL_GPIO_Init+0x100>
 8002946:	f04f 0c05 	mov.w	ip, #5
 800294a:	fa0c f707 	lsl.w	r7, ip, r7
 800294e:	433a      	orrs	r2, r7
 8002950:	e75e      	b.n	8002810 <HAL_GPIO_Init+0x100>
 8002952:	f04f 0c07 	mov.w	ip, #7
 8002956:	fa0c f707 	lsl.w	r7, ip, r7
 800295a:	433a      	orrs	r2, r7
 800295c:	e758      	b.n	8002810 <HAL_GPIO_Init+0x100>
 800295e:	f04f 0c08 	mov.w	ip, #8
 8002962:	fa0c f707 	lsl.w	r7, ip, r7
 8002966:	433a      	orrs	r2, r7
 8002968:	e752      	b.n	8002810 <HAL_GPIO_Init+0x100>
 800296a:	bf00      	nop
 800296c:	58024400 	.word	0x58024400
 8002970:	58020000 	.word	0x58020000
 8002974:	58020800 	.word	0x58020800
 8002978:	58020c00 	.word	0x58020c00
 800297c:	58021000 	.word	0x58021000
 8002980:	58021400 	.word	0x58021400
 8002984:	58021800 	.word	0x58021800
 8002988:	58021c00 	.word	0x58021c00
 800298c:	58022000 	.word	0x58022000
 8002990:	58022400 	.word	0x58022400

08002994 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002994:	b902      	cbnz	r2, 8002998 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002996:	0409      	lsls	r1, r1, #16
 8002998:	6181      	str	r1, [r0, #24]
  }
}
 800299a:	4770      	bx	lr

0800299c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800299c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800299e:	4c10      	ldr	r4, [pc, #64]	@ (80029e0 <HAL_PWREx_ConfigSupply+0x44>)
 80029a0:	68e3      	ldr	r3, [r4, #12]
 80029a2:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80029a6:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80029a8:	d105      	bne.n	80029b6 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	1a18      	subs	r0, r3, r0
 80029b0:	bf18      	it	ne
 80029b2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80029b4:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80029b6:	f023 0307 	bic.w	r3, r3, #7
 80029ba:	4303      	orrs	r3, r0
 80029bc:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 80029be:	f7fe fcb7 	bl	8001330 <HAL_GetTick>
 80029c2:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029c4:	e005      	b.n	80029d2 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80029c6:	f7fe fcb3 	bl	8001330 <HAL_GetTick>
 80029ca:	1b40      	subs	r0, r0, r5
 80029cc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80029d0:	d804      	bhi.n	80029dc <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029d2:	6863      	ldr	r3, [r4, #4]
 80029d4:	049b      	lsls	r3, r3, #18
 80029d6:	d5f6      	bpl.n	80029c6 <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 80029d8:	2000      	movs	r0, #0
}
 80029da:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80029dc:	2001      	movs	r0, #1
}
 80029de:	bd38      	pop	{r3, r4, r5, pc}
 80029e0:	58024800 	.word	0x58024800

080029e4 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029e4:	4b33      	ldr	r3, [pc, #204]	@ (8002ab4 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 80029e6:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80029ea:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029ec:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 80029ee:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80029f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80029f4:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80029f8:	d036      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80029fa:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029fe:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a02:	f002 0203 	and.w	r2, r2, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a06:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002a0a:	fb05 f101 	mul.w	r1, r5, r1
 8002a0e:	2a01      	cmp	r2, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a14:	ee06 1a90 	vmov	s13, r1
 8002a18:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8002a1c:	d002      	beq.n	8002a24 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 8002a1e:	2a02      	cmp	r2, #2
 8002a20:	d042      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 8002a22:	b31a      	cbz	r2, 8002a6c <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a24:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8002ab8 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8002a28:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a32:	ee07 3a90 	vmov	s15, r3
 8002a36:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8002a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a3e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a46:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab4 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002a52:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002a54:	ee07 3a10 	vmov	s14, r3
 8002a58:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002a5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a60:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8002a64:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8002a68:	bc30      	pop	{r4, r5}
 8002a6a:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	0692      	lsls	r2, r2, #26
 8002a70:	d51d      	bpl.n	8002aae <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a72:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a74:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a78:	4a10      	ldr	r2, [pc, #64]	@ (8002abc <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a7c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a84:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a86:	ee06 3a10 	vmov	s12, r3
 8002a8a:	ee05 2a90 	vmov	s11, r2
 8002a8e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002a92:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8002a96:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002a9a:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8002a9e:	ee36 7a26 	vadd.f32	s14, s12, s13
 8002aa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aa6:	e7d0      	b.n	8002a4a <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aa8:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8002ac0 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 8002aac:	e7bc      	b.n	8002a28 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aae:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8002ac4 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 8002ab2:	e7b9      	b.n	8002a28 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8002ab4:	58024400 	.word	0x58024400
 8002ab8:	4a742400 	.word	0x4a742400
 8002abc:	03d09000 	.word	0x03d09000
 8002ac0:	4af42400 	.word	0x4af42400
 8002ac4:	4c742400 	.word	0x4c742400

08002ac8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	f000 82e9 	beq.w	80030a0 <HAL_RCC_OscConfig+0x5d8>
{
 8002ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ad0:	6803      	ldr	r3, [r0, #0]
 8002ad2:	4604      	mov	r4, r0
 8002ad4:	07d9      	lsls	r1, r3, #31
 8002ad6:	d52e      	bpl.n	8002b36 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ad8:	4997      	ldr	r1, [pc, #604]	@ (8002d38 <HAL_RCC_OscConfig+0x270>)
 8002ada:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002adc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ade:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ae2:	2a10      	cmp	r2, #16
 8002ae4:	f000 80ee 	beq.w	8002cc4 <HAL_RCC_OscConfig+0x1fc>
 8002ae8:	2a18      	cmp	r2, #24
 8002aea:	f000 80e6 	beq.w	8002cba <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aee:	6863      	ldr	r3, [r4, #4]
 8002af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002af4:	f000 8111 	beq.w	8002d1a <HAL_RCC_OscConfig+0x252>
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 8167 	beq.w	8002dcc <HAL_RCC_OscConfig+0x304>
 8002afe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b02:	4b8d      	ldr	r3, [pc, #564]	@ (8002d38 <HAL_RCC_OscConfig+0x270>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	f000 828a 	beq.w	800301e <HAL_RCC_OscConfig+0x556>
 8002b0a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b18:	f7fe fc0a 	bl	8001330 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b1c:	4e86      	ldr	r6, [pc, #536]	@ (8002d38 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8002b1e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b20:	e005      	b.n	8002b2e <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b22:	f7fe fc05 	bl	8001330 <HAL_GetTick>
 8002b26:	1b40      	subs	r0, r0, r5
 8002b28:	2864      	cmp	r0, #100	@ 0x64
 8002b2a:	f200 814d 	bhi.w	8002dc8 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b2e:	6833      	ldr	r3, [r6, #0]
 8002b30:	039b      	lsls	r3, r3, #14
 8002b32:	d5f6      	bpl.n	8002b22 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	079d      	lsls	r5, r3, #30
 8002b38:	d470      	bmi.n	8002c1c <HAL_RCC_OscConfig+0x154>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b3a:	06d9      	lsls	r1, r3, #27
 8002b3c:	d533      	bpl.n	8002ba6 <HAL_RCC_OscConfig+0xde>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b3e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d38 <HAL_RCC_OscConfig+0x270>)
 8002b40:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b42:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	f000 80cb 	beq.w	8002ce4 <HAL_RCC_OscConfig+0x21c>
 8002b4e:	2b18      	cmp	r3, #24
 8002b50:	f000 80c3 	beq.w	8002cda <HAL_RCC_OscConfig+0x212>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002b54:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8002b56:	4d78      	ldr	r5, [pc, #480]	@ (8002d38 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 816f 	beq.w	8002e3c <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_CSI_ENABLE();
 8002b5e:	682b      	ldr	r3, [r5, #0]
 8002b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b64:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b66:	f7fe fbe3 	bl	8001330 <HAL_GetTick>
 8002b6a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b6c:	e005      	b.n	8002b7a <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b6e:	f7fe fbdf 	bl	8001330 <HAL_GetTick>
 8002b72:	1b80      	subs	r0, r0, r6
 8002b74:	2802      	cmp	r0, #2
 8002b76:	f200 8127 	bhi.w	8002dc8 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b7a:	682b      	ldr	r3, [r5, #0]
 8002b7c:	05db      	lsls	r3, r3, #23
 8002b7e:	d5f6      	bpl.n	8002b6e <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b80:	f7fe fbdc 	bl	800133c <HAL_GetREVID>
 8002b84:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002b88:	4298      	cmp	r0, r3
 8002b8a:	f200 8269 	bhi.w	8003060 <HAL_RCC_OscConfig+0x598>
 8002b8e:	6a22      	ldr	r2, [r4, #32]
 8002b90:	686b      	ldr	r3, [r5, #4]
 8002b92:	2a20      	cmp	r2, #32
 8002b94:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002b98:	bf0c      	ite	eq
 8002b9a:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8002b9e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8002ba2:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba4:	6823      	ldr	r3, [r4, #0]
 8002ba6:	071d      	lsls	r5, r3, #28
 8002ba8:	d516      	bpl.n	8002bd8 <HAL_RCC_OscConfig+0x110>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002baa:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002bac:	4d62      	ldr	r5, [pc, #392]	@ (8002d38 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8122 	beq.w	8002df8 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_LSI_ENABLE();
 8002bb4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8002bbc:	f7fe fbb8 	bl	8001330 <HAL_GetTick>
 8002bc0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bc2:	e005      	b.n	8002bd0 <HAL_RCC_OscConfig+0x108>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc4:	f7fe fbb4 	bl	8001330 <HAL_GetTick>
 8002bc8:	1b80      	subs	r0, r0, r6
 8002bca:	2802      	cmp	r0, #2
 8002bcc:	f200 80fc 	bhi.w	8002dc8 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bd0:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002bd2:	0798      	lsls	r0, r3, #30
 8002bd4:	d5f6      	bpl.n	8002bc4 <HAL_RCC_OscConfig+0xfc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bd6:	6823      	ldr	r3, [r4, #0]
 8002bd8:	069a      	lsls	r2, r3, #26
 8002bda:	d516      	bpl.n	8002c0a <HAL_RCC_OscConfig+0x142>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002bdc:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8002bde:	4d56      	ldr	r5, [pc, #344]	@ (8002d38 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 811a 	beq.w	8002e1a <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
 8002be6:	682b      	ldr	r3, [r5, #0]
 8002be8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bec:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002bee:	f7fe fb9f 	bl	8001330 <HAL_GetTick>
 8002bf2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bf4:	e005      	b.n	8002c02 <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bf6:	f7fe fb9b 	bl	8001330 <HAL_GetTick>
 8002bfa:	1b80      	subs	r0, r0, r6
 8002bfc:	2802      	cmp	r0, #2
 8002bfe:	f200 80e3 	bhi.w	8002dc8 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c02:	682b      	ldr	r3, [r5, #0]
 8002c04:	049f      	lsls	r7, r3, #18
 8002c06:	d5f6      	bpl.n	8002bf6 <HAL_RCC_OscConfig+0x12e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	0759      	lsls	r1, r3, #29
 8002c0c:	f100 808b 	bmi.w	8002d26 <HAL_RCC_OscConfig+0x25e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c10:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f040 80bf 	bne.w	8002d96 <HAL_RCC_OscConfig+0x2ce>
  return HAL_OK;
 8002c18:	2000      	movs	r0, #0
}
 8002c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c1c:	4a46      	ldr	r2, [pc, #280]	@ (8002d38 <HAL_RCC_OscConfig+0x270>)
 8002c1e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c20:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c22:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8002c26:	d12d      	bne.n	8002c84 <HAL_RCC_OscConfig+0x1bc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c28:	4b43      	ldr	r3, [pc, #268]	@ (8002d38 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c2a:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	0759      	lsls	r1, r3, #29
 8002c30:	d501      	bpl.n	8002c36 <HAL_RCC_OscConfig+0x16e>
 8002c32:	2a00      	cmp	r2, #0
 8002c34:	d04f      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c36:	4d40      	ldr	r5, [pc, #256]	@ (8002d38 <HAL_RCC_OscConfig+0x270>)
 8002c38:	682b      	ldr	r3, [r5, #0]
 8002c3a:	f023 0319 	bic.w	r3, r3, #25
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002c42:	f7fe fb75 	bl	8001330 <HAL_GetTick>
 8002c46:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c48:	e005      	b.n	8002c56 <HAL_RCC_OscConfig+0x18e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4a:	f7fe fb71 	bl	8001330 <HAL_GetTick>
 8002c4e:	1b80      	subs	r0, r0, r6
 8002c50:	2802      	cmp	r0, #2
 8002c52:	f200 80b9 	bhi.w	8002dc8 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c56:	682b      	ldr	r3, [r5, #0]
 8002c58:	075b      	lsls	r3, r3, #29
 8002c5a:	d5f6      	bpl.n	8002c4a <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5c:	f7fe fb6e 	bl	800133c <HAL_GetREVID>
 8002c60:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002c64:	4298      	cmp	r0, r3
 8002c66:	f200 8110 	bhi.w	8002e8a <HAL_RCC_OscConfig+0x3c2>
 8002c6a:	6922      	ldr	r2, [r4, #16]
 8002c6c:	686b      	ldr	r3, [r5, #4]
 8002c6e:	2a40      	cmp	r2, #64	@ 0x40
 8002c70:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002c74:	bf0c      	ite	eq
 8002c76:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8002c7a:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8002c7e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	e75a      	b.n	8002b3a <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c84:	2b18      	cmp	r3, #24
 8002c86:	f000 80fc 	beq.w	8002e82 <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c8a:	4d2b      	ldr	r5, [pc, #172]	@ (8002d38 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c8c:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c8e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c90:	2a00      	cmp	r2, #0
 8002c92:	f000 80e5 	beq.w	8002e60 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c96:	f023 0319 	bic.w	r3, r3, #25
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002c9e:	f7fe fb47 	bl	8001330 <HAL_GetTick>
 8002ca2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ca4:	e005      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca6:	f7fe fb43 	bl	8001330 <HAL_GetTick>
 8002caa:	1b80      	subs	r0, r0, r6
 8002cac:	2802      	cmp	r0, #2
 8002cae:	f200 808b 	bhi.w	8002dc8 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cb2:	682b      	ldr	r3, [r5, #0]
 8002cb4:	075f      	lsls	r7, r3, #29
 8002cb6:	d5f6      	bpl.n	8002ca6 <HAL_RCC_OscConfig+0x1de>
 8002cb8:	e7d0      	b.n	8002c5c <HAL_RCC_OscConfig+0x194>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002cba:	f001 0103 	and.w	r1, r1, #3
 8002cbe:	2902      	cmp	r1, #2
 8002cc0:	f47f af15 	bne.w	8002aee <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8002d38 <HAL_RCC_OscConfig+0x270>)
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	0392      	lsls	r2, r2, #14
 8002cca:	f57f af34 	bpl.w	8002b36 <HAL_RCC_OscConfig+0x6e>
 8002cce:	6862      	ldr	r2, [r4, #4]
 8002cd0:	2a00      	cmp	r2, #0
 8002cd2:	f47f af30 	bne.w	8002b36 <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 8002cd6:	2001      	movs	r0, #1
}
 8002cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002cda:	f002 0203 	and.w	r2, r2, #3
 8002cde:	2a01      	cmp	r2, #1
 8002ce0:	f47f af38 	bne.w	8002b54 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ce4:	4b14      	ldr	r3, [pc, #80]	@ (8002d38 <HAL_RCC_OscConfig+0x270>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	05da      	lsls	r2, r3, #23
 8002cea:	d502      	bpl.n	8002cf2 <HAL_RCC_OscConfig+0x22a>
 8002cec:	69e3      	ldr	r3, [r4, #28]
 8002cee:	2b80      	cmp	r3, #128	@ 0x80
 8002cf0:	d1f1      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cf2:	f7fe fb23 	bl	800133c <HAL_GetREVID>
 8002cf6:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002cfa:	4298      	cmp	r0, r3
 8002cfc:	f200 80ce 	bhi.w	8002e9c <HAL_RCC_OscConfig+0x3d4>
 8002d00:	6a22      	ldr	r2, [r4, #32]
 8002d02:	2a20      	cmp	r2, #32
 8002d04:	f000 81bb 	beq.w	800307e <HAL_RCC_OscConfig+0x5b6>
 8002d08:	490b      	ldr	r1, [pc, #44]	@ (8002d38 <HAL_RCC_OscConfig+0x270>)
 8002d0a:	684b      	ldr	r3, [r1, #4]
 8002d0c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002d10:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8002d14:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d16:	6823      	ldr	r3, [r4, #0]
 8002d18:	e745      	b.n	8002ba6 <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d1a:	4a07      	ldr	r2, [pc, #28]	@ (8002d38 <HAL_RCC_OscConfig+0x270>)
 8002d1c:	6813      	ldr	r3, [r2, #0]
 8002d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d22:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d24:	e6f8      	b.n	8002b18 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8002d26:	4d05      	ldr	r5, [pc, #20]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002d28:	682b      	ldr	r3, [r5, #0]
 8002d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d2e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002d30:	f7fe fafe 	bl	8001330 <HAL_GetTick>
 8002d34:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x282>
 8002d38:	58024400 	.word	0x58024400
 8002d3c:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d40:	f7fe faf6 	bl	8001330 <HAL_GetTick>
 8002d44:	1b80      	subs	r0, r0, r6
 8002d46:	2864      	cmp	r0, #100	@ 0x64
 8002d48:	d83e      	bhi.n	8002dc8 <HAL_RCC_OscConfig+0x300>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d4a:	682b      	ldr	r3, [r5, #0]
 8002d4c:	05da      	lsls	r2, r3, #23
 8002d4e:	d5f7      	bpl.n	8002d40 <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d50:	68a3      	ldr	r3, [r4, #8]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	f000 818d 	beq.w	8003072 <HAL_RCC_OscConfig+0x5aa>
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8168 	beq.w	800302e <HAL_RCC_OscConfig+0x566>
 8002d5e:	2b05      	cmp	r3, #5
 8002d60:	4b85      	ldr	r3, [pc, #532]	@ (8002f78 <HAL_RCC_OscConfig+0x4b0>)
 8002d62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d64:	f000 8194 	beq.w	8003090 <HAL_RCC_OscConfig+0x5c8>
 8002d68:	f022 0201 	bic.w	r2, r2, #1
 8002d6c:	671a      	str	r2, [r3, #112]	@ 0x70
 8002d6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d70:	f022 0204 	bic.w	r2, r2, #4
 8002d74:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002d76:	f7fe fadb 	bl	8001330 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d7a:	4e7f      	ldr	r6, [pc, #508]	@ (8002f78 <HAL_RCC_OscConfig+0x4b0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7c:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002d80:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d82:	e004      	b.n	8002d8e <HAL_RCC_OscConfig+0x2c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7fe fad4 	bl	8001330 <HAL_GetTick>
 8002d88:	1b40      	subs	r0, r0, r5
 8002d8a:	42b8      	cmp	r0, r7
 8002d8c:	d81c      	bhi.n	8002dc8 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d8e:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002d90:	079b      	lsls	r3, r3, #30
 8002d92:	d5f7      	bpl.n	8002d84 <HAL_RCC_OscConfig+0x2bc>
 8002d94:	e73c      	b.n	8002c10 <HAL_RCC_OscConfig+0x148>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d96:	4d78      	ldr	r5, [pc, #480]	@ (8002f78 <HAL_RCC_OscConfig+0x4b0>)
 8002d98:	692a      	ldr	r2, [r5, #16]
 8002d9a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8002d9e:	2a18      	cmp	r2, #24
 8002da0:	f000 80f0 	beq.w	8002f84 <HAL_RCC_OscConfig+0x4bc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da4:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8002da6:	682b      	ldr	r3, [r5, #0]
 8002da8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dac:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dae:	d07f      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
 8002db0:	f7fe fabe 	bl	8001330 <HAL_GetTick>
 8002db4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002db6:	682b      	ldr	r3, [r5, #0]
 8002db8:	019b      	lsls	r3, r3, #6
 8002dba:	f57f af2d 	bpl.w	8002c18 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7fe fab7 	bl	8001330 <HAL_GetTick>
 8002dc2:	1b00      	subs	r0, r0, r4
 8002dc4:	2802      	cmp	r0, #2
 8002dc6:	d9f6      	bls.n	8002db6 <HAL_RCC_OscConfig+0x2ee>
            return HAL_TIMEOUT;
 8002dc8:	2003      	movs	r0, #3
}
 8002dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dcc:	4d6a      	ldr	r5, [pc, #424]	@ (8002f78 <HAL_RCC_OscConfig+0x4b0>)
 8002dce:	682b      	ldr	r3, [r5, #0]
 8002dd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dd4:	602b      	str	r3, [r5, #0]
 8002dd6:	682b      	ldr	r3, [r5, #0]
 8002dd8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ddc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002dde:	f7fe faa7 	bl	8001330 <HAL_GetTick>
 8002de2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002de4:	e004      	b.n	8002df0 <HAL_RCC_OscConfig+0x328>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de6:	f7fe faa3 	bl	8001330 <HAL_GetTick>
 8002dea:	1b80      	subs	r0, r0, r6
 8002dec:	2864      	cmp	r0, #100	@ 0x64
 8002dee:	d8eb      	bhi.n	8002dc8 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002df0:	682b      	ldr	r3, [r5, #0]
 8002df2:	039f      	lsls	r7, r3, #14
 8002df4:	d4f7      	bmi.n	8002de6 <HAL_RCC_OscConfig+0x31e>
 8002df6:	e69d      	b.n	8002b34 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8002df8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002dfa:	f023 0301 	bic.w	r3, r3, #1
 8002dfe:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8002e00:	f7fe fa96 	bl	8001330 <HAL_GetTick>
 8002e04:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e06:	e004      	b.n	8002e12 <HAL_RCC_OscConfig+0x34a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e08:	f7fe fa92 	bl	8001330 <HAL_GetTick>
 8002e0c:	1b80      	subs	r0, r0, r6
 8002e0e:	2802      	cmp	r0, #2
 8002e10:	d8da      	bhi.n	8002dc8 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e12:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002e14:	0799      	lsls	r1, r3, #30
 8002e16:	d4f7      	bmi.n	8002e08 <HAL_RCC_OscConfig+0x340>
 8002e18:	e6dd      	b.n	8002bd6 <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSI48_DISABLE();
 8002e1a:	682b      	ldr	r3, [r5, #0]
 8002e1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e20:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002e22:	f7fe fa85 	bl	8001330 <HAL_GetTick>
 8002e26:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e28:	e004      	b.n	8002e34 <HAL_RCC_OscConfig+0x36c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e2a:	f7fe fa81 	bl	8001330 <HAL_GetTick>
 8002e2e:	1b80      	subs	r0, r0, r6
 8002e30:	2802      	cmp	r0, #2
 8002e32:	d8c9      	bhi.n	8002dc8 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e34:	682b      	ldr	r3, [r5, #0]
 8002e36:	0498      	lsls	r0, r3, #18
 8002e38:	d4f7      	bmi.n	8002e2a <HAL_RCC_OscConfig+0x362>
 8002e3a:	e6e5      	b.n	8002c08 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_CSI_DISABLE();
 8002e3c:	682b      	ldr	r3, [r5, #0]
 8002e3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e42:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e44:	f7fe fa74 	bl	8001330 <HAL_GetTick>
 8002e48:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e4a:	e004      	b.n	8002e56 <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e4c:	f7fe fa70 	bl	8001330 <HAL_GetTick>
 8002e50:	1b80      	subs	r0, r0, r6
 8002e52:	2802      	cmp	r0, #2
 8002e54:	d8b8      	bhi.n	8002dc8 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e56:	682b      	ldr	r3, [r5, #0]
 8002e58:	05df      	lsls	r7, r3, #23
 8002e5a:	d4f7      	bmi.n	8002e4c <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e5c:	6823      	ldr	r3, [r4, #0]
 8002e5e:	e6a2      	b.n	8002ba6 <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e66:	f7fe fa63 	bl	8001330 <HAL_GetTick>
 8002e6a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e6c:	e004      	b.n	8002e78 <HAL_RCC_OscConfig+0x3b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6e:	f7fe fa5f 	bl	8001330 <HAL_GetTick>
 8002e72:	1b80      	subs	r0, r0, r6
 8002e74:	2802      	cmp	r0, #2
 8002e76:	d8a7      	bhi.n	8002dc8 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e78:	682b      	ldr	r3, [r5, #0]
 8002e7a:	0758      	lsls	r0, r3, #29
 8002e7c:	d4f7      	bmi.n	8002e6e <HAL_RCC_OscConfig+0x3a6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	e65b      	b.n	8002b3a <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e82:	0790      	lsls	r0, r2, #30
 8002e84:	f47f af01 	bne.w	8002c8a <HAL_RCC_OscConfig+0x1c2>
 8002e88:	e6ce      	b.n	8002c28 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8a:	686b      	ldr	r3, [r5, #4]
 8002e8c:	6922      	ldr	r2, [r4, #16]
 8002e8e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002e92:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e96:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	e64e      	b.n	8002b3a <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e9c:	4a36      	ldr	r2, [pc, #216]	@ (8002f78 <HAL_RCC_OscConfig+0x4b0>)
 8002e9e:	6a21      	ldr	r1, [r4, #32]
 8002ea0:	68d3      	ldr	r3, [r2, #12]
 8002ea2:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8002ea6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002eaa:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eac:	6823      	ldr	r3, [r4, #0]
 8002eae:	e67a      	b.n	8002ba6 <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 8002eb0:	f7fe fa3e 	bl	8001330 <HAL_GetTick>
 8002eb4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eb6:	e004      	b.n	8002ec2 <HAL_RCC_OscConfig+0x3fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7fe fa3a 	bl	8001330 <HAL_GetTick>
 8002ebc:	1b80      	subs	r0, r0, r6
 8002ebe:	2802      	cmp	r0, #2
 8002ec0:	d882      	bhi.n	8002dc8 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ec2:	682b      	ldr	r3, [r5, #0]
 8002ec4:	0199      	lsls	r1, r3, #6
 8002ec6:	d4f7      	bmi.n	8002eb8 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec8:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8002eca:	4b2c      	ldr	r3, [pc, #176]	@ (8002f7c <HAL_RCC_OscConfig+0x4b4>)
 8002ecc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002ece:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ed0:	492b      	ldr	r1, [pc, #172]	@ (8002f80 <HAL_RCC_OscConfig+0x4b8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ed2:	4e29      	ldr	r6, [pc, #164]	@ (8002f78 <HAL_RCC_OscConfig+0x4b0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002ed8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002edc:	62ab      	str	r3, [r5, #40]	@ 0x28
 8002ede:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	3a01      	subs	r2, #1
 8002ee6:	025b      	lsls	r3, r3, #9
 8002ee8:	0412      	lsls	r2, r2, #16
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002ef4:	3a01      	subs	r2, #1
 8002ef6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002efa:	4313      	orrs	r3, r2
 8002efc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002efe:	3a01      	subs	r2, #1
 8002f00:	0612      	lsls	r2, r2, #24
 8002f02:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002f06:	4313      	orrs	r3, r2
 8002f08:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8002f0a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f12:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8002f14:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002f16:	4011      	ands	r1, r2
 8002f18:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8002f1c:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f1e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002f20:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002f22:	f023 030c 	bic.w	r3, r3, #12
 8002f26:	4313      	orrs	r3, r2
 8002f28:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f2a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002f2c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002f2e:	f023 0302 	bic.w	r3, r3, #2
 8002f32:	4313      	orrs	r3, r2
 8002f34:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f36:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f3c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f3e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f44:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f46:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002f48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f4c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8002f4e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8002f56:	682b      	ldr	r3, [r5, #0]
 8002f58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f5c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f5e:	f7fe f9e7 	bl	8001330 <HAL_GetTick>
 8002f62:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f64:	6833      	ldr	r3, [r6, #0]
 8002f66:	019a      	lsls	r2, r3, #6
 8002f68:	f53f ae56 	bmi.w	8002c18 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6c:	f7fe f9e0 	bl	8001330 <HAL_GetTick>
 8002f70:	1b00      	subs	r0, r0, r4
 8002f72:	2802      	cmp	r0, #2
 8002f74:	d9f6      	bls.n	8002f64 <HAL_RCC_OscConfig+0x49c>
 8002f76:	e727      	b.n	8002dc8 <HAL_RCC_OscConfig+0x300>
 8002f78:	58024400 	.word	0x58024400
 8002f7c:	fffffc0c 	.word	0xfffffc0c
 8002f80:	ffff0007 	.word	0xffff0007
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f84:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f86:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f88:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f8a:	f43f aea4 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f92:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002f94:	428b      	cmp	r3, r1
 8002f96:	f47f ae9e 	bne.w	8002cd6 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f9a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	f47f ae98 	bne.w	8002cd6 <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fa6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002fa8:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8002fac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	f47f ae91 	bne.w	8002cd6 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002fb6:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8002fba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	f47f ae8a 	bne.w	8002cd6 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fc2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002fc4:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8002fc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	f47f ae83 	bne.w	8002cd6 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002fd0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002fd2:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8002fd6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fd8:	4298      	cmp	r0, r3
 8002fda:	f47f ae7c 	bne.w	8002cd6 <HAL_RCC_OscConfig+0x20e>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002fde:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002fe0:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002fe2:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	f43f ae16 	beq.w	8002c18 <HAL_RCC_OscConfig+0x150>
          __HAL_RCC_PLLFRACN_DISABLE();
 8002fec:	4a2d      	ldr	r2, [pc, #180]	@ (80030a4 <HAL_RCC_OscConfig+0x5dc>)
 8002fee:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002ff0:	f023 0301 	bic.w	r3, r3, #1
 8002ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8002ff6:	f7fe f99b 	bl	8001330 <HAL_GetTick>
 8002ffa:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ffc:	f7fe f998 	bl	8001330 <HAL_GetTick>
 8003000:	42a8      	cmp	r0, r5
 8003002:	d0fb      	beq.n	8002ffc <HAL_RCC_OscConfig+0x534>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003004:	4a27      	ldr	r2, [pc, #156]	@ (80030a4 <HAL_RCC_OscConfig+0x5dc>)
 8003006:	4b28      	ldr	r3, [pc, #160]	@ (80030a8 <HAL_RCC_OscConfig+0x5e0>)
 8003008:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800300a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800300c:	4003      	ands	r3, r0
 800300e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003012:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8003014:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800301c:	e5fc      	b.n	8002c18 <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800301e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800302a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800302c:	e574      	b.n	8002b18 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800302e:	4d1d      	ldr	r5, [pc, #116]	@ (80030a4 <HAL_RCC_OscConfig+0x5dc>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003034:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	672b      	str	r3, [r5, #112]	@ 0x70
 800303c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800303e:	f023 0304 	bic.w	r3, r3, #4
 8003042:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8003044:	f7fe f974 	bl	8001330 <HAL_GetTick>
 8003048:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800304a:	e005      	b.n	8003058 <HAL_RCC_OscConfig+0x590>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304c:	f7fe f970 	bl	8001330 <HAL_GetTick>
 8003050:	1b80      	subs	r0, r0, r6
 8003052:	42b8      	cmp	r0, r7
 8003054:	f63f aeb8 	bhi.w	8002dc8 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003058:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800305a:	0798      	lsls	r0, r3, #30
 800305c:	d4f6      	bmi.n	800304c <HAL_RCC_OscConfig+0x584>
 800305e:	e5d7      	b.n	8002c10 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003060:	68eb      	ldr	r3, [r5, #12]
 8003062:	6a22      	ldr	r2, [r4, #32]
 8003064:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8003068:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800306c:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800306e:	6823      	ldr	r3, [r4, #0]
 8003070:	e599      	b.n	8002ba6 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003072:	4a0c      	ldr	r2, [pc, #48]	@ (80030a4 <HAL_RCC_OscConfig+0x5dc>)
 8003074:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800307c:	e67b      	b.n	8002d76 <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800307e:	4a09      	ldr	r2, [pc, #36]	@ (80030a4 <HAL_RCC_OscConfig+0x5dc>)
 8003080:	6853      	ldr	r3, [r2, #4]
 8003082:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003086:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800308a:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	e58a      	b.n	8002ba6 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003090:	f042 0204 	orr.w	r2, r2, #4
 8003094:	671a      	str	r2, [r3, #112]	@ 0x70
 8003096:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003098:	f042 0201 	orr.w	r2, r2, #1
 800309c:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800309e:	e66a      	b.n	8002d76 <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 80030a0:	2001      	movs	r0, #1
}
 80030a2:	4770      	bx	lr
 80030a4:	58024400 	.word	0x58024400
 80030a8:	ffff0007 	.word	0xffff0007

080030ac <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ac:	4a3f      	ldr	r2, [pc, #252]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x100>)
 80030ae:	6913      	ldr	r3, [r2, #16]
 80030b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030b4:	2b10      	cmp	r3, #16
 80030b6:	d004      	beq.n	80030c2 <HAL_RCC_GetSysClockFreq+0x16>
 80030b8:	2b18      	cmp	r3, #24
 80030ba:	d00d      	beq.n	80030d8 <HAL_RCC_GetSysClockFreq+0x2c>
 80030bc:	b11b      	cbz	r3, 80030c6 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 80030be:	483c      	ldr	r0, [pc, #240]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80030c0:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030c2:	483c      	ldr	r0, [pc, #240]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030c4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030c6:	6813      	ldr	r3, [r2, #0]
 80030c8:	0699      	lsls	r1, r3, #26
 80030ca:	d548      	bpl.n	800315e <HAL_RCC_GetSysClockFreq+0xb2>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030cc:	6813      	ldr	r3, [r2, #0]
 80030ce:	483a      	ldr	r0, [pc, #232]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030d0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80030d4:	40d8      	lsrs	r0, r3
 80030d6:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030d8:	6a93      	ldr	r3, [r2, #40]	@ 0x28
{
 80030da:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80030dc:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030de:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 80030e0:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030e4:	6b51      	ldr	r1, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80030e6:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80030ea:	d036      	beq.n	800315a <HAL_RCC_GetSysClockFreq+0xae>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030ec:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030f0:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030f4:	f003 0303 	and.w	r3, r3, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030f8:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030fc:	fb05 f101 	mul.w	r1, r5, r1
 8003100:	2b01      	cmp	r3, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003106:	ee06 1a90 	vmov	s13, r1
 800310a:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800310e:	d002      	beq.n	8003116 <HAL_RCC_GetSysClockFreq+0x6a>
 8003110:	2b02      	cmp	r3, #2
 8003112:	d026      	beq.n	8003162 <HAL_RCC_GetSysClockFreq+0xb6>
 8003114:	b343      	cbz	r3, 8003168 <HAL_RCC_GetSysClockFreq+0xbc>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003116:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80031bc <HAL_RCC_GetSysClockFreq+0x110>
 800311a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800311e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003124:	ee07 3a10 	vmov	s14, r3
 8003128:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800312c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003130:	ee37 7a25 	vadd.f32	s14, s14, s11
 8003134:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003138:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800313c:	4b1b      	ldr	r3, [pc, #108]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x100>)
 800313e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003140:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003144:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003146:	ee07 3a90 	vmov	s15, r3
 800314a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800314e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003156:	ee17 0a90 	vmov	r0, s15
}
 800315a:	bc30      	pop	{r4, r5}
 800315c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800315e:	4816      	ldr	r0, [pc, #88]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x10c>)
}
 8003160:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003162:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80031c0 <HAL_RCC_GetSysClockFreq+0x114>
 8003166:	e7d8      	b.n	800311a <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003168:	6813      	ldr	r3, [r2, #0]
 800316a:	069b      	lsls	r3, r3, #26
 800316c:	d51a      	bpl.n	80031a4 <HAL_RCC_GetSysClockFreq+0xf8>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800316e:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003170:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003174:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003176:	4910      	ldr	r1, [pc, #64]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003178:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800317c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003180:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003182:	ee06 3a10 	vmov	s12, r3
 8003186:	ee05 1a90 	vmov	s11, r1
 800318a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800318e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8003192:	ee36 6a07 	vadd.f32	s12, s12, s14
 8003196:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 800319a:	ee76 7a26 	vadd.f32	s15, s12, s13
 800319e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031a2:	e7cb      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x90>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031a4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80031c4 <HAL_RCC_GetSysClockFreq+0x118>
 80031a8:	e7b7      	b.n	800311a <HAL_RCC_GetSysClockFreq+0x6e>
 80031aa:	bf00      	nop
 80031ac:	58024400 	.word	0x58024400
 80031b0:	003d0900 	.word	0x003d0900
 80031b4:	007a1200 	.word	0x007a1200
 80031b8:	03d09000 	.word	0x03d09000
 80031bc:	4a742400 	.word	0x4a742400
 80031c0:	4af42400 	.word	0x4af42400
 80031c4:	4c742400 	.word	0x4c742400

080031c8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80031c8:	2800      	cmp	r0, #0
 80031ca:	f000 810e 	beq.w	80033ea <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031ce:	4a8d      	ldr	r2, [pc, #564]	@ (8003404 <HAL_RCC_ClockConfig+0x23c>)
 80031d0:	6813      	ldr	r3, [r2, #0]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	428b      	cmp	r3, r1
{
 80031d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031dc:	4604      	mov	r4, r0
 80031de:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031e0:	d20c      	bcs.n	80031fc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e2:	6813      	ldr	r3, [r2, #0]
 80031e4:	f023 030f 	bic.w	r3, r3, #15
 80031e8:	430b      	orrs	r3, r1
 80031ea:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ec:	6813      	ldr	r3, [r2, #0]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	428b      	cmp	r3, r1
 80031f4:	d002      	beq.n	80031fc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80031f6:	2001      	movs	r0, #1
}
 80031f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	0758      	lsls	r0, r3, #29
 8003200:	d50b      	bpl.n	800321a <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003202:	4981      	ldr	r1, [pc, #516]	@ (8003408 <HAL_RCC_ClockConfig+0x240>)
 8003204:	6920      	ldr	r0, [r4, #16]
 8003206:	698a      	ldr	r2, [r1, #24]
 8003208:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800320c:	4290      	cmp	r0, r2
 800320e:	d904      	bls.n	800321a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003210:	698a      	ldr	r2, [r1, #24]
 8003212:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003216:	4302      	orrs	r2, r0
 8003218:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800321a:	0719      	lsls	r1, r3, #28
 800321c:	d50b      	bpl.n	8003236 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800321e:	497a      	ldr	r1, [pc, #488]	@ (8003408 <HAL_RCC_ClockConfig+0x240>)
 8003220:	6960      	ldr	r0, [r4, #20]
 8003222:	69ca      	ldr	r2, [r1, #28]
 8003224:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003228:	4290      	cmp	r0, r2
 800322a:	d904      	bls.n	8003236 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800322c:	69ca      	ldr	r2, [r1, #28]
 800322e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003232:	4302      	orrs	r2, r0
 8003234:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003236:	06da      	lsls	r2, r3, #27
 8003238:	d50b      	bpl.n	8003252 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800323a:	4973      	ldr	r1, [pc, #460]	@ (8003408 <HAL_RCC_ClockConfig+0x240>)
 800323c:	69a0      	ldr	r0, [r4, #24]
 800323e:	69ca      	ldr	r2, [r1, #28]
 8003240:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8003244:	4290      	cmp	r0, r2
 8003246:	d904      	bls.n	8003252 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003248:	69ca      	ldr	r2, [r1, #28]
 800324a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800324e:	4302      	orrs	r2, r0
 8003250:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003252:	069f      	lsls	r7, r3, #26
 8003254:	d50b      	bpl.n	800326e <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003256:	496c      	ldr	r1, [pc, #432]	@ (8003408 <HAL_RCC_ClockConfig+0x240>)
 8003258:	69e0      	ldr	r0, [r4, #28]
 800325a:	6a0a      	ldr	r2, [r1, #32]
 800325c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003260:	4290      	cmp	r0, r2
 8003262:	d904      	bls.n	800326e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003264:	6a0a      	ldr	r2, [r1, #32]
 8003266:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800326a:	4302      	orrs	r2, r0
 800326c:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800326e:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003270:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003274:	f140 80ab 	bpl.w	80033ce <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003278:	4e63      	ldr	r6, [pc, #396]	@ (8003408 <HAL_RCC_ClockConfig+0x240>)
 800327a:	68e0      	ldr	r0, [r4, #12]
 800327c:	69b1      	ldr	r1, [r6, #24]
 800327e:	f001 010f 	and.w	r1, r1, #15
 8003282:	4288      	cmp	r0, r1
 8003284:	d904      	bls.n	8003290 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003286:	69b1      	ldr	r1, [r6, #24]
 8003288:	f021 010f 	bic.w	r1, r1, #15
 800328c:	4301      	orrs	r1, r0
 800328e:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003290:	2a00      	cmp	r2, #0
 8003292:	d030      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003294:	4a5c      	ldr	r2, [pc, #368]	@ (8003408 <HAL_RCC_ClockConfig+0x240>)
 8003296:	68a1      	ldr	r1, [r4, #8]
 8003298:	6993      	ldr	r3, [r2, #24]
 800329a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800329e:	430b      	orrs	r3, r1
 80032a0:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a2:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032a4:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a6:	2902      	cmp	r1, #2
 80032a8:	f000 80a1 	beq.w	80033ee <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ac:	2903      	cmp	r1, #3
 80032ae:	f000 8098 	beq.w	80033e2 <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032b2:	2901      	cmp	r1, #1
 80032b4:	f000 80a1 	beq.w	80033fa <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032b8:	075f      	lsls	r7, r3, #29
 80032ba:	d59c      	bpl.n	80031f6 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032bc:	4e52      	ldr	r6, [pc, #328]	@ (8003408 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032be:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032c2:	6933      	ldr	r3, [r6, #16]
 80032c4:	f023 0307 	bic.w	r3, r3, #7
 80032c8:	430b      	orrs	r3, r1
 80032ca:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 80032cc:	f7fe f830 	bl	8001330 <HAL_GetTick>
 80032d0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d2:	e005      	b.n	80032e0 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d4:	f7fe f82c 	bl	8001330 <HAL_GetTick>
 80032d8:	1bc0      	subs	r0, r0, r7
 80032da:	4540      	cmp	r0, r8
 80032dc:	f200 808b 	bhi.w	80033f6 <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e0:	6933      	ldr	r3, [r6, #16]
 80032e2:	6862      	ldr	r2, [r4, #4]
 80032e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032e8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80032ec:	d1f2      	bne.n	80032d4 <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	079e      	lsls	r6, r3, #30
 80032f2:	d506      	bpl.n	8003302 <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032f4:	68e0      	ldr	r0, [r4, #12]
 80032f6:	4944      	ldr	r1, [pc, #272]	@ (8003408 <HAL_RCC_ClockConfig+0x240>)
 80032f8:	698a      	ldr	r2, [r1, #24]
 80032fa:	f002 020f 	and.w	r2, r2, #15
 80032fe:	4282      	cmp	r2, r0
 8003300:	d869      	bhi.n	80033d6 <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003302:	4940      	ldr	r1, [pc, #256]	@ (8003404 <HAL_RCC_ClockConfig+0x23c>)
 8003304:	680a      	ldr	r2, [r1, #0]
 8003306:	f002 020f 	and.w	r2, r2, #15
 800330a:	42aa      	cmp	r2, r5
 800330c:	d90a      	bls.n	8003324 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	680a      	ldr	r2, [r1, #0]
 8003310:	f022 020f 	bic.w	r2, r2, #15
 8003314:	432a      	orrs	r2, r5
 8003316:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003318:	680a      	ldr	r2, [r1, #0]
 800331a:	f002 020f 	and.w	r2, r2, #15
 800331e:	42aa      	cmp	r2, r5
 8003320:	f47f af69 	bne.w	80031f6 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003324:	0758      	lsls	r0, r3, #29
 8003326:	d50b      	bpl.n	8003340 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003328:	4937      	ldr	r1, [pc, #220]	@ (8003408 <HAL_RCC_ClockConfig+0x240>)
 800332a:	6920      	ldr	r0, [r4, #16]
 800332c:	698a      	ldr	r2, [r1, #24]
 800332e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003332:	4290      	cmp	r0, r2
 8003334:	d204      	bcs.n	8003340 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003336:	698a      	ldr	r2, [r1, #24]
 8003338:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800333c:	4302      	orrs	r2, r0
 800333e:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	0719      	lsls	r1, r3, #28
 8003342:	d50b      	bpl.n	800335c <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003344:	4930      	ldr	r1, [pc, #192]	@ (8003408 <HAL_RCC_ClockConfig+0x240>)
 8003346:	6960      	ldr	r0, [r4, #20]
 8003348:	69ca      	ldr	r2, [r1, #28]
 800334a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800334e:	4290      	cmp	r0, r2
 8003350:	d204      	bcs.n	800335c <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003352:	69ca      	ldr	r2, [r1, #28]
 8003354:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003358:	4302      	orrs	r2, r0
 800335a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335c:	06da      	lsls	r2, r3, #27
 800335e:	d50b      	bpl.n	8003378 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003360:	4929      	ldr	r1, [pc, #164]	@ (8003408 <HAL_RCC_ClockConfig+0x240>)
 8003362:	69a0      	ldr	r0, [r4, #24]
 8003364:	69ca      	ldr	r2, [r1, #28]
 8003366:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800336a:	4290      	cmp	r0, r2
 800336c:	d204      	bcs.n	8003378 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800336e:	69ca      	ldr	r2, [r1, #28]
 8003370:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003374:	4302      	orrs	r2, r0
 8003376:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003378:	069b      	lsls	r3, r3, #26
 800337a:	d50b      	bpl.n	8003394 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800337c:	4a22      	ldr	r2, [pc, #136]	@ (8003408 <HAL_RCC_ClockConfig+0x240>)
 800337e:	69e1      	ldr	r1, [r4, #28]
 8003380:	6a13      	ldr	r3, [r2, #32]
 8003382:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003386:	4299      	cmp	r1, r3
 8003388:	d204      	bcs.n	8003394 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800338a:	6a13      	ldr	r3, [r2, #32]
 800338c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003390:	430b      	orrs	r3, r1
 8003392:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003394:	f7ff fe8a 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 8003398:	4a1b      	ldr	r2, [pc, #108]	@ (8003408 <HAL_RCC_ClockConfig+0x240>)
 800339a:	4603      	mov	r3, r0
 800339c:	481b      	ldr	r0, [pc, #108]	@ (800340c <HAL_RCC_ClockConfig+0x244>)
 800339e:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033a0:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033a2:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 80033a6:	4d1a      	ldr	r5, [pc, #104]	@ (8003410 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033a8:	f002 020f 	and.w	r2, r2, #15
 80033ac:	4c19      	ldr	r4, [pc, #100]	@ (8003414 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033ae:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033b0:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033b2:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 80033b6:	4818      	ldr	r0, [pc, #96]	@ (8003418 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033b8:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033bc:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 80033be:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80033c0:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033c2:	40d3      	lsrs	r3, r2
 80033c4:	6023      	str	r3, [r4, #0]
}
 80033c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80033ca:	f7fd bf4f 	b.w	800126c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ce:	2a00      	cmp	r2, #0
 80033d0:	f47f af60 	bne.w	8003294 <HAL_RCC_ClockConfig+0xcc>
 80033d4:	e795      	b.n	8003302 <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d6:	698a      	ldr	r2, [r1, #24]
 80033d8:	f022 020f 	bic.w	r2, r2, #15
 80033dc:	4302      	orrs	r2, r0
 80033de:	618a      	str	r2, [r1, #24]
 80033e0:	e78f      	b.n	8003302 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033e2:	019a      	lsls	r2, r3, #6
 80033e4:	f53f af6a 	bmi.w	80032bc <HAL_RCC_ClockConfig+0xf4>
 80033e8:	e705      	b.n	80031f6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80033ea:	2001      	movs	r0, #1
}
 80033ec:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033ee:	0398      	lsls	r0, r3, #14
 80033f0:	f53f af64 	bmi.w	80032bc <HAL_RCC_ClockConfig+0xf4>
 80033f4:	e6ff      	b.n	80031f6 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80033f6:	2003      	movs	r0, #3
 80033f8:	e6fe      	b.n	80031f8 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033fa:	05db      	lsls	r3, r3, #23
 80033fc:	f53f af5e 	bmi.w	80032bc <HAL_RCC_ClockConfig+0xf4>
 8003400:	e6f9      	b.n	80031f6 <HAL_RCC_ClockConfig+0x2e>
 8003402:	bf00      	nop
 8003404:	52002000 	.word	0x52002000
 8003408:	58024400 	.word	0x58024400
 800340c:	08005994 	.word	0x08005994
 8003410:	24000004 	.word	0x24000004
 8003414:	24000000 	.word	0x24000000
 8003418:	2400000c 	.word	0x2400000c

0800341c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800341c:	4a18      	ldr	r2, [pc, #96]	@ (8003480 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800341e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003420:	6913      	ldr	r3, [r2, #16]
 8003422:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003426:	2b10      	cmp	r3, #16
 8003428:	d019      	beq.n	800345e <HAL_RCC_GetHCLKFreq+0x42>
 800342a:	2b18      	cmp	r3, #24
 800342c:	d022      	beq.n	8003474 <HAL_RCC_GetHCLKFreq+0x58>
 800342e:	b1c3      	cbz	r3, 8003462 <HAL_RCC_GetHCLKFreq+0x46>
      sysclockfreq = CSI_VALUE;
 8003430:	4b14      	ldr	r3, [pc, #80]	@ (8003484 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003432:	4913      	ldr	r1, [pc, #76]	@ (8003480 <HAL_RCC_GetHCLKFreq+0x64>)
 8003434:	4814      	ldr	r0, [pc, #80]	@ (8003488 <HAL_RCC_GetHCLKFreq+0x6c>)
 8003436:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003438:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800343a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800343e:	4c13      	ldr	r4, [pc, #76]	@ (800348c <HAL_RCC_GetHCLKFreq+0x70>)
 8003440:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003444:	4d12      	ldr	r5, [pc, #72]	@ (8003490 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003446:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003448:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800344a:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800344e:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003452:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003454:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8003458:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800345a:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800345c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800345e:	4b0d      	ldr	r3, [pc, #52]	@ (8003494 <HAL_RCC_GetHCLKFreq+0x78>)
 8003460:	e7e7      	b.n	8003432 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003462:	6813      	ldr	r3, [r2, #0]
 8003464:	069b      	lsls	r3, r3, #26
 8003466:	d509      	bpl.n	800347c <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <HAL_RCC_GetHCLKFreq+0x7c>)
 800346c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003470:	40d3      	lsrs	r3, r2
 8003472:	e7de      	b.n	8003432 <HAL_RCC_GetHCLKFreq+0x16>
 8003474:	f7ff fab6 	bl	80029e4 <HAL_RCC_GetSysClockFreq.part.0>
 8003478:	4603      	mov	r3, r0
 800347a:	e7da      	b.n	8003432 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800347c:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <HAL_RCC_GetHCLKFreq+0x7c>)
 800347e:	e7d8      	b.n	8003432 <HAL_RCC_GetHCLKFreq+0x16>
 8003480:	58024400 	.word	0x58024400
 8003484:	003d0900 	.word	0x003d0900
 8003488:	08005994 	.word	0x08005994
 800348c:	24000000 	.word	0x24000000
 8003490:	24000004 	.word	0x24000004
 8003494:	007a1200 	.word	0x007a1200
 8003498:	03d09000 	.word	0x03d09000

0800349c <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800349c:	4a1c      	ldr	r2, [pc, #112]	@ (8003510 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800349e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034a0:	6913      	ldr	r3, [r2, #16]
 80034a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034a6:	2b10      	cmp	r3, #16
 80034a8:	d020      	beq.n	80034ec <HAL_RCC_GetPCLK1Freq+0x50>
 80034aa:	2b18      	cmp	r3, #24
 80034ac:	d029      	beq.n	8003502 <HAL_RCC_GetPCLK1Freq+0x66>
 80034ae:	b1fb      	cbz	r3, 80034f0 <HAL_RCC_GetPCLK1Freq+0x54>
      sysclockfreq = CSI_VALUE;
 80034b0:	4b18      	ldr	r3, [pc, #96]	@ (8003514 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034b2:	4a17      	ldr	r2, [pc, #92]	@ (8003510 <HAL_RCC_GetPCLK1Freq+0x74>)
 80034b4:	4918      	ldr	r1, [pc, #96]	@ (8003518 <HAL_RCC_GetPCLK1Freq+0x7c>)
 80034b6:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 80034b8:	4d18      	ldr	r5, [pc, #96]	@ (800351c <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034ba:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034be:	4c18      	ldr	r4, [pc, #96]	@ (8003520 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034c0:	5c08      	ldrb	r0, [r1, r0]
 80034c2:	f000 001f 	and.w	r0, r0, #31
 80034c6:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034c8:	6990      	ldr	r0, [r2, #24]
 80034ca:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 80034ce:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034d0:	5c08      	ldrb	r0, [r1, r0]
 80034d2:	f000 001f 	and.w	r0, r0, #31
 80034d6:	40c3      	lsrs	r3, r0
 80034d8:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80034da:	69d2      	ldr	r2, [r2, #28]
 80034dc:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80034e0:	5c88      	ldrb	r0, [r1, r2]
 80034e2:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80034e6:	fa23 f000 	lsr.w	r0, r3, r0
 80034ea:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003524 <HAL_RCC_GetPCLK1Freq+0x88>)
 80034ee:	e7e0      	b.n	80034b2 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034f0:	6813      	ldr	r3, [r2, #0]
 80034f2:	069b      	lsls	r3, r3, #26
 80034f4:	d509      	bpl.n	800350a <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003528 <HAL_RCC_GetPCLK1Freq+0x8c>)
 80034fa:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80034fe:	40d3      	lsrs	r3, r2
 8003500:	e7d7      	b.n	80034b2 <HAL_RCC_GetPCLK1Freq+0x16>
 8003502:	f7ff fa6f 	bl	80029e4 <HAL_RCC_GetSysClockFreq.part.0>
 8003506:	4603      	mov	r3, r0
 8003508:	e7d3      	b.n	80034b2 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800350a:	4b07      	ldr	r3, [pc, #28]	@ (8003528 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800350c:	e7d1      	b.n	80034b2 <HAL_RCC_GetPCLK1Freq+0x16>
 800350e:	bf00      	nop
 8003510:	58024400 	.word	0x58024400
 8003514:	003d0900 	.word	0x003d0900
 8003518:	08005994 	.word	0x08005994
 800351c:	24000004 	.word	0x24000004
 8003520:	24000000 	.word	0x24000000
 8003524:	007a1200 	.word	0x007a1200
 8003528:	03d09000 	.word	0x03d09000

0800352c <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800352c:	4a1c      	ldr	r2, [pc, #112]	@ (80035a0 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800352e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003530:	6913      	ldr	r3, [r2, #16]
 8003532:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003536:	2b10      	cmp	r3, #16
 8003538:	d020      	beq.n	800357c <HAL_RCC_GetPCLK2Freq+0x50>
 800353a:	2b18      	cmp	r3, #24
 800353c:	d029      	beq.n	8003592 <HAL_RCC_GetPCLK2Freq+0x66>
 800353e:	b1fb      	cbz	r3, 8003580 <HAL_RCC_GetPCLK2Freq+0x54>
      sysclockfreq = CSI_VALUE;
 8003540:	4b18      	ldr	r3, [pc, #96]	@ (80035a4 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003542:	4a17      	ldr	r2, [pc, #92]	@ (80035a0 <HAL_RCC_GetPCLK2Freq+0x74>)
 8003544:	4918      	ldr	r1, [pc, #96]	@ (80035a8 <HAL_RCC_GetPCLK2Freq+0x7c>)
 8003546:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8003548:	4d18      	ldr	r5, [pc, #96]	@ (80035ac <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800354a:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800354e:	4c18      	ldr	r4, [pc, #96]	@ (80035b0 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003550:	5c08      	ldrb	r0, [r1, r0]
 8003552:	f000 001f 	and.w	r0, r0, #31
 8003556:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003558:	6990      	ldr	r0, [r2, #24]
 800355a:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800355e:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003560:	5c08      	ldrb	r0, [r1, r0]
 8003562:	f000 001f 	and.w	r0, r0, #31
 8003566:	40c3      	lsrs	r3, r0
 8003568:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800356a:	69d2      	ldr	r2, [r2, #28]
 800356c:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8003570:	5c88      	ldrb	r0, [r1, r2]
 8003572:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003576:	fa23 f000 	lsr.w	r0, r3, r0
 800357a:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800357c:	4b0d      	ldr	r3, [pc, #52]	@ (80035b4 <HAL_RCC_GetPCLK2Freq+0x88>)
 800357e:	e7e0      	b.n	8003542 <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003580:	6813      	ldr	r3, [r2, #0]
 8003582:	069b      	lsls	r3, r3, #26
 8003584:	d509      	bpl.n	800359a <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003586:	6812      	ldr	r2, [r2, #0]
 8003588:	4b0b      	ldr	r3, [pc, #44]	@ (80035b8 <HAL_RCC_GetPCLK2Freq+0x8c>)
 800358a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800358e:	40d3      	lsrs	r3, r2
 8003590:	e7d7      	b.n	8003542 <HAL_RCC_GetPCLK2Freq+0x16>
 8003592:	f7ff fa27 	bl	80029e4 <HAL_RCC_GetSysClockFreq.part.0>
 8003596:	4603      	mov	r3, r0
 8003598:	e7d3      	b.n	8003542 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800359a:	4b07      	ldr	r3, [pc, #28]	@ (80035b8 <HAL_RCC_GetPCLK2Freq+0x8c>)
 800359c:	e7d1      	b.n	8003542 <HAL_RCC_GetPCLK2Freq+0x16>
 800359e:	bf00      	nop
 80035a0:	58024400 	.word	0x58024400
 80035a4:	003d0900 	.word	0x003d0900
 80035a8:	08005994 	.word	0x08005994
 80035ac:	24000004 	.word	0x24000004
 80035b0:	24000000 	.word	0x24000000
 80035b4:	007a1200 	.word	0x007a1200
 80035b8:	03d09000 	.word	0x03d09000

080035bc <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80035bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80035be:	4c36      	ldr	r4, [pc, #216]	@ (8003698 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80035c0:	4606      	mov	r6, r0
 80035c2:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80035ca:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035cc:	f7fd feb0 	bl	8001330 <HAL_GetTick>
 80035d0:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80035d2:	e004      	b.n	80035de <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80035d4:	f7fd feac 	bl	8001330 <HAL_GetTick>
 80035d8:	1b40      	subs	r0, r0, r5
 80035da:	2802      	cmp	r0, #2
 80035dc:	d856      	bhi.n	800368c <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	011a      	lsls	r2, r3, #4
 80035e2:	d4f7      	bmi.n	80035d4 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80035e4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80035e6:	6832      	ldr	r2, [r6, #0]
 80035e8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80035ec:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80035f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80035f2:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	3a01      	subs	r2, #1
 80035fa:	025b      	lsls	r3, r3, #9
 80035fc:	0412      	lsls	r2, r2, #16
 80035fe:	b29b      	uxth	r3, r3
 8003600:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003604:	4313      	orrs	r3, r2
 8003606:	6872      	ldr	r2, [r6, #4]
 8003608:	3a01      	subs	r2, #1
 800360a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800360e:	4313      	orrs	r3, r2
 8003610:	6932      	ldr	r2, [r6, #16]
 8003612:	3a01      	subs	r2, #1
 8003614:	0612      	lsls	r2, r2, #24
 8003616:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800361a:	4313      	orrs	r3, r2
 800361c:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800361e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003620:	6972      	ldr	r2, [r6, #20]
 8003622:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003626:	4313      	orrs	r3, r2
 8003628:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800362a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800362c:	69b3      	ldr	r3, [r6, #24]
 800362e:	f022 0220 	bic.w	r2, r2, #32
 8003632:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003634:	4b19      	ldr	r3, [pc, #100]	@ (800369c <RCCEx_PLL2_Config.part.0+0xe0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003636:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003638:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800363a:	f022 0210 	bic.w	r2, r2, #16
 800363e:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003640:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8003642:	69f2      	ldr	r2, [r6, #28]
 8003644:	400b      	ands	r3, r1
 8003646:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800364a:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800364c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800364e:	f043 0310 	orr.w	r3, r3, #16
 8003652:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003654:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8003656:	b1df      	cbz	r7, 8003690 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003658:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800365a:	bf0c      	ite	eq
 800365c:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003660:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8003664:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003666:	4c0c      	ldr	r4, [pc, #48]	@ (8003698 <RCCEx_PLL2_Config.part.0+0xdc>)
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800366e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003670:	f7fd fe5e 	bl	8001330 <HAL_GetTick>
 8003674:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003676:	e004      	b.n	8003682 <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003678:	f7fd fe5a 	bl	8001330 <HAL_GetTick>
 800367c:	1b40      	subs	r0, r0, r5
 800367e:	2802      	cmp	r0, #2
 8003680:	d804      	bhi.n	800368c <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	d5f7      	bpl.n	8003678 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8003688:	2000      	movs	r0, #0
}
 800368a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800368c:	2003      	movs	r0, #3
}
 800368e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003690:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003694:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003696:	e7e6      	b.n	8003666 <RCCEx_PLL2_Config.part.0+0xaa>
 8003698:	58024400 	.word	0x58024400
 800369c:	ffff0007 	.word	0xffff0007

080036a0 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 80036a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80036a2:	4c36      	ldr	r4, [pc, #216]	@ (800377c <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 80036a4:	4606      	mov	r6, r0
 80036a6:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 80036a8:	6823      	ldr	r3, [r4, #0]
 80036aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036ae:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b0:	f7fd fe3e 	bl	8001330 <HAL_GetTick>
 80036b4:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80036b6:	e004      	b.n	80036c2 <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80036b8:	f7fd fe3a 	bl	8001330 <HAL_GetTick>
 80036bc:	1b40      	subs	r0, r0, r5
 80036be:	2802      	cmp	r0, #2
 80036c0:	d856      	bhi.n	8003770 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	009a      	lsls	r2, r3, #2
 80036c6:	d4f7      	bmi.n	80036b8 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80036c8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80036ca:	6832      	ldr	r2, [r6, #0]
 80036cc:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 80036d0:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80036d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80036d6:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80036da:	3b01      	subs	r3, #1
 80036dc:	3a01      	subs	r2, #1
 80036de:	025b      	lsls	r3, r3, #9
 80036e0:	0412      	lsls	r2, r2, #16
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80036e8:	4313      	orrs	r3, r2
 80036ea:	6872      	ldr	r2, [r6, #4]
 80036ec:	3a01      	subs	r2, #1
 80036ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036f2:	4313      	orrs	r3, r2
 80036f4:	6932      	ldr	r2, [r6, #16]
 80036f6:	3a01      	subs	r2, #1
 80036f8:	0612      	lsls	r2, r2, #24
 80036fa:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80036fe:	4313      	orrs	r3, r2
 8003700:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003702:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003704:	6972      	ldr	r2, [r6, #20]
 8003706:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800370a:	4313      	orrs	r3, r2
 800370c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800370e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003710:	69b3      	ldr	r3, [r6, #24]
 8003712:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003716:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003718:	4b19      	ldr	r3, [pc, #100]	@ (8003780 <RCCEx_PLL3_Config.part.0+0xe0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800371a:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800371c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800371e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003722:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003724:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003726:	69f2      	ldr	r2, [r6, #28]
 8003728:	400b      	ands	r3, r1
 800372a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800372e:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003730:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003736:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003738:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800373a:	b1df      	cbz	r7, 8003774 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800373c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800373e:	bf0c      	ite	eq
 8003740:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003744:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8003748:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800374a:	4c0c      	ldr	r4, [pc, #48]	@ (800377c <RCCEx_PLL3_Config.part.0+0xdc>)
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003752:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003754:	f7fd fdec 	bl	8001330 <HAL_GetTick>
 8003758:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800375a:	e004      	b.n	8003766 <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800375c:	f7fd fde8 	bl	8001330 <HAL_GetTick>
 8003760:	1b40      	subs	r0, r0, r5
 8003762:	2802      	cmp	r0, #2
 8003764:	d804      	bhi.n	8003770 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003766:	6823      	ldr	r3, [r4, #0]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	d5f7      	bpl.n	800375c <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 800376c:	2000      	movs	r0, #0
}
 800376e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003770:	2003      	movs	r0, #3
}
 8003772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003774:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003778:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800377a:	e7e6      	b.n	800374a <RCCEx_PLL3_Config.part.0+0xaa>
 800377c:	58024400 	.word	0x58024400
 8003780:	ffff0007 	.word	0xffff0007

08003784 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003788:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800378c:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800378e:	011d      	lsls	r5, r3, #4
 8003790:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 8003794:	d525      	bpl.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003796:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8003798:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800379c:	f000 8660 	beq.w	8004460 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80037a0:	d814      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x48>
 80037a2:	2900      	cmp	r1, #0
 80037a4:	f000 86fa 	beq.w	800459c <HAL_RCCEx_PeriphCLKConfig+0xe18>
 80037a8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80037ac:	f040 8466 	bne.w	800407c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80037b0:	49ad      	ldr	r1, [pc, #692]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037b2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80037b4:	f001 0103 	and.w	r1, r1, #3
 80037b8:	2903      	cmp	r1, #3
 80037ba:	f000 845f 	beq.w	800407c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 80037be:	2102      	movs	r1, #2
 80037c0:	3008      	adds	r0, #8
 80037c2:	f7ff fefb 	bl	80035bc <RCCEx_PLL2_Config.part.0>
 80037c6:	4606      	mov	r6, r0
        break;
 80037c8:	f000 be56 	b.w	8004478 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80037cc:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 80037d0:	f040 8454 	bne.w	800407c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037d4:	4da4      	ldr	r5, [pc, #656]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037d6:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037d8:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 80037da:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 80037de:	4301      	orrs	r1, r0
 80037e0:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037e2:	05d8      	lsls	r0, r3, #23
 80037e4:	d50a      	bpl.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch (PeriphClkInit->Sai1ClockSelection)
 80037e6:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80037e8:	2904      	cmp	r1, #4
 80037ea:	d806      	bhi.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037ec:	e8df f011 	tbh	[pc, r1, lsl #1]
 80037f0:	064c04a8 	.word	0x064c04a8
 80037f4:	04ad0661 	.word	0x04ad0661
 80037f8:	04ad      	.short	0x04ad
 80037fa:	2601      	movs	r6, #1
 80037fc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80037fe:	0599      	lsls	r1, r3, #22
 8003800:	d524      	bpl.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch (PeriphClkInit->Sai23ClockSelection)
 8003802:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8003804:	2980      	cmp	r1, #128	@ 0x80
 8003806:	f000 8664 	beq.w	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800380a:	f200 8122 	bhi.w	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800380e:	2900      	cmp	r1, #0
 8003810:	f000 84ac 	beq.w	800416c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8003814:	2940      	cmp	r1, #64	@ 0x40
 8003816:	f040 8123 	bne.w	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800381a:	4993      	ldr	r1, [pc, #588]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800381c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800381e:	f001 0103 	and.w	r1, r1, #3
 8003822:	2903      	cmp	r1, #3
 8003824:	f000 811c 	beq.w	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8003828:	2100      	movs	r1, #0
 800382a:	f104 0008 	add.w	r0, r4, #8
 800382e:	f7ff fec5 	bl	80035bc <RCCEx_PLL2_Config.part.0>
 8003832:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003834:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003838:	2d00      	cmp	r5, #0
 800383a:	f040 851b 	bne.w	8004274 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800383e:	4f8a      	ldr	r7, [pc, #552]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003840:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8003842:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003844:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8003848:	4301      	orrs	r1, r0
 800384a:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800384c:	055f      	lsls	r7, r3, #21
 800384e:	d528      	bpl.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4AClockSelection)
 8003850:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8003854:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8003858:	f000 864f 	beq.w	80044fa <HAL_RCCEx_PeriphCLKConfig+0xd76>
 800385c:	f200 8106 	bhi.w	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003860:	2900      	cmp	r1, #0
 8003862:	f000 8463 	beq.w	800412c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8003866:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800386a:	f040 8107 	bne.w	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800386e:	497e      	ldr	r1, [pc, #504]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003870:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003872:	f001 0103 	and.w	r1, r1, #3
 8003876:	2903      	cmp	r1, #3
 8003878:	f000 8100 	beq.w	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800387c:	2100      	movs	r1, #0
 800387e:	f104 0008 	add.w	r0, r4, #8
 8003882:	f7ff fe9b 	bl	80035bc <RCCEx_PLL2_Config.part.0>
 8003886:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003888:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800388c:	2d00      	cmp	r5, #0
 800388e:	f040 84f4 	bne.w	800427a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003892:	4f75      	ldr	r7, [pc, #468]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003894:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8003898:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800389a:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 800389e:	4301      	orrs	r1, r0
 80038a0:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038a2:	0518      	lsls	r0, r3, #20
 80038a4:	d528      	bpl.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch (PeriphClkInit->Sai4BClockSelection)
 80038a6:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 80038aa:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 80038ae:	f000 85ac 	beq.w	800440a <HAL_RCCEx_PeriphCLKConfig+0xc86>
 80038b2:	f200 80e6 	bhi.w	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80038b6:	2900      	cmp	r1, #0
 80038b8:	f000 8425 	beq.w	8004106 <HAL_RCCEx_PeriphCLKConfig+0x982>
 80038bc:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 80038c0:	f040 80e7 	bne.w	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80038c4:	4968      	ldr	r1, [pc, #416]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038c6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80038c8:	f001 0103 	and.w	r1, r1, #3
 80038cc:	2903      	cmp	r1, #3
 80038ce:	f000 80e0 	beq.w	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80038d2:	2100      	movs	r1, #0
 80038d4:	f104 0008 	add.w	r0, r4, #8
 80038d8:	f7ff fe70 	bl	80035bc <RCCEx_PLL2_Config.part.0>
 80038dc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038de:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80038e2:	2d00      	cmp	r5, #0
 80038e4:	f040 84cc 	bne.w	8004280 <HAL_RCCEx_PeriphCLKConfig+0xafc>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038e8:	4f5f      	ldr	r7, [pc, #380]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038ea:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 80038ee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80038f0:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 80038f4:	4301      	orrs	r1, r0
 80038f6:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038f8:	0199      	lsls	r1, r3, #6
 80038fa:	d518      	bpl.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch (PeriphClkInit->QspiClockSelection)
 80038fc:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80038fe:	2920      	cmp	r1, #32
 8003900:	f000 84ff 	beq.w	8004302 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
 8003904:	f200 80c8 	bhi.w	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003908:	b139      	cbz	r1, 800391a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800390a:	2910      	cmp	r1, #16
 800390c:	f040 80c7 	bne.w	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003910:	4855      	ldr	r0, [pc, #340]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003912:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003914:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003918:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800391a:	2d00      	cmp	r5, #0
 800391c:	f040 849f 	bne.w	800425e <HAL_RCCEx_PeriphCLKConfig+0xada>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003920:	4f51      	ldr	r7, [pc, #324]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003922:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003924:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003926:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 800392a:	4301      	orrs	r1, r0
 800392c:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800392e:	04df      	lsls	r7, r3, #19
 8003930:	d526      	bpl.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    switch (PeriphClkInit->Spi123ClockSelection)
 8003932:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8003934:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8003938:	f000 857b 	beq.w	8004432 <HAL_RCCEx_PeriphCLKConfig+0xcae>
 800393c:	f200 80b2 	bhi.w	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x320>
 8003940:	2900      	cmp	r1, #0
 8003942:	f000 83ea 	beq.w	800411a <HAL_RCCEx_PeriphCLKConfig+0x996>
 8003946:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800394a:	f040 80b3 	bne.w	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800394e:	4946      	ldr	r1, [pc, #280]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003950:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003952:	f001 0103 	and.w	r1, r1, #3
 8003956:	2903      	cmp	r1, #3
 8003958:	f000 80ac 	beq.w	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800395c:	2100      	movs	r1, #0
 800395e:	f104 0008 	add.w	r0, r4, #8
 8003962:	f7ff fe2b 	bl	80035bc <RCCEx_PLL2_Config.part.0>
 8003966:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003968:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800396c:	2d00      	cmp	r5, #0
 800396e:	f040 848a 	bne.w	8004286 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003972:	4f3d      	ldr	r7, [pc, #244]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003974:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8003976:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003978:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800397c:	4301      	orrs	r1, r0
 800397e:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003980:	0498      	lsls	r0, r3, #18
 8003982:	d524      	bpl.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->Spi45ClockSelection)
 8003984:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8003986:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800398a:	f000 8516 	beq.w	80043ba <HAL_RCCEx_PeriphCLKConfig+0xc36>
 800398e:	f200 8094 	bhi.w	8003aba <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003992:	b191      	cbz	r1, 80039ba <HAL_RCCEx_PeriphCLKConfig+0x236>
 8003994:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8003998:	f040 8099 	bne.w	8003ace <HAL_RCCEx_PeriphCLKConfig+0x34a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800399c:	4932      	ldr	r1, [pc, #200]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800399e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80039a0:	f001 0103 	and.w	r1, r1, #3
 80039a4:	2903      	cmp	r1, #3
 80039a6:	f000 8092 	beq.w	8003ace <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80039aa:	2101      	movs	r1, #1
 80039ac:	f104 0008 	add.w	r0, r4, #8
 80039b0:	f7ff fe04 	bl	80035bc <RCCEx_PLL2_Config.part.0>
 80039b4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80039b6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80039ba:	2d00      	cmp	r5, #0
 80039bc:	f040 8476 	bne.w	80042ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80039c0:	4f29      	ldr	r7, [pc, #164]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039c2:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80039c4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80039c6:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80039ca:	4301      	orrs	r1, r0
 80039cc:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80039ce:	0459      	lsls	r1, r3, #17
 80039d0:	d523      	bpl.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch (PeriphClkInit->Spi6ClockSelection)
 80039d2:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 80039d6:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80039da:	f000 8502 	beq.w	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 80039de:	d879      	bhi.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80039e0:	b181      	cbz	r1, 8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>
 80039e2:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80039e6:	d17d      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80039e8:	491f      	ldr	r1, [pc, #124]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039ea:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80039ec:	f001 0103 	and.w	r1, r1, #3
 80039f0:	2903      	cmp	r1, #3
 80039f2:	d077      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80039f4:	2101      	movs	r1, #1
 80039f6:	f104 0008 	add.w	r0, r4, #8
 80039fa:	f7ff fddf 	bl	80035bc <RCCEx_PLL2_Config.part.0>
 80039fe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a00:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003a04:	2d00      	cmp	r5, #0
 8003a06:	f040 8454 	bne.w	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a0a:	4f17      	ldr	r7, [pc, #92]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a0c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8003a10:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003a12:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8003a16:	4301      	orrs	r1, r0
 8003a18:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a1a:	041f      	lsls	r7, r3, #16
 8003a1c:	d50d      	bpl.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch (PeriphClkInit->FdcanClockSelection)
 8003a1e:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8003a20:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8003a24:	f000 82e2 	beq.w	8003fec <HAL_RCCEx_PeriphCLKConfig+0x868>
 8003a28:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8003a2c:	f000 83f0 	beq.w	8004210 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
 8003a30:	2900      	cmp	r1, #0
 8003a32:	f000 82e0 	beq.w	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x872>
 8003a36:	2601      	movs	r6, #1
 8003a38:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a3a:	01d8      	lsls	r0, r3, #7
 8003a3c:	d55e      	bpl.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x378>
    switch (PeriphClkInit->FmcClockSelection)
 8003a3e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003a40:	2903      	cmp	r1, #3
 8003a42:	f200 85cd 	bhi.w	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003a46:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003a4a:	0055      	.short	0x0055
 8003a4c:	04930050 	.word	0x04930050
 8003a50:	0055      	.short	0x0055
    switch (PeriphClkInit->Sai23ClockSelection)
 8003a52:	29c0      	cmp	r1, #192	@ 0xc0
 8003a54:	f43f aef0 	beq.w	8003838 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003a58:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8003a5c:	f43f aeec 	beq.w	8003838 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003a60:	2601      	movs	r6, #1
 8003a62:	4635      	mov	r5, r6
 8003a64:	e6f2      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8003a66:	bf00      	nop
 8003a68:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Sai4AClockSelection)
 8003a6c:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 8003a70:	f43f af0c 	beq.w	800388c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003a74:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8003a78:	f43f af08 	beq.w	800388c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003a7c:	2601      	movs	r6, #1
 8003a7e:	4635      	mov	r5, r6
 8003a80:	e70f      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4BClockSelection)
 8003a82:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8003a86:	f43f af2c 	beq.w	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003a8a:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8003a8e:	f43f af28 	beq.w	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003a92:	2601      	movs	r6, #1
 8003a94:	4635      	mov	r5, r6
 8003a96:	e72f      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch (PeriphClkInit->QspiClockSelection)
 8003a98:	2930      	cmp	r1, #48	@ 0x30
 8003a9a:	f43f af3e 	beq.w	800391a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a9e:	2601      	movs	r6, #1
 8003aa0:	4635      	mov	r5, r6
 8003aa2:	e744      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch (PeriphClkInit->Spi123ClockSelection)
 8003aa4:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8003aa8:	f43f af60 	beq.w	800396c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003aac:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8003ab0:	f43f af5c 	beq.w	800396c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ab4:	2601      	movs	r6, #1
 8003ab6:	4635      	mov	r5, r6
 8003ab8:	e762      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    switch (PeriphClkInit->Spi45ClockSelection)
 8003aba:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8003abe:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8003ac2:	f43f af7a 	beq.w	80039ba <HAL_RCCEx_PeriphCLKConfig+0x236>
 8003ac6:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8003aca:	f43f af76 	beq.w	80039ba <HAL_RCCEx_PeriphCLKConfig+0x236>
 8003ace:	2601      	movs	r6, #1
 8003ad0:	4635      	mov	r5, r6
 8003ad2:	e77c      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ad4:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8003ad8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003adc:	d092      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8003ade:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8003ae2:	d08f      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8003ae4:	2601      	movs	r6, #1
 8003ae6:	4635      	mov	r5, r6
 8003ae8:	e797      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x296>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aea:	4837      	ldr	r0, [pc, #220]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003aec:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003aee:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003af2:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003af4:	2d00      	cmp	r5, #0
 8003af6:	f000 83b5 	beq.w	8004264 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003afa:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003afc:	0259      	lsls	r1, r3, #9
 8003afe:	f100 82c0 	bmi.w	8004082 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b02:	07df      	lsls	r7, r3, #31
 8003b04:	d52f      	bpl.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b06:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8003b08:	2928      	cmp	r1, #40	@ 0x28
 8003b0a:	d82a      	bhi.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003b0c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003b10:	002902ab 	.word	0x002902ab
 8003b14:	00290029 	.word	0x00290029
 8003b18:	00290029 	.word	0x00290029
 8003b1c:	00290029 	.word	0x00290029
 8003b20:	0029029c 	.word	0x0029029c
 8003b24:	00290029 	.word	0x00290029
 8003b28:	00290029 	.word	0x00290029
 8003b2c:	00290029 	.word	0x00290029
 8003b30:	0029052d 	.word	0x0029052d
 8003b34:	00290029 	.word	0x00290029
 8003b38:	00290029 	.word	0x00290029
 8003b3c:	00290029 	.word	0x00290029
 8003b40:	002902ab 	.word	0x002902ab
 8003b44:	00290029 	.word	0x00290029
 8003b48:	00290029 	.word	0x00290029
 8003b4c:	00290029 	.word	0x00290029
 8003b50:	002902ab 	.word	0x002902ab
 8003b54:	00290029 	.word	0x00290029
 8003b58:	00290029 	.word	0x00290029
 8003b5c:	00290029 	.word	0x00290029
 8003b60:	02ab      	.short	0x02ab
 8003b62:	2601      	movs	r6, #1
 8003b64:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b66:	0798      	lsls	r0, r3, #30
 8003b68:	d51e      	bpl.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003b6a:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8003b6c:	2905      	cmp	r1, #5
 8003b6e:	f200 851c 	bhi.w	80045aa <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8003b72:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003b76:	0015      	.short	0x0015
 8003b78:	04e80006 	.word	0x04e80006
 8003b7c:	00150015 	.word	0x00150015
 8003b80:	0015      	.short	0x0015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b82:	4911      	ldr	r1, [pc, #68]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003b84:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003b86:	f001 0103 	and.w	r1, r1, #3
 8003b8a:	2903      	cmp	r1, #3
 8003b8c:	f000 850d 	beq.w	80045aa <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8003b90:	2101      	movs	r1, #1
 8003b92:	f104 0008 	add.w	r0, r4, #8
 8003b96:	f7ff fd11 	bl	80035bc <RCCEx_PLL2_Config.part.0>
 8003b9a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b9c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003ba0:	2d00      	cmp	r5, #0
 8003ba2:	f000 837b 	beq.w	800429c <HAL_RCCEx_PeriphCLKConfig+0xb18>
 8003ba6:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ba8:	0759      	lsls	r1, r3, #29
 8003baa:	d522      	bpl.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003bac:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8003bb0:	2905      	cmp	r1, #5
 8003bb2:	f200 84fe 	bhi.w	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8003bb6:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003bba:	0018      	.short	0x0018
 8003bbc:	04b40009 	.word	0x04b40009
 8003bc0:	00180018 	.word	0x00180018
 8003bc4:	0018      	.short	0x0018
 8003bc6:	bf00      	nop
 8003bc8:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003bcc:	49b0      	ldr	r1, [pc, #704]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003bce:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003bd0:	f001 0103 	and.w	r1, r1, #3
 8003bd4:	2903      	cmp	r1, #3
 8003bd6:	f000 84ec 	beq.w	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8003bda:	2101      	movs	r1, #1
 8003bdc:	f104 0008 	add.w	r0, r4, #8
 8003be0:	f7ff fcec 	bl	80035bc <RCCEx_PLL2_Config.part.0>
 8003be4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003be6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003bea:	2d00      	cmp	r5, #0
 8003bec:	f000 8364 	beq.w	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 8003bf0:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bf2:	069f      	lsls	r7, r3, #26
 8003bf4:	d526      	bpl.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003bf6:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8003bfa:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8003bfe:	f000 836e 	beq.w	80042de <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 8003c02:	f200 8194 	bhi.w	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003c06:	b191      	cbz	r1, 8003c2e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003c08:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8003c0c:	f040 8199 	bne.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x7be>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c10:	499f      	ldr	r1, [pc, #636]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003c12:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003c14:	f001 0103 	and.w	r1, r1, #3
 8003c18:	2903      	cmp	r1, #3
 8003c1a:	f000 8192 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x7be>
 8003c1e:	2100      	movs	r1, #0
 8003c20:	f104 0008 	add.w	r0, r4, #8
 8003c24:	f7ff fcca 	bl	80035bc <RCCEx_PLL2_Config.part.0>
 8003c28:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c2a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003c2e:	2d00      	cmp	r5, #0
 8003c30:	f040 834b 	bne.w	80042ca <HAL_RCCEx_PeriphCLKConfig+0xb46>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c34:	4f96      	ldr	r7, [pc, #600]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003c36:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8003c3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c3c:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8003c40:	4301      	orrs	r1, r0
 8003c42:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c44:	0658      	lsls	r0, r3, #25
 8003c46:	d526      	bpl.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x512>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003c48:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8003c4c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8003c50:	f000 83a1 	beq.w	8004396 <HAL_RCCEx_PeriphCLKConfig+0xc12>
 8003c54:	f200 8178 	bhi.w	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 8003c58:	b191      	cbz	r1, 8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8003c5a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003c5e:	f040 817d 	bne.w	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c62:	498b      	ldr	r1, [pc, #556]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003c64:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003c66:	f001 0103 	and.w	r1, r1, #3
 8003c6a:	2903      	cmp	r1, #3
 8003c6c:	f000 8176 	beq.w	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 8003c70:	2100      	movs	r1, #0
 8003c72:	f104 0008 	add.w	r0, r4, #8
 8003c76:	f7ff fca1 	bl	80035bc <RCCEx_PLL2_Config.part.0>
 8003c7a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003c7c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003c80:	2d00      	cmp	r5, #0
 8003c82:	f040 8328 	bne.w	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xb52>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c86:	4f82      	ldr	r7, [pc, #520]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003c88:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 8003c8c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003c8e:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 8003c92:	4301      	orrs	r1, r0
 8003c94:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003c96:	0619      	lsls	r1, r3, #24
 8003c98:	d526      	bpl.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003c9a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8003c9e:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8003ca2:	f000 8353 	beq.w	800434c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
 8003ca6:	f200 815c 	bhi.w	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 8003caa:	b191      	cbz	r1, 8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8003cac:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8003cb0:	f040 8161 	bne.w	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cb4:	4976      	ldr	r1, [pc, #472]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003cb6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003cb8:	f001 0103 	and.w	r1, r1, #3
 8003cbc:	2903      	cmp	r1, #3
 8003cbe:	f000 815a 	beq.w	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	f104 0008 	add.w	r0, r4, #8
 8003cc8:	f7ff fc78 	bl	80035bc <RCCEx_PLL2_Config.part.0>
 8003ccc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003cce:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003cd2:	2d00      	cmp	r5, #0
 8003cd4:	f040 82fb 	bne.w	80042ce <HAL_RCCEx_PeriphCLKConfig+0xb4a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003cd8:	4f6d      	ldr	r7, [pc, #436]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003cda:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8003cde:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003ce0:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8003ce4:	4301      	orrs	r1, r0
 8003ce6:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003ce8:	071f      	lsls	r7, r3, #28
 8003cea:	d50b      	bpl.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003cec:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8003cf0:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8003cf4:	f000 8250 	beq.w	8004198 <HAL_RCCEx_PeriphCLKConfig+0xa14>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003cf8:	4f65      	ldr	r7, [pc, #404]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003cfa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cfc:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8003d00:	4301      	orrs	r1, r0
 8003d02:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d04:	06d8      	lsls	r0, r3, #27
 8003d06:	d50b      	bpl.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003d08:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8003d0c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8003d10:	f000 8257 	beq.w	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d14:	4f5e      	ldr	r7, [pc, #376]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003d16:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003d18:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8003d1c:	4301      	orrs	r1, r0
 8003d1e:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d20:	0319      	lsls	r1, r3, #12
 8003d22:	d50e      	bpl.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    switch (PeriphClkInit->AdcClockSelection)
 8003d24:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8003d28:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8003d2c:	f000 816e 	beq.w	800400c <HAL_RCCEx_PeriphCLKConfig+0x888>
 8003d30:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8003d34:	f000 8179 	beq.w	800402a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8003d38:	2900      	cmp	r1, #0
 8003d3a:	f000 827a 	beq.w	8004232 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003d3e:	2601      	movs	r6, #1
 8003d40:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d42:	035f      	lsls	r7, r3, #13
 8003d44:	d50f      	bpl.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
    switch (PeriphClkInit->UsbClockSelection)
 8003d46:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8003d4a:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8003d4e:	f000 82eb 	beq.w	8004328 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003d52:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8003d56:	f000 813d 	beq.w	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8003d5a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8003d5e:	f000 8134 	beq.w	8003fca <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003d62:	2601      	movs	r6, #1
 8003d64:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003d66:	03d8      	lsls	r0, r3, #15
 8003d68:	d520      	bpl.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x628>
    switch (PeriphClkInit->SdmmcClockSelection)
 8003d6a:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8003d6c:	2900      	cmp	r1, #0
 8003d6e:	f000 8245 	beq.w	80041fc <HAL_RCCEx_PeriphCLKConfig+0xa78>
 8003d72:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8003d76:	f040 8125 	bne.w	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d7a:	4945      	ldr	r1, [pc, #276]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003d7c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003d7e:	f001 0103 	and.w	r1, r1, #3
 8003d82:	2903      	cmp	r1, #3
 8003d84:	f000 811e 	beq.w	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8003d88:	2102      	movs	r1, #2
 8003d8a:	f104 0008 	add.w	r0, r4, #8
 8003d8e:	f7ff fc15 	bl	80035bc <RCCEx_PLL2_Config.part.0>
 8003d92:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d94:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003d98:	2d00      	cmp	r5, #0
 8003d9a:	f040 8237 	bne.w	800420c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003d9e:	4f3c      	ldr	r7, [pc, #240]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003da0:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003da2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003da4:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8003da8:	4301      	orrs	r1, r0
 8003daa:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003dac:	0099      	lsls	r1, r3, #2
 8003dae:	d50e      	bpl.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x64a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003db0:	4937      	ldr	r1, [pc, #220]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003db2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003db4:	f001 0103 	and.w	r1, r1, #3
 8003db8:	2903      	cmp	r1, #3
 8003dba:	d007      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x648>
 8003dbc:	2102      	movs	r1, #2
 8003dbe:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003dc2:	f7ff fc6d 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003dc6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003dca:	b100      	cbz	r0, 8003dce <HAL_RCCEx_PeriphCLKConfig+0x64a>
      status = HAL_ERROR;
 8003dcc:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003dce:	039f      	lsls	r7, r3, #14
 8003dd0:	f140 80e0 	bpl.w	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x810>
    switch (PeriphClkInit->RngClockSelection)
 8003dd4:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8003dd8:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8003ddc:	f000 8205 	beq.w	80041ea <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003de0:	f240 80cc 	bls.w	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x7f8>
 8003de4:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 8003de8:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8003dec:	f000 80c9 	beq.w	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8003df0:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003df2:	02d8      	lsls	r0, r3, #11
 8003df4:	d506      	bpl.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x680>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003df6:	4826      	ldr	r0, [pc, #152]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003df8:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 8003dfa:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8003dfc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8003e00:	4331      	orrs	r1, r6
 8003e02:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003e04:	00d9      	lsls	r1, r3, #3
 8003e06:	d507      	bpl.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x694>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003e08:	4821      	ldr	r0, [pc, #132]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003e0a:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 8003e0e:	6901      	ldr	r1, [r0, #16]
 8003e10:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8003e14:	4331      	orrs	r1, r6
 8003e16:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e18:	029f      	lsls	r7, r3, #10
 8003e1a:	d506      	bpl.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e1c:	481c      	ldr	r0, [pc, #112]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003e1e:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 8003e20:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8003e22:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8003e26:	4331      	orrs	r1, r6
 8003e28:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e2a:	005e      	lsls	r6, r3, #1
 8003e2c:	d509      	bpl.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x6be>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e2e:	4918      	ldr	r1, [pc, #96]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003e30:	6908      	ldr	r0, [r1, #16]
 8003e32:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8003e36:	6108      	str	r0, [r1, #16]
 8003e38:	6908      	ldr	r0, [r1, #16]
 8003e3a:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 8003e3e:	4330      	orrs	r0, r6
 8003e40:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	da06      	bge.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003e46:	4812      	ldr	r0, [pc, #72]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003e48:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 8003e4a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8003e4c:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8003e50:	4331      	orrs	r1, r6
 8003e52:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e54:	0218      	lsls	r0, r3, #8
 8003e56:	d507      	bpl.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e58:	490d      	ldr	r1, [pc, #52]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003e5a:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8003e5e:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8003e60:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003e64:	4303      	orrs	r3, r0
 8003e66:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003e68:	07d1      	lsls	r1, r2, #31
 8003e6a:	d513      	bpl.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x710>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e6c:	4b08      	ldr	r3, [pc, #32]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	2b03      	cmp	r3, #3
 8003e76:	f000 818d 	beq.w	8004194 <HAL_RCCEx_PeriphCLKConfig+0xa10>
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	f104 0008 	add.w	r0, r4, #8
 8003e80:	f7ff fb9c 	bl	80035bc <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003e84:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003e86:	2800      	cmp	r0, #0
 8003e88:	f040 8204 	bne.w	8004294 <HAL_RCCEx_PeriphCLKConfig+0xb10>
 8003e8c:	e002      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x710>
 8003e8e:	bf00      	nop
 8003e90:	58024400 	.word	0x58024400
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003e94:	0793      	lsls	r3, r2, #30
 8003e96:	d50f      	bpl.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x734>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e98:	4bb2      	ldr	r3, [pc, #712]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	f000 816c 	beq.w	800417e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	f104 0008 	add.w	r0, r4, #8
 8003eac:	f7ff fb86 	bl	80035bc <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003eb0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	f040 81f0 	bne.w	8004298 <HAL_RCCEx_PeriphCLKConfig+0xb14>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003eb8:	0757      	lsls	r7, r2, #29
 8003eba:	d50f      	bpl.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x758>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ebc:	4ba9      	ldr	r3, [pc, #676]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	f000 815c 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 8003eca:	2102      	movs	r1, #2
 8003ecc:	f104 0008 	add.w	r0, r4, #8
 8003ed0:	f7ff fb74 	bl	80035bc <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003ed4:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003ed6:	2800      	cmp	r0, #0
 8003ed8:	f040 81d8 	bne.w	800428c <HAL_RCCEx_PeriphCLKConfig+0xb08>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003edc:	0716      	lsls	r6, r2, #28
 8003ede:	d50f      	bpl.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ee0:	4ba0      	ldr	r3, [pc, #640]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee4:	f003 0303 	and.w	r3, r3, #3
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	f000 814c 	beq.w	8004186 <HAL_RCCEx_PeriphCLKConfig+0xa02>
 8003eee:	2100      	movs	r1, #0
 8003ef0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003ef4:	f7ff fbd4 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003ef8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003efa:	2800      	cmp	r0, #0
 8003efc:	f040 81c8 	bne.w	8004290 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003f00:	06d0      	lsls	r0, r2, #27
 8003f02:	d54a      	bpl.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x816>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f04:	4b97      	ldr	r3, [pc, #604]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f06:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	f000 813a 	beq.w	800418a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8003f16:	2101      	movs	r1, #1
 8003f18:	4630      	mov	r0, r6
 8003f1a:	f7ff fbc1 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	d03a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x814>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003f22:	6863      	ldr	r3, [r4, #4]
 8003f24:	069a      	lsls	r2, r3, #26
 8003f26:	f140 808c 	bpl.w	8004042 <HAL_RCCEx_PeriphCLKConfig+0x8be>
 8003f2a:	4605      	mov	r5, r0
 8003f2c:	e039      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x81e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f2e:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8003f32:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003f36:	f43f ae7a 	beq.w	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003f3a:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8003f3e:	f43f ae76 	beq.w	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003f42:	2601      	movs	r6, #1
 8003f44:	4635      	mov	r5, r6
 8003f46:	e67d      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f48:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 8003f4c:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8003f50:	f43f ae96 	beq.w	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8003f54:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 8003f58:	f43f ae92 	beq.w	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8003f5c:	2601      	movs	r6, #1
 8003f5e:	4635      	mov	r5, r6
 8003f60:	e699      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x512>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f62:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 8003f66:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003f6a:	f43f aeb2 	beq.w	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8003f6e:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 8003f72:	f43f aeae 	beq.w	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8003f76:	2601      	movs	r6, #1
 8003f78:	4635      	mov	r5, r6
 8003f7a:	e6b5      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch (PeriphClkInit->RngClockSelection)
 8003f7c:	2900      	cmp	r1, #0
 8003f7e:	f47f af37 	bne.w	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
    if (ret == HAL_OK)
 8003f82:	2d00      	cmp	r5, #0
 8003f84:	f47f af35 	bne.w	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f88:	4d76      	ldr	r5, [pc, #472]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003f8a:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8003f8c:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8003f90:	4301      	orrs	r1, r0
 8003f92:	6569      	str	r1, [r5, #84]	@ 0x54
      status = HAL_ERROR;
 8003f94:	4635      	mov	r5, r6
 8003f96:	e72c      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003f98:	6862      	ldr	r2, [r4, #4]
 8003f9a:	0693      	lsls	r3, r2, #26
 8003f9c:	d50d      	bpl.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x836>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f9e:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fa2:	4b70      	ldr	r3, [pc, #448]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d049      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x8be>
 8003fae:	2102      	movs	r1, #2
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	f7ff fb75 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8003fb6:	2800      	cmp	r0, #0
 8003fb8:	d143      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x8be>
  if (status == HAL_OK)
 8003fba:	1e28      	subs	r0, r5, #0
 8003fbc:	bf18      	it	ne
 8003fbe:	2001      	movne	r0, #1
}
 8003fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fc4:	2601      	movs	r6, #1
 8003fc6:	4635      	mov	r5, r6
 8003fc8:	e6f0      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x628>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fca:	4866      	ldr	r0, [pc, #408]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003fcc:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003fce:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003fd2:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003fd4:	2d00      	cmp	r5, #0
 8003fd6:	f040 8140 	bne.w	800425a <HAL_RCCEx_PeriphCLKConfig+0xad6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fda:	4f62      	ldr	r7, [pc, #392]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003fdc:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8003fe0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fe2:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8003fe6:	4301      	orrs	r1, r0
 8003fe8:	6579      	str	r1, [r7, #84]	@ 0x54
 8003fea:	e6bc      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fec:	485d      	ldr	r0, [pc, #372]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003fee:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003ff0:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003ff4:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003ff6:	2d00      	cmp	r5, #0
 8003ff8:	f040 812c 	bne.w	8004254 <HAL_RCCEx_PeriphCLKConfig+0xad0>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ffc:	4f59      	ldr	r7, [pc, #356]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003ffe:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8004000:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004002:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8004006:	4301      	orrs	r1, r0
 8004008:	6539      	str	r1, [r7, #80]	@ 0x50
 800400a:	e516      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800400c:	4955      	ldr	r1, [pc, #340]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 800400e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004010:	f001 0103 	and.w	r1, r1, #3
 8004014:	2903      	cmp	r1, #3
 8004016:	f43f ae92 	beq.w	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 800401a:	2102      	movs	r1, #2
 800401c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004020:	f7ff fb3e 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
 8004024:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004026:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800402a:	2d00      	cmp	r5, #0
 800402c:	f040 8151 	bne.w	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xb4e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004030:	4f4c      	ldr	r7, [pc, #304]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004032:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8004036:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004038:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 800403c:	4301      	orrs	r1, r0
 800403e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004040:	e67f      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  return HAL_ERROR;
 8004042:	2001      	movs	r0, #1
}
 8004044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004048:	4946      	ldr	r1, [pc, #280]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 800404a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800404c:	f001 0103 	and.w	r1, r1, #3
 8004050:	2903      	cmp	r1, #3
 8004052:	f43f ad86 	beq.w	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004056:	2101      	movs	r1, #1
 8004058:	f104 0008 	add.w	r0, r4, #8
 800405c:	f7ff faae 	bl	80035bc <RCCEx_PLL2_Config.part.0>
 8004060:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004062:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004066:	2d00      	cmp	r5, #0
 8004068:	f040 8137 	bne.w	80042da <HAL_RCCEx_PeriphCLKConfig+0xb56>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800406c:	4f3d      	ldr	r7, [pc, #244]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 800406e:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8004070:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004072:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8004076:	4301      	orrs	r1, r0
 8004078:	6579      	str	r1, [r7, #84]	@ 0x54
 800407a:	e574      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800407c:	2601      	movs	r6, #1
 800407e:	f7ff bbb0 	b.w	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004082:	4f39      	ldr	r7, [pc, #228]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800408a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800408c:	f7fd f950 	bl	8001330 <HAL_GetTick>
 8004090:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004092:	e006      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004094:	f7fd f94c 	bl	8001330 <HAL_GetTick>
 8004098:	eba0 0008 	sub.w	r0, r0, r8
 800409c:	2864      	cmp	r0, #100	@ 0x64
 800409e:	f200 8277 	bhi.w	8004590 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	05da      	lsls	r2, r3, #23
 80040a6:	d5f5      	bpl.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x910>
    if (ret == HAL_OK)
 80040a8:	2d00      	cmp	r5, #0
 80040aa:	f040 8272 	bne.w	8004592 <HAL_RCCEx_PeriphCLKConfig+0xe0e>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80040ae:	4a2d      	ldr	r2, [pc, #180]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80040b0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80040b4:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80040b6:	4059      	eors	r1, r3
 80040b8:	f411 7f40 	tst.w	r1, #768	@ 0x300
 80040bc:	d00b      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x952>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040be:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80040c0:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040c2:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80040c6:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 80040ca:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040cc:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 80040ce:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 80040d2:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 80040d4:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80040d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040da:	f000 8285 	beq.w	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xe64>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040de:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80040e2:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80040e6:	f000 8293 	beq.w	8004610 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
 80040ea:	491e      	ldr	r1, [pc, #120]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80040ec:	690a      	ldr	r2, [r1, #16]
 80040ee:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 80040f2:	610a      	str	r2, [r1, #16]
 80040f4:	481b      	ldr	r0, [pc, #108]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80040f6:	f3c3 010b 	ubfx	r1, r3, #0, #12
 80040fa:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 80040fc:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80040fe:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004102:	6701      	str	r1, [r0, #112]	@ 0x70
 8004104:	e4fd      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004106:	4817      	ldr	r0, [pc, #92]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004108:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800410a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800410e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004110:	2d00      	cmp	r5, #0
 8004112:	f040 80b5 	bne.w	8004280 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8004116:	f7ff bbe7 	b.w	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x164>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800411a:	4812      	ldr	r0, [pc, #72]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 800411c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800411e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004122:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004124:	2d00      	cmp	r5, #0
 8004126:	f040 80ae 	bne.w	8004286 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800412a:	e422      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800412c:	480d      	ldr	r0, [pc, #52]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 800412e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004130:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004134:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004136:	2d00      	cmp	r5, #0
 8004138:	f040 809f 	bne.w	800427a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 800413c:	f7ff bba9 	b.w	8003892 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004140:	4808      	ldr	r0, [pc, #32]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004142:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004144:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004148:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 800414a:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800414c:	2d00      	cmp	r5, #0
 800414e:	f040 81ad 	bne.w	80044ac <HAL_RCCEx_PeriphCLKConfig+0xd28>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004152:	4f04      	ldr	r7, [pc, #16]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004154:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004156:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004158:	f021 0107 	bic.w	r1, r1, #7
 800415c:	4301      	orrs	r1, r0
 800415e:	6539      	str	r1, [r7, #80]	@ 0x50
 8004160:	f7ff bb4d 	b.w	80037fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004164:	58024400 	.word	0x58024400
 8004168:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800416c:	48bb      	ldr	r0, [pc, #748]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 800416e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004170:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004174:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004176:	2d00      	cmp	r5, #0
 8004178:	d17c      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800417a:	f7ff bb60 	b.w	800383e <HAL_RCCEx_PeriphCLKConfig+0xba>
    return HAL_ERROR;
 800417e:	2501      	movs	r5, #1
 8004180:	e69a      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x734>
 8004182:	2501      	movs	r5, #1
 8004184:	e6aa      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x758>
    return HAL_ERROR;
 8004186:	2501      	movs	r5, #1
 8004188:	e6ba      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800418a:	0691      	lsls	r1, r2, #26
 800418c:	f57f af59 	bpl.w	8004042 <HAL_RCCEx_PeriphCLKConfig+0x8be>
    return HAL_ERROR;
 8004190:	2501      	movs	r5, #1
 8004192:	e706      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x81e>
    return HAL_ERROR;
 8004194:	2501      	movs	r5, #1
 8004196:	e67d      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x710>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004198:	49b0      	ldr	r1, [pc, #704]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 800419a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800419c:	f001 0103 	and.w	r1, r1, #3
 80041a0:	2903      	cmp	r1, #3
 80041a2:	f000 820a 	beq.w	80045ba <HAL_RCCEx_PeriphCLKConfig+0xe36>
 80041a6:	2102      	movs	r1, #2
 80041a8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80041ac:	f7ff fa78 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041b0:	2800      	cmp	r0, #0
 80041b2:	f000 820f 	beq.w	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041b6:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
        status = HAL_ERROR;
 80041ba:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041bc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80041c0:	e59a      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x574>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041c2:	49a6      	ldr	r1, [pc, #664]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 80041c4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80041c6:	f001 0103 	and.w	r1, r1, #3
 80041ca:	2903      	cmp	r1, #3
 80041cc:	f000 81f8 	beq.w	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 80041d0:	2102      	movs	r1, #2
 80041d2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80041d6:	f7ff fa63 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041da:	2800      	cmp	r0, #0
 80041dc:	f040 81f3 	bne.w	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xe42>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041e0:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041e4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80041e8:	e594      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x590>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ea:	4f9c      	ldr	r7, [pc, #624]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 80041ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80041ee:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 80041f2:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 80041f4:	2d00      	cmp	r5, #0
 80041f6:	f47f adfc 	bne.w	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80041fa:	e6c5      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x804>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041fc:	4897      	ldr	r0, [pc, #604]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 80041fe:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004200:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004204:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004206:	2d00      	cmp	r5, #0
 8004208:	f43f adc9 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x61a>
 800420c:	462e      	mov	r6, r5
 800420e:	e5cd      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x628>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004210:	4992      	ldr	r1, [pc, #584]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004212:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004214:	f001 0103 	and.w	r1, r1, #3
 8004218:	2903      	cmp	r1, #3
 800421a:	f43f ac0c 	beq.w	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 800421e:	2101      	movs	r1, #1
 8004220:	f104 0008 	add.w	r0, r4, #8
 8004224:	f7ff f9ca 	bl	80035bc <RCCEx_PLL2_Config.part.0>
 8004228:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800422a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800422e:	b98d      	cbnz	r5, 8004254 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8004230:	e6e4      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x878>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004232:	488a      	ldr	r0, [pc, #552]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004234:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8004236:	f000 0003 	and.w	r0, r0, #3
 800423a:	2803      	cmp	r0, #3
 800423c:	f43f ad7f 	beq.w	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8004240:	f104 0008 	add.w	r0, r4, #8
 8004244:	f7ff f9ba 	bl	80035bc <RCCEx_PLL2_Config.part.0>
 8004248:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800424a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800424e:	2d00      	cmp	r5, #0
 8004250:	d13f      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 8004252:	e6ed      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8004254:	462e      	mov	r6, r5
 8004256:	f7ff bbf0 	b.w	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800425a:	462e      	mov	r6, r5
 800425c:	e583      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
 800425e:	462e      	mov	r6, r5
 8004260:	f7ff bb65 	b.w	800392e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004264:	4f7d      	ldr	r7, [pc, #500]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004266:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8004268:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800426a:	f021 0103 	bic.w	r1, r1, #3
 800426e:	4301      	orrs	r1, r0
 8004270:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8004272:	e443      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x378>
 8004274:	462e      	mov	r6, r5
 8004276:	f7ff bae9 	b.w	800384c <HAL_RCCEx_PeriphCLKConfig+0xc8>
 800427a:	462e      	mov	r6, r5
 800427c:	f7ff bb11 	b.w	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8004280:	462e      	mov	r6, r5
 8004282:	f7ff bb39 	b.w	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8004286:	462e      	mov	r6, r5
 8004288:	f7ff bb7a 	b.w	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800428c:	4605      	mov	r5, r0
 800428e:	e625      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x758>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004290:	4605      	mov	r5, r0
 8004292:	e635      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004294:	4605      	mov	r5, r0
 8004296:	e5fd      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x710>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004298:	4605      	mov	r5, r0
 800429a:	e60d      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800429c:	4f6f      	ldr	r7, [pc, #444]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 800429e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 80042a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042a2:	f021 0107 	bic.w	r1, r1, #7
 80042a6:	4301      	orrs	r1, r0
 80042a8:	6579      	str	r1, [r7, #84]	@ 0x54
 80042aa:	e47d      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80042ac:	462e      	mov	r6, r5
 80042ae:	f7ff bb8e 	b.w	80039ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80042b2:	462e      	mov	r6, r5
 80042b4:	f7ff bbb1 	b.w	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x296>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042b8:	4f68      	ldr	r7, [pc, #416]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 80042ba:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 80042be:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80042c0:	f021 0107 	bic.w	r1, r1, #7
 80042c4:	4301      	orrs	r1, r0
 80042c6:	65b9      	str	r1, [r7, #88]	@ 0x58
 80042c8:	e493      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
 80042ca:	462e      	mov	r6, r5
 80042cc:	e4ba      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 80042ce:	462e      	mov	r6, r5
 80042d0:	e50a      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x564>
 80042d2:	462e      	mov	r6, r5
 80042d4:	e535      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80042d6:	462e      	mov	r6, r5
 80042d8:	e4dd      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x512>
 80042da:	462e      	mov	r6, r5
 80042dc:	e443      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042de:	495f      	ldr	r1, [pc, #380]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 80042e0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80042e2:	f001 0103 	and.w	r1, r1, #3
 80042e6:	2903      	cmp	r1, #3
 80042e8:	f43f ae2b 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x7be>
 80042ec:	2102      	movs	r1, #2
 80042ee:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80042f2:	f7ff f9d5 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
 80042f6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80042f8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80042fc:	2d00      	cmp	r5, #0
 80042fe:	d1e4      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xb46>
 8004300:	e498      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004302:	4956      	ldr	r1, [pc, #344]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004304:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004306:	f001 0103 	and.w	r1, r1, #3
 800430a:	2903      	cmp	r1, #3
 800430c:	f43f abc7 	beq.w	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8004310:	2102      	movs	r1, #2
 8004312:	f104 0008 	add.w	r0, r4, #8
 8004316:	f7ff f951 	bl	80035bc <RCCEx_PLL2_Config.part.0>
 800431a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800431c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004320:	2d00      	cmp	r5, #0
 8004322:	d19c      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xada>
 8004324:	f7ff bafc 	b.w	8003920 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004328:	494c      	ldr	r1, [pc, #304]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 800432a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800432c:	f001 0103 	and.w	r1, r1, #3
 8004330:	2903      	cmp	r1, #3
 8004332:	f43f ad16 	beq.w	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x5de>
 8004336:	2101      	movs	r1, #1
 8004338:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800433c:	f7ff f9b0 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
 8004340:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004342:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004346:	2d00      	cmp	r5, #0
 8004348:	d187      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xad6>
 800434a:	e646      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x856>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800434c:	4943      	ldr	r1, [pc, #268]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 800434e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004350:	f001 0103 	and.w	r1, r1, #3
 8004354:	2903      	cmp	r1, #3
 8004356:	f43f ae0e 	beq.w	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800435a:	2102      	movs	r1, #2
 800435c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004360:	f7ff f99e 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
 8004364:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004366:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800436a:	2d00      	cmp	r5, #0
 800436c:	d1af      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xb4a>
 800436e:	e4b3      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x554>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004370:	493a      	ldr	r1, [pc, #232]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004372:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004374:	f001 0103 	and.w	r1, r1, #3
 8004378:	2903      	cmp	r1, #3
 800437a:	f000 8131 	beq.w	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800437e:	2102      	movs	r1, #2
 8004380:	f104 0008 	add.w	r0, r4, #8
 8004384:	f7ff f91a 	bl	80035bc <RCCEx_PLL2_Config.part.0>
 8004388:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800438a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800438e:	2d00      	cmp	r5, #0
 8004390:	f47f abb3 	bne.w	8003afa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004394:	e766      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004396:	4931      	ldr	r1, [pc, #196]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004398:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800439a:	f001 0103 	and.w	r1, r1, #3
 800439e:	2903      	cmp	r1, #3
 80043a0:	f43f addc 	beq.w	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 80043a4:	2102      	movs	r1, #2
 80043a6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80043aa:	f7ff f979 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
 80043ae:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80043b0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80043b4:	2d00      	cmp	r5, #0
 80043b6:	d18e      	bne.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xb52>
 80043b8:	e465      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x502>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043ba:	4928      	ldr	r1, [pc, #160]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 80043bc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80043be:	f001 0103 	and.w	r1, r1, #3
 80043c2:	2903      	cmp	r1, #3
 80043c4:	f43f ab83 	beq.w	8003ace <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80043c8:	2101      	movs	r1, #1
 80043ca:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80043ce:	f7ff f967 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
 80043d2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80043d4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80043d8:	2d00      	cmp	r5, #0
 80043da:	f47f af67 	bne.w	80042ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
 80043de:	f7ff baef 	b.w	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043e2:	491e      	ldr	r1, [pc, #120]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 80043e4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80043e6:	f001 0103 	and.w	r1, r1, #3
 80043ea:	2903      	cmp	r1, #3
 80043ec:	f43f ab7a 	beq.w	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80043f0:	2101      	movs	r1, #1
 80043f2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80043f6:	f7ff f953 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
 80043fa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043fc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004400:	2d00      	cmp	r5, #0
 8004402:	f47f af56 	bne.w	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004406:	f7ff bb00 	b.w	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x286>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800440a:	4914      	ldr	r1, [pc, #80]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 800440c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800440e:	f001 0103 	and.w	r1, r1, #3
 8004412:	2903      	cmp	r1, #3
 8004414:	f43f ab3d 	beq.w	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8004418:	2100      	movs	r1, #0
 800441a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800441e:	f7ff f93f 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
 8004422:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004424:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004428:	2d00      	cmp	r5, #0
 800442a:	f47f af29 	bne.w	8004280 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 800442e:	f7ff ba5b 	b.w	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x164>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004432:	490a      	ldr	r1, [pc, #40]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004434:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004436:	f001 0103 	and.w	r1, r1, #3
 800443a:	2903      	cmp	r1, #3
 800443c:	f43f ab3a 	beq.w	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004440:	2100      	movs	r1, #0
 8004442:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004446:	f7ff f92b 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
 800444a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800444c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004450:	2d00      	cmp	r5, #0
 8004452:	f47f af18 	bne.w	8004286 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004456:	f7ff ba8c 	b.w	8003972 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800445a:	bf00      	nop
 800445c:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004460:	4973      	ldr	r1, [pc, #460]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8004462:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004464:	f001 0103 	and.w	r1, r1, #3
 8004468:	2903      	cmp	r1, #3
 800446a:	f43f ae07 	beq.w	800407c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 800446e:	2102      	movs	r1, #2
 8004470:	3028      	adds	r0, #40	@ 0x28
 8004472:	f7ff f915 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
 8004476:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004478:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800447c:	2e00      	cmp	r6, #0
 800447e:	f47f a9b0 	bne.w	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004482:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8004484:	f7ff b9a6 	b.w	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004488:	4969      	ldr	r1, [pc, #420]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 800448a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800448c:	f001 0103 	and.w	r1, r1, #3
 8004490:	2903      	cmp	r1, #3
 8004492:	f43f a9b2 	beq.w	80037fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004496:	2100      	movs	r1, #0
 8004498:	f104 0008 	add.w	r0, r4, #8
 800449c:	f7ff f88e 	bl	80035bc <RCCEx_PLL2_Config.part.0>
 80044a0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80044a2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80044a6:	2d00      	cmp	r5, #0
 80044a8:	f43f ae53 	beq.w	8004152 <HAL_RCCEx_PeriphCLKConfig+0x9ce>
 80044ac:	462e      	mov	r6, r5
 80044ae:	f7ff b9a6 	b.w	80037fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044b2:	495f      	ldr	r1, [pc, #380]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 80044b4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80044b6:	f001 0103 	and.w	r1, r1, #3
 80044ba:	2903      	cmp	r1, #3
 80044bc:	f43f a99d 	beq.w	80037fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044c0:	2100      	movs	r1, #0
 80044c2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80044c6:	f7ff f8eb 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
 80044ca:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80044cc:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80044d0:	e63c      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044d2:	4957      	ldr	r1, [pc, #348]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 80044d4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80044d6:	f001 0103 	and.w	r1, r1, #3
 80044da:	2903      	cmp	r1, #3
 80044dc:	f43f aac0 	beq.w	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80044e0:	2100      	movs	r1, #0
 80044e2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80044e6:	f7ff f8db 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
 80044ea:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80044ec:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80044f0:	2d00      	cmp	r5, #0
 80044f2:	f47f aebf 	bne.w	8004274 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80044f6:	f7ff b9a2 	b.w	800383e <HAL_RCCEx_PeriphCLKConfig+0xba>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044fa:	494d      	ldr	r1, [pc, #308]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 80044fc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80044fe:	f001 0103 	and.w	r1, r1, #3
 8004502:	2903      	cmp	r1, #3
 8004504:	f43f aaba 	beq.w	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8004508:	2100      	movs	r1, #0
 800450a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800450e:	f7ff f8c7 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
 8004512:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004514:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004518:	2d00      	cmp	r5, #0
 800451a:	f47f aeae 	bne.w	800427a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 800451e:	f7ff b9b8 	b.w	8003892 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004522:	4943      	ldr	r1, [pc, #268]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8004524:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004526:	f001 0103 	and.w	r1, r1, #3
 800452a:	2903      	cmp	r1, #3
 800452c:	d041      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800452e:	2101      	movs	r1, #1
 8004530:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004534:	f7ff f8b4 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
 8004538:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800453a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800453e:	2d00      	cmp	r5, #0
 8004540:	f47f ab56 	bne.w	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8004544:	e6b8      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xb34>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004546:	493a      	ldr	r1, [pc, #232]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8004548:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800454a:	f001 0103 	and.w	r1, r1, #3
 800454e:	2903      	cmp	r1, #3
 8004550:	d02b      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8004552:	2101      	movs	r1, #1
 8004554:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004558:	f7ff f8a2 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
 800455c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800455e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004562:	2d00      	cmp	r5, #0
 8004564:	f47f ab1f 	bne.w	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8004568:	e698      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800456a:	4931      	ldr	r1, [pc, #196]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 800456c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800456e:	f001 0103 	and.w	r1, r1, #3
 8004572:	2903      	cmp	r1, #3
 8004574:	f43f aaf5 	beq.w	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004578:	2101      	movs	r1, #1
 800457a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800457e:	f7ff f88f 	bl	80036a0 <RCCEx_PLL3_Config.part.0>
 8004582:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004584:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004588:	2d00      	cmp	r5, #0
 800458a:	f47f aea6 	bne.w	80042da <HAL_RCCEx_PeriphCLKConfig+0xb56>
 800458e:	e56d      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
        ret = HAL_TIMEOUT;
 8004590:	2503      	movs	r5, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004592:	462e      	mov	r6, r5
 8004594:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004598:	f7ff bab3 	b.w	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800459c:	4d24      	ldr	r5, [pc, #144]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 800459e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80045a0:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 80045a4:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 80045a6:	f7ff b915 	b.w	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80045aa:	2601      	movs	r6, #1
 80045ac:	4635      	mov	r5, r6
 80045ae:	f7ff bafb 	b.w	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80045b2:	2601      	movs	r6, #1
 80045b4:	4635      	mov	r5, r6
 80045b6:	f7ff bb1c 	b.w	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
        status = HAL_ERROR;
 80045ba:	2601      	movs	r6, #1
 80045bc:	f7ff bb9c 	b.w	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x574>
        status = HAL_ERROR;
 80045c0:	2601      	movs	r6, #1
 80045c2:	f7ff bba7 	b.w	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045c6:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
        status = HAL_ERROR;
 80045ca:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045cc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80045d0:	f7ff bba0 	b.w	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80045d4:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045d8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80045dc:	f7ff bb8c 	b.w	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x574>
 80045e0:	2601      	movs	r6, #1
 80045e2:	4635      	mov	r5, r6
 80045e4:	f7ff ba8a 	b.w	8003afc <HAL_RCCEx_PeriphCLKConfig+0x378>
        tickstart = HAL_GetTick();
 80045e8:	f7fc fea2 	bl	8001330 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045ec:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8004630 <HAL_RCCEx_PeriphCLKConfig+0xeac>
        tickstart = HAL_GetTick();
 80045f0:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f2:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045f6:	e004      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f8:	f7fc fe9a 	bl	8001330 <HAL_GetTick>
 80045fc:	1bc0      	subs	r0, r0, r7
 80045fe:	4548      	cmp	r0, r9
 8004600:	d810      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xea0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004602:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8004606:	079b      	lsls	r3, r3, #30
 8004608:	d5f6      	bpl.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800460a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800460e:	e566      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004610:	4807      	ldr	r0, [pc, #28]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8004612:	4a08      	ldr	r2, [pc, #32]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0xeb0>)
 8004614:	6901      	ldr	r1, [r0, #16]
 8004616:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800461a:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 800461e:	430a      	orrs	r2, r1
 8004620:	6102      	str	r2, [r0, #16]
 8004622:	e567      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x970>
        status = ret;
 8004624:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004626:	e9d4 3200 	ldrd	r3, r2, [r4]
 800462a:	4635      	mov	r5, r6
 800462c:	f7ff ba69 	b.w	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004630:	58024400 	.word	0x58024400
 8004634:	00ffffcf 	.word	0x00ffffcf

08004638 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8004638:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800463a:	f7fe feef 	bl	800341c <HAL_RCC_GetHCLKFreq>
 800463e:	4b05      	ldr	r3, [pc, #20]	@ (8004654 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8004640:	4a05      	ldr	r2, [pc, #20]	@ (8004658 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004648:	5cd3      	ldrb	r3, [r2, r3]
 800464a:	f003 031f 	and.w	r3, r3, #31
}
 800464e:	40d8      	lsrs	r0, r3
 8004650:	bd08      	pop	{r3, pc}
 8004652:	bf00      	nop
 8004654:	58024400 	.word	0x58024400
 8004658:	08005994 	.word	0x08005994

0800465c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800465c:	4a47      	ldr	r2, [pc, #284]	@ (800477c <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 800465e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004660:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004662:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004664:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 8004666:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800466a:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800466e:	6bd4      	ldr	r4, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8004670:	d05b      	beq.n	800472a <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004672:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004676:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800467a:	f001 0103 	and.w	r1, r1, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800467e:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004682:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8004686:	2901      	cmp	r1, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800468c:	ee06 4a90 	vmov	s13, r4
 8004690:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8004694:	d003      	beq.n	800469e <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8004696:	2902      	cmp	r1, #2
 8004698:	d06a      	beq.n	8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 800469a:	2900      	cmp	r1, #0
 800469c:	d04a      	beq.n	8004734 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800469e:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 80046a2:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80046a6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80046a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ac:	ee07 3a90 	vmov	s15, r3
 80046b0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80046b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046b8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80046bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046c0:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80046c4:	4a2d      	ldr	r2, [pc, #180]	@ (800477c <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 80046c6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80046ca:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80046cc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80046d0:	ee07 3a10 	vmov	s14, r3
 80046d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80046d8:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80046da:	ee37 7a06 	vadd.f32	s14, s14, s12
 80046de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80046e2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80046e6:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80046ea:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80046ec:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80046f0:	ee07 3a10 	vmov	s14, r3
 80046f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80046f8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80046fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004700:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004704:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004708:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800470a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800470e:	ee06 3a90 	vmov	s13, r3
 8004712:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004716:	ee76 6a86 	vadd.f32	s13, s13, s12
 800471a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800471e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004722:	ee17 3a90 	vmov	r3, s15
 8004726:	6083      	str	r3, [r0, #8]
}
 8004728:	4770      	bx	lr
 800472a:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800472c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004730:	6083      	str	r3, [r0, #8]
}
 8004732:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004734:	6813      	ldr	r3, [r2, #0]
 8004736:	069b      	lsls	r3, r3, #26
 8004738:	d51d      	bpl.n	8004776 <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800473a:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800473c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004740:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004742:	4910      	ldr	r1, [pc, #64]	@ (8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8004744:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004748:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800474c:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800474e:	ee06 3a10 	vmov	s12, r3
 8004752:	ee05 1a90 	vmov	s11, r1
 8004756:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800475a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800475e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004762:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8004766:	ee36 7a26 	vadd.f32	s14, s12, s13
 800476a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800476e:	e7a9      	b.n	80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004770:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004788 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8004774:	e795      	b.n	80046a2 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004776:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800478c <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 800477a:	e792      	b.n	80046a2 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800477c:	58024400 	.word	0x58024400
 8004780:	4a742400 	.word	0x4a742400
 8004784:	03d09000 	.word	0x03d09000
 8004788:	4af42400 	.word	0x4af42400
 800478c:	4c742400 	.word	0x4c742400

08004790 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004790:	4a47      	ldr	r2, [pc, #284]	@ (80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 8004792:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004794:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004796:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004798:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 800479a:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800479e:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80047a2:	6c54      	ldr	r4, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 80047a4:	d05b      	beq.n	800485e <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80047a6:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80047aa:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047ae:	f001 0103 	and.w	r1, r1, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047b2:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80047b6:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 80047ba:	2901      	cmp	r1, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047c0:	ee06 4a90 	vmov	s13, r4
 80047c4:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80047c8:	d003      	beq.n	80047d2 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 80047ca:	2902      	cmp	r1, #2
 80047cc:	d06a      	beq.n	80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 80047ce:	2900      	cmp	r1, #0
 80047d0:	d04a      	beq.n	8004868 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047d2:	eddf 7a38 	vldr	s15, [pc, #224]	@ 80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80047d6:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80047da:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80047dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e0:	ee07 3a90 	vmov	s15, r3
 80047e4:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80047e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047ec:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80047f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047f4:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80047f8:	4a2d      	ldr	r2, [pc, #180]	@ (80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 80047fa:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80047fe:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004800:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004804:	ee07 3a10 	vmov	s14, r3
 8004808:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800480c:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800480e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004812:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004816:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800481a:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800481e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004820:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004824:	ee07 3a10 	vmov	s14, r3
 8004828:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800482c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004830:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004834:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004838:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800483c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800483e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004842:	ee06 3a90 	vmov	s13, r3
 8004846:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800484a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800484e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004852:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004856:	ee17 3a90 	vmov	r3, s15
 800485a:	6083      	str	r3, [r0, #8]
}
 800485c:	4770      	bx	lr
 800485e:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004860:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004864:	6083      	str	r3, [r0, #8]
}
 8004866:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004868:	6813      	ldr	r3, [r2, #0]
 800486a:	069b      	lsls	r3, r3, #26
 800486c:	d51d      	bpl.n	80048aa <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800486e:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004870:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004874:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004876:	4910      	ldr	r1, [pc, #64]	@ (80048b8 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8004878:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800487c:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004880:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004882:	ee06 3a10 	vmov	s12, r3
 8004886:	ee05 1a90 	vmov	s11, r1
 800488a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800488e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004892:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004896:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800489a:	ee36 7a26 	vadd.f32	s14, s12, s13
 800489e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048a2:	e7a9      	b.n	80047f8 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048a4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 80048a8:	e795      	b.n	80047d6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048aa:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 80048ae:	e792      	b.n	80047d6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 80048b0:	58024400 	.word	0x58024400
 80048b4:	4a742400 	.word	0x4a742400
 80048b8:	03d09000 	.word	0x03d09000
 80048bc:	4af42400 	.word	0x4af42400
 80048c0:	4c742400 	.word	0x4c742400

080048c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048c4:	4a47      	ldr	r2, [pc, #284]	@ (80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 80048c6:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048c8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80048ca:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80048cc:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 80048ce:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80048d2:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80048d6:	6b54      	ldr	r4, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 80048d8:	d05b      	beq.n	8004992 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80048da:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80048de:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048e2:	f001 0103 	and.w	r1, r1, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048e6:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80048ea:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 80048ee:	2901      	cmp	r1, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048f4:	ee06 4a90 	vmov	s13, r4
 80048f8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80048fc:	d06f      	beq.n	80049de <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 80048fe:	2902      	cmp	r1, #2
 8004900:	d06a      	beq.n	80049d8 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
 8004902:	2900      	cmp	r1, #0
 8004904:	d04a      	beq.n	800499c <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004906:	eddf 7a38 	vldr	s15, [pc, #224]	@ 80049e8 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800490a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800490e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004914:	ee07 3a90 	vmov	s15, r3
 8004918:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800491c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004920:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004928:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800492c:	4a2d      	ldr	r2, [pc, #180]	@ (80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 800492e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8004932:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004934:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004938:	ee07 3a10 	vmov	s14, r3
 800493c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8004940:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8004942:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004946:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800494a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800494e:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8004952:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004954:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004958:	ee07 3a10 	vmov	s14, r3
 800495c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004960:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004964:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004968:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800496c:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8004970:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004972:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004976:	ee06 3a90 	vmov	s13, r3
 800497a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800497e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004982:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004986:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800498a:	ee17 3a90 	vmov	r3, s15
 800498e:	6083      	str	r3, [r0, #8]
}
 8004990:	4770      	bx	lr
 8004992:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004994:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8004998:	6083      	str	r3, [r0, #8]
}
 800499a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800499c:	6813      	ldr	r3, [r2, #0]
 800499e:	069b      	lsls	r3, r3, #26
 80049a0:	d5b1      	bpl.n	8004906 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049a2:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049a4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80049a8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049aa:	4910      	ldr	r1, [pc, #64]	@ (80049ec <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 80049ac:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049b4:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049b6:	ee06 3a10 	vmov	s12, r3
 80049ba:	ee05 1a90 	vmov	s11, r1
 80049be:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80049c2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80049c6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80049ca:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80049ce:	ee36 7a26 	vadd.f32	s14, s12, s13
 80049d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049d6:	e7a9      	b.n	800492c <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049d8:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80049f0 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 80049dc:	e795      	b.n	800490a <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049de:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80049f4 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 80049e2:	e792      	b.n	800490a <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 80049e4:	58024400 	.word	0x58024400
 80049e8:	4c742400 	.word	0x4c742400
 80049ec:	03d09000 	.word	0x03d09000
 80049f0:	4af42400 	.word	0x4af42400
 80049f4:	4a742400 	.word	0x4a742400

080049f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80049f8:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 80049fc:	430b      	orrs	r3, r1
{
 80049fe:	b500      	push	{lr}
 8004a00:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004a02:	f000 8083 	beq.w	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004a06:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 8004a0a:	430b      	orrs	r3, r1
 8004a0c:	d038      	beq.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004a0e:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 8004a12:	430b      	orrs	r3, r1
 8004a14:	f000 80e6 	beq.w	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004a18:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 8004a1c:	430b      	orrs	r3, r1
 8004a1e:	f000 8089 	beq.w	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004a22:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 8004a26:	430b      	orrs	r3, r1
 8004a28:	d060      	beq.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004a2a:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	f000 8112 	beq.w	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004a34:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	f000 80a3 	beq.w	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004a3e:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 8004a42:	430b      	orrs	r3, r1
 8004a44:	f000 80fa 	beq.w	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004a48:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	f000 8143 	beq.w	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004a52:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 8004a56:	4308      	orrs	r0, r1
 8004a58:	d137      	bne.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004a5a:	4a9a      	ldr	r2, [pc, #616]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a5c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004a5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 8004a62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a66:	f000 8084 	beq.w	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004a6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a6e:	f000 8157 	beq.w	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8004a72:	bb53      	cbnz	r3, 8004aca <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004a74:	6810      	ldr	r0, [r2, #0]
 8004a76:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8004a7a:	d044      	beq.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 8004a7c:	4892      	ldr	r0, [pc, #584]	@ (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004a7e:	e042      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8004a80:	4a90      	ldr	r2, [pc, #576]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a82:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004a84:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 8004a88:	2b80      	cmp	r3, #128	@ 0x80
 8004a8a:	f000 80a6 	beq.w	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8004a8e:	d920      	bls.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004a90:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a92:	d037      	beq.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8004a94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a98:	d117      	bne.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004a9a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a9c:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004a9e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004aa2:	0749      	lsls	r1, r1, #29
 8004aa4:	d502      	bpl.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 80c2 	beq.w	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004aac:	4a85      	ldr	r2, [pc, #532]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	05d0      	lsls	r0, r2, #23
 8004ab2:	d503      	bpl.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8004ab4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ab8:	f000 8102 	beq.w	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004abc:	4a81      	ldr	r2, [pc, #516]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004abe:	6812      	ldr	r2, [r2, #0]
 8004ac0:	0391      	lsls	r1, r2, #14
 8004ac2:	d502      	bpl.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004ac4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ac8:	d0d8      	beq.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
          frequency = 0;
 8004aca:	2000      	movs	r0, #0
}
 8004acc:	b005      	add	sp, #20
 8004ace:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d04d      	beq.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004ad6:	2b40      	cmp	r3, #64	@ 0x40
 8004ad8:	d1f7      	bne.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ada:	6810      	ldr	r0, [r2, #0]
 8004adc:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004ae0:	d011      	beq.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ae2:	a801      	add	r0, sp, #4
 8004ae4:	f7ff fdba 	bl	800465c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ae8:	9801      	ldr	r0, [sp, #4]
 8004aea:	e00c      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004aec:	4a75      	ldr	r2, [pc, #468]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004aee:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004af0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 8004af4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004af8:	d06f      	beq.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8004afa:	d938      	bls.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8004afc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b00:	f040 8088 	bne.w	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004b04:	4871      	ldr	r0, [pc, #452]	@ (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 8004b06:	b005      	add	sp, #20
 8004b08:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004b0c:	4b6d      	ldr	r3, [pc, #436]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b10:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d8d8      	bhi.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004b18:	a201      	add	r2, pc, #4	@ (adr r2, 8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 8004b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1e:	bf00      	nop
 8004b20:	08004bc3 	.word	0x08004bc3
 8004b24:	08004b9f 	.word	0x08004b9f
 8004b28:	08004baf 	.word	0x08004baf
 8004b2c:	08004b05 	.word	0x08004b05
 8004b30:	08004bab 	.word	0x08004bab
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8004b34:	4a63      	ldr	r2, [pc, #396]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b36:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004b38:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
    switch (saiclocksource)
 8004b3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b40:	d04b      	beq.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8004b42:	d944      	bls.n	8004bce <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 8004b44:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b48:	d0dc      	beq.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8004b4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b4e:	d1bc      	bne.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004b50:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b52:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004b54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b58:	0752      	lsls	r2, r2, #29
 8004b5a:	d5a7      	bpl.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1a5      	bne.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b60:	4b58      	ldr	r3, [pc, #352]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b62:	485b      	ldr	r0, [pc, #364]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004b6a:	40d8      	lsrs	r0, r3
 8004b6c:	e7cb      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d154      	bne.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b72:	6810      	ldr	r0, [r2, #0]
 8004b74:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8004b78:	d0c5      	beq.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b7a:	a801      	add	r0, sp, #4
 8004b7c:	f7ff fea2 	bl	80048c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b80:	9802      	ldr	r0, [sp, #8]
 8004b82:	e7c0      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004b84:	4a4f      	ldr	r2, [pc, #316]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b86:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004b88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 8004b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b90:	f000 80d0 	beq.w	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 8004b94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b98:	d0da      	beq.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d195      	bne.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b9e:	4b49      	ldr	r3, [pc, #292]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004ba0:	6818      	ldr	r0, [r3, #0]
 8004ba2:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004ba6:	d0ae      	beq.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004ba8:	e79b      	b.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004baa:	4a46      	ldr	r2, [pc, #280]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004bac:	e775      	b.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004bae:	4b45      	ldr	r3, [pc, #276]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004bb0:	6818      	ldr	r0, [r3, #0]
 8004bb2:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8004bb6:	d0a6      	beq.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bb8:	a801      	add	r0, sp, #4
 8004bba:	f7ff fde9 	bl	8004790 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004bbe:	9801      	ldr	r0, [sp, #4]
 8004bc0:	e7a1      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004bc2:	4b40      	ldr	r3, [pc, #256]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8004bca:	d09c      	beq.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004bcc:	e7d5      	b.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0cf      	beq.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004bd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bd6:	d080      	beq.n	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8004bd8:	e777      	b.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004bda:	6810      	ldr	r0, [r2, #0]
 8004bdc:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8004be0:	d091      	beq.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004be2:	e7e9      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8004be4:	4a37      	ldr	r2, [pc, #220]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004be6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004be8:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
    switch (saiclocksource)
 8004bec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bf0:	d0f3      	beq.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8004bf2:	d806      	bhi.n	8004c02 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0bc      	beq.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004bf8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bfc:	f43f af6d 	beq.w	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8004c00:	e763      	b.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004c02:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004c06:	f43f af7d 	beq.w	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8004c0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c0e:	f43f af44 	beq.w	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8004c12:	e75a      	b.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
 8004c14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c18:	d09a      	beq.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004c1a:	e756      	b.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004c1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c20:	f43f af5b 	beq.w	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8004c24:	e751      	b.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c26:	6810      	ldr	r0, [r2, #0]
 8004c28:	f010 0004 	ands.w	r0, r0, #4
 8004c2c:	f43f af6b 	beq.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c30:	6813      	ldr	r3, [r2, #0]
 8004c32:	4827      	ldr	r0, [pc, #156]	@ (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004c34:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004c38:	40d8      	lsrs	r0, r3
 8004c3a:	e764      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004c3c:	4b21      	ldr	r3, [pc, #132]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004c3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 8004c40:	03d2      	lsls	r2, r2, #15
 8004c42:	d5bf      	bpl.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004c4a:	f43f af5c 	beq.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c4e:	a801      	add	r0, sp, #4
 8004c50:	f7ff fd04 	bl	800465c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004c54:	9803      	ldr	r0, [sp, #12]
 8004c56:	e756      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004c58:	4a1a      	ldr	r2, [pc, #104]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004c5a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004c5c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 8004c60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c64:	d0df      	beq.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004c66:	d810      	bhi.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8004c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c6c:	d058      	beq.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8004c6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c72:	d118      	bne.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c74:	4b13      	ldr	r3, [pc, #76]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8004c7c:	f43f af43 	beq.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c80:	a801      	add	r0, sp, #4
 8004c82:	f7ff fd85 	bl	8004790 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004c86:	9802      	ldr	r0, [sp, #8]
 8004c88:	e73d      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8004c8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c8e:	d012      	beq.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 8004c90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c94:	f47f af19 	bne.w	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c98:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004c9a:	6818      	ldr	r0, [r3, #0]
 8004c9c:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8004ca0:	f43f af31 	beq.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004ca4:	e6ea      	b.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f47f af0f 	bne.w	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
 8004cac:	b005      	add	sp, #20
 8004cae:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8004cb2:	f7fe bbf3 	b.w	800349c <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004cb6:	6810      	ldr	r0, [r2, #0]
 8004cb8:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8004cbc:	f43f af23 	beq.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 8004cc0:	4804      	ldr	r0, [pc, #16]	@ (8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004cc2:	e720      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004cc4:	58024400 	.word	0x58024400
 8004cc8:	007a1200 	.word	0x007a1200
 8004ccc:	00bb8000 	.word	0x00bb8000
 8004cd0:	03d09000 	.word	0x03d09000
 8004cd4:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8004cd8:	4b28      	ldr	r3, [pc, #160]	@ (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8004cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cdc:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 8004ce0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004ce4:	d037      	beq.n	8004d56 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 8004ce6:	d814      	bhi.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8004ce8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cec:	d03f      	beq.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8004cee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cf2:	d0bf      	beq.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f47f aee8 	bne.w	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004cfa:	f7fe fb8f 	bl	800341c <HAL_RCC_GetHCLKFreq>
 8004cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8004d00:	4a1f      	ldr	r2, [pc, #124]	@ (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004d08:	5cd3      	ldrb	r3, [r2, r3]
 8004d0a:	f003 031f 	and.w	r3, r3, #31
 8004d0e:	40d8      	lsrs	r0, r3
        break;
 8004d10:	e6f9      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8004d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d16:	d017      	beq.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 8004d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d1c:	d0bc      	beq.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8004d1e:	e6d4      	b.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d20:	6810      	ldr	r0, [r2, #0]
 8004d22:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004d26:	f43f aeee 	beq.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d2a:	a801      	add	r0, sp, #4
 8004d2c:	f7ff fc96 	bl	800465c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004d30:	9802      	ldr	r0, [sp, #8]
 8004d32:	e6e8      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d34:	6810      	ldr	r0, [r2, #0]
 8004d36:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8004d3a:	f43f aee4 	beq.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d3e:	a801      	add	r0, sp, #4
 8004d40:	f7ff fd26 	bl	8004790 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004d44:	9803      	ldr	r0, [sp, #12]
 8004d46:	e6de      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004d48:	4b0c      	ldr	r3, [pc, #48]	@ (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8004d4a:	6818      	ldr	r0, [r3, #0]
 8004d4c:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8004d50:	f43f aed9 	beq.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004d54:	e7b4      	b.n	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d56:	4b09      	ldr	r3, [pc, #36]	@ (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	f010 0004 	ands.w	r0, r0, #4
 8004d5e:	f43f aed2 	beq.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4807      	ldr	r0, [pc, #28]	@ (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 8004d66:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004d6a:	40d8      	lsrs	r0, r3
 8004d6c:	e6cb      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d6e:	4b03      	ldr	r3, [pc, #12]	@ (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004d76:	f43f aec6 	beq.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004d7a:	e7d6      	b.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8004d7c:	58024400 	.word	0x58024400
 8004d80:	08005994 	.word	0x08005994
 8004d84:	03d09000 	.word	0x03d09000

08004d88 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	f000 8090 	beq.w	8004eae <HAL_TIM_Base_Init+0x126>
{
 8004d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d90:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004d94:	4604      	mov	r4, r0
 8004d96:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d078      	beq.n	8004e90 <HAL_TIM_Base_Init+0x108>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d9e:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004da0:	2202      	movs	r2, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004da2:	4944      	ldr	r1, [pc, #272]	@ (8004eb4 <HAL_TIM_Base_Init+0x12c>)
 8004da4:	4d44      	ldr	r5, [pc, #272]	@ (8004eb8 <HAL_TIM_Base_Init+0x130>)
 8004da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004daa:	eba3 0101 	sub.w	r1, r3, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8004dae:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004db2:	eba3 0e05 	sub.w	lr, r3, r5
  tmpcr1 = TIMx->CR1;
 8004db6:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004db8:	fab1 f181 	clz	r1, r1
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dbc:	69a0      	ldr	r0, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dbe:	fabe fe8e 	clz	lr, lr

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dc2:	6866      	ldr	r6, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dc4:	ea4f 1151 	mov.w	r1, r1, lsr #5
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dc8:	68e7      	ldr	r7, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dca:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8004dce:	d01f      	beq.n	8004e10 <HAL_TIM_Base_Init+0x88>
 8004dd0:	b9f1      	cbnz	r1, 8004e10 <HAL_TIM_Base_Init+0x88>
 8004dd2:	f8df c0f4 	ldr.w	ip, [pc, #244]	@ 8004ec8 <HAL_TIM_Base_Init+0x140>
 8004dd6:	4563      	cmp	r3, ip
 8004dd8:	d01a      	beq.n	8004e10 <HAL_TIM_Base_Init+0x88>
 8004dda:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004dde:	4563      	cmp	r3, ip
 8004de0:	d016      	beq.n	8004e10 <HAL_TIM_Base_Init+0x88>
 8004de2:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004de6:	4563      	cmp	r3, ip
 8004de8:	d012      	beq.n	8004e10 <HAL_TIM_Base_Init+0x88>
 8004dea:	f1be 0f00 	cmp.w	lr, #0
 8004dee:	d10f      	bne.n	8004e10 <HAL_TIM_Base_Init+0x88>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004df0:	4d32      	ldr	r5, [pc, #200]	@ (8004ebc <HAL_TIM_Base_Init+0x134>)
 8004df2:	4933      	ldr	r1, [pc, #204]	@ (8004ec0 <HAL_TIM_Base_Init+0x138>)
 8004df4:	428b      	cmp	r3, r1
 8004df6:	bf18      	it	ne
 8004df8:	42ab      	cmpne	r3, r5
 8004dfa:	d04e      	beq.n	8004e9a <HAL_TIM_Base_Init+0x112>
 8004dfc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004e00:	428b      	cmp	r3, r1
 8004e02:	d04a      	beq.n	8004e9a <HAL_TIM_Base_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e08:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e0a:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e0c:	4310      	orrs	r0, r2

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e0e:	e01e      	b.n	8004e4e <HAL_TIM_Base_Init+0xc6>
    tmpcr1 |= Structure->CounterMode;
 8004e10:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e12:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e16:	f8d4 c010 	ldr.w	ip, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8004e1a:	432a      	orrs	r2, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e1c:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e1e:	629e      	str	r6, [r3, #40]	@ 0x28
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e20:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e24:	ea42 020c 	orr.w	r2, r2, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e2c:	4310      	orrs	r0, r2
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e2e:	b961      	cbnz	r1, 8004e4a <HAL_TIM_Base_Init+0xc2>
 8004e30:	f1be 0f00 	cmp.w	lr, #0
 8004e34:	d109      	bne.n	8004e4a <HAL_TIM_Base_Init+0xc2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e36:	4923      	ldr	r1, [pc, #140]	@ (8004ec4 <HAL_TIM_Base_Init+0x13c>)
 8004e38:	4a20      	ldr	r2, [pc, #128]	@ (8004ebc <HAL_TIM_Base_Init+0x134>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	bf18      	it	ne
 8004e3e:	428b      	cmpne	r3, r1
 8004e40:	d003      	beq.n	8004e4a <HAL_TIM_Base_Init+0xc2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e42:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d101      	bne.n	8004e4e <HAL_TIM_Base_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e4a:	6962      	ldr	r2, [r4, #20]
 8004e4c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004e4e:	6819      	ldr	r1, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e50:	2201      	movs	r2, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004e52:	f041 0104 	orr.w	r1, r1, #4
 8004e56:	6019      	str	r1, [r3, #0]
  TIMx->EGR = TIM_EGR_UG;
 8004e58:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004e5a:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8004e5c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e5e:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e62:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 8004e66:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
 8004e6a:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
 8004e6e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
 8004e72:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8004e76:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e7a:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 8004e7e:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 8004e82:	f884 2046 	strb.w	r2, [r4, #70]	@ 0x46
 8004e86:	f884 2047 	strb.w	r2, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004e8a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
}
 8004e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8004e90:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004e94:	f7fc f88a 	bl	8000fac <HAL_TIM_Base_MspInit>
 8004e98:	e781      	b.n	8004d9e <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e9a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e9c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ea0:	62df      	str	r7, [r3, #44]	@ 0x2c
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ea2:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8004ea4:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ea6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004eaa:	4310      	orrs	r0, r2
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eac:	e7c3      	b.n	8004e36 <HAL_TIM_Base_Init+0xae>
    return HAL_ERROR;
 8004eae:	2001      	movs	r0, #1
}
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	40010000 	.word	0x40010000
 8004eb8:	40010400 	.word	0x40010400
 8004ebc:	40014000 	.word	0x40014000
 8004ec0:	40014400 	.word	0x40014400
 8004ec4:	40014800 	.word	0x40014800
 8004ec8:	40000400 	.word	0x40000400

08004ecc <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop

08004ed0 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop

08004ed4 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop

08004ed8 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop

08004edc <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop

08004ee0 <HAL_TIM_IRQHandler>:
{
 8004ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 8004ee2:	6803      	ldr	r3, [r0, #0]
{
 8004ee4:	4605      	mov	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 8004ee6:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ee8:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004eea:	07a1      	lsls	r1, r4, #30
 8004eec:	d501      	bpl.n	8004ef2 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004eee:	07b2      	lsls	r2, r6, #30
 8004ef0:	d457      	bmi.n	8004fa2 <HAL_TIM_IRQHandler+0xc2>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ef2:	0767      	lsls	r7, r4, #29
 8004ef4:	d501      	bpl.n	8004efa <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ef6:	0770      	lsls	r0, r6, #29
 8004ef8:	d440      	bmi.n	8004f7c <HAL_TIM_IRQHandler+0x9c>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004efa:	0721      	lsls	r1, r4, #28
 8004efc:	d501      	bpl.n	8004f02 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004efe:	0732      	lsls	r2, r6, #28
 8004f00:	d42a      	bmi.n	8004f58 <HAL_TIM_IRQHandler+0x78>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f02:	06e7      	lsls	r7, r4, #27
 8004f04:	d501      	bpl.n	8004f0a <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f06:	06f0      	lsls	r0, r6, #27
 8004f08:	d413      	bmi.n	8004f32 <HAL_TIM_IRQHandler+0x52>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f0a:	07e1      	lsls	r1, r4, #31
 8004f0c:	d501      	bpl.n	8004f12 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f0e:	07f2      	lsls	r2, r6, #31
 8004f10:	d465      	bmi.n	8004fde <HAL_TIM_IRQHandler+0xfe>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f12:	f414 5f02 	tst.w	r4, #8320	@ 0x2080
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f16:	f404 7780 	and.w	r7, r4, #256	@ 0x100
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f1a:	d052      	beq.n	8004fc2 <HAL_TIM_IRQHandler+0xe2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f1c:	0633      	lsls	r3, r6, #24
 8004f1e:	d466      	bmi.n	8004fee <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f20:	0660      	lsls	r0, r4, #25
 8004f22:	d501      	bpl.n	8004f28 <HAL_TIM_IRQHandler+0x48>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f24:	0671      	lsls	r1, r6, #25
 8004f26:	d473      	bmi.n	8005010 <HAL_TIM_IRQHandler+0x130>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f28:	06a2      	lsls	r2, r4, #26
 8004f2a:	d501      	bpl.n	8004f30 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f2c:	06b3      	lsls	r3, r6, #26
 8004f2e:	d44d      	bmi.n	8004fcc <HAL_TIM_IRQHandler+0xec>
}
 8004f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f32:	682b      	ldr	r3, [r5, #0]
 8004f34:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8004f38:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f3c:	2208      	movs	r2, #8
 8004f3e:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004f46:	d174      	bne.n	8005032 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f48:	f7ff ffc2 	bl	8004ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	f7ff ffc3 	bl	8004ed8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f52:	2300      	movs	r3, #0
 8004f54:	772b      	strb	r3, [r5, #28]
 8004f56:	e7d8      	b.n	8004f0a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f58:	682b      	ldr	r3, [r5, #0]
 8004f5a:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5e:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f62:	2204      	movs	r2, #4
 8004f64:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	079b      	lsls	r3, r3, #30
 8004f6a:	d15f      	bne.n	800502c <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6c:	f7ff ffb0 	bl	8004ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f70:	4628      	mov	r0, r5
 8004f72:	f7ff ffb1 	bl	8004ed8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f76:	2300      	movs	r3, #0
 8004f78:	772b      	strb	r3, [r5, #28]
 8004f7a:	e7c2      	b.n	8004f02 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f7c:	682b      	ldr	r3, [r5, #0]
 8004f7e:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8004f82:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f86:	2202      	movs	r2, #2
 8004f88:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004f90:	d149      	bne.n	8005026 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f92:	f7ff ff9d 	bl	8004ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f96:	4628      	mov	r0, r5
 8004f98:	f7ff ff9e 	bl	8004ed8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	772b      	strb	r3, [r5, #28]
 8004fa0:	e7ab      	b.n	8004efa <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fa2:	f06f 0202 	mvn.w	r2, #2
 8004fa6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fa8:	2201      	movs	r2, #1
 8004faa:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	079b      	lsls	r3, r3, #30
 8004fb0:	d136      	bne.n	8005020 <HAL_TIM_IRQHandler+0x140>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb2:	f7ff ff8d 	bl	8004ed0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f7ff ff8e 	bl	8004ed8 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	772b      	strb	r3, [r5, #28]
 8004fc0:	e797      	b.n	8004ef2 <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004fc2:	2f00      	cmp	r7, #0
 8004fc4:	d0ac      	beq.n	8004f20 <HAL_TIM_IRQHandler+0x40>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fc6:	0637      	lsls	r7, r6, #24
 8004fc8:	d41a      	bmi.n	8005000 <HAL_TIM_IRQHandler+0x120>
 8004fca:	e7a9      	b.n	8004f20 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004fd2:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fd4:	611a      	str	r2, [r3, #16]
}
 8004fd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004fda:	f000 b887 	b.w	80050ec <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fde:	682b      	ldr	r3, [r5, #0]
 8004fe0:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fe4:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fe6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fe8:	f7ff ff70 	bl	8004ecc <HAL_TIM_PeriodElapsedCallback>
 8004fec:	e791      	b.n	8004f12 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004fee:	682b      	ldr	r3, [r5, #0]
 8004ff0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 8004ff4:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004ff6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004ff8:	f000 f87a 	bl	80050f0 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ffc:	2f00      	cmp	r7, #0
 8004ffe:	d08f      	beq.n	8004f20 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005000:	682b      	ldr	r3, [r5, #0]
 8005002:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 8005006:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005008:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800500a:	f000 f873 	bl	80050f4 <HAL_TIMEx_Break2Callback>
 800500e:	e787      	b.n	8004f20 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 8005016:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005018:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800501a:	f7ff ff5f 	bl	8004edc <HAL_TIM_TriggerCallback>
 800501e:	e783      	b.n	8004f28 <HAL_TIM_IRQHandler+0x48>
          HAL_TIM_IC_CaptureCallback(htim);
 8005020:	f7ff ff58 	bl	8004ed4 <HAL_TIM_IC_CaptureCallback>
 8005024:	e7ca      	b.n	8004fbc <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8005026:	f7ff ff55 	bl	8004ed4 <HAL_TIM_IC_CaptureCallback>
 800502a:	e7b7      	b.n	8004f9c <HAL_TIM_IRQHandler+0xbc>
        HAL_TIM_IC_CaptureCallback(htim);
 800502c:	f7ff ff52 	bl	8004ed4 <HAL_TIM_IC_CaptureCallback>
 8005030:	e7a1      	b.n	8004f76 <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 8005032:	f7ff ff4f 	bl	8004ed4 <HAL_TIM_IC_CaptureCallback>
 8005036:	e78c      	b.n	8004f52 <HAL_TIM_IRQHandler+0x72>

08005038 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005038:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800503c:	2b01      	cmp	r3, #1
 800503e:	d04b      	beq.n	80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005040:	6803      	ldr	r3, [r0, #0]
 8005042:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8005044:	2002      	movs	r0, #2
{
 8005046:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005048:	4d24      	ldr	r5, [pc, #144]	@ (80050dc <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800504a:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800504e:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8005050:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005052:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005054:	d029      	beq.n	80050aa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005056:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800505a:	42ab      	cmp	r3, r5
 800505c:	d025      	beq.n	80050aa <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800505e:	4d20      	ldr	r5, [pc, #128]	@ (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8005060:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005064:	42ab      	cmp	r3, r5
 8005066:	bf18      	it	ne
 8005068:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 800506c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005070:	bf0c      	ite	eq
 8005072:	f04f 0c01 	moveq.w	ip, #1
 8005076:	f04f 0c00 	movne.w	ip, #0
 800507a:	42ab      	cmp	r3, r5
 800507c:	bf08      	it	eq
 800507e:	f04c 0c01 	orreq.w	ip, ip, #1
 8005082:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005086:	42ab      	cmp	r3, r5
 8005088:	bf08      	it	eq
 800508a:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800508e:	680d      	ldr	r5, [r1, #0]
 8005090:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005092:	4d14      	ldr	r5, [pc, #80]	@ (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 8005094:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005096:	42ab      	cmp	r3, r5
 8005098:	bf14      	ite	ne
 800509a:	4660      	movne	r0, ip
 800509c:	f04c 0001 	orreq.w	r0, ip, #1
 80050a0:	b960      	cbnz	r0, 80050bc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80050a2:	4811      	ldr	r0, [pc, #68]	@ (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80050a4:	4283      	cmp	r3, r0
 80050a6:	d009      	beq.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80050a8:	e00d      	b.n	80050c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050aa:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050ac:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050b0:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050b2:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80050b4:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050b8:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 80050ba:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050bc:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050be:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050c2:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050c4:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80050c6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80050c8:	2101      	movs	r1, #1

  return HAL_OK;
 80050ca:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80050cc:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80050d0:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 80050d4:	bc30      	pop	{r4, r5}
 80050d6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80050d8:	2002      	movs	r0, #2
}
 80050da:	4770      	bx	lr
 80050dc:	40010000 	.word	0x40010000
 80050e0:	40000400 	.word	0x40000400
 80050e4:	40001800 	.word	0x40001800
 80050e8:	40014000 	.word	0x40014000

080050ec <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop

080050f0 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop

080050f4 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop

080050f8 <UART_SetConfig>:
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050f8:	6901      	ldr	r1, [r0, #16]
 80050fa:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80050fc:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050fe:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005100:	49a2      	ldr	r1, [pc, #648]	@ (800538c <UART_SetConfig+0x294>)
{
 8005102:	b570      	push	{r4, r5, r6, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005104:	6945      	ldr	r5, [r0, #20]
{
 8005106:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005108:	69c0      	ldr	r0, [r0, #28]
{
 800510a:	b086      	sub	sp, #24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800510c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800510e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005110:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005112:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005114:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005116:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005118:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800511a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8005122:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005124:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005126:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005128:	4a99      	ldr	r2, [pc, #612]	@ (8005390 <UART_SetConfig+0x298>)
 800512a:	4293      	cmp	r3, r2
 800512c:	f000 8118 	beq.w	8005360 <UART_SetConfig+0x268>
    tmpreg |= huart->Init.OneBitSampling;
 8005130:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005132:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8005134:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005136:	4a97      	ldr	r2, [pc, #604]	@ (8005394 <UART_SetConfig+0x29c>)
 8005138:	4032      	ands	r2, r6
 800513a:	4311      	orrs	r1, r2
 800513c:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800513e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005140:	f022 020f 	bic.w	r2, r2, #15
 8005144:	432a      	orrs	r2, r5
 8005146:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005148:	4a93      	ldr	r2, [pc, #588]	@ (8005398 <UART_SetConfig+0x2a0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d028      	beq.n	80051a0 <UART_SetConfig+0xa8>
 800514e:	4a93      	ldr	r2, [pc, #588]	@ (800539c <UART_SetConfig+0x2a4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d01a      	beq.n	800518a <UART_SetConfig+0x92>
 8005154:	4a92      	ldr	r2, [pc, #584]	@ (80053a0 <UART_SetConfig+0x2a8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d017      	beq.n	800518a <UART_SetConfig+0x92>
 800515a:	4a92      	ldr	r2, [pc, #584]	@ (80053a4 <UART_SetConfig+0x2ac>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d014      	beq.n	800518a <UART_SetConfig+0x92>
 8005160:	4a91      	ldr	r2, [pc, #580]	@ (80053a8 <UART_SetConfig+0x2b0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d011      	beq.n	800518a <UART_SetConfig+0x92>
 8005166:	4a91      	ldr	r2, [pc, #580]	@ (80053ac <UART_SetConfig+0x2b4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d019      	beq.n	80051a0 <UART_SetConfig+0xa8>
 800516c:	4a90      	ldr	r2, [pc, #576]	@ (80053b0 <UART_SetConfig+0x2b8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00b      	beq.n	800518a <UART_SetConfig+0x92>
 8005172:	4a90      	ldr	r2, [pc, #576]	@ (80053b4 <UART_SetConfig+0x2bc>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d008      	beq.n	800518a <UART_SetConfig+0x92>

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 8005178:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800517a:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800517c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->RxISR = NULL;
 8005180:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8005182:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8005184:	67a3      	str	r3, [r4, #120]	@ 0x78

  return ret;
}
 8005186:	b006      	add	sp, #24
 8005188:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800518a:	4b8b      	ldr	r3, [pc, #556]	@ (80053b8 <UART_SetConfig+0x2c0>)
 800518c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	2b05      	cmp	r3, #5
 8005194:	d8f0      	bhi.n	8005178 <UART_SetConfig+0x80>
 8005196:	e8df f003 	tbb	[pc, r3]
 800519a:	5f9d      	.short	0x5f9d
 800519c:	977e7169 	.word	0x977e7169
 80051a0:	4b85      	ldr	r3, [pc, #532]	@ (80053b8 <UART_SetConfig+0x2c0>)
 80051a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051a8:	2b28      	cmp	r3, #40	@ 0x28
 80051aa:	d8e5      	bhi.n	8005178 <UART_SetConfig+0x80>
 80051ac:	a201      	add	r2, pc, #4	@ (adr r2, 80051b4 <UART_SetConfig+0xbc>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	0800532f 	.word	0x0800532f
 80051b8:	08005179 	.word	0x08005179
 80051bc:	08005179 	.word	0x08005179
 80051c0:	08005179 	.word	0x08005179
 80051c4:	08005179 	.word	0x08005179
 80051c8:	08005179 	.word	0x08005179
 80051cc:	08005179 	.word	0x08005179
 80051d0:	08005179 	.word	0x08005179
 80051d4:	08005259 	.word	0x08005259
 80051d8:	08005179 	.word	0x08005179
 80051dc:	08005179 	.word	0x08005179
 80051e0:	08005179 	.word	0x08005179
 80051e4:	08005179 	.word	0x08005179
 80051e8:	08005179 	.word	0x08005179
 80051ec:	08005179 	.word	0x08005179
 80051f0:	08005179 	.word	0x08005179
 80051f4:	0800526d 	.word	0x0800526d
 80051f8:	08005179 	.word	0x08005179
 80051fc:	08005179 	.word	0x08005179
 8005200:	08005179 	.word	0x08005179
 8005204:	08005179 	.word	0x08005179
 8005208:	08005179 	.word	0x08005179
 800520c:	08005179 	.word	0x08005179
 8005210:	08005179 	.word	0x08005179
 8005214:	0800527d 	.word	0x0800527d
 8005218:	08005179 	.word	0x08005179
 800521c:	08005179 	.word	0x08005179
 8005220:	08005179 	.word	0x08005179
 8005224:	08005179 	.word	0x08005179
 8005228:	08005179 	.word	0x08005179
 800522c:	08005179 	.word	0x08005179
 8005230:	08005179 	.word	0x08005179
 8005234:	08005297 	.word	0x08005297
 8005238:	08005179 	.word	0x08005179
 800523c:	08005179 	.word	0x08005179
 8005240:	08005179 	.word	0x08005179
 8005244:	08005179 	.word	0x08005179
 8005248:	08005179 	.word	0x08005179
 800524c:	08005179 	.word	0x08005179
 8005250:	08005179 	.word	0x08005179
 8005254:	080052c9 	.word	0x080052c9
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005258:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800525c:	d040      	beq.n	80052e0 <UART_SetConfig+0x1e8>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800525e:	4668      	mov	r0, sp
 8005260:	f7ff f9fc 	bl	800465c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005264:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8005266:	b368      	cbz	r0, 80052c4 <UART_SetConfig+0x1cc>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005268:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800526a:	e018      	b.n	800529e <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800526c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005270:	d06e      	beq.n	8005350 <UART_SetConfig+0x258>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005272:	a803      	add	r0, sp, #12
 8005274:	f7ff fa8c 	bl	8004790 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005278:	9804      	ldr	r0, [sp, #16]
        break;
 800527a:	e7f4      	b.n	8005266 <UART_SetConfig+0x16e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800527c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005280:	d05b      	beq.n	800533a <UART_SetConfig+0x242>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005282:	4b4d      	ldr	r3, [pc, #308]	@ (80053b8 <UART_SetConfig+0x2c0>)
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	0692      	lsls	r2, r2, #26
 8005288:	d54c      	bpl.n	8005324 <UART_SetConfig+0x22c>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	484b      	ldr	r0, [pc, #300]	@ (80053bc <UART_SetConfig+0x2c4>)
 800528e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005292:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8005294:	e003      	b.n	800529e <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005296:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) CSI_VALUE;
 800529a:	4849      	ldr	r0, [pc, #292]	@ (80053c0 <UART_SetConfig+0x2c8>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800529c:	d027      	beq.n	80052ee <UART_SetConfig+0x1f6>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800529e:	4a49      	ldr	r2, [pc, #292]	@ (80053c4 <UART_SetConfig+0x2cc>)
 80052a0:	6863      	ldr	r3, [r4, #4]
 80052a2:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052a6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052aa:	fbb0 f0f1 	udiv	r0, r0, r1
 80052ae:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80052b2:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052b6:	f1a0 0310 	sub.w	r3, r0, #16
 80052ba:	4293      	cmp	r3, r2
 80052bc:	f63f af5c 	bhi.w	8005178 <UART_SetConfig+0x80>
          huart->Instance->BRR = usartdiv;
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	60d8      	str	r0, [r3, #12]
          pclk = (uint32_t) HSI_VALUE;
 80052c4:	2000      	movs	r0, #0
 80052c6:	e758      	b.n	800517a <UART_SetConfig+0x82>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052c8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80052cc:	d00f      	beq.n	80052ee <UART_SetConfig+0x1f6>
        pclk = (uint32_t) LSE_VALUE;
 80052ce:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80052d2:	e7e4      	b.n	800529e <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052d4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80052d8:	d026      	beq.n	8005328 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetPCLK1Freq();
 80052da:	f7fe f8df 	bl	800349c <HAL_RCC_GetPCLK1Freq>
        break;
 80052de:	e7c2      	b.n	8005266 <UART_SetConfig+0x16e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052e0:	4668      	mov	r0, sp
 80052e2:	f7ff f9bb 	bl	800465c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80052e6:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d0eb      	beq.n	80052c4 <UART_SetConfig+0x1cc>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052ec:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80052ee:	4b35      	ldr	r3, [pc, #212]	@ (80053c4 <UART_SetConfig+0x2cc>)
 80052f0:	6862      	ldr	r2, [r4, #4]
 80052f2:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 80052f6:	0853      	lsrs	r3, r2, #1
 80052f8:	fbb0 f0f1 	udiv	r0, r0, r1
 80052fc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005300:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005304:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005308:	f1a3 0210 	sub.w	r2, r3, #16
 800530c:	428a      	cmp	r2, r1
 800530e:	f63f af33 	bhi.w	8005178 <UART_SetConfig+0x80>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005312:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005316:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800531a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800531c:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800531e:	4313      	orrs	r3, r2
 8005320:	60cb      	str	r3, [r1, #12]
 8005322:	e7cf      	b.n	80052c4 <UART_SetConfig+0x1cc>
          pclk = (uint32_t) HSI_VALUE;
 8005324:	4825      	ldr	r0, [pc, #148]	@ (80053bc <UART_SetConfig+0x2c4>)
 8005326:	e7ba      	b.n	800529e <UART_SetConfig+0x1a6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005328:	f7fe f8b8 	bl	800349c <HAL_RCC_GetPCLK1Freq>
        break;
 800532c:	e7dc      	b.n	80052e8 <UART_SetConfig+0x1f0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800532e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005332:	d012      	beq.n	800535a <UART_SetConfig+0x262>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005334:	f7fe f8fa 	bl	800352c <HAL_RCC_GetPCLK2Freq>
        break;
 8005338:	e795      	b.n	8005266 <UART_SetConfig+0x16e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800533a:	4b1f      	ldr	r3, [pc, #124]	@ (80053b8 <UART_SetConfig+0x2c0>)
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	0691      	lsls	r1, r2, #26
 8005340:	f140 808a 	bpl.w	8005458 <UART_SetConfig+0x360>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	481d      	ldr	r0, [pc, #116]	@ (80053bc <UART_SetConfig+0x2c4>)
 8005348:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800534c:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800534e:	e7ce      	b.n	80052ee <UART_SetConfig+0x1f6>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005350:	a803      	add	r0, sp, #12
 8005352:	f7ff fa1d 	bl	8004790 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005356:	9804      	ldr	r0, [sp, #16]
        break;
 8005358:	e7c6      	b.n	80052e8 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetPCLK2Freq();
 800535a:	f7fe f8e7 	bl	800352c <HAL_RCC_GetPCLK2Freq>
        break;
 800535e:	e7c3      	b.n	80052e8 <UART_SetConfig+0x1f0>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005360:	6898      	ldr	r0, [r3, #8]
 8005362:	4a0c      	ldr	r2, [pc, #48]	@ (8005394 <UART_SetConfig+0x29c>)
 8005364:	4002      	ands	r2, r0
 8005366:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005368:	4913      	ldr	r1, [pc, #76]	@ (80053b8 <UART_SetConfig+0x2c0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800536a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800536c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800536e:	f022 020f 	bic.w	r2, r2, #15
 8005372:	432a      	orrs	r2, r5
 8005374:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005376:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	2b05      	cmp	r3, #5
 800537e:	f63f aefb 	bhi.w	8005178 <UART_SetConfig+0x80>
 8005382:	e8df f003 	tbb	[pc, r3]
 8005386:	565b      	.short	0x565b
 8005388:	5e61214d 	.word	0x5e61214d
 800538c:	cfff69f3 	.word	0xcfff69f3
 8005390:	58000c00 	.word	0x58000c00
 8005394:	11fff4ff 	.word	0x11fff4ff
 8005398:	40011000 	.word	0x40011000
 800539c:	40004400 	.word	0x40004400
 80053a0:	40004800 	.word	0x40004800
 80053a4:	40004c00 	.word	0x40004c00
 80053a8:	40005000 	.word	0x40005000
 80053ac:	40011400 	.word	0x40011400
 80053b0:	40007800 	.word	0x40007800
 80053b4:	40007c00 	.word	0x40007c00
 80053b8:	58024400 	.word	0x58024400
 80053bc:	03d09000 	.word	0x03d09000
 80053c0:	003d0900 	.word	0x003d0900
 80053c4:	080059ac 	.word	0x080059ac
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053c8:	4b24      	ldr	r3, [pc, #144]	@ (800545c <UART_SetConfig+0x364>)
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	0690      	lsls	r0, r2, #26
 80053ce:	d43d      	bmi.n	800544c <UART_SetConfig+0x354>
          pclk = (uint32_t) HSI_VALUE;
 80053d0:	4823      	ldr	r0, [pc, #140]	@ (8005460 <UART_SetConfig+0x368>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053d2:	4b24      	ldr	r3, [pc, #144]	@ (8005464 <UART_SetConfig+0x36c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053d4:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053d6:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053da:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053de:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053e2:	4299      	cmp	r1, r3
 80053e4:	f63f aec8 	bhi.w	8005178 <UART_SetConfig+0x80>
 80053e8:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 80053ec:	f63f aec4 	bhi.w	8005178 <UART_SetConfig+0x80>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053f0:	2300      	movs	r3, #0
 80053f2:	4619      	mov	r1, r3
 80053f4:	f7fa ff70 	bl	80002d8 <__aeabi_uldivmod>
 80053f8:	4632      	mov	r2, r6
 80053fa:	0209      	lsls	r1, r1, #8
 80053fc:	0203      	lsls	r3, r0, #8
 80053fe:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8005402:	0870      	lsrs	r0, r6, #1
 8005404:	1818      	adds	r0, r3, r0
 8005406:	f04f 0300 	mov.w	r3, #0
 800540a:	f141 0100 	adc.w	r1, r1, #0
 800540e:	f7fa ff63 	bl	80002d8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005412:	4b15      	ldr	r3, [pc, #84]	@ (8005468 <UART_SetConfig+0x370>)
 8005414:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8005418:	429a      	cmp	r2, r3
 800541a:	f63f aead 	bhi.w	8005178 <UART_SetConfig+0x80>
 800541e:	e74f      	b.n	80052c0 <UART_SetConfig+0x1c8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005420:	a803      	add	r0, sp, #12
 8005422:	f7ff f9b5 	bl	8004790 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005426:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8005428:	2800      	cmp	r0, #0
 800542a:	f43f af4b 	beq.w	80052c4 <UART_SetConfig+0x1cc>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800542e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8005430:	e7cf      	b.n	80053d2 <UART_SetConfig+0x2da>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005432:	4668      	mov	r0, sp
 8005434:	f7ff f912 	bl	800465c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005438:	9801      	ldr	r0, [sp, #4]
        break;
 800543a:	e7f5      	b.n	8005428 <UART_SetConfig+0x330>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800543c:	f7ff f8fc 	bl	8004638 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8005440:	e7f2      	b.n	8005428 <UART_SetConfig+0x330>
        pclk = (uint32_t) LSE_VALUE;
 8005442:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005446:	e7c4      	b.n	80053d2 <UART_SetConfig+0x2da>
        pclk = (uint32_t) CSI_VALUE;
 8005448:	4808      	ldr	r0, [pc, #32]	@ (800546c <UART_SetConfig+0x374>)
 800544a:	e7c2      	b.n	80053d2 <UART_SetConfig+0x2da>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4804      	ldr	r0, [pc, #16]	@ (8005460 <UART_SetConfig+0x368>)
 8005450:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005454:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8005456:	e7bc      	b.n	80053d2 <UART_SetConfig+0x2da>
          pclk = (uint32_t) HSI_VALUE;
 8005458:	4801      	ldr	r0, [pc, #4]	@ (8005460 <UART_SetConfig+0x368>)
 800545a:	e748      	b.n	80052ee <UART_SetConfig+0x1f6>
 800545c:	58024400 	.word	0x58024400
 8005460:	03d09000 	.word	0x03d09000
 8005464:	080059ac 	.word	0x080059ac
 8005468:	000ffcff 	.word	0x000ffcff
 800546c:	003d0900 	.word	0x003d0900

08005470 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005470:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005472:	071a      	lsls	r2, r3, #28
{
 8005474:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005476:	d506      	bpl.n	8005486 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005478:	6801      	ldr	r1, [r0, #0]
 800547a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800547c:	684a      	ldr	r2, [r1, #4]
 800547e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005482:	4322      	orrs	r2, r4
 8005484:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005486:	07dc      	lsls	r4, r3, #31
 8005488:	d506      	bpl.n	8005498 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800548a:	6801      	ldr	r1, [r0, #0]
 800548c:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800548e:	684a      	ldr	r2, [r1, #4]
 8005490:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005494:	4322      	orrs	r2, r4
 8005496:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005498:	0799      	lsls	r1, r3, #30
 800549a:	d506      	bpl.n	80054aa <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800549c:	6801      	ldr	r1, [r0, #0]
 800549e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80054a0:	684a      	ldr	r2, [r1, #4]
 80054a2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80054a6:	4322      	orrs	r2, r4
 80054a8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054aa:	075a      	lsls	r2, r3, #29
 80054ac:	d506      	bpl.n	80054bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054ae:	6801      	ldr	r1, [r0, #0]
 80054b0:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80054b2:	684a      	ldr	r2, [r1, #4]
 80054b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80054b8:	4322      	orrs	r2, r4
 80054ba:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054bc:	06dc      	lsls	r4, r3, #27
 80054be:	d506      	bpl.n	80054ce <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054c0:	6801      	ldr	r1, [r0, #0]
 80054c2:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80054c4:	688a      	ldr	r2, [r1, #8]
 80054c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80054ca:	4322      	orrs	r2, r4
 80054cc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054ce:	0699      	lsls	r1, r3, #26
 80054d0:	d506      	bpl.n	80054e0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054d2:	6801      	ldr	r1, [r0, #0]
 80054d4:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80054d6:	688a      	ldr	r2, [r1, #8]
 80054d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054dc:	4322      	orrs	r2, r4
 80054de:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054e0:	065a      	lsls	r2, r3, #25
 80054e2:	d50a      	bpl.n	80054fa <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054e4:	6801      	ldr	r1, [r0, #0]
 80054e6:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80054e8:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054ea:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054ee:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80054f2:	ea42 0204 	orr.w	r2, r2, r4
 80054f6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054f8:	d00b      	beq.n	8005512 <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054fa:	061b      	lsls	r3, r3, #24
 80054fc:	d506      	bpl.n	800550c <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054fe:	6802      	ldr	r2, [r0, #0]
 8005500:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8005502:	6853      	ldr	r3, [r2, #4]
 8005504:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005508:	430b      	orrs	r3, r1
 800550a:	6053      	str	r3, [r2, #4]
  }
}
 800550c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005510:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005512:	684a      	ldr	r2, [r1, #4]
 8005514:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8005516:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800551a:	4322      	orrs	r2, r4
 800551c:	604a      	str	r2, [r1, #4]
 800551e:	e7ec      	b.n	80054fa <UART_AdvFeatureConfig+0x8a>

08005520 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005520:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005522:	2300      	movs	r3, #0
{
 8005524:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005526:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800552a:	f7fb ff01 	bl	8001330 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800552e:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8005530:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005532:	6813      	ldr	r3, [r2, #0]
 8005534:	071b      	lsls	r3, r3, #28
 8005536:	d40f      	bmi.n	8005558 <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005538:	6813      	ldr	r3, [r2, #0]
 800553a:	0759      	lsls	r1, r3, #29
 800553c:	d431      	bmi.n	80055a2 <UART_CheckIdleState+0x82>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005540:	2220      	movs	r2, #32
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 8005542:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8005544:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005548:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554c:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800554e:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8005550:	2300      	movs	r3, #0
 8005552:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8005556:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005558:	69d3      	ldr	r3, [r2, #28]
 800555a:	0298      	lsls	r0, r3, #10
 800555c:	d4ec      	bmi.n	8005538 <UART_CheckIdleState+0x18>
 800555e:	e00c      	b.n	800557a <UART_CheckIdleState+0x5a>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005560:	6819      	ldr	r1, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	0749      	lsls	r1, r1, #29
 8005566:	d505      	bpl.n	8005574 <UART_CheckIdleState+0x54>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005568:	69d9      	ldr	r1, [r3, #28]
 800556a:	0708      	lsls	r0, r1, #28
 800556c:	d44a      	bmi.n	8005604 <UART_CheckIdleState+0xe4>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800556e:	69d9      	ldr	r1, [r3, #28]
 8005570:	0509      	lsls	r1, r1, #20
 8005572:	d475      	bmi.n	8005660 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	0298      	lsls	r0, r3, #10
 8005578:	d4de      	bmi.n	8005538 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800557a:	f7fb fed9 	bl	8001330 <HAL_GetTick>
 800557e:	1b43      	subs	r3, r0, r5
 8005580:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005584:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005586:	d3eb      	bcc.n	8005560 <UART_CheckIdleState+0x40>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005588:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800558c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	e843 2100 	strex	r1, r2, [r3]
 8005594:	2900      	cmp	r1, #0
 8005596:	d1f7      	bne.n	8005588 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8005598:	2320      	movs	r3, #32
 800559a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 800559e:	2003      	movs	r0, #3
 80055a0:	e7d6      	b.n	8005550 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a2:	69d3      	ldr	r3, [r2, #28]
 80055a4:	025b      	lsls	r3, r3, #9
 80055a6:	d4ca      	bmi.n	800553e <UART_CheckIdleState+0x1e>
 80055a8:	e00d      	b.n	80055c6 <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	0750      	lsls	r0, r2, #29
 80055ae:	d507      	bpl.n	80055c0 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055b0:	69da      	ldr	r2, [r3, #28]
 80055b2:	0711      	lsls	r1, r2, #28
 80055b4:	f100 8082 	bmi.w	80056bc <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055b8:	69da      	ldr	r2, [r3, #28]
 80055ba:	0512      	lsls	r2, r2, #20
 80055bc:	f100 80ac 	bmi.w	8005718 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	025b      	lsls	r3, r3, #9
 80055c4:	d4bb      	bmi.n	800553e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c6:	f7fb feb3 	bl	8001330 <HAL_GetTick>
 80055ca:	1b43      	subs	r3, r0, r5
 80055cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	d3ea      	bcc.n	80055aa <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055d8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	e843 2100 	strex	r1, r2, [r3]
 80055e0:	2900      	cmp	r1, #0
 80055e2:	d1f7      	bne.n	80055d4 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	f103 0208 	add.w	r2, r3, #8
 80055e8:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ec:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	f103 0008 	add.w	r0, r3, #8
 80055f4:	e840 2100 	strex	r1, r2, [r0]
 80055f8:	2900      	cmp	r1, #0
 80055fa:	d1f3      	bne.n	80055e4 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 80055fc:	2320      	movs	r3, #32
 80055fe:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8005602:	e7cc      	b.n	800559e <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005604:	2208      	movs	r2, #8
 8005606:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005608:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800560c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	e843 2100 	strex	r1, r2, [r3]
 8005614:	2900      	cmp	r1, #0
 8005616:	d1f7      	bne.n	8005608 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005618:	4856      	ldr	r0, [pc, #344]	@ (8005774 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	f103 0208 	add.w	r2, r3, #8
 800561e:	e852 2f00 	ldrex	r2, [r2]
 8005622:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005624:	f103 0508 	add.w	r5, r3, #8
 8005628:	e845 2100 	strex	r1, r2, [r5]
 800562c:	2900      	cmp	r1, #0
 800562e:	d1f4      	bne.n	800561a <UART_CheckIdleState+0xfa>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005630:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8005632:	2a01      	cmp	r2, #1
 8005634:	d00b      	beq.n	800564e <UART_CheckIdleState+0x12e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005636:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005638:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800563a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800563c:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005640:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005642:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8005644:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005648:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 800564c:	e79c      	b.n	8005588 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005652:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	e843 2100 	strex	r1, r2, [r3]
 800565a:	2900      	cmp	r1, #0
 800565c:	d1f7      	bne.n	800564e <UART_CheckIdleState+0x12e>
 800565e:	e7ea      	b.n	8005636 <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005660:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005664:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005666:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800566a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566e:	e843 2100 	strex	r1, r2, [r3]
 8005672:	2900      	cmp	r1, #0
 8005674:	d1f7      	bne.n	8005666 <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005676:	483f      	ldr	r0, [pc, #252]	@ (8005774 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005678:	f103 0208 	add.w	r2, r3, #8
 800567c:	e852 2f00 	ldrex	r2, [r2]
 8005680:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	f103 0508 	add.w	r5, r3, #8
 8005686:	e845 2100 	strex	r1, r2, [r5]
 800568a:	2900      	cmp	r1, #0
 800568c:	d1f4      	bne.n	8005678 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800568e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8005690:	2a01      	cmp	r2, #1
 8005692:	d00a      	beq.n	80056aa <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005694:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005696:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8005698:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800569a:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 800569e:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a2:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056a4:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 80056a8:	e76e      	b.n	8005588 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ae:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b2:	e843 2100 	strex	r1, r2, [r3]
 80056b6:	2900      	cmp	r1, #0
 80056b8:	d1f7      	bne.n	80056aa <UART_CheckIdleState+0x18a>
 80056ba:	e7eb      	b.n	8005694 <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056bc:	2208      	movs	r2, #8
 80056be:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056c4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	e843 2100 	strex	r1, r2, [r3]
 80056cc:	2900      	cmp	r1, #0
 80056ce:	d1f7      	bne.n	80056c0 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056d0:	4828      	ldr	r0, [pc, #160]	@ (8005774 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d2:	f103 0208 	add.w	r2, r3, #8
 80056d6:	e852 2f00 	ldrex	r2, [r2]
 80056da:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056dc:	f103 0508 	add.w	r5, r3, #8
 80056e0:	e845 2100 	strex	r1, r2, [r5]
 80056e4:	2900      	cmp	r1, #0
 80056e6:	d1f4      	bne.n	80056d2 <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e8:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80056ea:	2a01      	cmp	r2, #1
 80056ec:	d00b      	beq.n	8005706 <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ee:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80056f0:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056f2:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80056f4:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 80056f8:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fa:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 80056fc:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005700:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8005704:	e766      	b.n	80055d4 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005706:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800570a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570e:	e843 2100 	strex	r1, r2, [r3]
 8005712:	2900      	cmp	r1, #0
 8005714:	d1f7      	bne.n	8005706 <UART_CheckIdleState+0x1e6>
 8005716:	e7ea      	b.n	80056ee <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005718:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800571c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005722:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005726:	e843 2100 	strex	r1, r2, [r3]
 800572a:	2900      	cmp	r1, #0
 800572c:	d1f7      	bne.n	800571e <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800572e:	4811      	ldr	r0, [pc, #68]	@ (8005774 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005730:	f103 0208 	add.w	r2, r3, #8
 8005734:	e852 2f00 	ldrex	r2, [r2]
 8005738:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573a:	f103 0508 	add.w	r5, r3, #8
 800573e:	e845 2100 	strex	r1, r2, [r5]
 8005742:	2900      	cmp	r1, #0
 8005744:	d1f4      	bne.n	8005730 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005746:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8005748:	2a01      	cmp	r2, #1
 800574a:	d00a      	beq.n	8005762 <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800574c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800574e:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8005750:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005752:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8005756:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575a:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800575c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8005760:	e738      	b.n	80055d4 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005766:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576a:	e843 2100 	strex	r1, r2, [r3]
 800576e:	2900      	cmp	r1, #0
 8005770:	d1f7      	bne.n	8005762 <UART_CheckIdleState+0x242>
 8005772:	e7eb      	b.n	800574c <UART_CheckIdleState+0x22c>
 8005774:	effffffe 	.word	0xeffffffe

08005778 <HAL_UART_Init>:
  if (huart == NULL)
 8005778:	b380      	cbz	r0, 80057dc <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800577a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 800577e:	b510      	push	{r4, lr}
 8005780:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005782:	b333      	cbz	r3, 80057d2 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8005784:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005786:	2324      	movs	r3, #36	@ 0x24
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005788:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 800578a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800578e:	6813      	ldr	r3, [r2, #0]
 8005790:	f023 0301 	bic.w	r3, r3, #1
 8005794:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005796:	b9c1      	cbnz	r1, 80057ca <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005798:	4620      	mov	r0, r4
 800579a:	f7ff fcad 	bl	80050f8 <UART_SetConfig>
 800579e:	2801      	cmp	r0, #1
 80057a0:	d011      	beq.n	80057c6 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057a2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80057a4:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057b4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	f042 0201 	orr.w	r2, r2, #1
}
 80057bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80057c0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80057c2:	f7ff bead 	b.w	8005520 <UART_CheckIdleState>
}
 80057c6:	2001      	movs	r0, #1
 80057c8:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 80057ca:	4620      	mov	r0, r4
 80057cc:	f7ff fe50 	bl	8005470 <UART_AdvFeatureConfig>
 80057d0:	e7e2      	b.n	8005798 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 80057d2:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 80057d6:	f7fb fc21 	bl	800101c <HAL_UART_MspInit>
 80057da:	e7d3      	b.n	8005784 <HAL_UART_Init+0xc>
}
 80057dc:	2001      	movs	r0, #1
 80057de:	4770      	bx	lr

080057e0 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057e0:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80057e4:	2a01      	cmp	r2, #1
 80057e6:	d017      	beq.n	8005818 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057e8:	6802      	ldr	r2, [r0, #0]
 80057ea:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 80057ec:	2024      	movs	r0, #36	@ 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057ee:	2100      	movs	r1, #0
{
 80057f0:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 80057f2:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 80057f6:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057f8:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80057fa:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057fc:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8005800:	f024 0401 	bic.w	r4, r4, #1
 8005804:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005806:	6659      	str	r1, [r3, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005808:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 800580a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800580c:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8005810:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8005814:	bc30      	pop	{r4, r5}
 8005816:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005818:	2002      	movs	r0, #2
}
 800581a:	4770      	bx	lr

0800581c <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800581c:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8005820:	2a01      	cmp	r2, #1
 8005822:	d037      	beq.n	8005894 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005824:	6802      	ldr	r2, [r0, #0]
 8005826:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8005828:	2024      	movs	r0, #36	@ 0x24
{
 800582a:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800582c:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005830:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005832:	6810      	ldr	r0, [r2, #0]
 8005834:	f020 0001 	bic.w	r0, r0, #1
 8005838:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800583a:	6890      	ldr	r0, [r2, #8]
 800583c:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8005840:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005842:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005844:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005846:	b310      	cbz	r0, 800588e <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005848:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800584a:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800584c:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005850:	4911      	ldr	r1, [pc, #68]	@ (8005898 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005852:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8005856:	4d11      	ldr	r5, [pc, #68]	@ (800589c <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005858:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800585c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8005860:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005864:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8005866:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800586a:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800586c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005870:	fbb1 f1f5 	udiv	r1, r1, r5
 8005874:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 8005878:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800587a:	2100      	movs	r1, #0
 800587c:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005880:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8005882:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005884:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8005888:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 800588c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800588e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8005890:	4608      	mov	r0, r1
 8005892:	e7ef      	b.n	8005874 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8005894:	2002      	movs	r0, #2
}
 8005896:	4770      	bx	lr
 8005898:	080059cc 	.word	0x080059cc
 800589c:	080059c4 	.word	0x080059c4

080058a0 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80058a0:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80058a4:	2a01      	cmp	r2, #1
 80058a6:	d037      	beq.n	8005918 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058a8:	6802      	ldr	r2, [r0, #0]
 80058aa:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 80058ac:	2024      	movs	r0, #36	@ 0x24
{
 80058ae:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80058b0:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058b4:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80058b6:	6810      	ldr	r0, [r2, #0]
 80058b8:	f020 0001 	bic.w	r0, r0, #1
 80058bc:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058be:	6890      	ldr	r0, [r2, #8]
 80058c0:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 80058c4:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058c6:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058c8:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058ca:	b310      	cbz	r0, 8005912 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058cc:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058ce:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058d0:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058d4:	4911      	ldr	r1, [pc, #68]	@ (800591c <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058d6:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 80058da:	4d11      	ldr	r5, [pc, #68]	@ (8005920 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058dc:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058e0:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80058e4:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058e8:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 80058ea:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058ee:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058f0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058f4:	fbb1 f1f5 	udiv	r1, r1, r5
 80058f8:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 80058fc:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 80058fe:	2100      	movs	r1, #0
 8005900:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005904:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8005906:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005908:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800590c:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8005910:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8005912:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8005914:	4608      	mov	r0, r1
 8005916:	e7ef      	b.n	80058f8 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8005918:	2002      	movs	r0, #2
}
 800591a:	4770      	bx	lr
 800591c:	080059cc 	.word	0x080059cc
 8005920:	080059c4 	.word	0x080059c4

08005924 <memset>:
 8005924:	4402      	add	r2, r0
 8005926:	4603      	mov	r3, r0
 8005928:	4293      	cmp	r3, r2
 800592a:	d100      	bne.n	800592e <memset+0xa>
 800592c:	4770      	bx	lr
 800592e:	f803 1b01 	strb.w	r1, [r3], #1
 8005932:	e7f9      	b.n	8005928 <memset+0x4>

08005934 <__libc_init_array>:
 8005934:	b570      	push	{r4, r5, r6, lr}
 8005936:	4d0d      	ldr	r5, [pc, #52]	@ (800596c <__libc_init_array+0x38>)
 8005938:	4c0d      	ldr	r4, [pc, #52]	@ (8005970 <__libc_init_array+0x3c>)
 800593a:	1b64      	subs	r4, r4, r5
 800593c:	10a4      	asrs	r4, r4, #2
 800593e:	2600      	movs	r6, #0
 8005940:	42a6      	cmp	r6, r4
 8005942:	d109      	bne.n	8005958 <__libc_init_array+0x24>
 8005944:	4d0b      	ldr	r5, [pc, #44]	@ (8005974 <__libc_init_array+0x40>)
 8005946:	4c0c      	ldr	r4, [pc, #48]	@ (8005978 <__libc_init_array+0x44>)
 8005948:	f000 f818 	bl	800597c <_init>
 800594c:	1b64      	subs	r4, r4, r5
 800594e:	10a4      	asrs	r4, r4, #2
 8005950:	2600      	movs	r6, #0
 8005952:	42a6      	cmp	r6, r4
 8005954:	d105      	bne.n	8005962 <__libc_init_array+0x2e>
 8005956:	bd70      	pop	{r4, r5, r6, pc}
 8005958:	f855 3b04 	ldr.w	r3, [r5], #4
 800595c:	4798      	blx	r3
 800595e:	3601      	adds	r6, #1
 8005960:	e7ee      	b.n	8005940 <__libc_init_array+0xc>
 8005962:	f855 3b04 	ldr.w	r3, [r5], #4
 8005966:	4798      	blx	r3
 8005968:	3601      	adds	r6, #1
 800596a:	e7f2      	b.n	8005952 <__libc_init_array+0x1e>
 800596c:	080059dc 	.word	0x080059dc
 8005970:	080059dc 	.word	0x080059dc
 8005974:	080059dc 	.word	0x080059dc
 8005978:	080059e0 	.word	0x080059e0

0800597c <_init>:
 800597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597e:	bf00      	nop
 8005980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005982:	bc08      	pop	{r3}
 8005984:	469e      	mov	lr, r3
 8005986:	4770      	bx	lr

08005988 <_fini>:
 8005988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598a:	bf00      	nop
 800598c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598e:	bc08      	pop	{r3}
 8005990:	469e      	mov	lr, r3
 8005992:	4770      	bx	lr
