
Dual_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cb0  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009f48  08009f48  0000af48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009f88  08009f88  0000af88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009f90  08009f90  0000af90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009f94  08009f94  0000af94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08009f98  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001344  24000010  08009fa8  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001354  08009fa8  0000b354  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001aac5  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ff4  00000000  00000000  00025b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b0  00000000  00000000  00028af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001022  00000000  00000000  00029fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039b2a  00000000  00000000  0002afca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ca0f  00000000  00000000  00064af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017ab1e  00000000  00000000  00081503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fc021  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005848  00000000  00000000  001fc064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007a  00000000  00000000  002018ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009f30 	.word	0x08009f30

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08009f30 	.word	0x08009f30

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ADCx_custom_init>:
volatile bool pre_triggd = 0;
volatile bool triggd = 0;
volatile uint16_t trig_indx=0;
/* END OF GLOB VARIABLES */

void ADCx_custom_init(ADC_TypeDef *ADCx, uint8_t INx_Pin){
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]

//	ADCx->CR &= ~ADC_CR_ADSTART;

	ADCx->SQR1 = 0; // per azzerare la configurazione dell'ide
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2200      	movs	r2, #0
 80005d8:	631a      	str	r2, [r3, #48]	@ 0x30

	ADCx->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere 0=1
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	631a      	str	r2, [r3, #48]	@ 0x30

	ADCx->SQR1 |= (INx_Pin << ADC_SQR1_SQ1_Pos);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005e6:	78fb      	ldrb	r3, [r7, #3]
 80005e8:	019b      	lsls	r3, r3, #6
 80005ea:	431a      	orrs	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	631a      	str	r2, [r3, #48]	@ 0x30

	ADCx->PCSEL = 0;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
	ADCx->PCSEL |= (1 << (ADC_PCSEL_PCSEL_Pos + INx_Pin)); // Dichiaro quali canali leggere : 18 e 19
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	78fa      	ldrb	r2, [r7, #3]
 80005fc:	2101      	movs	r1, #1
 80005fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000602:	431a      	orrs	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	61da      	str	r2, [r3, #28]

	/* Calibrazione */
	ADCx->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	609a      	str	r2, [r3, #8]
	ADCx->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	609a      	str	r2, [r3, #8]
	ADCx->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	f023 0201 	bic.w	r2, r3, #1
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	609a      	str	r2, [r3, #8]
	ADCx->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	609a      	str	r2, [r3, #8]


	while((ADCx->CR & ADC_CR_ADCAL) != 0){};
 8000638:	bf00      	nop
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	2b00      	cmp	r3, #0
 8000640:	dbfb      	blt.n	800063a <ADCx_custom_init+0x72>
	// FIne calibrazione

	ADCx->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f043 0201 	orr.w	r2, r3, #1
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	601a      	str	r2, [r3, #0]
	ADCx->CR |= ADC_CR_ADEN;		// Accendo l' ADC
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	f043 0201 	orr.w	r2, r3, #1
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	609a      	str	r2, [r3, #8]

	while((ADCx->ISR & ADC_ISR_ADRDY) != 0){}
 800065a:	bf00      	nop
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f9      	bne.n	800065c <ADCx_custom_init+0x94>

	ADCx->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f043 0201 	orr.w	r2, r3, #1
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	601a      	str	r2, [r3, #0]
	// Fine accensione

	/* ADR INIZIALIZZATO */
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <ADC_custom_init>:


void ADC_custom_init(){
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

	/*	PRIMO ADC	*/

	/*	IN0 -> PIN PC2 o A4
	 * */
	ADCx_custom_init(ADC3, 0);
 8000684:	2100      	movs	r1, #0
 8000686:	4812      	ldr	r0, [pc, #72]	@ (80006d0 <ADC_custom_init+0x50>)
 8000688:	f7ff ff9e 	bl	80005c8 <ADCx_custom_init>

	/*	IN19 -> PIN PA5 o D13
	 * */
	ADCx_custom_init(ADC2, 15);
 800068c:	210f      	movs	r1, #15
 800068e:	4811      	ldr	r0, [pc, #68]	@ (80006d4 <ADC_custom_init+0x54>)
 8000690:	f7ff ff9a 	bl	80005c8 <ADCx_custom_init>


	// TIM6 set to 240Mhz
	TIM6->PSC = 12; // TIM6 CLOCK/PSC
 8000694:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <ADC_custom_init+0x58>)
 8000696:	220c      	movs	r2, #12
 8000698:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 13;	// TIM6 CLOCK/PSC/ARR
 800069a:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <ADC_custom_init+0x58>)
 800069c:	220d      	movs	r2, #13
 800069e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->CNT = 0;
 80006a0:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <ADC_custom_init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->DIER &= ~TIM_DIER_UIE;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <ADC_custom_init+0x58>)
 80006a8:	68db      	ldr	r3, [r3, #12]
 80006aa:	4a0b      	ldr	r2, [pc, #44]	@ (80006d8 <ADC_custom_init+0x58>)
 80006ac:	f023 0301 	bic.w	r3, r3, #1
 80006b0:	60d3      	str	r3, [r2, #12]

	// 240 Mhz -> 20 Mhz -> 1 Mhz

	ADC3->IER |= ADC_IER_EOCIE;	// interrupt ADC
 80006b2:	4b07      	ldr	r3, [pc, #28]	@ (80006d0 <ADC_custom_init+0x50>)
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	4a06      	ldr	r2, [pc, #24]	@ (80006d0 <ADC_custom_init+0x50>)
 80006b8:	f043 0304 	orr.w	r3, r3, #4
 80006bc:	6053      	str	r3, [r2, #4]
	ADC2->IER &= ~ADC_IER_EOCIE;
 80006be:	4b05      	ldr	r3, [pc, #20]	@ (80006d4 <ADC_custom_init+0x54>)
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	4a04      	ldr	r2, [pc, #16]	@ (80006d4 <ADC_custom_init+0x54>)
 80006c4:	f023 0304 	bic.w	r3, r3, #4
 80006c8:	6053      	str	r3, [r2, #4]
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	58026000 	.word	0x58026000
 80006d4:	40022100 	.word	0x40022100
 80006d8:	40001000 	.word	0x40001000

080006dc <ADC_custom_interrupt_pre>:



void ADC_custom_interrupt_pre(){
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

	TIM6->CR1 &= ~TIM_CR1_CEN;
 80006e0:	4b34      	ldr	r3, [pc, #208]	@ (80007b4 <ADC_custom_interrupt_pre+0xd8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a33      	ldr	r2, [pc, #204]	@ (80007b4 <ADC_custom_interrupt_pre+0xd8>)
 80006e6:	f023 0301 	bic.w	r3, r3, #1
 80006ea:	6013      	str	r3, [r2, #0]

	extern volatile bool pre_triggd;
	extern volatile bool triggd;

	if(triggd){
 80006ec:	4b32      	ldr	r3, [pc, #200]	@ (80007b8 <ADC_custom_interrupt_pre+0xdc>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d01c      	beq.n	8000730 <ADC_custom_interrupt_pre+0x54>

		if(DMA2_Stream0->NDTR == trig_indx){
 80006f6:	4b31      	ldr	r3, [pc, #196]	@ (80007bc <ADC_custom_interrupt_pre+0xe0>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	4a31      	ldr	r2, [pc, #196]	@ (80007c0 <ADC_custom_interrupt_pre+0xe4>)
 80006fc:	8812      	ldrh	r2, [r2, #0]
 80006fe:	b292      	uxth	r2, r2
 8000700:	4293      	cmp	r3, r2
 8000702:	d14a      	bne.n	800079a <ADC_custom_interrupt_pre+0xbe>

			TIM6->CR1 &= ~TIM_CR1_CEN;
 8000704:	4b2b      	ldr	r3, [pc, #172]	@ (80007b4 <ADC_custom_interrupt_pre+0xd8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a2a      	ldr	r2, [pc, #168]	@ (80007b4 <ADC_custom_interrupt_pre+0xd8>)
 800070a:	f023 0301 	bic.w	r3, r3, #1
 800070e:	6013      	str	r3, [r2, #0]
			ADC3->ISR |= ADC_ISR_EOC;
 8000710:	4b2c      	ldr	r3, [pc, #176]	@ (80007c4 <ADC_custom_interrupt_pre+0xe8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a2b      	ldr	r2, [pc, #172]	@ (80007c4 <ADC_custom_interrupt_pre+0xe8>)
 8000716:	f043 0304 	orr.w	r3, r3, #4
 800071a:	6013      	str	r3, [r2, #0]

			triggd = false;
 800071c:	4b26      	ldr	r3, [pc, #152]	@ (80007b8 <ADC_custom_interrupt_pre+0xdc>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]

			USART3->CR3 |= USART_CR3_DMAT;
 8000722:	4b29      	ldr	r3, [pc, #164]	@ (80007c8 <ADC_custom_interrupt_pre+0xec>)
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	4a28      	ldr	r2, [pc, #160]	@ (80007c8 <ADC_custom_interrupt_pre+0xec>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800072c:	6093      	str	r3, [r2, #8]
			return;
 800072e:	e03d      	b.n	80007ac <ADC_custom_interrupt_pre+0xd0>
		}
		goto start_timer;

	}else{
		if(!pre_triggd){
 8000730:	4b26      	ldr	r3, [pc, #152]	@ (80007cc <ADC_custom_interrupt_pre+0xf0>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	f083 0301 	eor.w	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	d014      	beq.n	800076a <ADC_custom_interrupt_pre+0x8e>

			pre_triggd = !(COMP12->SR & COMP_SR_C2VAL) && !(COMP12->SR & COMP_SR_C1VAL);
 8000740:	4b23      	ldr	r3, [pc, #140]	@ (80007d0 <ADC_custom_interrupt_pre+0xf4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f003 0302 	and.w	r3, r3, #2
 8000748:	2b00      	cmp	r3, #0
 800074a:	d107      	bne.n	800075c <ADC_custom_interrupt_pre+0x80>
 800074c:	4b20      	ldr	r3, [pc, #128]	@ (80007d0 <ADC_custom_interrupt_pre+0xf4>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	2b00      	cmp	r3, #0
 8000756:	d101      	bne.n	800075c <ADC_custom_interrupt_pre+0x80>
 8000758:	2301      	movs	r3, #1
 800075a:	e000      	b.n	800075e <ADC_custom_interrupt_pre+0x82>
 800075c:	2300      	movs	r3, #0
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <ADC_custom_interrupt_pre+0xf0>)
 8000766:	701a      	strb	r2, [r3, #0]
			goto start_timer;
 8000768:	e01a      	b.n	80007a0 <ADC_custom_interrupt_pre+0xc4>

		}else if((COMP12->SR & COMP_SR_C2VAL) && !(COMP12->SR & COMP_SR_C1VAL)){
 800076a:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <ADC_custom_interrupt_pre+0xf4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	2b00      	cmp	r3, #0
 8000774:	d013      	beq.n	800079e <ADC_custom_interrupt_pre+0xc2>
 8000776:	4b16      	ldr	r3, [pc, #88]	@ (80007d0 <ADC_custom_interrupt_pre+0xf4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	2b00      	cmp	r3, #0
 8000780:	d10d      	bne.n	800079e <ADC_custom_interrupt_pre+0xc2>

//			trig_indx = (DMA2_Stream0->NDTR + 100UL)% 1000UL + 1UL;
			trig_indx = DMA2_Stream0->NDTR;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <ADC_custom_interrupt_pre+0xe0>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	b29a      	uxth	r2, r3
 8000788:	4b0d      	ldr	r3, [pc, #52]	@ (80007c0 <ADC_custom_interrupt_pre+0xe4>)
 800078a:	801a      	strh	r2, [r3, #0]
			triggd = true;
 800078c:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <ADC_custom_interrupt_pre+0xdc>)
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
			pre_triggd = false;
 8000792:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <ADC_custom_interrupt_pre+0xf0>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
//			return;
			goto start_timer;
 8000798:	e002      	b.n	80007a0 <ADC_custom_interrupt_pre+0xc4>
		goto start_timer;
 800079a:	bf00      	nop
 800079c:	e000      	b.n	80007a0 <ADC_custom_interrupt_pre+0xc4>
		}
	}

	start_timer:
 800079e:	bf00      	nop
	TIM6->CR1 |= TIM_CR1_CEN;
 80007a0:	4b04      	ldr	r3, [pc, #16]	@ (80007b4 <ADC_custom_interrupt_pre+0xd8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a03      	ldr	r2, [pc, #12]	@ (80007b4 <ADC_custom_interrupt_pre+0xd8>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	6013      	str	r3, [r2, #0]
}
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	40001000 	.word	0x40001000
 80007b8:	2400002d 	.word	0x2400002d
 80007bc:	40020410 	.word	0x40020410
 80007c0:	2400002e 	.word	0x2400002e
 80007c4:	58026000 	.word	0x58026000
 80007c8:	40004800 	.word	0x40004800
 80007cc:	2400002c 	.word	0x2400002c
 80007d0:	58003800 	.word	0x58003800

080007d4 <DMA_custom_init>:


uint16_t DMA_data_buffer[2*DMA_DATA_BUFF_SIZE];


void DMA_custom_init(){
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0

	ADC3->CR &= ~ADC_CR_ADSTART;
 80007da:	4b3f      	ldr	r3, [pc, #252]	@ (80008d8 <DMA_custom_init+0x104>)
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	4a3e      	ldr	r2, [pc, #248]	@ (80008d8 <DMA_custom_init+0x104>)
 80007e0:	f023 0304 	bic.w	r3, r3, #4
 80007e4:	6093      	str	r3, [r2, #8]
	ADC2->CR &= ~ADC_CR_ADSTART;
 80007e6:	4b3d      	ldr	r3, [pc, #244]	@ (80008dc <DMA_custom_init+0x108>)
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	4a3c      	ldr	r2, [pc, #240]	@ (80008dc <DMA_custom_init+0x108>)
 80007ec:	f023 0304 	bic.w	r3, r3, #4
 80007f0:	6093      	str	r3, [r2, #8]

	DMA2_Stream0->CR &= ~DMA_SxCR_EN;	// Disattivo DMA per midificare i settaggi
 80007f2:	4b3b      	ldr	r3, [pc, #236]	@ (80008e0 <DMA_custom_init+0x10c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a3a      	ldr	r2, [pc, #232]	@ (80008e0 <DMA_custom_init+0x10c>)
 80007f8:	f023 0301 	bic.w	r3, r3, #1
 80007fc:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;
 80007fe:	4b39      	ldr	r3, [pc, #228]	@ (80008e4 <DMA_custom_init+0x110>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a38      	ldr	r2, [pc, #224]	@ (80008e4 <DMA_custom_init+0x110>)
 8000804:	f023 0301 	bic.w	r3, r3, #1
 8000808:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR &= ~DMA_SxCR_EN;
 800080a:	4b37      	ldr	r3, [pc, #220]	@ (80008e8 <DMA_custom_init+0x114>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a36      	ldr	r2, [pc, #216]	@ (80008e8 <DMA_custom_init+0x114>)
 8000810:	f023 0301 	bic.w	r3, r3, #1
 8000814:	6013      	str	r3, [r2, #0]

	DMA2_Stream0->M0AR = (uint32_t) (&DMA_data_buffer);	// inidico l'indirizzo dello storarge di dati
 8000816:	4b32      	ldr	r3, [pc, #200]	@ (80008e0 <DMA_custom_init+0x10c>)
 8000818:	4a34      	ldr	r2, [pc, #208]	@ (80008ec <DMA_custom_init+0x118>)
 800081a:	60da      	str	r2, [r3, #12]
	DMA2_Stream1->M0AR = (uint32_t) (&DMA_data_buffer);
 800081c:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <DMA_custom_init+0x110>)
 800081e:	4a33      	ldr	r2, [pc, #204]	@ (80008ec <DMA_custom_init+0x118>)
 8000820:	60da      	str	r2, [r3, #12]
	DMA2_Stream2->M0AR = (uint32_t) (&DMA_data_buffer[DMA_DATA_BUFF_SIZE]);
 8000822:	4b31      	ldr	r3, [pc, #196]	@ (80008e8 <DMA_custom_init+0x114>)
 8000824:	4a32      	ldr	r2, [pc, #200]	@ (80008f0 <DMA_custom_init+0x11c>)
 8000826:	60da      	str	r2, [r3, #12]

	DMA2_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
 8000828:	4b2d      	ldr	r3, [pc, #180]	@ (80008e0 <DMA_custom_init+0x10c>)
 800082a:	4a32      	ldr	r2, [pc, #200]	@ (80008f4 <DMA_custom_init+0x120>)
 800082c:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->PAR = (uint32_t) (&USART3->TDR);
 800082e:	4b2d      	ldr	r3, [pc, #180]	@ (80008e4 <DMA_custom_init+0x110>)
 8000830:	4a31      	ldr	r2, [pc, #196]	@ (80008f8 <DMA_custom_init+0x124>)
 8000832:	609a      	str	r2, [r3, #8]
	DMA2_Stream2->PAR = (uint32_t) (&ADC2->DR);
 8000834:	4b2c      	ldr	r3, [pc, #176]	@ (80008e8 <DMA_custom_init+0x114>)
 8000836:	4a31      	ldr	r2, [pc, #196]	@ (80008fc <DMA_custom_init+0x128>)
 8000838:	609a      	str	r2, [r3, #8]

	uint32_t n_misure = DMA_DATA_BUFF_SIZE;
 800083a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800083e:	607b      	str	r3, [r7, #4]

	DMA2_Stream0->NDTR = n_misure;				// numero elementi da prendere da ADC3
 8000840:	4a27      	ldr	r2, [pc, #156]	@ (80008e0 <DMA_custom_init+0x10c>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6053      	str	r3, [r2, #4]
	DMA2_Stream1->NDTR = n_misure*4;			// numero elementi da mandare a USART3
 8000846:	4a27      	ldr	r2, [pc, #156]	@ (80008e4 <DMA_custom_init+0x110>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	6053      	str	r3, [r2, #4]
	DMA2_Stream2->NDTR = n_misure;
 800084e:	4a26      	ldr	r2, [pc, #152]	@ (80008e8 <DMA_custom_init+0x114>)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	6053      	str	r3, [r2, #4]

	DMA2_Stream0->CR &= ~DMA_SxCR_TCIE;		// disablilito interrupt di fine ricezione
 8000854:	4b22      	ldr	r3, [pc, #136]	@ (80008e0 <DMA_custom_init+0x10c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a21      	ldr	r2, [pc, #132]	@ (80008e0 <DMA_custom_init+0x10c>)
 800085a:	f023 0310 	bic.w	r3, r3, #16
 800085e:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;		// abilito interrupt di fine trasmissione
 8000860:	4b20      	ldr	r3, [pc, #128]	@ (80008e4 <DMA_custom_init+0x110>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a1f      	ldr	r2, [pc, #124]	@ (80008e4 <DMA_custom_init+0x110>)
 8000866:	f043 0310 	orr.w	r3, r3, #16
 800086a:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR &= ~DMA_SxCR_TCIE;
 800086c:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <DMA_custom_init+0x114>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a1d      	ldr	r2, [pc, #116]	@ (80008e8 <DMA_custom_init+0x114>)
 8000872:	f023 0310 	bic.w	r3, r3, #16
 8000876:	6013      	str	r3, [r2, #0]

	ADC3->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);	// Modalità iterazione DMA single,circular,etc
 8000878:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <DMA_custom_init+0x104>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	4a16      	ldr	r2, [pc, #88]	@ (80008d8 <DMA_custom_init+0x104>)
 800087e:	f043 0303 	orr.w	r3, r3, #3
 8000882:	60d3      	str	r3, [r2, #12]
	ADC2->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);
 8000884:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <DMA_custom_init+0x108>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	4a14      	ldr	r2, [pc, #80]	@ (80008dc <DMA_custom_init+0x108>)
 800088a:	f043 0303 	orr.w	r3, r3, #3
 800088e:	60d3      	str	r3, [r2, #12]

	DMA2_Stream0->CR |= DMA_SxCR_EN;
 8000890:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <DMA_custom_init+0x10c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a12      	ldr	r2, [pc, #72]	@ (80008e0 <DMA_custom_init+0x10c>)
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_EN;
 800089c:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <DMA_custom_init+0x110>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a10      	ldr	r2, [pc, #64]	@ (80008e4 <DMA_custom_init+0x110>)
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR |= DMA_SxCR_EN;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <DMA_custom_init+0x114>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0e      	ldr	r2, [pc, #56]	@ (80008e8 <DMA_custom_init+0x114>)
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	6013      	str	r3, [r2, #0]

	ADC3->CR |= ADC_CR_ADSTART;
 80008b4:	4b08      	ldr	r3, [pc, #32]	@ (80008d8 <DMA_custom_init+0x104>)
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	4a07      	ldr	r2, [pc, #28]	@ (80008d8 <DMA_custom_init+0x104>)
 80008ba:	f043 0304 	orr.w	r3, r3, #4
 80008be:	6093      	str	r3, [r2, #8]
	ADC2->CR |= ADC_CR_ADSTART;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <DMA_custom_init+0x108>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	4a05      	ldr	r2, [pc, #20]	@ (80008dc <DMA_custom_init+0x108>)
 80008c6:	f043 0304 	orr.w	r3, r3, #4
 80008ca:	6093      	str	r3, [r2, #8]

	//TIM6->CR1 |= TIM_CR1_CEN;	LO ACCENDO NELL'USART3 INTERR
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	58026000 	.word	0x58026000
 80008dc:	40022100 	.word	0x40022100
 80008e0:	40020410 	.word	0x40020410
 80008e4:	40020428 	.word	0x40020428
 80008e8:	40020440 	.word	0x40020440
 80008ec:	24000030 	.word	0x24000030
 80008f0:	24000800 	.word	0x24000800
 80008f4:	58026040 	.word	0x58026040
 80008f8:	40004828 	.word	0x40004828
 80008fc:	40022140 	.word	0x40022140

08000900 <DMA_custom_interrupt_tx>:


void DMA_custom_interrupt_tx(){
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

	USART3->CR3 &= ~USART_CR3_DMAT;			  // SPENGO trasmissione usart
 8000904:	4b1e      	ldr	r3, [pc, #120]	@ (8000980 <DMA_custom_interrupt_tx+0x80>)
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	4a1d      	ldr	r2, [pc, #116]	@ (8000980 <DMA_custom_interrupt_tx+0x80>)
 800090a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800090e:	6093      	str	r3, [r2, #8]

	extern uint16_t trig_indx;

	DMA2->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 8000910:	4b1c      	ldr	r3, [pc, #112]	@ (8000984 <DMA_custom_interrupt_tx+0x84>)
 8000912:	f04f 32ff 	mov.w	r2, #4294967295
 8000916:	609a      	str	r2, [r3, #8]
	DMA2->HIFCR = 0xffffffff;
 8000918:	4b1a      	ldr	r3, [pc, #104]	@ (8000984 <DMA_custom_interrupt_tx+0x84>)
 800091a:	f04f 32ff 	mov.w	r2, #4294967295
 800091e:	60da      	str	r2, [r3, #12]

	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 8000920:	bf00      	nop
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <DMA_custom_interrupt_tx+0x80>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800092a:	2b00      	cmp	r3, #0
 800092c:	d0f9      	beq.n	8000922 <DMA_custom_interrupt_tx+0x22>
	USART3->TDR = ((unsigned char*)&trig_indx)[0];
 800092e:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <DMA_custom_interrupt_tx+0x88>)
 8000930:	781a      	ldrb	r2, [r3, #0]
 8000932:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <DMA_custom_interrupt_tx+0x80>)
 8000934:	629a      	str	r2, [r3, #40]	@ 0x28
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 8000936:	bf00      	nop
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <DMA_custom_interrupt_tx+0x80>)
 800093a:	69db      	ldr	r3, [r3, #28]
 800093c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000940:	2b00      	cmp	r3, #0
 8000942:	d0f9      	beq.n	8000938 <DMA_custom_interrupt_tx+0x38>
	USART3->TDR = ((unsigned char*)&trig_indx)[1];
 8000944:	4b11      	ldr	r3, [pc, #68]	@ (800098c <DMA_custom_interrupt_tx+0x8c>)
 8000946:	781a      	ldrb	r2, [r3, #0]
 8000948:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <DMA_custom_interrupt_tx+0x80>)
 800094a:	629a      	str	r2, [r3, #40]	@ 0x28

	trig_indx = 0;
 800094c:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <DMA_custom_interrupt_tx+0x88>)
 800094e:	2200      	movs	r2, #0
 8000950:	801a      	strh	r2, [r3, #0]

	DMA2_Stream0->CR |= DMA_SxCR_EN;
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <DMA_custom_interrupt_tx+0x90>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a0e      	ldr	r2, [pc, #56]	@ (8000990 <DMA_custom_interrupt_tx+0x90>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_EN;
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <DMA_custom_interrupt_tx+0x94>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a0c      	ldr	r2, [pc, #48]	@ (8000994 <DMA_custom_interrupt_tx+0x94>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR |= DMA_SxCR_EN;
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <DMA_custom_interrupt_tx+0x98>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a0a      	ldr	r2, [pc, #40]	@ (8000998 <DMA_custom_interrupt_tx+0x98>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6013      	str	r3, [r2, #0]
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	40004800 	.word	0x40004800
 8000984:	40020400 	.word	0x40020400
 8000988:	2400002e 	.word	0x2400002e
 800098c:	2400002f 	.word	0x2400002f
 8000990:	40020410 	.word	0x40020410
 8000994:	40020428 	.word	0x40020428
 8000998:	40020440 	.word	0x40020440

0800099c <usart3_init>:
 */

#include "Custom_usart.h"
#include <stdint.h>

void usart3_init(){
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

    USART3->CR1 |= USART_CR1_TE;
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <usart3_init+0x4c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a10      	ldr	r2, [pc, #64]	@ (80009e8 <usart3_init+0x4c>)
 80009a6:	f043 0308 	orr.w	r3, r3, #8
 80009aa:	6013      	str	r3, [r2, #0]
    USART3->CR1 |= USART_CR1_RE;
 80009ac:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <usart3_init+0x4c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a0d      	ldr	r2, [pc, #52]	@ (80009e8 <usart3_init+0x4c>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	6013      	str	r3, [r2, #0]

    USART3->CR1 &= ~USART_CR1_TXEIE;
 80009b8:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <usart3_init+0x4c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0a      	ldr	r2, [pc, #40]	@ (80009e8 <usart3_init+0x4c>)
 80009be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80009c2:	6013      	str	r3, [r2, #0]
    USART3->CR1 |= USART_CR1_RXNEIE;
 80009c4:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <usart3_init+0x4c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a07      	ldr	r2, [pc, #28]	@ (80009e8 <usart3_init+0x4c>)
 80009ca:	f043 0320 	orr.w	r3, r3, #32
 80009ce:	6013      	str	r3, [r2, #0]

    USART3->CR1 |= USART_CR1_UE;
 80009d0:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <usart3_init+0x4c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a04      	ldr	r2, [pc, #16]	@ (80009e8 <usart3_init+0x4c>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6013      	str	r3, [r2, #0]

}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40004800 	.word	0x40004800

080009ec <usart3_custom_interrupt>:

void usart3_custom_interrupt(){
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0

	char data = USART3->RDR;
 80009f2:	4b23      	ldr	r3, [pc, #140]	@ (8000a80 <usart3_custom_interrupt+0x94>)
 80009f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009f6:	71fb      	strb	r3, [r7, #7]
	extern bool triggd;

	if(data == 'V'){
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	2b56      	cmp	r3, #86	@ 0x56
 80009fc:	d116      	bne.n	8000a2c <usart3_custom_interrupt+0x40>

		USART3->TDR = ((unsigned char*)&VREFINT_C) [0];
 80009fe:	4b21      	ldr	r3, [pc, #132]	@ (8000a84 <usart3_custom_interrupt+0x98>)
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <usart3_custom_interrupt+0x94>)
 8000a04:	629a      	str	r2, [r3, #40]	@ 0x28
		while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 8000a06:	bf00      	nop
 8000a08:	4b1d      	ldr	r3, [pc, #116]	@ (8000a80 <usart3_custom_interrupt+0x94>)
 8000a0a:	69db      	ldr	r3, [r3, #28]
 8000a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d0f9      	beq.n	8000a08 <usart3_custom_interrupt+0x1c>
		USART3->TDR = ((unsigned char*)&VREFINT_C) [1];
 8000a14:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <usart3_custom_interrupt+0x9c>)
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	4b19      	ldr	r3, [pc, #100]	@ (8000a80 <usart3_custom_interrupt+0x94>)
 8000a1a:	629a      	str	r2, [r3, #40]	@ 0x28
		while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 8000a1c:	bf00      	nop
 8000a1e:	4b18      	ldr	r3, [pc, #96]	@ (8000a80 <usart3_custom_interrupt+0x94>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0f9      	beq.n	8000a1e <usart3_custom_interrupt+0x32>
 8000a2a:	e011      	b.n	8000a50 <usart3_custom_interrupt+0x64>

	}else if(data == '?'){
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a30:	d10e      	bne.n	8000a50 <usart3_custom_interrupt+0x64>

		USART3->CR3 &= ~USART_CR3_DMAT;	// spengo l'usart
 8000a32:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <usart3_custom_interrupt+0x94>)
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	4a12      	ldr	r2, [pc, #72]	@ (8000a80 <usart3_custom_interrupt+0x94>)
 8000a38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000a3c:	6093      	str	r3, [r2, #8]
		TIM6->CR1 |= TIM_CR1_CEN;		// accendo l'adc
 8000a3e:	4b13      	ldr	r3, [pc, #76]	@ (8000a8c <usart3_custom_interrupt+0xa0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a12      	ldr	r2, [pc, #72]	@ (8000a8c <usart3_custom_interrupt+0xa0>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6013      	str	r3, [r2, #0]
		triggd = false;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <usart3_custom_interrupt+0xa4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
	}


	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 8000a50:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <usart3_custom_interrupt+0x94>)
 8000a52:	6a1b      	ldr	r3, [r3, #32]
 8000a54:	4a0a      	ldr	r2, [pc, #40]	@ (8000a80 <usart3_custom_interrupt+0x94>)
 8000a56:	f043 0308 	orr.w	r3, r3, #8
 8000a5a:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF;  //Azzeramento flag interrupt trasmissione
 8000a5c:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <usart3_custom_interrupt+0x94>)
 8000a5e:	6a1b      	ldr	r3, [r3, #32]
 8000a60:	4a07      	ldr	r2, [pc, #28]	@ (8000a80 <usart3_custom_interrupt+0x94>)
 8000a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a66:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <usart3_custom_interrupt+0x94>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a04      	ldr	r2, [pc, #16]	@ (8000a80 <usart3_custom_interrupt+0x94>)
 8000a6e:	f043 0308 	orr.w	r3, r3, #8
 8000a72:	6193      	str	r3, [r2, #24]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	40004800 	.word	0x40004800
 8000a84:	1ff1e860 	.word	0x1ff1e860
 8000a88:	1ff1e861 	.word	0x1ff1e861
 8000a8c:	40001000 	.word	0x40001000
 8000a90:	2400002d 	.word	0x2400002d

08000a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a98:	f001 f800 	bl	8001a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9c:	f000 f83e 	bl	8000b1c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000aa0:	f000 f8ea 	bl	8000c78 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa4:	f000 fb3a 	bl	800111c <MX_GPIO_Init>
  MX_DMA_Init();
 8000aa8:	f000 fb08 	bl	80010bc <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000aac:	f000 fab8 	bl	8001020 <MX_USART3_UART_Init>
  MX_ADC2_Init();
 8000ab0:	f000 f912 	bl	8000cd8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000ab4:	f000 f982 	bl	8000dbc <MX_ADC3_Init>
  MX_TIM6_Init();
 8000ab8:	f000 fa7c 	bl	8000fb4 <MX_TIM6_Init>
  MX_DAC1_Init();
 8000abc:	f000 fa48 	bl	8000f50 <MX_DAC1_Init>
  MX_COMP2_Init();
 8000ac0:	f000 fa1a 	bl	8000ef8 <MX_COMP2_Init>
  MX_COMP1_Init();
 8000ac4:	f000 f9ea 	bl	8000e9c <MX_COMP1_Init>
  /* USER CODE BEGIN 2 */

	COMP2->CFGR |= COMP_CFGRx_EN;	// attivo il comparatore
 8000ac8:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <main+0x7c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a10      	ldr	r2, [pc, #64]	@ (8000b10 <main+0x7c>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6013      	str	r3, [r2, #0]
	COMP1->CFGR |= COMP_CFGRx_EN;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <main+0x80>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8000b14 <main+0x80>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	6013      	str	r3, [r2, #0]

	DAC1->CR |= DAC_CR_EN1;		// attivo DAC
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <main+0x84>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8000b18 <main+0x84>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6013      	str	r3, [r2, #0]

	DAC1->DHR12R1 = 400;			// Soglia del comparatore IN 12 BIT NON 16
 8000aec:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <main+0x84>)
 8000aee:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000af2:	609a      	str	r2, [r3, #8]

	DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 8000af4:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <main+0x84>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	4a07      	ldr	r2, [pc, #28]	@ (8000b18 <main+0x84>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	6053      	str	r3, [r2, #4]

	usart3_init();
 8000b00:	f7ff ff4c 	bl	800099c <usart3_init>
	ADC_custom_init();
 8000b04:	f7ff fdbc 	bl	8000680 <ADC_custom_init>
	DMA_custom_init();
 8000b08:	f7ff fe64 	bl	80007d4 <DMA_custom_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <main+0x78>
 8000b10:	58003810 	.word	0x58003810
 8000b14:	5800380c 	.word	0x5800380c
 8000b18:	40007400 	.word	0x40007400

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b09e      	sub	sp, #120	@ 0x78
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b26:	224c      	movs	r2, #76	@ 0x4c
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f009 f9d4 	bl	8009ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	2220      	movs	r2, #32
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f009 f9cd 	bl	8009ed8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b3e:	2002      	movs	r0, #2
 8000b40:	f004 fa44 	bl	8004fcc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	4b48      	ldr	r3, [pc, #288]	@ (8000c6c <SystemClock_Config+0x150>)
 8000b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b4c:	4a47      	ldr	r2, [pc, #284]	@ (8000c6c <SystemClock_Config+0x150>)
 8000b4e:	f023 0301 	bic.w	r3, r3, #1
 8000b52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b54:	4b45      	ldr	r3, [pc, #276]	@ (8000c6c <SystemClock_Config+0x150>)
 8000b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	4b44      	ldr	r3, [pc, #272]	@ (8000c70 <SystemClock_Config+0x154>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	4a43      	ldr	r2, [pc, #268]	@ (8000c70 <SystemClock_Config+0x154>)
 8000b64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b68:	6193      	str	r3, [r2, #24]
 8000b6a:	4b41      	ldr	r3, [pc, #260]	@ (8000c70 <SystemClock_Config+0x154>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b76:	bf00      	nop
 8000b78:	4b3d      	ldr	r3, [pc, #244]	@ (8000c70 <SystemClock_Config+0x154>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b84:	d1f8      	bne.n	8000b78 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	4b3b      	ldr	r3, [pc, #236]	@ (8000c74 <SystemClock_Config+0x158>)
 8000b88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b8c:	4a39      	ldr	r2, [pc, #228]	@ (8000c74 <SystemClock_Config+0x158>)
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b96:	4b37      	ldr	r3, [pc, #220]	@ (8000c74 <SystemClock_Config+0x158>)
 8000b98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b9c:	f003 0302 	and.w	r3, r3, #2
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	4b31      	ldr	r3, [pc, #196]	@ (8000c70 <SystemClock_Config+0x154>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a30      	ldr	r2, [pc, #192]	@ (8000c70 <SystemClock_Config+0x154>)
 8000bae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8000c70 <SystemClock_Config+0x154>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b2b      	ldr	r3, [pc, #172]	@ (8000c6c <SystemClock_Config+0x150>)
 8000bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8000c6c <SystemClock_Config+0x150>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000bca:	4b28      	ldr	r3, [pc, #160]	@ (8000c6c <SystemClock_Config+0x150>)
 8000bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bd6:	bf00      	nop
 8000bd8:	4b25      	ldr	r3, [pc, #148]	@ (8000c70 <SystemClock_Config+0x154>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000be0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000be4:	d1f8      	bne.n	8000bd8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000be6:	2301      	movs	r3, #1
 8000be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bea:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000bee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000bfc:	2378      	movs	r3, #120	@ 0x78
 8000bfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c04:	2304      	movs	r3, #4
 8000c06:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c0c:	230c      	movs	r3, #12
 8000c0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f004 fa0f 	bl	8005040 <HAL_RCC_OscConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000c28:	f000 fba8 	bl	800137c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2c:	233f      	movs	r3, #63	@ 0x3f
 8000c2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c30:	2303      	movs	r3, #3
 8000c32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c38:	2308      	movs	r3, #8
 8000c3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c3c:	2340      	movs	r3, #64	@ 0x40
 8000c3e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c40:	2340      	movs	r3, #64	@ 0x40
 8000c42:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c48:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c4a:	2340      	movs	r3, #64	@ 0x40
 8000c4c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c4e:	f107 030c 	add.w	r3, r7, #12
 8000c52:	2104      	movs	r1, #4
 8000c54:	4618      	mov	r0, r3
 8000c56:	f004 fe4d 	bl	80058f4 <HAL_RCC_ClockConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000c60:	f000 fb8c 	bl	800137c <Error_Handler>
  }
}
 8000c64:	bf00      	nop
 8000c66:	3778      	adds	r7, #120	@ 0x78
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	58000400 	.word	0x58000400
 8000c70:	58024800 	.word	0x58024800
 8000c74:	58024400 	.word	0x58024400

08000c78 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b0b0      	sub	sp, #192	@ 0xc0
 8000c7c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c7e:	463b      	mov	r3, r7
 8000c80:	22c0      	movs	r2, #192	@ 0xc0
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f009 f927 	bl	8009ed8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c8a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000c8e:	f04f 0300 	mov.w	r3, #0
 8000c92:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000c96:	2301      	movs	r3, #1
 8000c98:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 20;
 8000c9a:	2314      	movs	r3, #20
 8000c9c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000caa:	23c0      	movs	r3, #192	@ 0xc0
 8000cac:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000cae:	2320      	movs	r3, #32
 8000cb0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f005 f9a4 	bl	800600c <HAL_RCCEx_PeriphCLKConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000cca:	f000 fb57 	bl	800137c <Error_Handler>
  }
}
 8000cce:	bf00      	nop
 8000cd0:	37c0      	adds	r7, #192	@ 0xc0
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
 8000cec:	615a      	str	r2, [r3, #20]
 8000cee:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8000db0 <MX_ADC2_Init+0xd8>)
 8000cf2:	4a30      	ldr	r2, [pc, #192]	@ (8000db4 <MX_ADC2_Init+0xdc>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cf6:	4b2e      	ldr	r3, [pc, #184]	@ (8000db0 <MX_ADC2_Init+0xd8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cfc:	4b2c      	ldr	r3, [pc, #176]	@ (8000db0 <MX_ADC2_Init+0xd8>)
 8000cfe:	2204      	movs	r2, #4
 8000d00:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d02:	4b2b      	ldr	r3, [pc, #172]	@ (8000db0 <MX_ADC2_Init+0xd8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d08:	4b29      	ldr	r3, [pc, #164]	@ (8000db0 <MX_ADC2_Init+0xd8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000d0e:	4b28      	ldr	r3, [pc, #160]	@ (8000db0 <MX_ADC2_Init+0xd8>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d14:	4b26      	ldr	r3, [pc, #152]	@ (8000db0 <MX_ADC2_Init+0xd8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000d1a:	4b25      	ldr	r3, [pc, #148]	@ (8000db0 <MX_ADC2_Init+0xd8>)
 8000d1c:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000d20:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d22:	4b23      	ldr	r3, [pc, #140]	@ (8000db0 <MX_ADC2_Init+0xd8>)
 8000d24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d28:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d2a:	4b21      	ldr	r3, [pc, #132]	@ (8000db0 <MX_ADC2_Init+0xd8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d30:	4b1f      	ldr	r3, [pc, #124]	@ (8000db0 <MX_ADC2_Init+0xd8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d36:	4b1e      	ldr	r3, [pc, #120]	@ (8000db0 <MX_ADC2_Init+0xd8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000db0 <MX_ADC2_Init+0xd8>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Oversampling.Ratio = 1;
 8000d44:	4b1a      	ldr	r3, [pc, #104]	@ (8000db0 <MX_ADC2_Init+0xd8>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d4a:	4819      	ldr	r0, [pc, #100]	@ (8000db0 <MX_ADC2_Init+0xd8>)
 8000d4c:	f001 f90a 	bl	8001f64 <HAL_ADC_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 8000d56:	f000 fb11 	bl	800137c <Error_Handler>
  }
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <MX_ADC2_Init+0xd8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d60:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <MX_ADC2_Init+0xd8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d66:	4812      	ldr	r0, [pc, #72]	@ (8000db0 <MX_ADC2_Init+0xd8>)
 8000d68:	f001 f8fc 	bl	8001f64 <HAL_ADC_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_ADC2_Init+0x9e>
  {
    Error_Handler();
 8000d72:	f000 fb03 	bl	800137c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000d76:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <MX_ADC2_Init+0xe0>)
 8000d78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d7a:	2306      	movs	r3, #6
 8000d7c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d82:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000d86:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d88:	2304      	movs	r3, #4
 8000d8a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <MX_ADC2_Init+0xd8>)
 8000d9a:	f001 fa85 	bl	80022a8 <HAL_ADC_ConfigChannel>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 8000da4:	f000 faea 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	3720      	adds	r7, #32
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	24000fd0 	.word	0x24000fd0
 8000db4:	40022100 	.word	0x40022100
 8000db8:	3ef08000 	.word	0x3ef08000

08000dbc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
 8000dd0:	615a      	str	r2, [r3, #20]
 8000dd2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e94 <MX_ADC3_Init+0xd8>)
 8000dd6:	4a30      	ldr	r2, [pc, #192]	@ (8000e98 <MX_ADC3_Init+0xdc>)
 8000dd8:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dda:	4b2e      	ldr	r3, [pc, #184]	@ (8000e94 <MX_ADC3_Init+0xd8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000de0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e94 <MX_ADC3_Init+0xd8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e94 <MX_ADC3_Init+0xd8>)
 8000de8:	2204      	movs	r2, #4
 8000dea:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000dec:	4b29      	ldr	r3, [pc, #164]	@ (8000e94 <MX_ADC3_Init+0xd8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000df2:	4b28      	ldr	r3, [pc, #160]	@ (8000e94 <MX_ADC3_Init+0xd8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000df8:	4b26      	ldr	r3, [pc, #152]	@ (8000e94 <MX_ADC3_Init+0xd8>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000dfe:	4b25      	ldr	r3, [pc, #148]	@ (8000e94 <MX_ADC3_Init+0xd8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000e04:	4b23      	ldr	r3, [pc, #140]	@ (8000e94 <MX_ADC3_Init+0xd8>)
 8000e06:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000e0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e0c:	4b21      	ldr	r3, [pc, #132]	@ (8000e94 <MX_ADC3_Init+0xd8>)
 8000e0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e12:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e14:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <MX_ADC3_Init+0xd8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e94 <MX_ADC3_Init+0xd8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e20:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <MX_ADC3_Init+0xd8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000e26:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <MX_ADC3_Init+0xd8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000e2e:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <MX_ADC3_Init+0xd8>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e34:	4817      	ldr	r0, [pc, #92]	@ (8000e94 <MX_ADC3_Init+0xd8>)
 8000e36:	f001 f895 	bl	8001f64 <HAL_ADC_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000e40:	f000 fa9c 	bl	800137c <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000e44:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <MX_ADC3_Init+0xd8>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e4a:	4812      	ldr	r0, [pc, #72]	@ (8000e94 <MX_ADC3_Init+0xd8>)
 8000e4c:	f001 f88a 	bl	8001f64 <HAL_ADC_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000e56:	f000 fa91 	bl	800137c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e5e:	2306      	movs	r3, #6
 8000e60:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e66:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000e6a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <MX_ADC3_Init+0xd8>)
 8000e7e:	f001 fa13 	bl	80022a8 <HAL_ADC_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000e88:	f000 fa78 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	3720      	adds	r7, #32
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	24001034 	.word	0x24001034
 8000e98:	58026000 	.word	0x58026000

08000e9c <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000ea0:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <MX_COMP1_Init+0x54>)
 8000ea2:	4a14      	ldr	r2, [pc, #80]	@ (8000ef4 <MX_COMP1_Init+0x58>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000ea6:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <MX_COMP1_Init+0x54>)
 8000ea8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000eac:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000eae:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <MX_COMP1_Init+0x54>)
 8000eb0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000eb4:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef0 <MX_COMP1_Init+0x54>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <MX_COMP1_Init+0x54>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <MX_COMP1_Init+0x54>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000ec8:	4b09      	ldr	r3, [pc, #36]	@ (8000ef0 <MX_COMP1_Init+0x54>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000ece:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <MX_COMP1_Init+0x54>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <MX_COMP1_Init+0x54>)
 8000ed6:	2212      	movs	r2, #18
 8000ed8:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000eda:	4805      	ldr	r0, [pc, #20]	@ (8000ef0 <MX_COMP1_Init+0x54>)
 8000edc:	f001 fe4c 	bl	8002b78 <HAL_COMP_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_COMP1_Init+0x4e>
  {
    Error_Handler();
 8000ee6:	f000 fa49 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	24001188 	.word	0x24001188
 8000ef4:	5800380c 	.word	0x5800380c

08000ef8 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000efc:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <MX_COMP2_Init+0x50>)
 8000efe:	4a13      	ldr	r2, [pc, #76]	@ (8000f4c <MX_COMP2_Init+0x54>)
 8000f00:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <MX_COMP2_Init+0x50>)
 8000f04:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f08:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <MX_COMP2_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <MX_COMP2_Init+0x50>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000f16:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <MX_COMP2_Init+0x50>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <MX_COMP2_Init+0x50>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000f22:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <MX_COMP2_Init+0x50>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000f28:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <MX_COMP2_Init+0x50>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <MX_COMP2_Init+0x50>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000f34:	4804      	ldr	r0, [pc, #16]	@ (8000f48 <MX_COMP2_Init+0x50>)
 8000f36:	f001 fe1f 	bl	8002b78 <HAL_COMP_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 8000f40:	f000 fa1c 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	240011b4 	.word	0x240011b4
 8000f4c:	58003810 	.word	0x58003810

08000f50 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	@ 0x28
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2224      	movs	r2, #36	@ 0x24
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f008 ffbb 	bl	8009ed8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000f62:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <MX_DAC1_Init+0x5c>)
 8000f64:	4a12      	ldr	r2, [pc, #72]	@ (8000fb0 <MX_DAC1_Init+0x60>)
 8000f66:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f68:	4810      	ldr	r0, [pc, #64]	@ (8000fac <MX_DAC1_Init+0x5c>)
 8000f6a:	f002 f83e 	bl	8002fea <HAL_DAC_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000f74:	f000 fa02 	bl	800137c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000f80:	2302      	movs	r3, #2
 8000f82:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000f84:	2302      	movs	r3, #2
 8000f86:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	4619      	mov	r1, r3
 8000f92:	4806      	ldr	r0, [pc, #24]	@ (8000fac <MX_DAC1_Init+0x5c>)
 8000f94:	f002 f84c 	bl	8003030 <HAL_DAC_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000f9e:	f000 f9ed 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	@ 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	240011e0 	.word	0x240011e0
 8000fb0:	40007400 	.word	0x40007400

08000fb4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <MX_TIM6_Init+0x64>)
 8000fc6:	4a15      	ldr	r2, [pc, #84]	@ (800101c <MX_TIM6_Init+0x68>)
 8000fc8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000fca:	4b13      	ldr	r3, [pc, #76]	@ (8001018 <MX_TIM6_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <MX_TIM6_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	@ (8001018 <MX_TIM6_Init+0x64>)
 8000fd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fdc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <MX_TIM6_Init+0x64>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000fe4:	480c      	ldr	r0, [pc, #48]	@ (8001018 <MX_TIM6_Init+0x64>)
 8000fe6:	f007 fd0f 	bl	8008a08 <HAL_TIM_Base_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ff0:	f000 f9c4 	bl	800137c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ff4:	2320      	movs	r3, #32
 8000ff6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	@ (8001018 <MX_TIM6_Init+0x64>)
 8001002:	f007 fdff 	bl	8008c04 <HAL_TIMEx_MasterConfigSynchronization>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800100c:	f000 f9b6 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	240011f4 	.word	0x240011f4
 800101c:	40001000 	.word	0x40001000

08001020 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001024:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <MX_USART3_UART_Init+0x90>)
 8001026:	4a23      	ldr	r2, [pc, #140]	@ (80010b4 <MX_USART3_UART_Init+0x94>)
 8001028:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 800102a:	4b21      	ldr	r3, [pc, #132]	@ (80010b0 <MX_USART3_UART_Init+0x90>)
 800102c:	4a22      	ldr	r2, [pc, #136]	@ (80010b8 <MX_USART3_UART_Init+0x98>)
 800102e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001030:	4b1f      	ldr	r3, [pc, #124]	@ (80010b0 <MX_USART3_UART_Init+0x90>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001036:	4b1e      	ldr	r3, [pc, #120]	@ (80010b0 <MX_USART3_UART_Init+0x90>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800103c:	4b1c      	ldr	r3, [pc, #112]	@ (80010b0 <MX_USART3_UART_Init+0x90>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001042:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <MX_USART3_UART_Init+0x90>)
 8001044:	220c      	movs	r2, #12
 8001046:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001048:	4b19      	ldr	r3, [pc, #100]	@ (80010b0 <MX_USART3_UART_Init+0x90>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800104e:	4b18      	ldr	r3, [pc, #96]	@ (80010b0 <MX_USART3_UART_Init+0x90>)
 8001050:	2200      	movs	r2, #0
 8001052:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001054:	4b16      	ldr	r3, [pc, #88]	@ (80010b0 <MX_USART3_UART_Init+0x90>)
 8001056:	2200      	movs	r2, #0
 8001058:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800105a:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <MX_USART3_UART_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001060:	4b13      	ldr	r3, [pc, #76]	@ (80010b0 <MX_USART3_UART_Init+0x90>)
 8001062:	2200      	movs	r2, #0
 8001064:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001066:	4812      	ldr	r0, [pc, #72]	@ (80010b0 <MX_USART3_UART_Init+0x90>)
 8001068:	f007 fe5a 	bl	8008d20 <HAL_UART_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001072:	f000 f983 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001076:	2100      	movs	r1, #0
 8001078:	480d      	ldr	r0, [pc, #52]	@ (80010b0 <MX_USART3_UART_Init+0x90>)
 800107a:	f008 fe62 	bl	8009d42 <HAL_UARTEx_SetTxFifoThreshold>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001084:	f000 f97a 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001088:	2100      	movs	r1, #0
 800108a:	4809      	ldr	r0, [pc, #36]	@ (80010b0 <MX_USART3_UART_Init+0x90>)
 800108c:	f008 fe97 	bl	8009dbe <HAL_UARTEx_SetRxFifoThreshold>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001096:	f000 f971 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800109a:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <MX_USART3_UART_Init+0x90>)
 800109c:	f008 fe18 	bl	8009cd0 <HAL_UARTEx_DisableFifoMode>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 80010a6:	f000 f969 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	24001240 	.word	0x24001240
 80010b4:	40004800 	.word	0x40004800
 80010b8:	000f4240 	.word	0x000f4240

080010bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010c2:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <MX_DMA_Init+0x5c>)
 80010c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010c8:	4a13      	ldr	r2, [pc, #76]	@ (8001118 <MX_DMA_Init+0x5c>)
 80010ca:	f043 0302 	orr.w	r3, r3, #2
 80010ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <MX_DMA_Init+0x5c>)
 80010d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2100      	movs	r1, #0
 80010e4:	2038      	movs	r0, #56	@ 0x38
 80010e6:	f001 ff4c 	bl	8002f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010ea:	2038      	movs	r0, #56	@ 0x38
 80010ec:	f001 ff63 	bl	8002fb6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	2039      	movs	r0, #57	@ 0x39
 80010f6:	f001 ff44 	bl	8002f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80010fa:	2039      	movs	r0, #57	@ 0x39
 80010fc:	f001 ff5b 	bl	8002fb6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2100      	movs	r1, #0
 8001104:	203a      	movs	r0, #58	@ 0x3a
 8001106:	f001 ff3c 	bl	8002f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800110a:	203a      	movs	r0, #58	@ 0x3a
 800110c:	f001 ff53 	bl	8002fb6 <HAL_NVIC_EnableIRQ>

}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	58024400 	.word	0x58024400

0800111c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	@ 0x30
 8001120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	4b8b      	ldr	r3, [pc, #556]	@ (8001360 <MX_GPIO_Init+0x244>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001138:	4a89      	ldr	r2, [pc, #548]	@ (8001360 <MX_GPIO_Init+0x244>)
 800113a:	f043 0304 	orr.w	r3, r3, #4
 800113e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001142:	4b87      	ldr	r3, [pc, #540]	@ (8001360 <MX_GPIO_Init+0x244>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	61bb      	str	r3, [r7, #24]
 800114e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001150:	4b83      	ldr	r3, [pc, #524]	@ (8001360 <MX_GPIO_Init+0x244>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001156:	4a82      	ldr	r2, [pc, #520]	@ (8001360 <MX_GPIO_Init+0x244>)
 8001158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800115c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001160:	4b7f      	ldr	r3, [pc, #508]	@ (8001360 <MX_GPIO_Init+0x244>)
 8001162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b7c      	ldr	r3, [pc, #496]	@ (8001360 <MX_GPIO_Init+0x244>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001174:	4a7a      	ldr	r2, [pc, #488]	@ (8001360 <MX_GPIO_Init+0x244>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800117e:	4b78      	ldr	r3, [pc, #480]	@ (8001360 <MX_GPIO_Init+0x244>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118c:	4b74      	ldr	r3, [pc, #464]	@ (8001360 <MX_GPIO_Init+0x244>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001192:	4a73      	ldr	r2, [pc, #460]	@ (8001360 <MX_GPIO_Init+0x244>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800119c:	4b70      	ldr	r3, [pc, #448]	@ (8001360 <MX_GPIO_Init+0x244>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001360 <MX_GPIO_Init+0x244>)
 80011ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b0:	4a6b      	ldr	r2, [pc, #428]	@ (8001360 <MX_GPIO_Init+0x244>)
 80011b2:	f043 0310 	orr.w	r3, r3, #16
 80011b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ba:	4b69      	ldr	r3, [pc, #420]	@ (8001360 <MX_GPIO_Init+0x244>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c0:	f003 0310 	and.w	r3, r3, #16
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c8:	4b65      	ldr	r3, [pc, #404]	@ (8001360 <MX_GPIO_Init+0x244>)
 80011ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ce:	4a64      	ldr	r2, [pc, #400]	@ (8001360 <MX_GPIO_Init+0x244>)
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011d8:	4b61      	ldr	r3, [pc, #388]	@ (8001360 <MX_GPIO_Init+0x244>)
 80011da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011e6:	4b5e      	ldr	r3, [pc, #376]	@ (8001360 <MX_GPIO_Init+0x244>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ec:	4a5c      	ldr	r2, [pc, #368]	@ (8001360 <MX_GPIO_Init+0x244>)
 80011ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001360 <MX_GPIO_Init+0x244>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	f244 0101 	movw	r1, #16385	@ 0x4001
 800120a:	4856      	ldr	r0, [pc, #344]	@ (8001364 <MX_GPIO_Init+0x248>)
 800120c:	f003 fec4 	bl	8004f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001216:	4854      	ldr	r0, [pc, #336]	@ (8001368 <MX_GPIO_Init+0x24c>)
 8001218:	f003 febe 	bl	8004f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	2102      	movs	r1, #2
 8001220:	4852      	ldr	r0, [pc, #328]	@ (800136c <MX_GPIO_Init+0x250>)
 8001222:	f003 feb9 	bl	8004f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001226:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800122a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	484d      	ldr	r0, [pc, #308]	@ (8001370 <MX_GPIO_Init+0x254>)
 800123c:	f003 fcfc 	bl	8004c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001240:	2332      	movs	r3, #50	@ 0x32
 8001242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001250:	230b      	movs	r3, #11
 8001252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4619      	mov	r1, r3
 800125a:	4845      	ldr	r0, [pc, #276]	@ (8001370 <MX_GPIO_Init+0x254>)
 800125c:	f003 fcec 	bl	8004c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001260:	2386      	movs	r3, #134	@ 0x86
 8001262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001270:	230b      	movs	r3, #11
 8001272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4619      	mov	r1, r3
 800127a:	483e      	ldr	r0, [pc, #248]	@ (8001374 <MX_GPIO_Init+0x258>)
 800127c:	f003 fcdc 	bl	8004c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin;
 8001280:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	4619      	mov	r1, r3
 8001298:	4832      	ldr	r0, [pc, #200]	@ (8001364 <MX_GPIO_Init+0x248>)
 800129a:	f003 fccd 	bl	8004c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800129e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012b0:	230b      	movs	r3, #11
 80012b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f107 031c 	add.w	r3, r7, #28
 80012b8:	4619      	mov	r1, r3
 80012ba:	482a      	ldr	r0, [pc, #168]	@ (8001364 <MX_GPIO_Init+0x248>)
 80012bc:	f003 fcbc 	bl	8004c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80012c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4619      	mov	r1, r3
 80012d8:	4823      	ldr	r0, [pc, #140]	@ (8001368 <MX_GPIO_Init+0x24c>)
 80012da:	f003 fcad 	bl	8004c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80012de:	2380      	movs	r3, #128	@ 0x80
 80012e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	4821      	ldr	r0, [pc, #132]	@ (8001378 <MX_GPIO_Init+0x25c>)
 80012f4:	f003 fca0 	bl	8004c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80012f8:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80012fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800130a:	230a      	movs	r3, #10
 800130c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	4619      	mov	r1, r3
 8001314:	4817      	ldr	r0, [pc, #92]	@ (8001374 <MX_GPIO_Init+0x258>)
 8001316:	f003 fc8f 	bl	8004c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800131a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800131e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800132c:	230b      	movs	r3, #11
 800132e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	4810      	ldr	r0, [pc, #64]	@ (8001378 <MX_GPIO_Init+0x25c>)
 8001338:	f003 fc7e 	bl	8004c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800133c:	2302      	movs	r3, #2
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	4806      	ldr	r0, [pc, #24]	@ (800136c <MX_GPIO_Init+0x250>)
 8001354:	f003 fc70 	bl	8004c38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001358:	bf00      	nop
 800135a:	3730      	adds	r7, #48	@ 0x30
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	58024400 	.word	0x58024400
 8001364:	58020400 	.word	0x58020400
 8001368:	58020c00 	.word	0x58020c00
 800136c:	58021000 	.word	0x58021000
 8001370:	58020800 	.word	0x58020800
 8001374:	58020000 	.word	0x58020000
 8001378:	58021800 	.word	0x58021800

0800137c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
}
 8001382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <Error_Handler+0x8>

08001388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	4b13      	ldr	r3, [pc, #76]	@ (80013dc <HAL_MspInit+0x54>)
 8001390:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001394:	4a11      	ldr	r2, [pc, #68]	@ (80013dc <HAL_MspInit+0x54>)
 8001396:	f043 0302 	orr.w	r3, r3, #2
 800139a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800139e:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <HAL_MspInit+0x54>)
 80013a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <HAL_MspInit+0x54>)
 80013ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013b2:	4a0a      	ldr	r2, [pc, #40]	@ (80013dc <HAL_MspInit+0x54>)
 80013b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013b8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013bc:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <HAL_MspInit+0x54>)
 80013be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80013ca:	f000 fc19 	bl	8001c00 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80013ce:	2002      	movs	r0, #2
 80013d0:	f000 fc02 	bl	8001bd8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	58024400 	.word	0x58024400

080013e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08c      	sub	sp, #48	@ 0x30
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a61      	ldr	r2, [pc, #388]	@ (8001584 <HAL_ADC_MspInit+0x1a4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d15a      	bne.n	80014b8 <HAL_ADC_MspInit+0xd8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001402:	4b61      	ldr	r3, [pc, #388]	@ (8001588 <HAL_ADC_MspInit+0x1a8>)
 8001404:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001408:	4a5f      	ldr	r2, [pc, #380]	@ (8001588 <HAL_ADC_MspInit+0x1a8>)
 800140a:	f043 0320 	orr.w	r3, r3, #32
 800140e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001412:	4b5d      	ldr	r3, [pc, #372]	@ (8001588 <HAL_ADC_MspInit+0x1a8>)
 8001414:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001418:	f003 0320 	and.w	r3, r3, #32
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	4b59      	ldr	r3, [pc, #356]	@ (8001588 <HAL_ADC_MspInit+0x1a8>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001426:	4a58      	ldr	r2, [pc, #352]	@ (8001588 <HAL_ADC_MspInit+0x1a8>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001430:	4b55      	ldr	r3, [pc, #340]	@ (8001588 <HAL_ADC_MspInit+0x1a8>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PA3     ------> ADC2_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800143e:	2308      	movs	r3, #8
 8001440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001442:	2303      	movs	r3, #3
 8001444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	4619      	mov	r1, r3
 8001450:	484e      	ldr	r0, [pc, #312]	@ (800158c <HAL_ADC_MspInit+0x1ac>)
 8001452:	f003 fbf1 	bl	8004c38 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8001456:	4b4e      	ldr	r3, [pc, #312]	@ (8001590 <HAL_ADC_MspInit+0x1b0>)
 8001458:	4a4e      	ldr	r2, [pc, #312]	@ (8001594 <HAL_ADC_MspInit+0x1b4>)
 800145a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800145c:	4b4c      	ldr	r3, [pc, #304]	@ (8001590 <HAL_ADC_MspInit+0x1b0>)
 800145e:	220a      	movs	r2, #10
 8001460:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001462:	4b4b      	ldr	r3, [pc, #300]	@ (8001590 <HAL_ADC_MspInit+0x1b0>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001468:	4b49      	ldr	r3, [pc, #292]	@ (8001590 <HAL_ADC_MspInit+0x1b0>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800146e:	4b48      	ldr	r3, [pc, #288]	@ (8001590 <HAL_ADC_MspInit+0x1b0>)
 8001470:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001474:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001476:	4b46      	ldr	r3, [pc, #280]	@ (8001590 <HAL_ADC_MspInit+0x1b0>)
 8001478:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800147c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800147e:	4b44      	ldr	r3, [pc, #272]	@ (8001590 <HAL_ADC_MspInit+0x1b0>)
 8001480:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001484:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001486:	4b42      	ldr	r3, [pc, #264]	@ (8001590 <HAL_ADC_MspInit+0x1b0>)
 8001488:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800148c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800148e:	4b40      	ldr	r3, [pc, #256]	@ (8001590 <HAL_ADC_MspInit+0x1b0>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001494:	4b3e      	ldr	r3, [pc, #248]	@ (8001590 <HAL_ADC_MspInit+0x1b0>)
 8001496:	2200      	movs	r2, #0
 8001498:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800149a:	483d      	ldr	r0, [pc, #244]	@ (8001590 <HAL_ADC_MspInit+0x1b0>)
 800149c:	f001 ff0a 	bl	80032b4 <HAL_DMA_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 80014a6:	f7ff ff69 	bl	800137c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a38      	ldr	r2, [pc, #224]	@ (8001590 <HAL_ADC_MspInit+0x1b0>)
 80014ae:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014b0:	4a37      	ldr	r2, [pc, #220]	@ (8001590 <HAL_ADC_MspInit+0x1b0>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80014b6:	e060      	b.n	800157a <HAL_ADC_MspInit+0x19a>
  else if(hadc->Instance==ADC3)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a36      	ldr	r2, [pc, #216]	@ (8001598 <HAL_ADC_MspInit+0x1b8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d15b      	bne.n	800157a <HAL_ADC_MspInit+0x19a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80014c2:	4b31      	ldr	r3, [pc, #196]	@ (8001588 <HAL_ADC_MspInit+0x1a8>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c8:	4a2f      	ldr	r2, [pc, #188]	@ (8001588 <HAL_ADC_MspInit+0x1a8>)
 80014ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001588 <HAL_ADC_MspInit+0x1a8>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e0:	4b29      	ldr	r3, [pc, #164]	@ (8001588 <HAL_ADC_MspInit+0x1a8>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e6:	4a28      	ldr	r2, [pc, #160]	@ (8001588 <HAL_ADC_MspInit+0x1a8>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014f0:	4b25      	ldr	r3, [pc, #148]	@ (8001588 <HAL_ADC_MspInit+0x1a8>)
 80014f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80014fe:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001502:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001506:	f000 fb8b 	bl	8001c20 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream0;
 800150a:	4b24      	ldr	r3, [pc, #144]	@ (800159c <HAL_ADC_MspInit+0x1bc>)
 800150c:	4a24      	ldr	r2, [pc, #144]	@ (80015a0 <HAL_ADC_MspInit+0x1c0>)
 800150e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001510:	4b22      	ldr	r3, [pc, #136]	@ (800159c <HAL_ADC_MspInit+0x1bc>)
 8001512:	2273      	movs	r2, #115	@ 0x73
 8001514:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001516:	4b21      	ldr	r3, [pc, #132]	@ (800159c <HAL_ADC_MspInit+0x1bc>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800151c:	4b1f      	ldr	r3, [pc, #124]	@ (800159c <HAL_ADC_MspInit+0x1bc>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001522:	4b1e      	ldr	r3, [pc, #120]	@ (800159c <HAL_ADC_MspInit+0x1bc>)
 8001524:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001528:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800152a:	4b1c      	ldr	r3, [pc, #112]	@ (800159c <HAL_ADC_MspInit+0x1bc>)
 800152c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001530:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001532:	4b1a      	ldr	r3, [pc, #104]	@ (800159c <HAL_ADC_MspInit+0x1bc>)
 8001534:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001538:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800153a:	4b18      	ldr	r3, [pc, #96]	@ (800159c <HAL_ADC_MspInit+0x1bc>)
 800153c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001540:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001542:	4b16      	ldr	r3, [pc, #88]	@ (800159c <HAL_ADC_MspInit+0x1bc>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001548:	4b14      	ldr	r3, [pc, #80]	@ (800159c <HAL_ADC_MspInit+0x1bc>)
 800154a:	2200      	movs	r2, #0
 800154c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800154e:	4813      	ldr	r0, [pc, #76]	@ (800159c <HAL_ADC_MspInit+0x1bc>)
 8001550:	f001 feb0 	bl	80032b4 <HAL_DMA_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 800155a:	f7ff ff0f 	bl	800137c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a0e      	ldr	r2, [pc, #56]	@ (800159c <HAL_ADC_MspInit+0x1bc>)
 8001562:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001564:	4a0d      	ldr	r2, [pc, #52]	@ (800159c <HAL_ADC_MspInit+0x1bc>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	207f      	movs	r0, #127	@ 0x7f
 8001570:	f001 fd07 	bl	8002f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001574:	207f      	movs	r0, #127	@ 0x7f
 8001576:	f001 fd1e 	bl	8002fb6 <HAL_NVIC_EnableIRQ>
}
 800157a:	bf00      	nop
 800157c:	3730      	adds	r7, #48	@ 0x30
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40022100 	.word	0x40022100
 8001588:	58024400 	.word	0x58024400
 800158c:	58020000 	.word	0x58020000
 8001590:	24001098 	.word	0x24001098
 8001594:	40020440 	.word	0x40020440
 8001598:	58026000 	.word	0x58026000
 800159c:	24001110 	.word	0x24001110
 80015a0:	40020410 	.word	0x40020410

080015a4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08c      	sub	sp, #48	@ 0x30
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a39      	ldr	r2, [pc, #228]	@ (80016a8 <HAL_COMP_MspInit+0x104>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d133      	bne.n	800162e <HAL_COMP_MspInit+0x8a>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_COMP12_CLK_ENABLED++;
 80015c6:	4b39      	ldr	r3, [pc, #228]	@ (80016ac <HAL_COMP_MspInit+0x108>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	4a37      	ldr	r2, [pc, #220]	@ (80016ac <HAL_COMP_MspInit+0x108>)
 80015ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_COMP12_CLK_ENABLED==1){
 80015d0:	4b36      	ldr	r3, [pc, #216]	@ (80016ac <HAL_COMP_MspInit+0x108>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d10e      	bne.n	80015f6 <HAL_COMP_MspInit+0x52>
      __HAL_RCC_COMP12_CLK_ENABLE();
 80015d8:	4b35      	ldr	r3, [pc, #212]	@ (80016b0 <HAL_COMP_MspInit+0x10c>)
 80015da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015de:	4a34      	ldr	r2, [pc, #208]	@ (80016b0 <HAL_COMP_MspInit+0x10c>)
 80015e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015e8:	4b31      	ldr	r3, [pc, #196]	@ (80016b0 <HAL_COMP_MspInit+0x10c>)
 80015ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015f2:	61bb      	str	r3, [r7, #24]
 80015f4:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	4b2e      	ldr	r3, [pc, #184]	@ (80016b0 <HAL_COMP_MspInit+0x10c>)
 80015f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015fc:	4a2c      	ldr	r2, [pc, #176]	@ (80016b0 <HAL_COMP_MspInit+0x10c>)
 80015fe:	f043 0302 	orr.w	r3, r3, #2
 8001602:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001606:	4b2a      	ldr	r3, [pc, #168]	@ (80016b0 <HAL_COMP_MspInit+0x10c>)
 8001608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	697b      	ldr	r3, [r7, #20]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001614:	2304      	movs	r3, #4
 8001616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001618:	2303      	movs	r3, #3
 800161a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	4823      	ldr	r0, [pc, #140]	@ (80016b4 <HAL_COMP_MspInit+0x110>)
 8001628:	f003 fb06 	bl	8004c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 800162c:	e038      	b.n	80016a0 <HAL_COMP_MspInit+0xfc>
  else if(hcomp->Instance==COMP2)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a21      	ldr	r2, [pc, #132]	@ (80016b8 <HAL_COMP_MspInit+0x114>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d133      	bne.n	80016a0 <HAL_COMP_MspInit+0xfc>
    HAL_RCC_COMP12_CLK_ENABLED++;
 8001638:	4b1c      	ldr	r3, [pc, #112]	@ (80016ac <HAL_COMP_MspInit+0x108>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	3301      	adds	r3, #1
 800163e:	4a1b      	ldr	r2, [pc, #108]	@ (80016ac <HAL_COMP_MspInit+0x108>)
 8001640:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_COMP12_CLK_ENABLED==1){
 8001642:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <HAL_COMP_MspInit+0x108>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d10e      	bne.n	8001668 <HAL_COMP_MspInit+0xc4>
      __HAL_RCC_COMP12_CLK_ENABLE();
 800164a:	4b19      	ldr	r3, [pc, #100]	@ (80016b0 <HAL_COMP_MspInit+0x10c>)
 800164c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001650:	4a17      	ldr	r2, [pc, #92]	@ (80016b0 <HAL_COMP_MspInit+0x10c>)
 8001652:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001656:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800165a:	4b15      	ldr	r3, [pc, #84]	@ (80016b0 <HAL_COMP_MspInit+0x10c>)
 800165c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001660:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001668:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <HAL_COMP_MspInit+0x10c>)
 800166a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800166e:	4a10      	ldr	r2, [pc, #64]	@ (80016b0 <HAL_COMP_MspInit+0x10c>)
 8001670:	f043 0310 	orr.w	r3, r3, #16
 8001674:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001678:	4b0d      	ldr	r3, [pc, #52]	@ (80016b0 <HAL_COMP_MspInit+0x10c>)
 800167a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001686:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800168a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800168c:	2303      	movs	r3, #3
 800168e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	4808      	ldr	r0, [pc, #32]	@ (80016bc <HAL_COMP_MspInit+0x118>)
 800169c:	f003 facc 	bl	8004c38 <HAL_GPIO_Init>
}
 80016a0:	bf00      	nop
 80016a2:	3730      	adds	r7, #48	@ 0x30
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	5800380c 	.word	0x5800380c
 80016ac:	2400134c 	.word	0x2400134c
 80016b0:	58024400 	.word	0x58024400
 80016b4:	58020400 	.word	0x58020400
 80016b8:	58003810 	.word	0x58003810
 80016bc:	58021000 	.word	0x58021000

080016c0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0b      	ldr	r2, [pc, #44]	@ (80016fc <HAL_DAC_MspInit+0x3c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d10e      	bne.n	80016f0 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80016d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <HAL_DAC_MspInit+0x40>)
 80016d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016d8:	4a09      	ldr	r2, [pc, #36]	@ (8001700 <HAL_DAC_MspInit+0x40>)
 80016da:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80016de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016e2:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <HAL_DAC_MspInit+0x40>)
 80016e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	40007400 	.word	0x40007400
 8001700:	58024400 	.word	0x58024400

08001704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0b      	ldr	r2, [pc, #44]	@ (8001740 <HAL_TIM_Base_MspInit+0x3c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d10e      	bne.n	8001734 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001716:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <HAL_TIM_Base_MspInit+0x40>)
 8001718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800171c:	4a09      	ldr	r2, [pc, #36]	@ (8001744 <HAL_TIM_Base_MspInit+0x40>)
 800171e:	f043 0310 	orr.w	r3, r3, #16
 8001722:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001726:	4b07      	ldr	r3, [pc, #28]	@ (8001744 <HAL_TIM_Base_MspInit+0x40>)
 8001728:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800172c:	f003 0310 	and.w	r3, r3, #16
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	40001000 	.word	0x40001000
 8001744:	58024400 	.word	0x58024400

08001748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b0ba      	sub	sp, #232	@ 0xe8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	22c0      	movs	r2, #192	@ 0xc0
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f008 fbb5 	bl	8009ed8 <memset>
  if(huart->Instance==USART3)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a41      	ldr	r2, [pc, #260]	@ (8001878 <HAL_UART_MspInit+0x130>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d17b      	bne.n	8001870 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001778:	f04f 0202 	mov.w	r2, #2
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001784:	2300      	movs	r3, #0
 8001786:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800178a:	f107 0310 	add.w	r3, r7, #16
 800178e:	4618      	mov	r0, r3
 8001790:	f004 fc3c 	bl	800600c <HAL_RCCEx_PeriphCLKConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800179a:	f7ff fdef 	bl	800137c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800179e:	4b37      	ldr	r3, [pc, #220]	@ (800187c <HAL_UART_MspInit+0x134>)
 80017a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017a4:	4a35      	ldr	r2, [pc, #212]	@ (800187c <HAL_UART_MspInit+0x134>)
 80017a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017ae:	4b33      	ldr	r3, [pc, #204]	@ (800187c <HAL_UART_MspInit+0x134>)
 80017b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017bc:	4b2f      	ldr	r3, [pc, #188]	@ (800187c <HAL_UART_MspInit+0x134>)
 80017be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c2:	4a2e      	ldr	r2, [pc, #184]	@ (800187c <HAL_UART_MspInit+0x134>)
 80017c4:	f043 0308 	orr.w	r3, r3, #8
 80017c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017cc:	4b2b      	ldr	r3, [pc, #172]	@ (800187c <HAL_UART_MspInit+0x134>)
 80017ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80017da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017f4:	2307      	movs	r3, #7
 80017f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017fa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017fe:	4619      	mov	r1, r3
 8001800:	481f      	ldr	r0, [pc, #124]	@ (8001880 <HAL_UART_MspInit+0x138>)
 8001802:	f003 fa19 	bl	8004c38 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream1;
 8001806:	4b1f      	ldr	r3, [pc, #124]	@ (8001884 <HAL_UART_MspInit+0x13c>)
 8001808:	4a1f      	ldr	r2, [pc, #124]	@ (8001888 <HAL_UART_MspInit+0x140>)
 800180a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800180c:	4b1d      	ldr	r3, [pc, #116]	@ (8001884 <HAL_UART_MspInit+0x13c>)
 800180e:	222e      	movs	r2, #46	@ 0x2e
 8001810:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001812:	4b1c      	ldr	r3, [pc, #112]	@ (8001884 <HAL_UART_MspInit+0x13c>)
 8001814:	2240      	movs	r2, #64	@ 0x40
 8001816:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001818:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <HAL_UART_MspInit+0x13c>)
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800181e:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <HAL_UART_MspInit+0x13c>)
 8001820:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001824:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001826:	4b17      	ldr	r3, [pc, #92]	@ (8001884 <HAL_UART_MspInit+0x13c>)
 8001828:	2200      	movs	r2, #0
 800182a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800182c:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <HAL_UART_MspInit+0x13c>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001832:	4b14      	ldr	r3, [pc, #80]	@ (8001884 <HAL_UART_MspInit+0x13c>)
 8001834:	2200      	movs	r2, #0
 8001836:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001838:	4b12      	ldr	r3, [pc, #72]	@ (8001884 <HAL_UART_MspInit+0x13c>)
 800183a:	2200      	movs	r2, #0
 800183c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800183e:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <HAL_UART_MspInit+0x13c>)
 8001840:	2200      	movs	r2, #0
 8001842:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001844:	480f      	ldr	r0, [pc, #60]	@ (8001884 <HAL_UART_MspInit+0x13c>)
 8001846:	f001 fd35 	bl	80032b4 <HAL_DMA_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001850:	f7ff fd94 	bl	800137c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a0b      	ldr	r2, [pc, #44]	@ (8001884 <HAL_UART_MspInit+0x13c>)
 8001858:	67da      	str	r2, [r3, #124]	@ 0x7c
 800185a:	4a0a      	ldr	r2, [pc, #40]	@ (8001884 <HAL_UART_MspInit+0x13c>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2100      	movs	r1, #0
 8001864:	2027      	movs	r0, #39	@ 0x27
 8001866:	f001 fb8c 	bl	8002f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800186a:	2027      	movs	r0, #39	@ 0x27
 800186c:	f001 fba3 	bl	8002fb6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001870:	bf00      	nop
 8001872:	37e8      	adds	r7, #232	@ 0xe8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40004800 	.word	0x40004800
 800187c:	58024400 	.word	0x58024400
 8001880:	58020c00 	.word	0x58020c00
 8001884:	240012d4 	.word	0x240012d4
 8001888:	40020428 	.word	0x40020428

0800188c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <NMI_Handler+0x4>

08001894 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <HardFault_Handler+0x4>

0800189c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <MemManage_Handler+0x4>

080018a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <BusFault_Handler+0x4>

080018ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <UsageFault_Handler+0x4>

080018b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e2:	f000 f94d 	bl	8001b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}

080018ea <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	usart3_custom_interrupt();
 80018ee:	f7ff f87d 	bl	80009ec <usart3_custom_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <DMA2_Stream0_IRQHandler+0x10>)
 80018fe:	f002 f835 	bl	800396c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	24001110 	.word	0x24001110

0800190c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	DMA_custom_interrupt_tx();
 8001910:	f7fe fff6 	bl	8000900 <DMA_custom_interrupt_tx>
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
	}
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}

08001918 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800191c:	4802      	ldr	r0, [pc, #8]	@ (8001928 <DMA2_Stream2_IRQHandler+0x10>)
 800191e:	f002 f825 	bl	800396c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	24001098 	.word	0x24001098

0800192c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	ADC_custom_interrupt_pre();
 8001930:	f7fe fed4 	bl	80006dc <ADC_custom_interrupt_pre>
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
  /* USER CODE BEGIN ADC3_IRQn 1 */
	}
  /* USER CODE END ADC3_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}

08001938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800193c:	4b37      	ldr	r3, [pc, #220]	@ (8001a1c <SystemInit+0xe4>)
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001942:	4a36      	ldr	r2, [pc, #216]	@ (8001a1c <SystemInit+0xe4>)
 8001944:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001948:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800194c:	4b34      	ldr	r3, [pc, #208]	@ (8001a20 <SystemInit+0xe8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 030f 	and.w	r3, r3, #15
 8001954:	2b06      	cmp	r3, #6
 8001956:	d807      	bhi.n	8001968 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001958:	4b31      	ldr	r3, [pc, #196]	@ (8001a20 <SystemInit+0xe8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f023 030f 	bic.w	r3, r3, #15
 8001960:	4a2f      	ldr	r2, [pc, #188]	@ (8001a20 <SystemInit+0xe8>)
 8001962:	f043 0307 	orr.w	r3, r3, #7
 8001966:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001968:	4b2e      	ldr	r3, [pc, #184]	@ (8001a24 <SystemInit+0xec>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a2d      	ldr	r2, [pc, #180]	@ (8001a24 <SystemInit+0xec>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001974:	4b2b      	ldr	r3, [pc, #172]	@ (8001a24 <SystemInit+0xec>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800197a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a24 <SystemInit+0xec>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4929      	ldr	r1, [pc, #164]	@ (8001a24 <SystemInit+0xec>)
 8001980:	4b29      	ldr	r3, [pc, #164]	@ (8001a28 <SystemInit+0xf0>)
 8001982:	4013      	ands	r3, r2
 8001984:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001986:	4b26      	ldr	r3, [pc, #152]	@ (8001a20 <SystemInit+0xe8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d007      	beq.n	80019a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001992:	4b23      	ldr	r3, [pc, #140]	@ (8001a20 <SystemInit+0xe8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 030f 	bic.w	r3, r3, #15
 800199a:	4a21      	ldr	r2, [pc, #132]	@ (8001a20 <SystemInit+0xe8>)
 800199c:	f043 0307 	orr.w	r3, r3, #7
 80019a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019a2:	4b20      	ldr	r3, [pc, #128]	@ (8001a24 <SystemInit+0xec>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a24 <SystemInit+0xec>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001a24 <SystemInit+0xec>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a24 <SystemInit+0xec>)
 80019b6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a2c <SystemInit+0xf4>)
 80019b8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001a24 <SystemInit+0xec>)
 80019bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001a30 <SystemInit+0xf8>)
 80019be:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80019c0:	4b18      	ldr	r3, [pc, #96]	@ (8001a24 <SystemInit+0xec>)
 80019c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a34 <SystemInit+0xfc>)
 80019c4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019c6:	4b17      	ldr	r3, [pc, #92]	@ (8001a24 <SystemInit+0xec>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019cc:	4b15      	ldr	r3, [pc, #84]	@ (8001a24 <SystemInit+0xec>)
 80019ce:	4a19      	ldr	r2, [pc, #100]	@ (8001a34 <SystemInit+0xfc>)
 80019d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019d2:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <SystemInit+0xec>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019d8:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <SystemInit+0xec>)
 80019da:	4a16      	ldr	r2, [pc, #88]	@ (8001a34 <SystemInit+0xfc>)
 80019dc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019de:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <SystemInit+0xec>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <SystemInit+0xec>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001a24 <SystemInit+0xec>)
 80019ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <SystemInit+0xec>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80019f6:	4b10      	ldr	r3, [pc, #64]	@ (8001a38 <SystemInit+0x100>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <SystemInit+0x104>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a02:	d202      	bcs.n	8001a0a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a04:	4b0e      	ldr	r3, [pc, #56]	@ (8001a40 <SystemInit+0x108>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a44 <SystemInit+0x10c>)
 8001a0c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001a10:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00
 8001a20:	52002000 	.word	0x52002000
 8001a24:	58024400 	.word	0x58024400
 8001a28:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a2c:	02020200 	.word	0x02020200
 8001a30:	01ff0000 	.word	0x01ff0000
 8001a34:	01010280 	.word	0x01010280
 8001a38:	5c001000 	.word	0x5c001000
 8001a3c:	ffff0000 	.word	0xffff0000
 8001a40:	51008108 	.word	0x51008108
 8001a44:	52004000 	.word	0x52004000

08001a48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a4c:	f7ff ff74 	bl	8001938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a50:	480c      	ldr	r0, [pc, #48]	@ (8001a84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a52:	490d      	ldr	r1, [pc, #52]	@ (8001a88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a54:	4a0d      	ldr	r2, [pc, #52]	@ (8001a8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a58:	e002      	b.n	8001a60 <LoopCopyDataInit>

08001a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5e:	3304      	adds	r3, #4

08001a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a64:	d3f9      	bcc.n	8001a5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a66:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a68:	4c0a      	ldr	r4, [pc, #40]	@ (8001a94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a6c:	e001      	b.n	8001a72 <LoopFillZerobss>

08001a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a70:	3204      	adds	r2, #4

08001a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a74:	d3fb      	bcc.n	8001a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a76:	f008 fa37 	bl	8009ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a7a:	f7ff f80b 	bl	8000a94 <main>
  bx  lr
 8001a7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a80:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a88:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001a8c:	08009f98 	.word	0x08009f98
  ldr r2, =_sbss
 8001a90:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001a94:	24001354 	.word	0x24001354

08001a98 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a98:	e7fe      	b.n	8001a98 <ADC_IRQHandler>
	...

08001a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa2:	2003      	movs	r0, #3
 8001aa4:	f001 fa62 	bl	8002f6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001aa8:	f004 f8da 	bl	8005c60 <HAL_RCC_GetSysClockFreq>
 8001aac:	4602      	mov	r2, r0
 8001aae:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <HAL_Init+0x68>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	4913      	ldr	r1, [pc, #76]	@ (8001b08 <HAL_Init+0x6c>)
 8001aba:	5ccb      	ldrb	r3, [r1, r3]
 8001abc:	f003 031f 	and.w	r3, r3, #31
 8001ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b04 <HAL_Init+0x68>)
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	4a0e      	ldr	r2, [pc, #56]	@ (8001b08 <HAL_Init+0x6c>)
 8001ad0:	5cd3      	ldrb	r3, [r2, r3]
 8001ad2:	f003 031f 	and.w	r3, r3, #31
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8001adc:	4a0b      	ldr	r2, [pc, #44]	@ (8001b0c <HAL_Init+0x70>)
 8001ade:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ae0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b10 <HAL_Init+0x74>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f000 f814 	bl	8001b14 <HAL_InitTick>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e002      	b.n	8001afc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001af6:	f7ff fc47 	bl	8001388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	58024400 	.word	0x58024400
 8001b08:	08009f48 	.word	0x08009f48
 8001b0c:	24000004 	.word	0x24000004
 8001b10:	24000000 	.word	0x24000000

08001b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b1c:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <HAL_InitTick+0x60>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e021      	b.n	8001b6c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b28:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <HAL_InitTick+0x64>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b11      	ldr	r3, [pc, #68]	@ (8001b74 <HAL_InitTick+0x60>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f001 fa47 	bl	8002fd2 <HAL_SYSTICK_Config>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00e      	b.n	8001b6c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b0f      	cmp	r3, #15
 8001b52:	d80a      	bhi.n	8001b6a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b54:	2200      	movs	r2, #0
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5c:	f001 fa11 	bl	8002f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b60:	4a06      	ldr	r2, [pc, #24]	@ (8001b7c <HAL_InitTick+0x68>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e000      	b.n	8001b6c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	2400000c 	.word	0x2400000c
 8001b78:	24000000 	.word	0x24000000
 8001b7c:	24000008 	.word	0x24000008

08001b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b84:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_IncTick+0x20>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <HAL_IncTick+0x24>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	4a04      	ldr	r2, [pc, #16]	@ (8001ba4 <HAL_IncTick+0x24>)
 8001b92:	6013      	str	r3, [r2, #0]
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	2400000c 	.word	0x2400000c
 8001ba4:	24001350 	.word	0x24001350

08001ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bac:	4b03      	ldr	r3, [pc, #12]	@ (8001bbc <HAL_GetTick+0x14>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	24001350 	.word	0x24001350

08001bc0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001bc4:	4b03      	ldr	r3, [pc, #12]	@ (8001bd4 <HAL_GetREVID+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	0c1b      	lsrs	r3, r3, #16
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	5c001000 	.word	0x5c001000

08001bd8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001be0:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f023 0202 	bic.w	r2, r3, #2
 8001be8:	4904      	ldr	r1, [pc, #16]	@ (8001bfc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	600b      	str	r3, [r1, #0]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	58003c00 	.word	0x58003c00

08001c00 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001c04:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a04      	ldr	r2, [pc, #16]	@ (8001c1c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8001c0a:	f023 0301 	bic.w	r3, r3, #1
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	58003c00 	.word	0x58003c00

08001c20 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001c2a:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	401a      	ands	r2, r3
 8001c34:	4904      	ldr	r1, [pc, #16]	@ (8001c48 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	58000400 	.word	0x58000400

08001c4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	609a      	str	r2, [r3, #8]
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3360      	adds	r3, #96	@ 0x60
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001ce8:	bf00      	nop
 8001cea:	371c      	adds	r7, #28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	431a      	orrs	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	611a      	str	r2, [r3, #16]
}
 8001d1a:	bf00      	nop
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b087      	sub	sp, #28
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3360      	adds	r3, #96	@ 0x60
 8001d36:	461a      	mov	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	601a      	str	r2, [r3, #0]
  }
}
 8001d50:	bf00      	nop
 8001d52:	371c      	adds	r7, #28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3330      	adds	r3, #48	@ 0x30
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	4413      	add	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f003 031f 	and.w	r3, r3, #31
 8001d86:	211f      	movs	r1, #31
 8001d88:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	401a      	ands	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	0e9b      	lsrs	r3, r3, #26
 8001d94:	f003 011f 	and.w	r1, r3, #31
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	431a      	orrs	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001da8:	bf00      	nop
 8001daa:	371c      	adds	r7, #28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3314      	adds	r3, #20
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	0e5b      	lsrs	r3, r3, #25
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	4413      	add	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	0d1b      	lsrs	r3, r3, #20
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	2107      	movs	r1, #7
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	401a      	ands	r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	0d1b      	lsrs	r3, r3, #20
 8001dee:	f003 031f 	and.w	r3, r3, #31
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	fa01 f303 	lsl.w	r3, r1, r3
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dfe:	bf00      	nop
 8001e00:	371c      	adds	r7, #28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e24:	43db      	mvns	r3, r3
 8001e26:	401a      	ands	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0318 	and.w	r3, r3, #24
 8001e2e:	4908      	ldr	r1, [pc, #32]	@ (8001e50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e30:	40d9      	lsrs	r1, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	400b      	ands	r3, r1
 8001e36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001e42:	bf00      	nop
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	000fffff 	.word	0x000fffff

08001e54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	4b04      	ldr	r3, [pc, #16]	@ (8001e74 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6093      	str	r3, [r2, #8]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	5fffffc0 	.word	0x5fffffc0

08001e78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e8c:	d101      	bne.n	8001e92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <LL_ADC_EnableInternalRegulator+0x24>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	6fffffc0 	.word	0x6fffffc0

08001ec8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001edc:	d101      	bne.n	8001ee2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <LL_ADC_IsEnabled+0x18>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <LL_ADC_IsEnabled+0x1a>
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d101      	bne.n	8001f2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d101      	bne.n	8001f54 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b089      	sub	sp, #36	@ 0x24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e18f      	b.n	800229e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d109      	bne.n	8001fa0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff fa27 	bl	80013e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff67 	bl	8001e78 <LL_ADC_IsDeepPowerDownEnabled>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d004      	beq.n	8001fba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff4d 	bl	8001e54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ff82 	bl	8001ec8 <LL_ADC_IsInternalRegulatorEnabled>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d114      	bne.n	8001ff4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ff66 	bl	8001ea0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fd4:	4b87      	ldr	r3, [pc, #540]	@ (80021f4 <HAL_ADC_Init+0x290>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	099b      	lsrs	r3, r3, #6
 8001fda:	4a87      	ldr	r2, [pc, #540]	@ (80021f8 <HAL_ADC_Init+0x294>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	099b      	lsrs	r3, r3, #6
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fe6:	e002      	b.n	8001fee <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f9      	bne.n	8001fe8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff65 	bl	8001ec8 <LL_ADC_IsInternalRegulatorEnabled>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10d      	bne.n	8002020 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002008:	f043 0210 	orr.w	r2, r3, #16
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002014:	f043 0201 	orr.w	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff76 	bl	8001f16 <LL_ADC_REG_IsConversionOngoing>
 800202a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b00      	cmp	r3, #0
 8002036:	f040 8129 	bne.w	800228c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2b00      	cmp	r3, #0
 800203e:	f040 8125 	bne.w	800228c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002046:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800204a:	f043 0202 	orr.w	r2, r3, #2
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ff4a 	bl	8001ef0 <LL_ADC_IsEnabled>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d136      	bne.n	80020d0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a65      	ldr	r2, [pc, #404]	@ (80021fc <HAL_ADC_Init+0x298>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d004      	beq.n	8002076 <HAL_ADC_Init+0x112>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a63      	ldr	r2, [pc, #396]	@ (8002200 <HAL_ADC_Init+0x29c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d10e      	bne.n	8002094 <HAL_ADC_Init+0x130>
 8002076:	4861      	ldr	r0, [pc, #388]	@ (80021fc <HAL_ADC_Init+0x298>)
 8002078:	f7ff ff3a 	bl	8001ef0 <LL_ADC_IsEnabled>
 800207c:	4604      	mov	r4, r0
 800207e:	4860      	ldr	r0, [pc, #384]	@ (8002200 <HAL_ADC_Init+0x29c>)
 8002080:	f7ff ff36 	bl	8001ef0 <LL_ADC_IsEnabled>
 8002084:	4603      	mov	r3, r0
 8002086:	4323      	orrs	r3, r4
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	e008      	b.n	80020a6 <HAL_ADC_Init+0x142>
 8002094:	485b      	ldr	r0, [pc, #364]	@ (8002204 <HAL_ADC_Init+0x2a0>)
 8002096:	f7ff ff2b 	bl	8001ef0 <LL_ADC_IsEnabled>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d012      	beq.n	80020d0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a53      	ldr	r2, [pc, #332]	@ (80021fc <HAL_ADC_Init+0x298>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d004      	beq.n	80020be <HAL_ADC_Init+0x15a>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a51      	ldr	r2, [pc, #324]	@ (8002200 <HAL_ADC_Init+0x29c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d101      	bne.n	80020c2 <HAL_ADC_Init+0x15e>
 80020be:	4a52      	ldr	r2, [pc, #328]	@ (8002208 <HAL_ADC_Init+0x2a4>)
 80020c0:	e000      	b.n	80020c4 <HAL_ADC_Init+0x160>
 80020c2:	4a52      	ldr	r2, [pc, #328]	@ (800220c <HAL_ADC_Init+0x2a8>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4619      	mov	r1, r3
 80020ca:	4610      	mov	r0, r2
 80020cc:	f7ff fdbe 	bl	8001c4c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80020d0:	f7ff fd76 	bl	8001bc0 <HAL_GetREVID>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80020da:	4293      	cmp	r3, r2
 80020dc:	d914      	bls.n	8002108 <HAL_ADC_Init+0x1a4>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b10      	cmp	r3, #16
 80020e4:	d110      	bne.n	8002108 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	7d5b      	ldrb	r3, [r3, #21]
 80020ea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020f0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020f6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	7f1b      	ldrb	r3, [r3, #28]
 80020fc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80020fe:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002100:	f043 030c 	orr.w	r3, r3, #12
 8002104:	61bb      	str	r3, [r7, #24]
 8002106:	e00d      	b.n	8002124 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7d5b      	ldrb	r3, [r3, #21]
 800210c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002112:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002118:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	7f1b      	ldrb	r3, [r3, #28]
 800211e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	7f1b      	ldrb	r3, [r3, #28]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d106      	bne.n	800213a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	3b01      	subs	r3, #1
 8002132:	045b      	lsls	r3, r3, #17
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002146:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	4b2c      	ldr	r3, [pc, #176]	@ (8002210 <HAL_ADC_Init+0x2ac>)
 800215e:	4013      	ands	r3, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	69b9      	ldr	r1, [r7, #24]
 8002166:	430b      	orrs	r3, r1
 8002168:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fed1 	bl	8001f16 <LL_ADC_REG_IsConversionOngoing>
 8002174:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fede 	bl	8001f3c <LL_ADC_INJ_IsConversionOngoing>
 8002180:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d15f      	bne.n	8002248 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d15c      	bne.n	8002248 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7d1b      	ldrb	r3, [r3, #20]
 8002192:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002214 <HAL_ADC_Init+0x2b0>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	69b9      	ldr	r1, [r7, #24]
 80021ac:	430b      	orrs	r3, r1
 80021ae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d130      	bne.n	800221c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021be:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	4b14      	ldr	r3, [pc, #80]	@ (8002218 <HAL_ADC_Init+0x2b4>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021ce:	3a01      	subs	r2, #1
 80021d0:	0411      	lsls	r1, r2, #16
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021d6:	4311      	orrs	r1, r2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80021dc:	4311      	orrs	r1, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021e2:	430a      	orrs	r2, r1
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	611a      	str	r2, [r3, #16]
 80021f0:	e01c      	b.n	800222c <HAL_ADC_Init+0x2c8>
 80021f2:	bf00      	nop
 80021f4:	24000000 	.word	0x24000000
 80021f8:	053e2d63 	.word	0x053e2d63
 80021fc:	40022000 	.word	0x40022000
 8002200:	40022100 	.word	0x40022100
 8002204:	58026000 	.word	0x58026000
 8002208:	40022300 	.word	0x40022300
 800220c:	58026300 	.word	0x58026300
 8002210:	fff0c003 	.word	0xfff0c003
 8002214:	ffffbffc 	.word	0xffffbffc
 8002218:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 fb8c 	bl	8002960 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d10c      	bne.n	800226a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	f023 010f 	bic.w	r1, r3, #15
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	1e5a      	subs	r2, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	631a      	str	r2, [r3, #48]	@ 0x30
 8002268:	e007      	b.n	800227a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 020f 	bic.w	r2, r2, #15
 8002278:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227e:	f023 0303 	bic.w	r3, r3, #3
 8002282:	f043 0201 	orr.w	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	655a      	str	r2, [r3, #84]	@ 0x54
 800228a:	e007      	b.n	800229c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002290:	f043 0210 	orr.w	r2, r3, #16
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800229c:	7ffb      	ldrb	r3, [r7, #31]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3724      	adds	r7, #36	@ 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd90      	pop	{r4, r7, pc}
 80022a6:	bf00      	nop

080022a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b0a1      	sub	sp, #132	@ 0x84
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4a65      	ldr	r2, [pc, #404]	@ (8002458 <HAL_ADC_ConfigChannel+0x1b0>)
 80022c2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d101      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x2a>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e32e      	b.n	8002930 <HAL_ADC_ConfigChannel+0x688>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fe19 	bl	8001f16 <LL_ADC_REG_IsConversionOngoing>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 8313 	bne.w	8002912 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db2c      	blt.n	800234e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d108      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x6a>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	0e9b      	lsrs	r3, r3, #26
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	2201      	movs	r2, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	e016      	b.n	8002340 <HAL_ADC_ConfigChannel+0x98>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002320:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002322:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002324:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800232a:	2320      	movs	r3, #32
 800232c:	e003      	b.n	8002336 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800232e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	2201      	movs	r2, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	69d1      	ldr	r1, [r2, #28]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	430b      	orrs	r3, r1
 800234c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6859      	ldr	r1, [r3, #4]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	f7ff fcfe 	bl	8001d5c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fdd6 	bl	8001f16 <LL_ADC_REG_IsConversionOngoing>
 800236a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fde3 	bl	8001f3c <LL_ADC_INJ_IsConversionOngoing>
 8002376:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002378:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800237a:	2b00      	cmp	r3, #0
 800237c:	f040 80b8 	bne.w	80024f0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002380:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002382:	2b00      	cmp	r3, #0
 8002384:	f040 80b4 	bne.w	80024f0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	6819      	ldr	r1, [r3, #0]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	461a      	mov	r2, r3
 8002396:	f7ff fd0d 	bl	8001db4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800239a:	4b30      	ldr	r3, [pc, #192]	@ (800245c <HAL_ADC_ConfigChannel+0x1b4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80023a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023a6:	d10b      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x118>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	089b      	lsrs	r3, r3, #2
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	e01d      	b.n	80023fc <HAL_ADC_ConfigChannel+0x154>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f003 0310 	and.w	r3, r3, #16
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10b      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x13e>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	e00a      	b.n	80023fc <HAL_ADC_ConfigChannel+0x154>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	089b      	lsrs	r3, r3, #2
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b04      	cmp	r3, #4
 8002404:	d02c      	beq.n	8002460 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6919      	ldr	r1, [r3, #16]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002414:	f7ff fc4e 	bl	8001cb4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	6919      	ldr	r1, [r3, #16]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	7e5b      	ldrb	r3, [r3, #25]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d102      	bne.n	800242e <HAL_ADC_ConfigChannel+0x186>
 8002428:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800242c:	e000      	b.n	8002430 <HAL_ADC_ConfigChannel+0x188>
 800242e:	2300      	movs	r3, #0
 8002430:	461a      	mov	r2, r3
 8002432:	f7ff fc78 	bl	8001d26 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6919      	ldr	r1, [r3, #16]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	7e1b      	ldrb	r3, [r3, #24]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d102      	bne.n	800244c <HAL_ADC_ConfigChannel+0x1a4>
 8002446:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800244a:	e000      	b.n	800244e <HAL_ADC_ConfigChannel+0x1a6>
 800244c:	2300      	movs	r3, #0
 800244e:	461a      	mov	r2, r3
 8002450:	f7ff fc50 	bl	8001cf4 <LL_ADC_SetDataRightShift>
 8002454:	e04c      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x248>
 8002456:	bf00      	nop
 8002458:	47ff0000 	.word	0x47ff0000
 800245c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002466:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	069b      	lsls	r3, r3, #26
 8002470:	429a      	cmp	r2, r3
 8002472:	d107      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002482:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800248a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	069b      	lsls	r3, r3, #26
 8002494:	429a      	cmp	r2, r3
 8002496:	d107      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80024a6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	069b      	lsls	r3, r3, #26
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d107      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80024ca:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	069b      	lsls	r3, r3, #26
 80024dc:	429a      	cmp	r2, r3
 80024de:	d107      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80024ee:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fcfb 	bl	8001ef0 <LL_ADC_IsEnabled>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f040 8211 	bne.w	8002924 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6819      	ldr	r1, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	461a      	mov	r2, r3
 8002510:	f7ff fc7c 	bl	8001e0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4aa1      	ldr	r2, [pc, #644]	@ (80027a0 <HAL_ADC_ConfigChannel+0x4f8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	f040 812e 	bne.w	800277c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10b      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x2a0>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0e9b      	lsrs	r3, r3, #26
 8002536:	3301      	adds	r3, #1
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	2b09      	cmp	r3, #9
 800253e:	bf94      	ite	ls
 8002540:	2301      	movls	r3, #1
 8002542:	2300      	movhi	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	e019      	b.n	800257c <HAL_ADC_ConfigChannel+0x2d4>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002558:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800255a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002560:	2320      	movs	r3, #32
 8002562:	e003      	b.n	800256c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002564:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	3301      	adds	r3, #1
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2b09      	cmp	r3, #9
 8002574:	bf94      	ite	ls
 8002576:	2301      	movls	r3, #1
 8002578:	2300      	movhi	r3, #0
 800257a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800257c:	2b00      	cmp	r3, #0
 800257e:	d079      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002588:	2b00      	cmp	r3, #0
 800258a:	d107      	bne.n	800259c <HAL_ADC_ConfigChannel+0x2f4>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	0e9b      	lsrs	r3, r3, #26
 8002592:	3301      	adds	r3, #1
 8002594:	069b      	lsls	r3, r3, #26
 8002596:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800259a:	e015      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x320>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80025aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025ac:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80025ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80025b4:	2320      	movs	r3, #32
 80025b6:	e003      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80025b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	3301      	adds	r3, #1
 80025c2:	069b      	lsls	r3, r3, #26
 80025c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d109      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x340>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0e9b      	lsrs	r3, r3, #26
 80025da:	3301      	adds	r3, #1
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	2101      	movs	r1, #1
 80025e2:	fa01 f303 	lsl.w	r3, r1, r3
 80025e6:	e017      	b.n	8002618 <HAL_ADC_ConfigChannel+0x370>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80025f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025f8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80025fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002600:	2320      	movs	r3, #32
 8002602:	e003      	b.n	800260c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002604:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	3301      	adds	r3, #1
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	2101      	movs	r1, #1
 8002614:	fa01 f303 	lsl.w	r3, r1, r3
 8002618:	ea42 0103 	orr.w	r1, r2, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10a      	bne.n	800263e <HAL_ADC_ConfigChannel+0x396>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	0e9b      	lsrs	r3, r3, #26
 800262e:	3301      	adds	r3, #1
 8002630:	f003 021f 	and.w	r2, r3, #31
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	051b      	lsls	r3, r3, #20
 800263c:	e018      	b.n	8002670 <HAL_ADC_ConfigChannel+0x3c8>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800264c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002656:	2320      	movs	r3, #32
 8002658:	e003      	b.n	8002662 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800265a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800265c:	fab3 f383 	clz	r3, r3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	3301      	adds	r3, #1
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002670:	430b      	orrs	r3, r1
 8002672:	e07e      	b.n	8002772 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800267c:	2b00      	cmp	r3, #0
 800267e:	d107      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x3e8>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0e9b      	lsrs	r3, r3, #26
 8002686:	3301      	adds	r3, #1
 8002688:	069b      	lsls	r3, r3, #26
 800268a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800268e:	e015      	b.n	80026bc <HAL_ADC_ConfigChannel+0x414>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80026a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80026a8:	2320      	movs	r3, #32
 80026aa:	e003      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80026ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	3301      	adds	r3, #1
 80026b6:	069b      	lsls	r3, r3, #26
 80026b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d109      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x434>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	0e9b      	lsrs	r3, r3, #26
 80026ce:	3301      	adds	r3, #1
 80026d0:	f003 031f 	and.w	r3, r3, #31
 80026d4:	2101      	movs	r1, #1
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	e017      	b.n	800270c <HAL_ADC_ConfigChannel+0x464>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	fa93 f3a3 	rbit	r3, r3
 80026e8:	61bb      	str	r3, [r7, #24]
  return result;
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80026f4:	2320      	movs	r3, #32
 80026f6:	e003      	b.n	8002700 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	3301      	adds	r3, #1
 8002702:	f003 031f 	and.w	r3, r3, #31
 8002706:	2101      	movs	r1, #1
 8002708:	fa01 f303 	lsl.w	r3, r1, r3
 800270c:	ea42 0103 	orr.w	r1, r2, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10d      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x490>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	0e9b      	lsrs	r3, r3, #26
 8002722:	3301      	adds	r3, #1
 8002724:	f003 021f 	and.w	r2, r3, #31
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	3b1e      	subs	r3, #30
 8002730:	051b      	lsls	r3, r3, #20
 8002732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002736:	e01b      	b.n	8002770 <HAL_ADC_ConfigChannel+0x4c8>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	fa93 f3a3 	rbit	r3, r3
 8002744:	60fb      	str	r3, [r7, #12]
  return result;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002750:	2320      	movs	r3, #32
 8002752:	e003      	b.n	800275c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	3301      	adds	r3, #1
 800275e:	f003 021f 	and.w	r2, r3, #31
 8002762:	4613      	mov	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4413      	add	r3, r2
 8002768:	3b1e      	subs	r3, #30
 800276a:	051b      	lsls	r3, r3, #20
 800276c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002770:	430b      	orrs	r3, r1
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	6892      	ldr	r2, [r2, #8]
 8002776:	4619      	mov	r1, r3
 8002778:	f7ff fb1c 	bl	8001db4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	f280 80cf 	bge.w	8002924 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a06      	ldr	r2, [pc, #24]	@ (80027a4 <HAL_ADC_ConfigChannel+0x4fc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d004      	beq.n	800279a <HAL_ADC_ConfigChannel+0x4f2>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a04      	ldr	r2, [pc, #16]	@ (80027a8 <HAL_ADC_ConfigChannel+0x500>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d10a      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x508>
 800279a:	4b04      	ldr	r3, [pc, #16]	@ (80027ac <HAL_ADC_ConfigChannel+0x504>)
 800279c:	e009      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x50a>
 800279e:	bf00      	nop
 80027a0:	47ff0000 	.word	0x47ff0000
 80027a4:	40022000 	.word	0x40022000
 80027a8:	40022100 	.word	0x40022100
 80027ac:	40022300 	.word	0x40022300
 80027b0:	4b61      	ldr	r3, [pc, #388]	@ (8002938 <HAL_ADC_ConfigChannel+0x690>)
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fa70 	bl	8001c98 <LL_ADC_GetCommonPathInternalCh>
 80027b8:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a5f      	ldr	r2, [pc, #380]	@ (800293c <HAL_ADC_ConfigChannel+0x694>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d004      	beq.n	80027ce <HAL_ADC_ConfigChannel+0x526>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002940 <HAL_ADC_ConfigChannel+0x698>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d10e      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x544>
 80027ce:	485b      	ldr	r0, [pc, #364]	@ (800293c <HAL_ADC_ConfigChannel+0x694>)
 80027d0:	f7ff fb8e 	bl	8001ef0 <LL_ADC_IsEnabled>
 80027d4:	4604      	mov	r4, r0
 80027d6:	485a      	ldr	r0, [pc, #360]	@ (8002940 <HAL_ADC_ConfigChannel+0x698>)
 80027d8:	f7ff fb8a 	bl	8001ef0 <LL_ADC_IsEnabled>
 80027dc:	4603      	mov	r3, r0
 80027de:	4323      	orrs	r3, r4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	e008      	b.n	80027fe <HAL_ADC_ConfigChannel+0x556>
 80027ec:	4855      	ldr	r0, [pc, #340]	@ (8002944 <HAL_ADC_ConfigChannel+0x69c>)
 80027ee:	f7ff fb7f 	bl	8001ef0 <LL_ADC_IsEnabled>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	bf0c      	ite	eq
 80027f8:	2301      	moveq	r3, #1
 80027fa:	2300      	movne	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d07d      	beq.n	80028fe <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a50      	ldr	r2, [pc, #320]	@ (8002948 <HAL_ADC_ConfigChannel+0x6a0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d130      	bne.n	800286e <HAL_ADC_ConfigChannel+0x5c6>
 800280c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800280e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d12b      	bne.n	800286e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a4a      	ldr	r2, [pc, #296]	@ (8002944 <HAL_ADC_ConfigChannel+0x69c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	f040 8081 	bne.w	8002924 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a45      	ldr	r2, [pc, #276]	@ (800293c <HAL_ADC_ConfigChannel+0x694>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d004      	beq.n	8002836 <HAL_ADC_ConfigChannel+0x58e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a43      	ldr	r2, [pc, #268]	@ (8002940 <HAL_ADC_ConfigChannel+0x698>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d101      	bne.n	800283a <HAL_ADC_ConfigChannel+0x592>
 8002836:	4a45      	ldr	r2, [pc, #276]	@ (800294c <HAL_ADC_ConfigChannel+0x6a4>)
 8002838:	e000      	b.n	800283c <HAL_ADC_ConfigChannel+0x594>
 800283a:	4a3f      	ldr	r2, [pc, #252]	@ (8002938 <HAL_ADC_ConfigChannel+0x690>)
 800283c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800283e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002842:	4619      	mov	r1, r3
 8002844:	4610      	mov	r0, r2
 8002846:	f7ff fa14 	bl	8001c72 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800284a:	4b41      	ldr	r3, [pc, #260]	@ (8002950 <HAL_ADC_ConfigChannel+0x6a8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	099b      	lsrs	r3, r3, #6
 8002850:	4a40      	ldr	r2, [pc, #256]	@ (8002954 <HAL_ADC_ConfigChannel+0x6ac>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	099b      	lsrs	r3, r3, #6
 8002858:	3301      	adds	r3, #1
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800285e:	e002      	b.n	8002866 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	3b01      	subs	r3, #1
 8002864:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f9      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800286c:	e05a      	b.n	8002924 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a39      	ldr	r2, [pc, #228]	@ (8002958 <HAL_ADC_ConfigChannel+0x6b0>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d11e      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x60e>
 8002878:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800287a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d119      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a2f      	ldr	r2, [pc, #188]	@ (8002944 <HAL_ADC_ConfigChannel+0x69c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d14b      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a2a      	ldr	r2, [pc, #168]	@ (800293c <HAL_ADC_ConfigChannel+0x694>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d004      	beq.n	80028a0 <HAL_ADC_ConfigChannel+0x5f8>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a29      	ldr	r2, [pc, #164]	@ (8002940 <HAL_ADC_ConfigChannel+0x698>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x5fc>
 80028a0:	4a2a      	ldr	r2, [pc, #168]	@ (800294c <HAL_ADC_ConfigChannel+0x6a4>)
 80028a2:	e000      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x5fe>
 80028a4:	4a24      	ldr	r2, [pc, #144]	@ (8002938 <HAL_ADC_ConfigChannel+0x690>)
 80028a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ac:	4619      	mov	r1, r3
 80028ae:	4610      	mov	r0, r2
 80028b0:	f7ff f9df 	bl	8001c72 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028b4:	e036      	b.n	8002924 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a28      	ldr	r2, [pc, #160]	@ (800295c <HAL_ADC_ConfigChannel+0x6b4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d131      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x67c>
 80028c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d12c      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002944 <HAL_ADC_ConfigChannel+0x69c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d127      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a18      	ldr	r2, [pc, #96]	@ (800293c <HAL_ADC_ConfigChannel+0x694>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d004      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x640>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a17      	ldr	r2, [pc, #92]	@ (8002940 <HAL_ADC_ConfigChannel+0x698>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x644>
 80028e8:	4a18      	ldr	r2, [pc, #96]	@ (800294c <HAL_ADC_ConfigChannel+0x6a4>)
 80028ea:	e000      	b.n	80028ee <HAL_ADC_ConfigChannel+0x646>
 80028ec:	4a12      	ldr	r2, [pc, #72]	@ (8002938 <HAL_ADC_ConfigChannel+0x690>)
 80028ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028f4:	4619      	mov	r1, r3
 80028f6:	4610      	mov	r0, r2
 80028f8:	f7ff f9bb 	bl	8001c72 <LL_ADC_SetCommonPathInternalCh>
 80028fc:	e012      	b.n	8002924 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002902:	f043 0220 	orr.w	r2, r3, #32
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002910:	e008      	b.n	8002924 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002916:	f043 0220 	orr.w	r2, r3, #32
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800292c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002930:	4618      	mov	r0, r3
 8002932:	3784      	adds	r7, #132	@ 0x84
 8002934:	46bd      	mov	sp, r7
 8002936:	bd90      	pop	{r4, r7, pc}
 8002938:	58026300 	.word	0x58026300
 800293c:	40022000 	.word	0x40022000
 8002940:	40022100 	.word	0x40022100
 8002944:	58026000 	.word	0x58026000
 8002948:	cb840000 	.word	0xcb840000
 800294c:	40022300 	.word	0x40022300
 8002950:	24000000 	.word	0x24000000
 8002954:	053e2d63 	.word	0x053e2d63
 8002958:	c7520000 	.word	0xc7520000
 800295c:	cfb80000 	.word	0xcfb80000

08002960 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a7a      	ldr	r2, [pc, #488]	@ (8002b58 <ADC_ConfigureBoostMode+0x1f8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <ADC_ConfigureBoostMode+0x1c>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a79      	ldr	r2, [pc, #484]	@ (8002b5c <ADC_ConfigureBoostMode+0x1fc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d109      	bne.n	8002990 <ADC_ConfigureBoostMode+0x30>
 800297c:	4b78      	ldr	r3, [pc, #480]	@ (8002b60 <ADC_ConfigureBoostMode+0x200>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf14      	ite	ne
 8002988:	2301      	movne	r3, #1
 800298a:	2300      	moveq	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	e008      	b.n	80029a2 <ADC_ConfigureBoostMode+0x42>
 8002990:	4b74      	ldr	r3, [pc, #464]	@ (8002b64 <ADC_ConfigureBoostMode+0x204>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002998:	2b00      	cmp	r3, #0
 800299a:	bf14      	ite	ne
 800299c:	2301      	movne	r3, #1
 800299e:	2300      	moveq	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d01c      	beq.n	80029e0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80029a6:	f003 fad5 	bl	8005f54 <HAL_RCC_GetHCLKFreq>
 80029aa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80029b4:	d010      	beq.n	80029d8 <ADC_ConfigureBoostMode+0x78>
 80029b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80029ba:	d873      	bhi.n	8002aa4 <ADC_ConfigureBoostMode+0x144>
 80029bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029c0:	d002      	beq.n	80029c8 <ADC_ConfigureBoostMode+0x68>
 80029c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029c6:	d16d      	bne.n	8002aa4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	0c1b      	lsrs	r3, r3, #16
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d4:	60fb      	str	r3, [r7, #12]
        break;
 80029d6:	e068      	b.n	8002aaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	089b      	lsrs	r3, r3, #2
 80029dc:	60fb      	str	r3, [r7, #12]
        break;
 80029de:	e064      	b.n	8002aaa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80029e0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80029e4:	f04f 0100 	mov.w	r1, #0
 80029e8:	f004 fd1a 	bl	8007420 <HAL_RCCEx_GetPeriphCLKFreq>
 80029ec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80029f6:	d051      	beq.n	8002a9c <ADC_ConfigureBoostMode+0x13c>
 80029f8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80029fc:	d854      	bhi.n	8002aa8 <ADC_ConfigureBoostMode+0x148>
 80029fe:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002a02:	d047      	beq.n	8002a94 <ADC_ConfigureBoostMode+0x134>
 8002a04:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002a08:	d84e      	bhi.n	8002aa8 <ADC_ConfigureBoostMode+0x148>
 8002a0a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002a0e:	d03d      	beq.n	8002a8c <ADC_ConfigureBoostMode+0x12c>
 8002a10:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002a14:	d848      	bhi.n	8002aa8 <ADC_ConfigureBoostMode+0x148>
 8002a16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a1a:	d033      	beq.n	8002a84 <ADC_ConfigureBoostMode+0x124>
 8002a1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a20:	d842      	bhi.n	8002aa8 <ADC_ConfigureBoostMode+0x148>
 8002a22:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002a26:	d029      	beq.n	8002a7c <ADC_ConfigureBoostMode+0x11c>
 8002a28:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002a2c:	d83c      	bhi.n	8002aa8 <ADC_ConfigureBoostMode+0x148>
 8002a2e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002a32:	d01a      	beq.n	8002a6a <ADC_ConfigureBoostMode+0x10a>
 8002a34:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002a38:	d836      	bhi.n	8002aa8 <ADC_ConfigureBoostMode+0x148>
 8002a3a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a3e:	d014      	beq.n	8002a6a <ADC_ConfigureBoostMode+0x10a>
 8002a40:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a44:	d830      	bhi.n	8002aa8 <ADC_ConfigureBoostMode+0x148>
 8002a46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a4a:	d00e      	beq.n	8002a6a <ADC_ConfigureBoostMode+0x10a>
 8002a4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a50:	d82a      	bhi.n	8002aa8 <ADC_ConfigureBoostMode+0x148>
 8002a52:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a56:	d008      	beq.n	8002a6a <ADC_ConfigureBoostMode+0x10a>
 8002a58:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a5c:	d824      	bhi.n	8002aa8 <ADC_ConfigureBoostMode+0x148>
 8002a5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a62:	d002      	beq.n	8002a6a <ADC_ConfigureBoostMode+0x10a>
 8002a64:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a68:	d11e      	bne.n	8002aa8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	0c9b      	lsrs	r3, r3, #18
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a78:	60fb      	str	r3, [r7, #12]
        break;
 8002a7a:	e016      	b.n	8002aaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	60fb      	str	r3, [r7, #12]
        break;
 8002a82:	e012      	b.n	8002aaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	60fb      	str	r3, [r7, #12]
        break;
 8002a8a:	e00e      	b.n	8002aaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	099b      	lsrs	r3, r3, #6
 8002a90:	60fb      	str	r3, [r7, #12]
        break;
 8002a92:	e00a      	b.n	8002aaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	09db      	lsrs	r3, r3, #7
 8002a98:	60fb      	str	r3, [r7, #12]
        break;
 8002a9a:	e006      	b.n	8002aaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	0a1b      	lsrs	r3, r3, #8
 8002aa0:	60fb      	str	r3, [r7, #12]
        break;
 8002aa2:	e002      	b.n	8002aaa <ADC_ConfigureBoostMode+0x14a>
        break;
 8002aa4:	bf00      	nop
 8002aa6:	e000      	b.n	8002aaa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002aa8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002aaa:	f7ff f889 	bl	8001bc0 <HAL_GetREVID>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d815      	bhi.n	8002ae4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4a2b      	ldr	r2, [pc, #172]	@ (8002b68 <ADC_ConfigureBoostMode+0x208>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d908      	bls.n	8002ad2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ace:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002ad0:	e03e      	b.n	8002b50 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ae0:	609a      	str	r2, [r3, #8]
}
 8002ae2:	e035      	b.n	8002b50 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4a1f      	ldr	r2, [pc, #124]	@ (8002b6c <ADC_ConfigureBoostMode+0x20c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d808      	bhi.n	8002b04 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002b00:	609a      	str	r2, [r3, #8]
}
 8002b02:	e025      	b.n	8002b50 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a1a      	ldr	r2, [pc, #104]	@ (8002b70 <ADC_ConfigureBoostMode+0x210>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d80a      	bhi.n	8002b22 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b1e:	609a      	str	r2, [r3, #8]
}
 8002b20:	e016      	b.n	8002b50 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4a13      	ldr	r2, [pc, #76]	@ (8002b74 <ADC_ConfigureBoostMode+0x214>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d80a      	bhi.n	8002b40 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b3c:	609a      	str	r2, [r3, #8]
}
 8002b3e:	e007      	b.n	8002b50 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002b4e:	609a      	str	r2, [r3, #8]
}
 8002b50:	bf00      	nop
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40022000 	.word	0x40022000
 8002b5c:	40022100 	.word	0x40022100
 8002b60:	40022300 	.word	0x40022300
 8002b64:	58026300 	.word	0x58026300
 8002b68:	01312d00 	.word	0x01312d00
 8002b6c:	005f5e10 	.word	0x005f5e10
 8002b70:	00bebc20 	.word	0x00bebc20
 8002b74:	017d7840 	.word	0x017d7840

08002b78 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d102      	bne.n	8002b94 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	77fb      	strb	r3, [r7, #31]
 8002b92:	e10e      	b.n	8002db2 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ba2:	d102      	bne.n	8002baa <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	77fb      	strb	r3, [r7, #31]
 8002ba8:	e103      	b.n	8002db2 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7fe fced 	bl	80015a4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8002bde:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8002be4:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 8002bea:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8002bf0:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4b6e      	ldr	r3, [pc, #440]	@ (8002dbc <HAL_COMP_Init+0x244>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	6979      	ldr	r1, [r7, #20]
 8002c0a:	430b      	orrs	r3, r1
 8002c0c:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b10      	cmp	r3, #16
 8002c14:	d108      	bne.n	8002c28 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 0210 	orr.w	r2, r2, #16
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	e007      	b.n	8002c38 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0210 	bic.w	r2, r2, #16
 8002c36:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d016      	beq.n	8002c74 <HAL_COMP_Init+0xfc>
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d013      	beq.n	8002c74 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c4c:	4b5c      	ldr	r3, [pc, #368]	@ (8002dc0 <HAL_COMP_Init+0x248>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	099b      	lsrs	r3, r3, #6
 8002c52:	4a5c      	ldr	r2, [pc, #368]	@ (8002dc4 <HAL_COMP_Init+0x24c>)
 8002c54:	fba2 2303 	umull	r2, r3, r2, r3
 8002c58:	099b      	lsrs	r3, r3, #6
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 8002c66:	e002      	b.n	8002c6e <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1f9      	bne.n	8002c68 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a53      	ldr	r2, [pc, #332]	@ (8002dc8 <HAL_COMP_Init+0x250>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d102      	bne.n	8002c84 <HAL_COMP_Init+0x10c>
 8002c7e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002c82:	e001      	b.n	8002c88 <HAL_COMP_Init+0x110>
 8002c84:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c88:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d06d      	beq.n	8002d72 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d008      	beq.n	8002cb4 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 8002ca2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]
 8002cb2:	e008      	b.n	8002cc6 <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8002cb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8002cd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	604b      	str	r3, [r1, #4]
 8002ce2:	e008      	b.n	8002cf6 <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8002ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 8002cf6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8002d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d10:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002d14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8002d20:	e00a      	b.n	8002d38 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8002d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d26:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d32:	4013      	ands	r3, r2
 8002d34:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8002d44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d48:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002d4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8002d58:	e021      	b.n	8002d9e <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 8002d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d5e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8002d70:	e015      	b.n	8002d9e <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8002d72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d76:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d82:	4013      	ands	r3, r2
 8002d84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8002d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d8c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d98:	4013      	ands	r3, r2
 8002d9a:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d103      	bne.n	8002db2 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 8002db2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3720      	adds	r7, #32
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	f0e8cce1 	.word	0xf0e8cce1
 8002dc0:	24000000 	.word	0x24000000
 8002dc4:	053e2d63 	.word	0x053e2d63
 8002dc8:	5800380c 	.word	0x5800380c

08002dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <__NVIC_SetPriorityGrouping+0x40>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002de8:	4013      	ands	r3, r2
 8002dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002df4:	4b06      	ldr	r3, [pc, #24]	@ (8002e10 <__NVIC_SetPriorityGrouping+0x44>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dfa:	4a04      	ldr	r2, [pc, #16]	@ (8002e0c <__NVIC_SetPriorityGrouping+0x40>)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	60d3      	str	r3, [r2, #12]
}
 8002e00:	bf00      	nop
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000ed00 	.word	0xe000ed00
 8002e10:	05fa0000 	.word	0x05fa0000

08002e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e18:	4b04      	ldr	r3, [pc, #16]	@ (8002e2c <__NVIC_GetPriorityGrouping+0x18>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	0a1b      	lsrs	r3, r3, #8
 8002e1e:	f003 0307 	and.w	r3, r3, #7
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	db0b      	blt.n	8002e5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	f003 021f 	and.w	r2, r3, #31
 8002e48:	4907      	ldr	r1, [pc, #28]	@ (8002e68 <__NVIC_EnableIRQ+0x38>)
 8002e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	2001      	movs	r0, #1
 8002e52:	fa00 f202 	lsl.w	r2, r0, r2
 8002e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	e000e100 	.word	0xe000e100

08002e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	6039      	str	r1, [r7, #0]
 8002e76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	db0a      	blt.n	8002e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	490c      	ldr	r1, [pc, #48]	@ (8002eb8 <__NVIC_SetPriority+0x4c>)
 8002e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e8a:	0112      	lsls	r2, r2, #4
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	440b      	add	r3, r1
 8002e90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e94:	e00a      	b.n	8002eac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	4908      	ldr	r1, [pc, #32]	@ (8002ebc <__NVIC_SetPriority+0x50>)
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	3b04      	subs	r3, #4
 8002ea4:	0112      	lsls	r2, r2, #4
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	761a      	strb	r2, [r3, #24]
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000e100 	.word	0xe000e100
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	@ 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f1c3 0307 	rsb	r3, r3, #7
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	bf28      	it	cs
 8002ede:	2304      	movcs	r3, #4
 8002ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	2b06      	cmp	r3, #6
 8002ee8:	d902      	bls.n	8002ef0 <NVIC_EncodePriority+0x30>
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3b03      	subs	r3, #3
 8002eee:	e000      	b.n	8002ef2 <NVIC_EncodePriority+0x32>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43da      	mvns	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	401a      	ands	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f08:	f04f 31ff 	mov.w	r1, #4294967295
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f12:	43d9      	mvns	r1, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f18:	4313      	orrs	r3, r2
         );
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3724      	adds	r7, #36	@ 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f38:	d301      	bcc.n	8002f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e00f      	b.n	8002f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f68 <SysTick_Config+0x40>)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f46:	210f      	movs	r1, #15
 8002f48:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4c:	f7ff ff8e 	bl	8002e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f50:	4b05      	ldr	r3, [pc, #20]	@ (8002f68 <SysTick_Config+0x40>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f56:	4b04      	ldr	r3, [pc, #16]	@ (8002f68 <SysTick_Config+0x40>)
 8002f58:	2207      	movs	r2, #7
 8002f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	e000e010 	.word	0xe000e010

08002f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff ff29 	bl	8002dcc <__NVIC_SetPriorityGrouping>
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	4603      	mov	r3, r0
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f90:	f7ff ff40 	bl	8002e14 <__NVIC_GetPriorityGrouping>
 8002f94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	6978      	ldr	r0, [r7, #20]
 8002f9c:	f7ff ff90 	bl	8002ec0 <NVIC_EncodePriority>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff5f 	bl	8002e6c <__NVIC_SetPriority>
}
 8002fae:	bf00      	nop
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff33 	bl	8002e30 <__NVIC_EnableIRQ>
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff ffa4 	bl	8002f28 <SysTick_Config>
 8002fe0:	4603      	mov	r3, r0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e014      	b.n	8003026 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	791b      	ldrb	r3, [r3, #4]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d105      	bne.n	8003012 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7fe fb57 	bl	80016c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2202      	movs	r2, #2
 8003016:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	@ 0x28
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <HAL_DAC_ConfigChannel+0x1e>
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e12a      	b.n	80032a8 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	795b      	ldrb	r3, [r3, #5]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_DAC_ConfigChannel+0x2e>
 800305a:	2302      	movs	r3, #2
 800305c:	e124      	b.n	80032a8 <HAL_DAC_ConfigChannel+0x278>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2202      	movs	r2, #2
 8003068:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b04      	cmp	r3, #4
 8003070:	d17a      	bne.n	8003168 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003072:	f7fe fd99 	bl	8001ba8 <HAL_GetTick>
 8003076:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d13d      	bne.n	80030fa <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800307e:	e018      	b.n	80030b2 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003080:	f7fe fd92 	bl	8001ba8 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d911      	bls.n	80030b2 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003094:	4b86      	ldr	r3, [pc, #536]	@ (80032b0 <HAL_DAC_ConfigChannel+0x280>)
 8003096:	4013      	ands	r3, r2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	f043 0208 	orr.w	r2, r3, #8
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2203      	movs	r2, #3
 80030ac:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e0fa      	b.n	80032a8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030b8:	4b7d      	ldr	r3, [pc, #500]	@ (80032b0 <HAL_DAC_ConfigChannel+0x280>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1df      	bne.n	8003080 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	6992      	ldr	r2, [r2, #24]
 80030c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80030ca:	e020      	b.n	800310e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80030cc:	f7fe fd6c 	bl	8001ba8 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d90f      	bls.n	80030fa <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	da0a      	bge.n	80030fa <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f043 0208 	orr.w	r2, r3, #8
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2203      	movs	r2, #3
 80030f4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e0d6      	b.n	80032a8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003100:	2b00      	cmp	r3, #0
 8003102:	dbe3      	blt.n	80030cc <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	6992      	ldr	r2, [r2, #24]
 800310c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800311e:	fa01 f303 	lsl.w	r3, r1, r3
 8003122:	43db      	mvns	r3, r3
 8003124:	ea02 0103 	and.w	r1, r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	69da      	ldr	r2, [r3, #28]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f003 0310 	and.w	r3, r3, #16
 8003132:	409a      	lsls	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	21ff      	movs	r1, #255	@ 0xff
 800314a:	fa01 f303 	lsl.w	r3, r1, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	ea02 0103 	and.w	r1, r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	6a1a      	ldr	r2, [r3, #32]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	409a      	lsls	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d11d      	bne.n	80031ac <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003176:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f003 0310 	and.w	r3, r3, #16
 800317e:	221f      	movs	r2, #31
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	2207      	movs	r2, #7
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d102      	bne.n	80031d6 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80031d0:	2300      	movs	r3, #0
 80031d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80031d4:	e00f      	b.n	80031f6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d102      	bne.n	80031e4 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80031de:	2301      	movs	r3, #1
 80031e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80031e2:	e008      	b.n	80031f6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d102      	bne.n	80031f2 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80031ec:	2301      	movs	r3, #1
 80031ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80031f0:	e001      	b.n	80031f6 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	4313      	orrs	r3, r2
 8003200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6819      	ldr	r1, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43da      	mvns	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	400a      	ands	r2, r1
 800323c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f003 0310 	and.w	r3, r3, #16
 800324c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6819      	ldr	r1, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	22c0      	movs	r2, #192	@ 0xc0
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	43da      	mvns	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	400a      	ands	r2, r1
 8003296:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80032a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3728      	adds	r7, #40	@ 0x28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20008000 	.word	0x20008000

080032b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80032bc:	f7fe fc74 	bl	8001ba8 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e316      	b.n	80038fa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a66      	ldr	r2, [pc, #408]	@ (800346c <HAL_DMA_Init+0x1b8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d04a      	beq.n	800336c <HAL_DMA_Init+0xb8>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a65      	ldr	r2, [pc, #404]	@ (8003470 <HAL_DMA_Init+0x1bc>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d045      	beq.n	800336c <HAL_DMA_Init+0xb8>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a63      	ldr	r2, [pc, #396]	@ (8003474 <HAL_DMA_Init+0x1c0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d040      	beq.n	800336c <HAL_DMA_Init+0xb8>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a62      	ldr	r2, [pc, #392]	@ (8003478 <HAL_DMA_Init+0x1c4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d03b      	beq.n	800336c <HAL_DMA_Init+0xb8>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a60      	ldr	r2, [pc, #384]	@ (800347c <HAL_DMA_Init+0x1c8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d036      	beq.n	800336c <HAL_DMA_Init+0xb8>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a5f      	ldr	r2, [pc, #380]	@ (8003480 <HAL_DMA_Init+0x1cc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d031      	beq.n	800336c <HAL_DMA_Init+0xb8>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a5d      	ldr	r2, [pc, #372]	@ (8003484 <HAL_DMA_Init+0x1d0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d02c      	beq.n	800336c <HAL_DMA_Init+0xb8>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a5c      	ldr	r2, [pc, #368]	@ (8003488 <HAL_DMA_Init+0x1d4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d027      	beq.n	800336c <HAL_DMA_Init+0xb8>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a5a      	ldr	r2, [pc, #360]	@ (800348c <HAL_DMA_Init+0x1d8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d022      	beq.n	800336c <HAL_DMA_Init+0xb8>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a59      	ldr	r2, [pc, #356]	@ (8003490 <HAL_DMA_Init+0x1dc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d01d      	beq.n	800336c <HAL_DMA_Init+0xb8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a57      	ldr	r2, [pc, #348]	@ (8003494 <HAL_DMA_Init+0x1e0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d018      	beq.n	800336c <HAL_DMA_Init+0xb8>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a56      	ldr	r2, [pc, #344]	@ (8003498 <HAL_DMA_Init+0x1e4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d013      	beq.n	800336c <HAL_DMA_Init+0xb8>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a54      	ldr	r2, [pc, #336]	@ (800349c <HAL_DMA_Init+0x1e8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00e      	beq.n	800336c <HAL_DMA_Init+0xb8>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a53      	ldr	r2, [pc, #332]	@ (80034a0 <HAL_DMA_Init+0x1ec>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d009      	beq.n	800336c <HAL_DMA_Init+0xb8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a51      	ldr	r2, [pc, #324]	@ (80034a4 <HAL_DMA_Init+0x1f0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <HAL_DMA_Init+0xb8>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a50      	ldr	r2, [pc, #320]	@ (80034a8 <HAL_DMA_Init+0x1f4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d101      	bne.n	8003370 <HAL_DMA_Init+0xbc>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <HAL_DMA_Init+0xbe>
 8003370:	2300      	movs	r3, #0
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 813b 	beq.w	80035ee <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a37      	ldr	r2, [pc, #220]	@ (800346c <HAL_DMA_Init+0x1b8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d04a      	beq.n	8003428 <HAL_DMA_Init+0x174>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a36      	ldr	r2, [pc, #216]	@ (8003470 <HAL_DMA_Init+0x1bc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d045      	beq.n	8003428 <HAL_DMA_Init+0x174>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a34      	ldr	r2, [pc, #208]	@ (8003474 <HAL_DMA_Init+0x1c0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d040      	beq.n	8003428 <HAL_DMA_Init+0x174>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a33      	ldr	r2, [pc, #204]	@ (8003478 <HAL_DMA_Init+0x1c4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d03b      	beq.n	8003428 <HAL_DMA_Init+0x174>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a31      	ldr	r2, [pc, #196]	@ (800347c <HAL_DMA_Init+0x1c8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d036      	beq.n	8003428 <HAL_DMA_Init+0x174>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a30      	ldr	r2, [pc, #192]	@ (8003480 <HAL_DMA_Init+0x1cc>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d031      	beq.n	8003428 <HAL_DMA_Init+0x174>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a2e      	ldr	r2, [pc, #184]	@ (8003484 <HAL_DMA_Init+0x1d0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d02c      	beq.n	8003428 <HAL_DMA_Init+0x174>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a2d      	ldr	r2, [pc, #180]	@ (8003488 <HAL_DMA_Init+0x1d4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d027      	beq.n	8003428 <HAL_DMA_Init+0x174>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a2b      	ldr	r2, [pc, #172]	@ (800348c <HAL_DMA_Init+0x1d8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d022      	beq.n	8003428 <HAL_DMA_Init+0x174>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a2a      	ldr	r2, [pc, #168]	@ (8003490 <HAL_DMA_Init+0x1dc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d01d      	beq.n	8003428 <HAL_DMA_Init+0x174>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a28      	ldr	r2, [pc, #160]	@ (8003494 <HAL_DMA_Init+0x1e0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d018      	beq.n	8003428 <HAL_DMA_Init+0x174>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a27      	ldr	r2, [pc, #156]	@ (8003498 <HAL_DMA_Init+0x1e4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d013      	beq.n	8003428 <HAL_DMA_Init+0x174>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a25      	ldr	r2, [pc, #148]	@ (800349c <HAL_DMA_Init+0x1e8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00e      	beq.n	8003428 <HAL_DMA_Init+0x174>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a24      	ldr	r2, [pc, #144]	@ (80034a0 <HAL_DMA_Init+0x1ec>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d009      	beq.n	8003428 <HAL_DMA_Init+0x174>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a22      	ldr	r2, [pc, #136]	@ (80034a4 <HAL_DMA_Init+0x1f0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d004      	beq.n	8003428 <HAL_DMA_Init+0x174>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a21      	ldr	r2, [pc, #132]	@ (80034a8 <HAL_DMA_Init+0x1f4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d108      	bne.n	800343a <HAL_DMA_Init+0x186>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0201 	bic.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	e007      	b.n	800344a <HAL_DMA_Init+0x196>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0201 	bic.w	r2, r2, #1
 8003448:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800344a:	e02f      	b.n	80034ac <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800344c:	f7fe fbac 	bl	8001ba8 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b05      	cmp	r3, #5
 8003458:	d928      	bls.n	80034ac <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2203      	movs	r2, #3
 8003464:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e246      	b.n	80038fa <HAL_DMA_Init+0x646>
 800346c:	40020010 	.word	0x40020010
 8003470:	40020028 	.word	0x40020028
 8003474:	40020040 	.word	0x40020040
 8003478:	40020058 	.word	0x40020058
 800347c:	40020070 	.word	0x40020070
 8003480:	40020088 	.word	0x40020088
 8003484:	400200a0 	.word	0x400200a0
 8003488:	400200b8 	.word	0x400200b8
 800348c:	40020410 	.word	0x40020410
 8003490:	40020428 	.word	0x40020428
 8003494:	40020440 	.word	0x40020440
 8003498:	40020458 	.word	0x40020458
 800349c:	40020470 	.word	0x40020470
 80034a0:	40020488 	.word	0x40020488
 80034a4:	400204a0 	.word	0x400204a0
 80034a8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1c8      	bne.n	800344c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4b83      	ldr	r3, [pc, #524]	@ (80036d4 <HAL_DMA_Init+0x420>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80034d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034de:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ea:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d107      	bne.n	8003510 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003508:	4313      	orrs	r3, r2
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003510:	4b71      	ldr	r3, [pc, #452]	@ (80036d8 <HAL_DMA_Init+0x424>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4b71      	ldr	r3, [pc, #452]	@ (80036dc <HAL_DMA_Init+0x428>)
 8003516:	4013      	ands	r3, r2
 8003518:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800351c:	d328      	bcc.n	8003570 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b28      	cmp	r3, #40	@ 0x28
 8003524:	d903      	bls.n	800352e <HAL_DMA_Init+0x27a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b2e      	cmp	r3, #46	@ 0x2e
 800352c:	d917      	bls.n	800355e <HAL_DMA_Init+0x2aa>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b3e      	cmp	r3, #62	@ 0x3e
 8003534:	d903      	bls.n	800353e <HAL_DMA_Init+0x28a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b42      	cmp	r3, #66	@ 0x42
 800353c:	d90f      	bls.n	800355e <HAL_DMA_Init+0x2aa>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b46      	cmp	r3, #70	@ 0x46
 8003544:	d903      	bls.n	800354e <HAL_DMA_Init+0x29a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b48      	cmp	r3, #72	@ 0x48
 800354c:	d907      	bls.n	800355e <HAL_DMA_Init+0x2aa>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b4e      	cmp	r3, #78	@ 0x4e
 8003554:	d905      	bls.n	8003562 <HAL_DMA_Init+0x2ae>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b52      	cmp	r3, #82	@ 0x52
 800355c:	d801      	bhi.n	8003562 <HAL_DMA_Init+0x2ae>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <HAL_DMA_Init+0x2b0>
 8003562:	2300      	movs	r3, #0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800356e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f023 0307 	bic.w	r3, r3, #7
 8003586:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	4313      	orrs	r3, r2
 8003590:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	2b04      	cmp	r3, #4
 8003598:	d117      	bne.n	80035ca <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00e      	beq.n	80035ca <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f001 f9b9 	bl	8004924 <DMA_CheckFifoParam>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2240      	movs	r2, #64	@ 0x40
 80035bc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e197      	b.n	80038fa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f001 f8f4 	bl	80047c0 <DMA_CalcBaseAndBitshift>
 80035d8:	4603      	mov	r3, r0
 80035da:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	223f      	movs	r2, #63	@ 0x3f
 80035e6:	409a      	lsls	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	e0cd      	b.n	800378a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a3b      	ldr	r2, [pc, #236]	@ (80036e0 <HAL_DMA_Init+0x42c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d022      	beq.n	800363e <HAL_DMA_Init+0x38a>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a39      	ldr	r2, [pc, #228]	@ (80036e4 <HAL_DMA_Init+0x430>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01d      	beq.n	800363e <HAL_DMA_Init+0x38a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a38      	ldr	r2, [pc, #224]	@ (80036e8 <HAL_DMA_Init+0x434>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d018      	beq.n	800363e <HAL_DMA_Init+0x38a>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a36      	ldr	r2, [pc, #216]	@ (80036ec <HAL_DMA_Init+0x438>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <HAL_DMA_Init+0x38a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a35      	ldr	r2, [pc, #212]	@ (80036f0 <HAL_DMA_Init+0x43c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00e      	beq.n	800363e <HAL_DMA_Init+0x38a>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a33      	ldr	r2, [pc, #204]	@ (80036f4 <HAL_DMA_Init+0x440>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d009      	beq.n	800363e <HAL_DMA_Init+0x38a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a32      	ldr	r2, [pc, #200]	@ (80036f8 <HAL_DMA_Init+0x444>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d004      	beq.n	800363e <HAL_DMA_Init+0x38a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a30      	ldr	r2, [pc, #192]	@ (80036fc <HAL_DMA_Init+0x448>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d101      	bne.n	8003642 <HAL_DMA_Init+0x38e>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <HAL_DMA_Init+0x390>
 8003642:	2300      	movs	r3, #0
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8097 	beq.w	8003778 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a24      	ldr	r2, [pc, #144]	@ (80036e0 <HAL_DMA_Init+0x42c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d021      	beq.n	8003698 <HAL_DMA_Init+0x3e4>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a22      	ldr	r2, [pc, #136]	@ (80036e4 <HAL_DMA_Init+0x430>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01c      	beq.n	8003698 <HAL_DMA_Init+0x3e4>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a21      	ldr	r2, [pc, #132]	@ (80036e8 <HAL_DMA_Init+0x434>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d017      	beq.n	8003698 <HAL_DMA_Init+0x3e4>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a1f      	ldr	r2, [pc, #124]	@ (80036ec <HAL_DMA_Init+0x438>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d012      	beq.n	8003698 <HAL_DMA_Init+0x3e4>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1e      	ldr	r2, [pc, #120]	@ (80036f0 <HAL_DMA_Init+0x43c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00d      	beq.n	8003698 <HAL_DMA_Init+0x3e4>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1c      	ldr	r2, [pc, #112]	@ (80036f4 <HAL_DMA_Init+0x440>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d008      	beq.n	8003698 <HAL_DMA_Init+0x3e4>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1b      	ldr	r2, [pc, #108]	@ (80036f8 <HAL_DMA_Init+0x444>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d003      	beq.n	8003698 <HAL_DMA_Init+0x3e4>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a19      	ldr	r2, [pc, #100]	@ (80036fc <HAL_DMA_Init+0x448>)
 8003696:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4b13      	ldr	r3, [pc, #76]	@ (8003700 <HAL_DMA_Init+0x44c>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b40      	cmp	r3, #64	@ 0x40
 80036be:	d021      	beq.n	8003704 <HAL_DMA_Init+0x450>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b80      	cmp	r3, #128	@ 0x80
 80036c6:	d102      	bne.n	80036ce <HAL_DMA_Init+0x41a>
 80036c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80036cc:	e01b      	b.n	8003706 <HAL_DMA_Init+0x452>
 80036ce:	2300      	movs	r3, #0
 80036d0:	e019      	b.n	8003706 <HAL_DMA_Init+0x452>
 80036d2:	bf00      	nop
 80036d4:	fe10803f 	.word	0xfe10803f
 80036d8:	5c001000 	.word	0x5c001000
 80036dc:	ffff0000 	.word	0xffff0000
 80036e0:	58025408 	.word	0x58025408
 80036e4:	5802541c 	.word	0x5802541c
 80036e8:	58025430 	.word	0x58025430
 80036ec:	58025444 	.word	0x58025444
 80036f0:	58025458 	.word	0x58025458
 80036f4:	5802546c 	.word	0x5802546c
 80036f8:	58025480 	.word	0x58025480
 80036fc:	58025494 	.word	0x58025494
 8003700:	fffe000f 	.word	0xfffe000f
 8003704:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	68d2      	ldr	r2, [r2, #12]
 800370a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800370c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003714:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800371c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003724:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800372c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003734:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	461a      	mov	r2, r3
 800374a:	4b6e      	ldr	r3, [pc, #440]	@ (8003904 <HAL_DMA_Init+0x650>)
 800374c:	4413      	add	r3, r2
 800374e:	4a6e      	ldr	r2, [pc, #440]	@ (8003908 <HAL_DMA_Init+0x654>)
 8003750:	fba2 2303 	umull	r2, r3, r2, r3
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	009a      	lsls	r2, r3, #2
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f001 f82f 	bl	80047c0 <DMA_CalcBaseAndBitshift>
 8003762:	4603      	mov	r3, r0
 8003764:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	2201      	movs	r2, #1
 8003770:	409a      	lsls	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	e008      	b.n	800378a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2240      	movs	r2, #64	@ 0x40
 800377c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2203      	movs	r2, #3
 8003782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e0b7      	b.n	80038fa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a5f      	ldr	r2, [pc, #380]	@ (800390c <HAL_DMA_Init+0x658>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d072      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a5d      	ldr	r2, [pc, #372]	@ (8003910 <HAL_DMA_Init+0x65c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d06d      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a5c      	ldr	r2, [pc, #368]	@ (8003914 <HAL_DMA_Init+0x660>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d068      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a5a      	ldr	r2, [pc, #360]	@ (8003918 <HAL_DMA_Init+0x664>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d063      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a59      	ldr	r2, [pc, #356]	@ (800391c <HAL_DMA_Init+0x668>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d05e      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a57      	ldr	r2, [pc, #348]	@ (8003920 <HAL_DMA_Init+0x66c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d059      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a56      	ldr	r2, [pc, #344]	@ (8003924 <HAL_DMA_Init+0x670>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d054      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a54      	ldr	r2, [pc, #336]	@ (8003928 <HAL_DMA_Init+0x674>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d04f      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a53      	ldr	r2, [pc, #332]	@ (800392c <HAL_DMA_Init+0x678>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d04a      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a51      	ldr	r2, [pc, #324]	@ (8003930 <HAL_DMA_Init+0x67c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d045      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a50      	ldr	r2, [pc, #320]	@ (8003934 <HAL_DMA_Init+0x680>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d040      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a4e      	ldr	r2, [pc, #312]	@ (8003938 <HAL_DMA_Init+0x684>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d03b      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a4d      	ldr	r2, [pc, #308]	@ (800393c <HAL_DMA_Init+0x688>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d036      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a4b      	ldr	r2, [pc, #300]	@ (8003940 <HAL_DMA_Init+0x68c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d031      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a4a      	ldr	r2, [pc, #296]	@ (8003944 <HAL_DMA_Init+0x690>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d02c      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a48      	ldr	r2, [pc, #288]	@ (8003948 <HAL_DMA_Init+0x694>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d027      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a47      	ldr	r2, [pc, #284]	@ (800394c <HAL_DMA_Init+0x698>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d022      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a45      	ldr	r2, [pc, #276]	@ (8003950 <HAL_DMA_Init+0x69c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d01d      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a44      	ldr	r2, [pc, #272]	@ (8003954 <HAL_DMA_Init+0x6a0>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d018      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a42      	ldr	r2, [pc, #264]	@ (8003958 <HAL_DMA_Init+0x6a4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d013      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a41      	ldr	r2, [pc, #260]	@ (800395c <HAL_DMA_Init+0x6a8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00e      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a3f      	ldr	r2, [pc, #252]	@ (8003960 <HAL_DMA_Init+0x6ac>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d009      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a3e      	ldr	r2, [pc, #248]	@ (8003964 <HAL_DMA_Init+0x6b0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d004      	beq.n	800387a <HAL_DMA_Init+0x5c6>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a3c      	ldr	r2, [pc, #240]	@ (8003968 <HAL_DMA_Init+0x6b4>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d101      	bne.n	800387e <HAL_DMA_Init+0x5ca>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <HAL_DMA_Init+0x5cc>
 800387e:	2300      	movs	r3, #0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d032      	beq.n	80038ea <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f001 f8c9 	bl	8004a1c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b80      	cmp	r3, #128	@ 0x80
 8003890:	d102      	bne.n	8003898 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80038ac:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d010      	beq.n	80038d8 <HAL_DMA_Init+0x624>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d80c      	bhi.n	80038d8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f001 f946 	bl	8004b50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	e008      	b.n	80038ea <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	a7fdabf8 	.word	0xa7fdabf8
 8003908:	cccccccd 	.word	0xcccccccd
 800390c:	40020010 	.word	0x40020010
 8003910:	40020028 	.word	0x40020028
 8003914:	40020040 	.word	0x40020040
 8003918:	40020058 	.word	0x40020058
 800391c:	40020070 	.word	0x40020070
 8003920:	40020088 	.word	0x40020088
 8003924:	400200a0 	.word	0x400200a0
 8003928:	400200b8 	.word	0x400200b8
 800392c:	40020410 	.word	0x40020410
 8003930:	40020428 	.word	0x40020428
 8003934:	40020440 	.word	0x40020440
 8003938:	40020458 	.word	0x40020458
 800393c:	40020470 	.word	0x40020470
 8003940:	40020488 	.word	0x40020488
 8003944:	400204a0 	.word	0x400204a0
 8003948:	400204b8 	.word	0x400204b8
 800394c:	58025408 	.word	0x58025408
 8003950:	5802541c 	.word	0x5802541c
 8003954:	58025430 	.word	0x58025430
 8003958:	58025444 	.word	0x58025444
 800395c:	58025458 	.word	0x58025458
 8003960:	5802546c 	.word	0x5802546c
 8003964:	58025480 	.word	0x58025480
 8003968:	58025494 	.word	0x58025494

0800396c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08a      	sub	sp, #40	@ 0x28
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003978:	4b67      	ldr	r3, [pc, #412]	@ (8003b18 <HAL_DMA_IRQHandler+0x1ac>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a67      	ldr	r2, [pc, #412]	@ (8003b1c <HAL_DMA_IRQHandler+0x1b0>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	0a9b      	lsrs	r3, r3, #10
 8003984:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003990:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a5f      	ldr	r2, [pc, #380]	@ (8003b20 <HAL_DMA_IRQHandler+0x1b4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d04a      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xd2>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a5d      	ldr	r2, [pc, #372]	@ (8003b24 <HAL_DMA_IRQHandler+0x1b8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d045      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xd2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a5c      	ldr	r2, [pc, #368]	@ (8003b28 <HAL_DMA_IRQHandler+0x1bc>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d040      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xd2>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a5a      	ldr	r2, [pc, #360]	@ (8003b2c <HAL_DMA_IRQHandler+0x1c0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d03b      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xd2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a59      	ldr	r2, [pc, #356]	@ (8003b30 <HAL_DMA_IRQHandler+0x1c4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d036      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xd2>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a57      	ldr	r2, [pc, #348]	@ (8003b34 <HAL_DMA_IRQHandler+0x1c8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d031      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xd2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a56      	ldr	r2, [pc, #344]	@ (8003b38 <HAL_DMA_IRQHandler+0x1cc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d02c      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xd2>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a54      	ldr	r2, [pc, #336]	@ (8003b3c <HAL_DMA_IRQHandler+0x1d0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d027      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xd2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a53      	ldr	r2, [pc, #332]	@ (8003b40 <HAL_DMA_IRQHandler+0x1d4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d022      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xd2>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a51      	ldr	r2, [pc, #324]	@ (8003b44 <HAL_DMA_IRQHandler+0x1d8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d01d      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xd2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a50      	ldr	r2, [pc, #320]	@ (8003b48 <HAL_DMA_IRQHandler+0x1dc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d018      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xd2>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a4e      	ldr	r2, [pc, #312]	@ (8003b4c <HAL_DMA_IRQHandler+0x1e0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d013      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xd2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a4d      	ldr	r2, [pc, #308]	@ (8003b50 <HAL_DMA_IRQHandler+0x1e4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00e      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xd2>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a4b      	ldr	r2, [pc, #300]	@ (8003b54 <HAL_DMA_IRQHandler+0x1e8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d009      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xd2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a4a      	ldr	r2, [pc, #296]	@ (8003b58 <HAL_DMA_IRQHandler+0x1ec>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d004      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xd2>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a48      	ldr	r2, [pc, #288]	@ (8003b5c <HAL_DMA_IRQHandler+0x1f0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d101      	bne.n	8003a42 <HAL_DMA_IRQHandler+0xd6>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_DMA_IRQHandler+0xd8>
 8003a42:	2300      	movs	r3, #0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 842b 	beq.w	80042a0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4e:	f003 031f 	and.w	r3, r3, #31
 8003a52:	2208      	movs	r2, #8
 8003a54:	409a      	lsls	r2, r3
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 80a2 	beq.w	8003ba4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a2e      	ldr	r2, [pc, #184]	@ (8003b20 <HAL_DMA_IRQHandler+0x1b4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d04a      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x194>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003b24 <HAL_DMA_IRQHandler+0x1b8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d045      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x194>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a2b      	ldr	r2, [pc, #172]	@ (8003b28 <HAL_DMA_IRQHandler+0x1bc>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d040      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x194>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a2a      	ldr	r2, [pc, #168]	@ (8003b2c <HAL_DMA_IRQHandler+0x1c0>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d03b      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x194>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a28      	ldr	r2, [pc, #160]	@ (8003b30 <HAL_DMA_IRQHandler+0x1c4>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d036      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x194>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a27      	ldr	r2, [pc, #156]	@ (8003b34 <HAL_DMA_IRQHandler+0x1c8>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d031      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x194>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a25      	ldr	r2, [pc, #148]	@ (8003b38 <HAL_DMA_IRQHandler+0x1cc>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d02c      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x194>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a24      	ldr	r2, [pc, #144]	@ (8003b3c <HAL_DMA_IRQHandler+0x1d0>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d027      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x194>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a22      	ldr	r2, [pc, #136]	@ (8003b40 <HAL_DMA_IRQHandler+0x1d4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d022      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x194>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a21      	ldr	r2, [pc, #132]	@ (8003b44 <HAL_DMA_IRQHandler+0x1d8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d01d      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x194>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8003b48 <HAL_DMA_IRQHandler+0x1dc>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d018      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x194>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8003b4c <HAL_DMA_IRQHandler+0x1e0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d013      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x194>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1c      	ldr	r2, [pc, #112]	@ (8003b50 <HAL_DMA_IRQHandler+0x1e4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00e      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x194>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b54 <HAL_DMA_IRQHandler+0x1e8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d009      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x194>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a19      	ldr	r2, [pc, #100]	@ (8003b58 <HAL_DMA_IRQHandler+0x1ec>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d004      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x194>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a18      	ldr	r2, [pc, #96]	@ (8003b5c <HAL_DMA_IRQHandler+0x1f0>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d12f      	bne.n	8003b60 <HAL_DMA_IRQHandler+0x1f4>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0304 	and.w	r3, r3, #4
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	bf14      	ite	ne
 8003b0e:	2301      	movne	r3, #1
 8003b10:	2300      	moveq	r3, #0
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	e02e      	b.n	8003b74 <HAL_DMA_IRQHandler+0x208>
 8003b16:	bf00      	nop
 8003b18:	24000000 	.word	0x24000000
 8003b1c:	1b4e81b5 	.word	0x1b4e81b5
 8003b20:	40020010 	.word	0x40020010
 8003b24:	40020028 	.word	0x40020028
 8003b28:	40020040 	.word	0x40020040
 8003b2c:	40020058 	.word	0x40020058
 8003b30:	40020070 	.word	0x40020070
 8003b34:	40020088 	.word	0x40020088
 8003b38:	400200a0 	.word	0x400200a0
 8003b3c:	400200b8 	.word	0x400200b8
 8003b40:	40020410 	.word	0x40020410
 8003b44:	40020428 	.word	0x40020428
 8003b48:	40020440 	.word	0x40020440
 8003b4c:	40020458 	.word	0x40020458
 8003b50:	40020470 	.word	0x40020470
 8003b54:	40020488 	.word	0x40020488
 8003b58:	400204a0 	.word	0x400204a0
 8003b5c:	400204b8 	.word	0x400204b8
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bf14      	ite	ne
 8003b6e:	2301      	movne	r3, #1
 8003b70:	2300      	moveq	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d015      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0204 	bic.w	r2, r2, #4
 8003b86:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	2208      	movs	r2, #8
 8003b92:	409a      	lsls	r2, r3
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9c:	f043 0201 	orr.w	r2, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d06e      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a69      	ldr	r2, [pc, #420]	@ (8003d64 <HAL_DMA_IRQHandler+0x3f8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d04a      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x2ee>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a67      	ldr	r2, [pc, #412]	@ (8003d68 <HAL_DMA_IRQHandler+0x3fc>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d045      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x2ee>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a66      	ldr	r2, [pc, #408]	@ (8003d6c <HAL_DMA_IRQHandler+0x400>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d040      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x2ee>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a64      	ldr	r2, [pc, #400]	@ (8003d70 <HAL_DMA_IRQHandler+0x404>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d03b      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x2ee>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a63      	ldr	r2, [pc, #396]	@ (8003d74 <HAL_DMA_IRQHandler+0x408>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d036      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x2ee>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a61      	ldr	r2, [pc, #388]	@ (8003d78 <HAL_DMA_IRQHandler+0x40c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d031      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x2ee>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a60      	ldr	r2, [pc, #384]	@ (8003d7c <HAL_DMA_IRQHandler+0x410>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d02c      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x2ee>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a5e      	ldr	r2, [pc, #376]	@ (8003d80 <HAL_DMA_IRQHandler+0x414>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d027      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x2ee>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a5d      	ldr	r2, [pc, #372]	@ (8003d84 <HAL_DMA_IRQHandler+0x418>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d022      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x2ee>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a5b      	ldr	r2, [pc, #364]	@ (8003d88 <HAL_DMA_IRQHandler+0x41c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d01d      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x2ee>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a5a      	ldr	r2, [pc, #360]	@ (8003d8c <HAL_DMA_IRQHandler+0x420>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d018      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x2ee>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a58      	ldr	r2, [pc, #352]	@ (8003d90 <HAL_DMA_IRQHandler+0x424>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d013      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x2ee>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a57      	ldr	r2, [pc, #348]	@ (8003d94 <HAL_DMA_IRQHandler+0x428>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00e      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x2ee>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a55      	ldr	r2, [pc, #340]	@ (8003d98 <HAL_DMA_IRQHandler+0x42c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d009      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x2ee>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a54      	ldr	r2, [pc, #336]	@ (8003d9c <HAL_DMA_IRQHandler+0x430>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d004      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x2ee>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a52      	ldr	r2, [pc, #328]	@ (8003da0 <HAL_DMA_IRQHandler+0x434>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d10a      	bne.n	8003c70 <HAL_DMA_IRQHandler+0x304>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bf14      	ite	ne
 8003c68:	2301      	movne	r3, #1
 8003c6a:	2300      	moveq	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	e003      	b.n	8003c78 <HAL_DMA_IRQHandler+0x30c>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2300      	movs	r3, #0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00d      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	2201      	movs	r2, #1
 8003c86:	409a      	lsls	r2, r3
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c90:	f043 0202 	orr.w	r2, r3, #2
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	2204      	movs	r2, #4
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 808f 	beq.w	8003dcc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a2c      	ldr	r2, [pc, #176]	@ (8003d64 <HAL_DMA_IRQHandler+0x3f8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d04a      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x3e2>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a2a      	ldr	r2, [pc, #168]	@ (8003d68 <HAL_DMA_IRQHandler+0x3fc>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d045      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x3e2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a29      	ldr	r2, [pc, #164]	@ (8003d6c <HAL_DMA_IRQHandler+0x400>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d040      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x3e2>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a27      	ldr	r2, [pc, #156]	@ (8003d70 <HAL_DMA_IRQHandler+0x404>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d03b      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x3e2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a26      	ldr	r2, [pc, #152]	@ (8003d74 <HAL_DMA_IRQHandler+0x408>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d036      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x3e2>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a24      	ldr	r2, [pc, #144]	@ (8003d78 <HAL_DMA_IRQHandler+0x40c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d031      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x3e2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a23      	ldr	r2, [pc, #140]	@ (8003d7c <HAL_DMA_IRQHandler+0x410>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d02c      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x3e2>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a21      	ldr	r2, [pc, #132]	@ (8003d80 <HAL_DMA_IRQHandler+0x414>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d027      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x3e2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a20      	ldr	r2, [pc, #128]	@ (8003d84 <HAL_DMA_IRQHandler+0x418>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d022      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x3e2>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a1e      	ldr	r2, [pc, #120]	@ (8003d88 <HAL_DMA_IRQHandler+0x41c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d01d      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x3e2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1d      	ldr	r2, [pc, #116]	@ (8003d8c <HAL_DMA_IRQHandler+0x420>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d018      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x3e2>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a1b      	ldr	r2, [pc, #108]	@ (8003d90 <HAL_DMA_IRQHandler+0x424>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d013      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x3e2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003d94 <HAL_DMA_IRQHandler+0x428>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00e      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x3e2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a18      	ldr	r2, [pc, #96]	@ (8003d98 <HAL_DMA_IRQHandler+0x42c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d009      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x3e2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a17      	ldr	r2, [pc, #92]	@ (8003d9c <HAL_DMA_IRQHandler+0x430>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d004      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x3e2>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a15      	ldr	r2, [pc, #84]	@ (8003da0 <HAL_DMA_IRQHandler+0x434>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d12a      	bne.n	8003da4 <HAL_DMA_IRQHandler+0x438>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf14      	ite	ne
 8003d5c:	2301      	movne	r3, #1
 8003d5e:	2300      	moveq	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	e023      	b.n	8003dac <HAL_DMA_IRQHandler+0x440>
 8003d64:	40020010 	.word	0x40020010
 8003d68:	40020028 	.word	0x40020028
 8003d6c:	40020040 	.word	0x40020040
 8003d70:	40020058 	.word	0x40020058
 8003d74:	40020070 	.word	0x40020070
 8003d78:	40020088 	.word	0x40020088
 8003d7c:	400200a0 	.word	0x400200a0
 8003d80:	400200b8 	.word	0x400200b8
 8003d84:	40020410 	.word	0x40020410
 8003d88:	40020428 	.word	0x40020428
 8003d8c:	40020440 	.word	0x40020440
 8003d90:	40020458 	.word	0x40020458
 8003d94:	40020470 	.word	0x40020470
 8003d98:	40020488 	.word	0x40020488
 8003d9c:	400204a0 	.word	0x400204a0
 8003da0:	400204b8 	.word	0x400204b8
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2300      	movs	r3, #0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00d      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db4:	f003 031f 	and.w	r3, r3, #31
 8003db8:	2204      	movs	r2, #4
 8003dba:	409a      	lsls	r2, r3
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc4:	f043 0204 	orr.w	r2, r3, #4
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	2210      	movs	r2, #16
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80a6 	beq.w	8003f2e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a85      	ldr	r2, [pc, #532]	@ (8003ffc <HAL_DMA_IRQHandler+0x690>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d04a      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x516>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a83      	ldr	r2, [pc, #524]	@ (8004000 <HAL_DMA_IRQHandler+0x694>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d045      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x516>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a82      	ldr	r2, [pc, #520]	@ (8004004 <HAL_DMA_IRQHandler+0x698>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d040      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x516>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a80      	ldr	r2, [pc, #512]	@ (8004008 <HAL_DMA_IRQHandler+0x69c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d03b      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x516>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a7f      	ldr	r2, [pc, #508]	@ (800400c <HAL_DMA_IRQHandler+0x6a0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d036      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x516>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a7d      	ldr	r2, [pc, #500]	@ (8004010 <HAL_DMA_IRQHandler+0x6a4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d031      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x516>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a7c      	ldr	r2, [pc, #496]	@ (8004014 <HAL_DMA_IRQHandler+0x6a8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d02c      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x516>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a7a      	ldr	r2, [pc, #488]	@ (8004018 <HAL_DMA_IRQHandler+0x6ac>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d027      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x516>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a79      	ldr	r2, [pc, #484]	@ (800401c <HAL_DMA_IRQHandler+0x6b0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d022      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x516>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a77      	ldr	r2, [pc, #476]	@ (8004020 <HAL_DMA_IRQHandler+0x6b4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01d      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x516>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a76      	ldr	r2, [pc, #472]	@ (8004024 <HAL_DMA_IRQHandler+0x6b8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d018      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x516>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a74      	ldr	r2, [pc, #464]	@ (8004028 <HAL_DMA_IRQHandler+0x6bc>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d013      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x516>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a73      	ldr	r2, [pc, #460]	@ (800402c <HAL_DMA_IRQHandler+0x6c0>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00e      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x516>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a71      	ldr	r2, [pc, #452]	@ (8004030 <HAL_DMA_IRQHandler+0x6c4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d009      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x516>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a70      	ldr	r2, [pc, #448]	@ (8004034 <HAL_DMA_IRQHandler+0x6c8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d004      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x516>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a6e      	ldr	r2, [pc, #440]	@ (8004038 <HAL_DMA_IRQHandler+0x6cc>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d10a      	bne.n	8003e98 <HAL_DMA_IRQHandler+0x52c>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	bf14      	ite	ne
 8003e90:	2301      	movne	r3, #1
 8003e92:	2300      	moveq	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	e009      	b.n	8003eac <HAL_DMA_IRQHandler+0x540>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	bf14      	ite	ne
 8003ea6:	2301      	movne	r3, #1
 8003ea8:	2300      	moveq	r3, #0
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d03e      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb4:	f003 031f 	and.w	r3, r3, #31
 8003eb8:	2210      	movs	r2, #16
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d018      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d108      	bne.n	8003eee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d024      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	4798      	blx	r3
 8003eec:	e01f      	b.n	8003f2e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d01b      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	4798      	blx	r3
 8003efe:	e016      	b.n	8003f2e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d107      	bne.n	8003f1e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0208 	bic.w	r2, r2, #8
 8003f1c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	2220      	movs	r2, #32
 8003f38:	409a      	lsls	r2, r3
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 8110 	beq.w	8004164 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a2c      	ldr	r2, [pc, #176]	@ (8003ffc <HAL_DMA_IRQHandler+0x690>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d04a      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x678>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a2b      	ldr	r2, [pc, #172]	@ (8004000 <HAL_DMA_IRQHandler+0x694>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d045      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x678>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a29      	ldr	r2, [pc, #164]	@ (8004004 <HAL_DMA_IRQHandler+0x698>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d040      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x678>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a28      	ldr	r2, [pc, #160]	@ (8004008 <HAL_DMA_IRQHandler+0x69c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d03b      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x678>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a26      	ldr	r2, [pc, #152]	@ (800400c <HAL_DMA_IRQHandler+0x6a0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d036      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x678>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a25      	ldr	r2, [pc, #148]	@ (8004010 <HAL_DMA_IRQHandler+0x6a4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d031      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x678>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a23      	ldr	r2, [pc, #140]	@ (8004014 <HAL_DMA_IRQHandler+0x6a8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d02c      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x678>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a22      	ldr	r2, [pc, #136]	@ (8004018 <HAL_DMA_IRQHandler+0x6ac>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d027      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x678>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a20      	ldr	r2, [pc, #128]	@ (800401c <HAL_DMA_IRQHandler+0x6b0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d022      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x678>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8004020 <HAL_DMA_IRQHandler+0x6b4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d01d      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x678>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a1d      	ldr	r2, [pc, #116]	@ (8004024 <HAL_DMA_IRQHandler+0x6b8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d018      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x678>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8004028 <HAL_DMA_IRQHandler+0x6bc>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d013      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x678>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800402c <HAL_DMA_IRQHandler+0x6c0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d00e      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x678>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a19      	ldr	r2, [pc, #100]	@ (8004030 <HAL_DMA_IRQHandler+0x6c4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d009      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x678>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a17      	ldr	r2, [pc, #92]	@ (8004034 <HAL_DMA_IRQHandler+0x6c8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d004      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x678>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a16      	ldr	r2, [pc, #88]	@ (8004038 <HAL_DMA_IRQHandler+0x6cc>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d12b      	bne.n	800403c <HAL_DMA_IRQHandler+0x6d0>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0310 	and.w	r3, r3, #16
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	bf14      	ite	ne
 8003ff2:	2301      	movne	r3, #1
 8003ff4:	2300      	moveq	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	e02a      	b.n	8004050 <HAL_DMA_IRQHandler+0x6e4>
 8003ffa:	bf00      	nop
 8003ffc:	40020010 	.word	0x40020010
 8004000:	40020028 	.word	0x40020028
 8004004:	40020040 	.word	0x40020040
 8004008:	40020058 	.word	0x40020058
 800400c:	40020070 	.word	0x40020070
 8004010:	40020088 	.word	0x40020088
 8004014:	400200a0 	.word	0x400200a0
 8004018:	400200b8 	.word	0x400200b8
 800401c:	40020410 	.word	0x40020410
 8004020:	40020428 	.word	0x40020428
 8004024:	40020440 	.word	0x40020440
 8004028:	40020458 	.word	0x40020458
 800402c:	40020470 	.word	0x40020470
 8004030:	40020488 	.word	0x40020488
 8004034:	400204a0 	.word	0x400204a0
 8004038:	400204b8 	.word	0x400204b8
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	bf14      	ite	ne
 800404a:	2301      	movne	r3, #1
 800404c:	2300      	moveq	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 8087 	beq.w	8004164 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	2220      	movs	r2, #32
 8004060:	409a      	lsls	r2, r3
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b04      	cmp	r3, #4
 8004070:	d139      	bne.n	80040e6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0216 	bic.w	r2, r2, #22
 8004080:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695a      	ldr	r2, [r3, #20]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004090:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	d103      	bne.n	80040a2 <HAL_DMA_IRQHandler+0x736>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d007      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0208 	bic.w	r2, r2, #8
 80040b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	223f      	movs	r2, #63	@ 0x3f
 80040bc:	409a      	lsls	r2, r3
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 834a 	beq.w	8004770 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	4798      	blx	r3
          }
          return;
 80040e4:	e344      	b.n	8004770 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d018      	beq.n	8004126 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d108      	bne.n	8004114 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004106:	2b00      	cmp	r3, #0
 8004108:	d02c      	beq.n	8004164 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	4798      	blx	r3
 8004112:	e027      	b.n	8004164 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004118:	2b00      	cmp	r3, #0
 800411a:	d023      	beq.n	8004164 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	4798      	blx	r3
 8004124:	e01e      	b.n	8004164 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10f      	bne.n	8004154 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0210 	bic.w	r2, r2, #16
 8004142:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 8306 	beq.w	800477a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 8088 	beq.w	800428c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2204      	movs	r2, #4
 8004180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a7a      	ldr	r2, [pc, #488]	@ (8004374 <HAL_DMA_IRQHandler+0xa08>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d04a      	beq.n	8004224 <HAL_DMA_IRQHandler+0x8b8>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a79      	ldr	r2, [pc, #484]	@ (8004378 <HAL_DMA_IRQHandler+0xa0c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d045      	beq.n	8004224 <HAL_DMA_IRQHandler+0x8b8>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a77      	ldr	r2, [pc, #476]	@ (800437c <HAL_DMA_IRQHandler+0xa10>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d040      	beq.n	8004224 <HAL_DMA_IRQHandler+0x8b8>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a76      	ldr	r2, [pc, #472]	@ (8004380 <HAL_DMA_IRQHandler+0xa14>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d03b      	beq.n	8004224 <HAL_DMA_IRQHandler+0x8b8>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a74      	ldr	r2, [pc, #464]	@ (8004384 <HAL_DMA_IRQHandler+0xa18>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d036      	beq.n	8004224 <HAL_DMA_IRQHandler+0x8b8>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a73      	ldr	r2, [pc, #460]	@ (8004388 <HAL_DMA_IRQHandler+0xa1c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d031      	beq.n	8004224 <HAL_DMA_IRQHandler+0x8b8>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a71      	ldr	r2, [pc, #452]	@ (800438c <HAL_DMA_IRQHandler+0xa20>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d02c      	beq.n	8004224 <HAL_DMA_IRQHandler+0x8b8>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a70      	ldr	r2, [pc, #448]	@ (8004390 <HAL_DMA_IRQHandler+0xa24>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d027      	beq.n	8004224 <HAL_DMA_IRQHandler+0x8b8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a6e      	ldr	r2, [pc, #440]	@ (8004394 <HAL_DMA_IRQHandler+0xa28>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d022      	beq.n	8004224 <HAL_DMA_IRQHandler+0x8b8>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a6d      	ldr	r2, [pc, #436]	@ (8004398 <HAL_DMA_IRQHandler+0xa2c>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d01d      	beq.n	8004224 <HAL_DMA_IRQHandler+0x8b8>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a6b      	ldr	r2, [pc, #428]	@ (800439c <HAL_DMA_IRQHandler+0xa30>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d018      	beq.n	8004224 <HAL_DMA_IRQHandler+0x8b8>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a6a      	ldr	r2, [pc, #424]	@ (80043a0 <HAL_DMA_IRQHandler+0xa34>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d013      	beq.n	8004224 <HAL_DMA_IRQHandler+0x8b8>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a68      	ldr	r2, [pc, #416]	@ (80043a4 <HAL_DMA_IRQHandler+0xa38>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00e      	beq.n	8004224 <HAL_DMA_IRQHandler+0x8b8>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a67      	ldr	r2, [pc, #412]	@ (80043a8 <HAL_DMA_IRQHandler+0xa3c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d009      	beq.n	8004224 <HAL_DMA_IRQHandler+0x8b8>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a65      	ldr	r2, [pc, #404]	@ (80043ac <HAL_DMA_IRQHandler+0xa40>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d004      	beq.n	8004224 <HAL_DMA_IRQHandler+0x8b8>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a64      	ldr	r2, [pc, #400]	@ (80043b0 <HAL_DMA_IRQHandler+0xa44>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d108      	bne.n	8004236 <HAL_DMA_IRQHandler+0x8ca>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0201 	bic.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	e007      	b.n	8004246 <HAL_DMA_IRQHandler+0x8da>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0201 	bic.w	r2, r2, #1
 8004244:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3301      	adds	r3, #1
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800424e:	429a      	cmp	r2, r3
 8004250:	d307      	bcc.n	8004262 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1f2      	bne.n	8004246 <HAL_DMA_IRQHandler+0x8da>
 8004260:	e000      	b.n	8004264 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004262:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d004      	beq.n	800427c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2203      	movs	r2, #3
 8004276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800427a:	e003      	b.n	8004284 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 8272 	beq.w	800477a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	4798      	blx	r3
 800429e:	e26c      	b.n	800477a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a43      	ldr	r2, [pc, #268]	@ (80043b4 <HAL_DMA_IRQHandler+0xa48>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d022      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x984>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a42      	ldr	r2, [pc, #264]	@ (80043b8 <HAL_DMA_IRQHandler+0xa4c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d01d      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x984>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a40      	ldr	r2, [pc, #256]	@ (80043bc <HAL_DMA_IRQHandler+0xa50>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d018      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x984>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a3f      	ldr	r2, [pc, #252]	@ (80043c0 <HAL_DMA_IRQHandler+0xa54>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d013      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x984>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a3d      	ldr	r2, [pc, #244]	@ (80043c4 <HAL_DMA_IRQHandler+0xa58>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00e      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x984>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a3c      	ldr	r2, [pc, #240]	@ (80043c8 <HAL_DMA_IRQHandler+0xa5c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d009      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x984>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a3a      	ldr	r2, [pc, #232]	@ (80043cc <HAL_DMA_IRQHandler+0xa60>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d004      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x984>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a39      	ldr	r2, [pc, #228]	@ (80043d0 <HAL_DMA_IRQHandler+0xa64>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d101      	bne.n	80042f4 <HAL_DMA_IRQHandler+0x988>
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <HAL_DMA_IRQHandler+0x98a>
 80042f4:	2300      	movs	r3, #0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 823f 	beq.w	800477a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	2204      	movs	r2, #4
 800430e:	409a      	lsls	r2, r3
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	4013      	ands	r3, r2
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 80cd 	beq.w	80044b4 <HAL_DMA_IRQHandler+0xb48>
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80c7 	beq.w	80044b4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800432a:	f003 031f 	and.w	r3, r3, #31
 800432e:	2204      	movs	r2, #4
 8004330:	409a      	lsls	r2, r3
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d049      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d109      	bne.n	800435e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 8210 	beq.w	8004774 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800435c:	e20a      	b.n	8004774 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 8206 	beq.w	8004774 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004370:	e200      	b.n	8004774 <HAL_DMA_IRQHandler+0xe08>
 8004372:	bf00      	nop
 8004374:	40020010 	.word	0x40020010
 8004378:	40020028 	.word	0x40020028
 800437c:	40020040 	.word	0x40020040
 8004380:	40020058 	.word	0x40020058
 8004384:	40020070 	.word	0x40020070
 8004388:	40020088 	.word	0x40020088
 800438c:	400200a0 	.word	0x400200a0
 8004390:	400200b8 	.word	0x400200b8
 8004394:	40020410 	.word	0x40020410
 8004398:	40020428 	.word	0x40020428
 800439c:	40020440 	.word	0x40020440
 80043a0:	40020458 	.word	0x40020458
 80043a4:	40020470 	.word	0x40020470
 80043a8:	40020488 	.word	0x40020488
 80043ac:	400204a0 	.word	0x400204a0
 80043b0:	400204b8 	.word	0x400204b8
 80043b4:	58025408 	.word	0x58025408
 80043b8:	5802541c 	.word	0x5802541c
 80043bc:	58025430 	.word	0x58025430
 80043c0:	58025444 	.word	0x58025444
 80043c4:	58025458 	.word	0x58025458
 80043c8:	5802546c 	.word	0x5802546c
 80043cc:	58025480 	.word	0x58025480
 80043d0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d160      	bne.n	80044a0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a7f      	ldr	r2, [pc, #508]	@ (80045e0 <HAL_DMA_IRQHandler+0xc74>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d04a      	beq.n	800447e <HAL_DMA_IRQHandler+0xb12>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a7d      	ldr	r2, [pc, #500]	@ (80045e4 <HAL_DMA_IRQHandler+0xc78>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d045      	beq.n	800447e <HAL_DMA_IRQHandler+0xb12>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a7c      	ldr	r2, [pc, #496]	@ (80045e8 <HAL_DMA_IRQHandler+0xc7c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d040      	beq.n	800447e <HAL_DMA_IRQHandler+0xb12>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a7a      	ldr	r2, [pc, #488]	@ (80045ec <HAL_DMA_IRQHandler+0xc80>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d03b      	beq.n	800447e <HAL_DMA_IRQHandler+0xb12>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a79      	ldr	r2, [pc, #484]	@ (80045f0 <HAL_DMA_IRQHandler+0xc84>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d036      	beq.n	800447e <HAL_DMA_IRQHandler+0xb12>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a77      	ldr	r2, [pc, #476]	@ (80045f4 <HAL_DMA_IRQHandler+0xc88>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d031      	beq.n	800447e <HAL_DMA_IRQHandler+0xb12>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a76      	ldr	r2, [pc, #472]	@ (80045f8 <HAL_DMA_IRQHandler+0xc8c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d02c      	beq.n	800447e <HAL_DMA_IRQHandler+0xb12>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a74      	ldr	r2, [pc, #464]	@ (80045fc <HAL_DMA_IRQHandler+0xc90>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d027      	beq.n	800447e <HAL_DMA_IRQHandler+0xb12>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a73      	ldr	r2, [pc, #460]	@ (8004600 <HAL_DMA_IRQHandler+0xc94>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d022      	beq.n	800447e <HAL_DMA_IRQHandler+0xb12>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a71      	ldr	r2, [pc, #452]	@ (8004604 <HAL_DMA_IRQHandler+0xc98>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d01d      	beq.n	800447e <HAL_DMA_IRQHandler+0xb12>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a70      	ldr	r2, [pc, #448]	@ (8004608 <HAL_DMA_IRQHandler+0xc9c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d018      	beq.n	800447e <HAL_DMA_IRQHandler+0xb12>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a6e      	ldr	r2, [pc, #440]	@ (800460c <HAL_DMA_IRQHandler+0xca0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d013      	beq.n	800447e <HAL_DMA_IRQHandler+0xb12>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a6d      	ldr	r2, [pc, #436]	@ (8004610 <HAL_DMA_IRQHandler+0xca4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00e      	beq.n	800447e <HAL_DMA_IRQHandler+0xb12>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a6b      	ldr	r2, [pc, #428]	@ (8004614 <HAL_DMA_IRQHandler+0xca8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d009      	beq.n	800447e <HAL_DMA_IRQHandler+0xb12>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a6a      	ldr	r2, [pc, #424]	@ (8004618 <HAL_DMA_IRQHandler+0xcac>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <HAL_DMA_IRQHandler+0xb12>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a68      	ldr	r2, [pc, #416]	@ (800461c <HAL_DMA_IRQHandler+0xcb0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d108      	bne.n	8004490 <HAL_DMA_IRQHandler+0xb24>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0208 	bic.w	r2, r2, #8
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	e007      	b.n	80044a0 <HAL_DMA_IRQHandler+0xb34>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0204 	bic.w	r2, r2, #4
 800449e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 8165 	beq.w	8004774 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044b2:	e15f      	b.n	8004774 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b8:	f003 031f 	and.w	r3, r3, #31
 80044bc:	2202      	movs	r2, #2
 80044be:	409a      	lsls	r2, r3
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 80c5 	beq.w	8004654 <HAL_DMA_IRQHandler+0xce8>
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80bf 	beq.w	8004654 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	2202      	movs	r2, #2
 80044e0:	409a      	lsls	r2, r3
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d018      	beq.n	8004522 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d109      	bne.n	800450e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 813a 	beq.w	8004778 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800450c:	e134      	b.n	8004778 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 8130 	beq.w	8004778 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004520:	e12a      	b.n	8004778 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	f040 8089 	bne.w	8004640 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a2b      	ldr	r2, [pc, #172]	@ (80045e0 <HAL_DMA_IRQHandler+0xc74>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d04a      	beq.n	80045ce <HAL_DMA_IRQHandler+0xc62>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a29      	ldr	r2, [pc, #164]	@ (80045e4 <HAL_DMA_IRQHandler+0xc78>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d045      	beq.n	80045ce <HAL_DMA_IRQHandler+0xc62>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a28      	ldr	r2, [pc, #160]	@ (80045e8 <HAL_DMA_IRQHandler+0xc7c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d040      	beq.n	80045ce <HAL_DMA_IRQHandler+0xc62>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a26      	ldr	r2, [pc, #152]	@ (80045ec <HAL_DMA_IRQHandler+0xc80>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d03b      	beq.n	80045ce <HAL_DMA_IRQHandler+0xc62>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a25      	ldr	r2, [pc, #148]	@ (80045f0 <HAL_DMA_IRQHandler+0xc84>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d036      	beq.n	80045ce <HAL_DMA_IRQHandler+0xc62>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a23      	ldr	r2, [pc, #140]	@ (80045f4 <HAL_DMA_IRQHandler+0xc88>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d031      	beq.n	80045ce <HAL_DMA_IRQHandler+0xc62>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a22      	ldr	r2, [pc, #136]	@ (80045f8 <HAL_DMA_IRQHandler+0xc8c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d02c      	beq.n	80045ce <HAL_DMA_IRQHandler+0xc62>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a20      	ldr	r2, [pc, #128]	@ (80045fc <HAL_DMA_IRQHandler+0xc90>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d027      	beq.n	80045ce <HAL_DMA_IRQHandler+0xc62>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a1f      	ldr	r2, [pc, #124]	@ (8004600 <HAL_DMA_IRQHandler+0xc94>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d022      	beq.n	80045ce <HAL_DMA_IRQHandler+0xc62>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a1d      	ldr	r2, [pc, #116]	@ (8004604 <HAL_DMA_IRQHandler+0xc98>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d01d      	beq.n	80045ce <HAL_DMA_IRQHandler+0xc62>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a1c      	ldr	r2, [pc, #112]	@ (8004608 <HAL_DMA_IRQHandler+0xc9c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d018      	beq.n	80045ce <HAL_DMA_IRQHandler+0xc62>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1a      	ldr	r2, [pc, #104]	@ (800460c <HAL_DMA_IRQHandler+0xca0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <HAL_DMA_IRQHandler+0xc62>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a19      	ldr	r2, [pc, #100]	@ (8004610 <HAL_DMA_IRQHandler+0xca4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00e      	beq.n	80045ce <HAL_DMA_IRQHandler+0xc62>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a17      	ldr	r2, [pc, #92]	@ (8004614 <HAL_DMA_IRQHandler+0xca8>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d009      	beq.n	80045ce <HAL_DMA_IRQHandler+0xc62>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a16      	ldr	r2, [pc, #88]	@ (8004618 <HAL_DMA_IRQHandler+0xcac>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d004      	beq.n	80045ce <HAL_DMA_IRQHandler+0xc62>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a14      	ldr	r2, [pc, #80]	@ (800461c <HAL_DMA_IRQHandler+0xcb0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d128      	bne.n	8004620 <HAL_DMA_IRQHandler+0xcb4>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0214 	bic.w	r2, r2, #20
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	e027      	b.n	8004630 <HAL_DMA_IRQHandler+0xcc4>
 80045e0:	40020010 	.word	0x40020010
 80045e4:	40020028 	.word	0x40020028
 80045e8:	40020040 	.word	0x40020040
 80045ec:	40020058 	.word	0x40020058
 80045f0:	40020070 	.word	0x40020070
 80045f4:	40020088 	.word	0x40020088
 80045f8:	400200a0 	.word	0x400200a0
 80045fc:	400200b8 	.word	0x400200b8
 8004600:	40020410 	.word	0x40020410
 8004604:	40020428 	.word	0x40020428
 8004608:	40020440 	.word	0x40020440
 800460c:	40020458 	.word	0x40020458
 8004610:	40020470 	.word	0x40020470
 8004614:	40020488 	.word	0x40020488
 8004618:	400204a0 	.word	0x400204a0
 800461c:	400204b8 	.word	0x400204b8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 020a 	bic.w	r2, r2, #10
 800462e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 8097 	beq.w	8004778 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004652:	e091      	b.n	8004778 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	2208      	movs	r2, #8
 800465e:	409a      	lsls	r2, r3
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	4013      	ands	r3, r2
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 8088 	beq.w	800477a <HAL_DMA_IRQHandler+0xe0e>
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8082 	beq.w	800477a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a41      	ldr	r2, [pc, #260]	@ (8004780 <HAL_DMA_IRQHandler+0xe14>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d04a      	beq.n	8004716 <HAL_DMA_IRQHandler+0xdaa>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a3f      	ldr	r2, [pc, #252]	@ (8004784 <HAL_DMA_IRQHandler+0xe18>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d045      	beq.n	8004716 <HAL_DMA_IRQHandler+0xdaa>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a3e      	ldr	r2, [pc, #248]	@ (8004788 <HAL_DMA_IRQHandler+0xe1c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d040      	beq.n	8004716 <HAL_DMA_IRQHandler+0xdaa>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a3c      	ldr	r2, [pc, #240]	@ (800478c <HAL_DMA_IRQHandler+0xe20>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d03b      	beq.n	8004716 <HAL_DMA_IRQHandler+0xdaa>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a3b      	ldr	r2, [pc, #236]	@ (8004790 <HAL_DMA_IRQHandler+0xe24>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d036      	beq.n	8004716 <HAL_DMA_IRQHandler+0xdaa>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a39      	ldr	r2, [pc, #228]	@ (8004794 <HAL_DMA_IRQHandler+0xe28>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d031      	beq.n	8004716 <HAL_DMA_IRQHandler+0xdaa>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a38      	ldr	r2, [pc, #224]	@ (8004798 <HAL_DMA_IRQHandler+0xe2c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d02c      	beq.n	8004716 <HAL_DMA_IRQHandler+0xdaa>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a36      	ldr	r2, [pc, #216]	@ (800479c <HAL_DMA_IRQHandler+0xe30>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d027      	beq.n	8004716 <HAL_DMA_IRQHandler+0xdaa>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a35      	ldr	r2, [pc, #212]	@ (80047a0 <HAL_DMA_IRQHandler+0xe34>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d022      	beq.n	8004716 <HAL_DMA_IRQHandler+0xdaa>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a33      	ldr	r2, [pc, #204]	@ (80047a4 <HAL_DMA_IRQHandler+0xe38>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d01d      	beq.n	8004716 <HAL_DMA_IRQHandler+0xdaa>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a32      	ldr	r2, [pc, #200]	@ (80047a8 <HAL_DMA_IRQHandler+0xe3c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d018      	beq.n	8004716 <HAL_DMA_IRQHandler+0xdaa>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a30      	ldr	r2, [pc, #192]	@ (80047ac <HAL_DMA_IRQHandler+0xe40>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <HAL_DMA_IRQHandler+0xdaa>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a2f      	ldr	r2, [pc, #188]	@ (80047b0 <HAL_DMA_IRQHandler+0xe44>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00e      	beq.n	8004716 <HAL_DMA_IRQHandler+0xdaa>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a2d      	ldr	r2, [pc, #180]	@ (80047b4 <HAL_DMA_IRQHandler+0xe48>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d009      	beq.n	8004716 <HAL_DMA_IRQHandler+0xdaa>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a2c      	ldr	r2, [pc, #176]	@ (80047b8 <HAL_DMA_IRQHandler+0xe4c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d004      	beq.n	8004716 <HAL_DMA_IRQHandler+0xdaa>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a2a      	ldr	r2, [pc, #168]	@ (80047bc <HAL_DMA_IRQHandler+0xe50>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d108      	bne.n	8004728 <HAL_DMA_IRQHandler+0xdbc>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 021c 	bic.w	r2, r2, #28
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	e007      	b.n	8004738 <HAL_DMA_IRQHandler+0xdcc>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 020e 	bic.w	r2, r2, #14
 8004736:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800473c:	f003 031f 	and.w	r3, r3, #31
 8004740:	2201      	movs	r2, #1
 8004742:	409a      	lsls	r2, r3
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d009      	beq.n	800477a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	4798      	blx	r3
 800476e:	e004      	b.n	800477a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004770:	bf00      	nop
 8004772:	e002      	b.n	800477a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004774:	bf00      	nop
 8004776:	e000      	b.n	800477a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004778:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800477a:	3728      	adds	r7, #40	@ 0x28
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40020010 	.word	0x40020010
 8004784:	40020028 	.word	0x40020028
 8004788:	40020040 	.word	0x40020040
 800478c:	40020058 	.word	0x40020058
 8004790:	40020070 	.word	0x40020070
 8004794:	40020088 	.word	0x40020088
 8004798:	400200a0 	.word	0x400200a0
 800479c:	400200b8 	.word	0x400200b8
 80047a0:	40020410 	.word	0x40020410
 80047a4:	40020428 	.word	0x40020428
 80047a8:	40020440 	.word	0x40020440
 80047ac:	40020458 	.word	0x40020458
 80047b0:	40020470 	.word	0x40020470
 80047b4:	40020488 	.word	0x40020488
 80047b8:	400204a0 	.word	0x400204a0
 80047bc:	400204b8 	.word	0x400204b8

080047c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a42      	ldr	r2, [pc, #264]	@ (80048d8 <DMA_CalcBaseAndBitshift+0x118>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d04a      	beq.n	8004868 <DMA_CalcBaseAndBitshift+0xa8>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a41      	ldr	r2, [pc, #260]	@ (80048dc <DMA_CalcBaseAndBitshift+0x11c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d045      	beq.n	8004868 <DMA_CalcBaseAndBitshift+0xa8>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a3f      	ldr	r2, [pc, #252]	@ (80048e0 <DMA_CalcBaseAndBitshift+0x120>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d040      	beq.n	8004868 <DMA_CalcBaseAndBitshift+0xa8>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a3e      	ldr	r2, [pc, #248]	@ (80048e4 <DMA_CalcBaseAndBitshift+0x124>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d03b      	beq.n	8004868 <DMA_CalcBaseAndBitshift+0xa8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a3c      	ldr	r2, [pc, #240]	@ (80048e8 <DMA_CalcBaseAndBitshift+0x128>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d036      	beq.n	8004868 <DMA_CalcBaseAndBitshift+0xa8>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a3b      	ldr	r2, [pc, #236]	@ (80048ec <DMA_CalcBaseAndBitshift+0x12c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d031      	beq.n	8004868 <DMA_CalcBaseAndBitshift+0xa8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a39      	ldr	r2, [pc, #228]	@ (80048f0 <DMA_CalcBaseAndBitshift+0x130>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d02c      	beq.n	8004868 <DMA_CalcBaseAndBitshift+0xa8>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a38      	ldr	r2, [pc, #224]	@ (80048f4 <DMA_CalcBaseAndBitshift+0x134>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d027      	beq.n	8004868 <DMA_CalcBaseAndBitshift+0xa8>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a36      	ldr	r2, [pc, #216]	@ (80048f8 <DMA_CalcBaseAndBitshift+0x138>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d022      	beq.n	8004868 <DMA_CalcBaseAndBitshift+0xa8>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a35      	ldr	r2, [pc, #212]	@ (80048fc <DMA_CalcBaseAndBitshift+0x13c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d01d      	beq.n	8004868 <DMA_CalcBaseAndBitshift+0xa8>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a33      	ldr	r2, [pc, #204]	@ (8004900 <DMA_CalcBaseAndBitshift+0x140>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d018      	beq.n	8004868 <DMA_CalcBaseAndBitshift+0xa8>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a32      	ldr	r2, [pc, #200]	@ (8004904 <DMA_CalcBaseAndBitshift+0x144>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d013      	beq.n	8004868 <DMA_CalcBaseAndBitshift+0xa8>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a30      	ldr	r2, [pc, #192]	@ (8004908 <DMA_CalcBaseAndBitshift+0x148>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00e      	beq.n	8004868 <DMA_CalcBaseAndBitshift+0xa8>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a2f      	ldr	r2, [pc, #188]	@ (800490c <DMA_CalcBaseAndBitshift+0x14c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d009      	beq.n	8004868 <DMA_CalcBaseAndBitshift+0xa8>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a2d      	ldr	r2, [pc, #180]	@ (8004910 <DMA_CalcBaseAndBitshift+0x150>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d004      	beq.n	8004868 <DMA_CalcBaseAndBitshift+0xa8>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a2c      	ldr	r2, [pc, #176]	@ (8004914 <DMA_CalcBaseAndBitshift+0x154>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d101      	bne.n	800486c <DMA_CalcBaseAndBitshift+0xac>
 8004868:	2301      	movs	r3, #1
 800486a:	e000      	b.n	800486e <DMA_CalcBaseAndBitshift+0xae>
 800486c:	2300      	movs	r3, #0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d024      	beq.n	80048bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	b2db      	uxtb	r3, r3
 8004878:	3b10      	subs	r3, #16
 800487a:	4a27      	ldr	r2, [pc, #156]	@ (8004918 <DMA_CalcBaseAndBitshift+0x158>)
 800487c:	fba2 2303 	umull	r2, r3, r2, r3
 8004880:	091b      	lsrs	r3, r3, #4
 8004882:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	4a24      	ldr	r2, [pc, #144]	@ (800491c <DMA_CalcBaseAndBitshift+0x15c>)
 800488c:	5cd3      	ldrb	r3, [r2, r3]
 800488e:	461a      	mov	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2b03      	cmp	r3, #3
 8004898:	d908      	bls.n	80048ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004920 <DMA_CalcBaseAndBitshift+0x160>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	1d1a      	adds	r2, r3, #4
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80048aa:	e00d      	b.n	80048c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	461a      	mov	r2, r3
 80048b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004920 <DMA_CalcBaseAndBitshift+0x160>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80048ba:	e005      	b.n	80048c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	40020010 	.word	0x40020010
 80048dc:	40020028 	.word	0x40020028
 80048e0:	40020040 	.word	0x40020040
 80048e4:	40020058 	.word	0x40020058
 80048e8:	40020070 	.word	0x40020070
 80048ec:	40020088 	.word	0x40020088
 80048f0:	400200a0 	.word	0x400200a0
 80048f4:	400200b8 	.word	0x400200b8
 80048f8:	40020410 	.word	0x40020410
 80048fc:	40020428 	.word	0x40020428
 8004900:	40020440 	.word	0x40020440
 8004904:	40020458 	.word	0x40020458
 8004908:	40020470 	.word	0x40020470
 800490c:	40020488 	.word	0x40020488
 8004910:	400204a0 	.word	0x400204a0
 8004914:	400204b8 	.word	0x400204b8
 8004918:	aaaaaaab 	.word	0xaaaaaaab
 800491c:	08009f58 	.word	0x08009f58
 8004920:	fffffc00 	.word	0xfffffc00

08004924 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d120      	bne.n	800497a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493c:	2b03      	cmp	r3, #3
 800493e:	d858      	bhi.n	80049f2 <DMA_CheckFifoParam+0xce>
 8004940:	a201      	add	r2, pc, #4	@ (adr r2, 8004948 <DMA_CheckFifoParam+0x24>)
 8004942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004946:	bf00      	nop
 8004948:	08004959 	.word	0x08004959
 800494c:	0800496b 	.word	0x0800496b
 8004950:	08004959 	.word	0x08004959
 8004954:	080049f3 	.word	0x080049f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d048      	beq.n	80049f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004968:	e045      	b.n	80049f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004972:	d142      	bne.n	80049fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004978:	e03f      	b.n	80049fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004982:	d123      	bne.n	80049cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004988:	2b03      	cmp	r3, #3
 800498a:	d838      	bhi.n	80049fe <DMA_CheckFifoParam+0xda>
 800498c:	a201      	add	r2, pc, #4	@ (adr r2, 8004994 <DMA_CheckFifoParam+0x70>)
 800498e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004992:	bf00      	nop
 8004994:	080049a5 	.word	0x080049a5
 8004998:	080049ab 	.word	0x080049ab
 800499c:	080049a5 	.word	0x080049a5
 80049a0:	080049bd 	.word	0x080049bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	73fb      	strb	r3, [r7, #15]
        break;
 80049a8:	e030      	b.n	8004a0c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d025      	beq.n	8004a02 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049ba:	e022      	b.n	8004a02 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80049c4:	d11f      	bne.n	8004a06 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049ca:	e01c      	b.n	8004a06 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d902      	bls.n	80049da <DMA_CheckFifoParam+0xb6>
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d003      	beq.n	80049e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80049d8:	e018      	b.n	8004a0c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	73fb      	strb	r3, [r7, #15]
        break;
 80049de:	e015      	b.n	8004a0c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00e      	beq.n	8004a0a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	73fb      	strb	r3, [r7, #15]
    break;
 80049f0:	e00b      	b.n	8004a0a <DMA_CheckFifoParam+0xe6>
        break;
 80049f2:	bf00      	nop
 80049f4:	e00a      	b.n	8004a0c <DMA_CheckFifoParam+0xe8>
        break;
 80049f6:	bf00      	nop
 80049f8:	e008      	b.n	8004a0c <DMA_CheckFifoParam+0xe8>
        break;
 80049fa:	bf00      	nop
 80049fc:	e006      	b.n	8004a0c <DMA_CheckFifoParam+0xe8>
        break;
 80049fe:	bf00      	nop
 8004a00:	e004      	b.n	8004a0c <DMA_CheckFifoParam+0xe8>
        break;
 8004a02:	bf00      	nop
 8004a04:	e002      	b.n	8004a0c <DMA_CheckFifoParam+0xe8>
        break;
 8004a06:	bf00      	nop
 8004a08:	e000      	b.n	8004a0c <DMA_CheckFifoParam+0xe8>
    break;
 8004a0a:	bf00      	nop
    }
  }

  return status;
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop

08004a1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a38      	ldr	r2, [pc, #224]	@ (8004b10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d022      	beq.n	8004a7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a36      	ldr	r2, [pc, #216]	@ (8004b14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d01d      	beq.n	8004a7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a35      	ldr	r2, [pc, #212]	@ (8004b18 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d018      	beq.n	8004a7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a33      	ldr	r2, [pc, #204]	@ (8004b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d013      	beq.n	8004a7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a32      	ldr	r2, [pc, #200]	@ (8004b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00e      	beq.n	8004a7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a30      	ldr	r2, [pc, #192]	@ (8004b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d009      	beq.n	8004a7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a2f      	ldr	r2, [pc, #188]	@ (8004b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d004      	beq.n	8004a7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a2d      	ldr	r2, [pc, #180]	@ (8004b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d101      	bne.n	8004a7e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d01a      	beq.n	8004aba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	3b08      	subs	r3, #8
 8004a8c:	4a28      	ldr	r2, [pc, #160]	@ (8004b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	091b      	lsrs	r3, r3, #4
 8004a94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4b26      	ldr	r3, [pc, #152]	@ (8004b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a24      	ldr	r2, [pc, #144]	@ (8004b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004aa8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f003 031f 	and.w	r3, r3, #31
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	409a      	lsls	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004ab8:	e024      	b.n	8004b04 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	3b10      	subs	r3, #16
 8004ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8004b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac8:	091b      	lsrs	r3, r3, #4
 8004aca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	4a1c      	ldr	r2, [pc, #112]	@ (8004b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d806      	bhi.n	8004ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8004b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d902      	bls.n	8004ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	3308      	adds	r3, #8
 8004ae0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4b18      	ldr	r3, [pc, #96]	@ (8004b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004ae6:	4413      	add	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	461a      	mov	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a16      	ldr	r2, [pc, #88]	@ (8004b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004af4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 031f 	and.w	r3, r3, #31
 8004afc:	2201      	movs	r2, #1
 8004afe:	409a      	lsls	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b04:	bf00      	nop
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	58025408 	.word	0x58025408
 8004b14:	5802541c 	.word	0x5802541c
 8004b18:	58025430 	.word	0x58025430
 8004b1c:	58025444 	.word	0x58025444
 8004b20:	58025458 	.word	0x58025458
 8004b24:	5802546c 	.word	0x5802546c
 8004b28:	58025480 	.word	0x58025480
 8004b2c:	58025494 	.word	0x58025494
 8004b30:	cccccccd 	.word	0xcccccccd
 8004b34:	16009600 	.word	0x16009600
 8004b38:	58025880 	.word	0x58025880
 8004b3c:	aaaaaaab 	.word	0xaaaaaaab
 8004b40:	400204b8 	.word	0x400204b8
 8004b44:	4002040f 	.word	0x4002040f
 8004b48:	10008200 	.word	0x10008200
 8004b4c:	40020880 	.word	0x40020880

08004b50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d04a      	beq.n	8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d847      	bhi.n	8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a25      	ldr	r2, [pc, #148]	@ (8004c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d022      	beq.n	8004bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a24      	ldr	r2, [pc, #144]	@ (8004c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d01d      	beq.n	8004bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a22      	ldr	r2, [pc, #136]	@ (8004c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d018      	beq.n	8004bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a21      	ldr	r2, [pc, #132]	@ (8004c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d013      	beq.n	8004bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a1f      	ldr	r2, [pc, #124]	@ (8004c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00e      	beq.n	8004bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8004c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d009      	beq.n	8004bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1c      	ldr	r2, [pc, #112]	@ (8004c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d004      	beq.n	8004bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d101      	bne.n	8004bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	4b17      	ldr	r3, [pc, #92]	@ (8004c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	461a      	mov	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a15      	ldr	r2, [pc, #84]	@ (8004c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004bd8:	671a      	str	r2, [r3, #112]	@ 0x70
 8004bda:	e009      	b.n	8004bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4b14      	ldr	r3, [pc, #80]	@ (8004c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	461a      	mov	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a11      	ldr	r2, [pc, #68]	@ (8004c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004bee:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	58025408 	.word	0x58025408
 8004c0c:	5802541c 	.word	0x5802541c
 8004c10:	58025430 	.word	0x58025430
 8004c14:	58025444 	.word	0x58025444
 8004c18:	58025458 	.word	0x58025458
 8004c1c:	5802546c 	.word	0x5802546c
 8004c20:	58025480 	.word	0x58025480
 8004c24:	58025494 	.word	0x58025494
 8004c28:	1600963f 	.word	0x1600963f
 8004c2c:	58025940 	.word	0x58025940
 8004c30:	1000823f 	.word	0x1000823f
 8004c34:	40020940 	.word	0x40020940

08004c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b089      	sub	sp, #36	@ 0x24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004c46:	4b89      	ldr	r3, [pc, #548]	@ (8004e6c <HAL_GPIO_Init+0x234>)
 8004c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c4a:	e194      	b.n	8004f76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	2101      	movs	r1, #1
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	fa01 f303 	lsl.w	r3, r1, r3
 8004c58:	4013      	ands	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 8186 	beq.w	8004f70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d005      	beq.n	8004c7c <HAL_GPIO_Init+0x44>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f003 0303 	and.w	r3, r3, #3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d130      	bne.n	8004cde <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	2203      	movs	r2, #3
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	4013      	ands	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	091b      	lsrs	r3, r3, #4
 8004cc8:	f003 0201 	and.w	r2, r3, #1
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d017      	beq.n	8004d1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	2203      	movs	r2, #3
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfa:	43db      	mvns	r3, r3
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d123      	bne.n	8004d6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	08da      	lsrs	r2, r3, #3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3208      	adds	r2, #8
 8004d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	220f      	movs	r2, #15
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	43db      	mvns	r3, r3
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	4013      	ands	r3, r2
 8004d48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	691a      	ldr	r2, [r3, #16]
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	08da      	lsrs	r2, r3, #3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3208      	adds	r2, #8
 8004d68:	69b9      	ldr	r1, [r7, #24]
 8004d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	2203      	movs	r2, #3
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	4013      	ands	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f003 0203 	and.w	r2, r3, #3
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 80e0 	beq.w	8004f70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004db0:	4b2f      	ldr	r3, [pc, #188]	@ (8004e70 <HAL_GPIO_Init+0x238>)
 8004db2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004db6:	4a2e      	ldr	r2, [pc, #184]	@ (8004e70 <HAL_GPIO_Init+0x238>)
 8004db8:	f043 0302 	orr.w	r3, r3, #2
 8004dbc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8004e70 <HAL_GPIO_Init+0x238>)
 8004dc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dce:	4a29      	ldr	r2, [pc, #164]	@ (8004e74 <HAL_GPIO_Init+0x23c>)
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	089b      	lsrs	r3, r3, #2
 8004dd4:	3302      	adds	r3, #2
 8004dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	220f      	movs	r2, #15
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	43db      	mvns	r3, r3
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	4013      	ands	r3, r2
 8004df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a20      	ldr	r2, [pc, #128]	@ (8004e78 <HAL_GPIO_Init+0x240>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d052      	beq.n	8004ea0 <HAL_GPIO_Init+0x268>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8004e7c <HAL_GPIO_Init+0x244>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d031      	beq.n	8004e66 <HAL_GPIO_Init+0x22e>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a1e      	ldr	r2, [pc, #120]	@ (8004e80 <HAL_GPIO_Init+0x248>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d02b      	beq.n	8004e62 <HAL_GPIO_Init+0x22a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8004e84 <HAL_GPIO_Init+0x24c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d025      	beq.n	8004e5e <HAL_GPIO_Init+0x226>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a1c      	ldr	r2, [pc, #112]	@ (8004e88 <HAL_GPIO_Init+0x250>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d01f      	beq.n	8004e5a <HAL_GPIO_Init+0x222>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8004e8c <HAL_GPIO_Init+0x254>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d019      	beq.n	8004e56 <HAL_GPIO_Init+0x21e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a1a      	ldr	r2, [pc, #104]	@ (8004e90 <HAL_GPIO_Init+0x258>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d013      	beq.n	8004e52 <HAL_GPIO_Init+0x21a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a19      	ldr	r2, [pc, #100]	@ (8004e94 <HAL_GPIO_Init+0x25c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00d      	beq.n	8004e4e <HAL_GPIO_Init+0x216>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a18      	ldr	r2, [pc, #96]	@ (8004e98 <HAL_GPIO_Init+0x260>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d007      	beq.n	8004e4a <HAL_GPIO_Init+0x212>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a17      	ldr	r2, [pc, #92]	@ (8004e9c <HAL_GPIO_Init+0x264>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d101      	bne.n	8004e46 <HAL_GPIO_Init+0x20e>
 8004e42:	2309      	movs	r3, #9
 8004e44:	e02d      	b.n	8004ea2 <HAL_GPIO_Init+0x26a>
 8004e46:	230a      	movs	r3, #10
 8004e48:	e02b      	b.n	8004ea2 <HAL_GPIO_Init+0x26a>
 8004e4a:	2308      	movs	r3, #8
 8004e4c:	e029      	b.n	8004ea2 <HAL_GPIO_Init+0x26a>
 8004e4e:	2307      	movs	r3, #7
 8004e50:	e027      	b.n	8004ea2 <HAL_GPIO_Init+0x26a>
 8004e52:	2306      	movs	r3, #6
 8004e54:	e025      	b.n	8004ea2 <HAL_GPIO_Init+0x26a>
 8004e56:	2305      	movs	r3, #5
 8004e58:	e023      	b.n	8004ea2 <HAL_GPIO_Init+0x26a>
 8004e5a:	2304      	movs	r3, #4
 8004e5c:	e021      	b.n	8004ea2 <HAL_GPIO_Init+0x26a>
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e01f      	b.n	8004ea2 <HAL_GPIO_Init+0x26a>
 8004e62:	2302      	movs	r3, #2
 8004e64:	e01d      	b.n	8004ea2 <HAL_GPIO_Init+0x26a>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e01b      	b.n	8004ea2 <HAL_GPIO_Init+0x26a>
 8004e6a:	bf00      	nop
 8004e6c:	58000080 	.word	0x58000080
 8004e70:	58024400 	.word	0x58024400
 8004e74:	58000400 	.word	0x58000400
 8004e78:	58020000 	.word	0x58020000
 8004e7c:	58020400 	.word	0x58020400
 8004e80:	58020800 	.word	0x58020800
 8004e84:	58020c00 	.word	0x58020c00
 8004e88:	58021000 	.word	0x58021000
 8004e8c:	58021400 	.word	0x58021400
 8004e90:	58021800 	.word	0x58021800
 8004e94:	58021c00 	.word	0x58021c00
 8004e98:	58022000 	.word	0x58022000
 8004e9c:	58022400 	.word	0x58022400
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	69fa      	ldr	r2, [r7, #28]
 8004ea4:	f002 0203 	and.w	r2, r2, #3
 8004ea8:	0092      	lsls	r2, r2, #2
 8004eaa:	4093      	lsls	r3, r2
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004eb2:	4938      	ldr	r1, [pc, #224]	@ (8004f94 <HAL_GPIO_Init+0x35c>)
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	089b      	lsrs	r3, r3, #2
 8004eb8:	3302      	adds	r3, #2
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004ee6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004eee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	4013      	ands	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004f14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	43db      	mvns	r3, r3
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	4013      	ands	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	3301      	adds	r3, #1
 8004f74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f47f ae63 	bne.w	8004c4c <HAL_GPIO_Init+0x14>
  }
}
 8004f86:	bf00      	nop
 8004f88:	bf00      	nop
 8004f8a:	3724      	adds	r7, #36	@ 0x24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	58000400 	.word	0x58000400

08004f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	807b      	strh	r3, [r7, #2]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fa8:	787b      	ldrb	r3, [r7, #1]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fae:	887a      	ldrh	r2, [r7, #2]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004fb4:	e003      	b.n	8004fbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004fb6:	887b      	ldrh	r3, [r7, #2]
 8004fb8:	041a      	lsls	r2, r3, #16
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	619a      	str	r2, [r3, #24]
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
	...

08004fcc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004fd4:	4b19      	ldr	r3, [pc, #100]	@ (800503c <HAL_PWREx_ConfigSupply+0x70>)
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d00a      	beq.n	8004ff6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004fe0:	4b16      	ldr	r3, [pc, #88]	@ (800503c <HAL_PWREx_ConfigSupply+0x70>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d001      	beq.n	8004ff2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e01f      	b.n	8005032 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e01d      	b.n	8005032 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004ff6:	4b11      	ldr	r3, [pc, #68]	@ (800503c <HAL_PWREx_ConfigSupply+0x70>)
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f023 0207 	bic.w	r2, r3, #7
 8004ffe:	490f      	ldr	r1, [pc, #60]	@ (800503c <HAL_PWREx_ConfigSupply+0x70>)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4313      	orrs	r3, r2
 8005004:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005006:	f7fc fdcf 	bl	8001ba8 <HAL_GetTick>
 800500a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800500c:	e009      	b.n	8005022 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800500e:	f7fc fdcb 	bl	8001ba8 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800501c:	d901      	bls.n	8005022 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e007      	b.n	8005032 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005022:	4b06      	ldr	r3, [pc, #24]	@ (800503c <HAL_PWREx_ConfigSupply+0x70>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800502a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800502e:	d1ee      	bne.n	800500e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	58024800 	.word	0x58024800

08005040 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b08c      	sub	sp, #48	@ 0x30
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d102      	bne.n	8005054 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	f000 bc48 	b.w	80058e4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 8088 	beq.w	8005172 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005062:	4b99      	ldr	r3, [pc, #612]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800506a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800506c:	4b96      	ldr	r3, [pc, #600]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 800506e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005070:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005074:	2b10      	cmp	r3, #16
 8005076:	d007      	beq.n	8005088 <HAL_RCC_OscConfig+0x48>
 8005078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507a:	2b18      	cmp	r3, #24
 800507c:	d111      	bne.n	80050a2 <HAL_RCC_OscConfig+0x62>
 800507e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005080:	f003 0303 	and.w	r3, r3, #3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d10c      	bne.n	80050a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005088:	4b8f      	ldr	r3, [pc, #572]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d06d      	beq.n	8005170 <HAL_RCC_OscConfig+0x130>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d169      	bne.n	8005170 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	f000 bc21 	b.w	80058e4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050aa:	d106      	bne.n	80050ba <HAL_RCC_OscConfig+0x7a>
 80050ac:	4b86      	ldr	r3, [pc, #536]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a85      	ldr	r2, [pc, #532]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 80050b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	e02e      	b.n	8005118 <HAL_RCC_OscConfig+0xd8>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10c      	bne.n	80050dc <HAL_RCC_OscConfig+0x9c>
 80050c2:	4b81      	ldr	r3, [pc, #516]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a80      	ldr	r2, [pc, #512]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 80050c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	4b7e      	ldr	r3, [pc, #504]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a7d      	ldr	r2, [pc, #500]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 80050d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	e01d      	b.n	8005118 <HAL_RCC_OscConfig+0xd8>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050e4:	d10c      	bne.n	8005100 <HAL_RCC_OscConfig+0xc0>
 80050e6:	4b78      	ldr	r3, [pc, #480]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a77      	ldr	r2, [pc, #476]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 80050ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	4b75      	ldr	r3, [pc, #468]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a74      	ldr	r2, [pc, #464]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 80050f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	e00b      	b.n	8005118 <HAL_RCC_OscConfig+0xd8>
 8005100:	4b71      	ldr	r3, [pc, #452]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a70      	ldr	r2, [pc, #448]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 8005106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	4b6e      	ldr	r3, [pc, #440]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a6d      	ldr	r2, [pc, #436]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 8005112:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d013      	beq.n	8005148 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005120:	f7fc fd42 	bl	8001ba8 <HAL_GetTick>
 8005124:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005128:	f7fc fd3e 	bl	8001ba8 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b64      	cmp	r3, #100	@ 0x64
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e3d4      	b.n	80058e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800513a:	4b63      	ldr	r3, [pc, #396]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0f0      	beq.n	8005128 <HAL_RCC_OscConfig+0xe8>
 8005146:	e014      	b.n	8005172 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005148:	f7fc fd2e 	bl	8001ba8 <HAL_GetTick>
 800514c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005150:	f7fc fd2a 	bl	8001ba8 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b64      	cmp	r3, #100	@ 0x64
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e3c0      	b.n	80058e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005162:	4b59      	ldr	r3, [pc, #356]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1f0      	bne.n	8005150 <HAL_RCC_OscConfig+0x110>
 800516e:	e000      	b.n	8005172 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 80ca 	beq.w	8005314 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005180:	4b51      	ldr	r3, [pc, #324]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005188:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800518a:	4b4f      	ldr	r3, [pc, #316]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 800518c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800518e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d007      	beq.n	80051a6 <HAL_RCC_OscConfig+0x166>
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	2b18      	cmp	r3, #24
 800519a:	d156      	bne.n	800524a <HAL_RCC_OscConfig+0x20a>
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d151      	bne.n	800524a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051a6:	4b48      	ldr	r3, [pc, #288]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d005      	beq.n	80051be <HAL_RCC_OscConfig+0x17e>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e392      	b.n	80058e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80051be:	4b42      	ldr	r3, [pc, #264]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f023 0219 	bic.w	r2, r3, #25
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	493f      	ldr	r1, [pc, #252]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d0:	f7fc fcea 	bl	8001ba8 <HAL_GetTick>
 80051d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051d6:	e008      	b.n	80051ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051d8:	f7fc fce6 	bl	8001ba8 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e37c      	b.n	80058e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051ea:	4b37      	ldr	r3, [pc, #220]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0f0      	beq.n	80051d8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f6:	f7fc fce3 	bl	8001bc0 <HAL_GetREVID>
 80051fa:	4603      	mov	r3, r0
 80051fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005200:	4293      	cmp	r3, r2
 8005202:	d817      	bhi.n	8005234 <HAL_RCC_OscConfig+0x1f4>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b40      	cmp	r3, #64	@ 0x40
 800520a:	d108      	bne.n	800521e <HAL_RCC_OscConfig+0x1de>
 800520c:	4b2e      	ldr	r3, [pc, #184]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005214:	4a2c      	ldr	r2, [pc, #176]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 8005216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800521a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800521c:	e07a      	b.n	8005314 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800521e:	4b2a      	ldr	r3, [pc, #168]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	031b      	lsls	r3, r3, #12
 800522c:	4926      	ldr	r1, [pc, #152]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 800522e:	4313      	orrs	r3, r2
 8005230:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005232:	e06f      	b.n	8005314 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005234:	4b24      	ldr	r3, [pc, #144]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	061b      	lsls	r3, r3, #24
 8005242:	4921      	ldr	r1, [pc, #132]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 8005244:	4313      	orrs	r3, r2
 8005246:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005248:	e064      	b.n	8005314 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d047      	beq.n	80052e2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005252:	4b1d      	ldr	r3, [pc, #116]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f023 0219 	bic.w	r2, r3, #25
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	491a      	ldr	r1, [pc, #104]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 8005260:	4313      	orrs	r3, r2
 8005262:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005264:	f7fc fca0 	bl	8001ba8 <HAL_GetTick>
 8005268:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800526c:	f7fc fc9c 	bl	8001ba8 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e332      	b.n	80058e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800527e:	4b12      	ldr	r3, [pc, #72]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0f0      	beq.n	800526c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800528a:	f7fc fc99 	bl	8001bc0 <HAL_GetREVID>
 800528e:	4603      	mov	r3, r0
 8005290:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005294:	4293      	cmp	r3, r2
 8005296:	d819      	bhi.n	80052cc <HAL_RCC_OscConfig+0x28c>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	2b40      	cmp	r3, #64	@ 0x40
 800529e:	d108      	bne.n	80052b2 <HAL_RCC_OscConfig+0x272>
 80052a0:	4b09      	ldr	r3, [pc, #36]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80052a8:	4a07      	ldr	r2, [pc, #28]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 80052aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052ae:	6053      	str	r3, [r2, #4]
 80052b0:	e030      	b.n	8005314 <HAL_RCC_OscConfig+0x2d4>
 80052b2:	4b05      	ldr	r3, [pc, #20]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	031b      	lsls	r3, r3, #12
 80052c0:	4901      	ldr	r1, [pc, #4]	@ (80052c8 <HAL_RCC_OscConfig+0x288>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	604b      	str	r3, [r1, #4]
 80052c6:	e025      	b.n	8005314 <HAL_RCC_OscConfig+0x2d4>
 80052c8:	58024400 	.word	0x58024400
 80052cc:	4b9a      	ldr	r3, [pc, #616]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	061b      	lsls	r3, r3, #24
 80052da:	4997      	ldr	r1, [pc, #604]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	604b      	str	r3, [r1, #4]
 80052e0:	e018      	b.n	8005314 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052e2:	4b95      	ldr	r3, [pc, #596]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a94      	ldr	r2, [pc, #592]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 80052e8:	f023 0301 	bic.w	r3, r3, #1
 80052ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ee:	f7fc fc5b 	bl	8001ba8 <HAL_GetTick>
 80052f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052f4:	e008      	b.n	8005308 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052f6:	f7fc fc57 	bl	8001ba8 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e2ed      	b.n	80058e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005308:	4b8b      	ldr	r3, [pc, #556]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1f0      	bne.n	80052f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0310 	and.w	r3, r3, #16
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 80a9 	beq.w	8005474 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005322:	4b85      	ldr	r3, [pc, #532]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800532a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800532c:	4b82      	ldr	r3, [pc, #520]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 800532e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005330:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	2b08      	cmp	r3, #8
 8005336:	d007      	beq.n	8005348 <HAL_RCC_OscConfig+0x308>
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	2b18      	cmp	r3, #24
 800533c:	d13a      	bne.n	80053b4 <HAL_RCC_OscConfig+0x374>
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f003 0303 	and.w	r3, r3, #3
 8005344:	2b01      	cmp	r3, #1
 8005346:	d135      	bne.n	80053b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005348:	4b7b      	ldr	r3, [pc, #492]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005350:	2b00      	cmp	r3, #0
 8005352:	d005      	beq.n	8005360 <HAL_RCC_OscConfig+0x320>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	2b80      	cmp	r3, #128	@ 0x80
 800535a:	d001      	beq.n	8005360 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e2c1      	b.n	80058e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005360:	f7fc fc2e 	bl	8001bc0 <HAL_GetREVID>
 8005364:	4603      	mov	r3, r0
 8005366:	f241 0203 	movw	r2, #4099	@ 0x1003
 800536a:	4293      	cmp	r3, r2
 800536c:	d817      	bhi.n	800539e <HAL_RCC_OscConfig+0x35e>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	2b20      	cmp	r3, #32
 8005374:	d108      	bne.n	8005388 <HAL_RCC_OscConfig+0x348>
 8005376:	4b70      	ldr	r3, [pc, #448]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800537e:	4a6e      	ldr	r2, [pc, #440]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 8005380:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005384:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005386:	e075      	b.n	8005474 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005388:	4b6b      	ldr	r3, [pc, #428]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	069b      	lsls	r3, r3, #26
 8005396:	4968      	ldr	r1, [pc, #416]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 8005398:	4313      	orrs	r3, r2
 800539a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800539c:	e06a      	b.n	8005474 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800539e:	4b66      	ldr	r3, [pc, #408]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	061b      	lsls	r3, r3, #24
 80053ac:	4962      	ldr	r1, [pc, #392]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053b2:	e05f      	b.n	8005474 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d042      	beq.n	8005442 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80053bc:	4b5e      	ldr	r3, [pc, #376]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a5d      	ldr	r2, [pc, #372]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 80053c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c8:	f7fc fbee 	bl	8001ba8 <HAL_GetTick>
 80053cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80053d0:	f7fc fbea 	bl	8001ba8 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e280      	b.n	80058e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053e2:	4b55      	ldr	r3, [pc, #340]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0f0      	beq.n	80053d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053ee:	f7fc fbe7 	bl	8001bc0 <HAL_GetREVID>
 80053f2:	4603      	mov	r3, r0
 80053f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d817      	bhi.n	800542c <HAL_RCC_OscConfig+0x3ec>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	2b20      	cmp	r3, #32
 8005402:	d108      	bne.n	8005416 <HAL_RCC_OscConfig+0x3d6>
 8005404:	4b4c      	ldr	r3, [pc, #304]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800540c:	4a4a      	ldr	r2, [pc, #296]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 800540e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005412:	6053      	str	r3, [r2, #4]
 8005414:	e02e      	b.n	8005474 <HAL_RCC_OscConfig+0x434>
 8005416:	4b48      	ldr	r3, [pc, #288]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	069b      	lsls	r3, r3, #26
 8005424:	4944      	ldr	r1, [pc, #272]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 8005426:	4313      	orrs	r3, r2
 8005428:	604b      	str	r3, [r1, #4]
 800542a:	e023      	b.n	8005474 <HAL_RCC_OscConfig+0x434>
 800542c:	4b42      	ldr	r3, [pc, #264]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	061b      	lsls	r3, r3, #24
 800543a:	493f      	ldr	r1, [pc, #252]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 800543c:	4313      	orrs	r3, r2
 800543e:	60cb      	str	r3, [r1, #12]
 8005440:	e018      	b.n	8005474 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005442:	4b3d      	ldr	r3, [pc, #244]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a3c      	ldr	r2, [pc, #240]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 8005448:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800544c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544e:	f7fc fbab 	bl	8001ba8 <HAL_GetTick>
 8005452:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005454:	e008      	b.n	8005468 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005456:	f7fc fba7 	bl	8001ba8 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e23d      	b.n	80058e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005468:	4b33      	ldr	r3, [pc, #204]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1f0      	bne.n	8005456 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d036      	beq.n	80054ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d019      	beq.n	80054bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005488:	4b2b      	ldr	r3, [pc, #172]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 800548a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800548c:	4a2a      	ldr	r2, [pc, #168]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 800548e:	f043 0301 	orr.w	r3, r3, #1
 8005492:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005494:	f7fc fb88 	bl	8001ba8 <HAL_GetTick>
 8005498:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800549c:	f7fc fb84 	bl	8001ba8 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e21a      	b.n	80058e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054ae:	4b22      	ldr	r3, [pc, #136]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 80054b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f0      	beq.n	800549c <HAL_RCC_OscConfig+0x45c>
 80054ba:	e018      	b.n	80054ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054bc:	4b1e      	ldr	r3, [pc, #120]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 80054be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 80054c2:	f023 0301 	bic.w	r3, r3, #1
 80054c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c8:	f7fc fb6e 	bl	8001ba8 <HAL_GetTick>
 80054cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054d0:	f7fc fb6a 	bl	8001ba8 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e200      	b.n	80058e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054e2:	4b15      	ldr	r3, [pc, #84]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 80054e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d039      	beq.n	800556e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01c      	beq.n	800553c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005502:	4b0d      	ldr	r3, [pc, #52]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a0c      	ldr	r2, [pc, #48]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 8005508:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800550c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800550e:	f7fc fb4b 	bl	8001ba8 <HAL_GetTick>
 8005512:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005514:	e008      	b.n	8005528 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005516:	f7fc fb47 	bl	8001ba8 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e1dd      	b.n	80058e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005528:	4b03      	ldr	r3, [pc, #12]	@ (8005538 <HAL_RCC_OscConfig+0x4f8>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0f0      	beq.n	8005516 <HAL_RCC_OscConfig+0x4d6>
 8005534:	e01b      	b.n	800556e <HAL_RCC_OscConfig+0x52e>
 8005536:	bf00      	nop
 8005538:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800553c:	4b9b      	ldr	r3, [pc, #620]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a9a      	ldr	r2, [pc, #616]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 8005542:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005546:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005548:	f7fc fb2e 	bl	8001ba8 <HAL_GetTick>
 800554c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005550:	f7fc fb2a 	bl	8001ba8 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e1c0      	b.n	80058e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005562:	4b92      	ldr	r3, [pc, #584]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1f0      	bne.n	8005550 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 8081 	beq.w	800567e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800557c:	4b8c      	ldr	r3, [pc, #560]	@ (80057b0 <HAL_RCC_OscConfig+0x770>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a8b      	ldr	r2, [pc, #556]	@ (80057b0 <HAL_RCC_OscConfig+0x770>)
 8005582:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005586:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005588:	f7fc fb0e 	bl	8001ba8 <HAL_GetTick>
 800558c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005590:	f7fc fb0a 	bl	8001ba8 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b64      	cmp	r3, #100	@ 0x64
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e1a0      	b.n	80058e4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055a2:	4b83      	ldr	r3, [pc, #524]	@ (80057b0 <HAL_RCC_OscConfig+0x770>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0f0      	beq.n	8005590 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d106      	bne.n	80055c4 <HAL_RCC_OscConfig+0x584>
 80055b6:	4b7d      	ldr	r3, [pc, #500]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 80055b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ba:	4a7c      	ldr	r2, [pc, #496]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 80055bc:	f043 0301 	orr.w	r3, r3, #1
 80055c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80055c2:	e02d      	b.n	8005620 <HAL_RCC_OscConfig+0x5e0>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10c      	bne.n	80055e6 <HAL_RCC_OscConfig+0x5a6>
 80055cc:	4b77      	ldr	r3, [pc, #476]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 80055ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d0:	4a76      	ldr	r2, [pc, #472]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 80055d2:	f023 0301 	bic.w	r3, r3, #1
 80055d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80055d8:	4b74      	ldr	r3, [pc, #464]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 80055da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055dc:	4a73      	ldr	r2, [pc, #460]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 80055de:	f023 0304 	bic.w	r3, r3, #4
 80055e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80055e4:	e01c      	b.n	8005620 <HAL_RCC_OscConfig+0x5e0>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	2b05      	cmp	r3, #5
 80055ec:	d10c      	bne.n	8005608 <HAL_RCC_OscConfig+0x5c8>
 80055ee:	4b6f      	ldr	r3, [pc, #444]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 80055f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055f2:	4a6e      	ldr	r2, [pc, #440]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 80055f4:	f043 0304 	orr.w	r3, r3, #4
 80055f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80055fa:	4b6c      	ldr	r3, [pc, #432]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 80055fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055fe:	4a6b      	ldr	r2, [pc, #428]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 8005600:	f043 0301 	orr.w	r3, r3, #1
 8005604:	6713      	str	r3, [r2, #112]	@ 0x70
 8005606:	e00b      	b.n	8005620 <HAL_RCC_OscConfig+0x5e0>
 8005608:	4b68      	ldr	r3, [pc, #416]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 800560a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800560c:	4a67      	ldr	r2, [pc, #412]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 800560e:	f023 0301 	bic.w	r3, r3, #1
 8005612:	6713      	str	r3, [r2, #112]	@ 0x70
 8005614:	4b65      	ldr	r3, [pc, #404]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 8005616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005618:	4a64      	ldr	r2, [pc, #400]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 800561a:	f023 0304 	bic.w	r3, r3, #4
 800561e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d015      	beq.n	8005654 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005628:	f7fc fabe 	bl	8001ba8 <HAL_GetTick>
 800562c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800562e:	e00a      	b.n	8005646 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005630:	f7fc faba 	bl	8001ba8 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800563e:	4293      	cmp	r3, r2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e14e      	b.n	80058e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005646:	4b59      	ldr	r3, [pc, #356]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 8005648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0ee      	beq.n	8005630 <HAL_RCC_OscConfig+0x5f0>
 8005652:	e014      	b.n	800567e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005654:	f7fc faa8 	bl	8001ba8 <HAL_GetTick>
 8005658:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800565a:	e00a      	b.n	8005672 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800565c:	f7fc faa4 	bl	8001ba8 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800566a:	4293      	cmp	r3, r2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e138      	b.n	80058e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005672:	4b4e      	ldr	r3, [pc, #312]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 8005674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1ee      	bne.n	800565c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 812d 	beq.w	80058e2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005688:	4b48      	ldr	r3, [pc, #288]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005690:	2b18      	cmp	r3, #24
 8005692:	f000 80bd 	beq.w	8005810 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569a:	2b02      	cmp	r3, #2
 800569c:	f040 809e 	bne.w	80057dc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a0:	4b42      	ldr	r3, [pc, #264]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a41      	ldr	r2, [pc, #260]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 80056a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ac:	f7fc fa7c 	bl	8001ba8 <HAL_GetTick>
 80056b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056b4:	f7fc fa78 	bl	8001ba8 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e10e      	b.n	80058e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056c6:	4b39      	ldr	r3, [pc, #228]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f0      	bne.n	80056b4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056d2:	4b36      	ldr	r3, [pc, #216]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 80056d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056d6:	4b37      	ldr	r3, [pc, #220]	@ (80057b4 <HAL_RCC_OscConfig+0x774>)
 80056d8:	4013      	ands	r3, r2
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80056e2:	0112      	lsls	r2, r2, #4
 80056e4:	430a      	orrs	r2, r1
 80056e6:	4931      	ldr	r1, [pc, #196]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f0:	3b01      	subs	r3, #1
 80056f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056fa:	3b01      	subs	r3, #1
 80056fc:	025b      	lsls	r3, r3, #9
 80056fe:	b29b      	uxth	r3, r3
 8005700:	431a      	orrs	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005706:	3b01      	subs	r3, #1
 8005708:	041b      	lsls	r3, r3, #16
 800570a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005714:	3b01      	subs	r3, #1
 8005716:	061b      	lsls	r3, r3, #24
 8005718:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800571c:	4923      	ldr	r1, [pc, #140]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 800571e:	4313      	orrs	r3, r2
 8005720:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005722:	4b22      	ldr	r3, [pc, #136]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 8005724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005726:	4a21      	ldr	r2, [pc, #132]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 8005728:	f023 0301 	bic.w	r3, r3, #1
 800572c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800572e:	4b1f      	ldr	r3, [pc, #124]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 8005730:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005732:	4b21      	ldr	r3, [pc, #132]	@ (80057b8 <HAL_RCC_OscConfig+0x778>)
 8005734:	4013      	ands	r3, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800573a:	00d2      	lsls	r2, r2, #3
 800573c:	491b      	ldr	r1, [pc, #108]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 800573e:	4313      	orrs	r3, r2
 8005740:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005742:	4b1a      	ldr	r3, [pc, #104]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 8005744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005746:	f023 020c 	bic.w	r2, r3, #12
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574e:	4917      	ldr	r1, [pc, #92]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 8005750:	4313      	orrs	r3, r2
 8005752:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005754:	4b15      	ldr	r3, [pc, #84]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 8005756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005758:	f023 0202 	bic.w	r2, r3, #2
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005760:	4912      	ldr	r1, [pc, #72]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 8005762:	4313      	orrs	r3, r2
 8005764:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005766:	4b11      	ldr	r3, [pc, #68]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 8005768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576a:	4a10      	ldr	r2, [pc, #64]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 800576c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005770:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005772:	4b0e      	ldr	r3, [pc, #56]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 8005774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005776:	4a0d      	ldr	r2, [pc, #52]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 8005778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800577c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800577e:	4b0b      	ldr	r3, [pc, #44]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 8005780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005782:	4a0a      	ldr	r2, [pc, #40]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 8005784:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005788:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800578a:	4b08      	ldr	r3, [pc, #32]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 800578c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578e:	4a07      	ldr	r2, [pc, #28]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 8005790:	f043 0301 	orr.w	r3, r3, #1
 8005794:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005796:	4b05      	ldr	r3, [pc, #20]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a04      	ldr	r2, [pc, #16]	@ (80057ac <HAL_RCC_OscConfig+0x76c>)
 800579c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a2:	f7fc fa01 	bl	8001ba8 <HAL_GetTick>
 80057a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057a8:	e011      	b.n	80057ce <HAL_RCC_OscConfig+0x78e>
 80057aa:	bf00      	nop
 80057ac:	58024400 	.word	0x58024400
 80057b0:	58024800 	.word	0x58024800
 80057b4:	fffffc0c 	.word	0xfffffc0c
 80057b8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057bc:	f7fc f9f4 	bl	8001ba8 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e08a      	b.n	80058e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057ce:	4b47      	ldr	r3, [pc, #284]	@ (80058ec <HAL_RCC_OscConfig+0x8ac>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0f0      	beq.n	80057bc <HAL_RCC_OscConfig+0x77c>
 80057da:	e082      	b.n	80058e2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057dc:	4b43      	ldr	r3, [pc, #268]	@ (80058ec <HAL_RCC_OscConfig+0x8ac>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a42      	ldr	r2, [pc, #264]	@ (80058ec <HAL_RCC_OscConfig+0x8ac>)
 80057e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e8:	f7fc f9de 	bl	8001ba8 <HAL_GetTick>
 80057ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f0:	f7fc f9da 	bl	8001ba8 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e070      	b.n	80058e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005802:	4b3a      	ldr	r3, [pc, #232]	@ (80058ec <HAL_RCC_OscConfig+0x8ac>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f0      	bne.n	80057f0 <HAL_RCC_OscConfig+0x7b0>
 800580e:	e068      	b.n	80058e2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005810:	4b36      	ldr	r3, [pc, #216]	@ (80058ec <HAL_RCC_OscConfig+0x8ac>)
 8005812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005814:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005816:	4b35      	ldr	r3, [pc, #212]	@ (80058ec <HAL_RCC_OscConfig+0x8ac>)
 8005818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005820:	2b01      	cmp	r3, #1
 8005822:	d031      	beq.n	8005888 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f003 0203 	and.w	r2, r3, #3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800582e:	429a      	cmp	r2, r3
 8005830:	d12a      	bne.n	8005888 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	091b      	lsrs	r3, r3, #4
 8005836:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800583e:	429a      	cmp	r2, r3
 8005840:	d122      	bne.n	8005888 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800584e:	429a      	cmp	r2, r3
 8005850:	d11a      	bne.n	8005888 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	0a5b      	lsrs	r3, r3, #9
 8005856:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800585e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005860:	429a      	cmp	r2, r3
 8005862:	d111      	bne.n	8005888 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	0c1b      	lsrs	r3, r3, #16
 8005868:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005870:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005872:	429a      	cmp	r2, r3
 8005874:	d108      	bne.n	8005888 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	0e1b      	lsrs	r3, r3, #24
 800587a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005882:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005884:	429a      	cmp	r2, r3
 8005886:	d001      	beq.n	800588c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e02b      	b.n	80058e4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800588c:	4b17      	ldr	r3, [pc, #92]	@ (80058ec <HAL_RCC_OscConfig+0x8ac>)
 800588e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005890:	08db      	lsrs	r3, r3, #3
 8005892:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005896:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d01f      	beq.n	80058e2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80058a2:	4b12      	ldr	r3, [pc, #72]	@ (80058ec <HAL_RCC_OscConfig+0x8ac>)
 80058a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a6:	4a11      	ldr	r2, [pc, #68]	@ (80058ec <HAL_RCC_OscConfig+0x8ac>)
 80058a8:	f023 0301 	bic.w	r3, r3, #1
 80058ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058ae:	f7fc f97b 	bl	8001ba8 <HAL_GetTick>
 80058b2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80058b4:	bf00      	nop
 80058b6:	f7fc f977 	bl	8001ba8 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058be:	4293      	cmp	r3, r2
 80058c0:	d0f9      	beq.n	80058b6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058c2:	4b0a      	ldr	r3, [pc, #40]	@ (80058ec <HAL_RCC_OscConfig+0x8ac>)
 80058c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058c6:	4b0a      	ldr	r3, [pc, #40]	@ (80058f0 <HAL_RCC_OscConfig+0x8b0>)
 80058c8:	4013      	ands	r3, r2
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80058ce:	00d2      	lsls	r2, r2, #3
 80058d0:	4906      	ldr	r1, [pc, #24]	@ (80058ec <HAL_RCC_OscConfig+0x8ac>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80058d6:	4b05      	ldr	r3, [pc, #20]	@ (80058ec <HAL_RCC_OscConfig+0x8ac>)
 80058d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058da:	4a04      	ldr	r2, [pc, #16]	@ (80058ec <HAL_RCC_OscConfig+0x8ac>)
 80058dc:	f043 0301 	orr.w	r3, r3, #1
 80058e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3730      	adds	r7, #48	@ 0x30
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	58024400 	.word	0x58024400
 80058f0:	ffff0007 	.word	0xffff0007

080058f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e19c      	b.n	8005c42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005908:	4b8a      	ldr	r3, [pc, #552]	@ (8005b34 <HAL_RCC_ClockConfig+0x240>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 030f 	and.w	r3, r3, #15
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d910      	bls.n	8005938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005916:	4b87      	ldr	r3, [pc, #540]	@ (8005b34 <HAL_RCC_ClockConfig+0x240>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f023 020f 	bic.w	r2, r3, #15
 800591e:	4985      	ldr	r1, [pc, #532]	@ (8005b34 <HAL_RCC_ClockConfig+0x240>)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	4313      	orrs	r3, r2
 8005924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005926:	4b83      	ldr	r3, [pc, #524]	@ (8005b34 <HAL_RCC_ClockConfig+0x240>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d001      	beq.n	8005938 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e184      	b.n	8005c42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b00      	cmp	r3, #0
 8005942:	d010      	beq.n	8005966 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691a      	ldr	r2, [r3, #16]
 8005948:	4b7b      	ldr	r3, [pc, #492]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005950:	429a      	cmp	r2, r3
 8005952:	d908      	bls.n	8005966 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005954:	4b78      	ldr	r3, [pc, #480]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	4975      	ldr	r1, [pc, #468]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005962:	4313      	orrs	r3, r2
 8005964:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b00      	cmp	r3, #0
 8005970:	d010      	beq.n	8005994 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	695a      	ldr	r2, [r3, #20]
 8005976:	4b70      	ldr	r3, [pc, #448]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800597e:	429a      	cmp	r2, r3
 8005980:	d908      	bls.n	8005994 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005982:	4b6d      	ldr	r3, [pc, #436]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	496a      	ldr	r1, [pc, #424]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005990:	4313      	orrs	r3, r2
 8005992:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0310 	and.w	r3, r3, #16
 800599c:	2b00      	cmp	r3, #0
 800599e:	d010      	beq.n	80059c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	699a      	ldr	r2, [r3, #24]
 80059a4:	4b64      	ldr	r3, [pc, #400]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d908      	bls.n	80059c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059b0:	4b61      	ldr	r3, [pc, #388]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	495e      	ldr	r1, [pc, #376]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d010      	beq.n	80059f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69da      	ldr	r2, [r3, #28]
 80059d2:	4b59      	ldr	r3, [pc, #356]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059da:	429a      	cmp	r2, r3
 80059dc:	d908      	bls.n	80059f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80059de:	4b56      	ldr	r3, [pc, #344]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	4953      	ldr	r1, [pc, #332]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d010      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	4b4d      	ldr	r3, [pc, #308]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d908      	bls.n	8005a1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	f023 020f 	bic.w	r2, r3, #15
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	4947      	ldr	r1, [pc, #284]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d055      	beq.n	8005ad6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005a2a:	4b43      	ldr	r3, [pc, #268]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	4940      	ldr	r1, [pc, #256]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d107      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a44:	4b3c      	ldr	r3, [pc, #240]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d121      	bne.n	8005a94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e0f6      	b.n	8005c42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	d107      	bne.n	8005a6c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a5c:	4b36      	ldr	r3, [pc, #216]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d115      	bne.n	8005a94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e0ea      	b.n	8005c42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d107      	bne.n	8005a84 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a74:	4b30      	ldr	r3, [pc, #192]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d109      	bne.n	8005a94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0de      	b.n	8005c42 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a84:	4b2c      	ldr	r3, [pc, #176]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e0d6      	b.n	8005c42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a94:	4b28      	ldr	r3, [pc, #160]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f023 0207 	bic.w	r2, r3, #7
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4925      	ldr	r1, [pc, #148]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aa6:	f7fc f87f 	bl	8001ba8 <HAL_GetTick>
 8005aaa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aac:	e00a      	b.n	8005ac4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aae:	f7fc f87b 	bl	8001ba8 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e0be      	b.n	8005c42 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d1eb      	bne.n	8005aae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d010      	beq.n	8005b04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	4b14      	ldr	r3, [pc, #80]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	f003 030f 	and.w	r3, r3, #15
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d208      	bcs.n	8005b04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005af2:	4b11      	ldr	r3, [pc, #68]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	f023 020f 	bic.w	r2, r3, #15
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	490e      	ldr	r1, [pc, #56]	@ (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b04:	4b0b      	ldr	r3, [pc, #44]	@ (8005b34 <HAL_RCC_ClockConfig+0x240>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 030f 	and.w	r3, r3, #15
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d214      	bcs.n	8005b3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b12:	4b08      	ldr	r3, [pc, #32]	@ (8005b34 <HAL_RCC_ClockConfig+0x240>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f023 020f 	bic.w	r2, r3, #15
 8005b1a:	4906      	ldr	r1, [pc, #24]	@ (8005b34 <HAL_RCC_ClockConfig+0x240>)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b22:	4b04      	ldr	r3, [pc, #16]	@ (8005b34 <HAL_RCC_ClockConfig+0x240>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 030f 	and.w	r3, r3, #15
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d005      	beq.n	8005b3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e086      	b.n	8005c42 <HAL_RCC_ClockConfig+0x34e>
 8005b34:	52002000 	.word	0x52002000
 8005b38:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0304 	and.w	r3, r3, #4
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d010      	beq.n	8005b6a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691a      	ldr	r2, [r3, #16]
 8005b4c:	4b3f      	ldr	r3, [pc, #252]	@ (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d208      	bcs.n	8005b6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b58:	4b3c      	ldr	r3, [pc, #240]	@ (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	4939      	ldr	r1, [pc, #228]	@ (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0308 	and.w	r3, r3, #8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d010      	beq.n	8005b98 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695a      	ldr	r2, [r3, #20]
 8005b7a:	4b34      	ldr	r3, [pc, #208]	@ (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d208      	bcs.n	8005b98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b86:	4b31      	ldr	r3, [pc, #196]	@ (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	492e      	ldr	r1, [pc, #184]	@ (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d010      	beq.n	8005bc6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	699a      	ldr	r2, [r3, #24]
 8005ba8:	4b28      	ldr	r3, [pc, #160]	@ (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d208      	bcs.n	8005bc6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005bb4:	4b25      	ldr	r3, [pc, #148]	@ (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	4922      	ldr	r1, [pc, #136]	@ (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d010      	beq.n	8005bf4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69da      	ldr	r2, [r3, #28]
 8005bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d208      	bcs.n	8005bf4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005be2:	4b1a      	ldr	r3, [pc, #104]	@ (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	4917      	ldr	r1, [pc, #92]	@ (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005bf4:	f000 f834 	bl	8005c60 <HAL_RCC_GetSysClockFreq>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	4b14      	ldr	r3, [pc, #80]	@ (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	0a1b      	lsrs	r3, r3, #8
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	4912      	ldr	r1, [pc, #72]	@ (8005c50 <HAL_RCC_ClockConfig+0x35c>)
 8005c06:	5ccb      	ldrb	r3, [r1, r3]
 8005c08:	f003 031f 	and.w	r3, r3, #31
 8005c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c12:	4b0e      	ldr	r3, [pc, #56]	@ (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	f003 030f 	and.w	r3, r3, #15
 8005c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8005c50 <HAL_RCC_ClockConfig+0x35c>)
 8005c1c:	5cd3      	ldrb	r3, [r2, r3]
 8005c1e:	f003 031f 	and.w	r3, r3, #31
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	fa22 f303 	lsr.w	r3, r2, r3
 8005c28:	4a0a      	ldr	r2, [pc, #40]	@ (8005c54 <HAL_RCC_ClockConfig+0x360>)
 8005c2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8005c58 <HAL_RCC_ClockConfig+0x364>)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005c32:	4b0a      	ldr	r3, [pc, #40]	@ (8005c5c <HAL_RCC_ClockConfig+0x368>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fb ff6c 	bl	8001b14 <HAL_InitTick>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	58024400 	.word	0x58024400
 8005c50:	08009f48 	.word	0x08009f48
 8005c54:	24000004 	.word	0x24000004
 8005c58:	24000000 	.word	0x24000000
 8005c5c:	24000008 	.word	0x24000008

08005c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b089      	sub	sp, #36	@ 0x24
 8005c64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c66:	4bb3      	ldr	r3, [pc, #716]	@ (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c6e:	2b18      	cmp	r3, #24
 8005c70:	f200 8155 	bhi.w	8005f1e <HAL_RCC_GetSysClockFreq+0x2be>
 8005c74:	a201      	add	r2, pc, #4	@ (adr r2, 8005c7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7a:	bf00      	nop
 8005c7c:	08005ce1 	.word	0x08005ce1
 8005c80:	08005f1f 	.word	0x08005f1f
 8005c84:	08005f1f 	.word	0x08005f1f
 8005c88:	08005f1f 	.word	0x08005f1f
 8005c8c:	08005f1f 	.word	0x08005f1f
 8005c90:	08005f1f 	.word	0x08005f1f
 8005c94:	08005f1f 	.word	0x08005f1f
 8005c98:	08005f1f 	.word	0x08005f1f
 8005c9c:	08005d07 	.word	0x08005d07
 8005ca0:	08005f1f 	.word	0x08005f1f
 8005ca4:	08005f1f 	.word	0x08005f1f
 8005ca8:	08005f1f 	.word	0x08005f1f
 8005cac:	08005f1f 	.word	0x08005f1f
 8005cb0:	08005f1f 	.word	0x08005f1f
 8005cb4:	08005f1f 	.word	0x08005f1f
 8005cb8:	08005f1f 	.word	0x08005f1f
 8005cbc:	08005d0d 	.word	0x08005d0d
 8005cc0:	08005f1f 	.word	0x08005f1f
 8005cc4:	08005f1f 	.word	0x08005f1f
 8005cc8:	08005f1f 	.word	0x08005f1f
 8005ccc:	08005f1f 	.word	0x08005f1f
 8005cd0:	08005f1f 	.word	0x08005f1f
 8005cd4:	08005f1f 	.word	0x08005f1f
 8005cd8:	08005f1f 	.word	0x08005f1f
 8005cdc:	08005d13 	.word	0x08005d13
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ce0:	4b94      	ldr	r3, [pc, #592]	@ (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0320 	and.w	r3, r3, #32
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d009      	beq.n	8005d00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cec:	4b91      	ldr	r3, [pc, #580]	@ (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	08db      	lsrs	r3, r3, #3
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	4a90      	ldr	r2, [pc, #576]	@ (8005f38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cfc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005cfe:	e111      	b.n	8005f24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d00:	4b8d      	ldr	r3, [pc, #564]	@ (8005f38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d02:	61bb      	str	r3, [r7, #24]
      break;
 8005d04:	e10e      	b.n	8005f24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005d06:	4b8d      	ldr	r3, [pc, #564]	@ (8005f3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d08:	61bb      	str	r3, [r7, #24]
      break;
 8005d0a:	e10b      	b.n	8005f24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005d0c:	4b8c      	ldr	r3, [pc, #560]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d0e:	61bb      	str	r3, [r7, #24]
      break;
 8005d10:	e108      	b.n	8005f24 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d12:	4b88      	ldr	r3, [pc, #544]	@ (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d16:	f003 0303 	and.w	r3, r3, #3
 8005d1a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005d1c:	4b85      	ldr	r3, [pc, #532]	@ (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d20:	091b      	lsrs	r3, r3, #4
 8005d22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d26:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d28:	4b82      	ldr	r3, [pc, #520]	@ (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d32:	4b80      	ldr	r3, [pc, #512]	@ (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d36:	08db      	lsrs	r3, r3, #3
 8005d38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	fb02 f303 	mul.w	r3, r2, r3
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 80e1 	beq.w	8005f18 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	f000 8083 	beq.w	8005e64 <HAL_RCC_GetSysClockFreq+0x204>
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	f200 80a1 	bhi.w	8005ea8 <HAL_RCC_GetSysClockFreq+0x248>
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <HAL_RCC_GetSysClockFreq+0x114>
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d056      	beq.n	8005e20 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005d72:	e099      	b.n	8005ea8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d74:	4b6f      	ldr	r3, [pc, #444]	@ (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0320 	and.w	r3, r3, #32
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d02d      	beq.n	8005ddc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d80:	4b6c      	ldr	r3, [pc, #432]	@ (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	08db      	lsrs	r3, r3, #3
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	4a6b      	ldr	r2, [pc, #428]	@ (8005f38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d90:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	ee07 3a90 	vmov	s15, r3
 8005d98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	ee07 3a90 	vmov	s15, r3
 8005da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005daa:	4b62      	ldr	r3, [pc, #392]	@ (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dba:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dbe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005dda:	e087      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005f48 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dee:	4b51      	ldr	r3, [pc, #324]	@ (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df6:	ee07 3a90 	vmov	s15, r3
 8005dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e02:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e1e:	e065      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005f4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e32:	4b40      	ldr	r3, [pc, #256]	@ (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e46:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e62:	e043      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005f50 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e76:	4b2f      	ldr	r3, [pc, #188]	@ (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e8a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ea6:	e021      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005f4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eba:	4b1e      	ldr	r3, [pc, #120]	@ (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eca:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ece:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005eea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005eec:	4b11      	ldr	r3, [pc, #68]	@ (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef0:	0a5b      	lsrs	r3, r3, #9
 8005ef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	ee07 3a90 	vmov	s15, r3
 8005f00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f04:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f10:	ee17 3a90 	vmov	r3, s15
 8005f14:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005f16:	e005      	b.n	8005f24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	61bb      	str	r3, [r7, #24]
      break;
 8005f1c:	e002      	b.n	8005f24 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005f1e:	4b07      	ldr	r3, [pc, #28]	@ (8005f3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f20:	61bb      	str	r3, [r7, #24]
      break;
 8005f22:	bf00      	nop
  }

  return sysclockfreq;
 8005f24:	69bb      	ldr	r3, [r7, #24]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3724      	adds	r7, #36	@ 0x24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	58024400 	.word	0x58024400
 8005f38:	03d09000 	.word	0x03d09000
 8005f3c:	003d0900 	.word	0x003d0900
 8005f40:	007a1200 	.word	0x007a1200
 8005f44:	46000000 	.word	0x46000000
 8005f48:	4c742400 	.word	0x4c742400
 8005f4c:	4a742400 	.word	0x4a742400
 8005f50:	4af42400 	.word	0x4af42400

08005f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f5a:	f7ff fe81 	bl	8005c60 <HAL_RCC_GetSysClockFreq>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	4b10      	ldr	r3, [pc, #64]	@ (8005fa4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	0a1b      	lsrs	r3, r3, #8
 8005f66:	f003 030f 	and.w	r3, r3, #15
 8005f6a:	490f      	ldr	r1, [pc, #60]	@ (8005fa8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f6c:	5ccb      	ldrb	r3, [r1, r3]
 8005f6e:	f003 031f 	and.w	r3, r3, #31
 8005f72:	fa22 f303 	lsr.w	r3, r2, r3
 8005f76:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f78:	4b0a      	ldr	r3, [pc, #40]	@ (8005fa4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	f003 030f 	and.w	r3, r3, #15
 8005f80:	4a09      	ldr	r2, [pc, #36]	@ (8005fa8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f82:	5cd3      	ldrb	r3, [r2, r3]
 8005f84:	f003 031f 	and.w	r3, r3, #31
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f8e:	4a07      	ldr	r2, [pc, #28]	@ (8005fac <HAL_RCC_GetHCLKFreq+0x58>)
 8005f90:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f92:	4a07      	ldr	r2, [pc, #28]	@ (8005fb0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005f98:	4b04      	ldr	r3, [pc, #16]	@ (8005fac <HAL_RCC_GetHCLKFreq+0x58>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	58024400 	.word	0x58024400
 8005fa8:	08009f48 	.word	0x08009f48
 8005fac:	24000004 	.word	0x24000004
 8005fb0:	24000000 	.word	0x24000000

08005fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005fb8:	f7ff ffcc 	bl	8005f54 <HAL_RCC_GetHCLKFreq>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	4b06      	ldr	r3, [pc, #24]	@ (8005fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	091b      	lsrs	r3, r3, #4
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	4904      	ldr	r1, [pc, #16]	@ (8005fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fca:	5ccb      	ldrb	r3, [r1, r3]
 8005fcc:	f003 031f 	and.w	r3, r3, #31
 8005fd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	58024400 	.word	0x58024400
 8005fdc:	08009f48 	.word	0x08009f48

08005fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005fe4:	f7ff ffb6 	bl	8005f54 <HAL_RCC_GetHCLKFreq>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	4b06      	ldr	r3, [pc, #24]	@ (8006004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	0a1b      	lsrs	r3, r3, #8
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	4904      	ldr	r1, [pc, #16]	@ (8006008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ff6:	5ccb      	ldrb	r3, [r1, r3]
 8005ff8:	f003 031f 	and.w	r3, r3, #31
 8005ffc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006000:	4618      	mov	r0, r3
 8006002:	bd80      	pop	{r7, pc}
 8006004:	58024400 	.word	0x58024400
 8006008:	08009f48 	.word	0x08009f48

0800600c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800600c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006010:	b0ca      	sub	sp, #296	@ 0x128
 8006012:	af00      	add	r7, sp, #0
 8006014:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006018:	2300      	movs	r3, #0
 800601a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800601e:	2300      	movs	r3, #0
 8006020:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006030:	2500      	movs	r5, #0
 8006032:	ea54 0305 	orrs.w	r3, r4, r5
 8006036:	d049      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800603e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006042:	d02f      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006044:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006048:	d828      	bhi.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800604a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800604e:	d01a      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006050:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006054:	d822      	bhi.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800605a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800605e:	d007      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006060:	e01c      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006062:	4bb8      	ldr	r3, [pc, #736]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006066:	4ab7      	ldr	r2, [pc, #732]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800606c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800606e:	e01a      	b.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006074:	3308      	adds	r3, #8
 8006076:	2102      	movs	r1, #2
 8006078:	4618      	mov	r0, r3
 800607a:	f002 fb61 	bl	8008740 <RCCEx_PLL2_Config>
 800607e:	4603      	mov	r3, r0
 8006080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006084:	e00f      	b.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800608a:	3328      	adds	r3, #40	@ 0x28
 800608c:	2102      	movs	r1, #2
 800608e:	4618      	mov	r0, r3
 8006090:	f002 fc08 	bl	80088a4 <RCCEx_PLL3_Config>
 8006094:	4603      	mov	r3, r0
 8006096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800609a:	e004      	b.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060a2:	e000      	b.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80060a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10a      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80060ae:	4ba5      	ldr	r3, [pc, #660]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80060b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060bc:	4aa1      	ldr	r2, [pc, #644]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060be:	430b      	orrs	r3, r1
 80060c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80060c2:	e003      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80060d8:	f04f 0900 	mov.w	r9, #0
 80060dc:	ea58 0309 	orrs.w	r3, r8, r9
 80060e0:	d047      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80060e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	d82a      	bhi.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80060ec:	a201      	add	r2, pc, #4	@ (adr r2, 80060f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80060ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f2:	bf00      	nop
 80060f4:	08006109 	.word	0x08006109
 80060f8:	08006117 	.word	0x08006117
 80060fc:	0800612d 	.word	0x0800612d
 8006100:	0800614b 	.word	0x0800614b
 8006104:	0800614b 	.word	0x0800614b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006108:	4b8e      	ldr	r3, [pc, #568]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800610a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610c:	4a8d      	ldr	r2, [pc, #564]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800610e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006112:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006114:	e01a      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800611a:	3308      	adds	r3, #8
 800611c:	2100      	movs	r1, #0
 800611e:	4618      	mov	r0, r3
 8006120:	f002 fb0e 	bl	8008740 <RCCEx_PLL2_Config>
 8006124:	4603      	mov	r3, r0
 8006126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800612a:	e00f      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800612c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006130:	3328      	adds	r3, #40	@ 0x28
 8006132:	2100      	movs	r1, #0
 8006134:	4618      	mov	r0, r3
 8006136:	f002 fbb5 	bl	80088a4 <RCCEx_PLL3_Config>
 800613a:	4603      	mov	r3, r0
 800613c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006140:	e004      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006148:	e000      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800614a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800614c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10a      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006154:	4b7b      	ldr	r3, [pc, #492]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006158:	f023 0107 	bic.w	r1, r3, #7
 800615c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006162:	4a78      	ldr	r2, [pc, #480]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006164:	430b      	orrs	r3, r1
 8006166:	6513      	str	r3, [r2, #80]	@ 0x50
 8006168:	e003      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800616a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800616e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800617e:	f04f 0b00 	mov.w	fp, #0
 8006182:	ea5a 030b 	orrs.w	r3, sl, fp
 8006186:	d04c      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800618e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006192:	d030      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006198:	d829      	bhi.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800619a:	2bc0      	cmp	r3, #192	@ 0xc0
 800619c:	d02d      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800619e:	2bc0      	cmp	r3, #192	@ 0xc0
 80061a0:	d825      	bhi.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80061a2:	2b80      	cmp	r3, #128	@ 0x80
 80061a4:	d018      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80061a6:	2b80      	cmp	r3, #128	@ 0x80
 80061a8:	d821      	bhi.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80061ae:	2b40      	cmp	r3, #64	@ 0x40
 80061b0:	d007      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80061b2:	e01c      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061b4:	4b63      	ldr	r3, [pc, #396]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b8:	4a62      	ldr	r2, [pc, #392]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80061c0:	e01c      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c6:	3308      	adds	r3, #8
 80061c8:	2100      	movs	r1, #0
 80061ca:	4618      	mov	r0, r3
 80061cc:	f002 fab8 	bl	8008740 <RCCEx_PLL2_Config>
 80061d0:	4603      	mov	r3, r0
 80061d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80061d6:	e011      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061dc:	3328      	adds	r3, #40	@ 0x28
 80061de:	2100      	movs	r1, #0
 80061e0:	4618      	mov	r0, r3
 80061e2:	f002 fb5f 	bl	80088a4 <RCCEx_PLL3_Config>
 80061e6:	4603      	mov	r3, r0
 80061e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80061ec:	e006      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061f4:	e002      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80061f6:	bf00      	nop
 80061f8:	e000      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80061fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10a      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006204:	4b4f      	ldr	r3, [pc, #316]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006208:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800620c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006212:	4a4c      	ldr	r2, [pc, #304]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006214:	430b      	orrs	r3, r1
 8006216:	6513      	str	r3, [r2, #80]	@ 0x50
 8006218:	e003      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800621e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800622e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006232:	2300      	movs	r3, #0
 8006234:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006238:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800623c:	460b      	mov	r3, r1
 800623e:	4313      	orrs	r3, r2
 8006240:	d053      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006246:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800624a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800624e:	d035      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006250:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006254:	d82e      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006256:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800625a:	d031      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800625c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006260:	d828      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006262:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006266:	d01a      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006268:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800626c:	d822      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006272:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006276:	d007      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006278:	e01c      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800627a:	4b32      	ldr	r3, [pc, #200]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800627c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627e:	4a31      	ldr	r2, [pc, #196]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006284:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006286:	e01c      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628c:	3308      	adds	r3, #8
 800628e:	2100      	movs	r1, #0
 8006290:	4618      	mov	r0, r3
 8006292:	f002 fa55 	bl	8008740 <RCCEx_PLL2_Config>
 8006296:	4603      	mov	r3, r0
 8006298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800629c:	e011      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800629e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a2:	3328      	adds	r3, #40	@ 0x28
 80062a4:	2100      	movs	r1, #0
 80062a6:	4618      	mov	r0, r3
 80062a8:	f002 fafc 	bl	80088a4 <RCCEx_PLL3_Config>
 80062ac:	4603      	mov	r3, r0
 80062ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062b2:	e006      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062ba:	e002      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80062bc:	bf00      	nop
 80062be:	e000      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80062c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10b      	bne.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80062ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ce:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80062d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80062da:	4a1a      	ldr	r2, [pc, #104]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062dc:	430b      	orrs	r3, r1
 80062de:	6593      	str	r3, [r2, #88]	@ 0x58
 80062e0:	e003      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80062ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80062f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80062fa:	2300      	movs	r3, #0
 80062fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006300:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006304:	460b      	mov	r3, r1
 8006306:	4313      	orrs	r3, r2
 8006308:	d056      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800630a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006312:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006316:	d038      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006318:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800631c:	d831      	bhi.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800631e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006322:	d034      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006324:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006328:	d82b      	bhi.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800632a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800632e:	d01d      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006330:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006334:	d825      	bhi.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006336:	2b00      	cmp	r3, #0
 8006338:	d006      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800633a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800633e:	d00a      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006340:	e01f      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006342:	bf00      	nop
 8006344:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006348:	4ba2      	ldr	r3, [pc, #648]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800634a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634c:	4aa1      	ldr	r2, [pc, #644]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800634e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006352:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006354:	e01c      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800635a:	3308      	adds	r3, #8
 800635c:	2100      	movs	r1, #0
 800635e:	4618      	mov	r0, r3
 8006360:	f002 f9ee 	bl	8008740 <RCCEx_PLL2_Config>
 8006364:	4603      	mov	r3, r0
 8006366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800636a:	e011      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800636c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006370:	3328      	adds	r3, #40	@ 0x28
 8006372:	2100      	movs	r1, #0
 8006374:	4618      	mov	r0, r3
 8006376:	f002 fa95 	bl	80088a4 <RCCEx_PLL3_Config>
 800637a:	4603      	mov	r3, r0
 800637c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006380:	e006      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006388:	e002      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800638a:	bf00      	nop
 800638c:	e000      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800638e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006390:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10b      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006398:	4b8e      	ldr	r3, [pc, #568]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800639a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800639c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80063a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063a8:	4a8a      	ldr	r2, [pc, #552]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063aa:	430b      	orrs	r3, r1
 80063ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80063ae:	e003      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80063b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80063c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80063c8:	2300      	movs	r3, #0
 80063ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80063ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80063d2:	460b      	mov	r3, r1
 80063d4:	4313      	orrs	r3, r2
 80063d6:	d03a      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80063d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063de:	2b30      	cmp	r3, #48	@ 0x30
 80063e0:	d01f      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80063e2:	2b30      	cmp	r3, #48	@ 0x30
 80063e4:	d819      	bhi.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80063e6:	2b20      	cmp	r3, #32
 80063e8:	d00c      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80063ea:	2b20      	cmp	r3, #32
 80063ec:	d815      	bhi.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d019      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80063f2:	2b10      	cmp	r3, #16
 80063f4:	d111      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063f6:	4b77      	ldr	r3, [pc, #476]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fa:	4a76      	ldr	r2, [pc, #472]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006400:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006402:	e011      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006408:	3308      	adds	r3, #8
 800640a:	2102      	movs	r1, #2
 800640c:	4618      	mov	r0, r3
 800640e:	f002 f997 	bl	8008740 <RCCEx_PLL2_Config>
 8006412:	4603      	mov	r3, r0
 8006414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006418:	e006      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006420:	e002      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006422:	bf00      	nop
 8006424:	e000      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10a      	bne.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006430:	4b68      	ldr	r3, [pc, #416]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006434:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800643c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800643e:	4a65      	ldr	r2, [pc, #404]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006440:	430b      	orrs	r3, r1
 8006442:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006444:	e003      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800644a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800644e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800645a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800645e:	2300      	movs	r3, #0
 8006460:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006464:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006468:	460b      	mov	r3, r1
 800646a:	4313      	orrs	r3, r2
 800646c:	d051      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800646e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006474:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006478:	d035      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800647a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800647e:	d82e      	bhi.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006480:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006484:	d031      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006486:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800648a:	d828      	bhi.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800648c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006490:	d01a      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006496:	d822      	bhi.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800649c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064a0:	d007      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80064a2:	e01c      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064a4:	4b4b      	ldr	r3, [pc, #300]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a8:	4a4a      	ldr	r2, [pc, #296]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80064b0:	e01c      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b6:	3308      	adds	r3, #8
 80064b8:	2100      	movs	r1, #0
 80064ba:	4618      	mov	r0, r3
 80064bc:	f002 f940 	bl	8008740 <RCCEx_PLL2_Config>
 80064c0:	4603      	mov	r3, r0
 80064c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80064c6:	e011      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064cc:	3328      	adds	r3, #40	@ 0x28
 80064ce:	2100      	movs	r1, #0
 80064d0:	4618      	mov	r0, r3
 80064d2:	f002 f9e7 	bl	80088a4 <RCCEx_PLL3_Config>
 80064d6:	4603      	mov	r3, r0
 80064d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80064dc:	e006      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064e4:	e002      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80064e6:	bf00      	nop
 80064e8:	e000      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80064ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80064f4:	4b37      	ldr	r3, [pc, #220]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80064fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006502:	4a34      	ldr	r2, [pc, #208]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006504:	430b      	orrs	r3, r1
 8006506:	6513      	str	r3, [r2, #80]	@ 0x50
 8006508:	e003      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800650e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800651e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006522:	2300      	movs	r3, #0
 8006524:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006528:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800652c:	460b      	mov	r3, r1
 800652e:	4313      	orrs	r3, r2
 8006530:	d056      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006536:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006538:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800653c:	d033      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800653e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006542:	d82c      	bhi.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006544:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006548:	d02f      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800654a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800654e:	d826      	bhi.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006550:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006554:	d02b      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006556:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800655a:	d820      	bhi.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800655c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006560:	d012      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006562:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006566:	d81a      	bhi.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006568:	2b00      	cmp	r3, #0
 800656a:	d022      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800656c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006570:	d115      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006576:	3308      	adds	r3, #8
 8006578:	2101      	movs	r1, #1
 800657a:	4618      	mov	r0, r3
 800657c:	f002 f8e0 	bl	8008740 <RCCEx_PLL2_Config>
 8006580:	4603      	mov	r3, r0
 8006582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006586:	e015      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800658c:	3328      	adds	r3, #40	@ 0x28
 800658e:	2101      	movs	r1, #1
 8006590:	4618      	mov	r0, r3
 8006592:	f002 f987 	bl	80088a4 <RCCEx_PLL3_Config>
 8006596:	4603      	mov	r3, r0
 8006598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800659c:	e00a      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065a4:	e006      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80065a6:	bf00      	nop
 80065a8:	e004      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80065aa:	bf00      	nop
 80065ac:	e002      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80065ae:	bf00      	nop
 80065b0:	e000      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80065b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10d      	bne.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80065bc:	4b05      	ldr	r3, [pc, #20]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80065c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065ca:	4a02      	ldr	r2, [pc, #8]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065cc:	430b      	orrs	r3, r1
 80065ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80065d0:	e006      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80065d2:	bf00      	nop
 80065d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80065e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80065ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065f0:	2300      	movs	r3, #0
 80065f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065f6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80065fa:	460b      	mov	r3, r1
 80065fc:	4313      	orrs	r3, r2
 80065fe:	d055      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006604:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006608:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800660c:	d033      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800660e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006612:	d82c      	bhi.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006618:	d02f      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800661a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800661e:	d826      	bhi.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006620:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006624:	d02b      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006626:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800662a:	d820      	bhi.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800662c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006630:	d012      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006632:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006636:	d81a      	bhi.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006638:	2b00      	cmp	r3, #0
 800663a:	d022      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800663c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006640:	d115      	bne.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006646:	3308      	adds	r3, #8
 8006648:	2101      	movs	r1, #1
 800664a:	4618      	mov	r0, r3
 800664c:	f002 f878 	bl	8008740 <RCCEx_PLL2_Config>
 8006650:	4603      	mov	r3, r0
 8006652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006656:	e015      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800665c:	3328      	adds	r3, #40	@ 0x28
 800665e:	2101      	movs	r1, #1
 8006660:	4618      	mov	r0, r3
 8006662:	f002 f91f 	bl	80088a4 <RCCEx_PLL3_Config>
 8006666:	4603      	mov	r3, r0
 8006668:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800666c:	e00a      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006674:	e006      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006676:	bf00      	nop
 8006678:	e004      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800667a:	bf00      	nop
 800667c:	e002      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800667e:	bf00      	nop
 8006680:	e000      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006682:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10b      	bne.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800668c:	4ba3      	ldr	r3, [pc, #652]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800668e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006690:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006698:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800669c:	4a9f      	ldr	r2, [pc, #636]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800669e:	430b      	orrs	r3, r1
 80066a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80066a2:	e003      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80066b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066bc:	2300      	movs	r3, #0
 80066be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80066c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80066c6:	460b      	mov	r3, r1
 80066c8:	4313      	orrs	r3, r2
 80066ca:	d037      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80066cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066d6:	d00e      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80066d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066dc:	d816      	bhi.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d018      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80066e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066e6:	d111      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066e8:	4b8c      	ldr	r3, [pc, #560]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ec:	4a8b      	ldr	r2, [pc, #556]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066f4:	e00f      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fa:	3308      	adds	r3, #8
 80066fc:	2101      	movs	r1, #1
 80066fe:	4618      	mov	r0, r3
 8006700:	f002 f81e 	bl	8008740 <RCCEx_PLL2_Config>
 8006704:	4603      	mov	r3, r0
 8006706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800670a:	e004      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006712:	e000      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10a      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800671e:	4b7f      	ldr	r3, [pc, #508]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006722:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800672a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800672c:	4a7b      	ldr	r2, [pc, #492]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800672e:	430b      	orrs	r3, r1
 8006730:	6513      	str	r3, [r2, #80]	@ 0x50
 8006732:	e003      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006734:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006738:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800673c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006744:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006748:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800674c:	2300      	movs	r3, #0
 800674e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006752:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006756:	460b      	mov	r3, r1
 8006758:	4313      	orrs	r3, r2
 800675a:	d039      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800675c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006762:	2b03      	cmp	r3, #3
 8006764:	d81c      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006766:	a201      	add	r2, pc, #4	@ (adr r2, 800676c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676c:	080067a9 	.word	0x080067a9
 8006770:	0800677d 	.word	0x0800677d
 8006774:	0800678b 	.word	0x0800678b
 8006778:	080067a9 	.word	0x080067a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800677c:	4b67      	ldr	r3, [pc, #412]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800677e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006780:	4a66      	ldr	r2, [pc, #408]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006782:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006786:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006788:	e00f      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800678a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678e:	3308      	adds	r3, #8
 8006790:	2102      	movs	r1, #2
 8006792:	4618      	mov	r0, r3
 8006794:	f001 ffd4 	bl	8008740 <RCCEx_PLL2_Config>
 8006798:	4603      	mov	r3, r0
 800679a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800679e:	e004      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067a6:	e000      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80067a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10a      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80067b2:	4b5a      	ldr	r3, [pc, #360]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067b6:	f023 0103 	bic.w	r1, r3, #3
 80067ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067c0:	4a56      	ldr	r2, [pc, #344]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067c2:	430b      	orrs	r3, r1
 80067c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80067c6:	e003      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80067dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067e0:	2300      	movs	r3, #0
 80067e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80067ea:	460b      	mov	r3, r1
 80067ec:	4313      	orrs	r3, r2
 80067ee:	f000 809f 	beq.w	8006930 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067f2:	4b4b      	ldr	r3, [pc, #300]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a4a      	ldr	r2, [pc, #296]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067fe:	f7fb f9d3 	bl	8001ba8 <HAL_GetTick>
 8006802:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006806:	e00b      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006808:	f7fb f9ce 	bl	8001ba8 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	2b64      	cmp	r3, #100	@ 0x64
 8006816:	d903      	bls.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800681e:	e005      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006820:	4b3f      	ldr	r3, [pc, #252]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0ed      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800682c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006830:	2b00      	cmp	r3, #0
 8006832:	d179      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006834:	4b39      	ldr	r3, [pc, #228]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006836:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006840:	4053      	eors	r3, r2
 8006842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006846:	2b00      	cmp	r3, #0
 8006848:	d015      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800684a:	4b34      	ldr	r3, [pc, #208]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800684c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800684e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006852:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006856:	4b31      	ldr	r3, [pc, #196]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800685a:	4a30      	ldr	r2, [pc, #192]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800685c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006860:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006862:	4b2e      	ldr	r3, [pc, #184]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006866:	4a2d      	ldr	r2, [pc, #180]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006868:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800686c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800686e:	4a2b      	ldr	r2, [pc, #172]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006870:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006874:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800687e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006882:	d118      	bne.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006884:	f7fb f990 	bl	8001ba8 <HAL_GetTick>
 8006888:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800688c:	e00d      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800688e:	f7fb f98b 	bl	8001ba8 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006898:	1ad2      	subs	r2, r2, r3
 800689a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800689e:	429a      	cmp	r2, r3
 80068a0:	d903      	bls.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80068a8:	e005      	b.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068aa:	4b1c      	ldr	r3, [pc, #112]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0eb      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80068b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d129      	bne.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068ce:	d10e      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80068d0:	4b12      	ldr	r3, [pc, #72]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80068d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068e0:	091a      	lsrs	r2, r3, #4
 80068e2:	4b10      	ldr	r3, [pc, #64]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80068e4:	4013      	ands	r3, r2
 80068e6:	4a0d      	ldr	r2, [pc, #52]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068e8:	430b      	orrs	r3, r1
 80068ea:	6113      	str	r3, [r2, #16]
 80068ec:	e005      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80068ee:	4b0b      	ldr	r3, [pc, #44]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	4a0a      	ldr	r2, [pc, #40]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80068f8:	6113      	str	r3, [r2, #16]
 80068fa:	4b08      	ldr	r3, [pc, #32]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068fc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80068fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006902:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800690a:	4a04      	ldr	r2, [pc, #16]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800690c:	430b      	orrs	r3, r1
 800690e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006910:	e00e      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006916:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800691a:	e009      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800691c:	58024400 	.word	0x58024400
 8006920:	58024800 	.word	0x58024800
 8006924:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006928:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800692c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006938:	f002 0301 	and.w	r3, r2, #1
 800693c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006940:	2300      	movs	r3, #0
 8006942:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006946:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800694a:	460b      	mov	r3, r1
 800694c:	4313      	orrs	r3, r2
 800694e:	f000 8089 	beq.w	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006956:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006958:	2b28      	cmp	r3, #40	@ 0x28
 800695a:	d86b      	bhi.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800695c:	a201      	add	r2, pc, #4	@ (adr r2, 8006964 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800695e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006962:	bf00      	nop
 8006964:	08006a3d 	.word	0x08006a3d
 8006968:	08006a35 	.word	0x08006a35
 800696c:	08006a35 	.word	0x08006a35
 8006970:	08006a35 	.word	0x08006a35
 8006974:	08006a35 	.word	0x08006a35
 8006978:	08006a35 	.word	0x08006a35
 800697c:	08006a35 	.word	0x08006a35
 8006980:	08006a35 	.word	0x08006a35
 8006984:	08006a09 	.word	0x08006a09
 8006988:	08006a35 	.word	0x08006a35
 800698c:	08006a35 	.word	0x08006a35
 8006990:	08006a35 	.word	0x08006a35
 8006994:	08006a35 	.word	0x08006a35
 8006998:	08006a35 	.word	0x08006a35
 800699c:	08006a35 	.word	0x08006a35
 80069a0:	08006a35 	.word	0x08006a35
 80069a4:	08006a1f 	.word	0x08006a1f
 80069a8:	08006a35 	.word	0x08006a35
 80069ac:	08006a35 	.word	0x08006a35
 80069b0:	08006a35 	.word	0x08006a35
 80069b4:	08006a35 	.word	0x08006a35
 80069b8:	08006a35 	.word	0x08006a35
 80069bc:	08006a35 	.word	0x08006a35
 80069c0:	08006a35 	.word	0x08006a35
 80069c4:	08006a3d 	.word	0x08006a3d
 80069c8:	08006a35 	.word	0x08006a35
 80069cc:	08006a35 	.word	0x08006a35
 80069d0:	08006a35 	.word	0x08006a35
 80069d4:	08006a35 	.word	0x08006a35
 80069d8:	08006a35 	.word	0x08006a35
 80069dc:	08006a35 	.word	0x08006a35
 80069e0:	08006a35 	.word	0x08006a35
 80069e4:	08006a3d 	.word	0x08006a3d
 80069e8:	08006a35 	.word	0x08006a35
 80069ec:	08006a35 	.word	0x08006a35
 80069f0:	08006a35 	.word	0x08006a35
 80069f4:	08006a35 	.word	0x08006a35
 80069f8:	08006a35 	.word	0x08006a35
 80069fc:	08006a35 	.word	0x08006a35
 8006a00:	08006a35 	.word	0x08006a35
 8006a04:	08006a3d 	.word	0x08006a3d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a0c:	3308      	adds	r3, #8
 8006a0e:	2101      	movs	r1, #1
 8006a10:	4618      	mov	r0, r3
 8006a12:	f001 fe95 	bl	8008740 <RCCEx_PLL2_Config>
 8006a16:	4603      	mov	r3, r0
 8006a18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a1c:	e00f      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a22:	3328      	adds	r3, #40	@ 0x28
 8006a24:	2101      	movs	r1, #1
 8006a26:	4618      	mov	r0, r3
 8006a28:	f001 ff3c 	bl	80088a4 <RCCEx_PLL3_Config>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a32:	e004      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a3a:	e000      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10a      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a46:	4bbf      	ldr	r3, [pc, #764]	@ (8006d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a4a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a54:	4abb      	ldr	r2, [pc, #748]	@ (8006d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a56:	430b      	orrs	r3, r1
 8006a58:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a5a:	e003      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6c:	f002 0302 	and.w	r3, r2, #2
 8006a70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a74:	2300      	movs	r3, #0
 8006a76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a7a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4313      	orrs	r3, r2
 8006a82:	d041      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a8a:	2b05      	cmp	r3, #5
 8006a8c:	d824      	bhi.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a94 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a94:	08006ae1 	.word	0x08006ae1
 8006a98:	08006aad 	.word	0x08006aad
 8006a9c:	08006ac3 	.word	0x08006ac3
 8006aa0:	08006ae1 	.word	0x08006ae1
 8006aa4:	08006ae1 	.word	0x08006ae1
 8006aa8:	08006ae1 	.word	0x08006ae1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab0:	3308      	adds	r3, #8
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f001 fe43 	bl	8008740 <RCCEx_PLL2_Config>
 8006aba:	4603      	mov	r3, r0
 8006abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ac0:	e00f      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac6:	3328      	adds	r3, #40	@ 0x28
 8006ac8:	2101      	movs	r1, #1
 8006aca:	4618      	mov	r0, r3
 8006acc:	f001 feea 	bl	80088a4 <RCCEx_PLL3_Config>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ad6:	e004      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ade:	e000      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10a      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006aea:	4b96      	ldr	r3, [pc, #600]	@ (8006d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aee:	f023 0107 	bic.w	r1, r3, #7
 8006af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006af8:	4a92      	ldr	r2, [pc, #584]	@ (8006d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006afa:	430b      	orrs	r3, r1
 8006afc:	6553      	str	r3, [r2, #84]	@ 0x54
 8006afe:	e003      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	f002 0304 	and.w	r3, r2, #4
 8006b14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b1e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4313      	orrs	r3, r2
 8006b26:	d044      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b30:	2b05      	cmp	r3, #5
 8006b32:	d825      	bhi.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006b34:	a201      	add	r2, pc, #4	@ (adr r2, 8006b3c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3a:	bf00      	nop
 8006b3c:	08006b89 	.word	0x08006b89
 8006b40:	08006b55 	.word	0x08006b55
 8006b44:	08006b6b 	.word	0x08006b6b
 8006b48:	08006b89 	.word	0x08006b89
 8006b4c:	08006b89 	.word	0x08006b89
 8006b50:	08006b89 	.word	0x08006b89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b58:	3308      	adds	r3, #8
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f001 fdef 	bl	8008740 <RCCEx_PLL2_Config>
 8006b62:	4603      	mov	r3, r0
 8006b64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b68:	e00f      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b6e:	3328      	adds	r3, #40	@ 0x28
 8006b70:	2101      	movs	r1, #1
 8006b72:	4618      	mov	r0, r3
 8006b74:	f001 fe96 	bl	80088a4 <RCCEx_PLL3_Config>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b7e:	e004      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b86:	e000      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10b      	bne.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b92:	4b6c      	ldr	r3, [pc, #432]	@ (8006d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b96:	f023 0107 	bic.w	r1, r3, #7
 8006b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ba2:	4a68      	ldr	r2, [pc, #416]	@ (8006d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ba4:	430b      	orrs	r3, r1
 8006ba6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ba8:	e003      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	f002 0320 	and.w	r3, r2, #32
 8006bbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	d055      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006bde:	d033      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006be4:	d82c      	bhi.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bea:	d02f      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bf0:	d826      	bhi.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006bf2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bf6:	d02b      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006bf8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bfc:	d820      	bhi.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006bfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c02:	d012      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006c04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c08:	d81a      	bhi.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d022      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006c0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c12:	d115      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c18:	3308      	adds	r3, #8
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f001 fd8f 	bl	8008740 <RCCEx_PLL2_Config>
 8006c22:	4603      	mov	r3, r0
 8006c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c28:	e015      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2e:	3328      	adds	r3, #40	@ 0x28
 8006c30:	2102      	movs	r1, #2
 8006c32:	4618      	mov	r0, r3
 8006c34:	f001 fe36 	bl	80088a4 <RCCEx_PLL3_Config>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c3e:	e00a      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c46:	e006      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c48:	bf00      	nop
 8006c4a:	e004      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c4c:	bf00      	nop
 8006c4e:	e002      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c50:	bf00      	nop
 8006c52:	e000      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10b      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c5e:	4b39      	ldr	r3, [pc, #228]	@ (8006d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c62:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c6e:	4a35      	ldr	r2, [pc, #212]	@ (8006d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c70:	430b      	orrs	r3, r1
 8006c72:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c74:	e003      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	d058      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ca6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006caa:	d033      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006cac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006cb0:	d82c      	bhi.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cb6:	d02f      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cbc:	d826      	bhi.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006cbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cc2:	d02b      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006cc4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cc8:	d820      	bhi.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006cca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cce:	d012      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006cd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cd4:	d81a      	bhi.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d022      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cde:	d115      	bne.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f001 fd29 	bl	8008740 <RCCEx_PLL2_Config>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006cf4:	e015      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfa:	3328      	adds	r3, #40	@ 0x28
 8006cfc:	2102      	movs	r1, #2
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f001 fdd0 	bl	80088a4 <RCCEx_PLL3_Config>
 8006d04:	4603      	mov	r3, r0
 8006d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006d0a:	e00a      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d12:	e006      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d14:	bf00      	nop
 8006d16:	e004      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d18:	bf00      	nop
 8006d1a:	e002      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d1c:	bf00      	nop
 8006d1e:	e000      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10e      	bne.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d2a:	4b06      	ldr	r3, [pc, #24]	@ (8006d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d2e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d3a:	4a02      	ldr	r2, [pc, #8]	@ (8006d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d3c:	430b      	orrs	r3, r1
 8006d3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d40:	e006      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006d42:	bf00      	nop
 8006d44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d58:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006d5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d60:	2300      	movs	r3, #0
 8006d62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d66:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	d055      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d78:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d7c:	d033      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006d7e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d82:	d82c      	bhi.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d88:	d02f      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006d8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d8e:	d826      	bhi.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d90:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d94:	d02b      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006d96:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d9a:	d820      	bhi.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006da0:	d012      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006da2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006da6:	d81a      	bhi.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d022      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006dac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006db0:	d115      	bne.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db6:	3308      	adds	r3, #8
 8006db8:	2100      	movs	r1, #0
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f001 fcc0 	bl	8008740 <RCCEx_PLL2_Config>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006dc6:	e015      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dcc:	3328      	adds	r3, #40	@ 0x28
 8006dce:	2102      	movs	r1, #2
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f001 fd67 	bl	80088a4 <RCCEx_PLL3_Config>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ddc:	e00a      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006de4:	e006      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006de6:	bf00      	nop
 8006de8:	e004      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006dea:	bf00      	nop
 8006dec:	e002      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006dee:	bf00      	nop
 8006df0:	e000      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006df4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10b      	bne.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006dfc:	4ba1      	ldr	r3, [pc, #644]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e00:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006e0c:	4a9d      	ldr	r2, [pc, #628]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e0e:	430b      	orrs	r3, r1
 8006e10:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e12:	e003      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	f002 0308 	and.w	r3, r2, #8
 8006e28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e32:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006e36:	460b      	mov	r3, r1
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	d01e      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e48:	d10c      	bne.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e4e:	3328      	adds	r3, #40	@ 0x28
 8006e50:	2102      	movs	r1, #2
 8006e52:	4618      	mov	r0, r3
 8006e54:	f001 fd26 	bl	80088a4 <RCCEx_PLL3_Config>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e64:	4b87      	ldr	r3, [pc, #540]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e68:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e74:	4a83      	ldr	r2, [pc, #524]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e76:	430b      	orrs	r3, r1
 8006e78:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e82:	f002 0310 	and.w	r3, r2, #16
 8006e86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e90:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006e94:	460b      	mov	r3, r1
 8006e96:	4313      	orrs	r3, r2
 8006e98:	d01e      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ea6:	d10c      	bne.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eac:	3328      	adds	r3, #40	@ 0x28
 8006eae:	2102      	movs	r1, #2
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f001 fcf7 	bl	80088a4 <RCCEx_PLL3_Config>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ec2:	4b70      	ldr	r3, [pc, #448]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ec6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ed2:	4a6c      	ldr	r2, [pc, #432]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ed4:	430b      	orrs	r3, r1
 8006ed6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006ee4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006eee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	d03e      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f04:	d022      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006f06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f0a:	d81b      	bhi.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d003      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f14:	d00b      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006f16:	e015      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1c:	3308      	adds	r3, #8
 8006f1e:	2100      	movs	r1, #0
 8006f20:	4618      	mov	r0, r3
 8006f22:	f001 fc0d 	bl	8008740 <RCCEx_PLL2_Config>
 8006f26:	4603      	mov	r3, r0
 8006f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f2c:	e00f      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f32:	3328      	adds	r3, #40	@ 0x28
 8006f34:	2102      	movs	r1, #2
 8006f36:	4618      	mov	r0, r3
 8006f38:	f001 fcb4 	bl	80088a4 <RCCEx_PLL3_Config>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f42:	e004      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f4a:	e000      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10b      	bne.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f56:	4b4b      	ldr	r3, [pc, #300]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f5a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f66:	4a47      	ldr	r2, [pc, #284]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f68:	430b      	orrs	r3, r1
 8006f6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f6c:	e003      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006f82:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f84:	2300      	movs	r3, #0
 8006f86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f88:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	d03b      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f9e:	d01f      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006fa0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fa4:	d818      	bhi.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006fa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006faa:	d003      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006fac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fb0:	d007      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006fb2:	e011      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb4:	4b33      	ldr	r3, [pc, #204]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb8:	4a32      	ldr	r2, [pc, #200]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006fc0:	e00f      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc6:	3328      	adds	r3, #40	@ 0x28
 8006fc8:	2101      	movs	r1, #1
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f001 fc6a 	bl	80088a4 <RCCEx_PLL3_Config>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006fd6:	e004      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fde:	e000      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10b      	bne.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fea:	4b26      	ldr	r3, [pc, #152]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ffa:	4a22      	ldr	r2, [pc, #136]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ffc:	430b      	orrs	r3, r1
 8006ffe:	6553      	str	r3, [r2, #84]	@ 0x54
 8007000:	e003      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007006:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800700a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800700e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007012:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007016:	673b      	str	r3, [r7, #112]	@ 0x70
 8007018:	2300      	movs	r3, #0
 800701a:	677b      	str	r3, [r7, #116]	@ 0x74
 800701c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007020:	460b      	mov	r3, r1
 8007022:	4313      	orrs	r3, r2
 8007024:	d034      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800702a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007034:	d007      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007036:	e011      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007038:	4b12      	ldr	r3, [pc, #72]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800703a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703c:	4a11      	ldr	r2, [pc, #68]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800703e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007042:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007044:	e00e      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800704a:	3308      	adds	r3, #8
 800704c:	2102      	movs	r1, #2
 800704e:	4618      	mov	r0, r3
 8007050:	f001 fb76 	bl	8008740 <RCCEx_PLL2_Config>
 8007054:	4603      	mov	r3, r0
 8007056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800705a:	e003      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007062:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10d      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800706c:	4b05      	ldr	r3, [pc, #20]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800706e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007070:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800707a:	4a02      	ldr	r2, [pc, #8]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800707c:	430b      	orrs	r3, r1
 800707e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007080:	e006      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007082:	bf00      	nop
 8007084:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800708c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007098:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800709c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800709e:	2300      	movs	r3, #0
 80070a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80070a6:	460b      	mov	r3, r1
 80070a8:	4313      	orrs	r3, r2
 80070aa:	d00c      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80070ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070b0:	3328      	adds	r3, #40	@ 0x28
 80070b2:	2102      	movs	r1, #2
 80070b4:	4618      	mov	r0, r3
 80070b6:	f001 fbf5 	bl	80088a4 <RCCEx_PLL3_Config>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80070c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80070d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80070d4:	2300      	movs	r3, #0
 80070d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80070d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80070dc:	460b      	mov	r3, r1
 80070de:	4313      	orrs	r3, r2
 80070e0:	d038      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80070e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070ee:	d018      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80070f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070f4:	d811      	bhi.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80070f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070fa:	d014      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80070fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007100:	d80b      	bhi.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007102:	2b00      	cmp	r3, #0
 8007104:	d011      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800710a:	d106      	bne.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800710c:	4bc3      	ldr	r3, [pc, #780]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800710e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007110:	4ac2      	ldr	r2, [pc, #776]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007116:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007118:	e008      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007120:	e004      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007122:	bf00      	nop
 8007124:	e002      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007126:	bf00      	nop
 8007128:	e000      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800712a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800712c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10b      	bne.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007134:	4bb9      	ldr	r3, [pc, #740]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007138:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800713c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007140:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007144:	4ab5      	ldr	r2, [pc, #724]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007146:	430b      	orrs	r3, r1
 8007148:	6553      	str	r3, [r2, #84]	@ 0x54
 800714a:	e003      	b.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800714c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007160:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007162:	2300      	movs	r3, #0
 8007164:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007166:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800716a:	460b      	mov	r3, r1
 800716c:	4313      	orrs	r3, r2
 800716e:	d009      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007170:	4baa      	ldr	r3, [pc, #680]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007174:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800717c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800717e:	4aa7      	ldr	r2, [pc, #668]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007180:	430b      	orrs	r3, r1
 8007182:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007190:	653b      	str	r3, [r7, #80]	@ 0x50
 8007192:	2300      	movs	r3, #0
 8007194:	657b      	str	r3, [r7, #84]	@ 0x54
 8007196:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800719a:	460b      	mov	r3, r1
 800719c:	4313      	orrs	r3, r2
 800719e:	d00a      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80071a0:	4b9e      	ldr	r3, [pc, #632]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80071a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80071b0:	4a9a      	ldr	r2, [pc, #616]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071b2:	430b      	orrs	r3, r1
 80071b4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80071b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071be:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80071c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071c4:	2300      	movs	r3, #0
 80071c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071c8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80071cc:	460b      	mov	r3, r1
 80071ce:	4313      	orrs	r3, r2
 80071d0:	d009      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80071d2:	4b92      	ldr	r3, [pc, #584]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071d6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80071da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071e0:	4a8e      	ldr	r2, [pc, #568]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071e2:	430b      	orrs	r3, r1
 80071e4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80071e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ee:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80071f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80071f4:	2300      	movs	r3, #0
 80071f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80071f8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80071fc:	460b      	mov	r3, r1
 80071fe:	4313      	orrs	r3, r2
 8007200:	d00e      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007202:	4b86      	ldr	r3, [pc, #536]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	4a85      	ldr	r2, [pc, #532]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007208:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800720c:	6113      	str	r3, [r2, #16]
 800720e:	4b83      	ldr	r3, [pc, #524]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007210:	6919      	ldr	r1, [r3, #16]
 8007212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007216:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800721a:	4a80      	ldr	r2, [pc, #512]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800721c:	430b      	orrs	r3, r1
 800721e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800722c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800722e:	2300      	movs	r3, #0
 8007230:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007232:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007236:	460b      	mov	r3, r1
 8007238:	4313      	orrs	r3, r2
 800723a:	d009      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800723c:	4b77      	ldr	r3, [pc, #476]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800723e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007240:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800724a:	4a74      	ldr	r2, [pc, #464]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800724c:	430b      	orrs	r3, r1
 800724e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800725c:	633b      	str	r3, [r7, #48]	@ 0x30
 800725e:	2300      	movs	r3, #0
 8007260:	637b      	str	r3, [r7, #52]	@ 0x34
 8007262:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007266:	460b      	mov	r3, r1
 8007268:	4313      	orrs	r3, r2
 800726a:	d00a      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800726c:	4b6b      	ldr	r3, [pc, #428]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800726e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007270:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007278:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800727c:	4a67      	ldr	r2, [pc, #412]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800727e:	430b      	orrs	r3, r1
 8007280:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	2100      	movs	r1, #0
 800728c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007294:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007298:	460b      	mov	r3, r1
 800729a:	4313      	orrs	r3, r2
 800729c:	d011      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800729e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a2:	3308      	adds	r3, #8
 80072a4:	2100      	movs	r1, #0
 80072a6:	4618      	mov	r0, r3
 80072a8:	f001 fa4a 	bl	8008740 <RCCEx_PLL2_Config>
 80072ac:	4603      	mov	r3, r0
 80072ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80072b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80072c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ca:	2100      	movs	r1, #0
 80072cc:	6239      	str	r1, [r7, #32]
 80072ce:	f003 0302 	and.w	r3, r3, #2
 80072d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80072d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80072d8:	460b      	mov	r3, r1
 80072da:	4313      	orrs	r3, r2
 80072dc:	d011      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072e2:	3308      	adds	r3, #8
 80072e4:	2101      	movs	r1, #1
 80072e6:	4618      	mov	r0, r3
 80072e8:	f001 fa2a 	bl	8008740 <RCCEx_PLL2_Config>
 80072ec:	4603      	mov	r3, r0
 80072ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80072f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730a:	2100      	movs	r1, #0
 800730c:	61b9      	str	r1, [r7, #24]
 800730e:	f003 0304 	and.w	r3, r3, #4
 8007312:	61fb      	str	r3, [r7, #28]
 8007314:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007318:	460b      	mov	r3, r1
 800731a:	4313      	orrs	r3, r2
 800731c:	d011      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800731e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007322:	3308      	adds	r3, #8
 8007324:	2102      	movs	r1, #2
 8007326:	4618      	mov	r0, r3
 8007328:	f001 fa0a 	bl	8008740 <RCCEx_PLL2_Config>
 800732c:	4603      	mov	r3, r0
 800732e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800733e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734a:	2100      	movs	r1, #0
 800734c:	6139      	str	r1, [r7, #16]
 800734e:	f003 0308 	and.w	r3, r3, #8
 8007352:	617b      	str	r3, [r7, #20]
 8007354:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007358:	460b      	mov	r3, r1
 800735a:	4313      	orrs	r3, r2
 800735c:	d011      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800735e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007362:	3328      	adds	r3, #40	@ 0x28
 8007364:	2100      	movs	r1, #0
 8007366:	4618      	mov	r0, r3
 8007368:	f001 fa9c 	bl	80088a4 <RCCEx_PLL3_Config>
 800736c:	4603      	mov	r3, r0
 800736e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800737a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800737e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738a:	2100      	movs	r1, #0
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	f003 0310 	and.w	r3, r3, #16
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007398:	460b      	mov	r3, r1
 800739a:	4313      	orrs	r3, r2
 800739c:	d011      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800739e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a2:	3328      	adds	r3, #40	@ 0x28
 80073a4:	2101      	movs	r1, #1
 80073a6:	4618      	mov	r0, r3
 80073a8:	f001 fa7c 	bl	80088a4 <RCCEx_PLL3_Config>
 80073ac:	4603      	mov	r3, r0
 80073ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80073b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80073c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ca:	2100      	movs	r1, #0
 80073cc:	6039      	str	r1, [r7, #0]
 80073ce:	f003 0320 	and.w	r3, r3, #32
 80073d2:	607b      	str	r3, [r7, #4]
 80073d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80073d8:	460b      	mov	r3, r1
 80073da:	4313      	orrs	r3, r2
 80073dc:	d011      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e2:	3328      	adds	r3, #40	@ 0x28
 80073e4:	2102      	movs	r1, #2
 80073e6:	4618      	mov	r0, r3
 80073e8:	f001 fa5c 	bl	80088a4 <RCCEx_PLL3_Config>
 80073ec:	4603      	mov	r3, r0
 80073ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80073f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007402:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	e000      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
}
 8007410:	4618      	mov	r0, r3
 8007412:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007416:	46bd      	mov	sp, r7
 8007418:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800741c:	58024400 	.word	0x58024400

08007420 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b090      	sub	sp, #64	@ 0x40
 8007424:	af00      	add	r7, sp, #0
 8007426:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800742a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800742e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007432:	430b      	orrs	r3, r1
 8007434:	f040 8094 	bne.w	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007438:	4b9e      	ldr	r3, [pc, #632]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800743a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800743c:	f003 0307 	and.w	r3, r3, #7
 8007440:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007444:	2b04      	cmp	r3, #4
 8007446:	f200 8087 	bhi.w	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800744a:	a201      	add	r2, pc, #4	@ (adr r2, 8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800744c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007450:	08007465 	.word	0x08007465
 8007454:	0800748d 	.word	0x0800748d
 8007458:	080074b5 	.word	0x080074b5
 800745c:	08007551 	.word	0x08007551
 8007460:	080074dd 	.word	0x080074dd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007464:	4b93      	ldr	r3, [pc, #588]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800746c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007470:	d108      	bne.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007472:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007476:	4618      	mov	r0, r3
 8007478:	f001 f810 	bl	800849c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800747c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007480:	f000 bd45 	b.w	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007484:	2300      	movs	r3, #0
 8007486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007488:	f000 bd41 	b.w	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800748c:	4b89      	ldr	r3, [pc, #548]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007494:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007498:	d108      	bne.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800749a:	f107 0318 	add.w	r3, r7, #24
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 fd54 	bl	8007f4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074a8:	f000 bd31 	b.w	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074ac:	2300      	movs	r3, #0
 80074ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074b0:	f000 bd2d 	b.w	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074b4:	4b7f      	ldr	r3, [pc, #508]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074c0:	d108      	bne.n	80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074c2:	f107 030c 	add.w	r3, r7, #12
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fe94 	bl	80081f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074d0:	f000 bd1d 	b.w	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074d4:	2300      	movs	r3, #0
 80074d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074d8:	f000 bd19 	b.w	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074dc:	4b75      	ldr	r3, [pc, #468]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80074e4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074e6:	4b73      	ldr	r3, [pc, #460]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0304 	and.w	r3, r3, #4
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	d10c      	bne.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80074f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d109      	bne.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074f8:	4b6e      	ldr	r3, [pc, #440]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	08db      	lsrs	r3, r3, #3
 80074fe:	f003 0303 	and.w	r3, r3, #3
 8007502:	4a6d      	ldr	r2, [pc, #436]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007504:	fa22 f303 	lsr.w	r3, r2, r3
 8007508:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800750a:	e01f      	b.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800750c:	4b69      	ldr	r3, [pc, #420]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007514:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007518:	d106      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800751a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800751c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007520:	d102      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007522:	4b66      	ldr	r3, [pc, #408]	@ (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007524:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007526:	e011      	b.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007528:	4b62      	ldr	r3, [pc, #392]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007530:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007534:	d106      	bne.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007538:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800753c:	d102      	bne.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800753e:	4b60      	ldr	r3, [pc, #384]	@ (80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007540:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007542:	e003      	b.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007544:	2300      	movs	r3, #0
 8007546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007548:	f000 bce1 	b.w	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800754c:	f000 bcdf 	b.w	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007550:	4b5c      	ldr	r3, [pc, #368]	@ (80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007554:	f000 bcdb 	b.w	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007558:	2300      	movs	r3, #0
 800755a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800755c:	f000 bcd7 	b.w	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007564:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007568:	430b      	orrs	r3, r1
 800756a:	f040 80ad 	bne.w	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800756e:	4b51      	ldr	r3, [pc, #324]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007572:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007576:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800757e:	d056      	beq.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007586:	f200 8090 	bhi.w	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800758a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758c:	2bc0      	cmp	r3, #192	@ 0xc0
 800758e:	f000 8088 	beq.w	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007594:	2bc0      	cmp	r3, #192	@ 0xc0
 8007596:	f200 8088 	bhi.w	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800759a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759c:	2b80      	cmp	r3, #128	@ 0x80
 800759e:	d032      	beq.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80075a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a2:	2b80      	cmp	r3, #128	@ 0x80
 80075a4:	f200 8081 	bhi.w	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80075a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80075ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b0:	2b40      	cmp	r3, #64	@ 0x40
 80075b2:	d014      	beq.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80075b4:	e079      	b.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075b6:	4b3f      	ldr	r3, [pc, #252]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075c2:	d108      	bne.n	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 ff67 	bl	800849c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075d2:	f000 bc9c 	b.w	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075d6:	2300      	movs	r3, #0
 80075d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075da:	f000 bc98 	b.w	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075de:	4b35      	ldr	r3, [pc, #212]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075ea:	d108      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075ec:	f107 0318 	add.w	r3, r7, #24
 80075f0:	4618      	mov	r0, r3
 80075f2:	f000 fcab 	bl	8007f4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075fa:	f000 bc88 	b.w	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007602:	f000 bc84 	b.w	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007606:	4b2b      	ldr	r3, [pc, #172]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800760e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007612:	d108      	bne.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007614:	f107 030c 	add.w	r3, r7, #12
 8007618:	4618      	mov	r0, r3
 800761a:	f000 fdeb 	bl	80081f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007622:	f000 bc74 	b.w	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007626:	2300      	movs	r3, #0
 8007628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800762a:	f000 bc70 	b.w	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800762e:	4b21      	ldr	r3, [pc, #132]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007632:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007636:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007638:	4b1e      	ldr	r3, [pc, #120]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0304 	and.w	r3, r3, #4
 8007640:	2b04      	cmp	r3, #4
 8007642:	d10c      	bne.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007646:	2b00      	cmp	r3, #0
 8007648:	d109      	bne.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800764a:	4b1a      	ldr	r3, [pc, #104]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	08db      	lsrs	r3, r3, #3
 8007650:	f003 0303 	and.w	r3, r3, #3
 8007654:	4a18      	ldr	r2, [pc, #96]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007656:	fa22 f303 	lsr.w	r3, r2, r3
 800765a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800765c:	e01f      	b.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800765e:	4b15      	ldr	r3, [pc, #84]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800766a:	d106      	bne.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800766c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800766e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007672:	d102      	bne.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007674:	4b11      	ldr	r3, [pc, #68]	@ (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007678:	e011      	b.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800767a:	4b0e      	ldr	r3, [pc, #56]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007682:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007686:	d106      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800768a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800768e:	d102      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007690:	4b0b      	ldr	r3, [pc, #44]	@ (80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007694:	e003      	b.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007696:	2300      	movs	r3, #0
 8007698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800769a:	f000 bc38 	b.w	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800769e:	f000 bc36 	b.w	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80076a2:	4b08      	ldr	r3, [pc, #32]	@ (80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80076a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076a6:	f000 bc32 	b.w	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076ae:	f000 bc2e 	b.w	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80076b2:	bf00      	nop
 80076b4:	58024400 	.word	0x58024400
 80076b8:	03d09000 	.word	0x03d09000
 80076bc:	003d0900 	.word	0x003d0900
 80076c0:	007a1200 	.word	0x007a1200
 80076c4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80076c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076cc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80076d0:	430b      	orrs	r3, r1
 80076d2:	f040 809c 	bne.w	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80076d6:	4b9e      	ldr	r3, [pc, #632]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076da:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80076de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80076e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076e6:	d054      	beq.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80076e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076ee:	f200 808b 	bhi.w	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80076f8:	f000 8083 	beq.w	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80076fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007702:	f200 8081 	bhi.w	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007708:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800770c:	d02f      	beq.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800770e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007710:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007714:	d878      	bhi.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007718:	2b00      	cmp	r3, #0
 800771a:	d004      	beq.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800771c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007722:	d012      	beq.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007724:	e070      	b.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007726:	4b8a      	ldr	r3, [pc, #552]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800772e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007732:	d107      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007738:	4618      	mov	r0, r3
 800773a:	f000 feaf 	bl	800849c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800773e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007742:	e3e4      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007744:	2300      	movs	r3, #0
 8007746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007748:	e3e1      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800774a:	4b81      	ldr	r3, [pc, #516]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007752:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007756:	d107      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007758:	f107 0318 	add.w	r3, r7, #24
 800775c:	4618      	mov	r0, r3
 800775e:	f000 fbf5 	bl	8007f4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007766:	e3d2      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007768:	2300      	movs	r3, #0
 800776a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800776c:	e3cf      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800776e:	4b78      	ldr	r3, [pc, #480]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800777a:	d107      	bne.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800777c:	f107 030c 	add.w	r3, r7, #12
 8007780:	4618      	mov	r0, r3
 8007782:	f000 fd37 	bl	80081f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800778a:	e3c0      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800778c:	2300      	movs	r3, #0
 800778e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007790:	e3bd      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007792:	4b6f      	ldr	r3, [pc, #444]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007796:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800779a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800779c:	4b6c      	ldr	r3, [pc, #432]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0304 	and.w	r3, r3, #4
 80077a4:	2b04      	cmp	r3, #4
 80077a6:	d10c      	bne.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80077a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d109      	bne.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077ae:	4b68      	ldr	r3, [pc, #416]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	08db      	lsrs	r3, r3, #3
 80077b4:	f003 0303 	and.w	r3, r3, #3
 80077b8:	4a66      	ldr	r2, [pc, #408]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80077ba:	fa22 f303 	lsr.w	r3, r2, r3
 80077be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077c0:	e01e      	b.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077c2:	4b63      	ldr	r3, [pc, #396]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ce:	d106      	bne.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80077d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077d6:	d102      	bne.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80077d8:	4b5f      	ldr	r3, [pc, #380]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80077da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077dc:	e010      	b.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077de:	4b5c      	ldr	r3, [pc, #368]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077ea:	d106      	bne.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80077ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077f2:	d102      	bne.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80077f4:	4b59      	ldr	r3, [pc, #356]	@ (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80077f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077f8:	e002      	b.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80077fa:	2300      	movs	r3, #0
 80077fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80077fe:	e386      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007800:	e385      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007802:	4b57      	ldr	r3, [pc, #348]	@ (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007806:	e382      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007808:	2300      	movs	r3, #0
 800780a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800780c:	e37f      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800780e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007812:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007816:	430b      	orrs	r3, r1
 8007818:	f040 80a7 	bne.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800781c:	4b4c      	ldr	r3, [pc, #304]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800781e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007820:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007824:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007828:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800782c:	d055      	beq.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800782e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007830:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007834:	f200 8096 	bhi.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800783e:	f000 8084 	beq.w	800794a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007844:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007848:	f200 808c 	bhi.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800784c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007852:	d030      	beq.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007856:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800785a:	f200 8083 	bhi.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800785e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007860:	2b00      	cmp	r3, #0
 8007862:	d004      	beq.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007866:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800786a:	d012      	beq.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800786c:	e07a      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800786e:	4b38      	ldr	r3, [pc, #224]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007876:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800787a:	d107      	bne.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800787c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007880:	4618      	mov	r0, r3
 8007882:	f000 fe0b 	bl	800849c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800788a:	e340      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800788c:	2300      	movs	r3, #0
 800788e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007890:	e33d      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007892:	4b2f      	ldr	r3, [pc, #188]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800789a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800789e:	d107      	bne.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078a0:	f107 0318 	add.w	r3, r7, #24
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 fb51 	bl	8007f4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078ae:	e32e      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078b0:	2300      	movs	r3, #0
 80078b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078b4:	e32b      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078b6:	4b26      	ldr	r3, [pc, #152]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078c2:	d107      	bne.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078c4:	f107 030c 	add.w	r3, r7, #12
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 fc93 	bl	80081f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078d2:	e31c      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078d4:	2300      	movs	r3, #0
 80078d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078d8:	e319      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078da:	4b1d      	ldr	r3, [pc, #116]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80078e2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0304 	and.w	r3, r3, #4
 80078ec:	2b04      	cmp	r3, #4
 80078ee:	d10c      	bne.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80078f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d109      	bne.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078f6:	4b16      	ldr	r3, [pc, #88]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	08db      	lsrs	r3, r3, #3
 80078fc:	f003 0303 	and.w	r3, r3, #3
 8007900:	4a14      	ldr	r2, [pc, #80]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007902:	fa22 f303 	lsr.w	r3, r2, r3
 8007906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007908:	e01e      	b.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800790a:	4b11      	ldr	r3, [pc, #68]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007916:	d106      	bne.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800791a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800791e:	d102      	bne.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007920:	4b0d      	ldr	r3, [pc, #52]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007922:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007924:	e010      	b.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007926:	4b0a      	ldr	r3, [pc, #40]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800792e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007932:	d106      	bne.n	8007942 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007936:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800793a:	d102      	bne.n	8007942 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800793c:	4b07      	ldr	r3, [pc, #28]	@ (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800793e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007940:	e002      	b.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007942:	2300      	movs	r3, #0
 8007944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007946:	e2e2      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007948:	e2e1      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800794a:	4b05      	ldr	r3, [pc, #20]	@ (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800794c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800794e:	e2de      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007950:	58024400 	.word	0x58024400
 8007954:	03d09000 	.word	0x03d09000
 8007958:	003d0900 	.word	0x003d0900
 800795c:	007a1200 	.word	0x007a1200
 8007960:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007964:	2300      	movs	r3, #0
 8007966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007968:	e2d1      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800796a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800796e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007972:	430b      	orrs	r3, r1
 8007974:	f040 809c 	bne.w	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007978:	4b93      	ldr	r3, [pc, #588]	@ (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800797a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800797c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007980:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007984:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007988:	d054      	beq.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800798a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007990:	f200 808b 	bhi.w	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007996:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800799a:	f000 8083 	beq.w	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800799e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80079a4:	f200 8081 	bhi.w	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80079a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079ae:	d02f      	beq.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80079b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079b6:	d878      	bhi.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80079b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d004      	beq.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80079be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079c4:	d012      	beq.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80079c6:	e070      	b.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079c8:	4b7f      	ldr	r3, [pc, #508]	@ (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079d4:	d107      	bne.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 fd5e 	bl	800849c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079e4:	e293      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079e6:	2300      	movs	r3, #0
 80079e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079ea:	e290      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079ec:	4b76      	ldr	r3, [pc, #472]	@ (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079f8:	d107      	bne.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079fa:	f107 0318 	add.w	r3, r7, #24
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 faa4 	bl	8007f4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a08:	e281      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a0e:	e27e      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a10:	4b6d      	ldr	r3, [pc, #436]	@ (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a1c:	d107      	bne.n	8007a2e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a1e:	f107 030c 	add.w	r3, r7, #12
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 fbe6 	bl	80081f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a2c:	e26f      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a32:	e26c      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a34:	4b64      	ldr	r3, [pc, #400]	@ (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007a3c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a3e:	4b62      	ldr	r3, [pc, #392]	@ (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0304 	and.w	r3, r3, #4
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	d10c      	bne.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d109      	bne.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a50:	4b5d      	ldr	r3, [pc, #372]	@ (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	08db      	lsrs	r3, r3, #3
 8007a56:	f003 0303 	and.w	r3, r3, #3
 8007a5a:	4a5c      	ldr	r2, [pc, #368]	@ (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a62:	e01e      	b.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a64:	4b58      	ldr	r3, [pc, #352]	@ (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a70:	d106      	bne.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a78:	d102      	bne.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a7a:	4b55      	ldr	r3, [pc, #340]	@ (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a7e:	e010      	b.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a80:	4b51      	ldr	r3, [pc, #324]	@ (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a8c:	d106      	bne.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a94:	d102      	bne.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a96:	4b4f      	ldr	r3, [pc, #316]	@ (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a9a:	e002      	b.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007aa0:	e235      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007aa2:	e234      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007aa4:	4b4c      	ldr	r3, [pc, #304]	@ (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aa8:	e231      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aae:	e22e      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ab4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007ab8:	430b      	orrs	r3, r1
 8007aba:	f040 808f 	bne.w	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007abe:	4b42      	ldr	r3, [pc, #264]	@ (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ac2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ace:	d06b      	beq.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ad6:	d874      	bhi.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ada:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ade:	d056      	beq.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ae6:	d86c      	bhi.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007aee:	d03b      	beq.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007af6:	d864      	bhi.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007afa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007afe:	d021      	beq.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b06:	d85c      	bhi.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d004      	beq.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b14:	d004      	beq.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007b16:	e054      	b.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007b18:	f7fe fa4c 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
 8007b1c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b1e:	e1f6      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b20:	4b29      	ldr	r3, [pc, #164]	@ (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b2c:	d107      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b2e:	f107 0318 	add.w	r3, r7, #24
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 fa0a 	bl	8007f4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b3c:	e1e7      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b42:	e1e4      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b44:	4b20      	ldr	r3, [pc, #128]	@ (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b50:	d107      	bne.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b52:	f107 030c 	add.w	r3, r7, #12
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 fb4c 	bl	80081f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b60:	e1d5      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b66:	e1d2      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b68:	4b17      	ldr	r3, [pc, #92]	@ (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	d109      	bne.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b74:	4b14      	ldr	r3, [pc, #80]	@ (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	08db      	lsrs	r3, r3, #3
 8007b7a:	f003 0303 	and.w	r3, r3, #3
 8007b7e:	4a13      	ldr	r2, [pc, #76]	@ (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007b80:	fa22 f303 	lsr.w	r3, r2, r3
 8007b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b86:	e1c2      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b8c:	e1bf      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b9a:	d102      	bne.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ba0:	e1b5      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ba6:	e1b2      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ba8:	4b07      	ldr	r3, [pc, #28]	@ (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bb4:	d102      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007bb6:	4b07      	ldr	r3, [pc, #28]	@ (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bba:	e1a8      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bc0:	e1a5      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bc6:	e1a2      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007bc8:	58024400 	.word	0x58024400
 8007bcc:	03d09000 	.word	0x03d09000
 8007bd0:	003d0900 	.word	0x003d0900
 8007bd4:	007a1200 	.word	0x007a1200
 8007bd8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007be0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007be4:	430b      	orrs	r3, r1
 8007be6:	d173      	bne.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007be8:	4b9c      	ldr	r3, [pc, #624]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007bf0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bf8:	d02f      	beq.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c00:	d863      	bhi.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d004      	beq.n	8007c12 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c0e:	d012      	beq.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007c10:	e05b      	b.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c12:	4b92      	ldr	r3, [pc, #584]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c1e:	d107      	bne.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c20:	f107 0318 	add.w	r3, r7, #24
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 f991 	bl	8007f4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c2e:	e16e      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c30:	2300      	movs	r3, #0
 8007c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c34:	e16b      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c36:	4b89      	ldr	r3, [pc, #548]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c42:	d107      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c44:	f107 030c 	add.w	r3, r7, #12
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 fad3 	bl	80081f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c52:	e15c      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c54:	2300      	movs	r3, #0
 8007c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c58:	e159      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c5a:	4b80      	ldr	r3, [pc, #512]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007c62:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c64:	4b7d      	ldr	r3, [pc, #500]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0304 	and.w	r3, r3, #4
 8007c6c:	2b04      	cmp	r3, #4
 8007c6e:	d10c      	bne.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d109      	bne.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c76:	4b79      	ldr	r3, [pc, #484]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	08db      	lsrs	r3, r3, #3
 8007c7c:	f003 0303 	and.w	r3, r3, #3
 8007c80:	4a77      	ldr	r2, [pc, #476]	@ (8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007c82:	fa22 f303 	lsr.w	r3, r2, r3
 8007c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c88:	e01e      	b.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c8a:	4b74      	ldr	r3, [pc, #464]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c96:	d106      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c9e:	d102      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ca0:	4b70      	ldr	r3, [pc, #448]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ca4:	e010      	b.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ca6:	4b6d      	ldr	r3, [pc, #436]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cb2:	d106      	bne.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cba:	d102      	bne.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007cbc:	4b6a      	ldr	r3, [pc, #424]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cc0:	e002      	b.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007cc6:	e122      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007cc8:	e121      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cce:	e11e      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007cd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cd4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007cd8:	430b      	orrs	r3, r1
 8007cda:	d133      	bne.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007cdc:	4b5f      	ldr	r3, [pc, #380]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ce0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ce4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d004      	beq.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cf2:	d012      	beq.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007cf4:	e023      	b.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cf6:	4b59      	ldr	r3, [pc, #356]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d02:	d107      	bne.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 fbc7 	bl	800849c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d12:	e0fc      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d14:	2300      	movs	r3, #0
 8007d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d18:	e0f9      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d1a:	4b50      	ldr	r3, [pc, #320]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d26:	d107      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d28:	f107 0318 	add.w	r3, r7, #24
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 f90d 	bl	8007f4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d36:	e0ea      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d3c:	e0e7      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d42:	e0e4      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d48:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007d4c:	430b      	orrs	r3, r1
 8007d4e:	f040 808d 	bne.w	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007d52:	4b42      	ldr	r3, [pc, #264]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d56:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007d5a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d62:	d06b      	beq.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d6a:	d874      	bhi.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d72:	d056      	beq.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d7a:	d86c      	bhi.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d82:	d03b      	beq.n	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d8a:	d864      	bhi.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d92:	d021      	beq.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d9a:	d85c      	bhi.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d004      	beq.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007da8:	d004      	beq.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007daa:	e054      	b.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007dac:	f000 f8b8 	bl	8007f20 <HAL_RCCEx_GetD3PCLK1Freq>
 8007db0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007db2:	e0ac      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007db4:	4b29      	ldr	r3, [pc, #164]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dc0:	d107      	bne.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dc2:	f107 0318 	add.w	r3, r7, #24
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 f8c0 	bl	8007f4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dd0:	e09d      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dd6:	e09a      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007dd8:	4b20      	ldr	r3, [pc, #128]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007de0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007de4:	d107      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007de6:	f107 030c 	add.w	r3, r7, #12
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 fa02 	bl	80081f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007df4:	e08b      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dfa:	e088      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007dfc:	4b17      	ldr	r3, [pc, #92]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 0304 	and.w	r3, r3, #4
 8007e04:	2b04      	cmp	r3, #4
 8007e06:	d109      	bne.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e08:	4b14      	ldr	r3, [pc, #80]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	08db      	lsrs	r3, r3, #3
 8007e0e:	f003 0303 	and.w	r3, r3, #3
 8007e12:	4a13      	ldr	r2, [pc, #76]	@ (8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007e14:	fa22 f303 	lsr.w	r3, r2, r3
 8007e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e1a:	e078      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e20:	e075      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007e22:	4b0e      	ldr	r3, [pc, #56]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e2e:	d102      	bne.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007e30:	4b0c      	ldr	r3, [pc, #48]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e34:	e06b      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e36:	2300      	movs	r3, #0
 8007e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e3a:	e068      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e3c:	4b07      	ldr	r3, [pc, #28]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e48:	d102      	bne.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007e4a:	4b07      	ldr	r3, [pc, #28]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e4e:	e05e      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e50:	2300      	movs	r3, #0
 8007e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e54:	e05b      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007e56:	2300      	movs	r3, #0
 8007e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e5a:	e058      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e5c:	58024400 	.word	0x58024400
 8007e60:	03d09000 	.word	0x03d09000
 8007e64:	003d0900 	.word	0x003d0900
 8007e68:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007e6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e70:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007e74:	430b      	orrs	r3, r1
 8007e76:	d148      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007e78:	4b27      	ldr	r3, [pc, #156]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e80:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e88:	d02a      	beq.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e90:	d838      	bhi.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d004      	beq.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e9e:	d00d      	beq.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007ea0:	e030      	b.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eaa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007eae:	d102      	bne.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eb4:	e02b      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eba:	e028      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ebc:	4b16      	ldr	r3, [pc, #88]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ec4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ec8:	d107      	bne.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007eca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 fae4 	bl	800849c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ed8:	e019      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ede:	e016      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ee8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007eec:	d107      	bne.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eee:	f107 0318 	add.w	r3, r7, #24
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 f82a 	bl	8007f4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007efc:	e007      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007efe:	2300      	movs	r3, #0
 8007f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f02:	e004      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007f04:	2300      	movs	r3, #0
 8007f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f08:	e001      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3740      	adds	r7, #64	@ 0x40
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	58024400 	.word	0x58024400
 8007f1c:	007a1200 	.word	0x007a1200

08007f20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007f24:	f7fe f816 	bl	8005f54 <HAL_RCC_GetHCLKFreq>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	4b06      	ldr	r3, [pc, #24]	@ (8007f44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007f2c:	6a1b      	ldr	r3, [r3, #32]
 8007f2e:	091b      	lsrs	r3, r3, #4
 8007f30:	f003 0307 	and.w	r3, r3, #7
 8007f34:	4904      	ldr	r1, [pc, #16]	@ (8007f48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007f36:	5ccb      	ldrb	r3, [r1, r3]
 8007f38:	f003 031f 	and.w	r3, r3, #31
 8007f3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	58024400 	.word	0x58024400
 8007f48:	08009f48 	.word	0x08009f48

08007f4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b089      	sub	sp, #36	@ 0x24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f54:	4ba1      	ldr	r3, [pc, #644]	@ (80081dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f58:	f003 0303 	and.w	r3, r3, #3
 8007f5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007f5e:	4b9f      	ldr	r3, [pc, #636]	@ (80081dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f62:	0b1b      	lsrs	r3, r3, #12
 8007f64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f6a:	4b9c      	ldr	r3, [pc, #624]	@ (80081dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f6e:	091b      	lsrs	r3, r3, #4
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007f76:	4b99      	ldr	r3, [pc, #612]	@ (80081dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f7a:	08db      	lsrs	r3, r3, #3
 8007f7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f80:	693a      	ldr	r2, [r7, #16]
 8007f82:	fb02 f303 	mul.w	r3, r2, r3
 8007f86:	ee07 3a90 	vmov	s15, r3
 8007f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 8111 	beq.w	80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	f000 8083 	beq.w	80080a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	f200 80a1 	bhi.w	80080ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d056      	beq.n	8008064 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007fb6:	e099      	b.n	80080ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fb8:	4b88      	ldr	r3, [pc, #544]	@ (80081dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0320 	and.w	r3, r3, #32
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d02d      	beq.n	8008020 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fc4:	4b85      	ldr	r3, [pc, #532]	@ (80081dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	08db      	lsrs	r3, r3, #3
 8007fca:	f003 0303 	and.w	r3, r3, #3
 8007fce:	4a84      	ldr	r2, [pc, #528]	@ (80081e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fd4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	ee07 3a90 	vmov	s15, r3
 8007fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	ee07 3a90 	vmov	s15, r3
 8007fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fee:	4b7b      	ldr	r3, [pc, #492]	@ (80081dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff6:	ee07 3a90 	vmov	s15, r3
 8007ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008002:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80081e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800800a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800800e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800801a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800801e:	e087      	b.n	8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	ee07 3a90 	vmov	s15, r3
 8008026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80081e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800802e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008032:	4b6a      	ldr	r3, [pc, #424]	@ (80081dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800803a:	ee07 3a90 	vmov	s15, r3
 800803e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008042:	ed97 6a03 	vldr	s12, [r7, #12]
 8008046:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80081e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800804a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800804e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800805a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800805e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008062:	e065      	b.n	8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	ee07 3a90 	vmov	s15, r3
 800806a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800806e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80081ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008076:	4b59      	ldr	r3, [pc, #356]	@ (80081dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800807a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800807e:	ee07 3a90 	vmov	s15, r3
 8008082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008086:	ed97 6a03 	vldr	s12, [r7, #12]
 800808a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80081e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800808e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800809a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800809e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080a6:	e043      	b.n	8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	ee07 3a90 	vmov	s15, r3
 80080ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80080b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ba:	4b48      	ldr	r3, [pc, #288]	@ (80081dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080c2:	ee07 3a90 	vmov	s15, r3
 80080c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80081e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080ea:	e021      	b.n	8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	ee07 3a90 	vmov	s15, r3
 80080f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80081ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080fe:	4b37      	ldr	r3, [pc, #220]	@ (80081dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008106:	ee07 3a90 	vmov	s15, r3
 800810a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800810e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008112:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80081e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800811a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800811e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800812a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800812e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008130:	4b2a      	ldr	r3, [pc, #168]	@ (80081dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008134:	0a5b      	lsrs	r3, r3, #9
 8008136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800813a:	ee07 3a90 	vmov	s15, r3
 800813e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008142:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008146:	ee37 7a87 	vadd.f32	s14, s15, s14
 800814a:	edd7 6a07 	vldr	s13, [r7, #28]
 800814e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008156:	ee17 2a90 	vmov	r2, s15
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800815e:	4b1f      	ldr	r3, [pc, #124]	@ (80081dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008162:	0c1b      	lsrs	r3, r3, #16
 8008164:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008168:	ee07 3a90 	vmov	s15, r3
 800816c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008170:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008174:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008178:	edd7 6a07 	vldr	s13, [r7, #28]
 800817c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008184:	ee17 2a90 	vmov	r2, s15
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800818c:	4b13      	ldr	r3, [pc, #76]	@ (80081dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800818e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008190:	0e1b      	lsrs	r3, r3, #24
 8008192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008196:	ee07 3a90 	vmov	s15, r3
 800819a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800819e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80081aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081b2:	ee17 2a90 	vmov	r2, s15
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80081ba:	e008      	b.n	80081ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	609a      	str	r2, [r3, #8]
}
 80081ce:	bf00      	nop
 80081d0:	3724      	adds	r7, #36	@ 0x24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	58024400 	.word	0x58024400
 80081e0:	03d09000 	.word	0x03d09000
 80081e4:	46000000 	.word	0x46000000
 80081e8:	4c742400 	.word	0x4c742400
 80081ec:	4a742400 	.word	0x4a742400
 80081f0:	4af42400 	.word	0x4af42400

080081f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b089      	sub	sp, #36	@ 0x24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081fc:	4ba1      	ldr	r3, [pc, #644]	@ (8008484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008200:	f003 0303 	and.w	r3, r3, #3
 8008204:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008206:	4b9f      	ldr	r3, [pc, #636]	@ (8008484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800820a:	0d1b      	lsrs	r3, r3, #20
 800820c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008210:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008212:	4b9c      	ldr	r3, [pc, #624]	@ (8008484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008216:	0a1b      	lsrs	r3, r3, #8
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800821e:	4b99      	ldr	r3, [pc, #612]	@ (8008484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008222:	08db      	lsrs	r3, r3, #3
 8008224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	fb02 f303 	mul.w	r3, r2, r3
 800822e:	ee07 3a90 	vmov	s15, r3
 8008232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008236:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 8111 	beq.w	8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	2b02      	cmp	r3, #2
 8008246:	f000 8083 	beq.w	8008350 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	2b02      	cmp	r3, #2
 800824e:	f200 80a1 	bhi.w	8008394 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d003      	beq.n	8008260 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d056      	beq.n	800830c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800825e:	e099      	b.n	8008394 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008260:	4b88      	ldr	r3, [pc, #544]	@ (8008484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0320 	and.w	r3, r3, #32
 8008268:	2b00      	cmp	r3, #0
 800826a:	d02d      	beq.n	80082c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800826c:	4b85      	ldr	r3, [pc, #532]	@ (8008484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	08db      	lsrs	r3, r3, #3
 8008272:	f003 0303 	and.w	r3, r3, #3
 8008276:	4a84      	ldr	r2, [pc, #528]	@ (8008488 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008278:	fa22 f303 	lsr.w	r3, r2, r3
 800827c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	ee07 3a90 	vmov	s15, r3
 8008284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	ee07 3a90 	vmov	s15, r3
 800828e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008296:	4b7b      	ldr	r3, [pc, #492]	@ (8008484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800829a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800829e:	ee07 3a90 	vmov	s15, r3
 80082a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800848c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80082c6:	e087      	b.n	80083d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	ee07 3a90 	vmov	s15, r3
 80082ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008490 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80082d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082da:	4b6a      	ldr	r3, [pc, #424]	@ (8008484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e2:	ee07 3a90 	vmov	s15, r3
 80082e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800848c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800830a:	e065      	b.n	80083d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	ee07 3a90 	vmov	s15, r3
 8008312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008316:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008494 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800831a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800831e:	4b59      	ldr	r3, [pc, #356]	@ (8008484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008326:	ee07 3a90 	vmov	s15, r3
 800832a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800832e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008332:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800848c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800833a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800833e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800834a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800834e:	e043      	b.n	80083d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	ee07 3a90 	vmov	s15, r3
 8008356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800835a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008498 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800835e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008362:	4b48      	ldr	r3, [pc, #288]	@ (8008484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800836a:	ee07 3a90 	vmov	s15, r3
 800836e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008372:	ed97 6a03 	vldr	s12, [r7, #12]
 8008376:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800848c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800837a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800837e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800838a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800838e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008392:	e021      	b.n	80083d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	ee07 3a90 	vmov	s15, r3
 800839a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800839e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008494 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80083a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083a6:	4b37      	ldr	r3, [pc, #220]	@ (8008484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ae:	ee07 3a90 	vmov	s15, r3
 80083b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80083ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800848c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80083d8:	4b2a      	ldr	r3, [pc, #168]	@ (8008484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083dc:	0a5b      	lsrs	r3, r3, #9
 80083de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083e2:	ee07 3a90 	vmov	s15, r3
 80083e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80083f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083fe:	ee17 2a90 	vmov	r2, s15
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008406:	4b1f      	ldr	r3, [pc, #124]	@ (8008484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800840a:	0c1b      	lsrs	r3, r3, #16
 800840c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008410:	ee07 3a90 	vmov	s15, r3
 8008414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008418:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800841c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008420:	edd7 6a07 	vldr	s13, [r7, #28]
 8008424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800842c:	ee17 2a90 	vmov	r2, s15
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008434:	4b13      	ldr	r3, [pc, #76]	@ (8008484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008438:	0e1b      	lsrs	r3, r3, #24
 800843a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800843e:	ee07 3a90 	vmov	s15, r3
 8008442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008446:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800844a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800844e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800845a:	ee17 2a90 	vmov	r2, s15
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008462:	e008      	b.n	8008476 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	609a      	str	r2, [r3, #8]
}
 8008476:	bf00      	nop
 8008478:	3724      	adds	r7, #36	@ 0x24
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	58024400 	.word	0x58024400
 8008488:	03d09000 	.word	0x03d09000
 800848c:	46000000 	.word	0x46000000
 8008490:	4c742400 	.word	0x4c742400
 8008494:	4a742400 	.word	0x4a742400
 8008498:	4af42400 	.word	0x4af42400

0800849c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800849c:	b480      	push	{r7}
 800849e:	b089      	sub	sp, #36	@ 0x24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084a4:	4ba0      	ldr	r3, [pc, #640]	@ (8008728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a8:	f003 0303 	and.w	r3, r3, #3
 80084ac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80084ae:	4b9e      	ldr	r3, [pc, #632]	@ (8008728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084b2:	091b      	lsrs	r3, r3, #4
 80084b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084b8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80084ba:	4b9b      	ldr	r3, [pc, #620]	@ (8008728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80084c4:	4b98      	ldr	r3, [pc, #608]	@ (8008728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084c8:	08db      	lsrs	r3, r3, #3
 80084ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	fb02 f303 	mul.w	r3, r2, r3
 80084d4:	ee07 3a90 	vmov	s15, r3
 80084d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084dc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 8111 	beq.w	800870a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	f000 8083 	beq.w	80085f6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	f200 80a1 	bhi.w	800863a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d056      	beq.n	80085b2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008504:	e099      	b.n	800863a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008506:	4b88      	ldr	r3, [pc, #544]	@ (8008728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0320 	and.w	r3, r3, #32
 800850e:	2b00      	cmp	r3, #0
 8008510:	d02d      	beq.n	800856e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008512:	4b85      	ldr	r3, [pc, #532]	@ (8008728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	08db      	lsrs	r3, r3, #3
 8008518:	f003 0303 	and.w	r3, r3, #3
 800851c:	4a83      	ldr	r2, [pc, #524]	@ (800872c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800851e:	fa22 f303 	lsr.w	r3, r2, r3
 8008522:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	ee07 3a90 	vmov	s15, r3
 800852a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	ee07 3a90 	vmov	s15, r3
 8008534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800853c:	4b7a      	ldr	r3, [pc, #488]	@ (8008728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800853e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008544:	ee07 3a90 	vmov	s15, r3
 8008548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800854c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008550:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008730 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800855c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008568:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800856c:	e087      	b.n	800867e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	ee07 3a90 	vmov	s15, r3
 8008574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008578:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008734 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800857c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008580:	4b69      	ldr	r3, [pc, #420]	@ (8008728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008588:	ee07 3a90 	vmov	s15, r3
 800858c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008590:	ed97 6a03 	vldr	s12, [r7, #12]
 8008594:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008730 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008598:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800859c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085b0:	e065      	b.n	800867e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	ee07 3a90 	vmov	s15, r3
 80085b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085bc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008738 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80085c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085c4:	4b58      	ldr	r3, [pc, #352]	@ (8008728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085cc:	ee07 3a90 	vmov	s15, r3
 80085d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80085d8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008730 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085f4:	e043      	b.n	800867e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	ee07 3a90 	vmov	s15, r3
 80085fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008600:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800873c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008608:	4b47      	ldr	r3, [pc, #284]	@ (8008728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800860a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800860c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008610:	ee07 3a90 	vmov	s15, r3
 8008614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008618:	ed97 6a03 	vldr	s12, [r7, #12]
 800861c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008730 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008620:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008624:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008628:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800862c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008634:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008638:	e021      	b.n	800867e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	ee07 3a90 	vmov	s15, r3
 8008640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008644:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008734 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800864c:	4b36      	ldr	r3, [pc, #216]	@ (8008728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800864e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008654:	ee07 3a90 	vmov	s15, r3
 8008658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800865c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008660:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008730 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008664:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008668:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800866c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008678:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800867c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800867e:	4b2a      	ldr	r3, [pc, #168]	@ (8008728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008682:	0a5b      	lsrs	r3, r3, #9
 8008684:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008688:	ee07 3a90 	vmov	s15, r3
 800868c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008690:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008694:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008698:	edd7 6a07 	vldr	s13, [r7, #28]
 800869c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086a4:	ee17 2a90 	vmov	r2, s15
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80086ac:	4b1e      	ldr	r3, [pc, #120]	@ (8008728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086b0:	0c1b      	lsrs	r3, r3, #16
 80086b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086b6:	ee07 3a90 	vmov	s15, r3
 80086ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80086ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086d2:	ee17 2a90 	vmov	r2, s15
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80086da:	4b13      	ldr	r3, [pc, #76]	@ (8008728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086de:	0e1b      	lsrs	r3, r3, #24
 80086e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086e4:	ee07 3a90 	vmov	s15, r3
 80086e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80086f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008700:	ee17 2a90 	vmov	r2, s15
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008708:	e008      	b.n	800871c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	609a      	str	r2, [r3, #8]
}
 800871c:	bf00      	nop
 800871e:	3724      	adds	r7, #36	@ 0x24
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr
 8008728:	58024400 	.word	0x58024400
 800872c:	03d09000 	.word	0x03d09000
 8008730:	46000000 	.word	0x46000000
 8008734:	4c742400 	.word	0x4c742400
 8008738:	4a742400 	.word	0x4a742400
 800873c:	4af42400 	.word	0x4af42400

08008740 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800874e:	4b53      	ldr	r3, [pc, #332]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 8008750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008752:	f003 0303 	and.w	r3, r3, #3
 8008756:	2b03      	cmp	r3, #3
 8008758:	d101      	bne.n	800875e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e099      	b.n	8008892 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800875e:	4b4f      	ldr	r3, [pc, #316]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a4e      	ldr	r2, [pc, #312]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 8008764:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800876a:	f7f9 fa1d 	bl	8001ba8 <HAL_GetTick>
 800876e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008770:	e008      	b.n	8008784 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008772:	f7f9 fa19 	bl	8001ba8 <HAL_GetTick>
 8008776:	4602      	mov	r2, r0
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	2b02      	cmp	r3, #2
 800877e:	d901      	bls.n	8008784 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008780:	2303      	movs	r3, #3
 8008782:	e086      	b.n	8008892 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008784:	4b45      	ldr	r3, [pc, #276]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1f0      	bne.n	8008772 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008790:	4b42      	ldr	r3, [pc, #264]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 8008792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008794:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	031b      	lsls	r3, r3, #12
 800879e:	493f      	ldr	r1, [pc, #252]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	628b      	str	r3, [r1, #40]	@ 0x28
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	3b01      	subs	r3, #1
 80087aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	3b01      	subs	r3, #1
 80087b4:	025b      	lsls	r3, r3, #9
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	431a      	orrs	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	3b01      	subs	r3, #1
 80087c0:	041b      	lsls	r3, r3, #16
 80087c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80087c6:	431a      	orrs	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	3b01      	subs	r3, #1
 80087ce:	061b      	lsls	r3, r3, #24
 80087d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80087d4:	4931      	ldr	r1, [pc, #196]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80087da:	4b30      	ldr	r3, [pc, #192]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 80087dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	492d      	ldr	r1, [pc, #180]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 80087e8:	4313      	orrs	r3, r2
 80087ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80087ec:	4b2b      	ldr	r3, [pc, #172]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 80087ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f0:	f023 0220 	bic.w	r2, r3, #32
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	4928      	ldr	r1, [pc, #160]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80087fe:	4b27      	ldr	r3, [pc, #156]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 8008800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008802:	4a26      	ldr	r2, [pc, #152]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 8008804:	f023 0310 	bic.w	r3, r3, #16
 8008808:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800880a:	4b24      	ldr	r3, [pc, #144]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 800880c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800880e:	4b24      	ldr	r3, [pc, #144]	@ (80088a0 <RCCEx_PLL2_Config+0x160>)
 8008810:	4013      	ands	r3, r2
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	69d2      	ldr	r2, [r2, #28]
 8008816:	00d2      	lsls	r2, r2, #3
 8008818:	4920      	ldr	r1, [pc, #128]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 800881a:	4313      	orrs	r3, r2
 800881c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800881e:	4b1f      	ldr	r3, [pc, #124]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 8008820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008822:	4a1e      	ldr	r2, [pc, #120]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 8008824:	f043 0310 	orr.w	r3, r3, #16
 8008828:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d106      	bne.n	800883e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008830:	4b1a      	ldr	r3, [pc, #104]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 8008832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008834:	4a19      	ldr	r2, [pc, #100]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 8008836:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800883a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800883c:	e00f      	b.n	800885e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d106      	bne.n	8008852 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008844:	4b15      	ldr	r3, [pc, #84]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 8008846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008848:	4a14      	ldr	r2, [pc, #80]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 800884a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800884e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008850:	e005      	b.n	800885e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008852:	4b12      	ldr	r3, [pc, #72]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 8008854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008856:	4a11      	ldr	r2, [pc, #68]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 8008858:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800885c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800885e:	4b0f      	ldr	r3, [pc, #60]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a0e      	ldr	r2, [pc, #56]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 8008864:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800886a:	f7f9 f99d 	bl	8001ba8 <HAL_GetTick>
 800886e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008870:	e008      	b.n	8008884 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008872:	f7f9 f999 	bl	8001ba8 <HAL_GetTick>
 8008876:	4602      	mov	r2, r0
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	2b02      	cmp	r3, #2
 800887e:	d901      	bls.n	8008884 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008880:	2303      	movs	r3, #3
 8008882:	e006      	b.n	8008892 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008884:	4b05      	ldr	r3, [pc, #20]	@ (800889c <RCCEx_PLL2_Config+0x15c>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800888c:	2b00      	cmp	r3, #0
 800888e:	d0f0      	beq.n	8008872 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008890:	7bfb      	ldrb	r3, [r7, #15]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	58024400 	.word	0x58024400
 80088a0:	ffff0007 	.word	0xffff0007

080088a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088ae:	2300      	movs	r3, #0
 80088b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80088b2:	4b53      	ldr	r3, [pc, #332]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 80088b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b6:	f003 0303 	and.w	r3, r3, #3
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d101      	bne.n	80088c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e099      	b.n	80089f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80088c2:	4b4f      	ldr	r3, [pc, #316]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a4e      	ldr	r2, [pc, #312]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 80088c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088ce:	f7f9 f96b 	bl	8001ba8 <HAL_GetTick>
 80088d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088d4:	e008      	b.n	80088e8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80088d6:	f7f9 f967 	bl	8001ba8 <HAL_GetTick>
 80088da:	4602      	mov	r2, r0
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d901      	bls.n	80088e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e086      	b.n	80089f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088e8:	4b45      	ldr	r3, [pc, #276]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1f0      	bne.n	80088d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80088f4:	4b42      	ldr	r3, [pc, #264]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 80088f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	051b      	lsls	r3, r3, #20
 8008902:	493f      	ldr	r1, [pc, #252]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 8008904:	4313      	orrs	r3, r2
 8008906:	628b      	str	r3, [r1, #40]	@ 0x28
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	3b01      	subs	r3, #1
 800890e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	3b01      	subs	r3, #1
 8008918:	025b      	lsls	r3, r3, #9
 800891a:	b29b      	uxth	r3, r3
 800891c:	431a      	orrs	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	3b01      	subs	r3, #1
 8008924:	041b      	lsls	r3, r3, #16
 8008926:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800892a:	431a      	orrs	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	3b01      	subs	r3, #1
 8008932:	061b      	lsls	r3, r3, #24
 8008934:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008938:	4931      	ldr	r1, [pc, #196]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 800893a:	4313      	orrs	r3, r2
 800893c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800893e:	4b30      	ldr	r3, [pc, #192]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 8008940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008942:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	492d      	ldr	r1, [pc, #180]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 800894c:	4313      	orrs	r3, r2
 800894e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008950:	4b2b      	ldr	r3, [pc, #172]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 8008952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008954:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	4928      	ldr	r1, [pc, #160]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 800895e:	4313      	orrs	r3, r2
 8008960:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008962:	4b27      	ldr	r3, [pc, #156]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 8008964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008966:	4a26      	ldr	r2, [pc, #152]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 8008968:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800896c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800896e:	4b24      	ldr	r3, [pc, #144]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 8008970:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008972:	4b24      	ldr	r3, [pc, #144]	@ (8008a04 <RCCEx_PLL3_Config+0x160>)
 8008974:	4013      	ands	r3, r2
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	69d2      	ldr	r2, [r2, #28]
 800897a:	00d2      	lsls	r2, r2, #3
 800897c:	4920      	ldr	r1, [pc, #128]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 800897e:	4313      	orrs	r3, r2
 8008980:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008982:	4b1f      	ldr	r3, [pc, #124]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 8008984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008986:	4a1e      	ldr	r2, [pc, #120]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 8008988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800898c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d106      	bne.n	80089a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008994:	4b1a      	ldr	r3, [pc, #104]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 8008996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008998:	4a19      	ldr	r2, [pc, #100]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 800899a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800899e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80089a0:	e00f      	b.n	80089c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d106      	bne.n	80089b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80089a8:	4b15      	ldr	r3, [pc, #84]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 80089aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ac:	4a14      	ldr	r2, [pc, #80]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 80089ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80089b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80089b4:	e005      	b.n	80089c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80089b6:	4b12      	ldr	r3, [pc, #72]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 80089b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ba:	4a11      	ldr	r2, [pc, #68]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 80089bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80089c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80089c2:	4b0f      	ldr	r3, [pc, #60]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a0e      	ldr	r2, [pc, #56]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 80089c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089ce:	f7f9 f8eb 	bl	8001ba8 <HAL_GetTick>
 80089d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089d4:	e008      	b.n	80089e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80089d6:	f7f9 f8e7 	bl	8001ba8 <HAL_GetTick>
 80089da:	4602      	mov	r2, r0
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d901      	bls.n	80089e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e006      	b.n	80089f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089e8:	4b05      	ldr	r3, [pc, #20]	@ (8008a00 <RCCEx_PLL3_Config+0x15c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d0f0      	beq.n	80089d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	58024400 	.word	0x58024400
 8008a04:	ffff0007 	.word	0xffff0007

08008a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e049      	b.n	8008aae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d106      	bne.n	8008a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7f8 fe68 	bl	8001704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2202      	movs	r2, #2
 8008a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	3304      	adds	r3, #4
 8008a44:	4619      	mov	r1, r3
 8008a46:	4610      	mov	r0, r2
 8008a48:	f000 f836 	bl	8008ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
	...

08008ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a46      	ldr	r2, [pc, #280]	@ (8008be4 <TIM_Base_SetConfig+0x12c>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d013      	beq.n	8008af8 <TIM_Base_SetConfig+0x40>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ad6:	d00f      	beq.n	8008af8 <TIM_Base_SetConfig+0x40>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a43      	ldr	r2, [pc, #268]	@ (8008be8 <TIM_Base_SetConfig+0x130>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d00b      	beq.n	8008af8 <TIM_Base_SetConfig+0x40>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a42      	ldr	r2, [pc, #264]	@ (8008bec <TIM_Base_SetConfig+0x134>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d007      	beq.n	8008af8 <TIM_Base_SetConfig+0x40>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4a41      	ldr	r2, [pc, #260]	@ (8008bf0 <TIM_Base_SetConfig+0x138>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d003      	beq.n	8008af8 <TIM_Base_SetConfig+0x40>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a40      	ldr	r2, [pc, #256]	@ (8008bf4 <TIM_Base_SetConfig+0x13c>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d108      	bne.n	8008b0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a35      	ldr	r2, [pc, #212]	@ (8008be4 <TIM_Base_SetConfig+0x12c>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d01f      	beq.n	8008b52 <TIM_Base_SetConfig+0x9a>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b18:	d01b      	beq.n	8008b52 <TIM_Base_SetConfig+0x9a>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a32      	ldr	r2, [pc, #200]	@ (8008be8 <TIM_Base_SetConfig+0x130>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d017      	beq.n	8008b52 <TIM_Base_SetConfig+0x9a>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a31      	ldr	r2, [pc, #196]	@ (8008bec <TIM_Base_SetConfig+0x134>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d013      	beq.n	8008b52 <TIM_Base_SetConfig+0x9a>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a30      	ldr	r2, [pc, #192]	@ (8008bf0 <TIM_Base_SetConfig+0x138>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d00f      	beq.n	8008b52 <TIM_Base_SetConfig+0x9a>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a2f      	ldr	r2, [pc, #188]	@ (8008bf4 <TIM_Base_SetConfig+0x13c>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d00b      	beq.n	8008b52 <TIM_Base_SetConfig+0x9a>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a2e      	ldr	r2, [pc, #184]	@ (8008bf8 <TIM_Base_SetConfig+0x140>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d007      	beq.n	8008b52 <TIM_Base_SetConfig+0x9a>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a2d      	ldr	r2, [pc, #180]	@ (8008bfc <TIM_Base_SetConfig+0x144>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d003      	beq.n	8008b52 <TIM_Base_SetConfig+0x9a>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a2c      	ldr	r2, [pc, #176]	@ (8008c00 <TIM_Base_SetConfig+0x148>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d108      	bne.n	8008b64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	689a      	ldr	r2, [r3, #8]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a16      	ldr	r2, [pc, #88]	@ (8008be4 <TIM_Base_SetConfig+0x12c>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d00f      	beq.n	8008bb0 <TIM_Base_SetConfig+0xf8>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a18      	ldr	r2, [pc, #96]	@ (8008bf4 <TIM_Base_SetConfig+0x13c>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d00b      	beq.n	8008bb0 <TIM_Base_SetConfig+0xf8>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a17      	ldr	r2, [pc, #92]	@ (8008bf8 <TIM_Base_SetConfig+0x140>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d007      	beq.n	8008bb0 <TIM_Base_SetConfig+0xf8>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a16      	ldr	r2, [pc, #88]	@ (8008bfc <TIM_Base_SetConfig+0x144>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d003      	beq.n	8008bb0 <TIM_Base_SetConfig+0xf8>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a15      	ldr	r2, [pc, #84]	@ (8008c00 <TIM_Base_SetConfig+0x148>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d103      	bne.n	8008bb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	691a      	ldr	r2, [r3, #16]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d105      	bne.n	8008bd6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	f023 0201 	bic.w	r2, r3, #1
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	611a      	str	r2, [r3, #16]
  }
}
 8008bd6:	bf00      	nop
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	40010000 	.word	0x40010000
 8008be8:	40000400 	.word	0x40000400
 8008bec:	40000800 	.word	0x40000800
 8008bf0:	40000c00 	.word	0x40000c00
 8008bf4:	40010400 	.word	0x40010400
 8008bf8:	40014000 	.word	0x40014000
 8008bfc:	40014400 	.word	0x40014400
 8008c00:	40014800 	.word	0x40014800

08008c04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d101      	bne.n	8008c1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c18:	2302      	movs	r3, #2
 8008c1a:	e06d      	b.n	8008cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2202      	movs	r2, #2
 8008c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a30      	ldr	r2, [pc, #192]	@ (8008d04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d004      	beq.n	8008c50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a2f      	ldr	r2, [pc, #188]	@ (8008d08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d108      	bne.n	8008c62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008c56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a20      	ldr	r2, [pc, #128]	@ (8008d04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d022      	beq.n	8008ccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c8e:	d01d      	beq.n	8008ccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a1d      	ldr	r2, [pc, #116]	@ (8008d0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d018      	beq.n	8008ccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8008d10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d013      	beq.n	8008ccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a1a      	ldr	r2, [pc, #104]	@ (8008d14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d00e      	beq.n	8008ccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a15      	ldr	r2, [pc, #84]	@ (8008d08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d009      	beq.n	8008ccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a16      	ldr	r2, [pc, #88]	@ (8008d18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d004      	beq.n	8008ccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a15      	ldr	r2, [pc, #84]	@ (8008d1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d10c      	bne.n	8008ce6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr
 8008d04:	40010000 	.word	0x40010000
 8008d08:	40010400 	.word	0x40010400
 8008d0c:	40000400 	.word	0x40000400
 8008d10:	40000800 	.word	0x40000800
 8008d14:	40000c00 	.word	0x40000c00
 8008d18:	40001800 	.word	0x40001800
 8008d1c:	40014000 	.word	0x40014000

08008d20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d101      	bne.n	8008d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e042      	b.n	8008db8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d106      	bne.n	8008d4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f7f8 fcff 	bl	8001748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2224      	movs	r2, #36	@ 0x24
 8008d4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f022 0201 	bic.w	r2, r2, #1
 8008d60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d002      	beq.n	8008d70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fd90 	bl	8009890 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f825 	bl	8008dc0 <UART_SetConfig>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d101      	bne.n	8008d80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e01b      	b.n	8008db8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685a      	ldr	r2, [r3, #4]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	689a      	ldr	r2, [r3, #8]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f042 0201 	orr.w	r2, r2, #1
 8008dae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 fe0f 	bl	80099d4 <UART_CheckIdleState>
 8008db6:	4603      	mov	r3, r0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3708      	adds	r7, #8
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dc4:	b092      	sub	sp, #72	@ 0x48
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	689a      	ldr	r2, [r3, #8]
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	431a      	orrs	r2, r3
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	431a      	orrs	r2, r3
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	69db      	ldr	r3, [r3, #28]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	4bbe      	ldr	r3, [pc, #760]	@ (80090e8 <UART_SetConfig+0x328>)
 8008df0:	4013      	ands	r3, r2
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	6812      	ldr	r2, [r2, #0]
 8008df6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008df8:	430b      	orrs	r3, r1
 8008dfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	68da      	ldr	r2, [r3, #12]
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4ab3      	ldr	r2, [pc, #716]	@ (80090ec <UART_SetConfig+0x32c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d004      	beq.n	8008e2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	689a      	ldr	r2, [r3, #8]
 8008e32:	4baf      	ldr	r3, [pc, #700]	@ (80090f0 <UART_SetConfig+0x330>)
 8008e34:	4013      	ands	r3, r2
 8008e36:	697a      	ldr	r2, [r7, #20]
 8008e38:	6812      	ldr	r2, [r2, #0]
 8008e3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e3c:	430b      	orrs	r3, r1
 8008e3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e46:	f023 010f 	bic.w	r1, r3, #15
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	430a      	orrs	r2, r1
 8008e54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4aa6      	ldr	r2, [pc, #664]	@ (80090f4 <UART_SetConfig+0x334>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d177      	bne.n	8008f50 <UART_SetConfig+0x190>
 8008e60:	4ba5      	ldr	r3, [pc, #660]	@ (80090f8 <UART_SetConfig+0x338>)
 8008e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e68:	2b28      	cmp	r3, #40	@ 0x28
 8008e6a:	d86d      	bhi.n	8008f48 <UART_SetConfig+0x188>
 8008e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e74 <UART_SetConfig+0xb4>)
 8008e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e72:	bf00      	nop
 8008e74:	08008f19 	.word	0x08008f19
 8008e78:	08008f49 	.word	0x08008f49
 8008e7c:	08008f49 	.word	0x08008f49
 8008e80:	08008f49 	.word	0x08008f49
 8008e84:	08008f49 	.word	0x08008f49
 8008e88:	08008f49 	.word	0x08008f49
 8008e8c:	08008f49 	.word	0x08008f49
 8008e90:	08008f49 	.word	0x08008f49
 8008e94:	08008f21 	.word	0x08008f21
 8008e98:	08008f49 	.word	0x08008f49
 8008e9c:	08008f49 	.word	0x08008f49
 8008ea0:	08008f49 	.word	0x08008f49
 8008ea4:	08008f49 	.word	0x08008f49
 8008ea8:	08008f49 	.word	0x08008f49
 8008eac:	08008f49 	.word	0x08008f49
 8008eb0:	08008f49 	.word	0x08008f49
 8008eb4:	08008f29 	.word	0x08008f29
 8008eb8:	08008f49 	.word	0x08008f49
 8008ebc:	08008f49 	.word	0x08008f49
 8008ec0:	08008f49 	.word	0x08008f49
 8008ec4:	08008f49 	.word	0x08008f49
 8008ec8:	08008f49 	.word	0x08008f49
 8008ecc:	08008f49 	.word	0x08008f49
 8008ed0:	08008f49 	.word	0x08008f49
 8008ed4:	08008f31 	.word	0x08008f31
 8008ed8:	08008f49 	.word	0x08008f49
 8008edc:	08008f49 	.word	0x08008f49
 8008ee0:	08008f49 	.word	0x08008f49
 8008ee4:	08008f49 	.word	0x08008f49
 8008ee8:	08008f49 	.word	0x08008f49
 8008eec:	08008f49 	.word	0x08008f49
 8008ef0:	08008f49 	.word	0x08008f49
 8008ef4:	08008f39 	.word	0x08008f39
 8008ef8:	08008f49 	.word	0x08008f49
 8008efc:	08008f49 	.word	0x08008f49
 8008f00:	08008f49 	.word	0x08008f49
 8008f04:	08008f49 	.word	0x08008f49
 8008f08:	08008f49 	.word	0x08008f49
 8008f0c:	08008f49 	.word	0x08008f49
 8008f10:	08008f49 	.word	0x08008f49
 8008f14:	08008f41 	.word	0x08008f41
 8008f18:	2301      	movs	r3, #1
 8008f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f1e:	e222      	b.n	8009366 <UART_SetConfig+0x5a6>
 8008f20:	2304      	movs	r3, #4
 8008f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f26:	e21e      	b.n	8009366 <UART_SetConfig+0x5a6>
 8008f28:	2308      	movs	r3, #8
 8008f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2e:	e21a      	b.n	8009366 <UART_SetConfig+0x5a6>
 8008f30:	2310      	movs	r3, #16
 8008f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f36:	e216      	b.n	8009366 <UART_SetConfig+0x5a6>
 8008f38:	2320      	movs	r3, #32
 8008f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f3e:	e212      	b.n	8009366 <UART_SetConfig+0x5a6>
 8008f40:	2340      	movs	r3, #64	@ 0x40
 8008f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f46:	e20e      	b.n	8009366 <UART_SetConfig+0x5a6>
 8008f48:	2380      	movs	r3, #128	@ 0x80
 8008f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4e:	e20a      	b.n	8009366 <UART_SetConfig+0x5a6>
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a69      	ldr	r2, [pc, #420]	@ (80090fc <UART_SetConfig+0x33c>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d130      	bne.n	8008fbc <UART_SetConfig+0x1fc>
 8008f5a:	4b67      	ldr	r3, [pc, #412]	@ (80090f8 <UART_SetConfig+0x338>)
 8008f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f5e:	f003 0307 	and.w	r3, r3, #7
 8008f62:	2b05      	cmp	r3, #5
 8008f64:	d826      	bhi.n	8008fb4 <UART_SetConfig+0x1f4>
 8008f66:	a201      	add	r2, pc, #4	@ (adr r2, 8008f6c <UART_SetConfig+0x1ac>)
 8008f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6c:	08008f85 	.word	0x08008f85
 8008f70:	08008f8d 	.word	0x08008f8d
 8008f74:	08008f95 	.word	0x08008f95
 8008f78:	08008f9d 	.word	0x08008f9d
 8008f7c:	08008fa5 	.word	0x08008fa5
 8008f80:	08008fad 	.word	0x08008fad
 8008f84:	2300      	movs	r3, #0
 8008f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f8a:	e1ec      	b.n	8009366 <UART_SetConfig+0x5a6>
 8008f8c:	2304      	movs	r3, #4
 8008f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f92:	e1e8      	b.n	8009366 <UART_SetConfig+0x5a6>
 8008f94:	2308      	movs	r3, #8
 8008f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f9a:	e1e4      	b.n	8009366 <UART_SetConfig+0x5a6>
 8008f9c:	2310      	movs	r3, #16
 8008f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fa2:	e1e0      	b.n	8009366 <UART_SetConfig+0x5a6>
 8008fa4:	2320      	movs	r3, #32
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008faa:	e1dc      	b.n	8009366 <UART_SetConfig+0x5a6>
 8008fac:	2340      	movs	r3, #64	@ 0x40
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb2:	e1d8      	b.n	8009366 <UART_SetConfig+0x5a6>
 8008fb4:	2380      	movs	r3, #128	@ 0x80
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fba:	e1d4      	b.n	8009366 <UART_SetConfig+0x5a6>
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a4f      	ldr	r2, [pc, #316]	@ (8009100 <UART_SetConfig+0x340>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d130      	bne.n	8009028 <UART_SetConfig+0x268>
 8008fc6:	4b4c      	ldr	r3, [pc, #304]	@ (80090f8 <UART_SetConfig+0x338>)
 8008fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fca:	f003 0307 	and.w	r3, r3, #7
 8008fce:	2b05      	cmp	r3, #5
 8008fd0:	d826      	bhi.n	8009020 <UART_SetConfig+0x260>
 8008fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd8 <UART_SetConfig+0x218>)
 8008fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd8:	08008ff1 	.word	0x08008ff1
 8008fdc:	08008ff9 	.word	0x08008ff9
 8008fe0:	08009001 	.word	0x08009001
 8008fe4:	08009009 	.word	0x08009009
 8008fe8:	08009011 	.word	0x08009011
 8008fec:	08009019 	.word	0x08009019
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ff6:	e1b6      	b.n	8009366 <UART_SetConfig+0x5a6>
 8008ff8:	2304      	movs	r3, #4
 8008ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ffe:	e1b2      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009000:	2308      	movs	r3, #8
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009006:	e1ae      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009008:	2310      	movs	r3, #16
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800900e:	e1aa      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009010:	2320      	movs	r3, #32
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009016:	e1a6      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009018:	2340      	movs	r3, #64	@ 0x40
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800901e:	e1a2      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009020:	2380      	movs	r3, #128	@ 0x80
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009026:	e19e      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a35      	ldr	r2, [pc, #212]	@ (8009104 <UART_SetConfig+0x344>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d130      	bne.n	8009094 <UART_SetConfig+0x2d4>
 8009032:	4b31      	ldr	r3, [pc, #196]	@ (80090f8 <UART_SetConfig+0x338>)
 8009034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009036:	f003 0307 	and.w	r3, r3, #7
 800903a:	2b05      	cmp	r3, #5
 800903c:	d826      	bhi.n	800908c <UART_SetConfig+0x2cc>
 800903e:	a201      	add	r2, pc, #4	@ (adr r2, 8009044 <UART_SetConfig+0x284>)
 8009040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009044:	0800905d 	.word	0x0800905d
 8009048:	08009065 	.word	0x08009065
 800904c:	0800906d 	.word	0x0800906d
 8009050:	08009075 	.word	0x08009075
 8009054:	0800907d 	.word	0x0800907d
 8009058:	08009085 	.word	0x08009085
 800905c:	2300      	movs	r3, #0
 800905e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009062:	e180      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009064:	2304      	movs	r3, #4
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906a:	e17c      	b.n	8009366 <UART_SetConfig+0x5a6>
 800906c:	2308      	movs	r3, #8
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009072:	e178      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009074:	2310      	movs	r3, #16
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800907a:	e174      	b.n	8009366 <UART_SetConfig+0x5a6>
 800907c:	2320      	movs	r3, #32
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009082:	e170      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009084:	2340      	movs	r3, #64	@ 0x40
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800908a:	e16c      	b.n	8009366 <UART_SetConfig+0x5a6>
 800908c:	2380      	movs	r3, #128	@ 0x80
 800908e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009092:	e168      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a1b      	ldr	r2, [pc, #108]	@ (8009108 <UART_SetConfig+0x348>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d142      	bne.n	8009124 <UART_SetConfig+0x364>
 800909e:	4b16      	ldr	r3, [pc, #88]	@ (80090f8 <UART_SetConfig+0x338>)
 80090a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090a2:	f003 0307 	and.w	r3, r3, #7
 80090a6:	2b05      	cmp	r3, #5
 80090a8:	d838      	bhi.n	800911c <UART_SetConfig+0x35c>
 80090aa:	a201      	add	r2, pc, #4	@ (adr r2, 80090b0 <UART_SetConfig+0x2f0>)
 80090ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b0:	080090c9 	.word	0x080090c9
 80090b4:	080090d1 	.word	0x080090d1
 80090b8:	080090d9 	.word	0x080090d9
 80090bc:	080090e1 	.word	0x080090e1
 80090c0:	0800910d 	.word	0x0800910d
 80090c4:	08009115 	.word	0x08009115
 80090c8:	2300      	movs	r3, #0
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ce:	e14a      	b.n	8009366 <UART_SetConfig+0x5a6>
 80090d0:	2304      	movs	r3, #4
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d6:	e146      	b.n	8009366 <UART_SetConfig+0x5a6>
 80090d8:	2308      	movs	r3, #8
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090de:	e142      	b.n	8009366 <UART_SetConfig+0x5a6>
 80090e0:	2310      	movs	r3, #16
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e6:	e13e      	b.n	8009366 <UART_SetConfig+0x5a6>
 80090e8:	cfff69f3 	.word	0xcfff69f3
 80090ec:	58000c00 	.word	0x58000c00
 80090f0:	11fff4ff 	.word	0x11fff4ff
 80090f4:	40011000 	.word	0x40011000
 80090f8:	58024400 	.word	0x58024400
 80090fc:	40004400 	.word	0x40004400
 8009100:	40004800 	.word	0x40004800
 8009104:	40004c00 	.word	0x40004c00
 8009108:	40005000 	.word	0x40005000
 800910c:	2320      	movs	r3, #32
 800910e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009112:	e128      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009114:	2340      	movs	r3, #64	@ 0x40
 8009116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800911a:	e124      	b.n	8009366 <UART_SetConfig+0x5a6>
 800911c:	2380      	movs	r3, #128	@ 0x80
 800911e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009122:	e120      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4acb      	ldr	r2, [pc, #812]	@ (8009458 <UART_SetConfig+0x698>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d176      	bne.n	800921c <UART_SetConfig+0x45c>
 800912e:	4bcb      	ldr	r3, [pc, #812]	@ (800945c <UART_SetConfig+0x69c>)
 8009130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009132:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009136:	2b28      	cmp	r3, #40	@ 0x28
 8009138:	d86c      	bhi.n	8009214 <UART_SetConfig+0x454>
 800913a:	a201      	add	r2, pc, #4	@ (adr r2, 8009140 <UART_SetConfig+0x380>)
 800913c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009140:	080091e5 	.word	0x080091e5
 8009144:	08009215 	.word	0x08009215
 8009148:	08009215 	.word	0x08009215
 800914c:	08009215 	.word	0x08009215
 8009150:	08009215 	.word	0x08009215
 8009154:	08009215 	.word	0x08009215
 8009158:	08009215 	.word	0x08009215
 800915c:	08009215 	.word	0x08009215
 8009160:	080091ed 	.word	0x080091ed
 8009164:	08009215 	.word	0x08009215
 8009168:	08009215 	.word	0x08009215
 800916c:	08009215 	.word	0x08009215
 8009170:	08009215 	.word	0x08009215
 8009174:	08009215 	.word	0x08009215
 8009178:	08009215 	.word	0x08009215
 800917c:	08009215 	.word	0x08009215
 8009180:	080091f5 	.word	0x080091f5
 8009184:	08009215 	.word	0x08009215
 8009188:	08009215 	.word	0x08009215
 800918c:	08009215 	.word	0x08009215
 8009190:	08009215 	.word	0x08009215
 8009194:	08009215 	.word	0x08009215
 8009198:	08009215 	.word	0x08009215
 800919c:	08009215 	.word	0x08009215
 80091a0:	080091fd 	.word	0x080091fd
 80091a4:	08009215 	.word	0x08009215
 80091a8:	08009215 	.word	0x08009215
 80091ac:	08009215 	.word	0x08009215
 80091b0:	08009215 	.word	0x08009215
 80091b4:	08009215 	.word	0x08009215
 80091b8:	08009215 	.word	0x08009215
 80091bc:	08009215 	.word	0x08009215
 80091c0:	08009205 	.word	0x08009205
 80091c4:	08009215 	.word	0x08009215
 80091c8:	08009215 	.word	0x08009215
 80091cc:	08009215 	.word	0x08009215
 80091d0:	08009215 	.word	0x08009215
 80091d4:	08009215 	.word	0x08009215
 80091d8:	08009215 	.word	0x08009215
 80091dc:	08009215 	.word	0x08009215
 80091e0:	0800920d 	.word	0x0800920d
 80091e4:	2301      	movs	r3, #1
 80091e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ea:	e0bc      	b.n	8009366 <UART_SetConfig+0x5a6>
 80091ec:	2304      	movs	r3, #4
 80091ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091f2:	e0b8      	b.n	8009366 <UART_SetConfig+0x5a6>
 80091f4:	2308      	movs	r3, #8
 80091f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091fa:	e0b4      	b.n	8009366 <UART_SetConfig+0x5a6>
 80091fc:	2310      	movs	r3, #16
 80091fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009202:	e0b0      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009204:	2320      	movs	r3, #32
 8009206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800920a:	e0ac      	b.n	8009366 <UART_SetConfig+0x5a6>
 800920c:	2340      	movs	r3, #64	@ 0x40
 800920e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009212:	e0a8      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009214:	2380      	movs	r3, #128	@ 0x80
 8009216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800921a:	e0a4      	b.n	8009366 <UART_SetConfig+0x5a6>
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a8f      	ldr	r2, [pc, #572]	@ (8009460 <UART_SetConfig+0x6a0>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d130      	bne.n	8009288 <UART_SetConfig+0x4c8>
 8009226:	4b8d      	ldr	r3, [pc, #564]	@ (800945c <UART_SetConfig+0x69c>)
 8009228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800922a:	f003 0307 	and.w	r3, r3, #7
 800922e:	2b05      	cmp	r3, #5
 8009230:	d826      	bhi.n	8009280 <UART_SetConfig+0x4c0>
 8009232:	a201      	add	r2, pc, #4	@ (adr r2, 8009238 <UART_SetConfig+0x478>)
 8009234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009238:	08009251 	.word	0x08009251
 800923c:	08009259 	.word	0x08009259
 8009240:	08009261 	.word	0x08009261
 8009244:	08009269 	.word	0x08009269
 8009248:	08009271 	.word	0x08009271
 800924c:	08009279 	.word	0x08009279
 8009250:	2300      	movs	r3, #0
 8009252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009256:	e086      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009258:	2304      	movs	r3, #4
 800925a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800925e:	e082      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009260:	2308      	movs	r3, #8
 8009262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009266:	e07e      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009268:	2310      	movs	r3, #16
 800926a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800926e:	e07a      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009270:	2320      	movs	r3, #32
 8009272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009276:	e076      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009278:	2340      	movs	r3, #64	@ 0x40
 800927a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800927e:	e072      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009280:	2380      	movs	r3, #128	@ 0x80
 8009282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009286:	e06e      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a75      	ldr	r2, [pc, #468]	@ (8009464 <UART_SetConfig+0x6a4>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d130      	bne.n	80092f4 <UART_SetConfig+0x534>
 8009292:	4b72      	ldr	r3, [pc, #456]	@ (800945c <UART_SetConfig+0x69c>)
 8009294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009296:	f003 0307 	and.w	r3, r3, #7
 800929a:	2b05      	cmp	r3, #5
 800929c:	d826      	bhi.n	80092ec <UART_SetConfig+0x52c>
 800929e:	a201      	add	r2, pc, #4	@ (adr r2, 80092a4 <UART_SetConfig+0x4e4>)
 80092a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a4:	080092bd 	.word	0x080092bd
 80092a8:	080092c5 	.word	0x080092c5
 80092ac:	080092cd 	.word	0x080092cd
 80092b0:	080092d5 	.word	0x080092d5
 80092b4:	080092dd 	.word	0x080092dd
 80092b8:	080092e5 	.word	0x080092e5
 80092bc:	2300      	movs	r3, #0
 80092be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092c2:	e050      	b.n	8009366 <UART_SetConfig+0x5a6>
 80092c4:	2304      	movs	r3, #4
 80092c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ca:	e04c      	b.n	8009366 <UART_SetConfig+0x5a6>
 80092cc:	2308      	movs	r3, #8
 80092ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092d2:	e048      	b.n	8009366 <UART_SetConfig+0x5a6>
 80092d4:	2310      	movs	r3, #16
 80092d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092da:	e044      	b.n	8009366 <UART_SetConfig+0x5a6>
 80092dc:	2320      	movs	r3, #32
 80092de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092e2:	e040      	b.n	8009366 <UART_SetConfig+0x5a6>
 80092e4:	2340      	movs	r3, #64	@ 0x40
 80092e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ea:	e03c      	b.n	8009366 <UART_SetConfig+0x5a6>
 80092ec:	2380      	movs	r3, #128	@ 0x80
 80092ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092f2:	e038      	b.n	8009366 <UART_SetConfig+0x5a6>
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a5b      	ldr	r2, [pc, #364]	@ (8009468 <UART_SetConfig+0x6a8>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d130      	bne.n	8009360 <UART_SetConfig+0x5a0>
 80092fe:	4b57      	ldr	r3, [pc, #348]	@ (800945c <UART_SetConfig+0x69c>)
 8009300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009302:	f003 0307 	and.w	r3, r3, #7
 8009306:	2b05      	cmp	r3, #5
 8009308:	d826      	bhi.n	8009358 <UART_SetConfig+0x598>
 800930a:	a201      	add	r2, pc, #4	@ (adr r2, 8009310 <UART_SetConfig+0x550>)
 800930c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009310:	08009329 	.word	0x08009329
 8009314:	08009331 	.word	0x08009331
 8009318:	08009339 	.word	0x08009339
 800931c:	08009341 	.word	0x08009341
 8009320:	08009349 	.word	0x08009349
 8009324:	08009351 	.word	0x08009351
 8009328:	2302      	movs	r3, #2
 800932a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800932e:	e01a      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009330:	2304      	movs	r3, #4
 8009332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009336:	e016      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009338:	2308      	movs	r3, #8
 800933a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800933e:	e012      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009340:	2310      	movs	r3, #16
 8009342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009346:	e00e      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009348:	2320      	movs	r3, #32
 800934a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800934e:	e00a      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009350:	2340      	movs	r3, #64	@ 0x40
 8009352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009356:	e006      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009358:	2380      	movs	r3, #128	@ 0x80
 800935a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800935e:	e002      	b.n	8009366 <UART_SetConfig+0x5a6>
 8009360:	2380      	movs	r3, #128	@ 0x80
 8009362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a3f      	ldr	r2, [pc, #252]	@ (8009468 <UART_SetConfig+0x6a8>)
 800936c:	4293      	cmp	r3, r2
 800936e:	f040 80f8 	bne.w	8009562 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009372:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009376:	2b20      	cmp	r3, #32
 8009378:	dc46      	bgt.n	8009408 <UART_SetConfig+0x648>
 800937a:	2b02      	cmp	r3, #2
 800937c:	f2c0 8082 	blt.w	8009484 <UART_SetConfig+0x6c4>
 8009380:	3b02      	subs	r3, #2
 8009382:	2b1e      	cmp	r3, #30
 8009384:	d87e      	bhi.n	8009484 <UART_SetConfig+0x6c4>
 8009386:	a201      	add	r2, pc, #4	@ (adr r2, 800938c <UART_SetConfig+0x5cc>)
 8009388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938c:	0800940f 	.word	0x0800940f
 8009390:	08009485 	.word	0x08009485
 8009394:	08009417 	.word	0x08009417
 8009398:	08009485 	.word	0x08009485
 800939c:	08009485 	.word	0x08009485
 80093a0:	08009485 	.word	0x08009485
 80093a4:	08009427 	.word	0x08009427
 80093a8:	08009485 	.word	0x08009485
 80093ac:	08009485 	.word	0x08009485
 80093b0:	08009485 	.word	0x08009485
 80093b4:	08009485 	.word	0x08009485
 80093b8:	08009485 	.word	0x08009485
 80093bc:	08009485 	.word	0x08009485
 80093c0:	08009485 	.word	0x08009485
 80093c4:	08009437 	.word	0x08009437
 80093c8:	08009485 	.word	0x08009485
 80093cc:	08009485 	.word	0x08009485
 80093d0:	08009485 	.word	0x08009485
 80093d4:	08009485 	.word	0x08009485
 80093d8:	08009485 	.word	0x08009485
 80093dc:	08009485 	.word	0x08009485
 80093e0:	08009485 	.word	0x08009485
 80093e4:	08009485 	.word	0x08009485
 80093e8:	08009485 	.word	0x08009485
 80093ec:	08009485 	.word	0x08009485
 80093f0:	08009485 	.word	0x08009485
 80093f4:	08009485 	.word	0x08009485
 80093f8:	08009485 	.word	0x08009485
 80093fc:	08009485 	.word	0x08009485
 8009400:	08009485 	.word	0x08009485
 8009404:	08009477 	.word	0x08009477
 8009408:	2b40      	cmp	r3, #64	@ 0x40
 800940a:	d037      	beq.n	800947c <UART_SetConfig+0x6bc>
 800940c:	e03a      	b.n	8009484 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800940e:	f7fe fd87 	bl	8007f20 <HAL_RCCEx_GetD3PCLK1Freq>
 8009412:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009414:	e03c      	b.n	8009490 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009416:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800941a:	4618      	mov	r0, r3
 800941c:	f7fe fd96 	bl	8007f4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009424:	e034      	b.n	8009490 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009426:	f107 0318 	add.w	r3, r7, #24
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe fee2 	bl	80081f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009434:	e02c      	b.n	8009490 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009436:	4b09      	ldr	r3, [pc, #36]	@ (800945c <UART_SetConfig+0x69c>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f003 0320 	and.w	r3, r3, #32
 800943e:	2b00      	cmp	r3, #0
 8009440:	d016      	beq.n	8009470 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009442:	4b06      	ldr	r3, [pc, #24]	@ (800945c <UART_SetConfig+0x69c>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	08db      	lsrs	r3, r3, #3
 8009448:	f003 0303 	and.w	r3, r3, #3
 800944c:	4a07      	ldr	r2, [pc, #28]	@ (800946c <UART_SetConfig+0x6ac>)
 800944e:	fa22 f303 	lsr.w	r3, r2, r3
 8009452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009454:	e01c      	b.n	8009490 <UART_SetConfig+0x6d0>
 8009456:	bf00      	nop
 8009458:	40011400 	.word	0x40011400
 800945c:	58024400 	.word	0x58024400
 8009460:	40007800 	.word	0x40007800
 8009464:	40007c00 	.word	0x40007c00
 8009468:	58000c00 	.word	0x58000c00
 800946c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009470:	4b9d      	ldr	r3, [pc, #628]	@ (80096e8 <UART_SetConfig+0x928>)
 8009472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009474:	e00c      	b.n	8009490 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009476:	4b9d      	ldr	r3, [pc, #628]	@ (80096ec <UART_SetConfig+0x92c>)
 8009478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800947a:	e009      	b.n	8009490 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800947c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009482:	e005      	b.n	8009490 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009484:	2300      	movs	r3, #0
 8009486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800948e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 81de 	beq.w	8009854 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800949c:	4a94      	ldr	r2, [pc, #592]	@ (80096f0 <UART_SetConfig+0x930>)
 800949e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094a2:	461a      	mov	r2, r3
 80094a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80094aa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	4613      	mov	r3, r2
 80094b2:	005b      	lsls	r3, r3, #1
 80094b4:	4413      	add	r3, r2
 80094b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d305      	bcc.n	80094c8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d903      	bls.n	80094d0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80094ce:	e1c1      	b.n	8009854 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094d2:	2200      	movs	r2, #0
 80094d4:	60bb      	str	r3, [r7, #8]
 80094d6:	60fa      	str	r2, [r7, #12]
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094dc:	4a84      	ldr	r2, [pc, #528]	@ (80096f0 <UART_SetConfig+0x930>)
 80094de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	2200      	movs	r2, #0
 80094e6:	603b      	str	r3, [r7, #0]
 80094e8:	607a      	str	r2, [r7, #4]
 80094ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80094f2:	f7f6 fef1 	bl	80002d8 <__aeabi_uldivmod>
 80094f6:	4602      	mov	r2, r0
 80094f8:	460b      	mov	r3, r1
 80094fa:	4610      	mov	r0, r2
 80094fc:	4619      	mov	r1, r3
 80094fe:	f04f 0200 	mov.w	r2, #0
 8009502:	f04f 0300 	mov.w	r3, #0
 8009506:	020b      	lsls	r3, r1, #8
 8009508:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800950c:	0202      	lsls	r2, r0, #8
 800950e:	6979      	ldr	r1, [r7, #20]
 8009510:	6849      	ldr	r1, [r1, #4]
 8009512:	0849      	lsrs	r1, r1, #1
 8009514:	2000      	movs	r0, #0
 8009516:	460c      	mov	r4, r1
 8009518:	4605      	mov	r5, r0
 800951a:	eb12 0804 	adds.w	r8, r2, r4
 800951e:	eb43 0905 	adc.w	r9, r3, r5
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	469a      	mov	sl, r3
 800952a:	4693      	mov	fp, r2
 800952c:	4652      	mov	r2, sl
 800952e:	465b      	mov	r3, fp
 8009530:	4640      	mov	r0, r8
 8009532:	4649      	mov	r1, r9
 8009534:	f7f6 fed0 	bl	80002d8 <__aeabi_uldivmod>
 8009538:	4602      	mov	r2, r0
 800953a:	460b      	mov	r3, r1
 800953c:	4613      	mov	r3, r2
 800953e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009542:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009546:	d308      	bcc.n	800955a <UART_SetConfig+0x79a>
 8009548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800954a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800954e:	d204      	bcs.n	800955a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009556:	60da      	str	r2, [r3, #12]
 8009558:	e17c      	b.n	8009854 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009560:	e178      	b.n	8009854 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	69db      	ldr	r3, [r3, #28]
 8009566:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800956a:	f040 80c5 	bne.w	80096f8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800956e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009572:	2b20      	cmp	r3, #32
 8009574:	dc48      	bgt.n	8009608 <UART_SetConfig+0x848>
 8009576:	2b00      	cmp	r3, #0
 8009578:	db7b      	blt.n	8009672 <UART_SetConfig+0x8b2>
 800957a:	2b20      	cmp	r3, #32
 800957c:	d879      	bhi.n	8009672 <UART_SetConfig+0x8b2>
 800957e:	a201      	add	r2, pc, #4	@ (adr r2, 8009584 <UART_SetConfig+0x7c4>)
 8009580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009584:	0800960f 	.word	0x0800960f
 8009588:	08009617 	.word	0x08009617
 800958c:	08009673 	.word	0x08009673
 8009590:	08009673 	.word	0x08009673
 8009594:	0800961f 	.word	0x0800961f
 8009598:	08009673 	.word	0x08009673
 800959c:	08009673 	.word	0x08009673
 80095a0:	08009673 	.word	0x08009673
 80095a4:	0800962f 	.word	0x0800962f
 80095a8:	08009673 	.word	0x08009673
 80095ac:	08009673 	.word	0x08009673
 80095b0:	08009673 	.word	0x08009673
 80095b4:	08009673 	.word	0x08009673
 80095b8:	08009673 	.word	0x08009673
 80095bc:	08009673 	.word	0x08009673
 80095c0:	08009673 	.word	0x08009673
 80095c4:	0800963f 	.word	0x0800963f
 80095c8:	08009673 	.word	0x08009673
 80095cc:	08009673 	.word	0x08009673
 80095d0:	08009673 	.word	0x08009673
 80095d4:	08009673 	.word	0x08009673
 80095d8:	08009673 	.word	0x08009673
 80095dc:	08009673 	.word	0x08009673
 80095e0:	08009673 	.word	0x08009673
 80095e4:	08009673 	.word	0x08009673
 80095e8:	08009673 	.word	0x08009673
 80095ec:	08009673 	.word	0x08009673
 80095f0:	08009673 	.word	0x08009673
 80095f4:	08009673 	.word	0x08009673
 80095f8:	08009673 	.word	0x08009673
 80095fc:	08009673 	.word	0x08009673
 8009600:	08009673 	.word	0x08009673
 8009604:	08009665 	.word	0x08009665
 8009608:	2b40      	cmp	r3, #64	@ 0x40
 800960a:	d02e      	beq.n	800966a <UART_SetConfig+0x8aa>
 800960c:	e031      	b.n	8009672 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800960e:	f7fc fcd1 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
 8009612:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009614:	e033      	b.n	800967e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009616:	f7fc fce3 	bl	8005fe0 <HAL_RCC_GetPCLK2Freq>
 800961a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800961c:	e02f      	b.n	800967e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800961e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009622:	4618      	mov	r0, r3
 8009624:	f7fe fc92 	bl	8007f4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800962c:	e027      	b.n	800967e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800962e:	f107 0318 	add.w	r3, r7, #24
 8009632:	4618      	mov	r0, r3
 8009634:	f7fe fdde 	bl	80081f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800963c:	e01f      	b.n	800967e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800963e:	4b2d      	ldr	r3, [pc, #180]	@ (80096f4 <UART_SetConfig+0x934>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 0320 	and.w	r3, r3, #32
 8009646:	2b00      	cmp	r3, #0
 8009648:	d009      	beq.n	800965e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800964a:	4b2a      	ldr	r3, [pc, #168]	@ (80096f4 <UART_SetConfig+0x934>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	08db      	lsrs	r3, r3, #3
 8009650:	f003 0303 	and.w	r3, r3, #3
 8009654:	4a24      	ldr	r2, [pc, #144]	@ (80096e8 <UART_SetConfig+0x928>)
 8009656:	fa22 f303 	lsr.w	r3, r2, r3
 800965a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800965c:	e00f      	b.n	800967e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800965e:	4b22      	ldr	r3, [pc, #136]	@ (80096e8 <UART_SetConfig+0x928>)
 8009660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009662:	e00c      	b.n	800967e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009664:	4b21      	ldr	r3, [pc, #132]	@ (80096ec <UART_SetConfig+0x92c>)
 8009666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009668:	e009      	b.n	800967e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800966a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800966e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009670:	e005      	b.n	800967e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009672:	2300      	movs	r3, #0
 8009674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800967c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800967e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009680:	2b00      	cmp	r3, #0
 8009682:	f000 80e7 	beq.w	8009854 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800968a:	4a19      	ldr	r2, [pc, #100]	@ (80096f0 <UART_SetConfig+0x930>)
 800968c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009690:	461a      	mov	r2, r3
 8009692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009694:	fbb3 f3f2 	udiv	r3, r3, r2
 8009698:	005a      	lsls	r2, r3, #1
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	085b      	lsrs	r3, r3, #1
 80096a0:	441a      	add	r2, r3
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80096aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ae:	2b0f      	cmp	r3, #15
 80096b0:	d916      	bls.n	80096e0 <UART_SetConfig+0x920>
 80096b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096b8:	d212      	bcs.n	80096e0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80096ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096bc:	b29b      	uxth	r3, r3
 80096be:	f023 030f 	bic.w	r3, r3, #15
 80096c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80096c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c6:	085b      	lsrs	r3, r3, #1
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	f003 0307 	and.w	r3, r3, #7
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80096d2:	4313      	orrs	r3, r2
 80096d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80096dc:	60da      	str	r2, [r3, #12]
 80096de:	e0b9      	b.n	8009854 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80096e6:	e0b5      	b.n	8009854 <UART_SetConfig+0xa94>
 80096e8:	03d09000 	.word	0x03d09000
 80096ec:	003d0900 	.word	0x003d0900
 80096f0:	08009f60 	.word	0x08009f60
 80096f4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80096f8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80096fc:	2b20      	cmp	r3, #32
 80096fe:	dc49      	bgt.n	8009794 <UART_SetConfig+0x9d4>
 8009700:	2b00      	cmp	r3, #0
 8009702:	db7c      	blt.n	80097fe <UART_SetConfig+0xa3e>
 8009704:	2b20      	cmp	r3, #32
 8009706:	d87a      	bhi.n	80097fe <UART_SetConfig+0xa3e>
 8009708:	a201      	add	r2, pc, #4	@ (adr r2, 8009710 <UART_SetConfig+0x950>)
 800970a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970e:	bf00      	nop
 8009710:	0800979b 	.word	0x0800979b
 8009714:	080097a3 	.word	0x080097a3
 8009718:	080097ff 	.word	0x080097ff
 800971c:	080097ff 	.word	0x080097ff
 8009720:	080097ab 	.word	0x080097ab
 8009724:	080097ff 	.word	0x080097ff
 8009728:	080097ff 	.word	0x080097ff
 800972c:	080097ff 	.word	0x080097ff
 8009730:	080097bb 	.word	0x080097bb
 8009734:	080097ff 	.word	0x080097ff
 8009738:	080097ff 	.word	0x080097ff
 800973c:	080097ff 	.word	0x080097ff
 8009740:	080097ff 	.word	0x080097ff
 8009744:	080097ff 	.word	0x080097ff
 8009748:	080097ff 	.word	0x080097ff
 800974c:	080097ff 	.word	0x080097ff
 8009750:	080097cb 	.word	0x080097cb
 8009754:	080097ff 	.word	0x080097ff
 8009758:	080097ff 	.word	0x080097ff
 800975c:	080097ff 	.word	0x080097ff
 8009760:	080097ff 	.word	0x080097ff
 8009764:	080097ff 	.word	0x080097ff
 8009768:	080097ff 	.word	0x080097ff
 800976c:	080097ff 	.word	0x080097ff
 8009770:	080097ff 	.word	0x080097ff
 8009774:	080097ff 	.word	0x080097ff
 8009778:	080097ff 	.word	0x080097ff
 800977c:	080097ff 	.word	0x080097ff
 8009780:	080097ff 	.word	0x080097ff
 8009784:	080097ff 	.word	0x080097ff
 8009788:	080097ff 	.word	0x080097ff
 800978c:	080097ff 	.word	0x080097ff
 8009790:	080097f1 	.word	0x080097f1
 8009794:	2b40      	cmp	r3, #64	@ 0x40
 8009796:	d02e      	beq.n	80097f6 <UART_SetConfig+0xa36>
 8009798:	e031      	b.n	80097fe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800979a:	f7fc fc0b 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
 800979e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80097a0:	e033      	b.n	800980a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097a2:	f7fc fc1d 	bl	8005fe0 <HAL_RCC_GetPCLK2Freq>
 80097a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80097a8:	e02f      	b.n	800980a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fe fbcc 	bl	8007f4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80097b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097b8:	e027      	b.n	800980a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097ba:	f107 0318 	add.w	r3, r7, #24
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fe fd18 	bl	80081f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097c8:	e01f      	b.n	800980a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097ca:	4b2d      	ldr	r3, [pc, #180]	@ (8009880 <UART_SetConfig+0xac0>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f003 0320 	and.w	r3, r3, #32
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d009      	beq.n	80097ea <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80097d6:	4b2a      	ldr	r3, [pc, #168]	@ (8009880 <UART_SetConfig+0xac0>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	08db      	lsrs	r3, r3, #3
 80097dc:	f003 0303 	and.w	r3, r3, #3
 80097e0:	4a28      	ldr	r2, [pc, #160]	@ (8009884 <UART_SetConfig+0xac4>)
 80097e2:	fa22 f303 	lsr.w	r3, r2, r3
 80097e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80097e8:	e00f      	b.n	800980a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80097ea:	4b26      	ldr	r3, [pc, #152]	@ (8009884 <UART_SetConfig+0xac4>)
 80097ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ee:	e00c      	b.n	800980a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80097f0:	4b25      	ldr	r3, [pc, #148]	@ (8009888 <UART_SetConfig+0xac8>)
 80097f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097f4:	e009      	b.n	800980a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097fc:	e005      	b.n	800980a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80097fe:	2300      	movs	r3, #0
 8009800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009808:	bf00      	nop
    }

    if (pclk != 0U)
 800980a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800980c:	2b00      	cmp	r3, #0
 800980e:	d021      	beq.n	8009854 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009814:	4a1d      	ldr	r2, [pc, #116]	@ (800988c <UART_SetConfig+0xacc>)
 8009816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800981a:	461a      	mov	r2, r3
 800981c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800981e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	085b      	lsrs	r3, r3, #1
 8009828:	441a      	add	r2, r3
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009832:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009836:	2b0f      	cmp	r3, #15
 8009838:	d909      	bls.n	800984e <UART_SetConfig+0xa8e>
 800983a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009840:	d205      	bcs.n	800984e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009844:	b29a      	uxth	r2, r3
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	60da      	str	r2, [r3, #12]
 800984c:	e002      	b.n	8009854 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	2201      	movs	r2, #1
 8009858:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	2201      	movs	r2, #1
 8009860:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	2200      	movs	r2, #0
 8009868:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	2200      	movs	r2, #0
 800986e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009870:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009874:	4618      	mov	r0, r3
 8009876:	3748      	adds	r7, #72	@ 0x48
 8009878:	46bd      	mov	sp, r7
 800987a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800987e:	bf00      	nop
 8009880:	58024400 	.word	0x58024400
 8009884:	03d09000 	.word	0x03d09000
 8009888:	003d0900 	.word	0x003d0900
 800988c:	08009f60 	.word	0x08009f60

08009890 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800989c:	f003 0308 	and.w	r3, r3, #8
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00a      	beq.n	80098ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	430a      	orrs	r2, r1
 80098b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098be:	f003 0301 	and.w	r3, r3, #1
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00a      	beq.n	80098dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	430a      	orrs	r2, r1
 80098da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e0:	f003 0302 	and.w	r3, r3, #2
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d00a      	beq.n	80098fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	430a      	orrs	r2, r1
 80098fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009902:	f003 0304 	and.w	r3, r3, #4
 8009906:	2b00      	cmp	r3, #0
 8009908:	d00a      	beq.n	8009920 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	430a      	orrs	r2, r1
 800991e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009924:	f003 0310 	and.w	r3, r3, #16
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00a      	beq.n	8009942 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	430a      	orrs	r2, r1
 8009940:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009946:	f003 0320 	and.w	r3, r3, #32
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00a      	beq.n	8009964 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	430a      	orrs	r2, r1
 8009962:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800996c:	2b00      	cmp	r3, #0
 800996e:	d01a      	beq.n	80099a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	430a      	orrs	r2, r1
 8009984:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800998a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800998e:	d10a      	bne.n	80099a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	430a      	orrs	r2, r1
 80099a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00a      	beq.n	80099c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	430a      	orrs	r2, r1
 80099c6:	605a      	str	r2, [r3, #4]
  }
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b098      	sub	sp, #96	@ 0x60
 80099d8:	af02      	add	r7, sp, #8
 80099da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80099e4:	f7f8 f8e0 	bl	8001ba8 <HAL_GetTick>
 80099e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 0308 	and.w	r3, r3, #8
 80099f4:	2b08      	cmp	r3, #8
 80099f6:	d12f      	bne.n	8009a58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a00:	2200      	movs	r2, #0
 8009a02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f88e 	bl	8009b28 <UART_WaitOnFlagUntilTimeout>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d022      	beq.n	8009a58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a1a:	e853 3f00 	ldrex	r3, [r3]
 8009a1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a26:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a30:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a32:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a38:	e841 2300 	strex	r3, r2, [r1]
 8009a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d1e6      	bne.n	8009a12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2220      	movs	r2, #32
 8009a48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a54:	2303      	movs	r3, #3
 8009a56:	e063      	b.n	8009b20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f003 0304 	and.w	r3, r3, #4
 8009a62:	2b04      	cmp	r3, #4
 8009a64:	d149      	bne.n	8009afa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a66:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 f857 	bl	8009b28 <UART_WaitOnFlagUntilTimeout>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d03c      	beq.n	8009afa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a88:	e853 3f00 	ldrex	r3, [r3]
 8009a8c:	623b      	str	r3, [r7, #32]
   return(result);
 8009a8e:	6a3b      	ldr	r3, [r7, #32]
 8009a90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009aa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009aa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009aa6:	e841 2300 	strex	r3, r2, [r1]
 8009aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1e6      	bne.n	8009a80 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	3308      	adds	r3, #8
 8009ab8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	e853 3f00 	ldrex	r3, [r3]
 8009ac0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f023 0301 	bic.w	r3, r3, #1
 8009ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	3308      	adds	r3, #8
 8009ad0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ad2:	61fa      	str	r2, [r7, #28]
 8009ad4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad6:	69b9      	ldr	r1, [r7, #24]
 8009ad8:	69fa      	ldr	r2, [r7, #28]
 8009ada:	e841 2300 	strex	r3, r2, [r1]
 8009ade:	617b      	str	r3, [r7, #20]
   return(result);
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1e5      	bne.n	8009ab2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2220      	movs	r2, #32
 8009aea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e012      	b.n	8009b20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2220      	movs	r2, #32
 8009afe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2220      	movs	r2, #32
 8009b06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3758      	adds	r7, #88	@ 0x58
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	603b      	str	r3, [r7, #0]
 8009b34:	4613      	mov	r3, r2
 8009b36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b38:	e04f      	b.n	8009bda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b40:	d04b      	beq.n	8009bda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b42:	f7f8 f831 	bl	8001ba8 <HAL_GetTick>
 8009b46:	4602      	mov	r2, r0
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	69ba      	ldr	r2, [r7, #24]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d302      	bcc.n	8009b58 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d101      	bne.n	8009b5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009b58:	2303      	movs	r3, #3
 8009b5a:	e04e      	b.n	8009bfa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f003 0304 	and.w	r3, r3, #4
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d037      	beq.n	8009bda <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	2b80      	cmp	r3, #128	@ 0x80
 8009b6e:	d034      	beq.n	8009bda <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	2b40      	cmp	r3, #64	@ 0x40
 8009b74:	d031      	beq.n	8009bda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	69db      	ldr	r3, [r3, #28]
 8009b7c:	f003 0308 	and.w	r3, r3, #8
 8009b80:	2b08      	cmp	r3, #8
 8009b82:	d110      	bne.n	8009ba6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2208      	movs	r2, #8
 8009b8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f000 f839 	bl	8009c04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2208      	movs	r2, #8
 8009b96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e029      	b.n	8009bfa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	69db      	ldr	r3, [r3, #28]
 8009bac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009bb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bb4:	d111      	bne.n	8009bda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009bbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f000 f81f 	bl	8009c04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2220      	movs	r2, #32
 8009bca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e00f      	b.n	8009bfa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	69da      	ldr	r2, [r3, #28]
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	4013      	ands	r3, r2
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	bf0c      	ite	eq
 8009bea:	2301      	moveq	r3, #1
 8009bec:	2300      	movne	r3, #0
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	79fb      	ldrb	r3, [r7, #7]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d0a0      	beq.n	8009b3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
	...

08009c04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b095      	sub	sp, #84	@ 0x54
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c14:	e853 3f00 	ldrex	r3, [r3]
 8009c18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	461a      	mov	r2, r3
 8009c28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c32:	e841 2300 	strex	r3, r2, [r1]
 8009c36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d1e6      	bne.n	8009c0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	3308      	adds	r3, #8
 8009c44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c46:	6a3b      	ldr	r3, [r7, #32]
 8009c48:	e853 3f00 	ldrex	r3, [r3]
 8009c4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c4e:	69fa      	ldr	r2, [r7, #28]
 8009c50:	4b1e      	ldr	r3, [pc, #120]	@ (8009ccc <UART_EndRxTransfer+0xc8>)
 8009c52:	4013      	ands	r3, r2
 8009c54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	3308      	adds	r3, #8
 8009c5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c66:	e841 2300 	strex	r3, r2, [r1]
 8009c6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1e5      	bne.n	8009c3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d118      	bne.n	8009cac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	e853 3f00 	ldrex	r3, [r3]
 8009c86:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	f023 0310 	bic.w	r3, r3, #16
 8009c8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	461a      	mov	r2, r3
 8009c96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c98:	61bb      	str	r3, [r7, #24]
 8009c9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9c:	6979      	ldr	r1, [r7, #20]
 8009c9e:	69ba      	ldr	r2, [r7, #24]
 8009ca0:	e841 2300 	strex	r3, r2, [r1]
 8009ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1e6      	bne.n	8009c7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2220      	movs	r2, #32
 8009cb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009cc0:	bf00      	nop
 8009cc2:	3754      	adds	r7, #84	@ 0x54
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr
 8009ccc:	effffffe 	.word	0xeffffffe

08009cd0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b085      	sub	sp, #20
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d101      	bne.n	8009ce6 <HAL_UARTEx_DisableFifoMode+0x16>
 8009ce2:	2302      	movs	r3, #2
 8009ce4:	e027      	b.n	8009d36 <HAL_UARTEx_DisableFifoMode+0x66>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2224      	movs	r2, #36	@ 0x24
 8009cf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f022 0201 	bic.w	r2, r2, #1
 8009d0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009d14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2220      	movs	r2, #32
 8009d28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b084      	sub	sp, #16
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
 8009d4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d101      	bne.n	8009d5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d56:	2302      	movs	r3, #2
 8009d58:	e02d      	b.n	8009db6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2224      	movs	r2, #36	@ 0x24
 8009d66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f022 0201 	bic.w	r2, r2, #1
 8009d80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	683a      	ldr	r2, [r7, #0]
 8009d92:	430a      	orrs	r2, r1
 8009d94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 f850 	bl	8009e3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2220      	movs	r2, #32
 8009da8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b084      	sub	sp, #16
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
 8009dc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d101      	bne.n	8009dd6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	e02d      	b.n	8009e32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2224      	movs	r2, #36	@ 0x24
 8009de2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f022 0201 	bic.w	r2, r2, #1
 8009dfc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	683a      	ldr	r2, [r7, #0]
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 f812 	bl	8009e3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2220      	movs	r2, #32
 8009e24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
	...

08009e3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d108      	bne.n	8009e5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e5c:	e031      	b.n	8009ec2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e5e:	2310      	movs	r3, #16
 8009e60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e62:	2310      	movs	r3, #16
 8009e64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	0e5b      	lsrs	r3, r3, #25
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	f003 0307 	and.w	r3, r3, #7
 8009e74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	0f5b      	lsrs	r3, r3, #29
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	f003 0307 	and.w	r3, r3, #7
 8009e84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e86:	7bbb      	ldrb	r3, [r7, #14]
 8009e88:	7b3a      	ldrb	r2, [r7, #12]
 8009e8a:	4911      	ldr	r1, [pc, #68]	@ (8009ed0 <UARTEx_SetNbDataToProcess+0x94>)
 8009e8c:	5c8a      	ldrb	r2, [r1, r2]
 8009e8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e92:	7b3a      	ldrb	r2, [r7, #12]
 8009e94:	490f      	ldr	r1, [pc, #60]	@ (8009ed4 <UARTEx_SetNbDataToProcess+0x98>)
 8009e96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e98:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ea4:	7bfb      	ldrb	r3, [r7, #15]
 8009ea6:	7b7a      	ldrb	r2, [r7, #13]
 8009ea8:	4909      	ldr	r1, [pc, #36]	@ (8009ed0 <UARTEx_SetNbDataToProcess+0x94>)
 8009eaa:	5c8a      	ldrb	r2, [r1, r2]
 8009eac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009eb0:	7b7a      	ldrb	r2, [r7, #13]
 8009eb2:	4908      	ldr	r1, [pc, #32]	@ (8009ed4 <UARTEx_SetNbDataToProcess+0x98>)
 8009eb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009eb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009ec2:	bf00      	nop
 8009ec4:	3714      	adds	r7, #20
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop
 8009ed0:	08009f78 	.word	0x08009f78
 8009ed4:	08009f80 	.word	0x08009f80

08009ed8 <memset>:
 8009ed8:	4402      	add	r2, r0
 8009eda:	4603      	mov	r3, r0
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d100      	bne.n	8009ee2 <memset+0xa>
 8009ee0:	4770      	bx	lr
 8009ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ee6:	e7f9      	b.n	8009edc <memset+0x4>

08009ee8 <__libc_init_array>:
 8009ee8:	b570      	push	{r4, r5, r6, lr}
 8009eea:	4d0d      	ldr	r5, [pc, #52]	@ (8009f20 <__libc_init_array+0x38>)
 8009eec:	4c0d      	ldr	r4, [pc, #52]	@ (8009f24 <__libc_init_array+0x3c>)
 8009eee:	1b64      	subs	r4, r4, r5
 8009ef0:	10a4      	asrs	r4, r4, #2
 8009ef2:	2600      	movs	r6, #0
 8009ef4:	42a6      	cmp	r6, r4
 8009ef6:	d109      	bne.n	8009f0c <__libc_init_array+0x24>
 8009ef8:	4d0b      	ldr	r5, [pc, #44]	@ (8009f28 <__libc_init_array+0x40>)
 8009efa:	4c0c      	ldr	r4, [pc, #48]	@ (8009f2c <__libc_init_array+0x44>)
 8009efc:	f000 f818 	bl	8009f30 <_init>
 8009f00:	1b64      	subs	r4, r4, r5
 8009f02:	10a4      	asrs	r4, r4, #2
 8009f04:	2600      	movs	r6, #0
 8009f06:	42a6      	cmp	r6, r4
 8009f08:	d105      	bne.n	8009f16 <__libc_init_array+0x2e>
 8009f0a:	bd70      	pop	{r4, r5, r6, pc}
 8009f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f10:	4798      	blx	r3
 8009f12:	3601      	adds	r6, #1
 8009f14:	e7ee      	b.n	8009ef4 <__libc_init_array+0xc>
 8009f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f1a:	4798      	blx	r3
 8009f1c:	3601      	adds	r6, #1
 8009f1e:	e7f2      	b.n	8009f06 <__libc_init_array+0x1e>
 8009f20:	08009f90 	.word	0x08009f90
 8009f24:	08009f90 	.word	0x08009f90
 8009f28:	08009f90 	.word	0x08009f90
 8009f2c:	08009f94 	.word	0x08009f94

08009f30 <_init>:
 8009f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f32:	bf00      	nop
 8009f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f36:	bc08      	pop	{r3}
 8009f38:	469e      	mov	lr, r3
 8009f3a:	4770      	bx	lr

08009f3c <_fini>:
 8009f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3e:	bf00      	nop
 8009f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f42:	bc08      	pop	{r3}
 8009f44:	469e      	mov	lr, r3
 8009f46:	4770      	bx	lr
