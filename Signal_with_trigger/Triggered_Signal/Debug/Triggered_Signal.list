
Triggered_Signal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078c4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007b5c  08007b5c  00008b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007b94  08007b94  00008b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007b9c  08007b9c  00008b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007ba0  08007ba0  00008ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08007ba4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000948  24000010  08007bb4  00009010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000958  08007bb4  00009958  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000176cd  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002840  00000000  00000000  0002070b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001230  00000000  00000000  00022f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e36  00000000  00000000  00024180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038a2c  00000000  00000000  00024fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000177c3  00000000  00000000  0005d9e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00175ce3  00000000  00000000  000751a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001eae88  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004df4  00000000  00000000  001eaecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008d  00000000  00000000  001efcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007b44 	.word	0x08007b44

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08007b44 	.word	0x08007b44

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <adc3_init>:
bool reading = false;
bool triggered = false;
uint16_t old_raw_data=0;
uint16_t raw_data;

void adc3_init(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

	ADC3->SQR1=0; // Resetto il registro per cancellare modifice dell'IDE
 80005cc:	4b36      	ldr	r3, [pc, #216]	@ (80006a8 <adc3_init+0xe0>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere (0 = 1 canale)
 80005d2:	4b35      	ldr	r3, [pc, #212]	@ (80006a8 <adc3_init+0xe0>)
 80005d4:	4a34      	ldr	r2, [pc, #208]	@ (80006a8 <adc3_init+0xe0>)
 80005d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_SQ1_Pos);	// Inidco i canali da accendere
 80005da:	4b33      	ldr	r3, [pc, #204]	@ (80006a8 <adc3_init+0xe0>)
 80005dc:	4a32      	ldr	r2, [pc, #200]	@ (80006a8 <adc3_init+0xe0>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->PCSEL |= ADC_PCSEL_PCSEL_0;		// Selezioni i canali da leggere
 80005e2:	4b31      	ldr	r3, [pc, #196]	@ (80006a8 <adc3_init+0xe0>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a30      	ldr	r2, [pc, #192]	@ (80006a8 <adc3_init+0xe0>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	61d3      	str	r3, [r2, #28]
	//	ADC3->CR &= ~ADC_CR_DEEPPWD;
	//	ADC3->CR |= ADC_CR_ADVREGEN;
	//	while((ADC3->ISR & ADC_ISR_LDORDY) != 1){}

	/* Fase di calibrazione */
	ADC3->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 80005ee:	4b2e      	ldr	r3, [pc, #184]	@ (80006a8 <adc3_init+0xe0>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	4a2d      	ldr	r2, [pc, #180]	@ (80006a8 <adc3_init+0xe0>)
 80005f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80005f8:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 80005fa:	4b2b      	ldr	r3, [pc, #172]	@ (80006a8 <adc3_init+0xe0>)
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	4a2a      	ldr	r2, [pc, #168]	@ (80006a8 <adc3_init+0xe0>)
 8000600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000604:	6093      	str	r3, [r2, #8]
	ADC3->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 8000606:	4b28      	ldr	r3, [pc, #160]	@ (80006a8 <adc3_init+0xe0>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	4a27      	ldr	r2, [pc, #156]	@ (80006a8 <adc3_init+0xe0>)
 800060c:	f023 0301 	bic.w	r3, r3, #1
 8000610:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 8000612:	4b25      	ldr	r3, [pc, #148]	@ (80006a8 <adc3_init+0xe0>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	4a24      	ldr	r2, [pc, #144]	@ (80006a8 <adc3_init+0xe0>)
 8000618:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800061c:	6093      	str	r3, [r2, #8]

	while((ADC3->CR & ADC_CR_ADCAL) != 0){};
 800061e:	bf00      	nop
 8000620:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <adc3_init+0xe0>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	2b00      	cmp	r3, #0
 8000626:	dbfb      	blt.n	8000620 <adc3_init+0x58>
	/* Fine fase di calibrazione */

	/* Accensione ADC */
	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <adc3_init+0xe0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1e      	ldr	r2, [pc, #120]	@ (80006a8 <adc3_init+0xe0>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]
	ADC3->CR |= ADC_CR_ADEN;		// Abilito l'ADC
 8000634:	4b1c      	ldr	r3, [pc, #112]	@ (80006a8 <adc3_init+0xe0>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	4a1b      	ldr	r2, [pc, #108]	@ (80006a8 <adc3_init+0xe0>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6093      	str	r3, [r2, #8]

	while((ADC3->ISR & ADC_ISR_ADRDY) != 0){}	// Aspetto che il flag cambi
 8000640:	bf00      	nop
 8000642:	4b19      	ldr	r3, [pc, #100]	@ (80006a8 <adc3_init+0xe0>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f9      	bne.n	8000642 <adc3_init+0x7a>

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 800064e:	4b16      	ldr	r3, [pc, #88]	@ (80006a8 <adc3_init+0xe0>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a15      	ldr	r2, [pc, #84]	@ (80006a8 <adc3_init+0xe0>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6013      	str	r3, [r2, #0]
	/* Fine istruzioni per l'accensione */

	/* Impostazioni TIMER per triggerare l'nizio della misura */
	TIM6->PSC = 48;
 800065a:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <adc3_init+0xe4>)
 800065c:	2230      	movs	r2, #48	@ 0x30
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 10;
 8000660:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <adc3_init+0xe4>)
 8000662:	220a      	movs	r2, #10
 8000664:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->CNT = 0;
 8000666:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <adc3_init+0xe4>)
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->DIER |= TIM_DIER_UIE;
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <adc3_init+0xe4>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	4a0e      	ldr	r2, [pc, #56]	@ (80006ac <adc3_init+0xe4>)
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	60d3      	str	r3, [r2, #12]
	TIM6->CR1 |= TIM_CR1_CEN;
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <adc3_init+0xe4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a0b      	ldr	r2, [pc, #44]	@ (80006ac <adc3_init+0xe4>)
 800067e:	f043 0301 	orr.w	r3, r3, #1
 8000682:	6013      	str	r3, [r2, #0]
	/* Fine sett. TImer */

	ADC3->IER |= ADC_IER_EOCIE;		// Abilito l'interrupt di fine conversione
 8000684:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <adc3_init+0xe0>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	4a07      	ldr	r2, [pc, #28]	@ (80006a8 <adc3_init+0xe0>)
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	6053      	str	r3, [r2, #4]
	ADC3->CR  |= ADC_CR_ADSTART;	// Inizio le misurazioni
 8000690:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <adc3_init+0xe0>)
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <adc3_init+0xe0>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	6093      	str	r3, [r2, #8]
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	58026000 	.word	0x58026000
 80006ac:	40001000 	.word	0x40001000

080006b0 <adc3_interrupt>:




void adc3_interrupt(){
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

	extern int data_buffer_write_index;
	extern uint16_t data_buffer[1000];


	if((ADC3->ISR & ADC_ISR_EOC) && !reading){
 80006b4:	4b36      	ldr	r3, [pc, #216]	@ (8000790 <adc3_interrupt+0xe0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 0304 	and.w	r3, r3, #4
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d05b      	beq.n	8000778 <adc3_interrupt+0xc8>
 80006c0:	4b34      	ldr	r3, [pc, #208]	@ (8000794 <adc3_interrupt+0xe4>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	f083 0301 	eor.w	r3, r3, #1
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d054      	beq.n	8000778 <adc3_interrupt+0xc8>

		if(data_buffer_write_index < 1000){
 80006ce:	4b32      	ldr	r3, [pc, #200]	@ (8000798 <adc3_interrupt+0xe8>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80006d6:	da40      	bge.n	800075a <adc3_interrupt+0xaa>

			raw_data = ADC3->DR;
 80006d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000790 <adc3_interrupt+0xe0>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006dc:	b29a      	uxth	r2, r3
 80006de:	4b2f      	ldr	r3, [pc, #188]	@ (800079c <adc3_interrupt+0xec>)
 80006e0:	801a      	strh	r2, [r3, #0]

			if(triggered){
 80006e2:	4b2f      	ldr	r3, [pc, #188]	@ (80007a0 <adc3_interrupt+0xf0>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d010      	beq.n	800070c <adc3_interrupt+0x5c>
				data_buffer[data_buffer_write_index] = raw_data;
 80006ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000798 <adc3_interrupt+0xe8>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a2b      	ldr	r2, [pc, #172]	@ (800079c <adc3_interrupt+0xec>)
 80006f0:	8811      	ldrh	r1, [r2, #0]
 80006f2:	4a2c      	ldr	r2, [pc, #176]	@ (80007a4 <adc3_interrupt+0xf4>)
 80006f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				old_raw_data = raw_data;
 80006f8:	4b28      	ldr	r3, [pc, #160]	@ (800079c <adc3_interrupt+0xec>)
 80006fa:	881a      	ldrh	r2, [r3, #0]
 80006fc:	4b2a      	ldr	r3, [pc, #168]	@ (80007a8 <adc3_interrupt+0xf8>)
 80006fe:	801a      	strh	r2, [r3, #0]
				++data_buffer_write_index;
 8000700:	4b25      	ldr	r3, [pc, #148]	@ (8000798 <adc3_interrupt+0xe8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3301      	adds	r3, #1
 8000706:	4a24      	ldr	r2, [pc, #144]	@ (8000798 <adc3_interrupt+0xe8>)
 8000708:	6013      	str	r3, [r2, #0]
		if(data_buffer_write_index < 1000){
 800070a:	e03c      	b.n	8000786 <adc3_interrupt+0xd6>
			}
			else{
				if(raw_data > (uint16_t)PRETRIG_VALUE && raw_data < (uint16_t)TRIG_VALUE
 800070c:	4b23      	ldr	r3, [pc, #140]	@ (800079c <adc3_interrupt+0xec>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	2b64      	cmp	r3, #100	@ 0x64
 8000712:	d91d      	bls.n	8000750 <adc3_interrupt+0xa0>
 8000714:	4b21      	ldr	r3, [pc, #132]	@ (800079c <adc3_interrupt+0xec>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	2bc7      	cmp	r3, #199	@ 0xc7
 800071a:	d819      	bhi.n	8000750 <adc3_interrupt+0xa0>
						&& old_raw_data < raw_data){
 800071c:	4b22      	ldr	r3, [pc, #136]	@ (80007a8 <adc3_interrupt+0xf8>)
 800071e:	881a      	ldrh	r2, [r3, #0]
 8000720:	4b1e      	ldr	r3, [pc, #120]	@ (800079c <adc3_interrupt+0xec>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	429a      	cmp	r2, r3
 8000726:	d213      	bcs.n	8000750 <adc3_interrupt+0xa0>
					triggered = true;
 8000728:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <adc3_interrupt+0xf0>)
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
					data_buffer[data_buffer_write_index] = raw_data;
 800072e:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <adc3_interrupt+0xe8>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a1a      	ldr	r2, [pc, #104]	@ (800079c <adc3_interrupt+0xec>)
 8000734:	8811      	ldrh	r1, [r2, #0]
 8000736:	4a1b      	ldr	r2, [pc, #108]	@ (80007a4 <adc3_interrupt+0xf4>)
 8000738:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					old_raw_data = raw_data;
 800073c:	4b17      	ldr	r3, [pc, #92]	@ (800079c <adc3_interrupt+0xec>)
 800073e:	881a      	ldrh	r2, [r3, #0]
 8000740:	4b19      	ldr	r3, [pc, #100]	@ (80007a8 <adc3_interrupt+0xf8>)
 8000742:	801a      	strh	r2, [r3, #0]
					++data_buffer_write_index;
 8000744:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <adc3_interrupt+0xe8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3301      	adds	r3, #1
 800074a:	4a13      	ldr	r2, [pc, #76]	@ (8000798 <adc3_interrupt+0xe8>)
 800074c:	6013      	str	r3, [r2, #0]
		if(data_buffer_write_index < 1000){
 800074e:	e01a      	b.n	8000786 <adc3_interrupt+0xd6>
				}else{
					old_raw_data = raw_data;
 8000750:	4b12      	ldr	r3, [pc, #72]	@ (800079c <adc3_interrupt+0xec>)
 8000752:	881a      	ldrh	r2, [r3, #0]
 8000754:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <adc3_interrupt+0xf8>)
 8000756:	801a      	strh	r2, [r3, #0]
		if(data_buffer_write_index < 1000){
 8000758:	e015      	b.n	8000786 <adc3_interrupt+0xd6>
				}
			}

		}else{
			data_buffer[0] = raw_data;
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <adc3_interrupt+0xec>)
 800075c:	881a      	ldrh	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <adc3_interrupt+0xf4>)
 8000760:	801a      	strh	r2, [r3, #0]
			old_raw_data = raw_data;
 8000762:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <adc3_interrupt+0xec>)
 8000764:	881a      	ldrh	r2, [r3, #0]
 8000766:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <adc3_interrupt+0xf8>)
 8000768:	801a      	strh	r2, [r3, #0]
			data_buffer_write_index=0;
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <adc3_interrupt+0xe8>)
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
			triggered = false;
 8000770:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <adc3_interrupt+0xf0>)
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
		if(data_buffer_write_index < 1000){
 8000776:	e006      	b.n	8000786 <adc3_interrupt+0xd6>
		}

	}else{
		ADC3->ISR |= ADC_ISR_EOC;
 8000778:	4b05      	ldr	r3, [pc, #20]	@ (8000790 <adc3_interrupt+0xe0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a04      	ldr	r2, [pc, #16]	@ (8000790 <adc3_interrupt+0xe0>)
 800077e:	f043 0304 	orr.w	r3, r3, #4
 8000782:	6013      	str	r3, [r2, #0]
	}
}
 8000784:	bf00      	nop
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	58026000 	.word	0x58026000
 8000794:	24000800 	.word	0x24000800
 8000798:	240007fc 	.word	0x240007fc
 800079c:	24000804 	.word	0x24000804
 80007a0:	24000801 	.word	0x24000801
 80007a4:	2400002c 	.word	0x2400002c
 80007a8:	24000802 	.word	0x24000802

080007ac <usart3_init>:
#include <custom_usart.h>

unsigned char* data_buffer_char = 0;
int data_buffer_read_index=0;

void usart3_init(){
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

    USART3->CR1 |= USART_CR1_TE;
 80007b0:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <usart3_init+0x4c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a10      	ldr	r2, [pc, #64]	@ (80007f8 <usart3_init+0x4c>)
 80007b6:	f043 0308 	orr.w	r3, r3, #8
 80007ba:	6013      	str	r3, [r2, #0]
    USART3->CR1 |= USART_CR1_RE;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <usart3_init+0x4c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a0d      	ldr	r2, [pc, #52]	@ (80007f8 <usart3_init+0x4c>)
 80007c2:	f043 0304 	orr.w	r3, r3, #4
 80007c6:	6013      	str	r3, [r2, #0]

    USART3->CR1 &= ~USART_CR1_TXEIE;
 80007c8:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <usart3_init+0x4c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a0a      	ldr	r2, [pc, #40]	@ (80007f8 <usart3_init+0x4c>)
 80007ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80007d2:	6013      	str	r3, [r2, #0]
    USART3->CR1 |= USART_CR1_RXNEIE;
 80007d4:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <usart3_init+0x4c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a07      	ldr	r2, [pc, #28]	@ (80007f8 <usart3_init+0x4c>)
 80007da:	f043 0320 	orr.w	r3, r3, #32
 80007de:	6013      	str	r3, [r2, #0]

    USART3->CR1 |= USART_CR1_UE;
 80007e0:	4b05      	ldr	r3, [pc, #20]	@ (80007f8 <usart3_init+0x4c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a04      	ldr	r2, [pc, #16]	@ (80007f8 <usart3_init+0x4c>)
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	6013      	str	r3, [r2, #0]
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40004800 	.word	0x40004800

080007fc <usart3_interrupt>:

void usart3_interrupt(){
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0

	extern uint16_t data_buffer[1000];
	extern bool reading;

	if(USART3->ISR & USART_ISR_RXNE_RXFNE){
 8000802:	4b36      	ldr	r3, [pc, #216]	@ (80008dc <usart3_interrupt+0xe0>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f003 0320 	and.w	r3, r3, #32
 800080a:	2b00      	cmp	r3, #0
 800080c:	d020      	beq.n	8000850 <usart3_interrupt+0x54>
		if(USART3->ISR & USART_ISR_TXE_TXFNF){
 800080e:	4b33      	ldr	r3, [pc, #204]	@ (80008dc <usart3_interrupt+0xe0>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000816:	2b00      	cmp	r3, #0
 8000818:	d01a      	beq.n	8000850 <usart3_interrupt+0x54>

			char received_data = USART3->RDR;
 800081a:	4b30      	ldr	r3, [pc, #192]	@ (80008dc <usart3_interrupt+0xe0>)
 800081c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800081e:	71fb      	strb	r3, [r7, #7]

			USART3->CR1 &= ~USART_CR1_TXEIE;
 8000820:	4b2e      	ldr	r3, [pc, #184]	@ (80008dc <usart3_interrupt+0xe0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a2d      	ldr	r2, [pc, #180]	@ (80008dc <usart3_interrupt+0xe0>)
 8000826:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800082a:	6013      	str	r3, [r2, #0]

			if(received_data=='?'){
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000830:	d10e      	bne.n	8000850 <usart3_interrupt+0x54>
				data_buffer_read_index=0;
 8000832:	4b2b      	ldr	r3, [pc, #172]	@ (80008e0 <usart3_interrupt+0xe4>)
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
				reading = true;
 8000838:	4b2a      	ldr	r3, [pc, #168]	@ (80008e4 <usart3_interrupt+0xe8>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
                data_buffer_char = (unsigned char *)data_buffer;
 800083e:	4b2a      	ldr	r3, [pc, #168]	@ (80008e8 <usart3_interrupt+0xec>)
 8000840:	4a2a      	ldr	r2, [pc, #168]	@ (80008ec <usart3_interrupt+0xf0>)
 8000842:	601a      	str	r2, [r3, #0]

                USART3->CR1 |= USART_CR1_TXEIE;
 8000844:	4b25      	ldr	r3, [pc, #148]	@ (80008dc <usart3_interrupt+0xe0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a24      	ldr	r2, [pc, #144]	@ (80008dc <usart3_interrupt+0xe0>)
 800084a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800084e:	6013      	str	r3, [r2, #0]
			}
		}
	}

	if((USART3->ISR & USART_ISR_TXE_TXFNF) && (USART3->CR1 & USART_CR1_TXEIE) && !(USART3->ISR & USART_ISR_RXNE_RXFNE)){
 8000850:	4b22      	ldr	r3, [pc, #136]	@ (80008dc <usart3_interrupt+0xe0>)
 8000852:	69db      	ldr	r3, [r3, #28]
 8000854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000858:	2b00      	cmp	r3, #0
 800085a:	d027      	beq.n	80008ac <usart3_interrupt+0xb0>
 800085c:	4b1f      	ldr	r3, [pc, #124]	@ (80008dc <usart3_interrupt+0xe0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000864:	2b00      	cmp	r3, #0
 8000866:	d021      	beq.n	80008ac <usart3_interrupt+0xb0>
 8000868:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <usart3_interrupt+0xe0>)
 800086a:	69db      	ldr	r3, [r3, #28]
 800086c:	f003 0320 	and.w	r3, r3, #32
 8000870:	2b00      	cmp	r3, #0
 8000872:	d11b      	bne.n	80008ac <usart3_interrupt+0xb0>

		if(data_buffer_read_index < sizeof(data_buffer)){
 8000874:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <usart3_interrupt+0xe4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800087c:	d20d      	bcs.n	800089a <usart3_interrupt+0x9e>

            USART3->TDR = data_buffer_char[data_buffer_read_index];
 800087e:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <usart3_interrupt+0xec>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a17      	ldr	r2, [pc, #92]	@ (80008e0 <usart3_interrupt+0xe4>)
 8000884:	6812      	ldr	r2, [r2, #0]
 8000886:	4413      	add	r3, r2
 8000888:	781a      	ldrb	r2, [r3, #0]
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <usart3_interrupt+0xe0>)
 800088c:	629a      	str	r2, [r3, #40]	@ 0x28
            ++data_buffer_read_index;
 800088e:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <usart3_interrupt+0xe4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	3301      	adds	r3, #1
 8000894:	4a12      	ldr	r2, [pc, #72]	@ (80008e0 <usart3_interrupt+0xe4>)
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	e008      	b.n	80008ac <usart3_interrupt+0xb0>
        }else{
            USART3->CR1 &= ~USART_CR1_TXEIE_TXFNFIE;
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <usart3_interrupt+0xe0>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a0f      	ldr	r2, [pc, #60]	@ (80008dc <usart3_interrupt+0xe0>)
 80008a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80008a4:	6013      	str	r3, [r2, #0]
            reading = false;
 80008a6:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <usart3_interrupt+0xe8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
        }
	}

	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 80008ac:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <usart3_interrupt+0xe0>)
 80008ae:	6a1b      	ldr	r3, [r3, #32]
 80008b0:	4a0a      	ldr	r2, [pc, #40]	@ (80008dc <usart3_interrupt+0xe0>)
 80008b2:	f043 0308 	orr.w	r3, r3, #8
 80008b6:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF;  //Azzeramento flag interrupt trasmissione
 80008b8:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <usart3_interrupt+0xe0>)
 80008ba:	6a1b      	ldr	r3, [r3, #32]
 80008bc:	4a07      	ldr	r2, [pc, #28]	@ (80008dc <usart3_interrupt+0xe0>)
 80008be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008c2:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 80008c4:	4b05      	ldr	r3, [pc, #20]	@ (80008dc <usart3_interrupt+0xe0>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a04      	ldr	r2, [pc, #16]	@ (80008dc <usart3_interrupt+0xe0>)
 80008ca:	f043 0308 	orr.w	r3, r3, #8
 80008ce:	6193      	str	r3, [r2, #24]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	40004800 	.word	0x40004800
 80008e0:	2400080c 	.word	0x2400080c
 80008e4:	24000800 	.word	0x24000800
 80008e8:	24000808 	.word	0x24000808
 80008ec:	2400002c 	.word	0x2400002c

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f4:	f000 fcfa 	bl	80012ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f8:	f000 f80e 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fc:	f000 f9ac 	bl	8000c58 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000900:	f000 f8b8 	bl	8000a74 <MX_ADC3_Init>
  MX_TIM6_Init();
 8000904:	f000 f926 	bl	8000b54 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8000908:	f000 f95a 	bl	8000bc0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  usart3_init();
 800090c:	f7ff ff4e 	bl	80007ac <usart3_init>
  adc3_init();
 8000910:	f7ff fe5a 	bl	80005c8 <adc3_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <main+0x24>

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b09e      	sub	sp, #120	@ 0x78
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000922:	224c      	movs	r2, #76	@ 0x4c
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f007 f8e0 	bl	8007aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	2220      	movs	r2, #32
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f007 f8d9 	bl	8007aec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800093a:	2002      	movs	r0, #2
 800093c:	f001 fffa 	bl	8002934 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	4b48      	ldr	r3, [pc, #288]	@ (8000a68 <SystemClock_Config+0x150>)
 8000946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000948:	4a47      	ldr	r2, [pc, #284]	@ (8000a68 <SystemClock_Config+0x150>)
 800094a:	f023 0301 	bic.w	r3, r3, #1
 800094e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000950:	4b45      	ldr	r3, [pc, #276]	@ (8000a68 <SystemClock_Config+0x150>)
 8000952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	4b44      	ldr	r3, [pc, #272]	@ (8000a6c <SystemClock_Config+0x154>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	4a43      	ldr	r2, [pc, #268]	@ (8000a6c <SystemClock_Config+0x154>)
 8000960:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000964:	6193      	str	r3, [r2, #24]
 8000966:	4b41      	ldr	r3, [pc, #260]	@ (8000a6c <SystemClock_Config+0x154>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000972:	bf00      	nop
 8000974:	4b3d      	ldr	r3, [pc, #244]	@ (8000a6c <SystemClock_Config+0x154>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800097c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000980:	d1f8      	bne.n	8000974 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	4b3b      	ldr	r3, [pc, #236]	@ (8000a70 <SystemClock_Config+0x158>)
 8000984:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000988:	4a39      	ldr	r2, [pc, #228]	@ (8000a70 <SystemClock_Config+0x158>)
 800098a:	f043 0302 	orr.w	r3, r3, #2
 800098e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000992:	4b37      	ldr	r3, [pc, #220]	@ (8000a70 <SystemClock_Config+0x158>)
 8000994:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000998:	f003 0302 	and.w	r3, r3, #2
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009a0:	2300      	movs	r3, #0
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	4b31      	ldr	r3, [pc, #196]	@ (8000a6c <SystemClock_Config+0x154>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a30      	ldr	r2, [pc, #192]	@ (8000a6c <SystemClock_Config+0x154>)
 80009aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b2e      	ldr	r3, [pc, #184]	@ (8000a6c <SystemClock_Config+0x154>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000a68 <SystemClock_Config+0x150>)
 80009bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009be:	4a2a      	ldr	r2, [pc, #168]	@ (8000a68 <SystemClock_Config+0x150>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009c6:	4b28      	ldr	r3, [pc, #160]	@ (8000a68 <SystemClock_Config+0x150>)
 80009c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009d2:	bf00      	nop
 80009d4:	4b25      	ldr	r3, [pc, #148]	@ (8000a6c <SystemClock_Config+0x154>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009e0:	d1f8      	bne.n	80009d4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e2:	2301      	movs	r3, #1
 80009e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009e6:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80009ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	2302      	movs	r3, #2
 80009ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f0:	2302      	movs	r3, #2
 80009f2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 80009f8:	2378      	movs	r3, #120	@ 0x78
 80009fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a00:	2304      	movs	r3, #4
 8000a02:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a08:	230c      	movs	r3, #12
 8000a0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 ffc5 	bl	80029a8 <HAL_RCC_OscConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000a24:	f000 fa48 	bl	8000eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a28:	233f      	movs	r3, #63	@ 0x3f
 8000a2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a34:	2308      	movs	r3, #8
 8000a36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a38:	2340      	movs	r3, #64	@ 0x40
 8000a3a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a3c:	2340      	movs	r3, #64	@ 0x40
 8000a3e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a46:	2340      	movs	r3, #64	@ 0x40
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	2104      	movs	r1, #4
 8000a50:	4618      	mov	r0, r3
 8000a52:	f002 fc03 	bl	800325c <HAL_RCC_ClockConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000a5c:	f000 fa2c 	bl	8000eb8 <Error_Handler>
  }
}
 8000a60:	bf00      	nop
 8000a62:	3778      	adds	r7, #120	@ 0x78
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	58000400 	.word	0x58000400
 8000a6c:	58024800 	.word	0x58024800
 8000a70:	58024400 	.word	0x58024400

08000a74 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
 8000a88:	615a      	str	r2, [r3, #20]
 8000a8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000a8e:	4a30      	ldr	r2, [pc, #192]	@ (8000b50 <MX_ADC3_Init+0xdc>)
 8000a90:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a92:	4b2e      	ldr	r3, [pc, #184]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a98:	4b2c      	ldr	r3, [pc, #176]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000aa4:	4b29      	ldr	r3, [pc, #164]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000aaa:	4b28      	ldr	r3, [pc, #160]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000ab0:	4b26      	ldr	r3, [pc, #152]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ab6:	4b25      	ldr	r3, [pc, #148]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000abc:	4b23      	ldr	r3, [pc, #140]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000abe:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000ac2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ac4:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ac6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000ade:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000aec:	4817      	ldr	r0, [pc, #92]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000aee:	f000 fe3d 	bl	800176c <HAL_ADC_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000af8:	f000 f9de 	bl	8000eb8 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000afc:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b02:	4812      	ldr	r0, [pc, #72]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000b04:	f000 fe32 	bl	800176c <HAL_ADC_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000b0e:	f000 f9d3 	bl	8000eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b12:	2301      	movs	r3, #1
 8000b14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b16:	2306      	movs	r3, #6
 8000b18:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b1e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b22:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b24:	2304      	movs	r3, #4
 8000b26:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_ADC3_Init+0xd8>)
 8000b36:	f000 ffbb 	bl	8001ab0 <HAL_ADC_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000b40:	f000 f9ba 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	3720      	adds	r7, #32
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	24000810 	.word	0x24000810
 8000b50:	58026000 	.word	0x58026000

08000b54 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b64:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <MX_TIM6_Init+0x64>)
 8000b66:	4a15      	ldr	r2, [pc, #84]	@ (8000bbc <MX_TIM6_Init+0x68>)
 8000b68:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <MX_TIM6_Init+0x64>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <MX_TIM6_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000b76:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <MX_TIM6_Init+0x64>)
 8000b78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b7c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <MX_TIM6_Init+0x64>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b84:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <MX_TIM6_Init+0x64>)
 8000b86:	f005 fbf3 	bl	8006370 <HAL_TIM_Base_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b90:	f000 f992 	bl	8000eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b94:	2320      	movs	r3, #32
 8000b96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <MX_TIM6_Init+0x64>)
 8000ba2:	f005 fe1b 	bl	80067dc <HAL_TIMEx_MasterConfigSynchronization>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000bac:	f000 f984 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	24000874 	.word	0x24000874
 8000bbc:	40001000 	.word	0x40001000

08000bc0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bc6:	4a23      	ldr	r2, [pc, #140]	@ (8000c54 <MX_USART3_UART_Init+0x94>)
 8000bc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000bca:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bcc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000bd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bea:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c02:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c08:	4811      	ldr	r0, [pc, #68]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c0a:	f005 fe93 	bl	8006934 <HAL_UART_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c14:	f000 f950 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	480d      	ldr	r0, [pc, #52]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c1c:	f006 fe9b 	bl	8007956 <HAL_UARTEx_SetTxFifoThreshold>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c26:	f000 f947 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4808      	ldr	r0, [pc, #32]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c2e:	f006 fed0 	bl	80079d2 <HAL_UARTEx_SetRxFifoThreshold>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c38:	f000 f93e 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	@ (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c3e:	f006 fe51 	bl	80078e4 <HAL_UARTEx_DisableFifoMode>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c48:	f000 f936 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	240008c0 	.word	0x240008c0
 8000c54:	40004800 	.word	0x40004800

08000c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	@ 0x30
 8000c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6e:	4b8b      	ldr	r3, [pc, #556]	@ (8000e9c <MX_GPIO_Init+0x244>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c74:	4a89      	ldr	r2, [pc, #548]	@ (8000e9c <MX_GPIO_Init+0x244>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c7e:	4b87      	ldr	r3, [pc, #540]	@ (8000e9c <MX_GPIO_Init+0x244>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
 8000c8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c8c:	4b83      	ldr	r3, [pc, #524]	@ (8000e9c <MX_GPIO_Init+0x244>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c92:	4a82      	ldr	r2, [pc, #520]	@ (8000e9c <MX_GPIO_Init+0x244>)
 8000c94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c9c:	4b7f      	ldr	r3, [pc, #508]	@ (8000e9c <MX_GPIO_Init+0x244>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	4b7c      	ldr	r3, [pc, #496]	@ (8000e9c <MX_GPIO_Init+0x244>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb0:	4a7a      	ldr	r2, [pc, #488]	@ (8000e9c <MX_GPIO_Init+0x244>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cba:	4b78      	ldr	r3, [pc, #480]	@ (8000e9c <MX_GPIO_Init+0x244>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc8:	4b74      	ldr	r3, [pc, #464]	@ (8000e9c <MX_GPIO_Init+0x244>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cce:	4a73      	ldr	r2, [pc, #460]	@ (8000e9c <MX_GPIO_Init+0x244>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd8:	4b70      	ldr	r3, [pc, #448]	@ (8000e9c <MX_GPIO_Init+0x244>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce6:	4b6d      	ldr	r3, [pc, #436]	@ (8000e9c <MX_GPIO_Init+0x244>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cec:	4a6b      	ldr	r2, [pc, #428]	@ (8000e9c <MX_GPIO_Init+0x244>)
 8000cee:	f043 0308 	orr.w	r3, r3, #8
 8000cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf6:	4b69      	ldr	r3, [pc, #420]	@ (8000e9c <MX_GPIO_Init+0x244>)
 8000cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfc:	f003 0308 	and.w	r3, r3, #8
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d04:	4b65      	ldr	r3, [pc, #404]	@ (8000e9c <MX_GPIO_Init+0x244>)
 8000d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d0a:	4a64      	ldr	r2, [pc, #400]	@ (8000e9c <MX_GPIO_Init+0x244>)
 8000d0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d14:	4b61      	ldr	r3, [pc, #388]	@ (8000e9c <MX_GPIO_Init+0x244>)
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d22:	4b5e      	ldr	r3, [pc, #376]	@ (8000e9c <MX_GPIO_Init+0x244>)
 8000d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d28:	4a5c      	ldr	r2, [pc, #368]	@ (8000e9c <MX_GPIO_Init+0x244>)
 8000d2a:	f043 0310 	orr.w	r3, r3, #16
 8000d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d32:	4b5a      	ldr	r3, [pc, #360]	@ (8000e9c <MX_GPIO_Init+0x244>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d38:	f003 0310 	and.w	r3, r3, #16
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000d46:	4856      	ldr	r0, [pc, #344]	@ (8000ea0 <MX_GPIO_Init+0x248>)
 8000d48:	f001 fdda 	bl	8002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d52:	4854      	ldr	r0, [pc, #336]	@ (8000ea4 <MX_GPIO_Init+0x24c>)
 8000d54:	f001 fdd4 	bl	8002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2102      	movs	r1, #2
 8000d5c:	4852      	ldr	r0, [pc, #328]	@ (8000ea8 <MX_GPIO_Init+0x250>)
 8000d5e:	f001 fdcf 	bl	8002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	484d      	ldr	r0, [pc, #308]	@ (8000eac <MX_GPIO_Init+0x254>)
 8000d78:	f001 fc12 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d7c:	2332      	movs	r3, #50	@ 0x32
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d8c:	230b      	movs	r3, #11
 8000d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	4619      	mov	r1, r3
 8000d96:	4845      	ldr	r0, [pc, #276]	@ (8000eac <MX_GPIO_Init+0x254>)
 8000d98:	f001 fc02 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d9c:	2386      	movs	r3, #134	@ 0x86
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dac:	230b      	movs	r3, #11
 8000dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	483e      	ldr	r0, [pc, #248]	@ (8000eb0 <MX_GPIO_Init+0x258>)
 8000db8:	f001 fbf2 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000dbc:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4832      	ldr	r0, [pc, #200]	@ (8000ea0 <MX_GPIO_Init+0x248>)
 8000dd6:	f001 fbe3 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dec:	230b      	movs	r3, #11
 8000dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	482a      	ldr	r0, [pc, #168]	@ (8000ea0 <MX_GPIO_Init+0x248>)
 8000df8:	f001 fbd2 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000dfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	4823      	ldr	r0, [pc, #140]	@ (8000ea4 <MX_GPIO_Init+0x24c>)
 8000e16:	f001 fbc3 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000e1a:	2380      	movs	r3, #128	@ 0x80
 8000e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e1e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4821      	ldr	r0, [pc, #132]	@ (8000eb4 <MX_GPIO_Init+0x25c>)
 8000e30:	f001 fbb6 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e34:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e46:	230a      	movs	r3, #10
 8000e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4817      	ldr	r0, [pc, #92]	@ (8000eb0 <MX_GPIO_Init+0x258>)
 8000e52:	f001 fba5 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e56:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e68:	230b      	movs	r3, #11
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	4810      	ldr	r0, [pc, #64]	@ (8000eb4 <MX_GPIO_Init+0x25c>)
 8000e74:	f001 fb94 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4806      	ldr	r0, [pc, #24]	@ (8000ea8 <MX_GPIO_Init+0x250>)
 8000e90:	f001 fb86 	bl	80025a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e94:	bf00      	nop
 8000e96:	3730      	adds	r7, #48	@ 0x30
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	58024400 	.word	0x58024400
 8000ea0:	58020400 	.word	0x58020400
 8000ea4:	58020c00 	.word	0x58020c00
 8000ea8:	58021000 	.word	0x58021000
 8000eac:	58020800 	.word	0x58020800
 8000eb0:	58020000 	.word	0x58020000
 8000eb4:	58021800 	.word	0x58021800

08000eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebc:	b672      	cpsid	i
}
 8000ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <Error_Handler+0x8>

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <HAL_MspInit+0x30>)
 8000ecc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ed0:	4a08      	ldr	r2, [pc, #32]	@ (8000ef4 <HAL_MspInit+0x30>)
 8000ed2:	f043 0302 	orr.w	r3, r3, #2
 8000ed6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_MspInit+0x30>)
 8000edc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	58024400 	.word	0x58024400

08000ef8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b0b4      	sub	sp, #208	@ 0xd0
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	22c0      	movs	r2, #192	@ 0xc0
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f006 fdef 	bl	8007aec <memset>
  if(hadc->Instance==ADC3)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a2b      	ldr	r2, [pc, #172]	@ (8000fc0 <HAL_ADC_MspInit+0xc8>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d14e      	bne.n	8000fb6 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f18:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000f24:	2302      	movs	r3, #2
 8000f26:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 8000f28:	2364      	movs	r3, #100	@ 0x64
 8000f2a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000f2c:	2305      	movs	r3, #5
 8000f2e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000f38:	2380      	movs	r3, #128	@ 0x80
 8000f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4a:	f107 0310 	add.w	r3, r7, #16
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 fd10 	bl	8003974 <HAL_RCCEx_PeriphCLKConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8000f5a:	f7ff ffad 	bl	8000eb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f5e:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <HAL_ADC_MspInit+0xcc>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f64:	4a17      	ldr	r2, [pc, #92]	@ (8000fc4 <HAL_ADC_MspInit+0xcc>)
 8000f66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f6e:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <HAL_ADC_MspInit+0xcc>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7c:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <HAL_ADC_MspInit+0xcc>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f82:	4a10      	ldr	r2, [pc, #64]	@ (8000fc4 <HAL_ADC_MspInit+0xcc>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <HAL_ADC_MspInit+0xcc>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000f9a:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8000f9e:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000fa2:	f000 fa41 	bl	8001428 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	207f      	movs	r0, #127	@ 0x7f
 8000fac:	f001 fac3 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000fb0:	207f      	movs	r0, #127	@ 0x7f
 8000fb2:	f001 fada 	bl	800256a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8000fb6:	bf00      	nop
 8000fb8:	37d0      	adds	r7, #208	@ 0xd0
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	58026000 	.word	0x58026000
 8000fc4:	58024400 	.word	0x58024400

08000fc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0e      	ldr	r2, [pc, #56]	@ (8001010 <HAL_TIM_Base_MspInit+0x48>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d116      	bne.n	8001008 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fda:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <HAL_TIM_Base_MspInit+0x4c>)
 8000fdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fe0:	4a0c      	ldr	r2, [pc, #48]	@ (8001014 <HAL_TIM_Base_MspInit+0x4c>)
 8000fe2:	f043 0310 	orr.w	r3, r3, #16
 8000fe6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fea:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <HAL_TIM_Base_MspInit+0x4c>)
 8000fec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ff0:	f003 0310 	and.w	r3, r3, #16
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2036      	movs	r0, #54	@ 0x36
 8000ffe:	f001 fa9a 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001002:	2036      	movs	r0, #54	@ 0x36
 8001004:	f001 fab1 	bl	800256a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40001000 	.word	0x40001000
 8001014:	58024400 	.word	0x58024400

08001018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b0ba      	sub	sp, #232	@ 0xe8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	22c0      	movs	r2, #192	@ 0xc0
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f006 fd57 	bl	8007aec <memset>
  if(huart->Instance==USART3)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a2b      	ldr	r2, [pc, #172]	@ (80010f0 <HAL_UART_MspInit+0xd8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d14e      	bne.n	80010e6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001048:	f04f 0202 	mov.w	r2, #2
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	4618      	mov	r0, r3
 8001060:	f002 fc88 	bl	8003974 <HAL_RCCEx_PeriphCLKConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800106a:	f7ff ff25 	bl	8000eb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800106e:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <HAL_UART_MspInit+0xdc>)
 8001070:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001074:	4a1f      	ldr	r2, [pc, #124]	@ (80010f4 <HAL_UART_MspInit+0xdc>)
 8001076:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800107a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800107e:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <HAL_UART_MspInit+0xdc>)
 8001080:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001084:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800108c:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <HAL_UART_MspInit+0xdc>)
 800108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001092:	4a18      	ldr	r2, [pc, #96]	@ (80010f4 <HAL_UART_MspInit+0xdc>)
 8001094:	f043 0308 	orr.w	r3, r3, #8
 8001098:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800109c:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <HAL_UART_MspInit+0xdc>)
 800109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010c4:	2307      	movs	r3, #7
 80010c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010ce:	4619      	mov	r1, r3
 80010d0:	4809      	ldr	r0, [pc, #36]	@ (80010f8 <HAL_UART_MspInit+0xe0>)
 80010d2:	f001 fa65 	bl	80025a0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	2027      	movs	r0, #39	@ 0x27
 80010dc:	f001 fa2b 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010e0:	2027      	movs	r0, #39	@ 0x27
 80010e2:	f001 fa42 	bl	800256a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80010e6:	bf00      	nop
 80010e8:	37e8      	adds	r7, #232	@ 0xe8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40004800 	.word	0x40004800
 80010f4:	58024400 	.word	0x58024400
 80010f8:	58020c00 	.word	0x58020c00

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <NMI_Handler+0x4>

08001104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <HardFault_Handler+0x4>

0800110c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <MemManage_Handler+0x4>

08001114 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <UsageFault_Handler+0x4>

08001124 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001152:	f000 f93d 	bl	80013d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}

0800115a <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	usart3_interrupt();
 800115e:	f7ff fb4d 	bl	80007fc <usart3_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800116c:	4802      	ldr	r0, [pc, #8]	@ (8001178 <TIM6_DAC_IRQHandler+0x10>)
 800116e:	f005 f956 	bl	800641e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	24000874 	.word	0x24000874

0800117c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	adc3_interrupt();
 8001180:	f7ff fa96 	bl	80006b0 <adc3_interrupt>
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
  /* USER CODE BEGIN ADC3_IRQn 1 */
	}
  /* USER CODE END ADC3_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800118c:	4b37      	ldr	r3, [pc, #220]	@ (800126c <SystemInit+0xe4>)
 800118e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001192:	4a36      	ldr	r2, [pc, #216]	@ (800126c <SystemInit+0xe4>)
 8001194:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001198:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800119c:	4b34      	ldr	r3, [pc, #208]	@ (8001270 <SystemInit+0xe8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 030f 	and.w	r3, r3, #15
 80011a4:	2b06      	cmp	r3, #6
 80011a6:	d807      	bhi.n	80011b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011a8:	4b31      	ldr	r3, [pc, #196]	@ (8001270 <SystemInit+0xe8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f023 030f 	bic.w	r3, r3, #15
 80011b0:	4a2f      	ldr	r2, [pc, #188]	@ (8001270 <SystemInit+0xe8>)
 80011b2:	f043 0307 	orr.w	r3, r3, #7
 80011b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001274 <SystemInit+0xec>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001274 <SystemInit+0xec>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001274 <SystemInit+0xec>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001274 <SystemInit+0xec>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4929      	ldr	r1, [pc, #164]	@ (8001274 <SystemInit+0xec>)
 80011d0:	4b29      	ldr	r3, [pc, #164]	@ (8001278 <SystemInit+0xf0>)
 80011d2:	4013      	ands	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011d6:	4b26      	ldr	r3, [pc, #152]	@ (8001270 <SystemInit+0xe8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d007      	beq.n	80011f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011e2:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <SystemInit+0xe8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f023 030f 	bic.w	r3, r3, #15
 80011ea:	4a21      	ldr	r2, [pc, #132]	@ (8001270 <SystemInit+0xe8>)
 80011ec:	f043 0307 	orr.w	r3, r3, #7
 80011f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011f2:	4b20      	ldr	r3, [pc, #128]	@ (8001274 <SystemInit+0xec>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001274 <SystemInit+0xec>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001274 <SystemInit+0xec>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001204:	4b1b      	ldr	r3, [pc, #108]	@ (8001274 <SystemInit+0xec>)
 8001206:	4a1d      	ldr	r2, [pc, #116]	@ (800127c <SystemInit+0xf4>)
 8001208:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800120a:	4b1a      	ldr	r3, [pc, #104]	@ (8001274 <SystemInit+0xec>)
 800120c:	4a1c      	ldr	r2, [pc, #112]	@ (8001280 <SystemInit+0xf8>)
 800120e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001210:	4b18      	ldr	r3, [pc, #96]	@ (8001274 <SystemInit+0xec>)
 8001212:	4a1c      	ldr	r2, [pc, #112]	@ (8001284 <SystemInit+0xfc>)
 8001214:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001216:	4b17      	ldr	r3, [pc, #92]	@ (8001274 <SystemInit+0xec>)
 8001218:	2200      	movs	r2, #0
 800121a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800121c:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <SystemInit+0xec>)
 800121e:	4a19      	ldr	r2, [pc, #100]	@ (8001284 <SystemInit+0xfc>)
 8001220:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001222:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <SystemInit+0xec>)
 8001224:	2200      	movs	r2, #0
 8001226:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001228:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <SystemInit+0xec>)
 800122a:	4a16      	ldr	r2, [pc, #88]	@ (8001284 <SystemInit+0xfc>)
 800122c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800122e:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <SystemInit+0xec>)
 8001230:	2200      	movs	r2, #0
 8001232:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001234:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <SystemInit+0xec>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0e      	ldr	r2, [pc, #56]	@ (8001274 <SystemInit+0xec>)
 800123a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800123e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001240:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <SystemInit+0xec>)
 8001242:	2200      	movs	r2, #0
 8001244:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <SystemInit+0x100>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <SystemInit+0x104>)
 800124c:	4013      	ands	r3, r2
 800124e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001252:	d202      	bcs.n	800125a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001254:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <SystemInit+0x108>)
 8001256:	2201      	movs	r2, #1
 8001258:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <SystemInit+0x10c>)
 800125c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001260:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00
 8001270:	52002000 	.word	0x52002000
 8001274:	58024400 	.word	0x58024400
 8001278:	eaf6ed7f 	.word	0xeaf6ed7f
 800127c:	02020200 	.word	0x02020200
 8001280:	01ff0000 	.word	0x01ff0000
 8001284:	01010280 	.word	0x01010280
 8001288:	5c001000 	.word	0x5c001000
 800128c:	ffff0000 	.word	0xffff0000
 8001290:	51008108 	.word	0x51008108
 8001294:	52004000 	.word	0x52004000

08001298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001298:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800129c:	f7ff ff74 	bl	8001188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a0:	480c      	ldr	r0, [pc, #48]	@ (80012d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012a2:	490d      	ldr	r1, [pc, #52]	@ (80012d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012a4:	4a0d      	ldr	r2, [pc, #52]	@ (80012dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012b8:	4c0a      	ldr	r4, [pc, #40]	@ (80012e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c6:	f006 fc19 	bl	8007afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ca:	f7ff fb11 	bl	80008f0 <main>
  bx  lr
 80012ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012d8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80012dc:	08007ba4 	.word	0x08007ba4
  ldr r2, =_sbss
 80012e0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80012e4:	24000958 	.word	0x24000958

080012e8 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e8:	e7fe      	b.n	80012e8 <ADC_IRQHandler>
	...

080012ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f2:	2003      	movs	r0, #3
 80012f4:	f001 f914 	bl	8002520 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012f8:	f002 f966 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 80012fc:	4602      	mov	r2, r0
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <HAL_Init+0x68>)
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	0a1b      	lsrs	r3, r3, #8
 8001304:	f003 030f 	and.w	r3, r3, #15
 8001308:	4913      	ldr	r1, [pc, #76]	@ (8001358 <HAL_Init+0x6c>)
 800130a:	5ccb      	ldrb	r3, [r1, r3]
 800130c:	f003 031f 	and.w	r3, r3, #31
 8001310:	fa22 f303 	lsr.w	r3, r2, r3
 8001314:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001316:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <HAL_Init+0x68>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	4a0e      	ldr	r2, [pc, #56]	@ (8001358 <HAL_Init+0x6c>)
 8001320:	5cd3      	ldrb	r3, [r2, r3]
 8001322:	f003 031f 	and.w	r3, r3, #31
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	fa22 f303 	lsr.w	r3, r2, r3
 800132c:	4a0b      	ldr	r2, [pc, #44]	@ (800135c <HAL_Init+0x70>)
 800132e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001330:	4a0b      	ldr	r2, [pc, #44]	@ (8001360 <HAL_Init+0x74>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001336:	2000      	movs	r0, #0
 8001338:	f000 f814 	bl	8001364 <HAL_InitTick>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e002      	b.n	800134c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001346:	f7ff fdbd 	bl	8000ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	58024400 	.word	0x58024400
 8001358:	08007b5c 	.word	0x08007b5c
 800135c:	24000004 	.word	0x24000004
 8001360:	24000000 	.word	0x24000000

08001364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800136c:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <HAL_InitTick+0x60>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e021      	b.n	80013bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001378:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <HAL_InitTick+0x64>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <HAL_InitTick+0x60>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001386:	fbb3 f3f1 	udiv	r3, r3, r1
 800138a:	fbb2 f3f3 	udiv	r3, r2, r3
 800138e:	4618      	mov	r0, r3
 8001390:	f001 f8f9 	bl	8002586 <HAL_SYSTICK_Config>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e00e      	b.n	80013bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b0f      	cmp	r3, #15
 80013a2:	d80a      	bhi.n	80013ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a4:	2200      	movs	r2, #0
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f001 f8c3 	bl	8002536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b0:	4a06      	ldr	r2, [pc, #24]	@ (80013cc <HAL_InitTick+0x68>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e000      	b.n	80013bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	2400000c 	.word	0x2400000c
 80013c8:	24000000 	.word	0x24000000
 80013cc:	24000008 	.word	0x24000008

080013d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <HAL_IncTick+0x20>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_IncTick+0x24>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	4a04      	ldr	r2, [pc, #16]	@ (80013f4 <HAL_IncTick+0x24>)
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	2400000c 	.word	0x2400000c
 80013f4:	24000954 	.word	0x24000954

080013f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return uwTick;
 80013fc:	4b03      	ldr	r3, [pc, #12]	@ (800140c <HAL_GetTick+0x14>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	24000954 	.word	0x24000954

08001410 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001414:	4b03      	ldr	r3, [pc, #12]	@ (8001424 <HAL_GetREVID+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	0c1b      	lsrs	r3, r3, #16
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	5c001000 	.word	0x5c001000

08001428 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001432:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	43db      	mvns	r3, r3
 800143a:	401a      	ands	r2, r3
 800143c:	4904      	ldr	r1, [pc, #16]	@ (8001450 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	4313      	orrs	r3, r2
 8001442:	604b      	str	r3, [r1, #4]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	58000400 	.word	0x58000400

08001454 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	609a      	str	r2, [r3, #8]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	609a      	str	r2, [r3, #8]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014bc:	b480      	push	{r7}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3360      	adds	r3, #96	@ 0x60
 80014ce:	461a      	mov	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	430b      	orrs	r3, r1
 80014ea:	431a      	orrs	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80014f0:	bf00      	nop
 80014f2:	371c      	adds	r7, #28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	f003 031f 	and.w	r3, r3, #31
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	fa01 f303 	lsl.w	r3, r1, r3
 800151c:	431a      	orrs	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	611a      	str	r2, [r3, #16]
}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800152e:	b480      	push	{r7}
 8001530:	b087      	sub	sp, #28
 8001532:	af00      	add	r7, sp, #0
 8001534:	60f8      	str	r0, [r7, #12]
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3360      	adds	r3, #96	@ 0x60
 800153e:	461a      	mov	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	431a      	orrs	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	601a      	str	r2, [r3, #0]
  }
}
 8001558:	bf00      	nop
 800155a:	371c      	adds	r7, #28
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001564:	b480      	push	{r7}
 8001566:	b087      	sub	sp, #28
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	3330      	adds	r3, #48	@ 0x30
 8001574:	461a      	mov	r2, r3
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	f003 030c 	and.w	r3, r3, #12
 8001580:	4413      	add	r3, r2
 8001582:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	211f      	movs	r1, #31
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	401a      	ands	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	0e9b      	lsrs	r3, r3, #26
 800159c:	f003 011f 	and.w	r1, r3, #31
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	f003 031f 	and.w	r3, r3, #31
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	431a      	orrs	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015b0:	bf00      	nop
 80015b2:	371c      	adds	r7, #28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015bc:	b480      	push	{r7}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	3314      	adds	r3, #20
 80015cc:	461a      	mov	r2, r3
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	0e5b      	lsrs	r3, r3, #25
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	4413      	add	r3, r2
 80015da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	0d1b      	lsrs	r3, r3, #20
 80015e4:	f003 031f 	and.w	r3, r3, #31
 80015e8:	2107      	movs	r1, #7
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	401a      	ands	r2, r3
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	0d1b      	lsrs	r3, r3, #20
 80015f6:	f003 031f 	and.w	r3, r3, #31
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001600:	431a      	orrs	r2, r3
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001606:	bf00      	nop
 8001608:	371c      	adds	r7, #28
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800162c:	43db      	mvns	r3, r3
 800162e:	401a      	ands	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f003 0318 	and.w	r3, r3, #24
 8001636:	4908      	ldr	r1, [pc, #32]	@ (8001658 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001638:	40d9      	lsrs	r1, r3
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	400b      	ands	r3, r1
 800163e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001642:	431a      	orrs	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800164a:	bf00      	nop
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	000fffff 	.word	0x000fffff

0800165c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	4b04      	ldr	r3, [pc, #16]	@ (800167c <LL_ADC_DisableDeepPowerDown+0x20>)
 800166a:	4013      	ands	r3, r2
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6093      	str	r3, [r2, #8]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	5fffffc0 	.word	0x5fffffc0

08001680 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001694:	d101      	bne.n	800169a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <LL_ADC_EnableInternalRegulator+0x24>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	6fffffc0 	.word	0x6fffffc0

080016d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80016e4:	d101      	bne.n	80016ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <LL_ADC_IsEnabled+0x18>
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <LL_ADC_IsEnabled+0x1a>
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	2b04      	cmp	r3, #4
 8001730:	d101      	bne.n	8001736 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b08      	cmp	r3, #8
 8001756:	d101      	bne.n	800175c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b089      	sub	sp, #36	@ 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e18f      	b.n	8001aa6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001790:	2b00      	cmp	r3, #0
 8001792:	d109      	bne.n	80017a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fbaf 	bl	8000ef8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff67 	bl	8001680 <LL_ADC_IsDeepPowerDownEnabled>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d004      	beq.n	80017c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff4d 	bl	800165c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff82 	bl	80016d0 <LL_ADC_IsInternalRegulatorEnabled>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d114      	bne.n	80017fc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ff66 	bl	80016a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017dc:	4b87      	ldr	r3, [pc, #540]	@ (80019fc <HAL_ADC_Init+0x290>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	099b      	lsrs	r3, r3, #6
 80017e2:	4a87      	ldr	r2, [pc, #540]	@ (8001a00 <HAL_ADC_Init+0x294>)
 80017e4:	fba2 2303 	umull	r2, r3, r2, r3
 80017e8:	099b      	lsrs	r3, r3, #6
 80017ea:	3301      	adds	r3, #1
 80017ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017ee:	e002      	b.n	80017f6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f9      	bne.n	80017f0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff65 	bl	80016d0 <LL_ADC_IsInternalRegulatorEnabled>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10d      	bne.n	8001828 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001810:	f043 0210 	orr.w	r2, r3, #16
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181c:	f043 0201 	orr.w	r2, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff76 	bl	800171e <LL_ADC_REG_IsConversionOngoing>
 8001832:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	2b00      	cmp	r3, #0
 800183e:	f040 8129 	bne.w	8001a94 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2b00      	cmp	r3, #0
 8001846:	f040 8125 	bne.w	8001a94 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800184e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001852:	f043 0202 	orr.w	r2, r3, #2
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ff4a 	bl	80016f8 <LL_ADC_IsEnabled>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d136      	bne.n	80018d8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a65      	ldr	r2, [pc, #404]	@ (8001a04 <HAL_ADC_Init+0x298>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d004      	beq.n	800187e <HAL_ADC_Init+0x112>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a63      	ldr	r2, [pc, #396]	@ (8001a08 <HAL_ADC_Init+0x29c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d10e      	bne.n	800189c <HAL_ADC_Init+0x130>
 800187e:	4861      	ldr	r0, [pc, #388]	@ (8001a04 <HAL_ADC_Init+0x298>)
 8001880:	f7ff ff3a 	bl	80016f8 <LL_ADC_IsEnabled>
 8001884:	4604      	mov	r4, r0
 8001886:	4860      	ldr	r0, [pc, #384]	@ (8001a08 <HAL_ADC_Init+0x29c>)
 8001888:	f7ff ff36 	bl	80016f8 <LL_ADC_IsEnabled>
 800188c:	4603      	mov	r3, r0
 800188e:	4323      	orrs	r3, r4
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf0c      	ite	eq
 8001894:	2301      	moveq	r3, #1
 8001896:	2300      	movne	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	e008      	b.n	80018ae <HAL_ADC_Init+0x142>
 800189c:	485b      	ldr	r0, [pc, #364]	@ (8001a0c <HAL_ADC_Init+0x2a0>)
 800189e:	f7ff ff2b 	bl	80016f8 <LL_ADC_IsEnabled>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	bf0c      	ite	eq
 80018a8:	2301      	moveq	r3, #1
 80018aa:	2300      	movne	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d012      	beq.n	80018d8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a53      	ldr	r2, [pc, #332]	@ (8001a04 <HAL_ADC_Init+0x298>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d004      	beq.n	80018c6 <HAL_ADC_Init+0x15a>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a51      	ldr	r2, [pc, #324]	@ (8001a08 <HAL_ADC_Init+0x29c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_ADC_Init+0x15e>
 80018c6:	4a52      	ldr	r2, [pc, #328]	@ (8001a10 <HAL_ADC_Init+0x2a4>)
 80018c8:	e000      	b.n	80018cc <HAL_ADC_Init+0x160>
 80018ca:	4a52      	ldr	r2, [pc, #328]	@ (8001a14 <HAL_ADC_Init+0x2a8>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	4619      	mov	r1, r3
 80018d2:	4610      	mov	r0, r2
 80018d4:	f7ff fdbe 	bl	8001454 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80018d8:	f7ff fd9a 	bl	8001410 <HAL_GetREVID>
 80018dc:	4603      	mov	r3, r0
 80018de:	f241 0203 	movw	r2, #4099	@ 0x1003
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d914      	bls.n	8001910 <HAL_ADC_Init+0x1a4>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b10      	cmp	r3, #16
 80018ec:	d110      	bne.n	8001910 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7d5b      	ldrb	r3, [r3, #21]
 80018f2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018f8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80018fe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7f1b      	ldrb	r3, [r3, #28]
 8001904:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001906:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001908:	f043 030c 	orr.w	r3, r3, #12
 800190c:	61bb      	str	r3, [r7, #24]
 800190e:	e00d      	b.n	800192c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7d5b      	ldrb	r3, [r3, #21]
 8001914:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800191a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001920:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	7f1b      	ldrb	r3, [r3, #28]
 8001926:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	7f1b      	ldrb	r3, [r3, #28]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d106      	bne.n	8001942 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	3b01      	subs	r3, #1
 800193a:	045b      	lsls	r3, r3, #17
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001946:	2b00      	cmp	r3, #0
 8001948:	d009      	beq.n	800195e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001956:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	4b2c      	ldr	r3, [pc, #176]	@ (8001a18 <HAL_ADC_Init+0x2ac>)
 8001966:	4013      	ands	r3, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	69b9      	ldr	r1, [r7, #24]
 800196e:	430b      	orrs	r3, r1
 8001970:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fed1 	bl	800171e <LL_ADC_REG_IsConversionOngoing>
 800197c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fede 	bl	8001744 <LL_ADC_INJ_IsConversionOngoing>
 8001988:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d15f      	bne.n	8001a50 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d15c      	bne.n	8001a50 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7d1b      	ldrb	r3, [r3, #20]
 800199a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	4b1c      	ldr	r3, [pc, #112]	@ (8001a1c <HAL_ADC_Init+0x2b0>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6812      	ldr	r2, [r2, #0]
 80019b2:	69b9      	ldr	r1, [r7, #24]
 80019b4:	430b      	orrs	r3, r1
 80019b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d130      	bne.n	8001a24 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	4b14      	ldr	r3, [pc, #80]	@ (8001a20 <HAL_ADC_Init+0x2b4>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019d6:	3a01      	subs	r2, #1
 80019d8:	0411      	lsls	r1, r2, #16
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019de:	4311      	orrs	r1, r2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80019e4:	4311      	orrs	r1, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019ea:	430a      	orrs	r2, r1
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	611a      	str	r2, [r3, #16]
 80019f8:	e01c      	b.n	8001a34 <HAL_ADC_Init+0x2c8>
 80019fa:	bf00      	nop
 80019fc:	24000000 	.word	0x24000000
 8001a00:	053e2d63 	.word	0x053e2d63
 8001a04:	40022000 	.word	0x40022000
 8001a08:	40022100 	.word	0x40022100
 8001a0c:	58026000 	.word	0x58026000
 8001a10:	40022300 	.word	0x40022300
 8001a14:	58026300 	.word	0x58026300
 8001a18:	fff0c003 	.word	0xfff0c003
 8001a1c:	ffffbffc 	.word	0xffffbffc
 8001a20:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691a      	ldr	r2, [r3, #16]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 fb8c 	bl	8002168 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d10c      	bne.n	8001a72 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	f023 010f 	bic.w	r1, r3, #15
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	1e5a      	subs	r2, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a70:	e007      	b.n	8001a82 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 020f 	bic.w	r2, r2, #15
 8001a80:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a86:	f023 0303 	bic.w	r3, r3, #3
 8001a8a:	f043 0201 	orr.w	r2, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a92:	e007      	b.n	8001aa4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a98:	f043 0210 	orr.w	r2, r3, #16
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001aa4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3724      	adds	r7, #36	@ 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd90      	pop	{r4, r7, pc}
 8001aae:	bf00      	nop

08001ab0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b0a1      	sub	sp, #132	@ 0x84
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4a65      	ldr	r2, [pc, #404]	@ (8001c60 <HAL_ADC_ConfigChannel+0x1b0>)
 8001aca:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x2a>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e32e      	b.n	8002138 <HAL_ADC_ConfigChannel+0x688>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fe19 	bl	800171e <LL_ADC_REG_IsConversionOngoing>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f040 8313 	bne.w	800211a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	db2c      	blt.n	8001b56 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d108      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x6a>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0e9b      	lsrs	r3, r3, #26
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	2201      	movs	r2, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	e016      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x98>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b2a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001b32:	2320      	movs	r3, #32
 8001b34:	e003      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001b36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	f003 031f 	and.w	r3, r3, #31
 8001b42:	2201      	movs	r2, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	69d1      	ldr	r1, [r2, #28]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	430b      	orrs	r3, r1
 8001b54:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	6859      	ldr	r1, [r3, #4]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	f7ff fcfe 	bl	8001564 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fdd6 	bl	800171e <LL_ADC_REG_IsConversionOngoing>
 8001b72:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fde3 	bl	8001744 <LL_ADC_INJ_IsConversionOngoing>
 8001b7e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f040 80b8 	bne.w	8001cf8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f040 80b4 	bne.w	8001cf8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	6819      	ldr	r1, [r3, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f7ff fd0d 	bl	80015bc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ba2:	4b30      	ldr	r3, [pc, #192]	@ (8001c64 <HAL_ADC_ConfigChannel+0x1b4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001baa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001bae:	d10b      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x118>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	695a      	ldr	r2, [r3, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	e01d      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x154>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10b      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x13e>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	089b      	lsrs	r3, r3, #2
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	e00a      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x154>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d02c      	beq.n	8001c68 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6919      	ldr	r1, [r3, #16]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c1c:	f7ff fc4e 	bl	80014bc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	6919      	ldr	r1, [r3, #16]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	7e5b      	ldrb	r3, [r3, #25]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d102      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x186>
 8001c30:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001c34:	e000      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x188>
 8001c36:	2300      	movs	r3, #0
 8001c38:	461a      	mov	r2, r3
 8001c3a:	f7ff fc78 	bl	800152e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	6919      	ldr	r1, [r3, #16]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	7e1b      	ldrb	r3, [r3, #24]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d102      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x1a4>
 8001c4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c52:	e000      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1a6>
 8001c54:	2300      	movs	r3, #0
 8001c56:	461a      	mov	r2, r3
 8001c58:	f7ff fc50 	bl	80014fc <LL_ADC_SetDataRightShift>
 8001c5c:	e04c      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x248>
 8001c5e:	bf00      	nop
 8001c60:	47ff0000 	.word	0x47ff0000
 8001c64:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c6e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	069b      	lsls	r3, r3, #26
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d107      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c8a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	069b      	lsls	r3, r3, #26
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d107      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001cae:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001cb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	069b      	lsls	r3, r3, #26
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d107      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001cd2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	069b      	lsls	r3, r3, #26
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d107      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001cf6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fcfb 	bl	80016f8 <LL_ADC_IsEnabled>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f040 8211 	bne.w	800212c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	6819      	ldr	r1, [r3, #0]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	461a      	mov	r2, r3
 8001d18:	f7ff fc7c 	bl	8001614 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4aa1      	ldr	r2, [pc, #644]	@ (8001fa8 <HAL_ADC_ConfigChannel+0x4f8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	f040 812e 	bne.w	8001f84 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10b      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x2a0>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0e9b      	lsrs	r3, r3, #26
 8001d3e:	3301      	adds	r3, #1
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	2b09      	cmp	r3, #9
 8001d46:	bf94      	ite	ls
 8001d48:	2301      	movls	r3, #1
 8001d4a:	2300      	movhi	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	e019      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x2d4>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d60:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001d62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8001d68:	2320      	movs	r3, #32
 8001d6a:	e003      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8001d6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	3301      	adds	r3, #1
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	2b09      	cmp	r3, #9
 8001d7c:	bf94      	ite	ls
 8001d7e:	2301      	movls	r3, #1
 8001d80:	2300      	movhi	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d079      	beq.n	8001e7c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d107      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x2f4>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	0e9b      	lsrs	r3, r3, #26
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	069b      	lsls	r3, r3, #26
 8001d9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001da2:	e015      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x320>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001db4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8001dbc:	2320      	movs	r3, #32
 8001dbe:	e003      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8001dc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	3301      	adds	r3, #1
 8001dca:	069b      	lsls	r3, r3, #26
 8001dcc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x340>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0e9b      	lsrs	r3, r3, #26
 8001de2:	3301      	adds	r3, #1
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	2101      	movs	r1, #1
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	e017      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x370>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e00:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001e02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8001e08:	2320      	movs	r3, #32
 8001e0a:	e003      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8001e0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	3301      	adds	r3, #1
 8001e16:	f003 031f 	and.w	r3, r3, #31
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	ea42 0103 	orr.w	r1, r2, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10a      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x396>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0e9b      	lsrs	r3, r3, #26
 8001e36:	3301      	adds	r3, #1
 8001e38:	f003 021f 	and.w	r2, r3, #31
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	051b      	lsls	r3, r3, #20
 8001e44:	e018      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x3c8>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e56:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8001e5e:	2320      	movs	r3, #32
 8001e60:	e003      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8001e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e64:	fab3 f383 	clz	r3, r3
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f003 021f 	and.w	r2, r3, #31
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	e07e      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d107      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x3e8>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	0e9b      	lsrs	r3, r3, #26
 8001e8e:	3301      	adds	r3, #1
 8001e90:	069b      	lsls	r3, r3, #26
 8001e92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e96:	e015      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x414>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8001eb0:	2320      	movs	r3, #32
 8001eb2:	e003      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8001eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	069b      	lsls	r3, r3, #26
 8001ec0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d109      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x434>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	0e9b      	lsrs	r3, r3, #26
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	2101      	movs	r1, #1
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	e017      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x464>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	61bb      	str	r3, [r7, #24]
  return result;
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8001efc:	2320      	movs	r3, #32
 8001efe:	e003      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f003 031f 	and.w	r3, r3, #31
 8001f0e:	2101      	movs	r1, #1
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	ea42 0103 	orr.w	r1, r2, r3
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10d      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x490>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	0e9b      	lsrs	r3, r3, #26
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	3b1e      	subs	r3, #30
 8001f38:	051b      	lsls	r3, r3, #20
 8001f3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f3e:	e01b      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x4c8>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	fa93 f3a3 	rbit	r3, r3
 8001f4c:	60fb      	str	r3, [r7, #12]
  return result;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8001f58:	2320      	movs	r3, #32
 8001f5a:	e003      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	3301      	adds	r3, #1
 8001f66:	f003 021f 	and.w	r2, r3, #31
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	3b1e      	subs	r3, #30
 8001f72:	051b      	lsls	r3, r3, #20
 8001f74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	6892      	ldr	r2, [r2, #8]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7ff fb1c 	bl	80015bc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f280 80cf 	bge.w	800212c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a06      	ldr	r2, [pc, #24]	@ (8001fac <HAL_ADC_ConfigChannel+0x4fc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d004      	beq.n	8001fa2 <HAL_ADC_ConfigChannel+0x4f2>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a04      	ldr	r2, [pc, #16]	@ (8001fb0 <HAL_ADC_ConfigChannel+0x500>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d10a      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x508>
 8001fa2:	4b04      	ldr	r3, [pc, #16]	@ (8001fb4 <HAL_ADC_ConfigChannel+0x504>)
 8001fa4:	e009      	b.n	8001fba <HAL_ADC_ConfigChannel+0x50a>
 8001fa6:	bf00      	nop
 8001fa8:	47ff0000 	.word	0x47ff0000
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40022100 	.word	0x40022100
 8001fb4:	40022300 	.word	0x40022300
 8001fb8:	4b61      	ldr	r3, [pc, #388]	@ (8002140 <HAL_ADC_ConfigChannel+0x690>)
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fa70 	bl	80014a0 <LL_ADC_GetCommonPathInternalCh>
 8001fc0:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a5f      	ldr	r2, [pc, #380]	@ (8002144 <HAL_ADC_ConfigChannel+0x694>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d004      	beq.n	8001fd6 <HAL_ADC_ConfigChannel+0x526>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a5d      	ldr	r2, [pc, #372]	@ (8002148 <HAL_ADC_ConfigChannel+0x698>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x544>
 8001fd6:	485b      	ldr	r0, [pc, #364]	@ (8002144 <HAL_ADC_ConfigChannel+0x694>)
 8001fd8:	f7ff fb8e 	bl	80016f8 <LL_ADC_IsEnabled>
 8001fdc:	4604      	mov	r4, r0
 8001fde:	485a      	ldr	r0, [pc, #360]	@ (8002148 <HAL_ADC_ConfigChannel+0x698>)
 8001fe0:	f7ff fb8a 	bl	80016f8 <LL_ADC_IsEnabled>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4323      	orrs	r3, r4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	bf0c      	ite	eq
 8001fec:	2301      	moveq	r3, #1
 8001fee:	2300      	movne	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	e008      	b.n	8002006 <HAL_ADC_ConfigChannel+0x556>
 8001ff4:	4855      	ldr	r0, [pc, #340]	@ (800214c <HAL_ADC_ConfigChannel+0x69c>)
 8001ff6:	f7ff fb7f 	bl	80016f8 <LL_ADC_IsEnabled>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf0c      	ite	eq
 8002000:	2301      	moveq	r3, #1
 8002002:	2300      	movne	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d07d      	beq.n	8002106 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a50      	ldr	r2, [pc, #320]	@ (8002150 <HAL_ADC_ConfigChannel+0x6a0>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d130      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x5c6>
 8002014:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002016:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d12b      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a4a      	ldr	r2, [pc, #296]	@ (800214c <HAL_ADC_ConfigChannel+0x69c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	f040 8081 	bne.w	800212c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a45      	ldr	r2, [pc, #276]	@ (8002144 <HAL_ADC_ConfigChannel+0x694>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d004      	beq.n	800203e <HAL_ADC_ConfigChannel+0x58e>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a43      	ldr	r2, [pc, #268]	@ (8002148 <HAL_ADC_ConfigChannel+0x698>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d101      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x592>
 800203e:	4a45      	ldr	r2, [pc, #276]	@ (8002154 <HAL_ADC_ConfigChannel+0x6a4>)
 8002040:	e000      	b.n	8002044 <HAL_ADC_ConfigChannel+0x594>
 8002042:	4a3f      	ldr	r2, [pc, #252]	@ (8002140 <HAL_ADC_ConfigChannel+0x690>)
 8002044:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002046:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800204a:	4619      	mov	r1, r3
 800204c:	4610      	mov	r0, r2
 800204e:	f7ff fa14 	bl	800147a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002052:	4b41      	ldr	r3, [pc, #260]	@ (8002158 <HAL_ADC_ConfigChannel+0x6a8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	099b      	lsrs	r3, r3, #6
 8002058:	4a40      	ldr	r2, [pc, #256]	@ (800215c <HAL_ADC_ConfigChannel+0x6ac>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	099b      	lsrs	r3, r3, #6
 8002060:	3301      	adds	r3, #1
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002066:	e002      	b.n	800206e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	3b01      	subs	r3, #1
 800206c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f9      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002074:	e05a      	b.n	800212c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a39      	ldr	r2, [pc, #228]	@ (8002160 <HAL_ADC_ConfigChannel+0x6b0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d11e      	bne.n	80020be <HAL_ADC_ConfigChannel+0x60e>
 8002080:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002082:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d119      	bne.n	80020be <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a2f      	ldr	r2, [pc, #188]	@ (800214c <HAL_ADC_ConfigChannel+0x69c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d14b      	bne.n	800212c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a2a      	ldr	r2, [pc, #168]	@ (8002144 <HAL_ADC_ConfigChannel+0x694>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d004      	beq.n	80020a8 <HAL_ADC_ConfigChannel+0x5f8>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a29      	ldr	r2, [pc, #164]	@ (8002148 <HAL_ADC_ConfigChannel+0x698>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d101      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x5fc>
 80020a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002154 <HAL_ADC_ConfigChannel+0x6a4>)
 80020aa:	e000      	b.n	80020ae <HAL_ADC_ConfigChannel+0x5fe>
 80020ac:	4a24      	ldr	r2, [pc, #144]	@ (8002140 <HAL_ADC_ConfigChannel+0x690>)
 80020ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020b4:	4619      	mov	r1, r3
 80020b6:	4610      	mov	r0, r2
 80020b8:	f7ff f9df 	bl	800147a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020bc:	e036      	b.n	800212c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a28      	ldr	r2, [pc, #160]	@ (8002164 <HAL_ADC_ConfigChannel+0x6b4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d131      	bne.n	800212c <HAL_ADC_ConfigChannel+0x67c>
 80020c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d12c      	bne.n	800212c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a1d      	ldr	r2, [pc, #116]	@ (800214c <HAL_ADC_ConfigChannel+0x69c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d127      	bne.n	800212c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a18      	ldr	r2, [pc, #96]	@ (8002144 <HAL_ADC_ConfigChannel+0x694>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d004      	beq.n	80020f0 <HAL_ADC_ConfigChannel+0x640>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a17      	ldr	r2, [pc, #92]	@ (8002148 <HAL_ADC_ConfigChannel+0x698>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d101      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x644>
 80020f0:	4a18      	ldr	r2, [pc, #96]	@ (8002154 <HAL_ADC_ConfigChannel+0x6a4>)
 80020f2:	e000      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x646>
 80020f4:	4a12      	ldr	r2, [pc, #72]	@ (8002140 <HAL_ADC_ConfigChannel+0x690>)
 80020f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020fc:	4619      	mov	r1, r3
 80020fe:	4610      	mov	r0, r2
 8002100:	f7ff f9bb 	bl	800147a <LL_ADC_SetCommonPathInternalCh>
 8002104:	e012      	b.n	800212c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800210a:	f043 0220 	orr.w	r2, r3, #32
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002118:	e008      	b.n	800212c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211e:	f043 0220 	orr.w	r2, r3, #32
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002134:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002138:	4618      	mov	r0, r3
 800213a:	3784      	adds	r7, #132	@ 0x84
 800213c:	46bd      	mov	sp, r7
 800213e:	bd90      	pop	{r4, r7, pc}
 8002140:	58026300 	.word	0x58026300
 8002144:	40022000 	.word	0x40022000
 8002148:	40022100 	.word	0x40022100
 800214c:	58026000 	.word	0x58026000
 8002150:	cb840000 	.word	0xcb840000
 8002154:	40022300 	.word	0x40022300
 8002158:	24000000 	.word	0x24000000
 800215c:	053e2d63 	.word	0x053e2d63
 8002160:	c7520000 	.word	0xc7520000
 8002164:	cfb80000 	.word	0xcfb80000

08002168 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a7a      	ldr	r2, [pc, #488]	@ (8002360 <ADC_ConfigureBoostMode+0x1f8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d004      	beq.n	8002184 <ADC_ConfigureBoostMode+0x1c>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a79      	ldr	r2, [pc, #484]	@ (8002364 <ADC_ConfigureBoostMode+0x1fc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d109      	bne.n	8002198 <ADC_ConfigureBoostMode+0x30>
 8002184:	4b78      	ldr	r3, [pc, #480]	@ (8002368 <ADC_ConfigureBoostMode+0x200>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf14      	ite	ne
 8002190:	2301      	movne	r3, #1
 8002192:	2300      	moveq	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	e008      	b.n	80021aa <ADC_ConfigureBoostMode+0x42>
 8002198:	4b74      	ldr	r3, [pc, #464]	@ (800236c <ADC_ConfigureBoostMode+0x204>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	bf14      	ite	ne
 80021a4:	2301      	movne	r3, #1
 80021a6:	2300      	moveq	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d01c      	beq.n	80021e8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80021ae:	f001 fb85 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 80021b2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80021bc:	d010      	beq.n	80021e0 <ADC_ConfigureBoostMode+0x78>
 80021be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80021c2:	d873      	bhi.n	80022ac <ADC_ConfigureBoostMode+0x144>
 80021c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021c8:	d002      	beq.n	80021d0 <ADC_ConfigureBoostMode+0x68>
 80021ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80021ce:	d16d      	bne.n	80022ac <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	0c1b      	lsrs	r3, r3, #16
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021dc:	60fb      	str	r3, [r7, #12]
        break;
 80021de:	e068      	b.n	80022b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	089b      	lsrs	r3, r3, #2
 80021e4:	60fb      	str	r3, [r7, #12]
        break;
 80021e6:	e064      	b.n	80022b2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80021e8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80021ec:	f04f 0100 	mov.w	r1, #0
 80021f0:	f002 fdca 	bl	8004d88 <HAL_RCCEx_GetPeriphCLKFreq>
 80021f4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80021fe:	d051      	beq.n	80022a4 <ADC_ConfigureBoostMode+0x13c>
 8002200:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002204:	d854      	bhi.n	80022b0 <ADC_ConfigureBoostMode+0x148>
 8002206:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800220a:	d047      	beq.n	800229c <ADC_ConfigureBoostMode+0x134>
 800220c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002210:	d84e      	bhi.n	80022b0 <ADC_ConfigureBoostMode+0x148>
 8002212:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002216:	d03d      	beq.n	8002294 <ADC_ConfigureBoostMode+0x12c>
 8002218:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800221c:	d848      	bhi.n	80022b0 <ADC_ConfigureBoostMode+0x148>
 800221e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002222:	d033      	beq.n	800228c <ADC_ConfigureBoostMode+0x124>
 8002224:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002228:	d842      	bhi.n	80022b0 <ADC_ConfigureBoostMode+0x148>
 800222a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800222e:	d029      	beq.n	8002284 <ADC_ConfigureBoostMode+0x11c>
 8002230:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002234:	d83c      	bhi.n	80022b0 <ADC_ConfigureBoostMode+0x148>
 8002236:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800223a:	d01a      	beq.n	8002272 <ADC_ConfigureBoostMode+0x10a>
 800223c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002240:	d836      	bhi.n	80022b0 <ADC_ConfigureBoostMode+0x148>
 8002242:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002246:	d014      	beq.n	8002272 <ADC_ConfigureBoostMode+0x10a>
 8002248:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800224c:	d830      	bhi.n	80022b0 <ADC_ConfigureBoostMode+0x148>
 800224e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002252:	d00e      	beq.n	8002272 <ADC_ConfigureBoostMode+0x10a>
 8002254:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002258:	d82a      	bhi.n	80022b0 <ADC_ConfigureBoostMode+0x148>
 800225a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800225e:	d008      	beq.n	8002272 <ADC_ConfigureBoostMode+0x10a>
 8002260:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002264:	d824      	bhi.n	80022b0 <ADC_ConfigureBoostMode+0x148>
 8002266:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800226a:	d002      	beq.n	8002272 <ADC_ConfigureBoostMode+0x10a>
 800226c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002270:	d11e      	bne.n	80022b0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	0c9b      	lsrs	r3, r3, #18
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002280:	60fb      	str	r3, [r7, #12]
        break;
 8002282:	e016      	b.n	80022b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	091b      	lsrs	r3, r3, #4
 8002288:	60fb      	str	r3, [r7, #12]
        break;
 800228a:	e012      	b.n	80022b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	60fb      	str	r3, [r7, #12]
        break;
 8002292:	e00e      	b.n	80022b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	099b      	lsrs	r3, r3, #6
 8002298:	60fb      	str	r3, [r7, #12]
        break;
 800229a:	e00a      	b.n	80022b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	09db      	lsrs	r3, r3, #7
 80022a0:	60fb      	str	r3, [r7, #12]
        break;
 80022a2:	e006      	b.n	80022b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	0a1b      	lsrs	r3, r3, #8
 80022a8:	60fb      	str	r3, [r7, #12]
        break;
 80022aa:	e002      	b.n	80022b2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80022ac:	bf00      	nop
 80022ae:	e000      	b.n	80022b2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80022b0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80022b2:	f7ff f8ad 	bl	8001410 <HAL_GetREVID>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80022bc:	4293      	cmp	r3, r2
 80022be:	d815      	bhi.n	80022ec <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4a2b      	ldr	r2, [pc, #172]	@ (8002370 <ADC_ConfigureBoostMode+0x208>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d908      	bls.n	80022da <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022d6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80022d8:	e03e      	b.n	8002358 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022e8:	609a      	str	r2, [r3, #8]
}
 80022ea:	e035      	b.n	8002358 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	085b      	lsrs	r3, r3, #1
 80022f0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002374 <ADC_ConfigureBoostMode+0x20c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d808      	bhi.n	800230c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002308:	609a      	str	r2, [r3, #8]
}
 800230a:	e025      	b.n	8002358 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4a1a      	ldr	r2, [pc, #104]	@ (8002378 <ADC_ConfigureBoostMode+0x210>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d80a      	bhi.n	800232a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002326:	609a      	str	r2, [r3, #8]
}
 8002328:	e016      	b.n	8002358 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4a13      	ldr	r2, [pc, #76]	@ (800237c <ADC_ConfigureBoostMode+0x214>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d80a      	bhi.n	8002348 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002344:	609a      	str	r2, [r3, #8]
}
 8002346:	e007      	b.n	8002358 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002356:	609a      	str	r2, [r3, #8]
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40022000 	.word	0x40022000
 8002364:	40022100 	.word	0x40022100
 8002368:	40022300 	.word	0x40022300
 800236c:	58026300 	.word	0x58026300
 8002370:	01312d00 	.word	0x01312d00
 8002374:	005f5e10 	.word	0x005f5e10
 8002378:	00bebc20 	.word	0x00bebc20
 800237c:	017d7840 	.word	0x017d7840

08002380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002390:	4b0b      	ldr	r3, [pc, #44]	@ (80023c0 <__NVIC_SetPriorityGrouping+0x40>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800239c:	4013      	ands	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023a8:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ae:	4a04      	ldr	r2, [pc, #16]	@ (80023c0 <__NVIC_SetPriorityGrouping+0x40>)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	60d3      	str	r3, [r2, #12]
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00
 80023c4:	05fa0000 	.word	0x05fa0000

080023c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023cc:	4b04      	ldr	r3, [pc, #16]	@ (80023e0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	f003 0307 	and.w	r3, r3, #7
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	db0b      	blt.n	800240e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	f003 021f 	and.w	r2, r3, #31
 80023fc:	4907      	ldr	r1, [pc, #28]	@ (800241c <__NVIC_EnableIRQ+0x38>)
 80023fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	2001      	movs	r0, #1
 8002406:	fa00 f202 	lsl.w	r2, r0, r2
 800240a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000e100 	.word	0xe000e100

08002420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800242c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002430:	2b00      	cmp	r3, #0
 8002432:	db0a      	blt.n	800244a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	490c      	ldr	r1, [pc, #48]	@ (800246c <__NVIC_SetPriority+0x4c>)
 800243a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800243e:	0112      	lsls	r2, r2, #4
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	440b      	add	r3, r1
 8002444:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002448:	e00a      	b.n	8002460 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4908      	ldr	r1, [pc, #32]	@ (8002470 <__NVIC_SetPriority+0x50>)
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	3b04      	subs	r3, #4
 8002458:	0112      	lsls	r2, r2, #4
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	440b      	add	r3, r1
 800245e:	761a      	strb	r2, [r3, #24]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000e100 	.word	0xe000e100
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	@ 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f1c3 0307 	rsb	r3, r3, #7
 800248e:	2b04      	cmp	r3, #4
 8002490:	bf28      	it	cs
 8002492:	2304      	movcs	r3, #4
 8002494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3304      	adds	r3, #4
 800249a:	2b06      	cmp	r3, #6
 800249c:	d902      	bls.n	80024a4 <NVIC_EncodePriority+0x30>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3b03      	subs	r3, #3
 80024a2:	e000      	b.n	80024a6 <NVIC_EncodePriority+0x32>
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43da      	mvns	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	401a      	ands	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024bc:	f04f 31ff 	mov.w	r1, #4294967295
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	43d9      	mvns	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	4313      	orrs	r3, r2
         );
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3724      	adds	r7, #36	@ 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024ec:	d301      	bcc.n	80024f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ee:	2301      	movs	r3, #1
 80024f0:	e00f      	b.n	8002512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f2:	4a0a      	ldr	r2, [pc, #40]	@ (800251c <SysTick_Config+0x40>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fa:	210f      	movs	r1, #15
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002500:	f7ff ff8e 	bl	8002420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002504:	4b05      	ldr	r3, [pc, #20]	@ (800251c <SysTick_Config+0x40>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250a:	4b04      	ldr	r3, [pc, #16]	@ (800251c <SysTick_Config+0x40>)
 800250c:	2207      	movs	r2, #7
 800250e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	e000e010 	.word	0xe000e010

08002520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ff29 	bl	8002380 <__NVIC_SetPriorityGrouping>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b086      	sub	sp, #24
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002544:	f7ff ff40 	bl	80023c8 <__NVIC_GetPriorityGrouping>
 8002548:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	6978      	ldr	r0, [r7, #20]
 8002550:	f7ff ff90 	bl	8002474 <NVIC_EncodePriority>
 8002554:	4602      	mov	r2, r0
 8002556:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff5f 	bl	8002420 <__NVIC_SetPriority>
}
 8002562:	bf00      	nop
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002574:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff33 	bl	80023e4 <__NVIC_EnableIRQ>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff ffa4 	bl	80024dc <SysTick_Config>
 8002594:	4603      	mov	r3, r0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b089      	sub	sp, #36	@ 0x24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80025ae:	4b89      	ldr	r3, [pc, #548]	@ (80027d4 <HAL_GPIO_Init+0x234>)
 80025b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025b2:	e194      	b.n	80028de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	2101      	movs	r1, #1
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	4013      	ands	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8186 	beq.w	80028d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d005      	beq.n	80025e4 <HAL_GPIO_Init+0x44>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d130      	bne.n	8002646 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800261a:	2201      	movs	r2, #1
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	f003 0201 	and.w	r2, r3, #1
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b03      	cmp	r3, #3
 8002650:	d017      	beq.n	8002682 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	2203      	movs	r2, #3
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d123      	bne.n	80026d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	08da      	lsrs	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3208      	adds	r2, #8
 8002696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	220f      	movs	r2, #15
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	08da      	lsrs	r2, r3, #3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3208      	adds	r2, #8
 80026d0:	69b9      	ldr	r1, [r7, #24]
 80026d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	2203      	movs	r2, #3
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0203 	and.w	r2, r3, #3
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80e0 	beq.w	80028d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002718:	4b2f      	ldr	r3, [pc, #188]	@ (80027d8 <HAL_GPIO_Init+0x238>)
 800271a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800271e:	4a2e      	ldr	r2, [pc, #184]	@ (80027d8 <HAL_GPIO_Init+0x238>)
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002728:	4b2b      	ldr	r3, [pc, #172]	@ (80027d8 <HAL_GPIO_Init+0x238>)
 800272a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002736:	4a29      	ldr	r2, [pc, #164]	@ (80027dc <HAL_GPIO_Init+0x23c>)
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	089b      	lsrs	r3, r3, #2
 800273c:	3302      	adds	r3, #2
 800273e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	220f      	movs	r2, #15
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a20      	ldr	r2, [pc, #128]	@ (80027e0 <HAL_GPIO_Init+0x240>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d052      	beq.n	8002808 <HAL_GPIO_Init+0x268>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a1f      	ldr	r2, [pc, #124]	@ (80027e4 <HAL_GPIO_Init+0x244>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d031      	beq.n	80027ce <HAL_GPIO_Init+0x22e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a1e      	ldr	r2, [pc, #120]	@ (80027e8 <HAL_GPIO_Init+0x248>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d02b      	beq.n	80027ca <HAL_GPIO_Init+0x22a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a1d      	ldr	r2, [pc, #116]	@ (80027ec <HAL_GPIO_Init+0x24c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d025      	beq.n	80027c6 <HAL_GPIO_Init+0x226>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a1c      	ldr	r2, [pc, #112]	@ (80027f0 <HAL_GPIO_Init+0x250>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d01f      	beq.n	80027c2 <HAL_GPIO_Init+0x222>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a1b      	ldr	r2, [pc, #108]	@ (80027f4 <HAL_GPIO_Init+0x254>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d019      	beq.n	80027be <HAL_GPIO_Init+0x21e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a1a      	ldr	r2, [pc, #104]	@ (80027f8 <HAL_GPIO_Init+0x258>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d013      	beq.n	80027ba <HAL_GPIO_Init+0x21a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a19      	ldr	r2, [pc, #100]	@ (80027fc <HAL_GPIO_Init+0x25c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00d      	beq.n	80027b6 <HAL_GPIO_Init+0x216>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a18      	ldr	r2, [pc, #96]	@ (8002800 <HAL_GPIO_Init+0x260>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d007      	beq.n	80027b2 <HAL_GPIO_Init+0x212>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a17      	ldr	r2, [pc, #92]	@ (8002804 <HAL_GPIO_Init+0x264>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d101      	bne.n	80027ae <HAL_GPIO_Init+0x20e>
 80027aa:	2309      	movs	r3, #9
 80027ac:	e02d      	b.n	800280a <HAL_GPIO_Init+0x26a>
 80027ae:	230a      	movs	r3, #10
 80027b0:	e02b      	b.n	800280a <HAL_GPIO_Init+0x26a>
 80027b2:	2308      	movs	r3, #8
 80027b4:	e029      	b.n	800280a <HAL_GPIO_Init+0x26a>
 80027b6:	2307      	movs	r3, #7
 80027b8:	e027      	b.n	800280a <HAL_GPIO_Init+0x26a>
 80027ba:	2306      	movs	r3, #6
 80027bc:	e025      	b.n	800280a <HAL_GPIO_Init+0x26a>
 80027be:	2305      	movs	r3, #5
 80027c0:	e023      	b.n	800280a <HAL_GPIO_Init+0x26a>
 80027c2:	2304      	movs	r3, #4
 80027c4:	e021      	b.n	800280a <HAL_GPIO_Init+0x26a>
 80027c6:	2303      	movs	r3, #3
 80027c8:	e01f      	b.n	800280a <HAL_GPIO_Init+0x26a>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e01d      	b.n	800280a <HAL_GPIO_Init+0x26a>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e01b      	b.n	800280a <HAL_GPIO_Init+0x26a>
 80027d2:	bf00      	nop
 80027d4:	58000080 	.word	0x58000080
 80027d8:	58024400 	.word	0x58024400
 80027dc:	58000400 	.word	0x58000400
 80027e0:	58020000 	.word	0x58020000
 80027e4:	58020400 	.word	0x58020400
 80027e8:	58020800 	.word	0x58020800
 80027ec:	58020c00 	.word	0x58020c00
 80027f0:	58021000 	.word	0x58021000
 80027f4:	58021400 	.word	0x58021400
 80027f8:	58021800 	.word	0x58021800
 80027fc:	58021c00 	.word	0x58021c00
 8002800:	58022000 	.word	0x58022000
 8002804:	58022400 	.word	0x58022400
 8002808:	2300      	movs	r3, #0
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	f002 0203 	and.w	r2, r2, #3
 8002810:	0092      	lsls	r2, r2, #2
 8002812:	4093      	lsls	r3, r2
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800281a:	4938      	ldr	r1, [pc, #224]	@ (80028fc <HAL_GPIO_Init+0x35c>)
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	3302      	adds	r3, #2
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800284e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800287c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4013      	ands	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	3301      	adds	r3, #1
 80028dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	fa22 f303 	lsr.w	r3, r2, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f47f ae63 	bne.w	80025b4 <HAL_GPIO_Init+0x14>
  }
}
 80028ee:	bf00      	nop
 80028f0:	bf00      	nop
 80028f2:	3724      	adds	r7, #36	@ 0x24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	58000400 	.word	0x58000400

08002900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	807b      	strh	r3, [r7, #2]
 800290c:	4613      	mov	r3, r2
 800290e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002910:	787b      	ldrb	r3, [r7, #1]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002916:	887a      	ldrh	r2, [r7, #2]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800291c:	e003      	b.n	8002926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800291e:	887b      	ldrh	r3, [r7, #2]
 8002920:	041a      	lsls	r2, r3, #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	619a      	str	r2, [r3, #24]
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
	...

08002934 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800293c:	4b19      	ldr	r3, [pc, #100]	@ (80029a4 <HAL_PWREx_ConfigSupply+0x70>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b04      	cmp	r3, #4
 8002946:	d00a      	beq.n	800295e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002948:	4b16      	ldr	r3, [pc, #88]	@ (80029a4 <HAL_PWREx_ConfigSupply+0x70>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	429a      	cmp	r2, r3
 8002954:	d001      	beq.n	800295a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e01f      	b.n	800299a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	e01d      	b.n	800299a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800295e:	4b11      	ldr	r3, [pc, #68]	@ (80029a4 <HAL_PWREx_ConfigSupply+0x70>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f023 0207 	bic.w	r2, r3, #7
 8002966:	490f      	ldr	r1, [pc, #60]	@ (80029a4 <HAL_PWREx_ConfigSupply+0x70>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4313      	orrs	r3, r2
 800296c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800296e:	f7fe fd43 	bl	80013f8 <HAL_GetTick>
 8002972:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002974:	e009      	b.n	800298a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002976:	f7fe fd3f 	bl	80013f8 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002984:	d901      	bls.n	800298a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e007      	b.n	800299a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800298a:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <HAL_PWREx_ConfigSupply+0x70>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002992:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002996:	d1ee      	bne.n	8002976 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	58024800 	.word	0x58024800

080029a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08c      	sub	sp, #48	@ 0x30
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d102      	bne.n	80029bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	f000 bc48 	b.w	800324c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 8088 	beq.w	8002ada <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ca:	4b99      	ldr	r3, [pc, #612]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029d4:	4b96      	ldr	r3, [pc, #600]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 80029d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80029da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d007      	beq.n	80029f0 <HAL_RCC_OscConfig+0x48>
 80029e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e2:	2b18      	cmp	r3, #24
 80029e4:	d111      	bne.n	8002a0a <HAL_RCC_OscConfig+0x62>
 80029e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d10c      	bne.n	8002a0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f0:	4b8f      	ldr	r3, [pc, #572]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d06d      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x130>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d169      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	f000 bc21 	b.w	800324c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a12:	d106      	bne.n	8002a22 <HAL_RCC_OscConfig+0x7a>
 8002a14:	4b86      	ldr	r3, [pc, #536]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a85      	ldr	r2, [pc, #532]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002a1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	e02e      	b.n	8002a80 <HAL_RCC_OscConfig+0xd8>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x9c>
 8002a2a:	4b81      	ldr	r3, [pc, #516]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a80      	ldr	r2, [pc, #512]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002a30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	4b7e      	ldr	r3, [pc, #504]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a7d      	ldr	r2, [pc, #500]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002a3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e01d      	b.n	8002a80 <HAL_RCC_OscConfig+0xd8>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0xc0>
 8002a4e:	4b78      	ldr	r3, [pc, #480]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a77      	ldr	r2, [pc, #476]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002a54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	4b75      	ldr	r3, [pc, #468]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a74      	ldr	r2, [pc, #464]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e00b      	b.n	8002a80 <HAL_RCC_OscConfig+0xd8>
 8002a68:	4b71      	ldr	r3, [pc, #452]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a70      	ldr	r2, [pc, #448]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	4b6e      	ldr	r3, [pc, #440]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a6d      	ldr	r2, [pc, #436]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002a7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d013      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a88:	f7fe fcb6 	bl	80013f8 <HAL_GetTick>
 8002a8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a90:	f7fe fcb2 	bl	80013f8 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	@ 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e3d4      	b.n	800324c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002aa2:	4b63      	ldr	r3, [pc, #396]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0xe8>
 8002aae:	e014      	b.n	8002ada <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fca2 	bl	80013f8 <HAL_GetTick>
 8002ab4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab8:	f7fe fc9e 	bl	80013f8 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	@ 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e3c0      	b.n	800324c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002aca:	4b59      	ldr	r3, [pc, #356]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x110>
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 80ca 	beq.w	8002c7c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae8:	4b51      	ldr	r3, [pc, #324]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002af0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002af2:	4b4f      	ldr	r3, [pc, #316]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d007      	beq.n	8002b0e <HAL_RCC_OscConfig+0x166>
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	2b18      	cmp	r3, #24
 8002b02:	d156      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x20a>
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d151      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b0e:	4b48      	ldr	r3, [pc, #288]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <HAL_RCC_OscConfig+0x17e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e392      	b.n	800324c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b26:	4b42      	ldr	r3, [pc, #264]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 0219 	bic.w	r2, r3, #25
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	493f      	ldr	r1, [pc, #252]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7fe fc5e 	bl	80013f8 <HAL_GetTick>
 8002b3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b40:	f7fe fc5a 	bl	80013f8 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e37c      	b.n	800324c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b52:	4b37      	ldr	r3, [pc, #220]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5e:	f7fe fc57 	bl	8001410 <HAL_GetREVID>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d817      	bhi.n	8002b9c <HAL_RCC_OscConfig+0x1f4>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	2b40      	cmp	r3, #64	@ 0x40
 8002b72:	d108      	bne.n	8002b86 <HAL_RCC_OscConfig+0x1de>
 8002b74:	4b2e      	ldr	r3, [pc, #184]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002b7c:	4a2c      	ldr	r2, [pc, #176]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002b7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b82:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b84:	e07a      	b.n	8002c7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b86:	4b2a      	ldr	r3, [pc, #168]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	031b      	lsls	r3, r3, #12
 8002b94:	4926      	ldr	r1, [pc, #152]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b9a:	e06f      	b.n	8002c7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9c:	4b24      	ldr	r3, [pc, #144]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	061b      	lsls	r3, r3, #24
 8002baa:	4921      	ldr	r1, [pc, #132]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bb0:	e064      	b.n	8002c7c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d047      	beq.n	8002c4a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002bba:	4b1d      	ldr	r3, [pc, #116]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 0219 	bic.w	r2, r3, #25
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	491a      	ldr	r1, [pc, #104]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fc14 	bl	80013f8 <HAL_GetTick>
 8002bd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd4:	f7fe fc10 	bl	80013f8 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e332      	b.n	800324c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002be6:	4b12      	ldr	r3, [pc, #72]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf2:	f7fe fc0d 	bl	8001410 <HAL_GetREVID>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d819      	bhi.n	8002c34 <HAL_RCC_OscConfig+0x28c>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	2b40      	cmp	r3, #64	@ 0x40
 8002c06:	d108      	bne.n	8002c1a <HAL_RCC_OscConfig+0x272>
 8002c08:	4b09      	ldr	r3, [pc, #36]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002c10:	4a07      	ldr	r2, [pc, #28]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002c12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c16:	6053      	str	r3, [r2, #4]
 8002c18:	e030      	b.n	8002c7c <HAL_RCC_OscConfig+0x2d4>
 8002c1a:	4b05      	ldr	r3, [pc, #20]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	031b      	lsls	r3, r3, #12
 8002c28:	4901      	ldr	r1, [pc, #4]	@ (8002c30 <HAL_RCC_OscConfig+0x288>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	604b      	str	r3, [r1, #4]
 8002c2e:	e025      	b.n	8002c7c <HAL_RCC_OscConfig+0x2d4>
 8002c30:	58024400 	.word	0x58024400
 8002c34:	4b9a      	ldr	r3, [pc, #616]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	061b      	lsls	r3, r3, #24
 8002c42:	4997      	ldr	r1, [pc, #604]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
 8002c48:	e018      	b.n	8002c7c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c4a:	4b95      	ldr	r3, [pc, #596]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a94      	ldr	r2, [pc, #592]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c56:	f7fe fbcf 	bl	80013f8 <HAL_GetTick>
 8002c5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5e:	f7fe fbcb 	bl	80013f8 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e2ed      	b.n	800324c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c70:	4b8b      	ldr	r3, [pc, #556]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1f0      	bne.n	8002c5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0310 	and.w	r3, r3, #16
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80a9 	beq.w	8002ddc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c8a:	4b85      	ldr	r3, [pc, #532]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c92:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c94:	4b82      	ldr	r3, [pc, #520]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c98:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d007      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x308>
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2b18      	cmp	r3, #24
 8002ca4:	d13a      	bne.n	8002d1c <HAL_RCC_OscConfig+0x374>
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d135      	bne.n	8002d1c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cb0:	4b7b      	ldr	r3, [pc, #492]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x320>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	2b80      	cmp	r3, #128	@ 0x80
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e2c1      	b.n	800324c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cc8:	f7fe fba2 	bl	8001410 <HAL_GetREVID>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d817      	bhi.n	8002d06 <HAL_RCC_OscConfig+0x35e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	d108      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x348>
 8002cde:	4b70      	ldr	r3, [pc, #448]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002ce6:	4a6e      	ldr	r2, [pc, #440]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002ce8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002cec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cee:	e075      	b.n	8002ddc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cf0:	4b6b      	ldr	r3, [pc, #428]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	069b      	lsls	r3, r3, #26
 8002cfe:	4968      	ldr	r1, [pc, #416]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d04:	e06a      	b.n	8002ddc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d06:	4b66      	ldr	r3, [pc, #408]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	061b      	lsls	r3, r3, #24
 8002d14:	4962      	ldr	r1, [pc, #392]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d1a:	e05f      	b.n	8002ddc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d042      	beq.n	8002daa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d24:	4b5e      	ldr	r3, [pc, #376]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a5d      	ldr	r2, [pc, #372]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7fe fb62 	bl	80013f8 <HAL_GetTick>
 8002d34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d38:	f7fe fb5e 	bl	80013f8 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e280      	b.n	800324c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d4a:	4b55      	ldr	r3, [pc, #340]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d56:	f7fe fb5b 	bl	8001410 <HAL_GetREVID>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d817      	bhi.n	8002d94 <HAL_RCC_OscConfig+0x3ec>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d108      	bne.n	8002d7e <HAL_RCC_OscConfig+0x3d6>
 8002d6c:	4b4c      	ldr	r3, [pc, #304]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002d74:	4a4a      	ldr	r2, [pc, #296]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002d76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d7a:	6053      	str	r3, [r2, #4]
 8002d7c:	e02e      	b.n	8002ddc <HAL_RCC_OscConfig+0x434>
 8002d7e:	4b48      	ldr	r3, [pc, #288]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	069b      	lsls	r3, r3, #26
 8002d8c:	4944      	ldr	r1, [pc, #272]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	604b      	str	r3, [r1, #4]
 8002d92:	e023      	b.n	8002ddc <HAL_RCC_OscConfig+0x434>
 8002d94:	4b42      	ldr	r3, [pc, #264]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	493f      	ldr	r1, [pc, #252]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60cb      	str	r3, [r1, #12]
 8002da8:	e018      	b.n	8002ddc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002daa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a3c      	ldr	r2, [pc, #240]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002db0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f7fe fb1f 	bl	80013f8 <HAL_GetTick>
 8002dba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002dbe:	f7fe fb1b 	bl	80013f8 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e23d      	b.n	800324c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002dd0:	4b33      	ldr	r3, [pc, #204]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f0      	bne.n	8002dbe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d036      	beq.n	8002e56 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d019      	beq.n	8002e24 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df0:	4b2b      	ldr	r3, [pc, #172]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002df4:	4a2a      	ldr	r2, [pc, #168]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfc:	f7fe fafc 	bl	80013f8 <HAL_GetTick>
 8002e00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e04:	f7fe faf8 	bl	80013f8 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e21a      	b.n	800324c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e16:	4b22      	ldr	r3, [pc, #136]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x45c>
 8002e22:	e018      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e24:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002e26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e28:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002e2a:	f023 0301 	bic.w	r3, r3, #1
 8002e2e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e30:	f7fe fae2 	bl	80013f8 <HAL_GetTick>
 8002e34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e38:	f7fe fade 	bl	80013f8 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e200      	b.n	800324c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002e4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d039      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d01c      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002e70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e76:	f7fe fabf 	bl	80013f8 <HAL_GetTick>
 8002e7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e7e:	f7fe fabb 	bl	80013f8 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e1dd      	b.n	800324c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e90:	4b03      	ldr	r3, [pc, #12]	@ (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x4d6>
 8002e9c:	e01b      	b.n	8002ed6 <HAL_RCC_OscConfig+0x52e>
 8002e9e:	bf00      	nop
 8002ea0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ea4:	4b9b      	ldr	r3, [pc, #620]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a9a      	ldr	r2, [pc, #616]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8002eaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002eae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002eb0:	f7fe faa2 	bl	80013f8 <HAL_GetTick>
 8002eb4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002eb8:	f7fe fa9e 	bl	80013f8 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e1c0      	b.n	800324c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002eca:	4b92      	ldr	r3, [pc, #584]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 8081 	beq.w	8002fe6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ee4:	4b8c      	ldr	r3, [pc, #560]	@ (8003118 <HAL_RCC_OscConfig+0x770>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a8b      	ldr	r2, [pc, #556]	@ (8003118 <HAL_RCC_OscConfig+0x770>)
 8002eea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ef0:	f7fe fa82 	bl	80013f8 <HAL_GetTick>
 8002ef4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef8:	f7fe fa7e 	bl	80013f8 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b64      	cmp	r3, #100	@ 0x64
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e1a0      	b.n	800324c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f0a:	4b83      	ldr	r3, [pc, #524]	@ (8003118 <HAL_RCC_OscConfig+0x770>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d106      	bne.n	8002f2c <HAL_RCC_OscConfig+0x584>
 8002f1e:	4b7d      	ldr	r3, [pc, #500]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f22:	4a7c      	ldr	r2, [pc, #496]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f2a:	e02d      	b.n	8002f88 <HAL_RCC_OscConfig+0x5e0>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10c      	bne.n	8002f4e <HAL_RCC_OscConfig+0x5a6>
 8002f34:	4b77      	ldr	r3, [pc, #476]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f38:	4a76      	ldr	r2, [pc, #472]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8002f3a:	f023 0301 	bic.w	r3, r3, #1
 8002f3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f40:	4b74      	ldr	r3, [pc, #464]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f44:	4a73      	ldr	r2, [pc, #460]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8002f46:	f023 0304 	bic.w	r3, r3, #4
 8002f4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f4c:	e01c      	b.n	8002f88 <HAL_RCC_OscConfig+0x5e0>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b05      	cmp	r3, #5
 8002f54:	d10c      	bne.n	8002f70 <HAL_RCC_OscConfig+0x5c8>
 8002f56:	4b6f      	ldr	r3, [pc, #444]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5a:	4a6e      	ldr	r2, [pc, #440]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8002f5c:	f043 0304 	orr.w	r3, r3, #4
 8002f60:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f62:	4b6c      	ldr	r3, [pc, #432]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f66:	4a6b      	ldr	r2, [pc, #428]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f6e:	e00b      	b.n	8002f88 <HAL_RCC_OscConfig+0x5e0>
 8002f70:	4b68      	ldr	r3, [pc, #416]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f74:	4a67      	ldr	r2, [pc, #412]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8002f76:	f023 0301 	bic.w	r3, r3, #1
 8002f7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f7c:	4b65      	ldr	r3, [pc, #404]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f80:	4a64      	ldr	r2, [pc, #400]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8002f82:	f023 0304 	bic.w	r3, r3, #4
 8002f86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d015      	beq.n	8002fbc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f90:	f7fe fa32 	bl	80013f8 <HAL_GetTick>
 8002f94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f96:	e00a      	b.n	8002fae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f98:	f7fe fa2e 	bl	80013f8 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e14e      	b.n	800324c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fae:	4b59      	ldr	r3, [pc, #356]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0ee      	beq.n	8002f98 <HAL_RCC_OscConfig+0x5f0>
 8002fba:	e014      	b.n	8002fe6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbc:	f7fe fa1c 	bl	80013f8 <HAL_GetTick>
 8002fc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc4:	f7fe fa18 	bl	80013f8 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e138      	b.n	800324c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fda:	4b4e      	ldr	r3, [pc, #312]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1ee      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 812d 	beq.w	800324a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ff0:	4b48      	ldr	r3, [pc, #288]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ff8:	2b18      	cmp	r3, #24
 8002ffa:	f000 80bd 	beq.w	8003178 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003002:	2b02      	cmp	r3, #2
 8003004:	f040 809e 	bne.w	8003144 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003008:	4b42      	ldr	r3, [pc, #264]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a41      	ldr	r2, [pc, #260]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 800300e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7fe f9f0 	bl	80013f8 <HAL_GetTick>
 8003018:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301c:	f7fe f9ec 	bl	80013f8 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e10e      	b.n	800324c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800302e:	4b39      	ldr	r3, [pc, #228]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800303a:	4b36      	ldr	r3, [pc, #216]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 800303c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800303e:	4b37      	ldr	r3, [pc, #220]	@ (800311c <HAL_RCC_OscConfig+0x774>)
 8003040:	4013      	ands	r3, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800304a:	0112      	lsls	r2, r2, #4
 800304c:	430a      	orrs	r2, r1
 800304e:	4931      	ldr	r1, [pc, #196]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8003050:	4313      	orrs	r3, r2
 8003052:	628b      	str	r3, [r1, #40]	@ 0x28
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003058:	3b01      	subs	r3, #1
 800305a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003062:	3b01      	subs	r3, #1
 8003064:	025b      	lsls	r3, r3, #9
 8003066:	b29b      	uxth	r3, r3
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306e:	3b01      	subs	r3, #1
 8003070:	041b      	lsls	r3, r3, #16
 8003072:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800307c:	3b01      	subs	r3, #1
 800307e:	061b      	lsls	r3, r3, #24
 8003080:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003084:	4923      	ldr	r1, [pc, #140]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8003086:	4313      	orrs	r3, r2
 8003088:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800308a:	4b22      	ldr	r3, [pc, #136]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 800308c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308e:	4a21      	ldr	r2, [pc, #132]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003096:	4b1f      	ldr	r3, [pc, #124]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8003098:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800309a:	4b21      	ldr	r3, [pc, #132]	@ (8003120 <HAL_RCC_OscConfig+0x778>)
 800309c:	4013      	ands	r3, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80030a2:	00d2      	lsls	r2, r2, #3
 80030a4:	491b      	ldr	r1, [pc, #108]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80030aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 80030ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ae:	f023 020c 	bic.w	r2, r3, #12
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	4917      	ldr	r1, [pc, #92]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80030bc:	4b15      	ldr	r3, [pc, #84]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 80030be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c0:	f023 0202 	bic.w	r2, r3, #2
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c8:	4912      	ldr	r1, [pc, #72]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030ce:	4b11      	ldr	r3, [pc, #68]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 80030d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d2:	4a10      	ldr	r2, [pc, #64]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 80030d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030da:	4b0e      	ldr	r3, [pc, #56]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 80030dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030de:	4a0d      	ldr	r2, [pc, #52]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 80030e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80030e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 80030e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 80030ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80030f2:	4b08      	ldr	r3, [pc, #32]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 80030f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f6:	4a07      	ldr	r2, [pc, #28]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030fe:	4b05      	ldr	r3, [pc, #20]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a04      	ldr	r2, [pc, #16]	@ (8003114 <HAL_RCC_OscConfig+0x76c>)
 8003104:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310a:	f7fe f975 	bl	80013f8 <HAL_GetTick>
 800310e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003110:	e011      	b.n	8003136 <HAL_RCC_OscConfig+0x78e>
 8003112:	bf00      	nop
 8003114:	58024400 	.word	0x58024400
 8003118:	58024800 	.word	0x58024800
 800311c:	fffffc0c 	.word	0xfffffc0c
 8003120:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003124:	f7fe f968 	bl	80013f8 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e08a      	b.n	800324c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003136:	4b47      	ldr	r3, [pc, #284]	@ (8003254 <HAL_RCC_OscConfig+0x8ac>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0x77c>
 8003142:	e082      	b.n	800324a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003144:	4b43      	ldr	r3, [pc, #268]	@ (8003254 <HAL_RCC_OscConfig+0x8ac>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a42      	ldr	r2, [pc, #264]	@ (8003254 <HAL_RCC_OscConfig+0x8ac>)
 800314a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800314e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7fe f952 	bl	80013f8 <HAL_GetTick>
 8003154:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003158:	f7fe f94e 	bl	80013f8 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e070      	b.n	800324c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800316a:	4b3a      	ldr	r3, [pc, #232]	@ (8003254 <HAL_RCC_OscConfig+0x8ac>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0x7b0>
 8003176:	e068      	b.n	800324a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003178:	4b36      	ldr	r3, [pc, #216]	@ (8003254 <HAL_RCC_OscConfig+0x8ac>)
 800317a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800317e:	4b35      	ldr	r3, [pc, #212]	@ (8003254 <HAL_RCC_OscConfig+0x8ac>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003188:	2b01      	cmp	r3, #1
 800318a:	d031      	beq.n	80031f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f003 0203 	and.w	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003196:	429a      	cmp	r2, r3
 8003198:	d12a      	bne.n	80031f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	091b      	lsrs	r3, r3, #4
 800319e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d122      	bne.n	80031f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d11a      	bne.n	80031f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	0a5b      	lsrs	r3, r3, #9
 80031be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d111      	bne.n	80031f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	0c1b      	lsrs	r3, r3, #16
 80031d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d108      	bne.n	80031f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	0e1b      	lsrs	r3, r3, #24
 80031e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e02b      	b.n	800324c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80031f4:	4b17      	ldr	r3, [pc, #92]	@ (8003254 <HAL_RCC_OscConfig+0x8ac>)
 80031f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031f8:	08db      	lsrs	r3, r3, #3
 80031fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	429a      	cmp	r2, r3
 8003208:	d01f      	beq.n	800324a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800320a:	4b12      	ldr	r3, [pc, #72]	@ (8003254 <HAL_RCC_OscConfig+0x8ac>)
 800320c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320e:	4a11      	ldr	r2, [pc, #68]	@ (8003254 <HAL_RCC_OscConfig+0x8ac>)
 8003210:	f023 0301 	bic.w	r3, r3, #1
 8003214:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003216:	f7fe f8ef 	bl	80013f8 <HAL_GetTick>
 800321a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800321c:	bf00      	nop
 800321e:	f7fe f8eb 	bl	80013f8 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003226:	4293      	cmp	r3, r2
 8003228:	d0f9      	beq.n	800321e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800322a:	4b0a      	ldr	r3, [pc, #40]	@ (8003254 <HAL_RCC_OscConfig+0x8ac>)
 800322c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800322e:	4b0a      	ldr	r3, [pc, #40]	@ (8003258 <HAL_RCC_OscConfig+0x8b0>)
 8003230:	4013      	ands	r3, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003236:	00d2      	lsls	r2, r2, #3
 8003238:	4906      	ldr	r1, [pc, #24]	@ (8003254 <HAL_RCC_OscConfig+0x8ac>)
 800323a:	4313      	orrs	r3, r2
 800323c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800323e:	4b05      	ldr	r3, [pc, #20]	@ (8003254 <HAL_RCC_OscConfig+0x8ac>)
 8003240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003242:	4a04      	ldr	r2, [pc, #16]	@ (8003254 <HAL_RCC_OscConfig+0x8ac>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3730      	adds	r7, #48	@ 0x30
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	58024400 	.word	0x58024400
 8003258:	ffff0007 	.word	0xffff0007

0800325c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e19c      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003270:	4b8a      	ldr	r3, [pc, #552]	@ (800349c <HAL_RCC_ClockConfig+0x240>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 030f 	and.w	r3, r3, #15
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d910      	bls.n	80032a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b87      	ldr	r3, [pc, #540]	@ (800349c <HAL_RCC_ClockConfig+0x240>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 020f 	bic.w	r2, r3, #15
 8003286:	4985      	ldr	r1, [pc, #532]	@ (800349c <HAL_RCC_ClockConfig+0x240>)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b83      	ldr	r3, [pc, #524]	@ (800349c <HAL_RCC_ClockConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e184      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d010      	beq.n	80032ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	4b7b      	ldr	r3, [pc, #492]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d908      	bls.n	80032ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032bc:	4b78      	ldr	r3, [pc, #480]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	4975      	ldr	r1, [pc, #468]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d010      	beq.n	80032fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695a      	ldr	r2, [r3, #20]
 80032de:	4b70      	ldr	r3, [pc, #448]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d908      	bls.n	80032fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032ea:	4b6d      	ldr	r3, [pc, #436]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	496a      	ldr	r1, [pc, #424]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	2b00      	cmp	r3, #0
 8003306:	d010      	beq.n	800332a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699a      	ldr	r2, [r3, #24]
 800330c:	4b64      	ldr	r3, [pc, #400]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003314:	429a      	cmp	r2, r3
 8003316:	d908      	bls.n	800332a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003318:	4b61      	ldr	r3, [pc, #388]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	495e      	ldr	r1, [pc, #376]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003326:	4313      	orrs	r3, r2
 8003328:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	d010      	beq.n	8003358 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69da      	ldr	r2, [r3, #28]
 800333a:	4b59      	ldr	r3, [pc, #356]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003342:	429a      	cmp	r2, r3
 8003344:	d908      	bls.n	8003358 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003346:	4b56      	ldr	r3, [pc, #344]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	4953      	ldr	r1, [pc, #332]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003354:	4313      	orrs	r3, r2
 8003356:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d010      	beq.n	8003386 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	4b4d      	ldr	r3, [pc, #308]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	429a      	cmp	r2, r3
 8003372:	d908      	bls.n	8003386 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003374:	4b4a      	ldr	r3, [pc, #296]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f023 020f 	bic.w	r2, r3, #15
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4947      	ldr	r1, [pc, #284]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003382:	4313      	orrs	r3, r2
 8003384:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d055      	beq.n	800343e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003392:	4b43      	ldr	r3, [pc, #268]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	4940      	ldr	r1, [pc, #256]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d107      	bne.n	80033bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033ac:	4b3c      	ldr	r3, [pc, #240]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d121      	bne.n	80033fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0f6      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033c4:	4b36      	ldr	r3, [pc, #216]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d115      	bne.n	80033fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0ea      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d107      	bne.n	80033ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033dc:	4b30      	ldr	r3, [pc, #192]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d109      	bne.n	80033fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0de      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033ec:	4b2c      	ldr	r3, [pc, #176]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0d6      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033fc:	4b28      	ldr	r3, [pc, #160]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f023 0207 	bic.w	r2, r3, #7
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4925      	ldr	r1, [pc, #148]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 800340a:	4313      	orrs	r3, r2
 800340c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800340e:	f7fd fff3 	bl	80013f8 <HAL_GetTick>
 8003412:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003414:	e00a      	b.n	800342c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003416:	f7fd ffef 	bl	80013f8 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003424:	4293      	cmp	r3, r2
 8003426:	d901      	bls.n	800342c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e0be      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342c:	4b1c      	ldr	r3, [pc, #112]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	429a      	cmp	r2, r3
 800343c:	d1eb      	bne.n	8003416 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d010      	beq.n	800346c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	4b14      	ldr	r3, [pc, #80]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	429a      	cmp	r2, r3
 8003458:	d208      	bcs.n	800346c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800345a:	4b11      	ldr	r3, [pc, #68]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f023 020f 	bic.w	r2, r3, #15
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	490e      	ldr	r1, [pc, #56]	@ (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003468:	4313      	orrs	r3, r2
 800346a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800346c:	4b0b      	ldr	r3, [pc, #44]	@ (800349c <HAL_RCC_ClockConfig+0x240>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d214      	bcs.n	80034a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	4b08      	ldr	r3, [pc, #32]	@ (800349c <HAL_RCC_ClockConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 020f 	bic.w	r2, r3, #15
 8003482:	4906      	ldr	r1, [pc, #24]	@ (800349c <HAL_RCC_ClockConfig+0x240>)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348a:	4b04      	ldr	r3, [pc, #16]	@ (800349c <HAL_RCC_ClockConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d005      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e086      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>
 800349c:	52002000 	.word	0x52002000
 80034a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d010      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	4b3f      	ldr	r3, [pc, #252]	@ (80035b4 <HAL_RCC_ClockConfig+0x358>)
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034bc:	429a      	cmp	r2, r3
 80034be:	d208      	bcs.n	80034d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034c0:	4b3c      	ldr	r3, [pc, #240]	@ (80035b4 <HAL_RCC_ClockConfig+0x358>)
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	4939      	ldr	r1, [pc, #228]	@ (80035b4 <HAL_RCC_ClockConfig+0x358>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d010      	beq.n	8003500 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	4b34      	ldr	r3, [pc, #208]	@ (80035b4 <HAL_RCC_ClockConfig+0x358>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d208      	bcs.n	8003500 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034ee:	4b31      	ldr	r3, [pc, #196]	@ (80035b4 <HAL_RCC_ClockConfig+0x358>)
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	492e      	ldr	r1, [pc, #184]	@ (80035b4 <HAL_RCC_ClockConfig+0x358>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	d010      	beq.n	800352e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699a      	ldr	r2, [r3, #24]
 8003510:	4b28      	ldr	r3, [pc, #160]	@ (80035b4 <HAL_RCC_ClockConfig+0x358>)
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003518:	429a      	cmp	r2, r3
 800351a:	d208      	bcs.n	800352e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800351c:	4b25      	ldr	r3, [pc, #148]	@ (80035b4 <HAL_RCC_ClockConfig+0x358>)
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	4922      	ldr	r1, [pc, #136]	@ (80035b4 <HAL_RCC_ClockConfig+0x358>)
 800352a:	4313      	orrs	r3, r2
 800352c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b00      	cmp	r3, #0
 8003538:	d010      	beq.n	800355c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	4b1d      	ldr	r3, [pc, #116]	@ (80035b4 <HAL_RCC_ClockConfig+0x358>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003546:	429a      	cmp	r2, r3
 8003548:	d208      	bcs.n	800355c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800354a:	4b1a      	ldr	r3, [pc, #104]	@ (80035b4 <HAL_RCC_ClockConfig+0x358>)
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	4917      	ldr	r1, [pc, #92]	@ (80035b4 <HAL_RCC_ClockConfig+0x358>)
 8003558:	4313      	orrs	r3, r2
 800355a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800355c:	f000 f834 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 8003560:	4602      	mov	r2, r0
 8003562:	4b14      	ldr	r3, [pc, #80]	@ (80035b4 <HAL_RCC_ClockConfig+0x358>)
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	0a1b      	lsrs	r3, r3, #8
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	4912      	ldr	r1, [pc, #72]	@ (80035b8 <HAL_RCC_ClockConfig+0x35c>)
 800356e:	5ccb      	ldrb	r3, [r1, r3]
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
 8003578:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800357a:	4b0e      	ldr	r3, [pc, #56]	@ (80035b4 <HAL_RCC_ClockConfig+0x358>)
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	4a0d      	ldr	r2, [pc, #52]	@ (80035b8 <HAL_RCC_ClockConfig+0x35c>)
 8003584:	5cd3      	ldrb	r3, [r2, r3]
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	fa22 f303 	lsr.w	r3, r2, r3
 8003590:	4a0a      	ldr	r2, [pc, #40]	@ (80035bc <HAL_RCC_ClockConfig+0x360>)
 8003592:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003594:	4a0a      	ldr	r2, [pc, #40]	@ (80035c0 <HAL_RCC_ClockConfig+0x364>)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800359a:	4b0a      	ldr	r3, [pc, #40]	@ (80035c4 <HAL_RCC_ClockConfig+0x368>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fd fee0 	bl	8001364 <HAL_InitTick>
 80035a4:	4603      	mov	r3, r0
 80035a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	58024400 	.word	0x58024400
 80035b8:	08007b5c 	.word	0x08007b5c
 80035bc:	24000004 	.word	0x24000004
 80035c0:	24000000 	.word	0x24000000
 80035c4:	24000008 	.word	0x24000008

080035c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b089      	sub	sp, #36	@ 0x24
 80035cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ce:	4bb3      	ldr	r3, [pc, #716]	@ (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035d6:	2b18      	cmp	r3, #24
 80035d8:	f200 8155 	bhi.w	8003886 <HAL_RCC_GetSysClockFreq+0x2be>
 80035dc:	a201      	add	r2, pc, #4	@ (adr r2, 80035e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80035de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e2:	bf00      	nop
 80035e4:	08003649 	.word	0x08003649
 80035e8:	08003887 	.word	0x08003887
 80035ec:	08003887 	.word	0x08003887
 80035f0:	08003887 	.word	0x08003887
 80035f4:	08003887 	.word	0x08003887
 80035f8:	08003887 	.word	0x08003887
 80035fc:	08003887 	.word	0x08003887
 8003600:	08003887 	.word	0x08003887
 8003604:	0800366f 	.word	0x0800366f
 8003608:	08003887 	.word	0x08003887
 800360c:	08003887 	.word	0x08003887
 8003610:	08003887 	.word	0x08003887
 8003614:	08003887 	.word	0x08003887
 8003618:	08003887 	.word	0x08003887
 800361c:	08003887 	.word	0x08003887
 8003620:	08003887 	.word	0x08003887
 8003624:	08003675 	.word	0x08003675
 8003628:	08003887 	.word	0x08003887
 800362c:	08003887 	.word	0x08003887
 8003630:	08003887 	.word	0x08003887
 8003634:	08003887 	.word	0x08003887
 8003638:	08003887 	.word	0x08003887
 800363c:	08003887 	.word	0x08003887
 8003640:	08003887 	.word	0x08003887
 8003644:	0800367b 	.word	0x0800367b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003648:	4b94      	ldr	r3, [pc, #592]	@ (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d009      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003654:	4b91      	ldr	r3, [pc, #580]	@ (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	08db      	lsrs	r3, r3, #3
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	4a90      	ldr	r2, [pc, #576]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003660:	fa22 f303 	lsr.w	r3, r2, r3
 8003664:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003666:	e111      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003668:	4b8d      	ldr	r3, [pc, #564]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800366a:	61bb      	str	r3, [r7, #24]
      break;
 800366c:	e10e      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800366e:	4b8d      	ldr	r3, [pc, #564]	@ (80038a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003670:	61bb      	str	r3, [r7, #24]
      break;
 8003672:	e10b      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003674:	4b8c      	ldr	r3, [pc, #560]	@ (80038a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003676:	61bb      	str	r3, [r7, #24]
      break;
 8003678:	e108      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800367a:	4b88      	ldr	r3, [pc, #544]	@ (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800367c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003684:	4b85      	ldr	r3, [pc, #532]	@ (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003688:	091b      	lsrs	r3, r3, #4
 800368a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800368e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003690:	4b82      	ldr	r3, [pc, #520]	@ (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800369a:	4b80      	ldr	r3, [pc, #512]	@ (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800369c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800369e:	08db      	lsrs	r3, r3, #3
 80036a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 80e1 	beq.w	8003880 <HAL_RCC_GetSysClockFreq+0x2b8>
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	f000 8083 	beq.w	80037cc <HAL_RCC_GetSysClockFreq+0x204>
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	f200 80a1 	bhi.w	8003810 <HAL_RCC_GetSysClockFreq+0x248>
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x114>
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d056      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0x1c0>
 80036da:	e099      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036dc:	4b6f      	ldr	r3, [pc, #444]	@ (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d02d      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036e8:	4b6c      	ldr	r3, [pc, #432]	@ (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	08db      	lsrs	r3, r3, #3
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	4a6b      	ldr	r2, [pc, #428]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
 80036f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	ee07 3a90 	vmov	s15, r3
 8003700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	ee07 3a90 	vmov	s15, r3
 800370a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003712:	4b62      	ldr	r3, [pc, #392]	@ (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003722:	ed97 6a02 	vldr	s12, [r7, #8]
 8003726:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80038ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800372a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800372e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003732:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800373a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003742:	e087      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	ee07 3a90 	vmov	s15, r3
 800374a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80038b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003756:	4b51      	ldr	r3, [pc, #324]	@ (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800375e:	ee07 3a90 	vmov	s15, r3
 8003762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003766:	ed97 6a02 	vldr	s12, [r7, #8]
 800376a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80038ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800376e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003776:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800377a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800377e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003782:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003786:	e065      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	ee07 3a90 	vmov	s15, r3
 800378e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003792:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80038b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800379a:	4b40      	ldr	r3, [pc, #256]	@ (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037a2:	ee07 3a90 	vmov	s15, r3
 80037a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80037ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80038ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80037b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037ca:	e043      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80038b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80037da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037de:	4b2f      	ldr	r3, [pc, #188]	@ (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80037f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80038ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80037f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800380e:	e021      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	ee07 3a90 	vmov	s15, r3
 8003816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800381a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80038b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800381e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003822:	4b1e      	ldr	r3, [pc, #120]	@ (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800382a:	ee07 3a90 	vmov	s15, r3
 800382e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003832:	ed97 6a02 	vldr	s12, [r7, #8]
 8003836:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80038ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800383a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800383e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003842:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800384a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003852:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003854:	4b11      	ldr	r3, [pc, #68]	@ (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003858:	0a5b      	lsrs	r3, r3, #9
 800385a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800385e:	3301      	adds	r3, #1
 8003860:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	ee07 3a90 	vmov	s15, r3
 8003868:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800386c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003878:	ee17 3a90 	vmov	r3, s15
 800387c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800387e:	e005      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]
      break;
 8003884:	e002      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003886:	4b07      	ldr	r3, [pc, #28]	@ (80038a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003888:	61bb      	str	r3, [r7, #24]
      break;
 800388a:	bf00      	nop
  }

  return sysclockfreq;
 800388c:	69bb      	ldr	r3, [r7, #24]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3724      	adds	r7, #36	@ 0x24
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	58024400 	.word	0x58024400
 80038a0:	03d09000 	.word	0x03d09000
 80038a4:	003d0900 	.word	0x003d0900
 80038a8:	007a1200 	.word	0x007a1200
 80038ac:	46000000 	.word	0x46000000
 80038b0:	4c742400 	.word	0x4c742400
 80038b4:	4a742400 	.word	0x4a742400
 80038b8:	4af42400 	.word	0x4af42400

080038bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80038c2:	f7ff fe81 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 80038c6:	4602      	mov	r2, r0
 80038c8:	4b10      	ldr	r3, [pc, #64]	@ (800390c <HAL_RCC_GetHCLKFreq+0x50>)
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	490f      	ldr	r1, [pc, #60]	@ (8003910 <HAL_RCC_GetHCLKFreq+0x54>)
 80038d4:	5ccb      	ldrb	r3, [r1, r3]
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	fa22 f303 	lsr.w	r3, r2, r3
 80038de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038e0:	4b0a      	ldr	r3, [pc, #40]	@ (800390c <HAL_RCC_GetHCLKFreq+0x50>)
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	4a09      	ldr	r2, [pc, #36]	@ (8003910 <HAL_RCC_GetHCLKFreq+0x54>)
 80038ea:	5cd3      	ldrb	r3, [r2, r3]
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	fa22 f303 	lsr.w	r3, r2, r3
 80038f6:	4a07      	ldr	r2, [pc, #28]	@ (8003914 <HAL_RCC_GetHCLKFreq+0x58>)
 80038f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038fa:	4a07      	ldr	r2, [pc, #28]	@ (8003918 <HAL_RCC_GetHCLKFreq+0x5c>)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003900:	4b04      	ldr	r3, [pc, #16]	@ (8003914 <HAL_RCC_GetHCLKFreq+0x58>)
 8003902:	681b      	ldr	r3, [r3, #0]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	58024400 	.word	0x58024400
 8003910:	08007b5c 	.word	0x08007b5c
 8003914:	24000004 	.word	0x24000004
 8003918:	24000000 	.word	0x24000000

0800391c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003920:	f7ff ffcc 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 8003924:	4602      	mov	r2, r0
 8003926:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	091b      	lsrs	r3, r3, #4
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4904      	ldr	r1, [pc, #16]	@ (8003944 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003932:	5ccb      	ldrb	r3, [r1, r3]
 8003934:	f003 031f 	and.w	r3, r3, #31
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	58024400 	.word	0x58024400
 8003944:	08007b5c 	.word	0x08007b5c

08003948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800394c:	f7ff ffb6 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 8003950:	4602      	mov	r2, r0
 8003952:	4b06      	ldr	r3, [pc, #24]	@ (800396c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	0a1b      	lsrs	r3, r3, #8
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	4904      	ldr	r1, [pc, #16]	@ (8003970 <HAL_RCC_GetPCLK2Freq+0x28>)
 800395e:	5ccb      	ldrb	r3, [r1, r3]
 8003960:	f003 031f 	and.w	r3, r3, #31
 8003964:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003968:	4618      	mov	r0, r3
 800396a:	bd80      	pop	{r7, pc}
 800396c:	58024400 	.word	0x58024400
 8003970:	08007b5c 	.word	0x08007b5c

08003974 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003978:	b0ca      	sub	sp, #296	@ 0x128
 800397a:	af00      	add	r7, sp, #0
 800397c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003980:	2300      	movs	r3, #0
 8003982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003986:	2300      	movs	r3, #0
 8003988:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800398c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003994:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003998:	2500      	movs	r5, #0
 800399a:	ea54 0305 	orrs.w	r3, r4, r5
 800399e:	d049      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80039a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80039aa:	d02f      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80039ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80039b0:	d828      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80039b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039b6:	d01a      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80039b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039bc:	d822      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80039c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039c6:	d007      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039c8:	e01c      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ca:	4bb8      	ldr	r3, [pc, #736]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ce:	4ab7      	ldr	r2, [pc, #732]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039d6:	e01a      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039dc:	3308      	adds	r3, #8
 80039de:	2102      	movs	r1, #2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f002 fb61 	bl	80060a8 <RCCEx_PLL2_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039ec:	e00f      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f2:	3328      	adds	r3, #40	@ 0x28
 80039f4:	2102      	movs	r1, #2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f002 fc08 	bl	800620c <RCCEx_PLL3_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a02:	e004      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a0a:	e000      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10a      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a16:	4ba5      	ldr	r3, [pc, #660]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a1a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a24:	4aa1      	ldr	r2, [pc, #644]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a26:	430b      	orrs	r3, r1
 8003a28:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a2a:	e003      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003a40:	f04f 0900 	mov.w	r9, #0
 8003a44:	ea58 0309 	orrs.w	r3, r8, r9
 8003a48:	d047      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d82a      	bhi.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003a54:	a201      	add	r2, pc, #4	@ (adr r2, 8003a5c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003a71 	.word	0x08003a71
 8003a60:	08003a7f 	.word	0x08003a7f
 8003a64:	08003a95 	.word	0x08003a95
 8003a68:	08003ab3 	.word	0x08003ab3
 8003a6c:	08003ab3 	.word	0x08003ab3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a70:	4b8e      	ldr	r3, [pc, #568]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a74:	4a8d      	ldr	r2, [pc, #564]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a7c:	e01a      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a82:	3308      	adds	r3, #8
 8003a84:	2100      	movs	r1, #0
 8003a86:	4618      	mov	r0, r3
 8003a88:	f002 fb0e 	bl	80060a8 <RCCEx_PLL2_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a92:	e00f      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a98:	3328      	adds	r3, #40	@ 0x28
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f002 fbb5 	bl	800620c <RCCEx_PLL3_Config>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003aa8:	e004      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ab0:	e000      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003ab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10a      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003abc:	4b7b      	ldr	r3, [pc, #492]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac0:	f023 0107 	bic.w	r1, r3, #7
 8003ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aca:	4a78      	ldr	r2, [pc, #480]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003acc:	430b      	orrs	r3, r1
 8003ace:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ad0:	e003      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ad6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003ae6:	f04f 0b00 	mov.w	fp, #0
 8003aea:	ea5a 030b 	orrs.w	r3, sl, fp
 8003aee:	d04c      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003afa:	d030      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003afc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b00:	d829      	bhi.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b02:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b04:	d02d      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b06:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b08:	d825      	bhi.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b0a:	2b80      	cmp	r3, #128	@ 0x80
 8003b0c:	d018      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003b0e:	2b80      	cmp	r3, #128	@ 0x80
 8003b10:	d821      	bhi.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003b16:	2b40      	cmp	r3, #64	@ 0x40
 8003b18:	d007      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003b1a:	e01c      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b1c:	4b63      	ldr	r3, [pc, #396]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b20:	4a62      	ldr	r2, [pc, #392]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b28:	e01c      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2e:	3308      	adds	r3, #8
 8003b30:	2100      	movs	r1, #0
 8003b32:	4618      	mov	r0, r3
 8003b34:	f002 fab8 	bl	80060a8 <RCCEx_PLL2_Config>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b3e:	e011      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b44:	3328      	adds	r3, #40	@ 0x28
 8003b46:	2100      	movs	r1, #0
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f002 fb5f 	bl	800620c <RCCEx_PLL3_Config>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b54:	e006      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b5c:	e002      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b5e:	bf00      	nop
 8003b60:	e000      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10a      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003b6c:	4b4f      	ldr	r3, [pc, #316]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b70:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7a:	4a4c      	ldr	r2, [pc, #304]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b80:	e003      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003b96:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003ba0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	d053      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003bb2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bb6:	d035      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003bb8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bbc:	d82e      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003bbe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003bc2:	d031      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003bc4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003bc8:	d828      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003bca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bce:	d01a      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003bd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bd4:	d822      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003bda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bde:	d007      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003be0:	e01c      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be2:	4b32      	ldr	r3, [pc, #200]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be6:	4a31      	ldr	r2, [pc, #196]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bee:	e01c      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf4:	3308      	adds	r3, #8
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f002 fa55 	bl	80060a8 <RCCEx_PLL2_Config>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c04:	e011      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0a:	3328      	adds	r3, #40	@ 0x28
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f002 fafc 	bl	800620c <RCCEx_PLL3_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c1a:	e006      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c22:	e002      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c24:	bf00      	nop
 8003c26:	e000      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10b      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c32:	4b1e      	ldr	r3, [pc, #120]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c36:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c42:	4a1a      	ldr	r2, [pc, #104]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c44:	430b      	orrs	r3, r1
 8003c46:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c48:	e003      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003c5e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003c62:	2300      	movs	r3, #0
 8003c64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003c68:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	d056      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c7e:	d038      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003c80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c84:	d831      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c8a:	d034      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003c8c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c90:	d82b      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c96:	d01d      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003c98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c9c:	d825      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d006      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003ca2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ca6:	d00a      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ca8:	e01f      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003caa:	bf00      	nop
 8003cac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb0:	4ba2      	ldr	r3, [pc, #648]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb4:	4aa1      	ldr	r2, [pc, #644]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cbc:	e01c      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f002 f9ee 	bl	80060a8 <RCCEx_PLL2_Config>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003cd2:	e011      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd8:	3328      	adds	r3, #40	@ 0x28
 8003cda:	2100      	movs	r1, #0
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f002 fa95 	bl	800620c <RCCEx_PLL3_Config>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ce8:	e006      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cf0:	e002      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003cf2:	bf00      	nop
 8003cf4:	e000      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10b      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003d00:	4b8e      	ldr	r3, [pc, #568]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d04:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003d10:	4a8a      	ldr	r2, [pc, #552]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d12:	430b      	orrs	r3, r1
 8003d14:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d16:	e003      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d28:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003d2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003d30:	2300      	movs	r3, #0
 8003d32:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d36:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	d03a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d46:	2b30      	cmp	r3, #48	@ 0x30
 8003d48:	d01f      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003d4a:	2b30      	cmp	r3, #48	@ 0x30
 8003d4c:	d819      	bhi.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d4e:	2b20      	cmp	r3, #32
 8003d50:	d00c      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d815      	bhi.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d019      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003d5a:	2b10      	cmp	r3, #16
 8003d5c:	d111      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d5e:	4b77      	ldr	r3, [pc, #476]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d62:	4a76      	ldr	r2, [pc, #472]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d6a:	e011      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d70:	3308      	adds	r3, #8
 8003d72:	2102      	movs	r1, #2
 8003d74:	4618      	mov	r0, r3
 8003d76:	f002 f997 	bl	80060a8 <RCCEx_PLL2_Config>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d80:	e006      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d88:	e002      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d8a:	bf00      	nop
 8003d8c:	e000      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10a      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d98:	4b68      	ldr	r3, [pc, #416]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d9c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da6:	4a65      	ldr	r2, [pc, #404]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003da8:	430b      	orrs	r3, r1
 8003daa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dac:	e003      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003dc2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003dcc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	d051      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ddc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003de0:	d035      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003de2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003de6:	d82e      	bhi.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003de8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003dec:	d031      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003dee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003df2:	d828      	bhi.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003df4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003df8:	d01a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003dfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dfe:	d822      	bhi.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e08:	d007      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003e0a:	e01c      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e0c:	4b4b      	ldr	r3, [pc, #300]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e10:	4a4a      	ldr	r2, [pc, #296]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e18:	e01c      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1e:	3308      	adds	r3, #8
 8003e20:	2100      	movs	r1, #0
 8003e22:	4618      	mov	r0, r3
 8003e24:	f002 f940 	bl	80060a8 <RCCEx_PLL2_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e2e:	e011      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e34:	3328      	adds	r3, #40	@ 0x28
 8003e36:	2100      	movs	r1, #0
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f002 f9e7 	bl	800620c <RCCEx_PLL3_Config>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e44:	e006      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e4c:	e002      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e4e:	bf00      	nop
 8003e50:	e000      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10a      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e5c:	4b37      	ldr	r3, [pc, #220]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e60:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e6a:	4a34      	ldr	r2, [pc, #208]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e70:	e003      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e82:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003e86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003e90:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003e94:	460b      	mov	r3, r1
 8003e96:	4313      	orrs	r3, r2
 8003e98:	d056      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ea0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ea4:	d033      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003ea6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003eaa:	d82c      	bhi.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003eac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003eb0:	d02f      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003eb2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003eb6:	d826      	bhi.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003eb8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ebc:	d02b      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003ebe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ec2:	d820      	bhi.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ec4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ec8:	d012      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003eca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ece:	d81a      	bhi.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d022      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed8:	d115      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ede:	3308      	adds	r3, #8
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f002 f8e0 	bl	80060a8 <RCCEx_PLL2_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003eee:	e015      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef4:	3328      	adds	r3, #40	@ 0x28
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f002 f987 	bl	800620c <RCCEx_PLL3_Config>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f04:	e00a      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f0c:	e006      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f0e:	bf00      	nop
 8003f10:	e004      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f12:	bf00      	nop
 8003f14:	e002      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f16:	bf00      	nop
 8003f18:	e000      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10d      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f24:	4b05      	ldr	r3, [pc, #20]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f28:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f32:	4a02      	ldr	r2, [pc, #8]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f34:	430b      	orrs	r3, r1
 8003f36:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f38:	e006      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f3a:	bf00      	nop
 8003f3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f50:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003f54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f5e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4313      	orrs	r3, r2
 8003f66:	d055      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f74:	d033      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f7a:	d82c      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f80:	d02f      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f86:	d826      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f8c:	d02b      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003f8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f92:	d820      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f98:	d012      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003f9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f9e:	d81a      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d022      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003fa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fa8:	d115      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fae:	3308      	adds	r3, #8
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f002 f878 	bl	80060a8 <RCCEx_PLL2_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003fbe:	e015      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc4:	3328      	adds	r3, #40	@ 0x28
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f002 f91f 	bl	800620c <RCCEx_PLL3_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003fd4:	e00a      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fdc:	e006      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fde:	bf00      	nop
 8003fe0:	e004      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fe2:	bf00      	nop
 8003fe4:	e002      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10b      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ff4:	4ba3      	ldr	r3, [pc, #652]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004000:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004004:	4a9f      	ldr	r2, [pc, #636]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004006:	430b      	orrs	r3, r1
 8004008:	6593      	str	r3, [r2, #88]	@ 0x58
 800400a:	e003      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004010:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004020:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004024:	2300      	movs	r3, #0
 8004026:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800402a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800402e:	460b      	mov	r3, r1
 8004030:	4313      	orrs	r3, r2
 8004032:	d037      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800403e:	d00e      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004040:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004044:	d816      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d018      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800404a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800404e:	d111      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004050:	4b8c      	ldr	r3, [pc, #560]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004054:	4a8b      	ldr	r2, [pc, #556]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800405a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800405c:	e00f      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800405e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004062:	3308      	adds	r3, #8
 8004064:	2101      	movs	r1, #1
 8004066:	4618      	mov	r0, r3
 8004068:	f002 f81e 	bl	80060a8 <RCCEx_PLL2_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004072:	e004      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800407a:	e000      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800407c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800407e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10a      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004086:	4b7f      	ldr	r3, [pc, #508]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800408a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800408e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004094:	4a7b      	ldr	r2, [pc, #492]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004096:	430b      	orrs	r3, r1
 8004098:	6513      	str	r3, [r2, #80]	@ 0x50
 800409a:	e003      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80040a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80040b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040b4:	2300      	movs	r3, #0
 80040b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80040ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80040be:	460b      	mov	r3, r1
 80040c0:	4313      	orrs	r3, r2
 80040c2:	d039      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80040c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d81c      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80040ce:	a201      	add	r2, pc, #4	@ (adr r2, 80040d4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80040d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d4:	08004111 	.word	0x08004111
 80040d8:	080040e5 	.word	0x080040e5
 80040dc:	080040f3 	.word	0x080040f3
 80040e0:	08004111 	.word	0x08004111
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e4:	4b67      	ldr	r3, [pc, #412]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e8:	4a66      	ldr	r2, [pc, #408]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040f0:	e00f      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f6:	3308      	adds	r3, #8
 80040f8:	2102      	movs	r1, #2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f001 ffd4 	bl	80060a8 <RCCEx_PLL2_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004106:	e004      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800410e:	e000      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10a      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800411a:	4b5a      	ldr	r3, [pc, #360]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800411c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411e:	f023 0103 	bic.w	r1, r3, #3
 8004122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004128:	4a56      	ldr	r2, [pc, #344]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800412a:	430b      	orrs	r3, r1
 800412c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800412e:	e003      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004134:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004140:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004144:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004148:	2300      	movs	r3, #0
 800414a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800414e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004152:	460b      	mov	r3, r1
 8004154:	4313      	orrs	r3, r2
 8004156:	f000 809f 	beq.w	8004298 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800415a:	4b4b      	ldr	r3, [pc, #300]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a4a      	ldr	r2, [pc, #296]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004164:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004166:	f7fd f947 	bl	80013f8 <HAL_GetTick>
 800416a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800416e:	e00b      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004170:	f7fd f942 	bl	80013f8 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b64      	cmp	r3, #100	@ 0x64
 800417e:	d903      	bls.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004186:	e005      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004188:	4b3f      	ldr	r3, [pc, #252]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0ed      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004194:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004198:	2b00      	cmp	r3, #0
 800419a:	d179      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800419c:	4b39      	ldr	r3, [pc, #228]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800419e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80041a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041a8:	4053      	eors	r3, r2
 80041aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d015      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041b2:	4b34      	ldr	r3, [pc, #208]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041be:	4b31      	ldr	r3, [pc, #196]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c2:	4a30      	ldr	r2, [pc, #192]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041ca:	4b2e      	ldr	r3, [pc, #184]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ce:	4a2d      	ldr	r2, [pc, #180]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041d4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80041d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041dc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80041de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ea:	d118      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ec:	f7fd f904 	bl	80013f8 <HAL_GetTick>
 80041f0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041f4:	e00d      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f6:	f7fd f8ff 	bl	80013f8 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004200:	1ad2      	subs	r2, r2, r3
 8004202:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004206:	429a      	cmp	r2, r3
 8004208:	d903      	bls.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004210:	e005      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004212:	4b1c      	ldr	r3, [pc, #112]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0eb      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800421e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004222:	2b00      	cmp	r3, #0
 8004224:	d129      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800422e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004232:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004236:	d10e      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004238:	4b12      	ldr	r3, [pc, #72]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004244:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004248:	091a      	lsrs	r2, r3, #4
 800424a:	4b10      	ldr	r3, [pc, #64]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800424c:	4013      	ands	r3, r2
 800424e:	4a0d      	ldr	r2, [pc, #52]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004250:	430b      	orrs	r3, r1
 8004252:	6113      	str	r3, [r2, #16]
 8004254:	e005      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004256:	4b0b      	ldr	r3, [pc, #44]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	4a0a      	ldr	r2, [pc, #40]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800425c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004260:	6113      	str	r3, [r2, #16]
 8004262:	4b08      	ldr	r3, [pc, #32]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004264:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800426e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004272:	4a04      	ldr	r2, [pc, #16]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004274:	430b      	orrs	r3, r1
 8004276:	6713      	str	r3, [r2, #112]	@ 0x70
 8004278:	e00e      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800427a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800427e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004282:	e009      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004284:	58024400 	.word	0x58024400
 8004288:	58024800 	.word	0x58024800
 800428c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004290:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004294:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a0:	f002 0301 	and.w	r3, r2, #1
 80042a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042a8:	2300      	movs	r3, #0
 80042aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f000 8089 	beq.w	80043cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80042ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042c0:	2b28      	cmp	r3, #40	@ 0x28
 80042c2:	d86b      	bhi.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80042c4:	a201      	add	r2, pc, #4	@ (adr r2, 80042cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80042c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ca:	bf00      	nop
 80042cc:	080043a5 	.word	0x080043a5
 80042d0:	0800439d 	.word	0x0800439d
 80042d4:	0800439d 	.word	0x0800439d
 80042d8:	0800439d 	.word	0x0800439d
 80042dc:	0800439d 	.word	0x0800439d
 80042e0:	0800439d 	.word	0x0800439d
 80042e4:	0800439d 	.word	0x0800439d
 80042e8:	0800439d 	.word	0x0800439d
 80042ec:	08004371 	.word	0x08004371
 80042f0:	0800439d 	.word	0x0800439d
 80042f4:	0800439d 	.word	0x0800439d
 80042f8:	0800439d 	.word	0x0800439d
 80042fc:	0800439d 	.word	0x0800439d
 8004300:	0800439d 	.word	0x0800439d
 8004304:	0800439d 	.word	0x0800439d
 8004308:	0800439d 	.word	0x0800439d
 800430c:	08004387 	.word	0x08004387
 8004310:	0800439d 	.word	0x0800439d
 8004314:	0800439d 	.word	0x0800439d
 8004318:	0800439d 	.word	0x0800439d
 800431c:	0800439d 	.word	0x0800439d
 8004320:	0800439d 	.word	0x0800439d
 8004324:	0800439d 	.word	0x0800439d
 8004328:	0800439d 	.word	0x0800439d
 800432c:	080043a5 	.word	0x080043a5
 8004330:	0800439d 	.word	0x0800439d
 8004334:	0800439d 	.word	0x0800439d
 8004338:	0800439d 	.word	0x0800439d
 800433c:	0800439d 	.word	0x0800439d
 8004340:	0800439d 	.word	0x0800439d
 8004344:	0800439d 	.word	0x0800439d
 8004348:	0800439d 	.word	0x0800439d
 800434c:	080043a5 	.word	0x080043a5
 8004350:	0800439d 	.word	0x0800439d
 8004354:	0800439d 	.word	0x0800439d
 8004358:	0800439d 	.word	0x0800439d
 800435c:	0800439d 	.word	0x0800439d
 8004360:	0800439d 	.word	0x0800439d
 8004364:	0800439d 	.word	0x0800439d
 8004368:	0800439d 	.word	0x0800439d
 800436c:	080043a5 	.word	0x080043a5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004374:	3308      	adds	r3, #8
 8004376:	2101      	movs	r1, #1
 8004378:	4618      	mov	r0, r3
 800437a:	f001 fe95 	bl	80060a8 <RCCEx_PLL2_Config>
 800437e:	4603      	mov	r3, r0
 8004380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004384:	e00f      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438a:	3328      	adds	r3, #40	@ 0x28
 800438c:	2101      	movs	r1, #1
 800438e:	4618      	mov	r0, r3
 8004390:	f001 ff3c 	bl	800620c <RCCEx_PLL3_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800439a:	e004      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043a2:	e000      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80043a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10a      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80043ae:	4bbf      	ldr	r3, [pc, #764]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80043b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043bc:	4abb      	ldr	r2, [pc, #748]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043be:	430b      	orrs	r3, r1
 80043c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80043c2:	e003      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80043cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d4:	f002 0302 	and.w	r3, r2, #2
 80043d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043dc:	2300      	movs	r3, #0
 80043de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80043e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80043e6:	460b      	mov	r3, r1
 80043e8:	4313      	orrs	r3, r2
 80043ea:	d041      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80043ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043f2:	2b05      	cmp	r3, #5
 80043f4:	d824      	bhi.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80043f6:	a201      	add	r2, pc, #4	@ (adr r2, 80043fc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	08004449 	.word	0x08004449
 8004400:	08004415 	.word	0x08004415
 8004404:	0800442b 	.word	0x0800442b
 8004408:	08004449 	.word	0x08004449
 800440c:	08004449 	.word	0x08004449
 8004410:	08004449 	.word	0x08004449
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004418:	3308      	adds	r3, #8
 800441a:	2101      	movs	r1, #1
 800441c:	4618      	mov	r0, r3
 800441e:	f001 fe43 	bl	80060a8 <RCCEx_PLL2_Config>
 8004422:	4603      	mov	r3, r0
 8004424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004428:	e00f      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800442a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442e:	3328      	adds	r3, #40	@ 0x28
 8004430:	2101      	movs	r1, #1
 8004432:	4618      	mov	r0, r3
 8004434:	f001 feea 	bl	800620c <RCCEx_PLL3_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800443e:	e004      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004446:	e000      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800444a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004452:	4b96      	ldr	r3, [pc, #600]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004456:	f023 0107 	bic.w	r1, r3, #7
 800445a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004460:	4a92      	ldr	r2, [pc, #584]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004462:	430b      	orrs	r3, r1
 8004464:	6553      	str	r3, [r2, #84]	@ 0x54
 8004466:	e003      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800446c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004478:	f002 0304 	and.w	r3, r2, #4
 800447c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004480:	2300      	movs	r3, #0
 8004482:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004486:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800448a:	460b      	mov	r3, r1
 800448c:	4313      	orrs	r3, r2
 800448e:	d044      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004494:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004498:	2b05      	cmp	r3, #5
 800449a:	d825      	bhi.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800449c:	a201      	add	r2, pc, #4	@ (adr r2, 80044a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800449e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a2:	bf00      	nop
 80044a4:	080044f1 	.word	0x080044f1
 80044a8:	080044bd 	.word	0x080044bd
 80044ac:	080044d3 	.word	0x080044d3
 80044b0:	080044f1 	.word	0x080044f1
 80044b4:	080044f1 	.word	0x080044f1
 80044b8:	080044f1 	.word	0x080044f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c0:	3308      	adds	r3, #8
 80044c2:	2101      	movs	r1, #1
 80044c4:	4618      	mov	r0, r3
 80044c6:	f001 fdef 	bl	80060a8 <RCCEx_PLL2_Config>
 80044ca:	4603      	mov	r3, r0
 80044cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044d0:	e00f      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d6:	3328      	adds	r3, #40	@ 0x28
 80044d8:	2101      	movs	r1, #1
 80044da:	4618      	mov	r0, r3
 80044dc:	f001 fe96 	bl	800620c <RCCEx_PLL3_Config>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044e6:	e004      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044ee:	e000      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80044f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10b      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044fa:	4b6c      	ldr	r3, [pc, #432]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044fe:	f023 0107 	bic.w	r1, r3, #7
 8004502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800450a:	4a68      	ldr	r2, [pc, #416]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800450c:	430b      	orrs	r3, r1
 800450e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004510:	e003      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004516:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800451a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004522:	f002 0320 	and.w	r3, r2, #32
 8004526:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800452a:	2300      	movs	r3, #0
 800452c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004530:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004534:	460b      	mov	r3, r1
 8004536:	4313      	orrs	r3, r2
 8004538:	d055      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800453a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004542:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004546:	d033      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004548:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800454c:	d82c      	bhi.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800454e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004552:	d02f      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004558:	d826      	bhi.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800455a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800455e:	d02b      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004560:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004564:	d820      	bhi.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004566:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800456a:	d012      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800456c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004570:	d81a      	bhi.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004572:	2b00      	cmp	r3, #0
 8004574:	d022      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004576:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800457a:	d115      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800457c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004580:	3308      	adds	r3, #8
 8004582:	2100      	movs	r1, #0
 8004584:	4618      	mov	r0, r3
 8004586:	f001 fd8f 	bl	80060a8 <RCCEx_PLL2_Config>
 800458a:	4603      	mov	r3, r0
 800458c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004590:	e015      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004596:	3328      	adds	r3, #40	@ 0x28
 8004598:	2102      	movs	r1, #2
 800459a:	4618      	mov	r0, r3
 800459c:	f001 fe36 	bl	800620c <RCCEx_PLL3_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80045a6:	e00a      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045ae:	e006      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045b0:	bf00      	nop
 80045b2:	e004      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045b4:	bf00      	nop
 80045b6:	e002      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045b8:	bf00      	nop
 80045ba:	e000      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10b      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045c6:	4b39      	ldr	r3, [pc, #228]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80045ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d6:	4a35      	ldr	r2, [pc, #212]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045d8:	430b      	orrs	r3, r1
 80045da:	6553      	str	r3, [r2, #84]	@ 0x54
 80045dc:	e003      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80045f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045f6:	2300      	movs	r3, #0
 80045f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80045fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004600:	460b      	mov	r3, r1
 8004602:	4313      	orrs	r3, r2
 8004604:	d058      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800460e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004612:	d033      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004614:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004618:	d82c      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800461a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800461e:	d02f      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004620:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004624:	d826      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004626:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800462a:	d02b      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800462c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004630:	d820      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004632:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004636:	d012      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004638:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800463c:	d81a      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800463e:	2b00      	cmp	r3, #0
 8004640:	d022      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004646:	d115      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464c:	3308      	adds	r3, #8
 800464e:	2100      	movs	r1, #0
 8004650:	4618      	mov	r0, r3
 8004652:	f001 fd29 	bl	80060a8 <RCCEx_PLL2_Config>
 8004656:	4603      	mov	r3, r0
 8004658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800465c:	e015      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004662:	3328      	adds	r3, #40	@ 0x28
 8004664:	2102      	movs	r1, #2
 8004666:	4618      	mov	r0, r3
 8004668:	f001 fdd0 	bl	800620c <RCCEx_PLL3_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004672:	e00a      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800467a:	e006      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800467c:	bf00      	nop
 800467e:	e004      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004680:	bf00      	nop
 8004682:	e002      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004684:	bf00      	nop
 8004686:	e000      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800468a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10e      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004692:	4b06      	ldr	r3, [pc, #24]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004696:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046a2:	4a02      	ldr	r2, [pc, #8]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80046a8:	e006      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80046aa:	bf00      	nop
 80046ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80046c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046c8:	2300      	movs	r3, #0
 80046ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80046d2:	460b      	mov	r3, r1
 80046d4:	4313      	orrs	r3, r2
 80046d6:	d055      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80046d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80046e0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80046e4:	d033      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80046e6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80046ea:	d82c      	bhi.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046f0:	d02f      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80046f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046f6:	d826      	bhi.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046f8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80046fc:	d02b      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80046fe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004702:	d820      	bhi.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004704:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004708:	d012      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800470a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800470e:	d81a      	bhi.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004710:	2b00      	cmp	r3, #0
 8004712:	d022      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004718:	d115      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471e:	3308      	adds	r3, #8
 8004720:	2100      	movs	r1, #0
 8004722:	4618      	mov	r0, r3
 8004724:	f001 fcc0 	bl	80060a8 <RCCEx_PLL2_Config>
 8004728:	4603      	mov	r3, r0
 800472a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800472e:	e015      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004734:	3328      	adds	r3, #40	@ 0x28
 8004736:	2102      	movs	r1, #2
 8004738:	4618      	mov	r0, r3
 800473a:	f001 fd67 	bl	800620c <RCCEx_PLL3_Config>
 800473e:	4603      	mov	r3, r0
 8004740:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004744:	e00a      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800474c:	e006      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800474e:	bf00      	nop
 8004750:	e004      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004752:	bf00      	nop
 8004754:	e002      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004756:	bf00      	nop
 8004758:	e000      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800475a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800475c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10b      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004764:	4ba1      	ldr	r3, [pc, #644]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004768:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800476c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004770:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004774:	4a9d      	ldr	r2, [pc, #628]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004776:	430b      	orrs	r3, r1
 8004778:	6593      	str	r3, [r2, #88]	@ 0x58
 800477a:	e003      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004780:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	f002 0308 	and.w	r3, r2, #8
 8004790:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004794:	2300      	movs	r3, #0
 8004796:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800479a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800479e:	460b      	mov	r3, r1
 80047a0:	4313      	orrs	r3, r2
 80047a2:	d01e      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80047a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047b0:	d10c      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b6:	3328      	adds	r3, #40	@ 0x28
 80047b8:	2102      	movs	r1, #2
 80047ba:	4618      	mov	r0, r3
 80047bc:	f001 fd26 	bl	800620c <RCCEx_PLL3_Config>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047cc:	4b87      	ldr	r3, [pc, #540]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047dc:	4a83      	ldr	r2, [pc, #524]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047de:	430b      	orrs	r3, r1
 80047e0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ea:	f002 0310 	and.w	r3, r2, #16
 80047ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047f2:	2300      	movs	r3, #0
 80047f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80047f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80047fc:	460b      	mov	r3, r1
 80047fe:	4313      	orrs	r3, r2
 8004800:	d01e      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004806:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800480a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800480e:	d10c      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004814:	3328      	adds	r3, #40	@ 0x28
 8004816:	2102      	movs	r1, #2
 8004818:	4618      	mov	r0, r3
 800481a:	f001 fcf7 	bl	800620c <RCCEx_PLL3_Config>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800482a:	4b70      	ldr	r3, [pc, #448]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800482c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800482e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004836:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800483a:	4a6c      	ldr	r2, [pc, #432]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800483c:	430b      	orrs	r3, r1
 800483e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004848:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800484c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004850:	2300      	movs	r3, #0
 8004852:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004856:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800485a:	460b      	mov	r3, r1
 800485c:	4313      	orrs	r3, r2
 800485e:	d03e      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004864:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004868:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800486c:	d022      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800486e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004872:	d81b      	bhi.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800487c:	d00b      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800487e:	e015      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004884:	3308      	adds	r3, #8
 8004886:	2100      	movs	r1, #0
 8004888:	4618      	mov	r0, r3
 800488a:	f001 fc0d 	bl	80060a8 <RCCEx_PLL2_Config>
 800488e:	4603      	mov	r3, r0
 8004890:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004894:	e00f      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489a:	3328      	adds	r3, #40	@ 0x28
 800489c:	2102      	movs	r1, #2
 800489e:	4618      	mov	r0, r3
 80048a0:	f001 fcb4 	bl	800620c <RCCEx_PLL3_Config>
 80048a4:	4603      	mov	r3, r0
 80048a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80048aa:	e004      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048b2:	e000      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80048b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10b      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048be:	4b4b      	ldr	r3, [pc, #300]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80048c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048ce:	4a47      	ldr	r2, [pc, #284]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048d0:	430b      	orrs	r3, r1
 80048d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80048d4:	e003      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80048ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048ec:	2300      	movs	r3, #0
 80048ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80048f4:	460b      	mov	r3, r1
 80048f6:	4313      	orrs	r3, r2
 80048f8:	d03b      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80048fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004902:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004906:	d01f      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004908:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800490c:	d818      	bhi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800490e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004912:	d003      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004914:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004918:	d007      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800491a:	e011      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800491c:	4b33      	ldr	r3, [pc, #204]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800491e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004920:	4a32      	ldr	r2, [pc, #200]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004928:	e00f      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800492a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492e:	3328      	adds	r3, #40	@ 0x28
 8004930:	2101      	movs	r1, #1
 8004932:	4618      	mov	r0, r3
 8004934:	f001 fc6a 	bl	800620c <RCCEx_PLL3_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800493e:	e004      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004946:	e000      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800494a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10b      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004952:	4b26      	ldr	r3, [pc, #152]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004956:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800495a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004962:	4a22      	ldr	r2, [pc, #136]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004964:	430b      	orrs	r3, r1
 8004966:	6553      	str	r3, [r2, #84]	@ 0x54
 8004968:	e003      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800496e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800497e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004980:	2300      	movs	r3, #0
 8004982:	677b      	str	r3, [r7, #116]	@ 0x74
 8004984:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004988:	460b      	mov	r3, r1
 800498a:	4313      	orrs	r3, r2
 800498c:	d034      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800498e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800499c:	d007      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800499e:	e011      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049a0:	4b12      	ldr	r3, [pc, #72]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a4:	4a11      	ldr	r2, [pc, #68]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80049ac:	e00e      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b2:	3308      	adds	r3, #8
 80049b4:	2102      	movs	r1, #2
 80049b6:	4618      	mov	r0, r3
 80049b8:	f001 fb76 	bl	80060a8 <RCCEx_PLL2_Config>
 80049bc:	4603      	mov	r3, r0
 80049be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80049c2:	e003      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10d      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049d4:	4b05      	ldr	r3, [pc, #20]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049e2:	4a02      	ldr	r2, [pc, #8]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049e4:	430b      	orrs	r3, r1
 80049e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049e8:	e006      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80049ea:	bf00      	nop
 80049ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a00:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004a04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a06:	2300      	movs	r3, #0
 8004a08:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a0a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4313      	orrs	r3, r2
 8004a12:	d00c      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a18:	3328      	adds	r3, #40	@ 0x28
 8004a1a:	2102      	movs	r1, #2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f001 fbf5 	bl	800620c <RCCEx_PLL3_Config>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a36:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004a3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a40:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004a44:	460b      	mov	r3, r1
 8004a46:	4313      	orrs	r3, r2
 8004a48:	d038      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a56:	d018      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004a58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a5c:	d811      	bhi.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a62:	d014      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004a64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a68:	d80b      	bhi.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d011      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004a6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a72:	d106      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a74:	4bc3      	ldr	r3, [pc, #780]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a78:	4ac2      	ldr	r2, [pc, #776]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004a80:	e008      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a88:	e004      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a8a:	bf00      	nop
 8004a8c:	e002      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a8e:	bf00      	nop
 8004a90:	e000      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10b      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a9c:	4bb9      	ldr	r3, [pc, #740]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004aac:	4ab5      	ldr	r2, [pc, #724]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aae:	430b      	orrs	r3, r1
 8004ab0:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ab2:	e003      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ab8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004ac8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004aca:	2300      	movs	r3, #0
 8004acc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ace:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	d009      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ad8:	4baa      	ldr	r3, [pc, #680]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004adc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ae6:	4aa7      	ldr	r2, [pc, #668]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004af8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004afa:	2300      	movs	r3, #0
 8004afc:	657b      	str	r3, [r7, #84]	@ 0x54
 8004afe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004b02:	460b      	mov	r3, r1
 8004b04:	4313      	orrs	r3, r2
 8004b06:	d00a      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004b08:	4b9e      	ldr	r3, [pc, #632]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004b18:	4a9a      	ldr	r2, [pc, #616]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b1a:	430b      	orrs	r3, r1
 8004b1c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b26:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b30:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004b34:	460b      	mov	r3, r1
 8004b36:	4313      	orrs	r3, r2
 8004b38:	d009      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b3a:	4b92      	ldr	r3, [pc, #584]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b3e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b48:	4a8e      	ldr	r2, [pc, #568]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004b5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b60:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004b64:	460b      	mov	r3, r1
 8004b66:	4313      	orrs	r3, r2
 8004b68:	d00e      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b6a:	4b86      	ldr	r3, [pc, #536]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	4a85      	ldr	r2, [pc, #532]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b70:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b74:	6113      	str	r3, [r2, #16]
 8004b76:	4b83      	ldr	r3, [pc, #524]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b78:	6919      	ldr	r1, [r3, #16]
 8004b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b82:	4a80      	ldr	r2, [pc, #512]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b84:	430b      	orrs	r3, r1
 8004b86:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b90:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004b94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b96:	2300      	movs	r3, #0
 8004b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b9a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	d009      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004ba4:	4b77      	ldr	r3, [pc, #476]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb2:	4a74      	ldr	r2, [pc, #464]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004bc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	d00a      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bd4:	4b6b      	ldr	r3, [pc, #428]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004be4:	4a67      	ldr	r2, [pc, #412]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004be6:	430b      	orrs	r3, r1
 8004be8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bfc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004c00:	460b      	mov	r3, r1
 8004c02:	4313      	orrs	r3, r2
 8004c04:	d011      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c0a:	3308      	adds	r3, #8
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f001 fa4a 	bl	80060a8 <RCCEx_PLL2_Config>
 8004c14:	4603      	mov	r3, r0
 8004c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c32:	2100      	movs	r1, #0
 8004c34:	6239      	str	r1, [r7, #32]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c3c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004c40:	460b      	mov	r3, r1
 8004c42:	4313      	orrs	r3, r2
 8004c44:	d011      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f001 fa2a 	bl	80060a8 <RCCEx_PLL2_Config>
 8004c54:	4603      	mov	r3, r0
 8004c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c72:	2100      	movs	r1, #0
 8004c74:	61b9      	str	r1, [r7, #24]
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	61fb      	str	r3, [r7, #28]
 8004c7c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c80:	460b      	mov	r3, r1
 8004c82:	4313      	orrs	r3, r2
 8004c84:	d011      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8a:	3308      	adds	r3, #8
 8004c8c:	2102      	movs	r1, #2
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f001 fa0a 	bl	80060a8 <RCCEx_PLL2_Config>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	6139      	str	r1, [r7, #16]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	d011      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cca:	3328      	adds	r3, #40	@ 0x28
 8004ccc:	2100      	movs	r1, #0
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f001 fa9c 	bl	800620c <RCCEx_PLL3_Config>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ce6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004d00:	460b      	mov	r3, r1
 8004d02:	4313      	orrs	r3, r2
 8004d04:	d011      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d0a:	3328      	adds	r3, #40	@ 0x28
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f001 fa7c 	bl	800620c <RCCEx_PLL3_Config>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d32:	2100      	movs	r1, #0
 8004d34:	6039      	str	r1, [r7, #0]
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	607b      	str	r3, [r7, #4]
 8004d3c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d40:	460b      	mov	r3, r1
 8004d42:	4313      	orrs	r3, r2
 8004d44:	d011      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4a:	3328      	adds	r3, #40	@ 0x28
 8004d4c:	2102      	movs	r1, #2
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f001 fa5c 	bl	800620c <RCCEx_PLL3_Config>
 8004d54:	4603      	mov	r3, r0
 8004d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004d6a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	e000      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d84:	58024400 	.word	0x58024400

08004d88 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b090      	sub	sp, #64	@ 0x40
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004d92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d96:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8004d9a:	430b      	orrs	r3, r1
 8004d9c:	f040 8094 	bne.w	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004da0:	4b9e      	ldr	r3, [pc, #632]	@ (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	f200 8087 	bhi.w	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004db2:	a201      	add	r2, pc, #4	@ (adr r2, 8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db8:	08004dcd 	.word	0x08004dcd
 8004dbc:	08004df5 	.word	0x08004df5
 8004dc0:	08004e1d 	.word	0x08004e1d
 8004dc4:	08004eb9 	.word	0x08004eb9
 8004dc8:	08004e45 	.word	0x08004e45
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004dcc:	4b93      	ldr	r3, [pc, #588]	@ (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dd8:	d108      	bne.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dde:	4618      	mov	r0, r3
 8004de0:	f001 f810 	bl	8005e04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004de8:	f000 bd45 	b.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004df0:	f000 bd41 	b.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004df4:	4b89      	ldr	r3, [pc, #548]	@ (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e00:	d108      	bne.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e02:	f107 0318 	add.w	r3, r7, #24
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fd54 	bl	80058b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e10:	f000 bd31 	b.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e18:	f000 bd2d 	b.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e1c:	4b7f      	ldr	r3, [pc, #508]	@ (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e28:	d108      	bne.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e2a:	f107 030c 	add.w	r3, r7, #12
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 fe94 	bl	8005b5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e38:	f000 bd1d 	b.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e40:	f000 bd19 	b.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e44:	4b75      	ldr	r3, [pc, #468]	@ (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004e4c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e4e:	4b73      	ldr	r3, [pc, #460]	@ (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0304 	and.w	r3, r3, #4
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d10c      	bne.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d109      	bne.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e60:	4b6e      	ldr	r3, [pc, #440]	@ (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	08db      	lsrs	r3, r3, #3
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	4a6d      	ldr	r2, [pc, #436]	@ (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e72:	e01f      	b.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e74:	4b69      	ldr	r3, [pc, #420]	@ (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e80:	d106      	bne.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e88:	d102      	bne.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004e8a:	4b66      	ldr	r3, [pc, #408]	@ (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e8e:	e011      	b.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e90:	4b62      	ldr	r3, [pc, #392]	@ (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e9c:	d106      	bne.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ea4:	d102      	bne.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004ea6:	4b60      	ldr	r3, [pc, #384]	@ (8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eaa:	e003      	b.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004eac:	2300      	movs	r3, #0
 8004eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004eb0:	f000 bce1 	b.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004eb4:	f000 bcdf 	b.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004eb8:	4b5c      	ldr	r3, [pc, #368]	@ (800502c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ebc:	f000 bcdb 	b.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ec4:	f000 bcd7 	b.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ecc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	f040 80ad 	bne.w	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8004ed6:	4b51      	ldr	r3, [pc, #324]	@ (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eda:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004ede:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ee6:	d056      	beq.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eee:	f200 8090 	bhi.w	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef4:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ef6:	f000 8088 	beq.w	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8004efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efc:	2bc0      	cmp	r3, #192	@ 0xc0
 8004efe:	f200 8088 	bhi.w	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f04:	2b80      	cmp	r3, #128	@ 0x80
 8004f06:	d032      	beq.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8004f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0a:	2b80      	cmp	r3, #128	@ 0x80
 8004f0c:	f200 8081 	bhi.w	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8004f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f18:	2b40      	cmp	r3, #64	@ 0x40
 8004f1a:	d014      	beq.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004f1c:	e079      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f1e:	4b3f      	ldr	r3, [pc, #252]	@ (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f2a:	d108      	bne.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 ff67 	bl	8005e04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f3a:	f000 bc9c 	b.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f42:	f000 bc98 	b.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f46:	4b35      	ldr	r3, [pc, #212]	@ (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f52:	d108      	bne.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f54:	f107 0318 	add.w	r3, r7, #24
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fcab 	bl	80058b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f62:	f000 bc88 	b.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f6a:	f000 bc84 	b.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f6e:	4b2b      	ldr	r3, [pc, #172]	@ (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f7a:	d108      	bne.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f7c:	f107 030c 	add.w	r3, r7, #12
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fdeb 	bl	8005b5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f8a:	f000 bc74 	b.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f92:	f000 bc70 	b.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004f96:	4b21      	ldr	r3, [pc, #132]	@ (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004f9e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b04      	cmp	r3, #4
 8004faa:	d10c      	bne.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8004fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d109      	bne.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	08db      	lsrs	r3, r3, #3
 8004fb8:	f003 0303 	and.w	r3, r3, #3
 8004fbc:	4a18      	ldr	r2, [pc, #96]	@ (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fc4:	e01f      	b.n	8005006 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004fc6:	4b15      	ldr	r3, [pc, #84]	@ (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fd2:	d106      	bne.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fda:	d102      	bne.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004fdc:	4b11      	ldr	r3, [pc, #68]	@ (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fe0:	e011      	b.n	8005006 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fee:	d106      	bne.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ff2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ff6:	d102      	bne.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ffc:	e003      	b.n	8005006 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004ffe:	2300      	movs	r3, #0
 8005000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005002:	f000 bc38 	b.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005006:	f000 bc36 	b.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800500a:	4b08      	ldr	r3, [pc, #32]	@ (800502c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800500c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800500e:	f000 bc32 	b.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005012:	2300      	movs	r3, #0
 8005014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005016:	f000 bc2e 	b.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800501a:	bf00      	nop
 800501c:	58024400 	.word	0x58024400
 8005020:	03d09000 	.word	0x03d09000
 8005024:	003d0900 	.word	0x003d0900
 8005028:	007a1200 	.word	0x007a1200
 800502c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005034:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005038:	430b      	orrs	r3, r1
 800503a:	f040 809c 	bne.w	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800503e:	4b9e      	ldr	r3, [pc, #632]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005042:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8005046:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800504e:	d054      	beq.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005052:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005056:	f200 808b 	bhi.w	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800505a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005060:	f000 8083 	beq.w	800516a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005066:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800506a:	f200 8081 	bhi.w	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800506e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005070:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005074:	d02f      	beq.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005078:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800507c:	d878      	bhi.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800507e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005080:	2b00      	cmp	r3, #0
 8005082:	d004      	beq.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005086:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800508a:	d012      	beq.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800508c:	e070      	b.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800508e:	4b8a      	ldr	r3, [pc, #552]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005096:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800509a:	d107      	bne.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800509c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 feaf 	bl	8005e04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80050a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050aa:	e3e4      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80050ac:	2300      	movs	r3, #0
 80050ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050b0:	e3e1      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050b2:	4b81      	ldr	r3, [pc, #516]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050be:	d107      	bne.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050c0:	f107 0318 	add.w	r3, r7, #24
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fbf5 	bl	80058b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050ce:	e3d2      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80050d0:	2300      	movs	r3, #0
 80050d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050d4:	e3cf      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80050d6:	4b78      	ldr	r3, [pc, #480]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050e2:	d107      	bne.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050e4:	f107 030c 	add.w	r3, r7, #12
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 fd37 	bl	8005b5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050f2:	e3c0      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80050f4:	2300      	movs	r3, #0
 80050f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050f8:	e3bd      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80050fa:	4b6f      	ldr	r3, [pc, #444]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80050fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005102:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005104:	4b6c      	ldr	r3, [pc, #432]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b04      	cmp	r3, #4
 800510e:	d10c      	bne.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005112:	2b00      	cmp	r3, #0
 8005114:	d109      	bne.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005116:	4b68      	ldr	r3, [pc, #416]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	08db      	lsrs	r3, r3, #3
 800511c:	f003 0303 	and.w	r3, r3, #3
 8005120:	4a66      	ldr	r2, [pc, #408]	@ (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005122:	fa22 f303 	lsr.w	r3, r2, r3
 8005126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005128:	e01e      	b.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800512a:	4b63      	ldr	r3, [pc, #396]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005136:	d106      	bne.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800513a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800513e:	d102      	bne.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005140:	4b5f      	ldr	r3, [pc, #380]	@ (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005144:	e010      	b.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005146:	4b5c      	ldr	r3, [pc, #368]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800514e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005152:	d106      	bne.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005156:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800515a:	d102      	bne.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800515c:	4b59      	ldr	r3, [pc, #356]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800515e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005160:	e002      	b.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005166:	e386      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005168:	e385      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800516a:	4b57      	ldr	r3, [pc, #348]	@ (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800516c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800516e:	e382      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005170:	2300      	movs	r3, #0
 8005172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005174:	e37f      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800517a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800517e:	430b      	orrs	r3, r1
 8005180:	f040 80a7 	bne.w	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005184:	4b4c      	ldr	r3, [pc, #304]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005188:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800518c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800518e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005190:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005194:	d055      	beq.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005198:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800519c:	f200 8096 	bhi.w	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80051a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80051a6:	f000 8084 	beq.w	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80051aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80051b0:	f200 808c 	bhi.w	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80051b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051ba:	d030      	beq.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80051bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051c2:	f200 8083 	bhi.w	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80051c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d004      	beq.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80051cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051d2:	d012      	beq.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80051d4:	e07a      	b.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80051d6:	4b38      	ldr	r3, [pc, #224]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051e2:	d107      	bne.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fe0b 	bl	8005e04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80051ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051f2:	e340      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80051f4:	2300      	movs	r3, #0
 80051f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051f8:	e33d      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051fa:	4b2f      	ldr	r3, [pc, #188]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005202:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005206:	d107      	bne.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005208:	f107 0318 	add.w	r3, r7, #24
 800520c:	4618      	mov	r0, r3
 800520e:	f000 fb51 	bl	80058b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005216:	e32e      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005218:	2300      	movs	r3, #0
 800521a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800521c:	e32b      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800521e:	4b26      	ldr	r3, [pc, #152]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005226:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800522a:	d107      	bne.n	800523c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800522c:	f107 030c 	add.w	r3, r7, #12
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fc93 	bl	8005b5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800523a:	e31c      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800523c:	2300      	movs	r3, #0
 800523e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005240:	e319      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005242:	4b1d      	ldr	r3, [pc, #116]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005246:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800524a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800524c:	4b1a      	ldr	r3, [pc, #104]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b04      	cmp	r3, #4
 8005256:	d10c      	bne.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800525a:	2b00      	cmp	r3, #0
 800525c:	d109      	bne.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800525e:	4b16      	ldr	r3, [pc, #88]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	08db      	lsrs	r3, r3, #3
 8005264:	f003 0303 	and.w	r3, r3, #3
 8005268:	4a14      	ldr	r2, [pc, #80]	@ (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800526a:	fa22 f303 	lsr.w	r3, r2, r3
 800526e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005270:	e01e      	b.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005272:	4b11      	ldr	r3, [pc, #68]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800527a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800527e:	d106      	bne.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005282:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005286:	d102      	bne.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005288:	4b0d      	ldr	r3, [pc, #52]	@ (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800528a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800528c:	e010      	b.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800528e:	4b0a      	ldr	r3, [pc, #40]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005296:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800529a:	d106      	bne.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800529c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800529e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052a2:	d102      	bne.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80052a4:	4b07      	ldr	r3, [pc, #28]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80052a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052a8:	e002      	b.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80052ae:	e2e2      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80052b0:	e2e1      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80052b2:	4b05      	ldr	r3, [pc, #20]	@ (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80052b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052b6:	e2de      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80052b8:	58024400 	.word	0x58024400
 80052bc:	03d09000 	.word	0x03d09000
 80052c0:	003d0900 	.word	0x003d0900
 80052c4:	007a1200 	.word	0x007a1200
 80052c8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80052cc:	2300      	movs	r3, #0
 80052ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052d0:	e2d1      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80052d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052d6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80052da:	430b      	orrs	r3, r1
 80052dc:	f040 809c 	bne.w	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80052e0:	4b93      	ldr	r3, [pc, #588]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80052e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80052e8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80052ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052f0:	d054      	beq.n	800539c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80052f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052f8:	f200 808b 	bhi.w	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80052fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005302:	f000 8083 	beq.w	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005308:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800530c:	f200 8081 	bhi.w	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005312:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005316:	d02f      	beq.n	8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800531a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800531e:	d878      	bhi.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005322:	2b00      	cmp	r3, #0
 8005324:	d004      	beq.n	8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800532c:	d012      	beq.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800532e:	e070      	b.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005330:	4b7f      	ldr	r3, [pc, #508]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005338:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800533c:	d107      	bne.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800533e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fd5e 	bl	8005e04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800534c:	e293      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005352:	e290      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005354:	4b76      	ldr	r3, [pc, #472]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800535c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005360:	d107      	bne.n	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005362:	f107 0318 	add.w	r3, r7, #24
 8005366:	4618      	mov	r0, r3
 8005368:	f000 faa4 	bl	80058b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005370:	e281      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005372:	2300      	movs	r3, #0
 8005374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005376:	e27e      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005378:	4b6d      	ldr	r3, [pc, #436]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005380:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005384:	d107      	bne.n	8005396 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005386:	f107 030c 	add.w	r3, r7, #12
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fbe6 	bl	8005b5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005394:	e26f      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800539a:	e26c      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800539c:	4b64      	ldr	r3, [pc, #400]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800539e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80053a4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80053a6:	4b62      	ldr	r3, [pc, #392]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0304 	and.w	r3, r3, #4
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d10c      	bne.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80053b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d109      	bne.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053b8:	4b5d      	ldr	r3, [pc, #372]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	08db      	lsrs	r3, r3, #3
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	4a5c      	ldr	r2, [pc, #368]	@ (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80053c4:	fa22 f303 	lsr.w	r3, r2, r3
 80053c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053ca:	e01e      	b.n	800540a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053cc:	4b58      	ldr	r3, [pc, #352]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053d8:	d106      	bne.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80053da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053e0:	d102      	bne.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80053e2:	4b55      	ldr	r3, [pc, #340]	@ (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80053e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053e6:	e010      	b.n	800540a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80053e8:	4b51      	ldr	r3, [pc, #324]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053f4:	d106      	bne.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80053f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053fc:	d102      	bne.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80053fe:	4b4f      	ldr	r3, [pc, #316]	@ (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005400:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005402:	e002      	b.n	800540a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005404:	2300      	movs	r3, #0
 8005406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005408:	e235      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800540a:	e234      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800540c:	4b4c      	ldr	r3, [pc, #304]	@ (8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800540e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005410:	e231      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005416:	e22e      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800541c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005420:	430b      	orrs	r3, r1
 8005422:	f040 808f 	bne.w	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005426:	4b42      	ldr	r3, [pc, #264]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800542a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800542e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005432:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005436:	d06b      	beq.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800543a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800543e:	d874      	bhi.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005442:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005446:	d056      	beq.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800544a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800544e:	d86c      	bhi.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005452:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005456:	d03b      	beq.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800545a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800545e:	d864      	bhi.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005462:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005466:	d021      	beq.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800546e:	d85c      	bhi.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005472:	2b00      	cmp	r3, #0
 8005474:	d004      	beq.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800547c:	d004      	beq.n	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800547e:	e054      	b.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005480:	f7fe fa4c 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 8005484:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005486:	e1f6      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005488:	4b29      	ldr	r3, [pc, #164]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005490:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005494:	d107      	bne.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005496:	f107 0318 	add.w	r3, r7, #24
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fa0a 	bl	80058b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054a4:	e1e7      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054a6:	2300      	movs	r3, #0
 80054a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054aa:	e1e4      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054ac:	4b20      	ldr	r3, [pc, #128]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054b8:	d107      	bne.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054ba:	f107 030c 	add.w	r3, r7, #12
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fb4c 	bl	8005b5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054c8:	e1d5      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054ca:	2300      	movs	r3, #0
 80054cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054ce:	e1d2      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054d0:	4b17      	ldr	r3, [pc, #92]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d109      	bne.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054dc:	4b14      	ldr	r3, [pc, #80]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	08db      	lsrs	r3, r3, #3
 80054e2:	f003 0303 	and.w	r3, r3, #3
 80054e6:	4a13      	ldr	r2, [pc, #76]	@ (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80054e8:	fa22 f303 	lsr.w	r3, r2, r3
 80054ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054ee:	e1c2      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054f0:	2300      	movs	r3, #0
 80054f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054f4:	e1bf      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80054f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005502:	d102      	bne.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005504:	4b0c      	ldr	r3, [pc, #48]	@ (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005508:	e1b5      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800550a:	2300      	movs	r3, #0
 800550c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800550e:	e1b2      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005510:	4b07      	ldr	r3, [pc, #28]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005518:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800551c:	d102      	bne.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800551e:	4b07      	ldr	r3, [pc, #28]	@ (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005522:	e1a8      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005528:	e1a5      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800552a:	2300      	movs	r3, #0
 800552c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800552e:	e1a2      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005530:	58024400 	.word	0x58024400
 8005534:	03d09000 	.word	0x03d09000
 8005538:	003d0900 	.word	0x003d0900
 800553c:	007a1200 	.word	0x007a1200
 8005540:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005544:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005548:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800554c:	430b      	orrs	r3, r1
 800554e:	d173      	bne.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005550:	4b9c      	ldr	r3, [pc, #624]	@ (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005554:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005558:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800555a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800555c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005560:	d02f      	beq.n	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005564:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005568:	d863      	bhi.n	8005632 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800556a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556c:	2b00      	cmp	r3, #0
 800556e:	d004      	beq.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005572:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005576:	d012      	beq.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005578:	e05b      	b.n	8005632 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800557a:	4b92      	ldr	r3, [pc, #584]	@ (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005582:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005586:	d107      	bne.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005588:	f107 0318 	add.w	r3, r7, #24
 800558c:	4618      	mov	r0, r3
 800558e:	f000 f991 	bl	80058b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005596:	e16e      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005598:	2300      	movs	r3, #0
 800559a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800559c:	e16b      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800559e:	4b89      	ldr	r3, [pc, #548]	@ (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055aa:	d107      	bne.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055ac:	f107 030c 	add.w	r3, r7, #12
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 fad3 	bl	8005b5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055ba:	e15c      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80055bc:	2300      	movs	r3, #0
 80055be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055c0:	e159      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80055c2:	4b80      	ldr	r3, [pc, #512]	@ (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80055c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80055ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80055cc:	4b7d      	ldr	r3, [pc, #500]	@ (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d10c      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80055d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d109      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055de:	4b79      	ldr	r3, [pc, #484]	@ (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	08db      	lsrs	r3, r3, #3
 80055e4:	f003 0303 	and.w	r3, r3, #3
 80055e8:	4a77      	ldr	r2, [pc, #476]	@ (80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80055ea:	fa22 f303 	lsr.w	r3, r2, r3
 80055ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055f0:	e01e      	b.n	8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80055f2:	4b74      	ldr	r3, [pc, #464]	@ (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055fe:	d106      	bne.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005602:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005606:	d102      	bne.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005608:	4b70      	ldr	r3, [pc, #448]	@ (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800560a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800560c:	e010      	b.n	8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800560e:	4b6d      	ldr	r3, [pc, #436]	@ (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005616:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800561a:	d106      	bne.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800561c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800561e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005622:	d102      	bne.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005624:	4b6a      	ldr	r3, [pc, #424]	@ (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005626:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005628:	e002      	b.n	8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800562a:	2300      	movs	r3, #0
 800562c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800562e:	e122      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005630:	e121      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005632:	2300      	movs	r3, #0
 8005634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005636:	e11e      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800563c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005640:	430b      	orrs	r3, r1
 8005642:	d133      	bne.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005644:	4b5f      	ldr	r3, [pc, #380]	@ (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800564c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800564e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005650:	2b00      	cmp	r3, #0
 8005652:	d004      	beq.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005656:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800565a:	d012      	beq.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800565c:	e023      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800565e:	4b59      	ldr	r3, [pc, #356]	@ (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005666:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800566a:	d107      	bne.n	800567c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800566c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fbc7 	bl	8005e04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800567a:	e0fc      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800567c:	2300      	movs	r3, #0
 800567e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005680:	e0f9      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005682:	4b50      	ldr	r3, [pc, #320]	@ (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800568a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800568e:	d107      	bne.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005690:	f107 0318 	add.w	r3, r7, #24
 8005694:	4618      	mov	r0, r3
 8005696:	f000 f90d 	bl	80058b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800569e:	e0ea      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056a0:	2300      	movs	r3, #0
 80056a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056a4:	e0e7      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80056a6:	2300      	movs	r3, #0
 80056a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056aa:	e0e4      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80056ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056b0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80056b4:	430b      	orrs	r3, r1
 80056b6:	f040 808d 	bne.w	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80056ba:	4b42      	ldr	r3, [pc, #264]	@ (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80056bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056be:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80056c2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80056c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056ca:	d06b      	beq.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80056cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056d2:	d874      	bhi.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80056d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056da:	d056      	beq.n	800578a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80056dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e2:	d86c      	bhi.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80056e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80056ea:	d03b      	beq.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80056ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80056f2:	d864      	bhi.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80056f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056fa:	d021      	beq.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80056fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005702:	d85c      	bhi.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005706:	2b00      	cmp	r3, #0
 8005708:	d004      	beq.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800570a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005710:	d004      	beq.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005712:	e054      	b.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005714:	f000 f8b8 	bl	8005888 <HAL_RCCEx_GetD3PCLK1Freq>
 8005718:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800571a:	e0ac      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800571c:	4b29      	ldr	r3, [pc, #164]	@ (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005724:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005728:	d107      	bne.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800572a:	f107 0318 	add.w	r3, r7, #24
 800572e:	4618      	mov	r0, r3
 8005730:	f000 f8c0 	bl	80058b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005738:	e09d      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800573a:	2300      	movs	r3, #0
 800573c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800573e:	e09a      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005740:	4b20      	ldr	r3, [pc, #128]	@ (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800574c:	d107      	bne.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800574e:	f107 030c 	add.w	r3, r7, #12
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fa02 	bl	8005b5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800575c:	e08b      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800575e:	2300      	movs	r3, #0
 8005760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005762:	e088      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005764:	4b17      	ldr	r3, [pc, #92]	@ (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b04      	cmp	r3, #4
 800576e:	d109      	bne.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005770:	4b14      	ldr	r3, [pc, #80]	@ (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	08db      	lsrs	r3, r3, #3
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	4a13      	ldr	r2, [pc, #76]	@ (80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800577c:	fa22 f303 	lsr.w	r3, r2, r3
 8005780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005782:	e078      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005784:	2300      	movs	r3, #0
 8005786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005788:	e075      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800578a:	4b0e      	ldr	r3, [pc, #56]	@ (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005796:	d102      	bne.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005798:	4b0c      	ldr	r3, [pc, #48]	@ (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800579a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800579c:	e06b      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800579e:	2300      	movs	r3, #0
 80057a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057a2:	e068      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80057a4:	4b07      	ldr	r3, [pc, #28]	@ (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057b0:	d102      	bne.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80057b2:	4b07      	ldr	r3, [pc, #28]	@ (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80057b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057b6:	e05e      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057b8:	2300      	movs	r3, #0
 80057ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057bc:	e05b      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80057be:	2300      	movs	r3, #0
 80057c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057c2:	e058      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80057c4:	58024400 	.word	0x58024400
 80057c8:	03d09000 	.word	0x03d09000
 80057cc:	003d0900 	.word	0x003d0900
 80057d0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80057d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057d8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80057dc:	430b      	orrs	r3, r1
 80057de:	d148      	bne.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80057e0:	4b27      	ldr	r3, [pc, #156]	@ (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80057e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80057e8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80057ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057f0:	d02a      	beq.n	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80057f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057f8:	d838      	bhi.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80057fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d004      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005802:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005806:	d00d      	beq.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005808:	e030      	b.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800580a:	4b1d      	ldr	r3, [pc, #116]	@ (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005812:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005816:	d102      	bne.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005818:	4b1a      	ldr	r3, [pc, #104]	@ (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800581a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800581c:	e02b      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800581e:	2300      	movs	r3, #0
 8005820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005822:	e028      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005824:	4b16      	ldr	r3, [pc, #88]	@ (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800582c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005830:	d107      	bne.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fae4 	bl	8005e04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800583c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005840:	e019      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005842:	2300      	movs	r3, #0
 8005844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005846:	e016      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005848:	4b0d      	ldr	r3, [pc, #52]	@ (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005850:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005854:	d107      	bne.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005856:	f107 0318 	add.w	r3, r7, #24
 800585a:	4618      	mov	r0, r3
 800585c:	f000 f82a 	bl	80058b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005864:	e007      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005866:	2300      	movs	r3, #0
 8005868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800586a:	e004      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800586c:	2300      	movs	r3, #0
 800586e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005870:	e001      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8005872:	2300      	movs	r3, #0
 8005874:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8005876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005878:	4618      	mov	r0, r3
 800587a:	3740      	adds	r7, #64	@ 0x40
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	58024400 	.word	0x58024400
 8005884:	007a1200 	.word	0x007a1200

08005888 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800588c:	f7fe f816 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 8005890:	4602      	mov	r2, r0
 8005892:	4b06      	ldr	r3, [pc, #24]	@ (80058ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	091b      	lsrs	r3, r3, #4
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	4904      	ldr	r1, [pc, #16]	@ (80058b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800589e:	5ccb      	ldrb	r3, [r1, r3]
 80058a0:	f003 031f 	and.w	r3, r3, #31
 80058a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	58024400 	.word	0x58024400
 80058b0:	08007b5c 	.word	0x08007b5c

080058b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b089      	sub	sp, #36	@ 0x24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058bc:	4ba1      	ldr	r3, [pc, #644]	@ (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c0:	f003 0303 	and.w	r3, r3, #3
 80058c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80058c6:	4b9f      	ldr	r3, [pc, #636]	@ (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ca:	0b1b      	lsrs	r3, r3, #12
 80058cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80058d2:	4b9c      	ldr	r3, [pc, #624]	@ (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d6:	091b      	lsrs	r3, r3, #4
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80058de:	4b99      	ldr	r3, [pc, #612]	@ (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e2:	08db      	lsrs	r3, r3, #3
 80058e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	fb02 f303 	mul.w	r3, r2, r3
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 8111 	beq.w	8005b24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	2b02      	cmp	r3, #2
 8005906:	f000 8083 	beq.w	8005a10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	2b02      	cmp	r3, #2
 800590e:	f200 80a1 	bhi.w	8005a54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d056      	beq.n	80059cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800591e:	e099      	b.n	8005a54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005920:	4b88      	ldr	r3, [pc, #544]	@ (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	2b00      	cmp	r3, #0
 800592a:	d02d      	beq.n	8005988 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800592c:	4b85      	ldr	r3, [pc, #532]	@ (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	08db      	lsrs	r3, r3, #3
 8005932:	f003 0303 	and.w	r3, r3, #3
 8005936:	4a84      	ldr	r2, [pc, #528]	@ (8005b48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005938:	fa22 f303 	lsr.w	r3, r2, r3
 800593c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	ee07 3a90 	vmov	s15, r3
 8005944:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	ee07 3a90 	vmov	s15, r3
 800594e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005956:	4b7b      	ldr	r3, [pc, #492]	@ (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800595a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005966:	ed97 6a03 	vldr	s12, [r7, #12]
 800596a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800596e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800597a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800597e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005982:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005986:	e087      	b.n	8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005992:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800599a:	4b6a      	ldr	r3, [pc, #424]	@ (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800599c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80059ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059ca:	e065      	b.n	8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005b54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80059da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059de:	4b59      	ldr	r3, [pc, #356]	@ (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e6:	ee07 3a90 	vmov	s15, r3
 80059ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80059f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a0e:	e043      	b.n	8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	ee07 3a90 	vmov	s15, r3
 8005a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a22:	4b48      	ldr	r3, [pc, #288]	@ (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a2a:	ee07 3a90 	vmov	s15, r3
 8005a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a52:	e021      	b.n	8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	ee07 3a90 	vmov	s15, r3
 8005a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005b54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a66:	4b37      	ldr	r3, [pc, #220]	@ (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a6e:	ee07 3a90 	vmov	s15, r3
 8005a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005a98:	4b2a      	ldr	r3, [pc, #168]	@ (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a9c:	0a5b      	lsrs	r3, r3, #9
 8005a9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005aa2:	ee07 3a90 	vmov	s15, r3
 8005aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005aae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ab2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005abe:	ee17 2a90 	vmov	r2, s15
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aca:	0c1b      	lsrs	r3, r3, #16
 8005acc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ad0:	ee07 3a90 	vmov	s15, r3
 8005ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005adc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ae0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aec:	ee17 2a90 	vmov	r2, s15
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005af4:	4b13      	ldr	r3, [pc, #76]	@ (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af8:	0e1b      	lsrs	r3, r3, #24
 8005afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b1a:	ee17 2a90 	vmov	r2, s15
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005b22:	e008      	b.n	8005b36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	609a      	str	r2, [r3, #8]
}
 8005b36:	bf00      	nop
 8005b38:	3724      	adds	r7, #36	@ 0x24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	58024400 	.word	0x58024400
 8005b48:	03d09000 	.word	0x03d09000
 8005b4c:	46000000 	.word	0x46000000
 8005b50:	4c742400 	.word	0x4c742400
 8005b54:	4a742400 	.word	0x4a742400
 8005b58:	4af42400 	.word	0x4af42400

08005b5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b089      	sub	sp, #36	@ 0x24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b64:	4ba1      	ldr	r3, [pc, #644]	@ (8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b68:	f003 0303 	and.w	r3, r3, #3
 8005b6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005b6e:	4b9f      	ldr	r3, [pc, #636]	@ (8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b72:	0d1b      	lsrs	r3, r3, #20
 8005b74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005b7a:	4b9c      	ldr	r3, [pc, #624]	@ (8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b7e:	0a1b      	lsrs	r3, r3, #8
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005b86:	4b99      	ldr	r3, [pc, #612]	@ (8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8a:	08db      	lsrs	r3, r3, #3
 8005b8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	fb02 f303 	mul.w	r3, r2, r3
 8005b96:	ee07 3a90 	vmov	s15, r3
 8005b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8111 	beq.w	8005dcc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	f000 8083 	beq.w	8005cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	f200 80a1 	bhi.w	8005cfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d056      	beq.n	8005c74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005bc6:	e099      	b.n	8005cfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bc8:	4b88      	ldr	r3, [pc, #544]	@ (8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0320 	and.w	r3, r3, #32
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d02d      	beq.n	8005c30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bd4:	4b85      	ldr	r3, [pc, #532]	@ (8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	08db      	lsrs	r3, r3, #3
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	4a84      	ldr	r2, [pc, #528]	@ (8005df0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005be0:	fa22 f303 	lsr.w	r3, r2, r3
 8005be4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	ee07 3a90 	vmov	s15, r3
 8005bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	ee07 3a90 	vmov	s15, r3
 8005bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bfe:	4b7b      	ldr	r3, [pc, #492]	@ (8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c06:	ee07 3a90 	vmov	s15, r3
 8005c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005df4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005c2e:	e087      	b.n	8005d40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	ee07 3a90 	vmov	s15, r3
 8005c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005df8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c42:	4b6a      	ldr	r3, [pc, #424]	@ (8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4a:	ee07 3a90 	vmov	s15, r3
 8005c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005df4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c72:	e065      	b.n	8005d40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	ee07 3a90 	vmov	s15, r3
 8005c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c86:	4b59      	ldr	r3, [pc, #356]	@ (8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8e:	ee07 3a90 	vmov	s15, r3
 8005c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005df4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cb6:	e043      	b.n	8005d40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	ee07 3a90 	vmov	s15, r3
 8005cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cca:	4b48      	ldr	r3, [pc, #288]	@ (8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd2:	ee07 3a90 	vmov	s15, r3
 8005cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cde:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005df4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cfa:	e021      	b.n	8005d40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d0e:	4b37      	ldr	r3, [pc, #220]	@ (8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d16:	ee07 3a90 	vmov	s15, r3
 8005d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005df4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005d40:	4b2a      	ldr	r3, [pc, #168]	@ (8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d44:	0a5b      	lsrs	r3, r3, #9
 8005d46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d66:	ee17 2a90 	vmov	r2, s15
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d72:	0c1b      	lsrs	r3, r3, #16
 8005d74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d78:	ee07 3a90 	vmov	s15, r3
 8005d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d88:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d94:	ee17 2a90 	vmov	r2, s15
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005d9c:	4b13      	ldr	r3, [pc, #76]	@ (8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da0:	0e1b      	lsrs	r3, r3, #24
 8005da2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005db2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005db6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dc2:	ee17 2a90 	vmov	r2, s15
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005dca:	e008      	b.n	8005dde <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	609a      	str	r2, [r3, #8]
}
 8005dde:	bf00      	nop
 8005de0:	3724      	adds	r7, #36	@ 0x24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	58024400 	.word	0x58024400
 8005df0:	03d09000 	.word	0x03d09000
 8005df4:	46000000 	.word	0x46000000
 8005df8:	4c742400 	.word	0x4c742400
 8005dfc:	4a742400 	.word	0x4a742400
 8005e00:	4af42400 	.word	0x4af42400

08005e04 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b089      	sub	sp, #36	@ 0x24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e0c:	4ba0      	ldr	r3, [pc, #640]	@ (8006090 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e10:	f003 0303 	and.w	r3, r3, #3
 8005e14:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005e16:	4b9e      	ldr	r3, [pc, #632]	@ (8006090 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1a:	091b      	lsrs	r3, r3, #4
 8005e1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e20:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005e22:	4b9b      	ldr	r3, [pc, #620]	@ (8006090 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005e2c:	4b98      	ldr	r3, [pc, #608]	@ (8006090 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e30:	08db      	lsrs	r3, r3, #3
 8005e32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	fb02 f303 	mul.w	r3, r2, r3
 8005e3c:	ee07 3a90 	vmov	s15, r3
 8005e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e44:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 8111 	beq.w	8006072 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	f000 8083 	beq.w	8005f5e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	f200 80a1 	bhi.w	8005fa2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d056      	beq.n	8005f1a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005e6c:	e099      	b.n	8005fa2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e6e:	4b88      	ldr	r3, [pc, #544]	@ (8006090 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d02d      	beq.n	8005ed6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e7a:	4b85      	ldr	r3, [pc, #532]	@ (8006090 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	08db      	lsrs	r3, r3, #3
 8005e80:	f003 0303 	and.w	r3, r3, #3
 8005e84:	4a83      	ldr	r2, [pc, #524]	@ (8006094 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005e86:	fa22 f303 	lsr.w	r3, r2, r3
 8005e8a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	ee07 3a90 	vmov	s15, r3
 8005e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	ee07 3a90 	vmov	s15, r3
 8005e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ea4:	4b7a      	ldr	r3, [pc, #488]	@ (8006090 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eac:	ee07 3a90 	vmov	s15, r3
 8005eb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eb8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006098 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005ebc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ec8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005ed4:	e087      	b.n	8005fe6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	ee07 3a90 	vmov	s15, r3
 8005edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800609c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005ee4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee8:	4b69      	ldr	r3, [pc, #420]	@ (8006090 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef0:	ee07 3a90 	vmov	s15, r3
 8005ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005efc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006098 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f18:	e065      	b.n	8005fe6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	ee07 3a90 	vmov	s15, r3
 8005f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f24:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80060a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005f28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f2c:	4b58      	ldr	r3, [pc, #352]	@ (8006090 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f34:	ee07 3a90 	vmov	s15, r3
 8005f38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f40:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006098 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f5c:	e043      	b.n	8005fe6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	ee07 3a90 	vmov	s15, r3
 8005f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f68:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80060a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005f6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f70:	4b47      	ldr	r3, [pc, #284]	@ (8006090 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f78:	ee07 3a90 	vmov	s15, r3
 8005f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f80:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f84:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006098 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fa0:	e021      	b.n	8005fe6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	ee07 3a90 	vmov	s15, r3
 8005fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fac:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800609c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005fb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb4:	4b36      	ldr	r3, [pc, #216]	@ (8006090 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fbc:	ee07 3a90 	vmov	s15, r3
 8005fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fc8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006098 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005fcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fe4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8006090 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fea:	0a5b      	lsrs	r3, r3, #9
 8005fec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ff0:	ee07 3a90 	vmov	s15, r3
 8005ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ffc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006000:	edd7 6a07 	vldr	s13, [r7, #28]
 8006004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800600c:	ee17 2a90 	vmov	r2, s15
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006014:	4b1e      	ldr	r3, [pc, #120]	@ (8006090 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006018:	0c1b      	lsrs	r3, r3, #16
 800601a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006026:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800602a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800602e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800603a:	ee17 2a90 	vmov	r2, s15
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006042:	4b13      	ldr	r3, [pc, #76]	@ (8006090 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006046:	0e1b      	lsrs	r3, r3, #24
 8006048:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800604c:	ee07 3a90 	vmov	s15, r3
 8006050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006054:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006058:	ee37 7a87 	vadd.f32	s14, s15, s14
 800605c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006068:	ee17 2a90 	vmov	r2, s15
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006070:	e008      	b.n	8006084 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	609a      	str	r2, [r3, #8]
}
 8006084:	bf00      	nop
 8006086:	3724      	adds	r7, #36	@ 0x24
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	58024400 	.word	0x58024400
 8006094:	03d09000 	.word	0x03d09000
 8006098:	46000000 	.word	0x46000000
 800609c:	4c742400 	.word	0x4c742400
 80060a0:	4a742400 	.word	0x4a742400
 80060a4:	4af42400 	.word	0x4af42400

080060a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80060b6:	4b53      	ldr	r3, [pc, #332]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 80060b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ba:	f003 0303 	and.w	r3, r3, #3
 80060be:	2b03      	cmp	r3, #3
 80060c0:	d101      	bne.n	80060c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e099      	b.n	80061fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80060c6:	4b4f      	ldr	r3, [pc, #316]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a4e      	ldr	r2, [pc, #312]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 80060cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80060d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060d2:	f7fb f991 	bl	80013f8 <HAL_GetTick>
 80060d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80060d8:	e008      	b.n	80060ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80060da:	f7fb f98d 	bl	80013f8 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e086      	b.n	80061fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80060ec:	4b45      	ldr	r3, [pc, #276]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1f0      	bne.n	80060da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80060f8:	4b42      	ldr	r3, [pc, #264]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 80060fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	031b      	lsls	r3, r3, #12
 8006106:	493f      	ldr	r1, [pc, #252]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 8006108:	4313      	orrs	r3, r2
 800610a:	628b      	str	r3, [r1, #40]	@ 0x28
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	3b01      	subs	r3, #1
 8006112:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	3b01      	subs	r3, #1
 800611c:	025b      	lsls	r3, r3, #9
 800611e:	b29b      	uxth	r3, r3
 8006120:	431a      	orrs	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	3b01      	subs	r3, #1
 8006128:	041b      	lsls	r3, r3, #16
 800612a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	3b01      	subs	r3, #1
 8006136:	061b      	lsls	r3, r3, #24
 8006138:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800613c:	4931      	ldr	r1, [pc, #196]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 800613e:	4313      	orrs	r3, r2
 8006140:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006142:	4b30      	ldr	r3, [pc, #192]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 8006144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006146:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	492d      	ldr	r1, [pc, #180]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 8006150:	4313      	orrs	r3, r2
 8006152:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006154:	4b2b      	ldr	r3, [pc, #172]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 8006156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006158:	f023 0220 	bic.w	r2, r3, #32
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	4928      	ldr	r1, [pc, #160]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 8006162:	4313      	orrs	r3, r2
 8006164:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006166:	4b27      	ldr	r3, [pc, #156]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 8006168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616a:	4a26      	ldr	r2, [pc, #152]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 800616c:	f023 0310 	bic.w	r3, r3, #16
 8006170:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006172:	4b24      	ldr	r3, [pc, #144]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 8006174:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006176:	4b24      	ldr	r3, [pc, #144]	@ (8006208 <RCCEx_PLL2_Config+0x160>)
 8006178:	4013      	ands	r3, r2
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	69d2      	ldr	r2, [r2, #28]
 800617e:	00d2      	lsls	r2, r2, #3
 8006180:	4920      	ldr	r1, [pc, #128]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 8006182:	4313      	orrs	r3, r2
 8006184:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006186:	4b1f      	ldr	r3, [pc, #124]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 8006188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618a:	4a1e      	ldr	r2, [pc, #120]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 800618c:	f043 0310 	orr.w	r3, r3, #16
 8006190:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d106      	bne.n	80061a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006198:	4b1a      	ldr	r3, [pc, #104]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 800619a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619c:	4a19      	ldr	r2, [pc, #100]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 800619e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061a4:	e00f      	b.n	80061c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d106      	bne.n	80061ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80061ac:	4b15      	ldr	r3, [pc, #84]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 80061ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b0:	4a14      	ldr	r2, [pc, #80]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 80061b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061b8:	e005      	b.n	80061c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80061ba:	4b12      	ldr	r3, [pc, #72]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 80061bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061be:	4a11      	ldr	r2, [pc, #68]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 80061c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80061c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80061c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a0e      	ldr	r2, [pc, #56]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 80061cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80061d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061d2:	f7fb f911 	bl	80013f8 <HAL_GetTick>
 80061d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80061d8:	e008      	b.n	80061ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80061da:	f7fb f90d 	bl	80013f8 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d901      	bls.n	80061ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e006      	b.n	80061fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80061ec:	4b05      	ldr	r3, [pc, #20]	@ (8006204 <RCCEx_PLL2_Config+0x15c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0f0      	beq.n	80061da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	58024400 	.word	0x58024400
 8006208:	ffff0007 	.word	0xffff0007

0800620c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800621a:	4b53      	ldr	r3, [pc, #332]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 800621c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	2b03      	cmp	r3, #3
 8006224:	d101      	bne.n	800622a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e099      	b.n	800635e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800622a:	4b4f      	ldr	r3, [pc, #316]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a4e      	ldr	r2, [pc, #312]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 8006230:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006236:	f7fb f8df 	bl	80013f8 <HAL_GetTick>
 800623a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800623c:	e008      	b.n	8006250 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800623e:	f7fb f8db 	bl	80013f8 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	2b02      	cmp	r3, #2
 800624a:	d901      	bls.n	8006250 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e086      	b.n	800635e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006250:	4b45      	ldr	r3, [pc, #276]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1f0      	bne.n	800623e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800625c:	4b42      	ldr	r3, [pc, #264]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 800625e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006260:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	051b      	lsls	r3, r3, #20
 800626a:	493f      	ldr	r1, [pc, #252]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 800626c:	4313      	orrs	r3, r2
 800626e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	3b01      	subs	r3, #1
 8006276:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	3b01      	subs	r3, #1
 8006280:	025b      	lsls	r3, r3, #9
 8006282:	b29b      	uxth	r3, r3
 8006284:	431a      	orrs	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	3b01      	subs	r3, #1
 800628c:	041b      	lsls	r3, r3, #16
 800628e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006292:	431a      	orrs	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	3b01      	subs	r3, #1
 800629a:	061b      	lsls	r3, r3, #24
 800629c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80062a0:	4931      	ldr	r1, [pc, #196]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80062a6:	4b30      	ldr	r3, [pc, #192]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 80062a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	492d      	ldr	r1, [pc, #180]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80062b8:	4b2b      	ldr	r3, [pc, #172]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 80062ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	4928      	ldr	r1, [pc, #160]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80062ca:	4b27      	ldr	r3, [pc, #156]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 80062cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ce:	4a26      	ldr	r2, [pc, #152]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 80062d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80062d6:	4b24      	ldr	r3, [pc, #144]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 80062d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062da:	4b24      	ldr	r3, [pc, #144]	@ (800636c <RCCEx_PLL3_Config+0x160>)
 80062dc:	4013      	ands	r3, r2
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	69d2      	ldr	r2, [r2, #28]
 80062e2:	00d2      	lsls	r2, r2, #3
 80062e4:	4920      	ldr	r1, [pc, #128]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80062ea:	4b1f      	ldr	r3, [pc, #124]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 80062ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 80062f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d106      	bne.n	800630a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80062fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 80062fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006300:	4a19      	ldr	r2, [pc, #100]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 8006302:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006306:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006308:	e00f      	b.n	800632a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d106      	bne.n	800631e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006310:	4b15      	ldr	r3, [pc, #84]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 8006312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006314:	4a14      	ldr	r2, [pc, #80]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 8006316:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800631a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800631c:	e005      	b.n	800632a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800631e:	4b12      	ldr	r3, [pc, #72]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 8006320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006322:	4a11      	ldr	r2, [pc, #68]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 8006324:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006328:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800632a:	4b0f      	ldr	r3, [pc, #60]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a0e      	ldr	r2, [pc, #56]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 8006330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006336:	f7fb f85f 	bl	80013f8 <HAL_GetTick>
 800633a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800633c:	e008      	b.n	8006350 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800633e:	f7fb f85b 	bl	80013f8 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e006      	b.n	800635e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006350:	4b05      	ldr	r3, [pc, #20]	@ (8006368 <RCCEx_PLL3_Config+0x15c>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d0f0      	beq.n	800633e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800635c:	7bfb      	ldrb	r3, [r7, #15]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	58024400 	.word	0x58024400
 800636c:	ffff0007 	.word	0xffff0007

08006370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e049      	b.n	8006416 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d106      	bne.n	800639c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7fa fe16 	bl	8000fc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2202      	movs	r2, #2
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3304      	adds	r3, #4
 80063ac:	4619      	mov	r1, r3
 80063ae:	4610      	mov	r0, r2
 80063b0:	f000 f96e 	bl	8006690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d020      	beq.n	8006482 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d01b      	beq.n	8006482 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f06f 0202 	mvn.w	r2, #2
 8006452:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	f003 0303 	and.w	r3, r3, #3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f8f3 	bl	8006654 <HAL_TIM_IC_CaptureCallback>
 800646e:	e005      	b.n	800647c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f8e5 	bl	8006640 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f8f6 	bl	8006668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b00      	cmp	r3, #0
 800648a:	d020      	beq.n	80064ce <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f003 0304 	and.w	r3, r3, #4
 8006492:	2b00      	cmp	r3, #0
 8006494:	d01b      	beq.n	80064ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f06f 0204 	mvn.w	r2, #4
 800649e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d003      	beq.n	80064bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f8cd 	bl	8006654 <HAL_TIM_IC_CaptureCallback>
 80064ba:	e005      	b.n	80064c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f8bf 	bl	8006640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f8d0 	bl	8006668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f003 0308 	and.w	r3, r3, #8
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d020      	beq.n	800651a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d01b      	beq.n	800651a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f06f 0208 	mvn.w	r2, #8
 80064ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2204      	movs	r2, #4
 80064f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	f003 0303 	and.w	r3, r3, #3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f8a7 	bl	8006654 <HAL_TIM_IC_CaptureCallback>
 8006506:	e005      	b.n	8006514 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f899 	bl	8006640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f8aa 	bl	8006668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	f003 0310 	and.w	r3, r3, #16
 8006520:	2b00      	cmp	r3, #0
 8006522:	d020      	beq.n	8006566 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f003 0310 	and.w	r3, r3, #16
 800652a:	2b00      	cmp	r3, #0
 800652c:	d01b      	beq.n	8006566 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f06f 0210 	mvn.w	r2, #16
 8006536:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2208      	movs	r2, #8
 800653c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	69db      	ldr	r3, [r3, #28]
 8006544:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f881 	bl	8006654 <HAL_TIM_IC_CaptureCallback>
 8006552:	e005      	b.n	8006560 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f873 	bl	8006640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f884 	bl	8006668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00c      	beq.n	800658a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d007      	beq.n	800658a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f06f 0201 	mvn.w	r2, #1
 8006582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f851 	bl	800662c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006590:	2b00      	cmp	r3, #0
 8006592:	d104      	bne.n	800659e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00c      	beq.n	80065b8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d007      	beq.n	80065b8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80065b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f9aa 	bl	800690c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00c      	beq.n	80065dc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d007      	beq.n	80065dc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80065d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f9a2 	bl	8006920 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00c      	beq.n	8006600 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d007      	beq.n	8006600 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80065f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f83e 	bl	800667c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00c      	beq.n	8006624 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f003 0320 	and.w	r3, r3, #32
 8006610:	2b00      	cmp	r3, #0
 8006612:	d007      	beq.n	8006624 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f06f 0220 	mvn.w	r2, #32
 800661c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f96a 	bl	80068f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006624:	bf00      	nop
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a46      	ldr	r2, [pc, #280]	@ (80067bc <TIM_Base_SetConfig+0x12c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d013      	beq.n	80066d0 <TIM_Base_SetConfig+0x40>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ae:	d00f      	beq.n	80066d0 <TIM_Base_SetConfig+0x40>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a43      	ldr	r2, [pc, #268]	@ (80067c0 <TIM_Base_SetConfig+0x130>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d00b      	beq.n	80066d0 <TIM_Base_SetConfig+0x40>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a42      	ldr	r2, [pc, #264]	@ (80067c4 <TIM_Base_SetConfig+0x134>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d007      	beq.n	80066d0 <TIM_Base_SetConfig+0x40>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a41      	ldr	r2, [pc, #260]	@ (80067c8 <TIM_Base_SetConfig+0x138>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d003      	beq.n	80066d0 <TIM_Base_SetConfig+0x40>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a40      	ldr	r2, [pc, #256]	@ (80067cc <TIM_Base_SetConfig+0x13c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d108      	bne.n	80066e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a35      	ldr	r2, [pc, #212]	@ (80067bc <TIM_Base_SetConfig+0x12c>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d01f      	beq.n	800672a <TIM_Base_SetConfig+0x9a>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066f0:	d01b      	beq.n	800672a <TIM_Base_SetConfig+0x9a>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a32      	ldr	r2, [pc, #200]	@ (80067c0 <TIM_Base_SetConfig+0x130>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d017      	beq.n	800672a <TIM_Base_SetConfig+0x9a>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a31      	ldr	r2, [pc, #196]	@ (80067c4 <TIM_Base_SetConfig+0x134>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d013      	beq.n	800672a <TIM_Base_SetConfig+0x9a>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a30      	ldr	r2, [pc, #192]	@ (80067c8 <TIM_Base_SetConfig+0x138>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d00f      	beq.n	800672a <TIM_Base_SetConfig+0x9a>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a2f      	ldr	r2, [pc, #188]	@ (80067cc <TIM_Base_SetConfig+0x13c>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00b      	beq.n	800672a <TIM_Base_SetConfig+0x9a>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a2e      	ldr	r2, [pc, #184]	@ (80067d0 <TIM_Base_SetConfig+0x140>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d007      	beq.n	800672a <TIM_Base_SetConfig+0x9a>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a2d      	ldr	r2, [pc, #180]	@ (80067d4 <TIM_Base_SetConfig+0x144>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d003      	beq.n	800672a <TIM_Base_SetConfig+0x9a>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a2c      	ldr	r2, [pc, #176]	@ (80067d8 <TIM_Base_SetConfig+0x148>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d108      	bne.n	800673c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	4313      	orrs	r3, r2
 800673a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	689a      	ldr	r2, [r3, #8]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a16      	ldr	r2, [pc, #88]	@ (80067bc <TIM_Base_SetConfig+0x12c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d00f      	beq.n	8006788 <TIM_Base_SetConfig+0xf8>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a18      	ldr	r2, [pc, #96]	@ (80067cc <TIM_Base_SetConfig+0x13c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d00b      	beq.n	8006788 <TIM_Base_SetConfig+0xf8>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a17      	ldr	r2, [pc, #92]	@ (80067d0 <TIM_Base_SetConfig+0x140>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d007      	beq.n	8006788 <TIM_Base_SetConfig+0xf8>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a16      	ldr	r2, [pc, #88]	@ (80067d4 <TIM_Base_SetConfig+0x144>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d003      	beq.n	8006788 <TIM_Base_SetConfig+0xf8>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a15      	ldr	r2, [pc, #84]	@ (80067d8 <TIM_Base_SetConfig+0x148>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d103      	bne.n	8006790 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	691a      	ldr	r2, [r3, #16]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d105      	bne.n	80067ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f023 0201 	bic.w	r2, r3, #1
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	611a      	str	r2, [r3, #16]
  }
}
 80067ae:	bf00      	nop
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	40010000 	.word	0x40010000
 80067c0:	40000400 	.word	0x40000400
 80067c4:	40000800 	.word	0x40000800
 80067c8:	40000c00 	.word	0x40000c00
 80067cc:	40010400 	.word	0x40010400
 80067d0:	40014000 	.word	0x40014000
 80067d4:	40014400 	.word	0x40014400
 80067d8:	40014800 	.word	0x40014800

080067dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d101      	bne.n	80067f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067f0:	2302      	movs	r3, #2
 80067f2:	e06d      	b.n	80068d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a30      	ldr	r2, [pc, #192]	@ (80068dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d004      	beq.n	8006828 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a2f      	ldr	r2, [pc, #188]	@ (80068e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d108      	bne.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800682e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	4313      	orrs	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006840:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a20      	ldr	r2, [pc, #128]	@ (80068dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d022      	beq.n	80068a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006866:	d01d      	beq.n	80068a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a1d      	ldr	r2, [pc, #116]	@ (80068e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d018      	beq.n	80068a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a1c      	ldr	r2, [pc, #112]	@ (80068e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d013      	beq.n	80068a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a1a      	ldr	r2, [pc, #104]	@ (80068ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d00e      	beq.n	80068a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a15      	ldr	r2, [pc, #84]	@ (80068e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d009      	beq.n	80068a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a16      	ldr	r2, [pc, #88]	@ (80068f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d004      	beq.n	80068a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a15      	ldr	r2, [pc, #84]	@ (80068f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d10c      	bne.n	80068be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	40010000 	.word	0x40010000
 80068e0:	40010400 	.word	0x40010400
 80068e4:	40000400 	.word	0x40000400
 80068e8:	40000800 	.word	0x40000800
 80068ec:	40000c00 	.word	0x40000c00
 80068f0:	40001800 	.word	0x40001800
 80068f4:	40014000 	.word	0x40014000

080068f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e042      	b.n	80069cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800694c:	2b00      	cmp	r3, #0
 800694e:	d106      	bne.n	800695e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7fa fb5d 	bl	8001018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2224      	movs	r2, #36	@ 0x24
 8006962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0201 	bic.w	r2, r2, #1
 8006974:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fd90 	bl	80074a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f825 	bl	80069d4 <UART_SetConfig>
 800698a:	4603      	mov	r3, r0
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e01b      	b.n	80069cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80069b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f042 0201 	orr.w	r2, r2, #1
 80069c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fe0f 	bl	80075e8 <UART_CheckIdleState>
 80069ca:	4603      	mov	r3, r0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069d8:	b092      	sub	sp, #72	@ 0x48
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	431a      	orrs	r2, r3
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	431a      	orrs	r2, r3
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	4bbe      	ldr	r3, [pc, #760]	@ (8006cfc <UART_SetConfig+0x328>)
 8006a04:	4013      	ands	r3, r2
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	6812      	ldr	r2, [r2, #0]
 8006a0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a0c:	430b      	orrs	r3, r1
 8006a0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4ab3      	ldr	r2, [pc, #716]	@ (8006d00 <UART_SetConfig+0x32c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d004      	beq.n	8006a40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689a      	ldr	r2, [r3, #8]
 8006a46:	4baf      	ldr	r3, [pc, #700]	@ (8006d04 <UART_SetConfig+0x330>)
 8006a48:	4013      	ands	r3, r2
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	6812      	ldr	r2, [r2, #0]
 8006a4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a50:	430b      	orrs	r3, r1
 8006a52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5a:	f023 010f 	bic.w	r1, r3, #15
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4aa6      	ldr	r2, [pc, #664]	@ (8006d08 <UART_SetConfig+0x334>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d177      	bne.n	8006b64 <UART_SetConfig+0x190>
 8006a74:	4ba5      	ldr	r3, [pc, #660]	@ (8006d0c <UART_SetConfig+0x338>)
 8006a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a7c:	2b28      	cmp	r3, #40	@ 0x28
 8006a7e:	d86d      	bhi.n	8006b5c <UART_SetConfig+0x188>
 8006a80:	a201      	add	r2, pc, #4	@ (adr r2, 8006a88 <UART_SetConfig+0xb4>)
 8006a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a86:	bf00      	nop
 8006a88:	08006b2d 	.word	0x08006b2d
 8006a8c:	08006b5d 	.word	0x08006b5d
 8006a90:	08006b5d 	.word	0x08006b5d
 8006a94:	08006b5d 	.word	0x08006b5d
 8006a98:	08006b5d 	.word	0x08006b5d
 8006a9c:	08006b5d 	.word	0x08006b5d
 8006aa0:	08006b5d 	.word	0x08006b5d
 8006aa4:	08006b5d 	.word	0x08006b5d
 8006aa8:	08006b35 	.word	0x08006b35
 8006aac:	08006b5d 	.word	0x08006b5d
 8006ab0:	08006b5d 	.word	0x08006b5d
 8006ab4:	08006b5d 	.word	0x08006b5d
 8006ab8:	08006b5d 	.word	0x08006b5d
 8006abc:	08006b5d 	.word	0x08006b5d
 8006ac0:	08006b5d 	.word	0x08006b5d
 8006ac4:	08006b5d 	.word	0x08006b5d
 8006ac8:	08006b3d 	.word	0x08006b3d
 8006acc:	08006b5d 	.word	0x08006b5d
 8006ad0:	08006b5d 	.word	0x08006b5d
 8006ad4:	08006b5d 	.word	0x08006b5d
 8006ad8:	08006b5d 	.word	0x08006b5d
 8006adc:	08006b5d 	.word	0x08006b5d
 8006ae0:	08006b5d 	.word	0x08006b5d
 8006ae4:	08006b5d 	.word	0x08006b5d
 8006ae8:	08006b45 	.word	0x08006b45
 8006aec:	08006b5d 	.word	0x08006b5d
 8006af0:	08006b5d 	.word	0x08006b5d
 8006af4:	08006b5d 	.word	0x08006b5d
 8006af8:	08006b5d 	.word	0x08006b5d
 8006afc:	08006b5d 	.word	0x08006b5d
 8006b00:	08006b5d 	.word	0x08006b5d
 8006b04:	08006b5d 	.word	0x08006b5d
 8006b08:	08006b4d 	.word	0x08006b4d
 8006b0c:	08006b5d 	.word	0x08006b5d
 8006b10:	08006b5d 	.word	0x08006b5d
 8006b14:	08006b5d 	.word	0x08006b5d
 8006b18:	08006b5d 	.word	0x08006b5d
 8006b1c:	08006b5d 	.word	0x08006b5d
 8006b20:	08006b5d 	.word	0x08006b5d
 8006b24:	08006b5d 	.word	0x08006b5d
 8006b28:	08006b55 	.word	0x08006b55
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b32:	e222      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006b34:	2304      	movs	r3, #4
 8006b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b3a:	e21e      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006b3c:	2308      	movs	r3, #8
 8006b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b42:	e21a      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006b44:	2310      	movs	r3, #16
 8006b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b4a:	e216      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006b4c:	2320      	movs	r3, #32
 8006b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b52:	e212      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006b54:	2340      	movs	r3, #64	@ 0x40
 8006b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b5a:	e20e      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006b5c:	2380      	movs	r3, #128	@ 0x80
 8006b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b62:	e20a      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a69      	ldr	r2, [pc, #420]	@ (8006d10 <UART_SetConfig+0x33c>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d130      	bne.n	8006bd0 <UART_SetConfig+0x1fc>
 8006b6e:	4b67      	ldr	r3, [pc, #412]	@ (8006d0c <UART_SetConfig+0x338>)
 8006b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	2b05      	cmp	r3, #5
 8006b78:	d826      	bhi.n	8006bc8 <UART_SetConfig+0x1f4>
 8006b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b80 <UART_SetConfig+0x1ac>)
 8006b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b80:	08006b99 	.word	0x08006b99
 8006b84:	08006ba1 	.word	0x08006ba1
 8006b88:	08006ba9 	.word	0x08006ba9
 8006b8c:	08006bb1 	.word	0x08006bb1
 8006b90:	08006bb9 	.word	0x08006bb9
 8006b94:	08006bc1 	.word	0x08006bc1
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b9e:	e1ec      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006ba0:	2304      	movs	r3, #4
 8006ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ba6:	e1e8      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006ba8:	2308      	movs	r3, #8
 8006baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bae:	e1e4      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006bb0:	2310      	movs	r3, #16
 8006bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bb6:	e1e0      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006bb8:	2320      	movs	r3, #32
 8006bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bbe:	e1dc      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006bc0:	2340      	movs	r3, #64	@ 0x40
 8006bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bc6:	e1d8      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006bc8:	2380      	movs	r3, #128	@ 0x80
 8006bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bce:	e1d4      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a4f      	ldr	r2, [pc, #316]	@ (8006d14 <UART_SetConfig+0x340>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d130      	bne.n	8006c3c <UART_SetConfig+0x268>
 8006bda:	4b4c      	ldr	r3, [pc, #304]	@ (8006d0c <UART_SetConfig+0x338>)
 8006bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	2b05      	cmp	r3, #5
 8006be4:	d826      	bhi.n	8006c34 <UART_SetConfig+0x260>
 8006be6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bec <UART_SetConfig+0x218>)
 8006be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bec:	08006c05 	.word	0x08006c05
 8006bf0:	08006c0d 	.word	0x08006c0d
 8006bf4:	08006c15 	.word	0x08006c15
 8006bf8:	08006c1d 	.word	0x08006c1d
 8006bfc:	08006c25 	.word	0x08006c25
 8006c00:	08006c2d 	.word	0x08006c2d
 8006c04:	2300      	movs	r3, #0
 8006c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c0a:	e1b6      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006c0c:	2304      	movs	r3, #4
 8006c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c12:	e1b2      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006c14:	2308      	movs	r3, #8
 8006c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c1a:	e1ae      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006c1c:	2310      	movs	r3, #16
 8006c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c22:	e1aa      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006c24:	2320      	movs	r3, #32
 8006c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c2a:	e1a6      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006c2c:	2340      	movs	r3, #64	@ 0x40
 8006c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c32:	e1a2      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006c34:	2380      	movs	r3, #128	@ 0x80
 8006c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c3a:	e19e      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a35      	ldr	r2, [pc, #212]	@ (8006d18 <UART_SetConfig+0x344>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d130      	bne.n	8006ca8 <UART_SetConfig+0x2d4>
 8006c46:	4b31      	ldr	r3, [pc, #196]	@ (8006d0c <UART_SetConfig+0x338>)
 8006c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c4a:	f003 0307 	and.w	r3, r3, #7
 8006c4e:	2b05      	cmp	r3, #5
 8006c50:	d826      	bhi.n	8006ca0 <UART_SetConfig+0x2cc>
 8006c52:	a201      	add	r2, pc, #4	@ (adr r2, 8006c58 <UART_SetConfig+0x284>)
 8006c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c58:	08006c71 	.word	0x08006c71
 8006c5c:	08006c79 	.word	0x08006c79
 8006c60:	08006c81 	.word	0x08006c81
 8006c64:	08006c89 	.word	0x08006c89
 8006c68:	08006c91 	.word	0x08006c91
 8006c6c:	08006c99 	.word	0x08006c99
 8006c70:	2300      	movs	r3, #0
 8006c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c76:	e180      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006c78:	2304      	movs	r3, #4
 8006c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c7e:	e17c      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006c80:	2308      	movs	r3, #8
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c86:	e178      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006c88:	2310      	movs	r3, #16
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c8e:	e174      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006c90:	2320      	movs	r3, #32
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c96:	e170      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006c98:	2340      	movs	r3, #64	@ 0x40
 8006c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c9e:	e16c      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006ca0:	2380      	movs	r3, #128	@ 0x80
 8006ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ca6:	e168      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a1b      	ldr	r2, [pc, #108]	@ (8006d1c <UART_SetConfig+0x348>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d142      	bne.n	8006d38 <UART_SetConfig+0x364>
 8006cb2:	4b16      	ldr	r3, [pc, #88]	@ (8006d0c <UART_SetConfig+0x338>)
 8006cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	2b05      	cmp	r3, #5
 8006cbc:	d838      	bhi.n	8006d30 <UART_SetConfig+0x35c>
 8006cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc4 <UART_SetConfig+0x2f0>)
 8006cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc4:	08006cdd 	.word	0x08006cdd
 8006cc8:	08006ce5 	.word	0x08006ce5
 8006ccc:	08006ced 	.word	0x08006ced
 8006cd0:	08006cf5 	.word	0x08006cf5
 8006cd4:	08006d21 	.word	0x08006d21
 8006cd8:	08006d29 	.word	0x08006d29
 8006cdc:	2300      	movs	r3, #0
 8006cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ce2:	e14a      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006ce4:	2304      	movs	r3, #4
 8006ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cea:	e146      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006cec:	2308      	movs	r3, #8
 8006cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cf2:	e142      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006cf4:	2310      	movs	r3, #16
 8006cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cfa:	e13e      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006cfc:	cfff69f3 	.word	0xcfff69f3
 8006d00:	58000c00 	.word	0x58000c00
 8006d04:	11fff4ff 	.word	0x11fff4ff
 8006d08:	40011000 	.word	0x40011000
 8006d0c:	58024400 	.word	0x58024400
 8006d10:	40004400 	.word	0x40004400
 8006d14:	40004800 	.word	0x40004800
 8006d18:	40004c00 	.word	0x40004c00
 8006d1c:	40005000 	.word	0x40005000
 8006d20:	2320      	movs	r3, #32
 8006d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d26:	e128      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006d28:	2340      	movs	r3, #64	@ 0x40
 8006d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d2e:	e124      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006d30:	2380      	movs	r3, #128	@ 0x80
 8006d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d36:	e120      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4acb      	ldr	r2, [pc, #812]	@ (800706c <UART_SetConfig+0x698>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d176      	bne.n	8006e30 <UART_SetConfig+0x45c>
 8006d42:	4bcb      	ldr	r3, [pc, #812]	@ (8007070 <UART_SetConfig+0x69c>)
 8006d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d4a:	2b28      	cmp	r3, #40	@ 0x28
 8006d4c:	d86c      	bhi.n	8006e28 <UART_SetConfig+0x454>
 8006d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d54 <UART_SetConfig+0x380>)
 8006d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d54:	08006df9 	.word	0x08006df9
 8006d58:	08006e29 	.word	0x08006e29
 8006d5c:	08006e29 	.word	0x08006e29
 8006d60:	08006e29 	.word	0x08006e29
 8006d64:	08006e29 	.word	0x08006e29
 8006d68:	08006e29 	.word	0x08006e29
 8006d6c:	08006e29 	.word	0x08006e29
 8006d70:	08006e29 	.word	0x08006e29
 8006d74:	08006e01 	.word	0x08006e01
 8006d78:	08006e29 	.word	0x08006e29
 8006d7c:	08006e29 	.word	0x08006e29
 8006d80:	08006e29 	.word	0x08006e29
 8006d84:	08006e29 	.word	0x08006e29
 8006d88:	08006e29 	.word	0x08006e29
 8006d8c:	08006e29 	.word	0x08006e29
 8006d90:	08006e29 	.word	0x08006e29
 8006d94:	08006e09 	.word	0x08006e09
 8006d98:	08006e29 	.word	0x08006e29
 8006d9c:	08006e29 	.word	0x08006e29
 8006da0:	08006e29 	.word	0x08006e29
 8006da4:	08006e29 	.word	0x08006e29
 8006da8:	08006e29 	.word	0x08006e29
 8006dac:	08006e29 	.word	0x08006e29
 8006db0:	08006e29 	.word	0x08006e29
 8006db4:	08006e11 	.word	0x08006e11
 8006db8:	08006e29 	.word	0x08006e29
 8006dbc:	08006e29 	.word	0x08006e29
 8006dc0:	08006e29 	.word	0x08006e29
 8006dc4:	08006e29 	.word	0x08006e29
 8006dc8:	08006e29 	.word	0x08006e29
 8006dcc:	08006e29 	.word	0x08006e29
 8006dd0:	08006e29 	.word	0x08006e29
 8006dd4:	08006e19 	.word	0x08006e19
 8006dd8:	08006e29 	.word	0x08006e29
 8006ddc:	08006e29 	.word	0x08006e29
 8006de0:	08006e29 	.word	0x08006e29
 8006de4:	08006e29 	.word	0x08006e29
 8006de8:	08006e29 	.word	0x08006e29
 8006dec:	08006e29 	.word	0x08006e29
 8006df0:	08006e29 	.word	0x08006e29
 8006df4:	08006e21 	.word	0x08006e21
 8006df8:	2301      	movs	r3, #1
 8006dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dfe:	e0bc      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006e00:	2304      	movs	r3, #4
 8006e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e06:	e0b8      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006e08:	2308      	movs	r3, #8
 8006e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e0e:	e0b4      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006e10:	2310      	movs	r3, #16
 8006e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e16:	e0b0      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006e18:	2320      	movs	r3, #32
 8006e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e1e:	e0ac      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006e20:	2340      	movs	r3, #64	@ 0x40
 8006e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e26:	e0a8      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006e28:	2380      	movs	r3, #128	@ 0x80
 8006e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e2e:	e0a4      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a8f      	ldr	r2, [pc, #572]	@ (8007074 <UART_SetConfig+0x6a0>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d130      	bne.n	8006e9c <UART_SetConfig+0x4c8>
 8006e3a:	4b8d      	ldr	r3, [pc, #564]	@ (8007070 <UART_SetConfig+0x69c>)
 8006e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e3e:	f003 0307 	and.w	r3, r3, #7
 8006e42:	2b05      	cmp	r3, #5
 8006e44:	d826      	bhi.n	8006e94 <UART_SetConfig+0x4c0>
 8006e46:	a201      	add	r2, pc, #4	@ (adr r2, 8006e4c <UART_SetConfig+0x478>)
 8006e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4c:	08006e65 	.word	0x08006e65
 8006e50:	08006e6d 	.word	0x08006e6d
 8006e54:	08006e75 	.word	0x08006e75
 8006e58:	08006e7d 	.word	0x08006e7d
 8006e5c:	08006e85 	.word	0x08006e85
 8006e60:	08006e8d 	.word	0x08006e8d
 8006e64:	2300      	movs	r3, #0
 8006e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e6a:	e086      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006e6c:	2304      	movs	r3, #4
 8006e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e72:	e082      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006e74:	2308      	movs	r3, #8
 8006e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e7a:	e07e      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006e7c:	2310      	movs	r3, #16
 8006e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e82:	e07a      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006e84:	2320      	movs	r3, #32
 8006e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e8a:	e076      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006e8c:	2340      	movs	r3, #64	@ 0x40
 8006e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e92:	e072      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006e94:	2380      	movs	r3, #128	@ 0x80
 8006e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e9a:	e06e      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a75      	ldr	r2, [pc, #468]	@ (8007078 <UART_SetConfig+0x6a4>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d130      	bne.n	8006f08 <UART_SetConfig+0x534>
 8006ea6:	4b72      	ldr	r3, [pc, #456]	@ (8007070 <UART_SetConfig+0x69c>)
 8006ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eaa:	f003 0307 	and.w	r3, r3, #7
 8006eae:	2b05      	cmp	r3, #5
 8006eb0:	d826      	bhi.n	8006f00 <UART_SetConfig+0x52c>
 8006eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8006eb8 <UART_SetConfig+0x4e4>)
 8006eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb8:	08006ed1 	.word	0x08006ed1
 8006ebc:	08006ed9 	.word	0x08006ed9
 8006ec0:	08006ee1 	.word	0x08006ee1
 8006ec4:	08006ee9 	.word	0x08006ee9
 8006ec8:	08006ef1 	.word	0x08006ef1
 8006ecc:	08006ef9 	.word	0x08006ef9
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ed6:	e050      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006ed8:	2304      	movs	r3, #4
 8006eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ede:	e04c      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006ee0:	2308      	movs	r3, #8
 8006ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ee6:	e048      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006ee8:	2310      	movs	r3, #16
 8006eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eee:	e044      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006ef0:	2320      	movs	r3, #32
 8006ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ef6:	e040      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006ef8:	2340      	movs	r3, #64	@ 0x40
 8006efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006efe:	e03c      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006f00:	2380      	movs	r3, #128	@ 0x80
 8006f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f06:	e038      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a5b      	ldr	r2, [pc, #364]	@ (800707c <UART_SetConfig+0x6a8>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d130      	bne.n	8006f74 <UART_SetConfig+0x5a0>
 8006f12:	4b57      	ldr	r3, [pc, #348]	@ (8007070 <UART_SetConfig+0x69c>)
 8006f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f16:	f003 0307 	and.w	r3, r3, #7
 8006f1a:	2b05      	cmp	r3, #5
 8006f1c:	d826      	bhi.n	8006f6c <UART_SetConfig+0x598>
 8006f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f24 <UART_SetConfig+0x550>)
 8006f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f24:	08006f3d 	.word	0x08006f3d
 8006f28:	08006f45 	.word	0x08006f45
 8006f2c:	08006f4d 	.word	0x08006f4d
 8006f30:	08006f55 	.word	0x08006f55
 8006f34:	08006f5d 	.word	0x08006f5d
 8006f38:	08006f65 	.word	0x08006f65
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f42:	e01a      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006f44:	2304      	movs	r3, #4
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f4a:	e016      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006f4c:	2308      	movs	r3, #8
 8006f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f52:	e012      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006f54:	2310      	movs	r3, #16
 8006f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f5a:	e00e      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006f5c:	2320      	movs	r3, #32
 8006f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f62:	e00a      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006f64:	2340      	movs	r3, #64	@ 0x40
 8006f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f6a:	e006      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006f6c:	2380      	movs	r3, #128	@ 0x80
 8006f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f72:	e002      	b.n	8006f7a <UART_SetConfig+0x5a6>
 8006f74:	2380      	movs	r3, #128	@ 0x80
 8006f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a3f      	ldr	r2, [pc, #252]	@ (800707c <UART_SetConfig+0x6a8>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	f040 80f8 	bne.w	8007176 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f8a:	2b20      	cmp	r3, #32
 8006f8c:	dc46      	bgt.n	800701c <UART_SetConfig+0x648>
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	f2c0 8082 	blt.w	8007098 <UART_SetConfig+0x6c4>
 8006f94:	3b02      	subs	r3, #2
 8006f96:	2b1e      	cmp	r3, #30
 8006f98:	d87e      	bhi.n	8007098 <UART_SetConfig+0x6c4>
 8006f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa0 <UART_SetConfig+0x5cc>)
 8006f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa0:	08007023 	.word	0x08007023
 8006fa4:	08007099 	.word	0x08007099
 8006fa8:	0800702b 	.word	0x0800702b
 8006fac:	08007099 	.word	0x08007099
 8006fb0:	08007099 	.word	0x08007099
 8006fb4:	08007099 	.word	0x08007099
 8006fb8:	0800703b 	.word	0x0800703b
 8006fbc:	08007099 	.word	0x08007099
 8006fc0:	08007099 	.word	0x08007099
 8006fc4:	08007099 	.word	0x08007099
 8006fc8:	08007099 	.word	0x08007099
 8006fcc:	08007099 	.word	0x08007099
 8006fd0:	08007099 	.word	0x08007099
 8006fd4:	08007099 	.word	0x08007099
 8006fd8:	0800704b 	.word	0x0800704b
 8006fdc:	08007099 	.word	0x08007099
 8006fe0:	08007099 	.word	0x08007099
 8006fe4:	08007099 	.word	0x08007099
 8006fe8:	08007099 	.word	0x08007099
 8006fec:	08007099 	.word	0x08007099
 8006ff0:	08007099 	.word	0x08007099
 8006ff4:	08007099 	.word	0x08007099
 8006ff8:	08007099 	.word	0x08007099
 8006ffc:	08007099 	.word	0x08007099
 8007000:	08007099 	.word	0x08007099
 8007004:	08007099 	.word	0x08007099
 8007008:	08007099 	.word	0x08007099
 800700c:	08007099 	.word	0x08007099
 8007010:	08007099 	.word	0x08007099
 8007014:	08007099 	.word	0x08007099
 8007018:	0800708b 	.word	0x0800708b
 800701c:	2b40      	cmp	r3, #64	@ 0x40
 800701e:	d037      	beq.n	8007090 <UART_SetConfig+0x6bc>
 8007020:	e03a      	b.n	8007098 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007022:	f7fe fc31 	bl	8005888 <HAL_RCCEx_GetD3PCLK1Freq>
 8007026:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007028:	e03c      	b.n	80070a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800702a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800702e:	4618      	mov	r0, r3
 8007030:	f7fe fc40 	bl	80058b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007038:	e034      	b.n	80070a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800703a:	f107 0318 	add.w	r3, r7, #24
 800703e:	4618      	mov	r0, r3
 8007040:	f7fe fd8c 	bl	8005b5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007048:	e02c      	b.n	80070a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800704a:	4b09      	ldr	r3, [pc, #36]	@ (8007070 <UART_SetConfig+0x69c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0320 	and.w	r3, r3, #32
 8007052:	2b00      	cmp	r3, #0
 8007054:	d016      	beq.n	8007084 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007056:	4b06      	ldr	r3, [pc, #24]	@ (8007070 <UART_SetConfig+0x69c>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	08db      	lsrs	r3, r3, #3
 800705c:	f003 0303 	and.w	r3, r3, #3
 8007060:	4a07      	ldr	r2, [pc, #28]	@ (8007080 <UART_SetConfig+0x6ac>)
 8007062:	fa22 f303 	lsr.w	r3, r2, r3
 8007066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007068:	e01c      	b.n	80070a4 <UART_SetConfig+0x6d0>
 800706a:	bf00      	nop
 800706c:	40011400 	.word	0x40011400
 8007070:	58024400 	.word	0x58024400
 8007074:	40007800 	.word	0x40007800
 8007078:	40007c00 	.word	0x40007c00
 800707c:	58000c00 	.word	0x58000c00
 8007080:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007084:	4b9d      	ldr	r3, [pc, #628]	@ (80072fc <UART_SetConfig+0x928>)
 8007086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007088:	e00c      	b.n	80070a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800708a:	4b9d      	ldr	r3, [pc, #628]	@ (8007300 <UART_SetConfig+0x92c>)
 800708c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800708e:	e009      	b.n	80070a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007090:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007096:	e005      	b.n	80070a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80070a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 81de 	beq.w	8007468 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b0:	4a94      	ldr	r2, [pc, #592]	@ (8007304 <UART_SetConfig+0x930>)
 80070b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070b6:	461a      	mov	r2, r3
 80070b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80070be:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	4613      	mov	r3, r2
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	4413      	add	r3, r2
 80070ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d305      	bcc.n	80070dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070d8:	429a      	cmp	r2, r3
 80070da:	d903      	bls.n	80070e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80070e2:	e1c1      	b.n	8007468 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070e6:	2200      	movs	r2, #0
 80070e8:	60bb      	str	r3, [r7, #8]
 80070ea:	60fa      	str	r2, [r7, #12]
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f0:	4a84      	ldr	r2, [pc, #528]	@ (8007304 <UART_SetConfig+0x930>)
 80070f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	2200      	movs	r2, #0
 80070fa:	603b      	str	r3, [r7, #0]
 80070fc:	607a      	str	r2, [r7, #4]
 80070fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007102:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007106:	f7f9 f8e7 	bl	80002d8 <__aeabi_uldivmod>
 800710a:	4602      	mov	r2, r0
 800710c:	460b      	mov	r3, r1
 800710e:	4610      	mov	r0, r2
 8007110:	4619      	mov	r1, r3
 8007112:	f04f 0200 	mov.w	r2, #0
 8007116:	f04f 0300 	mov.w	r3, #0
 800711a:	020b      	lsls	r3, r1, #8
 800711c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007120:	0202      	lsls	r2, r0, #8
 8007122:	6979      	ldr	r1, [r7, #20]
 8007124:	6849      	ldr	r1, [r1, #4]
 8007126:	0849      	lsrs	r1, r1, #1
 8007128:	2000      	movs	r0, #0
 800712a:	460c      	mov	r4, r1
 800712c:	4605      	mov	r5, r0
 800712e:	eb12 0804 	adds.w	r8, r2, r4
 8007132:	eb43 0905 	adc.w	r9, r3, r5
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	469a      	mov	sl, r3
 800713e:	4693      	mov	fp, r2
 8007140:	4652      	mov	r2, sl
 8007142:	465b      	mov	r3, fp
 8007144:	4640      	mov	r0, r8
 8007146:	4649      	mov	r1, r9
 8007148:	f7f9 f8c6 	bl	80002d8 <__aeabi_uldivmod>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	4613      	mov	r3, r2
 8007152:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007156:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800715a:	d308      	bcc.n	800716e <UART_SetConfig+0x79a>
 800715c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007162:	d204      	bcs.n	800716e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800716a:	60da      	str	r2, [r3, #12]
 800716c:	e17c      	b.n	8007468 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007174:	e178      	b.n	8007468 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800717e:	f040 80c5 	bne.w	800730c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007182:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007186:	2b20      	cmp	r3, #32
 8007188:	dc48      	bgt.n	800721c <UART_SetConfig+0x848>
 800718a:	2b00      	cmp	r3, #0
 800718c:	db7b      	blt.n	8007286 <UART_SetConfig+0x8b2>
 800718e:	2b20      	cmp	r3, #32
 8007190:	d879      	bhi.n	8007286 <UART_SetConfig+0x8b2>
 8007192:	a201      	add	r2, pc, #4	@ (adr r2, 8007198 <UART_SetConfig+0x7c4>)
 8007194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007198:	08007223 	.word	0x08007223
 800719c:	0800722b 	.word	0x0800722b
 80071a0:	08007287 	.word	0x08007287
 80071a4:	08007287 	.word	0x08007287
 80071a8:	08007233 	.word	0x08007233
 80071ac:	08007287 	.word	0x08007287
 80071b0:	08007287 	.word	0x08007287
 80071b4:	08007287 	.word	0x08007287
 80071b8:	08007243 	.word	0x08007243
 80071bc:	08007287 	.word	0x08007287
 80071c0:	08007287 	.word	0x08007287
 80071c4:	08007287 	.word	0x08007287
 80071c8:	08007287 	.word	0x08007287
 80071cc:	08007287 	.word	0x08007287
 80071d0:	08007287 	.word	0x08007287
 80071d4:	08007287 	.word	0x08007287
 80071d8:	08007253 	.word	0x08007253
 80071dc:	08007287 	.word	0x08007287
 80071e0:	08007287 	.word	0x08007287
 80071e4:	08007287 	.word	0x08007287
 80071e8:	08007287 	.word	0x08007287
 80071ec:	08007287 	.word	0x08007287
 80071f0:	08007287 	.word	0x08007287
 80071f4:	08007287 	.word	0x08007287
 80071f8:	08007287 	.word	0x08007287
 80071fc:	08007287 	.word	0x08007287
 8007200:	08007287 	.word	0x08007287
 8007204:	08007287 	.word	0x08007287
 8007208:	08007287 	.word	0x08007287
 800720c:	08007287 	.word	0x08007287
 8007210:	08007287 	.word	0x08007287
 8007214:	08007287 	.word	0x08007287
 8007218:	08007279 	.word	0x08007279
 800721c:	2b40      	cmp	r3, #64	@ 0x40
 800721e:	d02e      	beq.n	800727e <UART_SetConfig+0x8aa>
 8007220:	e031      	b.n	8007286 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007222:	f7fc fb7b 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 8007226:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007228:	e033      	b.n	8007292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800722a:	f7fc fb8d 	bl	8003948 <HAL_RCC_GetPCLK2Freq>
 800722e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007230:	e02f      	b.n	8007292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007236:	4618      	mov	r0, r3
 8007238:	f7fe fb3c 	bl	80058b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800723c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800723e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007240:	e027      	b.n	8007292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007242:	f107 0318 	add.w	r3, r7, #24
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe fc88 	bl	8005b5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007250:	e01f      	b.n	8007292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007252:	4b2d      	ldr	r3, [pc, #180]	@ (8007308 <UART_SetConfig+0x934>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b00      	cmp	r3, #0
 800725c:	d009      	beq.n	8007272 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800725e:	4b2a      	ldr	r3, [pc, #168]	@ (8007308 <UART_SetConfig+0x934>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	08db      	lsrs	r3, r3, #3
 8007264:	f003 0303 	and.w	r3, r3, #3
 8007268:	4a24      	ldr	r2, [pc, #144]	@ (80072fc <UART_SetConfig+0x928>)
 800726a:	fa22 f303 	lsr.w	r3, r2, r3
 800726e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007270:	e00f      	b.n	8007292 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007272:	4b22      	ldr	r3, [pc, #136]	@ (80072fc <UART_SetConfig+0x928>)
 8007274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007276:	e00c      	b.n	8007292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007278:	4b21      	ldr	r3, [pc, #132]	@ (8007300 <UART_SetConfig+0x92c>)
 800727a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800727c:	e009      	b.n	8007292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800727e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007284:	e005      	b.n	8007292 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007290:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 80e7 	beq.w	8007468 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729e:	4a19      	ldr	r2, [pc, #100]	@ (8007304 <UART_SetConfig+0x930>)
 80072a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072a4:	461a      	mov	r2, r3
 80072a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80072ac:	005a      	lsls	r2, r3, #1
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	085b      	lsrs	r3, r3, #1
 80072b4:	441a      	add	r2, r3
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80072be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c2:	2b0f      	cmp	r3, #15
 80072c4:	d916      	bls.n	80072f4 <UART_SetConfig+0x920>
 80072c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072cc:	d212      	bcs.n	80072f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	f023 030f 	bic.w	r3, r3, #15
 80072d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072da:	085b      	lsrs	r3, r3, #1
 80072dc:	b29b      	uxth	r3, r3
 80072de:	f003 0307 	and.w	r3, r3, #7
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80072e6:	4313      	orrs	r3, r2
 80072e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80072f0:	60da      	str	r2, [r3, #12]
 80072f2:	e0b9      	b.n	8007468 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80072fa:	e0b5      	b.n	8007468 <UART_SetConfig+0xa94>
 80072fc:	03d09000 	.word	0x03d09000
 8007300:	003d0900 	.word	0x003d0900
 8007304:	08007b6c 	.word	0x08007b6c
 8007308:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800730c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007310:	2b20      	cmp	r3, #32
 8007312:	dc49      	bgt.n	80073a8 <UART_SetConfig+0x9d4>
 8007314:	2b00      	cmp	r3, #0
 8007316:	db7c      	blt.n	8007412 <UART_SetConfig+0xa3e>
 8007318:	2b20      	cmp	r3, #32
 800731a:	d87a      	bhi.n	8007412 <UART_SetConfig+0xa3e>
 800731c:	a201      	add	r2, pc, #4	@ (adr r2, 8007324 <UART_SetConfig+0x950>)
 800731e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007322:	bf00      	nop
 8007324:	080073af 	.word	0x080073af
 8007328:	080073b7 	.word	0x080073b7
 800732c:	08007413 	.word	0x08007413
 8007330:	08007413 	.word	0x08007413
 8007334:	080073bf 	.word	0x080073bf
 8007338:	08007413 	.word	0x08007413
 800733c:	08007413 	.word	0x08007413
 8007340:	08007413 	.word	0x08007413
 8007344:	080073cf 	.word	0x080073cf
 8007348:	08007413 	.word	0x08007413
 800734c:	08007413 	.word	0x08007413
 8007350:	08007413 	.word	0x08007413
 8007354:	08007413 	.word	0x08007413
 8007358:	08007413 	.word	0x08007413
 800735c:	08007413 	.word	0x08007413
 8007360:	08007413 	.word	0x08007413
 8007364:	080073df 	.word	0x080073df
 8007368:	08007413 	.word	0x08007413
 800736c:	08007413 	.word	0x08007413
 8007370:	08007413 	.word	0x08007413
 8007374:	08007413 	.word	0x08007413
 8007378:	08007413 	.word	0x08007413
 800737c:	08007413 	.word	0x08007413
 8007380:	08007413 	.word	0x08007413
 8007384:	08007413 	.word	0x08007413
 8007388:	08007413 	.word	0x08007413
 800738c:	08007413 	.word	0x08007413
 8007390:	08007413 	.word	0x08007413
 8007394:	08007413 	.word	0x08007413
 8007398:	08007413 	.word	0x08007413
 800739c:	08007413 	.word	0x08007413
 80073a0:	08007413 	.word	0x08007413
 80073a4:	08007405 	.word	0x08007405
 80073a8:	2b40      	cmp	r3, #64	@ 0x40
 80073aa:	d02e      	beq.n	800740a <UART_SetConfig+0xa36>
 80073ac:	e031      	b.n	8007412 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073ae:	f7fc fab5 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 80073b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80073b4:	e033      	b.n	800741e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073b6:	f7fc fac7 	bl	8003948 <HAL_RCC_GetPCLK2Freq>
 80073ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80073bc:	e02f      	b.n	800741e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fe fa76 	bl	80058b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80073c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073cc:	e027      	b.n	800741e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073ce:	f107 0318 	add.w	r3, r7, #24
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fe fbc2 	bl	8005b5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073dc:	e01f      	b.n	800741e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073de:	4b2d      	ldr	r3, [pc, #180]	@ (8007494 <UART_SetConfig+0xac0>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0320 	and.w	r3, r3, #32
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d009      	beq.n	80073fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073ea:	4b2a      	ldr	r3, [pc, #168]	@ (8007494 <UART_SetConfig+0xac0>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	08db      	lsrs	r3, r3, #3
 80073f0:	f003 0303 	and.w	r3, r3, #3
 80073f4:	4a28      	ldr	r2, [pc, #160]	@ (8007498 <UART_SetConfig+0xac4>)
 80073f6:	fa22 f303 	lsr.w	r3, r2, r3
 80073fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073fc:	e00f      	b.n	800741e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80073fe:	4b26      	ldr	r3, [pc, #152]	@ (8007498 <UART_SetConfig+0xac4>)
 8007400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007402:	e00c      	b.n	800741e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007404:	4b25      	ldr	r3, [pc, #148]	@ (800749c <UART_SetConfig+0xac8>)
 8007406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007408:	e009      	b.n	800741e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800740a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800740e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007410:	e005      	b.n	800741e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007412:	2300      	movs	r3, #0
 8007414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800741c:	bf00      	nop
    }

    if (pclk != 0U)
 800741e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007420:	2b00      	cmp	r3, #0
 8007422:	d021      	beq.n	8007468 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007428:	4a1d      	ldr	r2, [pc, #116]	@ (80074a0 <UART_SetConfig+0xacc>)
 800742a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800742e:	461a      	mov	r2, r3
 8007430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007432:	fbb3 f2f2 	udiv	r2, r3, r2
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	085b      	lsrs	r3, r3, #1
 800743c:	441a      	add	r2, r3
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	fbb2 f3f3 	udiv	r3, r2, r3
 8007446:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800744a:	2b0f      	cmp	r3, #15
 800744c:	d909      	bls.n	8007462 <UART_SetConfig+0xa8e>
 800744e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007454:	d205      	bcs.n	8007462 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007458:	b29a      	uxth	r2, r3
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	60da      	str	r2, [r3, #12]
 8007460:	e002      	b.n	8007468 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	2201      	movs	r2, #1
 800746c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2201      	movs	r2, #1
 8007474:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	2200      	movs	r2, #0
 800747c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2200      	movs	r2, #0
 8007482:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007484:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007488:	4618      	mov	r0, r3
 800748a:	3748      	adds	r7, #72	@ 0x48
 800748c:	46bd      	mov	sp, r7
 800748e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007492:	bf00      	nop
 8007494:	58024400 	.word	0x58024400
 8007498:	03d09000 	.word	0x03d09000
 800749c:	003d0900 	.word	0x003d0900
 80074a0:	08007b6c 	.word	0x08007b6c

080074a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b0:	f003 0308 	and.w	r3, r3, #8
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	430a      	orrs	r2, r1
 80074cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00a      	beq.n	80074f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f4:	f003 0302 	and.w	r3, r3, #2
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00a      	beq.n	8007512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007516:	f003 0304 	and.w	r3, r3, #4
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	430a      	orrs	r2, r1
 8007532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007538:	f003 0310 	and.w	r3, r3, #16
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00a      	beq.n	8007578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007580:	2b00      	cmp	r3, #0
 8007582:	d01a      	beq.n	80075ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800759e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075a2:	d10a      	bne.n	80075ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	605a      	str	r2, [r3, #4]
  }
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b098      	sub	sp, #96	@ 0x60
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075f8:	f7f9 fefe 	bl	80013f8 <HAL_GetTick>
 80075fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0308 	and.w	r3, r3, #8
 8007608:	2b08      	cmp	r3, #8
 800760a:	d12f      	bne.n	800766c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800760c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007614:	2200      	movs	r2, #0
 8007616:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f88e 	bl	800773c <UART_WaitOnFlagUntilTimeout>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d022      	beq.n	800766c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762e:	e853 3f00 	ldrex	r3, [r3]
 8007632:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800763a:	653b      	str	r3, [r7, #80]	@ 0x50
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007644:	647b      	str	r3, [r7, #68]	@ 0x44
 8007646:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007648:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800764a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800764c:	e841 2300 	strex	r3, r2, [r1]
 8007650:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1e6      	bne.n	8007626 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2220      	movs	r2, #32
 800765c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e063      	b.n	8007734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0304 	and.w	r3, r3, #4
 8007676:	2b04      	cmp	r3, #4
 8007678:	d149      	bne.n	800770e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800767a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007682:	2200      	movs	r2, #0
 8007684:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f857 	bl	800773c <UART_WaitOnFlagUntilTimeout>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d03c      	beq.n	800770e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	623b      	str	r3, [r7, #32]
   return(result);
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	461a      	mov	r2, r3
 80076b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80076b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e6      	bne.n	8007694 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3308      	adds	r3, #8
 80076cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f023 0301 	bic.w	r3, r3, #1
 80076dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3308      	adds	r3, #8
 80076e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076e6:	61fa      	str	r2, [r7, #28]
 80076e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ea:	69b9      	ldr	r1, [r7, #24]
 80076ec:	69fa      	ldr	r2, [r7, #28]
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	617b      	str	r3, [r7, #20]
   return(result);
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1e5      	bne.n	80076c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2220      	movs	r2, #32
 80076fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e012      	b.n	8007734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2220      	movs	r2, #32
 8007712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3758      	adds	r7, #88	@ 0x58
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	603b      	str	r3, [r7, #0]
 8007748:	4613      	mov	r3, r2
 800774a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800774c:	e04f      	b.n	80077ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007754:	d04b      	beq.n	80077ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007756:	f7f9 fe4f 	bl	80013f8 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	69ba      	ldr	r2, [r7, #24]
 8007762:	429a      	cmp	r2, r3
 8007764:	d302      	bcc.n	800776c <UART_WaitOnFlagUntilTimeout+0x30>
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e04e      	b.n	800780e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0304 	and.w	r3, r3, #4
 800777a:	2b00      	cmp	r3, #0
 800777c:	d037      	beq.n	80077ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	2b80      	cmp	r3, #128	@ 0x80
 8007782:	d034      	beq.n	80077ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b40      	cmp	r3, #64	@ 0x40
 8007788:	d031      	beq.n	80077ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	f003 0308 	and.w	r3, r3, #8
 8007794:	2b08      	cmp	r3, #8
 8007796:	d110      	bne.n	80077ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2208      	movs	r2, #8
 800779e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 f839 	bl	8007818 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2208      	movs	r2, #8
 80077aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e029      	b.n	800780e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077c8:	d111      	bne.n	80077ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f000 f81f 	bl	8007818 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2220      	movs	r2, #32
 80077de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e00f      	b.n	800780e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	69da      	ldr	r2, [r3, #28]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	4013      	ands	r3, r2
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	bf0c      	ite	eq
 80077fe:	2301      	moveq	r3, #1
 8007800:	2300      	movne	r3, #0
 8007802:	b2db      	uxtb	r3, r3
 8007804:	461a      	mov	r2, r3
 8007806:	79fb      	ldrb	r3, [r7, #7]
 8007808:	429a      	cmp	r2, r3
 800780a:	d0a0      	beq.n	800774e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
	...

08007818 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007818:	b480      	push	{r7}
 800781a:	b095      	sub	sp, #84	@ 0x54
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007828:	e853 3f00 	ldrex	r3, [r3]
 800782c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800782e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007830:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007834:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800783e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007840:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007842:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007844:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007846:	e841 2300 	strex	r3, r2, [r1]
 800784a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800784c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1e6      	bne.n	8007820 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3308      	adds	r3, #8
 8007858:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	e853 3f00 	ldrex	r3, [r3]
 8007860:	61fb      	str	r3, [r7, #28]
   return(result);
 8007862:	69fa      	ldr	r2, [r7, #28]
 8007864:	4b1e      	ldr	r3, [pc, #120]	@ (80078e0 <UART_EndRxTransfer+0xc8>)
 8007866:	4013      	ands	r3, r2
 8007868:	64bb      	str	r3, [r7, #72]	@ 0x48
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3308      	adds	r3, #8
 8007870:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007872:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007874:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007876:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007878:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800787a:	e841 2300 	strex	r3, r2, [r1]
 800787e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1e5      	bne.n	8007852 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800788a:	2b01      	cmp	r3, #1
 800788c:	d118      	bne.n	80078c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	e853 3f00 	ldrex	r3, [r3]
 800789a:	60bb      	str	r3, [r7, #8]
   return(result);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	f023 0310 	bic.w	r3, r3, #16
 80078a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	461a      	mov	r2, r3
 80078aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078ac:	61bb      	str	r3, [r7, #24]
 80078ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	6979      	ldr	r1, [r7, #20]
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	e841 2300 	strex	r3, r2, [r1]
 80078b8:	613b      	str	r3, [r7, #16]
   return(result);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e6      	bne.n	800788e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2220      	movs	r2, #32
 80078c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80078d4:	bf00      	nop
 80078d6:	3754      	adds	r7, #84	@ 0x54
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	effffffe 	.word	0xeffffffe

080078e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d101      	bne.n	80078fa <HAL_UARTEx_DisableFifoMode+0x16>
 80078f6:	2302      	movs	r3, #2
 80078f8:	e027      	b.n	800794a <HAL_UARTEx_DisableFifoMode+0x66>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2224      	movs	r2, #36	@ 0x24
 8007906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 0201 	bic.w	r2, r2, #1
 8007920:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007928:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2220      	movs	r2, #32
 800793c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007966:	2b01      	cmp	r3, #1
 8007968:	d101      	bne.n	800796e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800796a:	2302      	movs	r3, #2
 800796c:	e02d      	b.n	80079ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2224      	movs	r2, #36	@ 0x24
 800797a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f022 0201 	bic.w	r2, r2, #1
 8007994:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f850 	bl	8007a50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2220      	movs	r2, #32
 80079bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d101      	bne.n	80079ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80079e6:	2302      	movs	r3, #2
 80079e8:	e02d      	b.n	8007a46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2224      	movs	r2, #36	@ 0x24
 80079f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 0201 	bic.w	r2, r2, #1
 8007a10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	683a      	ldr	r2, [r7, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f812 	bl	8007a50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2220      	movs	r2, #32
 8007a38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
	...

08007a50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d108      	bne.n	8007a72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a70:	e031      	b.n	8007ad6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a72:	2310      	movs	r3, #16
 8007a74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a76:	2310      	movs	r3, #16
 8007a78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	0e5b      	lsrs	r3, r3, #25
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	f003 0307 	and.w	r3, r3, #7
 8007a88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	0f5b      	lsrs	r3, r3, #29
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	f003 0307 	and.w	r3, r3, #7
 8007a98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	7b3a      	ldrb	r2, [r7, #12]
 8007a9e:	4911      	ldr	r1, [pc, #68]	@ (8007ae4 <UARTEx_SetNbDataToProcess+0x94>)
 8007aa0:	5c8a      	ldrb	r2, [r1, r2]
 8007aa2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007aa6:	7b3a      	ldrb	r2, [r7, #12]
 8007aa8:	490f      	ldr	r1, [pc, #60]	@ (8007ae8 <UARTEx_SetNbDataToProcess+0x98>)
 8007aaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007aac:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
 8007aba:	7b7a      	ldrb	r2, [r7, #13]
 8007abc:	4909      	ldr	r1, [pc, #36]	@ (8007ae4 <UARTEx_SetNbDataToProcess+0x94>)
 8007abe:	5c8a      	ldrb	r2, [r1, r2]
 8007ac0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ac4:	7b7a      	ldrb	r2, [r7, #13]
 8007ac6:	4908      	ldr	r1, [pc, #32]	@ (8007ae8 <UARTEx_SetNbDataToProcess+0x98>)
 8007ac8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007aca:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007ad6:	bf00      	nop
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	08007b84 	.word	0x08007b84
 8007ae8:	08007b8c 	.word	0x08007b8c

08007aec <memset>:
 8007aec:	4402      	add	r2, r0
 8007aee:	4603      	mov	r3, r0
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d100      	bne.n	8007af6 <memset+0xa>
 8007af4:	4770      	bx	lr
 8007af6:	f803 1b01 	strb.w	r1, [r3], #1
 8007afa:	e7f9      	b.n	8007af0 <memset+0x4>

08007afc <__libc_init_array>:
 8007afc:	b570      	push	{r4, r5, r6, lr}
 8007afe:	4d0d      	ldr	r5, [pc, #52]	@ (8007b34 <__libc_init_array+0x38>)
 8007b00:	4c0d      	ldr	r4, [pc, #52]	@ (8007b38 <__libc_init_array+0x3c>)
 8007b02:	1b64      	subs	r4, r4, r5
 8007b04:	10a4      	asrs	r4, r4, #2
 8007b06:	2600      	movs	r6, #0
 8007b08:	42a6      	cmp	r6, r4
 8007b0a:	d109      	bne.n	8007b20 <__libc_init_array+0x24>
 8007b0c:	4d0b      	ldr	r5, [pc, #44]	@ (8007b3c <__libc_init_array+0x40>)
 8007b0e:	4c0c      	ldr	r4, [pc, #48]	@ (8007b40 <__libc_init_array+0x44>)
 8007b10:	f000 f818 	bl	8007b44 <_init>
 8007b14:	1b64      	subs	r4, r4, r5
 8007b16:	10a4      	asrs	r4, r4, #2
 8007b18:	2600      	movs	r6, #0
 8007b1a:	42a6      	cmp	r6, r4
 8007b1c:	d105      	bne.n	8007b2a <__libc_init_array+0x2e>
 8007b1e:	bd70      	pop	{r4, r5, r6, pc}
 8007b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b24:	4798      	blx	r3
 8007b26:	3601      	adds	r6, #1
 8007b28:	e7ee      	b.n	8007b08 <__libc_init_array+0xc>
 8007b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b2e:	4798      	blx	r3
 8007b30:	3601      	adds	r6, #1
 8007b32:	e7f2      	b.n	8007b1a <__libc_init_array+0x1e>
 8007b34:	08007b9c 	.word	0x08007b9c
 8007b38:	08007b9c 	.word	0x08007b9c
 8007b3c:	08007b9c 	.word	0x08007b9c
 8007b40:	08007ba0 	.word	0x08007ba0

08007b44 <_init>:
 8007b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b46:	bf00      	nop
 8007b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b4a:	bc08      	pop	{r3}
 8007b4c:	469e      	mov	lr, r3
 8007b4e:	4770      	bx	lr

08007b50 <_fini>:
 8007b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b52:	bf00      	nop
 8007b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b56:	bc08      	pop	{r3}
 8007b58:	469e      	mov	lr, r3
 8007b5a:	4770      	bx	lr
