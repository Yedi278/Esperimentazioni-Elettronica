
ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008068  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008300  08008300  00009300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008338  08008338  00009338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008340  08008340  00009340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008344  08008344  00009344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000018  24000000  08008348  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000600  24000018  08008360  0000a018  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000618  08008360  0000a618  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a018  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019d2c  00000000  00000000  0000a046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000342f  00000000  00000000  00023d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001240  00000000  00000000  000271a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000df4  00000000  00000000  000283e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003922d  00000000  00000000  000291dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a0c4  00000000  00000000  00062409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016c5ed  00000000  00000000  0007c4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e8aba  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004ca4  00000000  00000000  001e8b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007b  00000000  00000000  001ed7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080082e8 	.word	0x080082e8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	080082e8 	.word	0x080082e8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ADC_custom_init>:
uint32_t Const_1 = (uint32_t)80000UL;
uint32_t Const_2 = (uint32_t)30000UL;

int ADC3_interr_number = 0;

void ADC_custom_init(){
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0


//	ADC3->CR &= ~ADC_CR_ADSTART;
	ADC3->SQR1=0; // per azzerare la configurazione dell'ide
 80005ce:	4b20      	ldr	r3, [pc, #128]	@ (8000650 <ADC_custom_init+0x88>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->SQR1 |= (19 << ADC_SQR1_SQ1_Pos) | (18 << ADC_SQR1_SQ2_Pos);
 80005d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000650 <ADC_custom_init+0x88>)
 80005d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005d8:	491d      	ldr	r1, [pc, #116]	@ (8000650 <ADC_custom_init+0x88>)
 80005da:	4b1e      	ldr	r3, [pc, #120]	@ (8000654 <ADC_custom_init+0x8c>)
 80005dc:	4313      	orrs	r3, r2
 80005de:	630b      	str	r3, [r1, #48]	@ 0x30


	ADC3->SQR1 |= (1 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere : 2
 80005e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000650 <ADC_custom_init+0x88>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e4:	4a1a      	ldr	r2, [pc, #104]	@ (8000650 <ADC_custom_init+0x88>)
 80005e6:	f043 0301 	orr.w	r3, r3, #1
 80005ea:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->PCSEL |= ADC_PCSEL_PCSEL_19 | ADC_PCSEL_PCSEL_18; // Dichiaro quali canali leggere : 18 e 19
 80005ec:	4b18      	ldr	r3, [pc, #96]	@ (8000650 <ADC_custom_init+0x88>)
 80005ee:	69db      	ldr	r3, [r3, #28]
 80005f0:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <ADC_custom_init+0x88>)
 80005f2:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80005f6:	61d3      	str	r3, [r2, #28]
//
//	while((ADC3->ISR & ADC_ISR_LDORDY) != 1){}

	/* Calibrazione */

	ADC3->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 80005f8:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <ADC_custom_init+0x88>)
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	4a14      	ldr	r2, [pc, #80]	@ (8000650 <ADC_custom_init+0x88>)
 80005fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000602:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <ADC_custom_init+0x88>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	4a11      	ldr	r2, [pc, #68]	@ (8000650 <ADC_custom_init+0x88>)
 800060a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800060e:	6093      	str	r3, [r2, #8]

	ADC3->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <ADC_custom_init+0x88>)
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	4a0e      	ldr	r2, [pc, #56]	@ (8000650 <ADC_custom_init+0x88>)
 8000616:	f023 0301 	bic.w	r3, r3, #1
 800061a:	6093      	str	r3, [r2, #8]

	ADC3->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <ADC_custom_init+0x88>)
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	4a0b      	ldr	r2, [pc, #44]	@ (8000650 <ADC_custom_init+0x88>)
 8000622:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000626:	6093      	str	r3, [r2, #8]

	uint16_t i=0;
 8000628:	2300      	movs	r3, #0
 800062a:	80fb      	strh	r3, [r7, #6]
	while((ADC3->CR & ADC_CR_ADCAL) != 0){
 800062c:	e002      	b.n	8000634 <ADC_custom_init+0x6c>
		++i;
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	3301      	adds	r3, #1
 8000632:	80fb      	strh	r3, [r7, #6]
	while((ADC3->CR & ADC_CR_ADCAL) != 0){
 8000634:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <ADC_custom_init+0x88>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	2b00      	cmp	r3, #0
 800063a:	dbf8      	blt.n	800062e <ADC_custom_init+0x66>
	}
	++i;
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	3301      	adds	r3, #1
 8000640:	80fb      	strh	r3, [r7, #6]
	// FIne calibrazione
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	58026000 	.word	0x58026000
 8000654:	000124c0 	.word	0x000124c0

08000658 <ADC_start>:

void ADC_start(){
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
	/* Accensione ADC */

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 800065c:	4b20      	ldr	r3, [pc, #128]	@ (80006e0 <ADC_start+0x88>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a1f      	ldr	r2, [pc, #124]	@ (80006e0 <ADC_start+0x88>)
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	6013      	str	r3, [r2, #0]
	ADC3->CR |= ADC_CR_ADEN;		// Accendo l' ADC
 8000668:	4b1d      	ldr	r3, [pc, #116]	@ (80006e0 <ADC_start+0x88>)
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	4a1c      	ldr	r2, [pc, #112]	@ (80006e0 <ADC_start+0x88>)
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	6093      	str	r3, [r2, #8]

	while((ADC3->ISR & ADC_ISR_ADRDY) != 0){}
 8000674:	bf00      	nop
 8000676:	4b1a      	ldr	r3, [pc, #104]	@ (80006e0 <ADC_start+0x88>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1f9      	bne.n	8000676 <ADC_start+0x1e>

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 8000682:	4b17      	ldr	r3, [pc, #92]	@ (80006e0 <ADC_start+0x88>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a16      	ldr	r2, [pc, #88]	@ (80006e0 <ADC_start+0x88>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6013      	str	r3, [r2, #0]
	// Fine accensione

	/* ADR ACCESO */

	ADC3->SMPR2 |= (7 << ADC_SMPR2_SMP18_Pos);	// Indico Il tempo prima della misura
 800068e:	4b14      	ldr	r3, [pc, #80]	@ (80006e0 <ADC_start+0x88>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	4a13      	ldr	r2, [pc, #76]	@ (80006e0 <ADC_start+0x88>)
 8000694:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000698:	6193      	str	r3, [r2, #24]
	ADC3_COMMON->CCR |= ADC_CCR_TSEN;			// Abilito il termometro
 800069a:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <ADC_start+0x8c>)
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	4a11      	ldr	r2, [pc, #68]	@ (80006e4 <ADC_start+0x8c>)
 80006a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80006a4:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADSTART;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <ADC_start+0x88>)
 80006a8:	689b      	ldr	r3, [r3, #8]
 80006aa:	4a0d      	ldr	r2, [pc, #52]	@ (80006e0 <ADC_start+0x88>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	6093      	str	r3, [r2, #8]

	ADC3->SMPR2 |= (30 << ADC_SMPR2_SMP19_Pos);
 80006b2:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <ADC_start+0x88>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	4a0a      	ldr	r2, [pc, #40]	@ (80006e0 <ADC_start+0x88>)
 80006b8:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80006bc:	6193      	str	r3, [r2, #24]
	ADC3_COMMON->CCR |= ADC_CCR_VREFEN;
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <ADC_start+0x8c>)
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	4a08      	ldr	r2, [pc, #32]	@ (80006e4 <ADC_start+0x8c>)
 80006c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006c8:	6093      	str	r3, [r2, #8]

	ADC3->IER |= ADC_IER_EOCIE;					// Abilito l'interrupt di fine conversione
 80006ca:	4b05      	ldr	r3, [pc, #20]	@ (80006e0 <ADC_start+0x88>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	4a04      	ldr	r2, [pc, #16]	@ (80006e0 <ADC_start+0x88>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	6053      	str	r3, [r2, #4]
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	58026000 	.word	0x58026000
 80006e4:	58026300 	.word	0x58026300

080006e8 <ADC_custom_interrupt>:

void ADC_custom_interrupt(){
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
	extern int ADC3_interr_number;


	if(ADC3_interr_number == 0){
 80006ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <ADC_custom_interrupt+0x7c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d111      	bne.n	800071a <ADC_custom_interrupt+0x32>

		uint16_t voltage_raw = ADC3->DR;
 80006f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <ADC_custom_interrupt+0x80>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fa:	80fb      	strh	r3, [r7, #6]
		uint32_t V_calibrata = ( (uint32_t)3300000 / (uint32_t)voltage_raw ) * (uint32_t)VREFINT_C;
 80006fc:	88fb      	ldrh	r3, [r7, #6]
 80006fe:	4a1b      	ldr	r2, [pc, #108]	@ (800076c <ADC_custom_interrupt+0x84>)
 8000700:	fbb2 f3f3 	udiv	r3, r2, r3
 8000704:	4a1a      	ldr	r2, [pc, #104]	@ (8000770 <ADC_custom_interrupt+0x88>)
 8000706:	8812      	ldrh	r2, [r2, #0]
 8000708:	fb02 f303 	mul.w	r3, r2, r3
 800070c:	603b      	str	r3, [r7, #0]
		++ADC3_interr_number;
 800070e:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <ADC_custom_interrupt+0x7c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	3301      	adds	r3, #1
 8000714:	4a13      	ldr	r2, [pc, #76]	@ (8000764 <ADC_custom_interrupt+0x7c>)
 8000716:	6013      	str	r3, [r2, #0]

		uint16_t temp_raw = ADC3->DR;
		uint32_t temp = ((Const_1*((uint32_t)(temp_raw - TS_CAL_30C))) / (uint32_t)(TS_CAL_110C - TS_CAL_30C) ) + Const_2;
		ADC3_interr_number = 0;
	}
}
 8000718:	e01e      	b.n	8000758 <ADC_custom_interrupt+0x70>
	}else if(ADC3_interr_number == 1){
 800071a:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <ADC_custom_interrupt+0x7c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d11a      	bne.n	8000758 <ADC_custom_interrupt+0x70>
		uint16_t temp_raw = ADC3->DR;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <ADC_custom_interrupt+0x80>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000726:	81fb      	strh	r3, [r7, #14]
		uint32_t temp = ((Const_1*((uint32_t)(temp_raw - TS_CAL_30C))) / (uint32_t)(TS_CAL_110C - TS_CAL_30C) ) + Const_2;
 8000728:	89fb      	ldrh	r3, [r7, #14]
 800072a:	4a12      	ldr	r2, [pc, #72]	@ (8000774 <ADC_custom_interrupt+0x8c>)
 800072c:	8812      	ldrh	r2, [r2, #0]
 800072e:	1a9b      	subs	r3, r3, r2
 8000730:	461a      	mov	r2, r3
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <ADC_custom_interrupt+0x90>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	fb02 f303 	mul.w	r3, r2, r3
 800073a:	4a10      	ldr	r2, [pc, #64]	@ (800077c <ADC_custom_interrupt+0x94>)
 800073c:	8812      	ldrh	r2, [r2, #0]
 800073e:	4611      	mov	r1, r2
 8000740:	4a0c      	ldr	r2, [pc, #48]	@ (8000774 <ADC_custom_interrupt+0x8c>)
 8000742:	8812      	ldrh	r2, [r2, #0]
 8000744:	1a8a      	subs	r2, r1, r2
 8000746:	fbb3 f2f2 	udiv	r2, r3, r2
 800074a:	4b0d      	ldr	r3, [pc, #52]	@ (8000780 <ADC_custom_interrupt+0x98>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4413      	add	r3, r2
 8000750:	60bb      	str	r3, [r7, #8]
		ADC3_interr_number = 0;
 8000752:	4b04      	ldr	r3, [pc, #16]	@ (8000764 <ADC_custom_interrupt+0x7c>)
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	24000034 	.word	0x24000034
 8000768:	58026000 	.word	0x58026000
 800076c:	00325aa0 	.word	0x00325aa0
 8000770:	1ff1e860 	.word	0x1ff1e860
 8000774:	1ff1e820 	.word	0x1ff1e820
 8000778:	24000000 	.word	0x24000000
 800077c:	1ff1e840 	.word	0x1ff1e840
 8000780:	24000004 	.word	0x24000004

08000784 <init_usart3>:

uint16_t data_buffer[1000];
unsigned char* data_buffer_8bit = (unsigned char*)data_buffer;
int data_index=0;

void init_usart3(){
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

    USART3->CR1 |= USART_CR1_TE;
 8000788:	4b0b      	ldr	r3, [pc, #44]	@ (80007b8 <init_usart3+0x34>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a0a      	ldr	r2, [pc, #40]	@ (80007b8 <init_usart3+0x34>)
 800078e:	f043 0308 	orr.w	r3, r3, #8
 8000792:	6013      	str	r3, [r2, #0]
    USART3->CR1 |= USART_CR1_RE;
 8000794:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <init_usart3+0x34>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a07      	ldr	r2, [pc, #28]	@ (80007b8 <init_usart3+0x34>)
 800079a:	f043 0304 	orr.w	r3, r3, #4
 800079e:	6013      	str	r3, [r2, #0]

    //USART3->CR1 ^= USART_CR1_TXEIE;
    //USART3->CR1 |= USART_CR1_RXNEIE;

    USART3->CR1 |= USART_CR1_UE;
 80007a0:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <init_usart3+0x34>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a04      	ldr	r2, [pc, #16]	@ (80007b8 <init_usart3+0x34>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	6013      	str	r3, [r2, #0]

}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40004800 	.word	0x40004800

080007bc <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
 80007d0:	615a      	str	r2, [r3, #20]
 80007d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000890 <MX_ADC3_Init+0xd4>)
 80007d6:	4a2f      	ldr	r2, [pc, #188]	@ (8000894 <MX_ADC3_Init+0xd8>)
 80007d8:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007da:	4b2d      	ldr	r3, [pc, #180]	@ (8000890 <MX_ADC3_Init+0xd4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <MX_ADC3_Init+0xd4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000890 <MX_ADC3_Init+0xd4>)
 80007e8:	2204      	movs	r2, #4
 80007ea:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007ec:	4b28      	ldr	r3, [pc, #160]	@ (8000890 <MX_ADC3_Init+0xd4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007f2:	4b27      	ldr	r3, [pc, #156]	@ (8000890 <MX_ADC3_Init+0xd4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80007f8:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <MX_ADC3_Init+0xd4>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007fe:	4b24      	ldr	r3, [pc, #144]	@ (8000890 <MX_ADC3_Init+0xd4>)
 8000800:	2200      	movs	r2, #0
 8000802:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000804:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <MX_ADC3_Init+0xd4>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080a:	4b21      	ldr	r3, [pc, #132]	@ (8000890 <MX_ADC3_Init+0xd4>)
 800080c:	2200      	movs	r2, #0
 800080e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000810:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <MX_ADC3_Init+0xd4>)
 8000812:	2200      	movs	r2, #0
 8000814:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000816:	4b1e      	ldr	r3, [pc, #120]	@ (8000890 <MX_ADC3_Init+0xd4>)
 8000818:	2200      	movs	r2, #0
 800081a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800081c:	4b1c      	ldr	r3, [pc, #112]	@ (8000890 <MX_ADC3_Init+0xd4>)
 800081e:	2200      	movs	r2, #0
 8000820:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000822:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <MX_ADC3_Init+0xd4>)
 8000824:	2200      	movs	r2, #0
 8000826:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 800082a:	4b19      	ldr	r3, [pc, #100]	@ (8000890 <MX_ADC3_Init+0xd4>)
 800082c:	2201      	movs	r2, #1
 800082e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000830:	4817      	ldr	r0, [pc, #92]	@ (8000890 <MX_ADC3_Init+0xd4>)
 8000832:	f000 ff7d 	bl	8001730 <HAL_ADC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 800083c:	f000 fa68 	bl	8000d10 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000840:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <MX_ADC3_Init+0xd4>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000846:	4812      	ldr	r0, [pc, #72]	@ (8000890 <MX_ADC3_Init+0xd4>)
 8000848:	f000 ff72 	bl	8001730 <HAL_ADC_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000852:	f000 fa5d 	bl	8000d10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000856:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <MX_ADC3_Init+0xdc>)
 8000858:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085a:	2306      	movs	r3, #6
 800085c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000862:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000866:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000868:	2304      	movs	r3, #4
 800086a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_ADC3_Init+0xd4>)
 800087a:	f001 fb53 	bl	8001f24 <HAL_ADC_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8000884:	f000 fa44 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	24000038 	.word	0x24000038
 8000894:	58026000 	.word	0x58026000
 8000898:	cb840000 	.word	0xcb840000

0800089c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b0b4      	sub	sp, #208	@ 0xd0
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	22c0      	movs	r2, #192	@ 0xc0
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f007 fcee 	bl	800828e <memset>
  if(adcHandle->Instance==ADC3)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a21      	ldr	r2, [pc, #132]	@ (800093c <HAL_ADC_MspInit+0xa0>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d13a      	bne.n	8000932 <HAL_ADC_MspInit+0x96>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008bc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 80008cc:	2312      	movs	r3, #18
 80008ce:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008d8:	2302      	movs	r3, #2
 80008da:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008dc:	23c0      	movs	r3, #192	@ 0xc0
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008e0:	2320      	movs	r3, #32
 80008e2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144.0;
 80008e4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008e8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	4618      	mov	r0, r3
 80008f6:	f003 fbe9 	bl	80040cc <HAL_RCCEx_PeriphCLKConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <HAL_ADC_MspInit+0x68>
    {
      Error_Handler();
 8000900:	f000 fa06 	bl	8000d10 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000904:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <HAL_ADC_MspInit+0xa4>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090a:	4a0d      	ldr	r2, [pc, #52]	@ (8000940 <HAL_ADC_MspInit+0xa4>)
 800090c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000910:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000914:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <HAL_ADC_MspInit+0xa4>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	207f      	movs	r0, #127	@ 0x7f
 8000928:	f002 f871 	bl	8002a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800092c:	207f      	movs	r0, #127	@ 0x7f
 800092e:	f002 f888 	bl	8002a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000932:	bf00      	nop
 8000934:	37d0      	adds	r7, #208	@ 0xd0
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	58026000 	.word	0x58026000
 8000940:	58024400 	.word	0x58024400

08000944 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08c      	sub	sp, #48	@ 0x30
 8000948:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	4b83      	ldr	r3, [pc, #524]	@ (8000b68 <MX_GPIO_Init+0x224>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000960:	4a81      	ldr	r2, [pc, #516]	@ (8000b68 <MX_GPIO_Init+0x224>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096a:	4b7f      	ldr	r3, [pc, #508]	@ (8000b68 <MX_GPIO_Init+0x224>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	61bb      	str	r3, [r7, #24]
 8000976:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000978:	4b7b      	ldr	r3, [pc, #492]	@ (8000b68 <MX_GPIO_Init+0x224>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097e:	4a7a      	ldr	r2, [pc, #488]	@ (8000b68 <MX_GPIO_Init+0x224>)
 8000980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000984:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000988:	4b77      	ldr	r3, [pc, #476]	@ (8000b68 <MX_GPIO_Init+0x224>)
 800098a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4b74      	ldr	r3, [pc, #464]	@ (8000b68 <MX_GPIO_Init+0x224>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099c:	4a72      	ldr	r2, [pc, #456]	@ (8000b68 <MX_GPIO_Init+0x224>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a6:	4b70      	ldr	r3, [pc, #448]	@ (8000b68 <MX_GPIO_Init+0x224>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b4:	4b6c      	ldr	r3, [pc, #432]	@ (8000b68 <MX_GPIO_Init+0x224>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ba:	4a6b      	ldr	r2, [pc, #428]	@ (8000b68 <MX_GPIO_Init+0x224>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009c4:	4b68      	ldr	r3, [pc, #416]	@ (8000b68 <MX_GPIO_Init+0x224>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d2:	4b65      	ldr	r3, [pc, #404]	@ (8000b68 <MX_GPIO_Init+0x224>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d8:	4a63      	ldr	r2, [pc, #396]	@ (8000b68 <MX_GPIO_Init+0x224>)
 80009da:	f043 0308 	orr.w	r3, r3, #8
 80009de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e2:	4b61      	ldr	r3, [pc, #388]	@ (8000b68 <MX_GPIO_Init+0x224>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e8:	f003 0308 	and.w	r3, r3, #8
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009f0:	4b5d      	ldr	r3, [pc, #372]	@ (8000b68 <MX_GPIO_Init+0x224>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f6:	4a5c      	ldr	r2, [pc, #368]	@ (8000b68 <MX_GPIO_Init+0x224>)
 80009f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a00:	4b59      	ldr	r3, [pc, #356]	@ (8000b68 <MX_GPIO_Init+0x224>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a0e:	4b56      	ldr	r3, [pc, #344]	@ (8000b68 <MX_GPIO_Init+0x224>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a14:	4a54      	ldr	r2, [pc, #336]	@ (8000b68 <MX_GPIO_Init+0x224>)
 8000a16:	f043 0310 	orr.w	r3, r3, #16
 8000a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a1e:	4b52      	ldr	r3, [pc, #328]	@ (8000b68 <MX_GPIO_Init+0x224>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a24:	f003 0310 	and.w	r3, r3, #16
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a32:	484e      	ldr	r0, [pc, #312]	@ (8000b6c <MX_GPIO_Init+0x228>)
 8000a34:	f002 f9d0 	bl	8002dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a3e:	484c      	ldr	r0, [pc, #304]	@ (8000b70 <MX_GPIO_Init+0x22c>)
 8000a40:	f002 f9ca 	bl	8002dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2102      	movs	r1, #2
 8000a48:	484a      	ldr	r0, [pc, #296]	@ (8000b74 <MX_GPIO_Init+0x230>)
 8000a4a:	f002 f9c5 	bl	8002dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	4845      	ldr	r0, [pc, #276]	@ (8000b78 <MX_GPIO_Init+0x234>)
 8000a64:	f002 f808 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a68:	2332      	movs	r3, #50	@ 0x32
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a78:	230b      	movs	r3, #11
 8000a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	483d      	ldr	r0, [pc, #244]	@ (8000b78 <MX_GPIO_Init+0x234>)
 8000a84:	f001 fff8 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000a88:	2386      	movs	r3, #134	@ 0x86
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a98:	230b      	movs	r3, #11
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4836      	ldr	r0, [pc, #216]	@ (8000b7c <MX_GPIO_Init+0x238>)
 8000aa4:	f001 ffe8 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000aa8:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	482a      	ldr	r0, [pc, #168]	@ (8000b6c <MX_GPIO_Init+0x228>)
 8000ac2:	f001 ffd9 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ac6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad8:	230b      	movs	r3, #11
 8000ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4822      	ldr	r0, [pc, #136]	@ (8000b6c <MX_GPIO_Init+0x228>)
 8000ae4:	f001 ffc8 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ae8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	481b      	ldr	r0, [pc, #108]	@ (8000b70 <MX_GPIO_Init+0x22c>)
 8000b02:	f001 ffb9 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b06:	2380      	movs	r3, #128	@ 0x80
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4819      	ldr	r0, [pc, #100]	@ (8000b80 <MX_GPIO_Init+0x23c>)
 8000b1c:	f001 ffac 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b20:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b32:	230b      	movs	r3, #11
 8000b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4810      	ldr	r0, [pc, #64]	@ (8000b80 <MX_GPIO_Init+0x23c>)
 8000b3e:	f001 ff9b 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4806      	ldr	r0, [pc, #24]	@ (8000b74 <MX_GPIO_Init+0x230>)
 8000b5a:	f001 ff8d 	bl	8002a78 <HAL_GPIO_Init>

}
 8000b5e:	bf00      	nop
 8000b60:	3730      	adds	r7, #48	@ 0x30
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	58024400 	.word	0x58024400
 8000b6c:	58020400 	.word	0x58020400
 8000b70:	58020c00 	.word	0x58020c00
 8000b74:	58021000 	.word	0x58021000
 8000b78:	58020800 	.word	0x58020800
 8000b7c:	58020000 	.word	0x58020000
 8000b80:	58021800 	.word	0x58021800

08000b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b88:	f000 fb42 	bl	8001210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8c:	f000 f810 	bl	8000bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b90:	f7ff fed8 	bl	8000944 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000b94:	f7ff fe12 	bl	80007bc <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8000b98:	f000 f9a4 	bl	8000ee4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b9c:	f000 fa60 	bl	8001060 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  ADC_custom_init();
 8000ba0:	f7ff fd12 	bl	80005c8 <ADC_custom_init>

  ADC_start();
 8000ba4:	f7ff fd58 	bl	8000658 <ADC_start>

  init_usart3();
 8000ba8:	f7ff fdec 	bl	8000784 <init_usart3>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <main+0x28>

08000bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b09e      	sub	sp, #120	@ 0x78
 8000bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bba:	224c      	movs	r2, #76	@ 0x4c
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f007 fb65 	bl	800828e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	2220      	movs	r2, #32
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f007 fb5e 	bl	800828e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f002 fa4a 	bl	800306c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	4b49      	ldr	r3, [pc, #292]	@ (8000d04 <SystemClock_Config+0x154>)
 8000bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000be0:	4a48      	ldr	r2, [pc, #288]	@ (8000d04 <SystemClock_Config+0x154>)
 8000be2:	f023 0301 	bic.w	r3, r3, #1
 8000be6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000be8:	4b46      	ldr	r3, [pc, #280]	@ (8000d04 <SystemClock_Config+0x154>)
 8000bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	4b45      	ldr	r3, [pc, #276]	@ (8000d08 <SystemClock_Config+0x158>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	4a44      	ldr	r2, [pc, #272]	@ (8000d08 <SystemClock_Config+0x158>)
 8000bf8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000bfc:	6193      	str	r3, [r2, #24]
 8000bfe:	4b42      	ldr	r3, [pc, #264]	@ (8000d08 <SystemClock_Config+0x158>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c0a:	bf00      	nop
 8000c0c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d08 <SystemClock_Config+0x158>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c18:	d1f8      	bne.n	8000c0c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d0c <SystemClock_Config+0x15c>)
 8000c1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c20:	4a3a      	ldr	r2, [pc, #232]	@ (8000d0c <SystemClock_Config+0x15c>)
 8000c22:	f043 0302 	orr.w	r3, r3, #2
 8000c26:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c2a:	4b38      	ldr	r3, [pc, #224]	@ (8000d0c <SystemClock_Config+0x15c>)
 8000c2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c38:	2300      	movs	r3, #0
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	4b32      	ldr	r3, [pc, #200]	@ (8000d08 <SystemClock_Config+0x158>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a31      	ldr	r2, [pc, #196]	@ (8000d08 <SystemClock_Config+0x158>)
 8000c42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b2f      	ldr	r3, [pc, #188]	@ (8000d08 <SystemClock_Config+0x158>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b2c      	ldr	r3, [pc, #176]	@ (8000d04 <SystemClock_Config+0x154>)
 8000c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c56:	4a2b      	ldr	r2, [pc, #172]	@ (8000d04 <SystemClock_Config+0x154>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c5e:	4b29      	ldr	r3, [pc, #164]	@ (8000d04 <SystemClock_Config+0x154>)
 8000c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c6a:	bf00      	nop
 8000c6c:	4b26      	ldr	r3, [pc, #152]	@ (8000d08 <SystemClock_Config+0x158>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c78:	d1f8      	bne.n	8000c6c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000c7a:	2321      	movs	r3, #33	@ 0x21
 8000c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c7e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000c82:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c84:	2301      	movs	r3, #1
 8000c86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c90:	2301      	movs	r3, #1
 8000c92:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000c94:	2378      	movs	r3, #120	@ 0x78
 8000c96:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ca4:	230c      	movs	r3, #12
 8000ca6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f002 fa23 	bl	8003100 <HAL_RCC_OscConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000cc0:	f000 f826 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc4:	233f      	movs	r3, #63	@ 0x3f
 8000cc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cd0:	2308      	movs	r3, #8
 8000cd2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cd4:	2340      	movs	r3, #64	@ 0x40
 8000cd6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cd8:	2340      	movs	r3, #64	@ 0x40
 8000cda:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ce2:	2340      	movs	r3, #64	@ 0x40
 8000ce4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	2104      	movs	r1, #4
 8000cec:	4618      	mov	r0, r3
 8000cee:	f002 fe61 	bl	80039b4 <HAL_RCC_ClockConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0x14c>
  {
    Error_Handler();
 8000cf8:	f000 f80a 	bl	8000d10 <Error_Handler>
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	3778      	adds	r7, #120	@ 0x78
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	58000400 	.word	0x58000400
 8000d08:	58024800 	.word	0x58024800
 8000d0c:	58024400 	.word	0x58024400

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <Error_Handler+0x8>

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <HAL_MspInit+0x30>)
 8000d24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d28:	4a08      	ldr	r2, [pc, #32]	@ (8000d4c <HAL_MspInit+0x30>)
 8000d2a:	f043 0302 	orr.w	r3, r3, #2
 8000d2e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <HAL_MspInit+0x30>)
 8000d34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d38:	f003 0302 	and.w	r3, r3, #2
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	58024400 	.word	0x58024400

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <NMI_Handler+0x4>

08000d58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <MemManage_Handler+0x4>

08000d68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da6:	f000 faa5 	bl	80012f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}

08000dae <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	ADC_custom_interrupt();
 8000dc0:	f7ff fc92 	bl	80006e8 <ADC_custom_interrupt>
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8000dc4:	4802      	ldr	r0, [pc, #8]	@ (8000dd0 <ADC3_IRQHandler+0x14>)
 8000dc6:	f000 fe55 	bl	8001a74 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	24000038 	.word	0x24000038

08000dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b37      	ldr	r3, [pc, #220]	@ (8000eb8 <SystemInit+0xe4>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dde:	4a36      	ldr	r2, [pc, #216]	@ (8000eb8 <SystemInit+0xe4>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000de8:	4b34      	ldr	r3, [pc, #208]	@ (8000ebc <SystemInit+0xe8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 030f 	and.w	r3, r3, #15
 8000df0:	2b06      	cmp	r3, #6
 8000df2:	d807      	bhi.n	8000e04 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000df4:	4b31      	ldr	r3, [pc, #196]	@ (8000ebc <SystemInit+0xe8>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f023 030f 	bic.w	r3, r3, #15
 8000dfc:	4a2f      	ldr	r2, [pc, #188]	@ (8000ebc <SystemInit+0xe8>)
 8000dfe:	f043 0307 	orr.w	r3, r3, #7
 8000e02:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e04:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec0 <SystemInit+0xec>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a2d      	ldr	r2, [pc, #180]	@ (8000ec0 <SystemInit+0xec>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e10:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec0 <SystemInit+0xec>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e16:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec0 <SystemInit+0xec>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	4929      	ldr	r1, [pc, #164]	@ (8000ec0 <SystemInit+0xec>)
 8000e1c:	4b29      	ldr	r3, [pc, #164]	@ (8000ec4 <SystemInit+0xf0>)
 8000e1e:	4013      	ands	r3, r2
 8000e20:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e22:	4b26      	ldr	r3, [pc, #152]	@ (8000ebc <SystemInit+0xe8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d007      	beq.n	8000e3e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e2e:	4b23      	ldr	r3, [pc, #140]	@ (8000ebc <SystemInit+0xe8>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f023 030f 	bic.w	r3, r3, #15
 8000e36:	4a21      	ldr	r2, [pc, #132]	@ (8000ebc <SystemInit+0xe8>)
 8000e38:	f043 0307 	orr.w	r3, r3, #7
 8000e3c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ec0 <SystemInit+0xec>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e44:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec0 <SystemInit+0xec>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec0 <SystemInit+0xec>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec0 <SystemInit+0xec>)
 8000e52:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec8 <SystemInit+0xf4>)
 8000e54:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec0 <SystemInit+0xec>)
 8000e58:	4a1c      	ldr	r2, [pc, #112]	@ (8000ecc <SystemInit+0xf8>)
 8000e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	@ (8000ec0 <SystemInit+0xec>)
 8000e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed0 <SystemInit+0xfc>)
 8000e60:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e62:	4b17      	ldr	r3, [pc, #92]	@ (8000ec0 <SystemInit+0xec>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e68:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <SystemInit+0xec>)
 8000e6a:	4a19      	ldr	r2, [pc, #100]	@ (8000ed0 <SystemInit+0xfc>)
 8000e6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <SystemInit+0xec>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e74:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <SystemInit+0xec>)
 8000e76:	4a16      	ldr	r2, [pc, #88]	@ (8000ed0 <SystemInit+0xfc>)
 8000e78:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <SystemInit+0xec>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec0 <SystemInit+0xec>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec0 <SystemInit+0xec>)
 8000e86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <SystemInit+0xec>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e92:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <SystemInit+0x100>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4b10      	ldr	r3, [pc, #64]	@ (8000ed8 <SystemInit+0x104>)
 8000e98:	4013      	ands	r3, r2
 8000e9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e9e:	d202      	bcs.n	8000ea6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <SystemInit+0x108>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <SystemInit+0x10c>)
 8000ea8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000eac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00
 8000ebc:	52002000 	.word	0x52002000
 8000ec0:	58024400 	.word	0x58024400
 8000ec4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ec8:	02020200 	.word	0x02020200
 8000ecc:	01ff0000 	.word	0x01ff0000
 8000ed0:	01010280 	.word	0x01010280
 8000ed4:	5c001000 	.word	0x5c001000
 8000ed8:	ffff0000 	.word	0xffff0000
 8000edc:	51008108 	.word	0x51008108
 8000ee0:	52004000 	.word	0x52004000

08000ee4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ee8:	4b22      	ldr	r3, [pc, #136]	@ (8000f74 <MX_USART3_UART_Init+0x90>)
 8000eea:	4a23      	ldr	r2, [pc, #140]	@ (8000f78 <MX_USART3_UART_Init+0x94>)
 8000eec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000eee:	4b21      	ldr	r3, [pc, #132]	@ (8000f74 <MX_USART3_UART_Init+0x90>)
 8000ef0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ef4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f74 <MX_USART3_UART_Init+0x90>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000efc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f74 <MX_USART3_UART_Init+0x90>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	@ (8000f74 <MX_USART3_UART_Init+0x90>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f08:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <MX_USART3_UART_Init+0x90>)
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0e:	4b19      	ldr	r3, [pc, #100]	@ (8000f74 <MX_USART3_UART_Init+0x90>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f14:	4b17      	ldr	r3, [pc, #92]	@ (8000f74 <MX_USART3_UART_Init+0x90>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f1a:	4b16      	ldr	r3, [pc, #88]	@ (8000f74 <MX_USART3_UART_Init+0x90>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f20:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <MX_USART3_UART_Init+0x90>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f26:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <MX_USART3_UART_Init+0x90>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f2c:	4811      	ldr	r0, [pc, #68]	@ (8000f74 <MX_USART3_UART_Init+0x90>)
 8000f2e:	f005 fdcb 	bl	8006ac8 <HAL_UART_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f38:	f7ff feea 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	480d      	ldr	r0, [pc, #52]	@ (8000f74 <MX_USART3_UART_Init+0x90>)
 8000f40:	f006 fdd3 	bl	8007aea <HAL_UARTEx_SetTxFifoThreshold>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f4a:	f7ff fee1 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4808      	ldr	r0, [pc, #32]	@ (8000f74 <MX_USART3_UART_Init+0x90>)
 8000f52:	f006 fe08 	bl	8007b66 <HAL_UARTEx_SetRxFifoThreshold>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f5c:	f7ff fed8 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f60:	4804      	ldr	r0, [pc, #16]	@ (8000f74 <MX_USART3_UART_Init+0x90>)
 8000f62:	f006 fd89 	bl	8007a78 <HAL_UARTEx_DisableFifoMode>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f6c:	f7ff fed0 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2400009c 	.word	0x2400009c
 8000f78:	40004800 	.word	0x40004800

08000f7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b0ba      	sub	sp, #232	@ 0xe8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	22c0      	movs	r2, #192	@ 0xc0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f007 f976 	bl	800828e <memset>
  if(uartHandle->Instance==USART3)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a2b      	ldr	r2, [pc, #172]	@ (8001054 <HAL_UART_MspInit+0xd8>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d14e      	bne.n	800104a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fac:	f04f 0202 	mov.w	r2, #2
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f003 f882 	bl	80040cc <HAL_RCCEx_PeriphCLKConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000fce:	f7ff fe9f 	bl	8000d10 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fd2:	4b21      	ldr	r3, [pc, #132]	@ (8001058 <HAL_UART_MspInit+0xdc>)
 8000fd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fd8:	4a1f      	ldr	r2, [pc, #124]	@ (8001058 <HAL_UART_MspInit+0xdc>)
 8000fda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fde:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8001058 <HAL_UART_MspInit+0xdc>)
 8000fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fe8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff0:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <HAL_UART_MspInit+0xdc>)
 8000ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff6:	4a18      	ldr	r2, [pc, #96]	@ (8001058 <HAL_UART_MspInit+0xdc>)
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001000:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <HAL_UART_MspInit+0xdc>)
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800100e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001012:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001028:	2307      	movs	r3, #7
 800102a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800102e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001032:	4619      	mov	r1, r3
 8001034:	4809      	ldr	r0, [pc, #36]	@ (800105c <HAL_UART_MspInit+0xe0>)
 8001036:	f001 fd1f 	bl	8002a78 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	2027      	movs	r0, #39	@ 0x27
 8001040:	f001 fce5 	bl	8002a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001044:	2027      	movs	r0, #39	@ 0x27
 8001046:	f001 fcfc 	bl	8002a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800104a:	bf00      	nop
 800104c:	37e8      	adds	r7, #232	@ 0xe8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40004800 	.word	0x40004800
 8001058:	58024400 	.word	0x58024400
 800105c:	58020c00 	.word	0x58020c00

08001060 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001064:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001066:	4a16      	ldr	r2, [pc, #88]	@ (80010c0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001068:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800106a:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800106c:	2209      	movs	r2, #9
 800106e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001070:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001072:	2202      	movs	r2, #2
 8001074:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001076:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001078:	2200      	movs	r2, #0
 800107a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800107c:	4b0f      	ldr	r3, [pc, #60]	@ (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800107e:	2202      	movs	r2, #2
 8001080:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001082:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001084:	2201      	movs	r2, #1
 8001086:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001088:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800108a:	2200      	movs	r2, #0
 800108c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800108e:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001090:	2200      	movs	r2, #0
 8001092:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001094:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001096:	2201      	movs	r2, #1
 8001098:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800109a:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800109c:	2201      	movs	r2, #1
 800109e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80010a6:	4805      	ldr	r0, [pc, #20]	@ (80010bc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010a8:	f001 feaf 	bl	8002e0a <HAL_PCD_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80010b2:	f7ff fe2d 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	24000130 	.word	0x24000130
 80010c0:	40080000 	.word	0x40080000

080010c4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0ba      	sub	sp, #232	@ 0xe8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	22c0      	movs	r2, #192	@ 0xc0
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f007 f8d2 	bl	800828e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a30      	ldr	r2, [pc, #192]	@ (80011b0 <HAL_PCD_MspInit+0xec>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d159      	bne.n	80011a8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010f4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010f8:	f04f 0300 	mov.w	r3, #0
 80010fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001100:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001104:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	4618      	mov	r0, r3
 800110e:	f002 ffdd 	bl	80040cc <HAL_RCCEx_PeriphCLKConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001118:	f7ff fdfa 	bl	8000d10 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800111c:	f001 ffe0 	bl	80030e0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b24      	ldr	r3, [pc, #144]	@ (80011b4 <HAL_PCD_MspInit+0xf0>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001126:	4a23      	ldr	r2, [pc, #140]	@ (80011b4 <HAL_PCD_MspInit+0xf0>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001130:	4b20      	ldr	r3, [pc, #128]	@ (80011b4 <HAL_PCD_MspInit+0xf0>)
 8001132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800113e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001142:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001158:	230a      	movs	r3, #10
 800115a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001162:	4619      	mov	r1, r3
 8001164:	4814      	ldr	r0, [pc, #80]	@ (80011b8 <HAL_PCD_MspInit+0xf4>)
 8001166:	f001 fc87 	bl	8002a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800116a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800116e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001172:	2300      	movs	r3, #0
 8001174:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001182:	4619      	mov	r1, r3
 8001184:	480c      	ldr	r0, [pc, #48]	@ (80011b8 <HAL_PCD_MspInit+0xf4>)
 8001186:	f001 fc77 	bl	8002a78 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800118a:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <HAL_PCD_MspInit+0xf0>)
 800118c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001190:	4a08      	ldr	r2, [pc, #32]	@ (80011b4 <HAL_PCD_MspInit+0xf0>)
 8001192:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001196:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_PCD_MspInit+0xf0>)
 800119c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80011a8:	bf00      	nop
 80011aa:	37e8      	adds	r7, #232	@ 0xe8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40080000 	.word	0x40080000
 80011b4:	58024400 	.word	0x58024400
 80011b8:	58020000 	.word	0x58020000

080011bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011c0:	f7ff fe08 	bl	8000dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c4:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011c6:	490d      	ldr	r1, [pc, #52]	@ (80011fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001200 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011cc:	e002      	b.n	80011d4 <LoopCopyDataInit>

080011ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d2:	3304      	adds	r3, #4

080011d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d8:	d3f9      	bcc.n	80011ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001208 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e0:	e001      	b.n	80011e6 <LoopFillZerobss>

080011e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e4:	3204      	adds	r2, #4

080011e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e8:	d3fb      	bcc.n	80011e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ea:	f007 f859 	bl	80082a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ee:	f7ff fcc9 	bl	8000b84 <main>
  bx  lr
 80011f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011f4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011fc:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8001200:	08008348 	.word	0x08008348
  ldr r2, =_sbss
 8001204:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8001208:	24000618 	.word	0x24000618

0800120c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC_IRQHandler>
	...

08001210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001216:	2003      	movs	r0, #3
 8001218:	f001 fbee 	bl	80029f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800121c:	f002 fd80 	bl	8003d20 <HAL_RCC_GetSysClockFreq>
 8001220:	4602      	mov	r2, r0
 8001222:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <HAL_Init+0x68>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	0a1b      	lsrs	r3, r3, #8
 8001228:	f003 030f 	and.w	r3, r3, #15
 800122c:	4913      	ldr	r1, [pc, #76]	@ (800127c <HAL_Init+0x6c>)
 800122e:	5ccb      	ldrb	r3, [r1, r3]
 8001230:	f003 031f 	and.w	r3, r3, #31
 8001234:	fa22 f303 	lsr.w	r3, r2, r3
 8001238:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800123a:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <HAL_Init+0x68>)
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	4a0e      	ldr	r2, [pc, #56]	@ (800127c <HAL_Init+0x6c>)
 8001244:	5cd3      	ldrb	r3, [r2, r3]
 8001246:	f003 031f 	and.w	r3, r3, #31
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	fa22 f303 	lsr.w	r3, r2, r3
 8001250:	4a0b      	ldr	r2, [pc, #44]	@ (8001280 <HAL_Init+0x70>)
 8001252:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001254:	4a0b      	ldr	r2, [pc, #44]	@ (8001284 <HAL_Init+0x74>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125a:	2000      	movs	r0, #0
 800125c:	f000 f814 	bl	8001288 <HAL_InitTick>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e002      	b.n	8001270 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800126a:	f7ff fd57 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	58024400 	.word	0x58024400
 800127c:	08008300 	.word	0x08008300
 8001280:	2400000c 	.word	0x2400000c
 8001284:	24000008 	.word	0x24000008

08001288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001290:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <HAL_InitTick+0x60>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e021      	b.n	80012e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800129c:	4b13      	ldr	r3, [pc, #76]	@ (80012ec <HAL_InitTick+0x64>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <HAL_InitTick+0x60>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f001 fbd3 	bl	8002a5e <HAL_SYSTICK_Config>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e00e      	b.n	80012e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b0f      	cmp	r3, #15
 80012c6:	d80a      	bhi.n	80012de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c8:	2200      	movs	r2, #0
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	f001 fb9d 	bl	8002a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d4:	4a06      	ldr	r2, [pc, #24]	@ (80012f0 <HAL_InitTick+0x68>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e000      	b.n	80012e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	24000014 	.word	0x24000014
 80012ec:	24000008 	.word	0x24000008
 80012f0:	24000010 	.word	0x24000010

080012f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_IncTick+0x20>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_IncTick+0x24>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4413      	add	r3, r2
 8001304:	4a04      	ldr	r2, [pc, #16]	@ (8001318 <HAL_IncTick+0x24>)
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	24000014 	.word	0x24000014
 8001318:	24000614 	.word	0x24000614

0800131c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b03      	ldr	r3, [pc, #12]	@ (8001330 <HAL_GetTick+0x14>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	24000614 	.word	0x24000614

08001334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800133c:	f7ff ffee 	bl	800131c <HAL_GetTick>
 8001340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800134c:	d005      	beq.n	800135a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134e:	4b0a      	ldr	r3, [pc, #40]	@ (8001378 <HAL_Delay+0x44>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800135a:	bf00      	nop
 800135c:	f7ff ffde 	bl	800131c <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	429a      	cmp	r2, r3
 800136a:	d8f7      	bhi.n	800135c <HAL_Delay+0x28>
  {
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	24000014 	.word	0x24000014

0800137c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001380:	4b03      	ldr	r3, [pc, #12]	@ (8001390 <HAL_GetREVID+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	0c1b      	lsrs	r3, r3, #16
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	5c001000 	.word	0x5c001000

08001394 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	431a      	orrs	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	609a      	str	r2, [r3, #8]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	609a      	str	r2, [r3, #8]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b087      	sub	sp, #28
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3360      	adds	r3, #96	@ 0x60
 800140e:	461a      	mov	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	430b      	orrs	r3, r1
 800142a:	431a      	orrs	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001430:	bf00      	nop
 8001432:	371c      	adds	r7, #28
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	f003 031f 	and.w	r3, r3, #31
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	fa01 f303 	lsl.w	r3, r1, r3
 800145c:	431a      	orrs	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	611a      	str	r2, [r3, #16]
}
 8001462:	bf00      	nop
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800146e:	b480      	push	{r7}
 8001470:	b087      	sub	sp, #28
 8001472:	af00      	add	r7, sp, #0
 8001474:	60f8      	str	r0, [r7, #12]
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	3360      	adds	r3, #96	@ 0x60
 800147e:	461a      	mov	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	431a      	orrs	r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	601a      	str	r2, [r3, #0]
  }
}
 8001498:	bf00      	nop
 800149a:	371c      	adds	r7, #28
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b087      	sub	sp, #28
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3330      	adds	r3, #48	@ 0x30
 80014da:	461a      	mov	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	0a1b      	lsrs	r3, r3, #8
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	4413      	add	r3, r2
 80014e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	f003 031f 	and.w	r3, r3, #31
 80014f4:	211f      	movs	r1, #31
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	401a      	ands	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	0e9b      	lsrs	r3, r3, #26
 8001502:	f003 011f 	and.w	r1, r3, #31
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	f003 031f 	and.w	r3, r3, #31
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	431a      	orrs	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001516:	bf00      	nop
 8001518:	371c      	adds	r7, #28
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001548:	b480      	push	{r7}
 800154a:	b087      	sub	sp, #28
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	3314      	adds	r3, #20
 8001558:	461a      	mov	r2, r3
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	0e5b      	lsrs	r3, r3, #25
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	4413      	add	r3, r2
 8001566:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	0d1b      	lsrs	r3, r3, #20
 8001570:	f003 031f 	and.w	r3, r3, #31
 8001574:	2107      	movs	r1, #7
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	401a      	ands	r2, r3
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	0d1b      	lsrs	r3, r3, #20
 8001582:	f003 031f 	and.w	r3, r3, #31
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	fa01 f303 	lsl.w	r3, r1, r3
 800158c:	431a      	orrs	r2, r3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001592:	bf00      	nop
 8001594:	371c      	adds	r7, #28
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015b8:	43db      	mvns	r3, r3
 80015ba:	401a      	ands	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f003 0318 	and.w	r3, r3, #24
 80015c2:	4908      	ldr	r1, [pc, #32]	@ (80015e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80015c4:	40d9      	lsrs	r1, r3
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	400b      	ands	r3, r1
 80015ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015ce:	431a      	orrs	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	000fffff 	.word	0x000fffff

080015e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 031f 	and.w	r3, r3, #31
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <LL_ADC_DisableDeepPowerDown+0x20>)
 800162e:	4013      	ands	r3, r2
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6093      	str	r3, [r2, #8]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	5fffffc0 	.word	0x5fffffc0

08001644 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001654:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001658:	d101      	bne.n	800165e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <LL_ADC_EnableInternalRegulator+0x24>)
 800167a:	4013      	ands	r3, r2
 800167c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	6fffffc0 	.word	0x6fffffc0

08001694 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80016a8:	d101      	bne.n	80016ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d101      	bne.n	80016d4 <LL_ADC_IsEnabled+0x18>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <LL_ADC_IsEnabled+0x1a>
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d101      	bne.n	80016fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	2b08      	cmp	r3, #8
 800171a:	d101      	bne.n	8001720 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b089      	sub	sp, #36	@ 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e18f      	b.n	8001a6a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001754:	2b00      	cmp	r3, #0
 8001756:	d109      	bne.n	800176c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff f89f 	bl	800089c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff67 	bl	8001644 <LL_ADC_IsDeepPowerDownEnabled>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d004      	beq.n	8001786 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff4d 	bl	8001620 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ff82 	bl	8001694 <LL_ADC_IsInternalRegulatorEnabled>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d114      	bne.n	80017c0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ff66 	bl	800166c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017a0:	4b87      	ldr	r3, [pc, #540]	@ (80019c0 <HAL_ADC_Init+0x290>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	099b      	lsrs	r3, r3, #6
 80017a6:	4a87      	ldr	r2, [pc, #540]	@ (80019c4 <HAL_ADC_Init+0x294>)
 80017a8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ac:	099b      	lsrs	r3, r3, #6
 80017ae:	3301      	adds	r3, #1
 80017b0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017b2:	e002      	b.n	80017ba <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1f9      	bne.n	80017b4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff65 	bl	8001694 <LL_ADC_IsInternalRegulatorEnabled>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10d      	bne.n	80017ec <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d4:	f043 0210 	orr.w	r2, r3, #16
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e0:	f043 0201 	orr.w	r2, r3, #1
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff76 	bl	80016e2 <LL_ADC_REG_IsConversionOngoing>
 80017f6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017fc:	f003 0310 	and.w	r3, r3, #16
 8001800:	2b00      	cmp	r3, #0
 8001802:	f040 8129 	bne.w	8001a58 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2b00      	cmp	r3, #0
 800180a:	f040 8125 	bne.w	8001a58 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001812:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001816:	f043 0202 	orr.w	r2, r3, #2
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff ff4a 	bl	80016bc <LL_ADC_IsEnabled>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d136      	bne.n	800189c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a65      	ldr	r2, [pc, #404]	@ (80019c8 <HAL_ADC_Init+0x298>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d004      	beq.n	8001842 <HAL_ADC_Init+0x112>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a63      	ldr	r2, [pc, #396]	@ (80019cc <HAL_ADC_Init+0x29c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d10e      	bne.n	8001860 <HAL_ADC_Init+0x130>
 8001842:	4861      	ldr	r0, [pc, #388]	@ (80019c8 <HAL_ADC_Init+0x298>)
 8001844:	f7ff ff3a 	bl	80016bc <LL_ADC_IsEnabled>
 8001848:	4604      	mov	r4, r0
 800184a:	4860      	ldr	r0, [pc, #384]	@ (80019cc <HAL_ADC_Init+0x29c>)
 800184c:	f7ff ff36 	bl	80016bc <LL_ADC_IsEnabled>
 8001850:	4603      	mov	r3, r0
 8001852:	4323      	orrs	r3, r4
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf0c      	ite	eq
 8001858:	2301      	moveq	r3, #1
 800185a:	2300      	movne	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	e008      	b.n	8001872 <HAL_ADC_Init+0x142>
 8001860:	485b      	ldr	r0, [pc, #364]	@ (80019d0 <HAL_ADC_Init+0x2a0>)
 8001862:	f7ff ff2b 	bl	80016bc <LL_ADC_IsEnabled>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	bf0c      	ite	eq
 800186c:	2301      	moveq	r3, #1
 800186e:	2300      	movne	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d012      	beq.n	800189c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a53      	ldr	r2, [pc, #332]	@ (80019c8 <HAL_ADC_Init+0x298>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d004      	beq.n	800188a <HAL_ADC_Init+0x15a>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a51      	ldr	r2, [pc, #324]	@ (80019cc <HAL_ADC_Init+0x29c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d101      	bne.n	800188e <HAL_ADC_Init+0x15e>
 800188a:	4a52      	ldr	r2, [pc, #328]	@ (80019d4 <HAL_ADC_Init+0x2a4>)
 800188c:	e000      	b.n	8001890 <HAL_ADC_Init+0x160>
 800188e:	4a52      	ldr	r2, [pc, #328]	@ (80019d8 <HAL_ADC_Init+0x2a8>)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4619      	mov	r1, r3
 8001896:	4610      	mov	r0, r2
 8001898:	f7ff fd7c 	bl	8001394 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800189c:	f7ff fd6e 	bl	800137c <HAL_GetREVID>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d914      	bls.n	80018d4 <HAL_ADC_Init+0x1a4>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b10      	cmp	r3, #16
 80018b0:	d110      	bne.n	80018d4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7d5b      	ldrb	r3, [r3, #21]
 80018b6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018bc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80018c2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	7f1b      	ldrb	r3, [r3, #28]
 80018c8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80018ca:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018cc:	f043 030c 	orr.w	r3, r3, #12
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	e00d      	b.n	80018f0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	7d5b      	ldrb	r3, [r3, #21]
 80018d8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018de:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80018e4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	7f1b      	ldrb	r3, [r3, #28]
 80018ea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7f1b      	ldrb	r3, [r3, #28]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d106      	bne.n	8001906 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	045b      	lsls	r3, r3, #17
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190a:	2b00      	cmp	r3, #0
 800190c:	d009      	beq.n	8001922 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001912:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800191a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	4b2c      	ldr	r3, [pc, #176]	@ (80019dc <HAL_ADC_Init+0x2ac>)
 800192a:	4013      	ands	r3, r2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	69b9      	ldr	r1, [r7, #24]
 8001932:	430b      	orrs	r3, r1
 8001934:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fed1 	bl	80016e2 <LL_ADC_REG_IsConversionOngoing>
 8001940:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fede 	bl	8001708 <LL_ADC_INJ_IsConversionOngoing>
 800194c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d15f      	bne.n	8001a14 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d15c      	bne.n	8001a14 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	7d1b      	ldrb	r3, [r3, #20]
 800195e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	4b1c      	ldr	r3, [pc, #112]	@ (80019e0 <HAL_ADC_Init+0x2b0>)
 8001970:	4013      	ands	r3, r2
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	69b9      	ldr	r1, [r7, #24]
 8001978:	430b      	orrs	r3, r1
 800197a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001982:	2b01      	cmp	r3, #1
 8001984:	d130      	bne.n	80019e8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	691a      	ldr	r2, [r3, #16]
 8001992:	4b14      	ldr	r3, [pc, #80]	@ (80019e4 <HAL_ADC_Init+0x2b4>)
 8001994:	4013      	ands	r3, r2
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800199a:	3a01      	subs	r2, #1
 800199c:	0411      	lsls	r1, r2, #16
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019a2:	4311      	orrs	r1, r2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80019a8:	4311      	orrs	r1, r2
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019ae:	430a      	orrs	r2, r1
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0201 	orr.w	r2, r2, #1
 80019ba:	611a      	str	r2, [r3, #16]
 80019bc:	e01c      	b.n	80019f8 <HAL_ADC_Init+0x2c8>
 80019be:	bf00      	nop
 80019c0:	24000008 	.word	0x24000008
 80019c4:	053e2d63 	.word	0x053e2d63
 80019c8:	40022000 	.word	0x40022000
 80019cc:	40022100 	.word	0x40022100
 80019d0:	58026000 	.word	0x58026000
 80019d4:	40022300 	.word	0x40022300
 80019d8:	58026300 	.word	0x58026300
 80019dc:	fff0c003 	.word	0xfff0c003
 80019e0:	ffffbffc 	.word	0xffffbffc
 80019e4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691a      	ldr	r2, [r3, #16]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0201 	bic.w	r2, r2, #1
 80019f6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 fde4 	bl	80025dc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d10c      	bne.n	8001a36 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	f023 010f 	bic.w	r1, r3, #15
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	1e5a      	subs	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a34:	e007      	b.n	8001a46 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 020f 	bic.w	r2, r2, #15
 8001a44:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a4a:	f023 0303 	bic.w	r3, r3, #3
 8001a4e:	f043 0201 	orr.w	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a56:	e007      	b.n	8001a68 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a5c:	f043 0210 	orr.w	r2, r3, #16
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a68:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	@ 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd90      	pop	{r4, r7, pc}
 8001a72:	bf00      	nop

08001a74 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	@ 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a87      	ldr	r2, [pc, #540]	@ (8001cb4 <HAL_ADC_IRQHandler+0x240>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d004      	beq.n	8001aa4 <HAL_ADC_IRQHandler+0x30>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a86      	ldr	r2, [pc, #536]	@ (8001cb8 <HAL_ADC_IRQHandler+0x244>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d101      	bne.n	8001aa8 <HAL_ADC_IRQHandler+0x34>
 8001aa4:	4b85      	ldr	r3, [pc, #532]	@ (8001cbc <HAL_ADC_IRQHandler+0x248>)
 8001aa6:	e000      	b.n	8001aaa <HAL_ADC_IRQHandler+0x36>
 8001aa8:	4b85      	ldr	r3, [pc, #532]	@ (8001cc0 <HAL_ADC_IRQHandler+0x24c>)
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fd9c 	bl	80015e8 <LL_ADC_GetMultimode>
 8001ab0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d017      	beq.n	8001aec <HAL_ADC_IRQHandler+0x78>
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d012      	beq.n	8001aec <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d105      	bne.n	8001ade <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 feb0 	bl	8002844 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2202      	movs	r2, #2
 8001aea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d004      	beq.n	8001b00 <HAL_ADC_IRQHandler+0x8c>
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10a      	bne.n	8001b16 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8083 	beq.w	8001c12 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d07d      	beq.n	8001c12 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d105      	bne.n	8001b2e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b26:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fcb6 	bl	80014a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d062      	beq.n	8001c04 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a5d      	ldr	r2, [pc, #372]	@ (8001cb8 <HAL_ADC_IRQHandler+0x244>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d002      	beq.n	8001b4e <HAL_ADC_IRQHandler+0xda>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	e000      	b.n	8001b50 <HAL_ADC_IRQHandler+0xdc>
 8001b4e:	4b59      	ldr	r3, [pc, #356]	@ (8001cb4 <HAL_ADC_IRQHandler+0x240>)
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d008      	beq.n	8001b6a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d005      	beq.n	8001b6a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	2b05      	cmp	r3, #5
 8001b62:	d002      	beq.n	8001b6a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	2b09      	cmp	r3, #9
 8001b68:	d104      	bne.n	8001b74 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	623b      	str	r3, [r7, #32]
 8001b72:	e00c      	b.n	8001b8e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a4f      	ldr	r2, [pc, #316]	@ (8001cb8 <HAL_ADC_IRQHandler+0x244>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d002      	beq.n	8001b84 <HAL_ADC_IRQHandler+0x110>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	e000      	b.n	8001b86 <HAL_ADC_IRQHandler+0x112>
 8001b84:	4b4b      	ldr	r3, [pc, #300]	@ (8001cb4 <HAL_ADC_IRQHandler+0x240>)
 8001b86:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d135      	bne.n	8001c04 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d12e      	bne.n	8001c04 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fd99 	bl	80016e2 <LL_ADC_REG_IsConversionOngoing>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d11a      	bne.n	8001bec <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 020c 	bic.w	r2, r2, #12
 8001bc4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d112      	bne.n	8001c04 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be2:	f043 0201 	orr.w	r2, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	655a      	str	r2, [r3, #84]	@ 0x54
 8001bea:	e00b      	b.n	8001c04 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf0:	f043 0210 	orr.w	r2, r3, #16
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfc:	f043 0201 	orr.w	r2, r3, #1
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f96f 	bl	8001ee8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	220c      	movs	r2, #12
 8001c10:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d004      	beq.n	8001c26 <HAL_ADC_IRQHandler+0x1b2>
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	f003 0320 	and.w	r3, r3, #32
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10b      	bne.n	8001c3e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80a0 	beq.w	8001d72 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 809a 	beq.w	8001d72 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d105      	bne.n	8001c56 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c4e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fc61 	bl	8001522 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001c60:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fc1c 	bl	80014a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c6c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a11      	ldr	r2, [pc, #68]	@ (8001cb8 <HAL_ADC_IRQHandler+0x244>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d002      	beq.n	8001c7e <HAL_ADC_IRQHandler+0x20a>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	e000      	b.n	8001c80 <HAL_ADC_IRQHandler+0x20c>
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <HAL_ADC_IRQHandler+0x240>)
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d008      	beq.n	8001c9a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d005      	beq.n	8001c9a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2b06      	cmp	r3, #6
 8001c92:	d002      	beq.n	8001c9a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	2b07      	cmp	r3, #7
 8001c98:	d104      	bne.n	8001ca4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	623b      	str	r3, [r7, #32]
 8001ca2:	e014      	b.n	8001cce <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a03      	ldr	r2, [pc, #12]	@ (8001cb8 <HAL_ADC_IRQHandler+0x244>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00a      	beq.n	8001cc4 <HAL_ADC_IRQHandler+0x250>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	e008      	b.n	8001cc6 <HAL_ADC_IRQHandler+0x252>
 8001cb4:	40022000 	.word	0x40022000
 8001cb8:	40022100 	.word	0x40022100
 8001cbc:	40022300 	.word	0x40022300
 8001cc0:	58026300 	.word	0x58026300
 8001cc4:	4b84      	ldr	r3, [pc, #528]	@ (8001ed8 <HAL_ADC_IRQHandler+0x464>)
 8001cc6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d047      	beq.n	8001d64 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d007      	beq.n	8001cee <HAL_ADC_IRQHandler+0x27a>
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d03f      	beq.n	8001d64 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d13a      	bne.n	8001d64 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cf8:	2b40      	cmp	r3, #64	@ 0x40
 8001cfa:	d133      	bne.n	8001d64 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d12e      	bne.n	8001d64 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fcfc 	bl	8001708 <LL_ADC_INJ_IsConversionOngoing>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d11a      	bne.n	8001d4c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001d24:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d112      	bne.n	8001d64 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d42:	f043 0201 	orr.w	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d4a:	e00b      	b.n	8001d64 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d50:	f043 0210 	orr.w	r2, r3, #16
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5c:	f043 0201 	orr.w	r2, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fd45 	bl	80027f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2260      	movs	r2, #96	@ 0x60
 8001d70:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d011      	beq.n	8001da0 <HAL_ADC_IRQHandler+0x32c>
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00c      	beq.n	8001da0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d8a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f8b2 	bl	8001efc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2280      	movs	r2, #128	@ 0x80
 8001d9e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d012      	beq.n	8001dd0 <HAL_ADC_IRQHandler+0x35c>
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00d      	beq.n	8001dd0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 fd2b 	bl	800281c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d012      	beq.n	8001e00 <HAL_ADC_IRQHandler+0x38c>
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00d      	beq.n	8001e00 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 fd1d 	bl	8002830 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dfe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d043      	beq.n	8001e92 <HAL_ADC_IRQHandler+0x41e>
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d03e      	beq.n	8001e92 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e20:	e021      	b.n	8001e66 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d015      	beq.n	8001e54 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ed8 <HAL_ADC_IRQHandler+0x464>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d004      	beq.n	8001e3c <HAL_ADC_IRQHandler+0x3c8>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a29      	ldr	r2, [pc, #164]	@ (8001edc <HAL_ADC_IRQHandler+0x468>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d101      	bne.n	8001e40 <HAL_ADC_IRQHandler+0x3cc>
 8001e3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ee0 <HAL_ADC_IRQHandler+0x46c>)
 8001e3e:	e000      	b.n	8001e42 <HAL_ADC_IRQHandler+0x3ce>
 8001e40:	4b28      	ldr	r3, [pc, #160]	@ (8001ee4 <HAL_ADC_IRQHandler+0x470>)
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fbde 	bl	8001604 <LL_ADC_GetMultiDMATransfer>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00b      	beq.n	8001e66 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e52:	e008      	b.n	8001e66 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001e62:	2301      	movs	r3, #1
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d10e      	bne.n	8001e8a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e70:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7c:	f043 0202 	orr.w	r2, r3, #2
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f843 	bl	8001f10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2210      	movs	r2, #16
 8001e90:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d018      	beq.n	8001ece <HAL_ADC_IRQHandler+0x45a>
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d013      	beq.n	8001ece <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eaa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb6:	f043 0208 	orr.w	r2, r3, #8
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ec6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 fc9d 	bl	8002808 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001ece:	bf00      	nop
 8001ed0:	3728      	adds	r7, #40	@ 0x28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40022000 	.word	0x40022000
 8001edc:	40022100 	.word	0x40022100
 8001ee0:	40022300 	.word	0x40022300
 8001ee4:	58026300 	.word	0x58026300

08001ee8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b0a1      	sub	sp, #132	@ 0x84
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	4a65      	ldr	r2, [pc, #404]	@ (80020d4 <HAL_ADC_ConfigChannel+0x1b0>)
 8001f3e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x2a>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e32e      	b.n	80025ac <HAL_ADC_ConfigChannel+0x688>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fbc1 	bl	80016e2 <LL_ADC_REG_IsConversionOngoing>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f040 8313 	bne.w	800258e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db2c      	blt.n	8001fca <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d108      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x6a>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	0e9b      	lsrs	r3, r3, #26
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	2201      	movs	r2, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	e016      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x98>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f9e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fa0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001fa6:	2320      	movs	r3, #32
 8001fa8:	e003      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001faa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fac:	fab3 f383 	clz	r3, r3
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f003 031f 	and.w	r3, r3, #31
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	69d1      	ldr	r1, [r2, #28]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	430b      	orrs	r3, r1
 8001fc8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	6859      	ldr	r1, [r3, #4]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	f7ff fa77 	bl	80014ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fb7e 	bl	80016e2 <LL_ADC_REG_IsConversionOngoing>
 8001fe6:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fb8b 	bl	8001708 <LL_ADC_INJ_IsConversionOngoing>
 8001ff2:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ff4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 80b8 	bne.w	800216c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ffc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f040 80b4 	bne.w	800216c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6818      	ldr	r0, [r3, #0]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	6819      	ldr	r1, [r3, #0]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	461a      	mov	r2, r3
 8002012:	f7ff fa99 	bl	8001548 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002016:	4b30      	ldr	r3, [pc, #192]	@ (80020d8 <HAL_ADC_ConfigChannel+0x1b4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800201e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002022:	d10b      	bne.n	800203c <HAL_ADC_ConfigChannel+0x118>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	695a      	ldr	r2, [r3, #20]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	089b      	lsrs	r3, r3, #2
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	e01d      	b.n	8002078 <HAL_ADC_ConfigChannel+0x154>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10b      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x13e>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	695a      	ldr	r2, [r3, #20]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	089b      	lsrs	r3, r3, #2
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	e00a      	b.n	8002078 <HAL_ADC_ConfigChannel+0x154>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	2b04      	cmp	r3, #4
 8002080:	d02c      	beq.n	80020dc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6919      	ldr	r1, [r3, #16]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002090:	f7ff f9b4 	bl	80013fc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6919      	ldr	r1, [r3, #16]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	7e5b      	ldrb	r3, [r3, #25]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d102      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x186>
 80020a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80020a8:	e000      	b.n	80020ac <HAL_ADC_ConfigChannel+0x188>
 80020aa:	2300      	movs	r3, #0
 80020ac:	461a      	mov	r2, r3
 80020ae:	f7ff f9de 	bl	800146e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	6919      	ldr	r1, [r3, #16]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	7e1b      	ldrb	r3, [r3, #24]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d102      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x1a4>
 80020c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020c6:	e000      	b.n	80020ca <HAL_ADC_ConfigChannel+0x1a6>
 80020c8:	2300      	movs	r3, #0
 80020ca:	461a      	mov	r2, r3
 80020cc:	f7ff f9b6 	bl	800143c <LL_ADC_SetDataRightShift>
 80020d0:	e04c      	b.n	800216c <HAL_ADC_ConfigChannel+0x248>
 80020d2:	bf00      	nop
 80020d4:	47ff0000 	.word	0x47ff0000
 80020d8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	069b      	lsls	r3, r3, #26
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d107      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020fe:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002106:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	069b      	lsls	r3, r3, #26
 8002110:	429a      	cmp	r2, r3
 8002112:	d107      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002122:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800212a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	069b      	lsls	r3, r3, #26
 8002134:	429a      	cmp	r2, r3
 8002136:	d107      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002146:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800214e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	069b      	lsls	r3, r3, #26
 8002158:	429a      	cmp	r2, r3
 800215a:	d107      	bne.n	800216c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800216a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff faa3 	bl	80016bc <LL_ADC_IsEnabled>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	f040 8211 	bne.w	80025a0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6819      	ldr	r1, [r3, #0]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	461a      	mov	r2, r3
 800218c:	f7ff fa08 	bl	80015a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4aa1      	ldr	r2, [pc, #644]	@ (800241c <HAL_ADC_ConfigChannel+0x4f8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	f040 812e 	bne.w	80023f8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10b      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x2a0>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	0e9b      	lsrs	r3, r3, #26
 80021b2:	3301      	adds	r3, #1
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	2b09      	cmp	r3, #9
 80021ba:	bf94      	ite	ls
 80021bc:	2301      	movls	r3, #1
 80021be:	2300      	movhi	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	e019      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x2d4>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021cc:	fa93 f3a3 	rbit	r3, r3
 80021d0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80021d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80021d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80021dc:	2320      	movs	r3, #32
 80021de:	e003      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80021e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	3301      	adds	r3, #1
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	2b09      	cmp	r3, #9
 80021f0:	bf94      	ite	ls
 80021f2:	2301      	movls	r3, #1
 80021f4:	2300      	movhi	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d079      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002204:	2b00      	cmp	r3, #0
 8002206:	d107      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x2f4>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	0e9b      	lsrs	r3, r3, #26
 800220e:	3301      	adds	r3, #1
 8002210:	069b      	lsls	r3, r3, #26
 8002212:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002216:	e015      	b.n	8002244 <HAL_ADC_ConfigChannel+0x320>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002228:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800222a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002230:	2320      	movs	r3, #32
 8002232:	e003      	b.n	800223c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002234:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002236:	fab3 f383 	clz	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	3301      	adds	r3, #1
 800223e:	069b      	lsls	r3, r3, #26
 8002240:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800224c:	2b00      	cmp	r3, #0
 800224e:	d109      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x340>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	0e9b      	lsrs	r3, r3, #26
 8002256:	3301      	adds	r3, #1
 8002258:	f003 031f 	and.w	r3, r3, #31
 800225c:	2101      	movs	r1, #1
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	e017      	b.n	8002294 <HAL_ADC_ConfigChannel+0x370>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002274:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002276:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 800227c:	2320      	movs	r3, #32
 800227e:	e003      	b.n	8002288 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	3301      	adds	r3, #1
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	2101      	movs	r1, #1
 8002290:	fa01 f303 	lsl.w	r3, r1, r3
 8002294:	ea42 0103 	orr.w	r1, r2, r3
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10a      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x396>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0e9b      	lsrs	r3, r3, #26
 80022aa:	3301      	adds	r3, #1
 80022ac:	f003 021f 	and.w	r2, r3, #31
 80022b0:	4613      	mov	r3, r2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	4413      	add	r3, r2
 80022b6:	051b      	lsls	r3, r3, #20
 80022b8:	e018      	b.n	80022ec <HAL_ADC_ConfigChannel+0x3c8>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80022c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80022cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80022d2:	2320      	movs	r3, #32
 80022d4:	e003      	b.n	80022de <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80022d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022d8:	fab3 f383 	clz	r3, r3
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	4613      	mov	r3, r2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022ec:	430b      	orrs	r3, r1
 80022ee:	e07e      	b.n	80023ee <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d107      	bne.n	800230c <HAL_ADC_ConfigChannel+0x3e8>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	0e9b      	lsrs	r3, r3, #26
 8002302:	3301      	adds	r3, #1
 8002304:	069b      	lsls	r3, r3, #26
 8002306:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800230a:	e015      	b.n	8002338 <HAL_ADC_ConfigChannel+0x414>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800231e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002324:	2320      	movs	r3, #32
 8002326:	e003      	b.n	8002330 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	3301      	adds	r3, #1
 8002332:	069b      	lsls	r3, r3, #26
 8002334:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002340:	2b00      	cmp	r3, #0
 8002342:	d109      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x434>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	0e9b      	lsrs	r3, r3, #26
 800234a:	3301      	adds	r3, #1
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	2101      	movs	r1, #1
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	e017      	b.n	8002388 <HAL_ADC_ConfigChannel+0x464>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	61bb      	str	r3, [r7, #24]
  return result;
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002370:	2320      	movs	r3, #32
 8002372:	e003      	b.n	800237c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	3301      	adds	r3, #1
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	2101      	movs	r1, #1
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	ea42 0103 	orr.w	r1, r2, r3
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10d      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x490>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	0e9b      	lsrs	r3, r3, #26
 800239e:	3301      	adds	r3, #1
 80023a0:	f003 021f 	and.w	r2, r3, #31
 80023a4:	4613      	mov	r3, r2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4413      	add	r3, r2
 80023aa:	3b1e      	subs	r3, #30
 80023ac:	051b      	lsls	r3, r3, #20
 80023ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023b2:	e01b      	b.n	80023ec <HAL_ADC_ConfigChannel+0x4c8>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	fa93 f3a3 	rbit	r3, r3
 80023c0:	60fb      	str	r3, [r7, #12]
  return result;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80023cc:	2320      	movs	r3, #32
 80023ce:	e003      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	3301      	adds	r3, #1
 80023da:	f003 021f 	and.w	r2, r3, #31
 80023de:	4613      	mov	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	4413      	add	r3, r2
 80023e4:	3b1e      	subs	r3, #30
 80023e6:	051b      	lsls	r3, r3, #20
 80023e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023ec:	430b      	orrs	r3, r1
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	6892      	ldr	r2, [r2, #8]
 80023f2:	4619      	mov	r1, r3
 80023f4:	f7ff f8a8 	bl	8001548 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f280 80cf 	bge.w	80025a0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a06      	ldr	r2, [pc, #24]	@ (8002420 <HAL_ADC_ConfigChannel+0x4fc>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d004      	beq.n	8002416 <HAL_ADC_ConfigChannel+0x4f2>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a04      	ldr	r2, [pc, #16]	@ (8002424 <HAL_ADC_ConfigChannel+0x500>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d10a      	bne.n	800242c <HAL_ADC_ConfigChannel+0x508>
 8002416:	4b04      	ldr	r3, [pc, #16]	@ (8002428 <HAL_ADC_ConfigChannel+0x504>)
 8002418:	e009      	b.n	800242e <HAL_ADC_ConfigChannel+0x50a>
 800241a:	bf00      	nop
 800241c:	47ff0000 	.word	0x47ff0000
 8002420:	40022000 	.word	0x40022000
 8002424:	40022100 	.word	0x40022100
 8002428:	40022300 	.word	0x40022300
 800242c:	4b61      	ldr	r3, [pc, #388]	@ (80025b4 <HAL_ADC_ConfigChannel+0x690>)
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe ffd6 	bl	80013e0 <LL_ADC_GetCommonPathInternalCh>
 8002434:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a5f      	ldr	r2, [pc, #380]	@ (80025b8 <HAL_ADC_ConfigChannel+0x694>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d004      	beq.n	800244a <HAL_ADC_ConfigChannel+0x526>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a5d      	ldr	r2, [pc, #372]	@ (80025bc <HAL_ADC_ConfigChannel+0x698>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d10e      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x544>
 800244a:	485b      	ldr	r0, [pc, #364]	@ (80025b8 <HAL_ADC_ConfigChannel+0x694>)
 800244c:	f7ff f936 	bl	80016bc <LL_ADC_IsEnabled>
 8002450:	4604      	mov	r4, r0
 8002452:	485a      	ldr	r0, [pc, #360]	@ (80025bc <HAL_ADC_ConfigChannel+0x698>)
 8002454:	f7ff f932 	bl	80016bc <LL_ADC_IsEnabled>
 8002458:	4603      	mov	r3, r0
 800245a:	4323      	orrs	r3, r4
 800245c:	2b00      	cmp	r3, #0
 800245e:	bf0c      	ite	eq
 8002460:	2301      	moveq	r3, #1
 8002462:	2300      	movne	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	e008      	b.n	800247a <HAL_ADC_ConfigChannel+0x556>
 8002468:	4855      	ldr	r0, [pc, #340]	@ (80025c0 <HAL_ADC_ConfigChannel+0x69c>)
 800246a:	f7ff f927 	bl	80016bc <LL_ADC_IsEnabled>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	bf0c      	ite	eq
 8002474:	2301      	moveq	r3, #1
 8002476:	2300      	movne	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d07d      	beq.n	800257a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a50      	ldr	r2, [pc, #320]	@ (80025c4 <HAL_ADC_ConfigChannel+0x6a0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d130      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x5c6>
 8002488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800248a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d12b      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a4a      	ldr	r2, [pc, #296]	@ (80025c0 <HAL_ADC_ConfigChannel+0x69c>)
 8002498:	4293      	cmp	r3, r2
 800249a:	f040 8081 	bne.w	80025a0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a45      	ldr	r2, [pc, #276]	@ (80025b8 <HAL_ADC_ConfigChannel+0x694>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d004      	beq.n	80024b2 <HAL_ADC_ConfigChannel+0x58e>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a43      	ldr	r2, [pc, #268]	@ (80025bc <HAL_ADC_ConfigChannel+0x698>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d101      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x592>
 80024b2:	4a45      	ldr	r2, [pc, #276]	@ (80025c8 <HAL_ADC_ConfigChannel+0x6a4>)
 80024b4:	e000      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x594>
 80024b6:	4a3f      	ldr	r2, [pc, #252]	@ (80025b4 <HAL_ADC_ConfigChannel+0x690>)
 80024b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024be:	4619      	mov	r1, r3
 80024c0:	4610      	mov	r0, r2
 80024c2:	f7fe ff7a 	bl	80013ba <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024c6:	4b41      	ldr	r3, [pc, #260]	@ (80025cc <HAL_ADC_ConfigChannel+0x6a8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	099b      	lsrs	r3, r3, #6
 80024cc:	4a40      	ldr	r2, [pc, #256]	@ (80025d0 <HAL_ADC_ConfigChannel+0x6ac>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	099b      	lsrs	r3, r3, #6
 80024d4:	3301      	adds	r3, #1
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024da:	e002      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	3b01      	subs	r3, #1
 80024e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f9      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e8:	e05a      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a39      	ldr	r2, [pc, #228]	@ (80025d4 <HAL_ADC_ConfigChannel+0x6b0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d11e      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x60e>
 80024f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d119      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a2f      	ldr	r2, [pc, #188]	@ (80025c0 <HAL_ADC_ConfigChannel+0x69c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d14b      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a2a      	ldr	r2, [pc, #168]	@ (80025b8 <HAL_ADC_ConfigChannel+0x694>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d004      	beq.n	800251c <HAL_ADC_ConfigChannel+0x5f8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a29      	ldr	r2, [pc, #164]	@ (80025bc <HAL_ADC_ConfigChannel+0x698>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d101      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x5fc>
 800251c:	4a2a      	ldr	r2, [pc, #168]	@ (80025c8 <HAL_ADC_ConfigChannel+0x6a4>)
 800251e:	e000      	b.n	8002522 <HAL_ADC_ConfigChannel+0x5fe>
 8002520:	4a24      	ldr	r2, [pc, #144]	@ (80025b4 <HAL_ADC_ConfigChannel+0x690>)
 8002522:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002524:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002528:	4619      	mov	r1, r3
 800252a:	4610      	mov	r0, r2
 800252c:	f7fe ff45 	bl	80013ba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002530:	e036      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a28      	ldr	r2, [pc, #160]	@ (80025d8 <HAL_ADC_ConfigChannel+0x6b4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d131      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x67c>
 800253c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800253e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d12c      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a1d      	ldr	r2, [pc, #116]	@ (80025c0 <HAL_ADC_ConfigChannel+0x69c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d127      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a18      	ldr	r2, [pc, #96]	@ (80025b8 <HAL_ADC_ConfigChannel+0x694>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d004      	beq.n	8002564 <HAL_ADC_ConfigChannel+0x640>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a17      	ldr	r2, [pc, #92]	@ (80025bc <HAL_ADC_ConfigChannel+0x698>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d101      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x644>
 8002564:	4a18      	ldr	r2, [pc, #96]	@ (80025c8 <HAL_ADC_ConfigChannel+0x6a4>)
 8002566:	e000      	b.n	800256a <HAL_ADC_ConfigChannel+0x646>
 8002568:	4a12      	ldr	r2, [pc, #72]	@ (80025b4 <HAL_ADC_ConfigChannel+0x690>)
 800256a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800256c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002570:	4619      	mov	r1, r3
 8002572:	4610      	mov	r0, r2
 8002574:	f7fe ff21 	bl	80013ba <LL_ADC_SetCommonPathInternalCh>
 8002578:	e012      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257e:	f043 0220 	orr.w	r2, r3, #32
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800258c:	e008      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002592:	f043 0220 	orr.w	r2, r3, #32
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80025a8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3784      	adds	r7, #132	@ 0x84
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd90      	pop	{r4, r7, pc}
 80025b4:	58026300 	.word	0x58026300
 80025b8:	40022000 	.word	0x40022000
 80025bc:	40022100 	.word	0x40022100
 80025c0:	58026000 	.word	0x58026000
 80025c4:	cb840000 	.word	0xcb840000
 80025c8:	40022300 	.word	0x40022300
 80025cc:	24000008 	.word	0x24000008
 80025d0:	053e2d63 	.word	0x053e2d63
 80025d4:	c7520000 	.word	0xc7520000
 80025d8:	cfb80000 	.word	0xcfb80000

080025dc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a7a      	ldr	r2, [pc, #488]	@ (80027d4 <ADC_ConfigureBoostMode+0x1f8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d004      	beq.n	80025f8 <ADC_ConfigureBoostMode+0x1c>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a79      	ldr	r2, [pc, #484]	@ (80027d8 <ADC_ConfigureBoostMode+0x1fc>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d109      	bne.n	800260c <ADC_ConfigureBoostMode+0x30>
 80025f8:	4b78      	ldr	r3, [pc, #480]	@ (80027dc <ADC_ConfigureBoostMode+0x200>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf14      	ite	ne
 8002604:	2301      	movne	r3, #1
 8002606:	2300      	moveq	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	e008      	b.n	800261e <ADC_ConfigureBoostMode+0x42>
 800260c:	4b74      	ldr	r3, [pc, #464]	@ (80027e0 <ADC_ConfigureBoostMode+0x204>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf14      	ite	ne
 8002618:	2301      	movne	r3, #1
 800261a:	2300      	moveq	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d01c      	beq.n	800265c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002622:	f001 fcf7 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 8002626:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002630:	d010      	beq.n	8002654 <ADC_ConfigureBoostMode+0x78>
 8002632:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002636:	d873      	bhi.n	8002720 <ADC_ConfigureBoostMode+0x144>
 8002638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800263c:	d002      	beq.n	8002644 <ADC_ConfigureBoostMode+0x68>
 800263e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002642:	d16d      	bne.n	8002720 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	0c1b      	lsrs	r3, r3, #16
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002650:	60fb      	str	r3, [r7, #12]
        break;
 8002652:	e068      	b.n	8002726 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	089b      	lsrs	r3, r3, #2
 8002658:	60fb      	str	r3, [r7, #12]
        break;
 800265a:	e064      	b.n	8002726 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800265c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002660:	f04f 0100 	mov.w	r1, #0
 8002664:	f002 ff3c 	bl	80054e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002668:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002672:	d051      	beq.n	8002718 <ADC_ConfigureBoostMode+0x13c>
 8002674:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002678:	d854      	bhi.n	8002724 <ADC_ConfigureBoostMode+0x148>
 800267a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800267e:	d047      	beq.n	8002710 <ADC_ConfigureBoostMode+0x134>
 8002680:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002684:	d84e      	bhi.n	8002724 <ADC_ConfigureBoostMode+0x148>
 8002686:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800268a:	d03d      	beq.n	8002708 <ADC_ConfigureBoostMode+0x12c>
 800268c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002690:	d848      	bhi.n	8002724 <ADC_ConfigureBoostMode+0x148>
 8002692:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002696:	d033      	beq.n	8002700 <ADC_ConfigureBoostMode+0x124>
 8002698:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800269c:	d842      	bhi.n	8002724 <ADC_ConfigureBoostMode+0x148>
 800269e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80026a2:	d029      	beq.n	80026f8 <ADC_ConfigureBoostMode+0x11c>
 80026a4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80026a8:	d83c      	bhi.n	8002724 <ADC_ConfigureBoostMode+0x148>
 80026aa:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80026ae:	d01a      	beq.n	80026e6 <ADC_ConfigureBoostMode+0x10a>
 80026b0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80026b4:	d836      	bhi.n	8002724 <ADC_ConfigureBoostMode+0x148>
 80026b6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80026ba:	d014      	beq.n	80026e6 <ADC_ConfigureBoostMode+0x10a>
 80026bc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80026c0:	d830      	bhi.n	8002724 <ADC_ConfigureBoostMode+0x148>
 80026c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026c6:	d00e      	beq.n	80026e6 <ADC_ConfigureBoostMode+0x10a>
 80026c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026cc:	d82a      	bhi.n	8002724 <ADC_ConfigureBoostMode+0x148>
 80026ce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80026d2:	d008      	beq.n	80026e6 <ADC_ConfigureBoostMode+0x10a>
 80026d4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80026d8:	d824      	bhi.n	8002724 <ADC_ConfigureBoostMode+0x148>
 80026da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80026de:	d002      	beq.n	80026e6 <ADC_ConfigureBoostMode+0x10a>
 80026e0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80026e4:	d11e      	bne.n	8002724 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	0c9b      	lsrs	r3, r3, #18
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f4:	60fb      	str	r3, [r7, #12]
        break;
 80026f6:	e016      	b.n	8002726 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	60fb      	str	r3, [r7, #12]
        break;
 80026fe:	e012      	b.n	8002726 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	60fb      	str	r3, [r7, #12]
        break;
 8002706:	e00e      	b.n	8002726 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	099b      	lsrs	r3, r3, #6
 800270c:	60fb      	str	r3, [r7, #12]
        break;
 800270e:	e00a      	b.n	8002726 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	09db      	lsrs	r3, r3, #7
 8002714:	60fb      	str	r3, [r7, #12]
        break;
 8002716:	e006      	b.n	8002726 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	0a1b      	lsrs	r3, r3, #8
 800271c:	60fb      	str	r3, [r7, #12]
        break;
 800271e:	e002      	b.n	8002726 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002720:	bf00      	nop
 8002722:	e000      	b.n	8002726 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002724:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002726:	f7fe fe29 	bl	800137c <HAL_GetREVID>
 800272a:	4603      	mov	r3, r0
 800272c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002730:	4293      	cmp	r3, r2
 8002732:	d815      	bhi.n	8002760 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4a2b      	ldr	r2, [pc, #172]	@ (80027e4 <ADC_ConfigureBoostMode+0x208>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d908      	bls.n	800274e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800274a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800274c:	e03e      	b.n	80027cc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800275c:	609a      	str	r2, [r3, #8]
}
 800275e:	e035      	b.n	80027cc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	085b      	lsrs	r3, r3, #1
 8002764:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4a1f      	ldr	r2, [pc, #124]	@ (80027e8 <ADC_ConfigureBoostMode+0x20c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d808      	bhi.n	8002780 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800277c:	609a      	str	r2, [r3, #8]
}
 800277e:	e025      	b.n	80027cc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4a1a      	ldr	r2, [pc, #104]	@ (80027ec <ADC_ConfigureBoostMode+0x210>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d80a      	bhi.n	800279e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800279a:	609a      	str	r2, [r3, #8]
}
 800279c:	e016      	b.n	80027cc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4a13      	ldr	r2, [pc, #76]	@ (80027f0 <ADC_ConfigureBoostMode+0x214>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d80a      	bhi.n	80027bc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027b8:	609a      	str	r2, [r3, #8]
}
 80027ba:	e007      	b.n	80027cc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80027ca:	609a      	str	r2, [r3, #8]
}
 80027cc:	bf00      	nop
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40022000 	.word	0x40022000
 80027d8:	40022100 	.word	0x40022100
 80027dc:	40022300 	.word	0x40022300
 80027e0:	58026300 	.word	0x58026300
 80027e4:	01312d00 	.word	0x01312d00
 80027e8:	005f5e10 	.word	0x005f5e10
 80027ec:	00bebc20 	.word	0x00bebc20
 80027f0:	017d7840 	.word	0x017d7840

080027f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002868:	4b0b      	ldr	r3, [pc, #44]	@ (8002898 <__NVIC_SetPriorityGrouping+0x40>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002874:	4013      	ands	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002880:	4b06      	ldr	r3, [pc, #24]	@ (800289c <__NVIC_SetPriorityGrouping+0x44>)
 8002882:	4313      	orrs	r3, r2
 8002884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002886:	4a04      	ldr	r2, [pc, #16]	@ (8002898 <__NVIC_SetPriorityGrouping+0x40>)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	60d3      	str	r3, [r2, #12]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	e000ed00 	.word	0xe000ed00
 800289c:	05fa0000 	.word	0x05fa0000

080028a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a4:	4b04      	ldr	r3, [pc, #16]	@ (80028b8 <__NVIC_GetPriorityGrouping+0x18>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	0a1b      	lsrs	r3, r3, #8
 80028aa:	f003 0307 	and.w	r3, r3, #7
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	db0b      	blt.n	80028e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	f003 021f 	and.w	r2, r3, #31
 80028d4:	4907      	ldr	r1, [pc, #28]	@ (80028f4 <__NVIC_EnableIRQ+0x38>)
 80028d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	2001      	movs	r0, #1
 80028de:	fa00 f202 	lsl.w	r2, r0, r2
 80028e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000e100 	.word	0xe000e100

080028f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	6039      	str	r1, [r7, #0]
 8002902:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002904:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002908:	2b00      	cmp	r3, #0
 800290a:	db0a      	blt.n	8002922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	b2da      	uxtb	r2, r3
 8002910:	490c      	ldr	r1, [pc, #48]	@ (8002944 <__NVIC_SetPriority+0x4c>)
 8002912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002916:	0112      	lsls	r2, r2, #4
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	440b      	add	r3, r1
 800291c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002920:	e00a      	b.n	8002938 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	4908      	ldr	r1, [pc, #32]	@ (8002948 <__NVIC_SetPriority+0x50>)
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	3b04      	subs	r3, #4
 8002930:	0112      	lsls	r2, r2, #4
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	440b      	add	r3, r1
 8002936:	761a      	strb	r2, [r3, #24]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000e100 	.word	0xe000e100
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800294c:	b480      	push	{r7}
 800294e:	b089      	sub	sp, #36	@ 0x24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f1c3 0307 	rsb	r3, r3, #7
 8002966:	2b04      	cmp	r3, #4
 8002968:	bf28      	it	cs
 800296a:	2304      	movcs	r3, #4
 800296c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	3304      	adds	r3, #4
 8002972:	2b06      	cmp	r3, #6
 8002974:	d902      	bls.n	800297c <NVIC_EncodePriority+0x30>
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3b03      	subs	r3, #3
 800297a:	e000      	b.n	800297e <NVIC_EncodePriority+0x32>
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002980:	f04f 32ff 	mov.w	r2, #4294967295
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43da      	mvns	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	401a      	ands	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002994:	f04f 31ff 	mov.w	r1, #4294967295
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	43d9      	mvns	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a4:	4313      	orrs	r3, r2
         );
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3724      	adds	r7, #36	@ 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3b01      	subs	r3, #1
 80029c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029c4:	d301      	bcc.n	80029ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029c6:	2301      	movs	r3, #1
 80029c8:	e00f      	b.n	80029ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ca:	4a0a      	ldr	r2, [pc, #40]	@ (80029f4 <SysTick_Config+0x40>)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029d2:	210f      	movs	r1, #15
 80029d4:	f04f 30ff 	mov.w	r0, #4294967295
 80029d8:	f7ff ff8e 	bl	80028f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029dc:	4b05      	ldr	r3, [pc, #20]	@ (80029f4 <SysTick_Config+0x40>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029e2:	4b04      	ldr	r3, [pc, #16]	@ (80029f4 <SysTick_Config+0x40>)
 80029e4:	2207      	movs	r2, #7
 80029e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	e000e010 	.word	0xe000e010

080029f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff ff29 	bl	8002858 <__NVIC_SetPriorityGrouping>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4603      	mov	r3, r0
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a1c:	f7ff ff40 	bl	80028a0 <__NVIC_GetPriorityGrouping>
 8002a20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	6978      	ldr	r0, [r7, #20]
 8002a28:	f7ff ff90 	bl	800294c <NVIC_EncodePriority>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ff5f 	bl	80028f8 <__NVIC_SetPriority>
}
 8002a3a:	bf00      	nop
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	4603      	mov	r3, r0
 8002a4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff33 	bl	80028bc <__NVIC_EnableIRQ>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff ffa4 	bl	80029b4 <SysTick_Config>
 8002a6c:	4603      	mov	r3, r0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b089      	sub	sp, #36	@ 0x24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a86:	4b89      	ldr	r3, [pc, #548]	@ (8002cac <HAL_GPIO_Init+0x234>)
 8002a88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a8a:	e194      	b.n	8002db6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	2101      	movs	r1, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa01 f303 	lsl.w	r3, r1, r3
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 8186 	beq.w	8002db0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d005      	beq.n	8002abc <HAL_GPIO_Init+0x44>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d130      	bne.n	8002b1e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002af2:	2201      	movs	r2, #1
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	f003 0201 	and.w	r2, r3, #1
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d017      	beq.n	8002b5a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	2203      	movs	r2, #3
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d123      	bne.n	8002bae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	08da      	lsrs	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3208      	adds	r2, #8
 8002b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	220f      	movs	r2, #15
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	08da      	lsrs	r2, r3, #3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3208      	adds	r2, #8
 8002ba8:	69b9      	ldr	r1, [r7, #24]
 8002baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	2203      	movs	r2, #3
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0203 	and.w	r2, r3, #3
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80e0 	beq.w	8002db0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf0:	4b2f      	ldr	r3, [pc, #188]	@ (8002cb0 <HAL_GPIO_Init+0x238>)
 8002bf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002bf6:	4a2e      	ldr	r2, [pc, #184]	@ (8002cb0 <HAL_GPIO_Init+0x238>)
 8002bf8:	f043 0302 	orr.w	r3, r3, #2
 8002bfc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002c00:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb0 <HAL_GPIO_Init+0x238>)
 8002c02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c0e:	4a29      	ldr	r2, [pc, #164]	@ (8002cb4 <HAL_GPIO_Init+0x23c>)
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	089b      	lsrs	r3, r3, #2
 8002c14:	3302      	adds	r3, #2
 8002c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	220f      	movs	r2, #15
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a20      	ldr	r2, [pc, #128]	@ (8002cb8 <HAL_GPIO_Init+0x240>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d052      	beq.n	8002ce0 <HAL_GPIO_Init+0x268>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8002cbc <HAL_GPIO_Init+0x244>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d031      	beq.n	8002ca6 <HAL_GPIO_Init+0x22e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc0 <HAL_GPIO_Init+0x248>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d02b      	beq.n	8002ca2 <HAL_GPIO_Init+0x22a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc4 <HAL_GPIO_Init+0x24c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d025      	beq.n	8002c9e <HAL_GPIO_Init+0x226>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a1c      	ldr	r2, [pc, #112]	@ (8002cc8 <HAL_GPIO_Init+0x250>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d01f      	beq.n	8002c9a <HAL_GPIO_Init+0x222>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002ccc <HAL_GPIO_Init+0x254>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d019      	beq.n	8002c96 <HAL_GPIO_Init+0x21e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a1a      	ldr	r2, [pc, #104]	@ (8002cd0 <HAL_GPIO_Init+0x258>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_GPIO_Init+0x21a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a19      	ldr	r2, [pc, #100]	@ (8002cd4 <HAL_GPIO_Init+0x25c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d00d      	beq.n	8002c8e <HAL_GPIO_Init+0x216>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a18      	ldr	r2, [pc, #96]	@ (8002cd8 <HAL_GPIO_Init+0x260>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d007      	beq.n	8002c8a <HAL_GPIO_Init+0x212>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a17      	ldr	r2, [pc, #92]	@ (8002cdc <HAL_GPIO_Init+0x264>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d101      	bne.n	8002c86 <HAL_GPIO_Init+0x20e>
 8002c82:	2309      	movs	r3, #9
 8002c84:	e02d      	b.n	8002ce2 <HAL_GPIO_Init+0x26a>
 8002c86:	230a      	movs	r3, #10
 8002c88:	e02b      	b.n	8002ce2 <HAL_GPIO_Init+0x26a>
 8002c8a:	2308      	movs	r3, #8
 8002c8c:	e029      	b.n	8002ce2 <HAL_GPIO_Init+0x26a>
 8002c8e:	2307      	movs	r3, #7
 8002c90:	e027      	b.n	8002ce2 <HAL_GPIO_Init+0x26a>
 8002c92:	2306      	movs	r3, #6
 8002c94:	e025      	b.n	8002ce2 <HAL_GPIO_Init+0x26a>
 8002c96:	2305      	movs	r3, #5
 8002c98:	e023      	b.n	8002ce2 <HAL_GPIO_Init+0x26a>
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	e021      	b.n	8002ce2 <HAL_GPIO_Init+0x26a>
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e01f      	b.n	8002ce2 <HAL_GPIO_Init+0x26a>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e01d      	b.n	8002ce2 <HAL_GPIO_Init+0x26a>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e01b      	b.n	8002ce2 <HAL_GPIO_Init+0x26a>
 8002caa:	bf00      	nop
 8002cac:	58000080 	.word	0x58000080
 8002cb0:	58024400 	.word	0x58024400
 8002cb4:	58000400 	.word	0x58000400
 8002cb8:	58020000 	.word	0x58020000
 8002cbc:	58020400 	.word	0x58020400
 8002cc0:	58020800 	.word	0x58020800
 8002cc4:	58020c00 	.word	0x58020c00
 8002cc8:	58021000 	.word	0x58021000
 8002ccc:	58021400 	.word	0x58021400
 8002cd0:	58021800 	.word	0x58021800
 8002cd4:	58021c00 	.word	0x58021c00
 8002cd8:	58022000 	.word	0x58022000
 8002cdc:	58022400 	.word	0x58022400
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	f002 0203 	and.w	r2, r2, #3
 8002ce8:	0092      	lsls	r2, r2, #2
 8002cea:	4093      	lsls	r3, r2
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cf2:	4938      	ldr	r1, [pc, #224]	@ (8002dd4 <HAL_GPIO_Init+0x35c>)
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	089b      	lsrs	r3, r3, #2
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002d54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4013      	ands	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	3301      	adds	r3, #1
 8002db4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f47f ae63 	bne.w	8002a8c <HAL_GPIO_Init+0x14>
  }
}
 8002dc6:	bf00      	nop
 8002dc8:	bf00      	nop
 8002dca:	3724      	adds	r7, #36	@ 0x24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	58000400 	.word	0x58000400

08002dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	807b      	strh	r3, [r7, #2]
 8002de4:	4613      	mov	r3, r2
 8002de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002de8:	787b      	ldrb	r3, [r7, #1]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dee:	887a      	ldrh	r2, [r7, #2]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002df4:	e003      	b.n	8002dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002df6:	887b      	ldrh	r3, [r7, #2]
 8002df8:	041a      	lsls	r2, r3, #16
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	619a      	str	r2, [r3, #24]
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b086      	sub	sp, #24
 8002e0e:	af02      	add	r7, sp, #8
 8002e10:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0fe      	b.n	800301a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d106      	bne.n	8002e36 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7fe f947 	bl	80010c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2203      	movs	r2, #3
 8002e3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f004 ff8e 	bl	8007d64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	7c1a      	ldrb	r2, [r3, #16]
 8002e50:	f88d 2000 	strb.w	r2, [sp]
 8002e54:	3304      	adds	r3, #4
 8002e56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e58:	f004 ff12 	bl	8007c80 <USB_CoreInit>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2202      	movs	r2, #2
 8002e66:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e0d5      	b.n	800301a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f004 ff86 	bl	8007d86 <USB_SetCurrentMode>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0c6      	b.n	800301a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]
 8002e90:	e04a      	b.n	8002f28 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e92:	7bfa      	ldrb	r2, [r7, #15]
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	3315      	adds	r3, #21
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ea6:	7bfa      	ldrb	r2, [r7, #15]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	3314      	adds	r3, #20
 8002eb6:	7bfa      	ldrb	r2, [r7, #15]
 8002eb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002eba:	7bfa      	ldrb	r2, [r7, #15]
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	b298      	uxth	r0, r3
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	332e      	adds	r3, #46	@ 0x2e
 8002ece:	4602      	mov	r2, r0
 8002ed0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	3318      	adds	r3, #24
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ee6:	7bfa      	ldrb	r2, [r7, #15]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	331c      	adds	r3, #28
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002efa:	7bfa      	ldrb	r2, [r7, #15]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	3320      	adds	r3, #32
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f0e:	7bfa      	ldrb	r2, [r7, #15]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3324      	adds	r3, #36	@ 0x24
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	3301      	adds	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	791b      	ldrb	r3, [r3, #4]
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d3af      	bcc.n	8002e92 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	73fb      	strb	r3, [r7, #15]
 8002f36:	e044      	b.n	8002fc2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f4e:	7bfa      	ldrb	r2, [r7, #15]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002f60:	7bfa      	ldrb	r2, [r7, #15]
 8002f62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f64:	7bfa      	ldrb	r2, [r7, #15]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f76:	2200      	movs	r2, #0
 8002f78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f7a:	7bfa      	ldrb	r2, [r7, #15]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f90:	7bfa      	ldrb	r2, [r7, #15]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4413      	add	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	791b      	ldrb	r3, [r3, #4]
 8002fc6:	7bfa      	ldrb	r2, [r7, #15]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d3b5      	bcc.n	8002f38 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	7c1a      	ldrb	r2, [r3, #16]
 8002fd4:	f88d 2000 	strb.w	r2, [sp]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fdc:	f004 ff20 	bl	8007e20 <USB_DevInit>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d005      	beq.n	8002ff2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e013      	b.n	800301a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	7b1b      	ldrb	r3, [r3, #12]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d102      	bne.n	800300e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f80b 	bl	8003024 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f005 f8db 	bl	80081ce <USB_DevDisconnect>

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003052:	4b05      	ldr	r3, [pc, #20]	@ (8003068 <HAL_PCDEx_ActivateLPM+0x44>)
 8003054:	4313      	orrs	r3, r2
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	10000003 	.word	0x10000003

0800306c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003074:	4b19      	ldr	r3, [pc, #100]	@ (80030dc <HAL_PWREx_ConfigSupply+0x70>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b04      	cmp	r3, #4
 800307e:	d00a      	beq.n	8003096 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003080:	4b16      	ldr	r3, [pc, #88]	@ (80030dc <HAL_PWREx_ConfigSupply+0x70>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	429a      	cmp	r2, r3
 800308c:	d001      	beq.n	8003092 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e01f      	b.n	80030d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	e01d      	b.n	80030d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003096:	4b11      	ldr	r3, [pc, #68]	@ (80030dc <HAL_PWREx_ConfigSupply+0x70>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f023 0207 	bic.w	r2, r3, #7
 800309e:	490f      	ldr	r1, [pc, #60]	@ (80030dc <HAL_PWREx_ConfigSupply+0x70>)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80030a6:	f7fe f939 	bl	800131c <HAL_GetTick>
 80030aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030ac:	e009      	b.n	80030c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80030ae:	f7fe f935 	bl	800131c <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030bc:	d901      	bls.n	80030c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e007      	b.n	80030d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030c2:	4b06      	ldr	r3, [pc, #24]	@ (80030dc <HAL_PWREx_ConfigSupply+0x70>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ce:	d1ee      	bne.n	80030ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	58024800 	.word	0x58024800

080030e0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80030e4:	4b05      	ldr	r3, [pc, #20]	@ (80030fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4a04      	ldr	r2, [pc, #16]	@ (80030fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80030ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030ee:	60d3      	str	r3, [r2, #12]
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	58024800 	.word	0x58024800

08003100 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08c      	sub	sp, #48	@ 0x30
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d102      	bne.n	8003114 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	f000 bc48 	b.w	80039a4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 8088 	beq.w	8003232 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003122:	4b99      	ldr	r3, [pc, #612]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800312a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800312c:	4b96      	ldr	r3, [pc, #600]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 800312e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003130:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003134:	2b10      	cmp	r3, #16
 8003136:	d007      	beq.n	8003148 <HAL_RCC_OscConfig+0x48>
 8003138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313a:	2b18      	cmp	r3, #24
 800313c:	d111      	bne.n	8003162 <HAL_RCC_OscConfig+0x62>
 800313e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d10c      	bne.n	8003162 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003148:	4b8f      	ldr	r3, [pc, #572]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d06d      	beq.n	8003230 <HAL_RCC_OscConfig+0x130>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d169      	bne.n	8003230 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	f000 bc21 	b.w	80039a4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800316a:	d106      	bne.n	800317a <HAL_RCC_OscConfig+0x7a>
 800316c:	4b86      	ldr	r3, [pc, #536]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a85      	ldr	r2, [pc, #532]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 8003172:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	e02e      	b.n	80031d8 <HAL_RCC_OscConfig+0xd8>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10c      	bne.n	800319c <HAL_RCC_OscConfig+0x9c>
 8003182:	4b81      	ldr	r3, [pc, #516]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a80      	ldr	r2, [pc, #512]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 8003188:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	4b7e      	ldr	r3, [pc, #504]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a7d      	ldr	r2, [pc, #500]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 8003194:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e01d      	b.n	80031d8 <HAL_RCC_OscConfig+0xd8>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0xc0>
 80031a6:	4b78      	ldr	r3, [pc, #480]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a77      	ldr	r2, [pc, #476]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 80031ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4b75      	ldr	r3, [pc, #468]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a74      	ldr	r2, [pc, #464]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e00b      	b.n	80031d8 <HAL_RCC_OscConfig+0xd8>
 80031c0:	4b71      	ldr	r3, [pc, #452]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a70      	ldr	r2, [pc, #448]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 80031c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b6e      	ldr	r3, [pc, #440]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a6d      	ldr	r2, [pc, #436]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 80031d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d013      	beq.n	8003208 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe f89c 	bl	800131c <HAL_GetTick>
 80031e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e8:	f7fe f898 	bl	800131c <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	@ 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e3d4      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031fa:	4b63      	ldr	r3, [pc, #396]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0xe8>
 8003206:	e014      	b.n	8003232 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fe f888 	bl	800131c <HAL_GetTick>
 800320c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003210:	f7fe f884 	bl	800131c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	@ 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e3c0      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003222:	4b59      	ldr	r3, [pc, #356]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x110>
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80ca 	beq.w	80033d4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003240:	4b51      	ldr	r3, [pc, #324]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003248:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800324a:	4b4f      	ldr	r3, [pc, #316]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 800324c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d007      	beq.n	8003266 <HAL_RCC_OscConfig+0x166>
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	2b18      	cmp	r3, #24
 800325a:	d156      	bne.n	800330a <HAL_RCC_OscConfig+0x20a>
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d151      	bne.n	800330a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003266:	4b48      	ldr	r3, [pc, #288]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_RCC_OscConfig+0x17e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e392      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800327e:	4b42      	ldr	r3, [pc, #264]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 0219 	bic.w	r2, r3, #25
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	493f      	ldr	r1, [pc, #252]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 800328c:	4313      	orrs	r3, r2
 800328e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fe f844 	bl	800131c <HAL_GetTick>
 8003294:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003298:	f7fe f840 	bl	800131c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e37c      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032aa:	4b37      	ldr	r3, [pc, #220]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b6:	f7fe f861 	bl	800137c <HAL_GetREVID>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d817      	bhi.n	80032f4 <HAL_RCC_OscConfig+0x1f4>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	2b40      	cmp	r3, #64	@ 0x40
 80032ca:	d108      	bne.n	80032de <HAL_RCC_OscConfig+0x1de>
 80032cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80032d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 80032d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032da:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032dc:	e07a      	b.n	80033d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032de:	4b2a      	ldr	r3, [pc, #168]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	031b      	lsls	r3, r3, #12
 80032ec:	4926      	ldr	r1, [pc, #152]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032f2:	e06f      	b.n	80033d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f4:	4b24      	ldr	r3, [pc, #144]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	061b      	lsls	r3, r3, #24
 8003302:	4921      	ldr	r1, [pc, #132]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 8003304:	4313      	orrs	r3, r2
 8003306:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003308:	e064      	b.n	80033d4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d047      	beq.n	80033a2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003312:	4b1d      	ldr	r3, [pc, #116]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 0219 	bic.w	r2, r3, #25
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	491a      	ldr	r1, [pc, #104]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 8003320:	4313      	orrs	r3, r2
 8003322:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7fd fffa 	bl	800131c <HAL_GetTick>
 8003328:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800332c:	f7fd fff6 	bl	800131c <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e332      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800333e:	4b12      	ldr	r3, [pc, #72]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334a:	f7fe f817 	bl	800137c <HAL_GetREVID>
 800334e:	4603      	mov	r3, r0
 8003350:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003354:	4293      	cmp	r3, r2
 8003356:	d819      	bhi.n	800338c <HAL_RCC_OscConfig+0x28c>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b40      	cmp	r3, #64	@ 0x40
 800335e:	d108      	bne.n	8003372 <HAL_RCC_OscConfig+0x272>
 8003360:	4b09      	ldr	r3, [pc, #36]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003368:	4a07      	ldr	r2, [pc, #28]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 800336a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800336e:	6053      	str	r3, [r2, #4]
 8003370:	e030      	b.n	80033d4 <HAL_RCC_OscConfig+0x2d4>
 8003372:	4b05      	ldr	r3, [pc, #20]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	031b      	lsls	r3, r3, #12
 8003380:	4901      	ldr	r1, [pc, #4]	@ (8003388 <HAL_RCC_OscConfig+0x288>)
 8003382:	4313      	orrs	r3, r2
 8003384:	604b      	str	r3, [r1, #4]
 8003386:	e025      	b.n	80033d4 <HAL_RCC_OscConfig+0x2d4>
 8003388:	58024400 	.word	0x58024400
 800338c:	4b9a      	ldr	r3, [pc, #616]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	061b      	lsls	r3, r3, #24
 800339a:	4997      	ldr	r1, [pc, #604]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 800339c:	4313      	orrs	r3, r2
 800339e:	604b      	str	r3, [r1, #4]
 80033a0:	e018      	b.n	80033d4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a2:	4b95      	ldr	r3, [pc, #596]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a94      	ldr	r2, [pc, #592]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80033a8:	f023 0301 	bic.w	r3, r3, #1
 80033ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ae:	f7fd ffb5 	bl	800131c <HAL_GetTick>
 80033b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b6:	f7fd ffb1 	bl	800131c <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e2ed      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033c8:	4b8b      	ldr	r3, [pc, #556]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f0      	bne.n	80033b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0310 	and.w	r3, r3, #16
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80a9 	beq.w	8003534 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e2:	4b85      	ldr	r3, [pc, #532]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033ec:	4b82      	ldr	r3, [pc, #520]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80033ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d007      	beq.n	8003408 <HAL_RCC_OscConfig+0x308>
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2b18      	cmp	r3, #24
 80033fc:	d13a      	bne.n	8003474 <HAL_RCC_OscConfig+0x374>
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	2b01      	cmp	r3, #1
 8003406:	d135      	bne.n	8003474 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003408:	4b7b      	ldr	r3, [pc, #492]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_OscConfig+0x320>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	2b80      	cmp	r3, #128	@ 0x80
 800341a:	d001      	beq.n	8003420 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e2c1      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003420:	f7fd ffac 	bl	800137c <HAL_GetREVID>
 8003424:	4603      	mov	r3, r0
 8003426:	f241 0203 	movw	r2, #4099	@ 0x1003
 800342a:	4293      	cmp	r3, r2
 800342c:	d817      	bhi.n	800345e <HAL_RCC_OscConfig+0x35e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	2b20      	cmp	r3, #32
 8003434:	d108      	bne.n	8003448 <HAL_RCC_OscConfig+0x348>
 8003436:	4b70      	ldr	r3, [pc, #448]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800343e:	4a6e      	ldr	r2, [pc, #440]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 8003440:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003444:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003446:	e075      	b.n	8003534 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003448:	4b6b      	ldr	r3, [pc, #428]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	069b      	lsls	r3, r3, #26
 8003456:	4968      	ldr	r1, [pc, #416]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 8003458:	4313      	orrs	r3, r2
 800345a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800345c:	e06a      	b.n	8003534 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800345e:	4b66      	ldr	r3, [pc, #408]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	061b      	lsls	r3, r3, #24
 800346c:	4962      	ldr	r1, [pc, #392]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 800346e:	4313      	orrs	r3, r2
 8003470:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003472:	e05f      	b.n	8003534 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d042      	beq.n	8003502 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800347c:	4b5e      	ldr	r3, [pc, #376]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a5d      	ldr	r2, [pc, #372]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 8003482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fd ff48 	bl	800131c <HAL_GetTick>
 800348c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003490:	f7fd ff44 	bl	800131c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e280      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034a2:	4b55      	ldr	r3, [pc, #340]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034ae:	f7fd ff65 	bl	800137c <HAL_GetREVID>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d817      	bhi.n	80034ec <HAL_RCC_OscConfig+0x3ec>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d108      	bne.n	80034d6 <HAL_RCC_OscConfig+0x3d6>
 80034c4:	4b4c      	ldr	r3, [pc, #304]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80034cc:	4a4a      	ldr	r2, [pc, #296]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80034ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80034d2:	6053      	str	r3, [r2, #4]
 80034d4:	e02e      	b.n	8003534 <HAL_RCC_OscConfig+0x434>
 80034d6:	4b48      	ldr	r3, [pc, #288]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	069b      	lsls	r3, r3, #26
 80034e4:	4944      	ldr	r1, [pc, #272]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	604b      	str	r3, [r1, #4]
 80034ea:	e023      	b.n	8003534 <HAL_RCC_OscConfig+0x434>
 80034ec:	4b42      	ldr	r3, [pc, #264]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	061b      	lsls	r3, r3, #24
 80034fa:	493f      	ldr	r1, [pc, #252]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60cb      	str	r3, [r1, #12]
 8003500:	e018      	b.n	8003534 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003502:	4b3d      	ldr	r3, [pc, #244]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a3c      	ldr	r2, [pc, #240]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 8003508:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800350c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350e:	f7fd ff05 	bl	800131c <HAL_GetTick>
 8003512:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003516:	f7fd ff01 	bl	800131c <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e23d      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003528:	4b33      	ldr	r3, [pc, #204]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f0      	bne.n	8003516 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d036      	beq.n	80035ae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d019      	beq.n	800357c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003548:	4b2b      	ldr	r3, [pc, #172]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 800354a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800354c:	4a2a      	ldr	r2, [pc, #168]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003554:	f7fd fee2 	bl	800131c <HAL_GetTick>
 8003558:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800355c:	f7fd fede 	bl	800131c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e21a      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800356e:	4b22      	ldr	r3, [pc, #136]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 8003570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0x45c>
 800357a:	e018      	b.n	80035ae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800357c:	4b1e      	ldr	r3, [pc, #120]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 800357e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003580:	4a1d      	ldr	r2, [pc, #116]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 8003582:	f023 0301 	bic.w	r3, r3, #1
 8003586:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7fd fec8 	bl	800131c <HAL_GetTick>
 800358c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003590:	f7fd fec4 	bl	800131c <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e200      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035a2:	4b15      	ldr	r3, [pc, #84]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80035a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d039      	beq.n	800362e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d01c      	beq.n	80035fc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035c2:	4b0d      	ldr	r3, [pc, #52]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a0c      	ldr	r2, [pc, #48]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80035c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80035cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035ce:	f7fd fea5 	bl	800131c <HAL_GetTick>
 80035d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035d6:	f7fd fea1 	bl	800131c <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e1dd      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035e8:	4b03      	ldr	r3, [pc, #12]	@ (80035f8 <HAL_RCC_OscConfig+0x4f8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_RCC_OscConfig+0x4d6>
 80035f4:	e01b      	b.n	800362e <HAL_RCC_OscConfig+0x52e>
 80035f6:	bf00      	nop
 80035f8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035fc:	4b9b      	ldr	r3, [pc, #620]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a9a      	ldr	r2, [pc, #616]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 8003602:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003606:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003608:	f7fd fe88 	bl	800131c <HAL_GetTick>
 800360c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003610:	f7fd fe84 	bl	800131c <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e1c0      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003622:	4b92      	ldr	r3, [pc, #584]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 8081 	beq.w	800373e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800363c:	4b8c      	ldr	r3, [pc, #560]	@ (8003870 <HAL_RCC_OscConfig+0x770>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a8b      	ldr	r2, [pc, #556]	@ (8003870 <HAL_RCC_OscConfig+0x770>)
 8003642:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003646:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003648:	f7fd fe68 	bl	800131c <HAL_GetTick>
 800364c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003650:	f7fd fe64 	bl	800131c <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	@ 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e1a0      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003662:	4b83      	ldr	r3, [pc, #524]	@ (8003870 <HAL_RCC_OscConfig+0x770>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d106      	bne.n	8003684 <HAL_RCC_OscConfig+0x584>
 8003676:	4b7d      	ldr	r3, [pc, #500]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800367a:	4a7c      	ldr	r2, [pc, #496]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	6713      	str	r3, [r2, #112]	@ 0x70
 8003682:	e02d      	b.n	80036e0 <HAL_RCC_OscConfig+0x5e0>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10c      	bne.n	80036a6 <HAL_RCC_OscConfig+0x5a6>
 800368c:	4b77      	ldr	r3, [pc, #476]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003690:	4a76      	ldr	r2, [pc, #472]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 8003692:	f023 0301 	bic.w	r3, r3, #1
 8003696:	6713      	str	r3, [r2, #112]	@ 0x70
 8003698:	4b74      	ldr	r3, [pc, #464]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369c:	4a73      	ldr	r2, [pc, #460]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 800369e:	f023 0304 	bic.w	r3, r3, #4
 80036a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80036a4:	e01c      	b.n	80036e0 <HAL_RCC_OscConfig+0x5e0>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b05      	cmp	r3, #5
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCC_OscConfig+0x5c8>
 80036ae:	4b6f      	ldr	r3, [pc, #444]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b2:	4a6e      	ldr	r2, [pc, #440]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 80036b4:	f043 0304 	orr.w	r3, r3, #4
 80036b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80036ba:	4b6c      	ldr	r3, [pc, #432]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036be:	4a6b      	ldr	r2, [pc, #428]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80036c6:	e00b      	b.n	80036e0 <HAL_RCC_OscConfig+0x5e0>
 80036c8:	4b68      	ldr	r3, [pc, #416]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036cc:	4a67      	ldr	r2, [pc, #412]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80036d4:	4b65      	ldr	r3, [pc, #404]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 80036d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d8:	4a64      	ldr	r2, [pc, #400]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 80036da:	f023 0304 	bic.w	r3, r3, #4
 80036de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d015      	beq.n	8003714 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e8:	f7fd fe18 	bl	800131c <HAL_GetTick>
 80036ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036ee:	e00a      	b.n	8003706 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f0:	f7fd fe14 	bl	800131c <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036fe:	4293      	cmp	r3, r2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e14e      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003706:	4b59      	ldr	r3, [pc, #356]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0ee      	beq.n	80036f0 <HAL_RCC_OscConfig+0x5f0>
 8003712:	e014      	b.n	800373e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7fd fe02 	bl	800131c <HAL_GetTick>
 8003718:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800371a:	e00a      	b.n	8003732 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371c:	f7fd fdfe 	bl	800131c <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e138      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003732:	4b4e      	ldr	r3, [pc, #312]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1ee      	bne.n	800371c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 812d 	beq.w	80039a2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003748:	4b48      	ldr	r3, [pc, #288]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003750:	2b18      	cmp	r3, #24
 8003752:	f000 80bd 	beq.w	80038d0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	2b02      	cmp	r3, #2
 800375c:	f040 809e 	bne.w	800389c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003760:	4b42      	ldr	r3, [pc, #264]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a41      	ldr	r2, [pc, #260]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 8003766:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800376a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376c:	f7fd fdd6 	bl	800131c <HAL_GetTick>
 8003770:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003774:	f7fd fdd2 	bl	800131c <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e10e      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003786:	4b39      	ldr	r3, [pc, #228]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003792:	4b36      	ldr	r3, [pc, #216]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 8003794:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003796:	4b37      	ldr	r3, [pc, #220]	@ (8003874 <HAL_RCC_OscConfig+0x774>)
 8003798:	4013      	ands	r3, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80037a2:	0112      	lsls	r2, r2, #4
 80037a4:	430a      	orrs	r2, r1
 80037a6:	4931      	ldr	r1, [pc, #196]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b0:	3b01      	subs	r3, #1
 80037b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ba:	3b01      	subs	r3, #1
 80037bc:	025b      	lsls	r3, r3, #9
 80037be:	b29b      	uxth	r3, r3
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c6:	3b01      	subs	r3, #1
 80037c8:	041b      	lsls	r3, r3, #16
 80037ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d4:	3b01      	subs	r3, #1
 80037d6:	061b      	lsls	r3, r3, #24
 80037d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80037dc:	4923      	ldr	r1, [pc, #140]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80037e2:	4b22      	ldr	r3, [pc, #136]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 80037e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e6:	4a21      	ldr	r2, [pc, #132]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037ee:	4b1f      	ldr	r3, [pc, #124]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 80037f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037f2:	4b21      	ldr	r3, [pc, #132]	@ (8003878 <HAL_RCC_OscConfig+0x778>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80037fa:	00d2      	lsls	r2, r2, #3
 80037fc:	491b      	ldr	r1, [pc, #108]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003802:	4b1a      	ldr	r3, [pc, #104]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 8003804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003806:	f023 020c 	bic.w	r2, r3, #12
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380e:	4917      	ldr	r1, [pc, #92]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 8003810:	4313      	orrs	r3, r2
 8003812:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003814:	4b15      	ldr	r3, [pc, #84]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 8003816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003818:	f023 0202 	bic.w	r2, r3, #2
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003820:	4912      	ldr	r1, [pc, #72]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 8003822:	4313      	orrs	r3, r2
 8003824:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003826:	4b11      	ldr	r3, [pc, #68]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 8003828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382a:	4a10      	ldr	r2, [pc, #64]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 800382c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003830:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003832:	4b0e      	ldr	r3, [pc, #56]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 8003834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003836:	4a0d      	ldr	r2, [pc, #52]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 8003838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800383c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800383e:	4b0b      	ldr	r3, [pc, #44]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 8003840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003842:	4a0a      	ldr	r2, [pc, #40]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 8003844:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003848:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800384a:	4b08      	ldr	r3, [pc, #32]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 800384c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384e:	4a07      	ldr	r2, [pc, #28]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003856:	4b05      	ldr	r3, [pc, #20]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a04      	ldr	r2, [pc, #16]	@ (800386c <HAL_RCC_OscConfig+0x76c>)
 800385c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003862:	f7fd fd5b 	bl	800131c <HAL_GetTick>
 8003866:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003868:	e011      	b.n	800388e <HAL_RCC_OscConfig+0x78e>
 800386a:	bf00      	nop
 800386c:	58024400 	.word	0x58024400
 8003870:	58024800 	.word	0x58024800
 8003874:	fffffc0c 	.word	0xfffffc0c
 8003878:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387c:	f7fd fd4e 	bl	800131c <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e08a      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800388e:	4b47      	ldr	r3, [pc, #284]	@ (80039ac <HAL_RCC_OscConfig+0x8ac>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x77c>
 800389a:	e082      	b.n	80039a2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389c:	4b43      	ldr	r3, [pc, #268]	@ (80039ac <HAL_RCC_OscConfig+0x8ac>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a42      	ldr	r2, [pc, #264]	@ (80039ac <HAL_RCC_OscConfig+0x8ac>)
 80038a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7fd fd38 	bl	800131c <HAL_GetTick>
 80038ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fd fd34 	bl	800131c <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e070      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038c2:	4b3a      	ldr	r3, [pc, #232]	@ (80039ac <HAL_RCC_OscConfig+0x8ac>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x7b0>
 80038ce:	e068      	b.n	80039a2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80038d0:	4b36      	ldr	r3, [pc, #216]	@ (80039ac <HAL_RCC_OscConfig+0x8ac>)
 80038d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80038d6:	4b35      	ldr	r3, [pc, #212]	@ (80039ac <HAL_RCC_OscConfig+0x8ac>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d031      	beq.n	8003948 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f003 0203 	and.w	r2, r3, #3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d12a      	bne.n	8003948 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fe:	429a      	cmp	r2, r3
 8003900:	d122      	bne.n	8003948 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d11a      	bne.n	8003948 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	0a5b      	lsrs	r3, r3, #9
 8003916:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800391e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003920:	429a      	cmp	r2, r3
 8003922:	d111      	bne.n	8003948 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	0c1b      	lsrs	r3, r3, #16
 8003928:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003930:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003932:	429a      	cmp	r2, r3
 8003934:	d108      	bne.n	8003948 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	0e1b      	lsrs	r3, r3, #24
 800393a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003942:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e02b      	b.n	80039a4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800394c:	4b17      	ldr	r3, [pc, #92]	@ (80039ac <HAL_RCC_OscConfig+0x8ac>)
 800394e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003950:	08db      	lsrs	r3, r3, #3
 8003952:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003956:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	429a      	cmp	r2, r3
 8003960:	d01f      	beq.n	80039a2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003962:	4b12      	ldr	r3, [pc, #72]	@ (80039ac <HAL_RCC_OscConfig+0x8ac>)
 8003964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003966:	4a11      	ldr	r2, [pc, #68]	@ (80039ac <HAL_RCC_OscConfig+0x8ac>)
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800396e:	f7fd fcd5 	bl	800131c <HAL_GetTick>
 8003972:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003974:	bf00      	nop
 8003976:	f7fd fcd1 	bl	800131c <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397e:	4293      	cmp	r3, r2
 8003980:	d0f9      	beq.n	8003976 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003982:	4b0a      	ldr	r3, [pc, #40]	@ (80039ac <HAL_RCC_OscConfig+0x8ac>)
 8003984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003986:	4b0a      	ldr	r3, [pc, #40]	@ (80039b0 <HAL_RCC_OscConfig+0x8b0>)
 8003988:	4013      	ands	r3, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800398e:	00d2      	lsls	r2, r2, #3
 8003990:	4906      	ldr	r1, [pc, #24]	@ (80039ac <HAL_RCC_OscConfig+0x8ac>)
 8003992:	4313      	orrs	r3, r2
 8003994:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003996:	4b05      	ldr	r3, [pc, #20]	@ (80039ac <HAL_RCC_OscConfig+0x8ac>)
 8003998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399a:	4a04      	ldr	r2, [pc, #16]	@ (80039ac <HAL_RCC_OscConfig+0x8ac>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3730      	adds	r7, #48	@ 0x30
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	58024400 	.word	0x58024400
 80039b0:	ffff0007 	.word	0xffff0007

080039b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e19c      	b.n	8003d02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039c8:	4b8a      	ldr	r3, [pc, #552]	@ (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d910      	bls.n	80039f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d6:	4b87      	ldr	r3, [pc, #540]	@ (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f023 020f 	bic.w	r2, r3, #15
 80039de:	4985      	ldr	r1, [pc, #532]	@ (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e6:	4b83      	ldr	r3, [pc, #524]	@ (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e184      	b.n	8003d02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d010      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	4b7b      	ldr	r3, [pc, #492]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d908      	bls.n	8003a26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a14:	4b78      	ldr	r3, [pc, #480]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	4975      	ldr	r1, [pc, #468]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d010      	beq.n	8003a54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695a      	ldr	r2, [r3, #20]
 8003a36:	4b70      	ldr	r3, [pc, #448]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d908      	bls.n	8003a54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a42:	4b6d      	ldr	r3, [pc, #436]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	496a      	ldr	r1, [pc, #424]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d010      	beq.n	8003a82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	4b64      	ldr	r3, [pc, #400]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d908      	bls.n	8003a82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a70:	4b61      	ldr	r3, [pc, #388]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	495e      	ldr	r1, [pc, #376]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d010      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69da      	ldr	r2, [r3, #28]
 8003a92:	4b59      	ldr	r3, [pc, #356]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d908      	bls.n	8003ab0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a9e:	4b56      	ldr	r3, [pc, #344]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	4953      	ldr	r1, [pc, #332]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d010      	beq.n	8003ade <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	4b4d      	ldr	r3, [pc, #308]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d908      	bls.n	8003ade <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003acc:	4b4a      	ldr	r3, [pc, #296]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	f023 020f 	bic.w	r2, r3, #15
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4947      	ldr	r1, [pc, #284]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d055      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003aea:	4b43      	ldr	r3, [pc, #268]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	4940      	ldr	r1, [pc, #256]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b04:	4b3c      	ldr	r3, [pc, #240]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d121      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0f6      	b.n	8003d02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d107      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b1c:	4b36      	ldr	r3, [pc, #216]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d115      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0ea      	b.n	8003d02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d107      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b34:	4b30      	ldr	r3, [pc, #192]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d109      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0de      	b.n	8003d02 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b44:	4b2c      	ldr	r3, [pc, #176]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0d6      	b.n	8003d02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b54:	4b28      	ldr	r3, [pc, #160]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f023 0207 	bic.w	r2, r3, #7
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	4925      	ldr	r1, [pc, #148]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b66:	f7fd fbd9 	bl	800131c <HAL_GetTick>
 8003b6a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6c:	e00a      	b.n	8003b84 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6e:	f7fd fbd5 	bl	800131c <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e0be      	b.n	8003d02 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b84:	4b1c      	ldr	r3, [pc, #112]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d1eb      	bne.n	8003b6e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d010      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	4b14      	ldr	r3, [pc, #80]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d208      	bcs.n	8003bc4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb2:	4b11      	ldr	r3, [pc, #68]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f023 020f 	bic.w	r2, r3, #15
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	490e      	ldr	r1, [pc, #56]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d214      	bcs.n	8003bfc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd2:	4b08      	ldr	r3, [pc, #32]	@ (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 020f 	bic.w	r2, r3, #15
 8003bda:	4906      	ldr	r1, [pc, #24]	@ (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be2:	4b04      	ldr	r3, [pc, #16]	@ (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d005      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e086      	b.n	8003d02 <HAL_RCC_ClockConfig+0x34e>
 8003bf4:	52002000 	.word	0x52002000
 8003bf8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d010      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	4b3f      	ldr	r3, [pc, #252]	@ (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d208      	bcs.n	8003c2a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c18:	4b3c      	ldr	r3, [pc, #240]	@ (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	4939      	ldr	r1, [pc, #228]	@ (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d010      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	4b34      	ldr	r3, [pc, #208]	@ (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d208      	bcs.n	8003c58 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c46:	4b31      	ldr	r3, [pc, #196]	@ (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	492e      	ldr	r1, [pc, #184]	@ (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d010      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699a      	ldr	r2, [r3, #24]
 8003c68:	4b28      	ldr	r3, [pc, #160]	@ (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d208      	bcs.n	8003c86 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c74:	4b25      	ldr	r3, [pc, #148]	@ (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	4922      	ldr	r1, [pc, #136]	@ (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d010      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69da      	ldr	r2, [r3, #28]
 8003c96:	4b1d      	ldr	r3, [pc, #116]	@ (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d208      	bcs.n	8003cb4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	4917      	ldr	r1, [pc, #92]	@ (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003cb4:	f000 f834 	bl	8003d20 <HAL_RCC_GetSysClockFreq>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	4b14      	ldr	r3, [pc, #80]	@ (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	0a1b      	lsrs	r3, r3, #8
 8003cc0:	f003 030f 	and.w	r3, r3, #15
 8003cc4:	4912      	ldr	r1, [pc, #72]	@ (8003d10 <HAL_RCC_ClockConfig+0x35c>)
 8003cc6:	5ccb      	ldrb	r3, [r1, r3]
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8003d0c <HAL_RCC_ClockConfig+0x358>)
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	4a0d      	ldr	r2, [pc, #52]	@ (8003d10 <HAL_RCC_ClockConfig+0x35c>)
 8003cdc:	5cd3      	ldrb	r3, [r2, r3]
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8003d14 <HAL_RCC_ClockConfig+0x360>)
 8003cea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cec:	4a0a      	ldr	r2, [pc, #40]	@ (8003d18 <HAL_RCC_ClockConfig+0x364>)
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8003d1c <HAL_RCC_ClockConfig+0x368>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fd fac6 	bl	8001288 <HAL_InitTick>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	58024400 	.word	0x58024400
 8003d10:	08008300 	.word	0x08008300
 8003d14:	2400000c 	.word	0x2400000c
 8003d18:	24000008 	.word	0x24000008
 8003d1c:	24000010 	.word	0x24000010

08003d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b089      	sub	sp, #36	@ 0x24
 8003d24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d26:	4bb3      	ldr	r3, [pc, #716]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d2e:	2b18      	cmp	r3, #24
 8003d30:	f200 8155 	bhi.w	8003fde <HAL_RCC_GetSysClockFreq+0x2be>
 8003d34:	a201      	add	r2, pc, #4	@ (adr r2, 8003d3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3a:	bf00      	nop
 8003d3c:	08003da1 	.word	0x08003da1
 8003d40:	08003fdf 	.word	0x08003fdf
 8003d44:	08003fdf 	.word	0x08003fdf
 8003d48:	08003fdf 	.word	0x08003fdf
 8003d4c:	08003fdf 	.word	0x08003fdf
 8003d50:	08003fdf 	.word	0x08003fdf
 8003d54:	08003fdf 	.word	0x08003fdf
 8003d58:	08003fdf 	.word	0x08003fdf
 8003d5c:	08003dc7 	.word	0x08003dc7
 8003d60:	08003fdf 	.word	0x08003fdf
 8003d64:	08003fdf 	.word	0x08003fdf
 8003d68:	08003fdf 	.word	0x08003fdf
 8003d6c:	08003fdf 	.word	0x08003fdf
 8003d70:	08003fdf 	.word	0x08003fdf
 8003d74:	08003fdf 	.word	0x08003fdf
 8003d78:	08003fdf 	.word	0x08003fdf
 8003d7c:	08003dcd 	.word	0x08003dcd
 8003d80:	08003fdf 	.word	0x08003fdf
 8003d84:	08003fdf 	.word	0x08003fdf
 8003d88:	08003fdf 	.word	0x08003fdf
 8003d8c:	08003fdf 	.word	0x08003fdf
 8003d90:	08003fdf 	.word	0x08003fdf
 8003d94:	08003fdf 	.word	0x08003fdf
 8003d98:	08003fdf 	.word	0x08003fdf
 8003d9c:	08003dd3 	.word	0x08003dd3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003da0:	4b94      	ldr	r3, [pc, #592]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0320 	and.w	r3, r3, #32
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d009      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003dac:	4b91      	ldr	r3, [pc, #580]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	08db      	lsrs	r3, r3, #3
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	4a90      	ldr	r2, [pc, #576]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003db8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003dbe:	e111      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003dc0:	4b8d      	ldr	r3, [pc, #564]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dc2:	61bb      	str	r3, [r7, #24]
      break;
 8003dc4:	e10e      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003dc6:	4b8d      	ldr	r3, [pc, #564]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003dc8:	61bb      	str	r3, [r7, #24]
      break;
 8003dca:	e10b      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003dcc:	4b8c      	ldr	r3, [pc, #560]	@ (8004000 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003dce:	61bb      	str	r3, [r7, #24]
      break;
 8003dd0:	e108      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003dd2:	4b88      	ldr	r3, [pc, #544]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003ddc:	4b85      	ldr	r3, [pc, #532]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003de6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003de8:	4b82      	ldr	r3, [pc, #520]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003df2:	4b80      	ldr	r3, [pc, #512]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df6:	08db      	lsrs	r3, r3, #3
 8003df8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	ee07 3a90 	vmov	s15, r3
 8003e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e0a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80e1 	beq.w	8003fd8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	f000 8083 	beq.w	8003f24 <HAL_RCC_GetSysClockFreq+0x204>
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	f200 80a1 	bhi.w	8003f68 <HAL_RCC_GetSysClockFreq+0x248>
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_RCC_GetSysClockFreq+0x114>
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d056      	beq.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e32:	e099      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e34:	4b6f      	ldr	r3, [pc, #444]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d02d      	beq.n	8003e9c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e40:	4b6c      	ldr	r3, [pc, #432]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	08db      	lsrs	r3, r3, #3
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	4a6b      	ldr	r2, [pc, #428]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e50:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	ee07 3a90 	vmov	s15, r3
 8003e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	ee07 3a90 	vmov	s15, r3
 8003e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e6a:	4b62      	ldr	r3, [pc, #392]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e72:	ee07 3a90 	vmov	s15, r3
 8003e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e7e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e96:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003e9a:	e087      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004008 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eae:	4b51      	ldr	r3, [pc, #324]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb6:	ee07 3a90 	vmov	s15, r3
 8003eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ec2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ede:	e065      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800400c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ef2:	4b40      	ldr	r3, [pc, #256]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f06:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f22:	e043      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	ee07 3a90 	vmov	s15, r3
 8003f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004010 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f36:	4b2f      	ldr	r3, [pc, #188]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f4a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f66:	e021      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	ee07 3a90 	vmov	s15, r3
 8003f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f72:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800400c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f8e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003faa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003fac:	4b11      	ldr	r3, [pc, #68]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb0:	0a5b      	lsrs	r3, r3, #9
 8003fb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	ee07 3a90 	vmov	s15, r3
 8003fc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fd0:	ee17 3a90 	vmov	r3, s15
 8003fd4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003fd6:	e005      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61bb      	str	r3, [r7, #24]
      break;
 8003fdc:	e002      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003fde:	4b07      	ldr	r3, [pc, #28]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fe0:	61bb      	str	r3, [r7, #24]
      break;
 8003fe2:	bf00      	nop
  }

  return sysclockfreq;
 8003fe4:	69bb      	ldr	r3, [r7, #24]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3724      	adds	r7, #36	@ 0x24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	58024400 	.word	0x58024400
 8003ff8:	03d09000 	.word	0x03d09000
 8003ffc:	003d0900 	.word	0x003d0900
 8004000:	007a1200 	.word	0x007a1200
 8004004:	46000000 	.word	0x46000000
 8004008:	4c742400 	.word	0x4c742400
 800400c:	4a742400 	.word	0x4a742400
 8004010:	4af42400 	.word	0x4af42400

08004014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800401a:	f7ff fe81 	bl	8003d20 <HAL_RCC_GetSysClockFreq>
 800401e:	4602      	mov	r2, r0
 8004020:	4b10      	ldr	r3, [pc, #64]	@ (8004064 <HAL_RCC_GetHCLKFreq+0x50>)
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	0a1b      	lsrs	r3, r3, #8
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	490f      	ldr	r1, [pc, #60]	@ (8004068 <HAL_RCC_GetHCLKFreq+0x54>)
 800402c:	5ccb      	ldrb	r3, [r1, r3]
 800402e:	f003 031f 	and.w	r3, r3, #31
 8004032:	fa22 f303 	lsr.w	r3, r2, r3
 8004036:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004038:	4b0a      	ldr	r3, [pc, #40]	@ (8004064 <HAL_RCC_GetHCLKFreq+0x50>)
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	4a09      	ldr	r2, [pc, #36]	@ (8004068 <HAL_RCC_GetHCLKFreq+0x54>)
 8004042:	5cd3      	ldrb	r3, [r2, r3]
 8004044:	f003 031f 	and.w	r3, r3, #31
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	fa22 f303 	lsr.w	r3, r2, r3
 800404e:	4a07      	ldr	r2, [pc, #28]	@ (800406c <HAL_RCC_GetHCLKFreq+0x58>)
 8004050:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004052:	4a07      	ldr	r2, [pc, #28]	@ (8004070 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004058:	4b04      	ldr	r3, [pc, #16]	@ (800406c <HAL_RCC_GetHCLKFreq+0x58>)
 800405a:	681b      	ldr	r3, [r3, #0]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	58024400 	.word	0x58024400
 8004068:	08008300 	.word	0x08008300
 800406c:	2400000c 	.word	0x2400000c
 8004070:	24000008 	.word	0x24000008

08004074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004078:	f7ff ffcc 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 800407c:	4602      	mov	r2, r0
 800407e:	4b06      	ldr	r3, [pc, #24]	@ (8004098 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	091b      	lsrs	r3, r3, #4
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	4904      	ldr	r1, [pc, #16]	@ (800409c <HAL_RCC_GetPCLK1Freq+0x28>)
 800408a:	5ccb      	ldrb	r3, [r1, r3]
 800408c:	f003 031f 	and.w	r3, r3, #31
 8004090:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004094:	4618      	mov	r0, r3
 8004096:	bd80      	pop	{r7, pc}
 8004098:	58024400 	.word	0x58024400
 800409c:	08008300 	.word	0x08008300

080040a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80040a4:	f7ff ffb6 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 80040a8:	4602      	mov	r2, r0
 80040aa:	4b06      	ldr	r3, [pc, #24]	@ (80040c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	0a1b      	lsrs	r3, r3, #8
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	4904      	ldr	r1, [pc, #16]	@ (80040c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040b6:	5ccb      	ldrb	r3, [r1, r3]
 80040b8:	f003 031f 	and.w	r3, r3, #31
 80040bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	58024400 	.word	0x58024400
 80040c8:	08008300 	.word	0x08008300

080040cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040d0:	b0ca      	sub	sp, #296	@ 0x128
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040d8:	2300      	movs	r3, #0
 80040da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040de:	2300      	movs	r3, #0
 80040e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80040f0:	2500      	movs	r5, #0
 80040f2:	ea54 0305 	orrs.w	r3, r4, r5
 80040f6:	d049      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80040f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004102:	d02f      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004104:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004108:	d828      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800410a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800410e:	d01a      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004110:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004114:	d822      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800411a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800411e:	d007      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004120:	e01c      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004122:	4bb8      	ldr	r3, [pc, #736]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004126:	4ab7      	ldr	r2, [pc, #732]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800412c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800412e:	e01a      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004134:	3308      	adds	r3, #8
 8004136:	2102      	movs	r1, #2
 8004138:	4618      	mov	r0, r3
 800413a:	f002 fb61 	bl	8006800 <RCCEx_PLL2_Config>
 800413e:	4603      	mov	r3, r0
 8004140:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004144:	e00f      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414a:	3328      	adds	r3, #40	@ 0x28
 800414c:	2102      	movs	r1, #2
 800414e:	4618      	mov	r0, r3
 8004150:	f002 fc08 	bl	8006964 <RCCEx_PLL3_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800415a:	e004      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004162:	e000      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10a      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800416e:	4ba5      	ldr	r3, [pc, #660]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004172:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800417c:	4aa1      	ldr	r2, [pc, #644]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800417e:	430b      	orrs	r3, r1
 8004180:	6513      	str	r3, [r2, #80]	@ 0x50
 8004182:	e003      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004188:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800418c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004194:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004198:	f04f 0900 	mov.w	r9, #0
 800419c:	ea58 0309 	orrs.w	r3, r8, r9
 80041a0:	d047      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80041a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d82a      	bhi.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80041ac:	a201      	add	r2, pc, #4	@ (adr r2, 80041b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80041ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b2:	bf00      	nop
 80041b4:	080041c9 	.word	0x080041c9
 80041b8:	080041d7 	.word	0x080041d7
 80041bc:	080041ed 	.word	0x080041ed
 80041c0:	0800420b 	.word	0x0800420b
 80041c4:	0800420b 	.word	0x0800420b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c8:	4b8e      	ldr	r3, [pc, #568]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041cc:	4a8d      	ldr	r2, [pc, #564]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041d4:	e01a      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041da:	3308      	adds	r3, #8
 80041dc:	2100      	movs	r1, #0
 80041de:	4618      	mov	r0, r3
 80041e0:	f002 fb0e 	bl	8006800 <RCCEx_PLL2_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041ea:	e00f      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f0:	3328      	adds	r3, #40	@ 0x28
 80041f2:	2100      	movs	r1, #0
 80041f4:	4618      	mov	r0, r3
 80041f6:	f002 fbb5 	bl	8006964 <RCCEx_PLL3_Config>
 80041fa:	4603      	mov	r3, r0
 80041fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004200:	e004      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004208:	e000      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800420a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800420c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004214:	4b7b      	ldr	r3, [pc, #492]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004218:	f023 0107 	bic.w	r1, r3, #7
 800421c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004222:	4a78      	ldr	r2, [pc, #480]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004224:	430b      	orrs	r3, r1
 8004226:	6513      	str	r3, [r2, #80]	@ 0x50
 8004228:	e003      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800422e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800423e:	f04f 0b00 	mov.w	fp, #0
 8004242:	ea5a 030b 	orrs.w	r3, sl, fp
 8004246:	d04c      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800424e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004252:	d030      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004258:	d829      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800425a:	2bc0      	cmp	r3, #192	@ 0xc0
 800425c:	d02d      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800425e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004260:	d825      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004262:	2b80      	cmp	r3, #128	@ 0x80
 8004264:	d018      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004266:	2b80      	cmp	r3, #128	@ 0x80
 8004268:	d821      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800426e:	2b40      	cmp	r3, #64	@ 0x40
 8004270:	d007      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004272:	e01c      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004274:	4b63      	ldr	r3, [pc, #396]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004278:	4a62      	ldr	r2, [pc, #392]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800427a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800427e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004280:	e01c      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004286:	3308      	adds	r3, #8
 8004288:	2100      	movs	r1, #0
 800428a:	4618      	mov	r0, r3
 800428c:	f002 fab8 	bl	8006800 <RCCEx_PLL2_Config>
 8004290:	4603      	mov	r3, r0
 8004292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004296:	e011      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429c:	3328      	adds	r3, #40	@ 0x28
 800429e:	2100      	movs	r1, #0
 80042a0:	4618      	mov	r0, r3
 80042a2:	f002 fb5f 	bl	8006964 <RCCEx_PLL3_Config>
 80042a6:	4603      	mov	r3, r0
 80042a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80042ac:	e006      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042b4:	e002      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80042b6:	bf00      	nop
 80042b8:	e000      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80042ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10a      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80042c4:	4b4f      	ldr	r3, [pc, #316]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80042cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d2:	4a4c      	ldr	r2, [pc, #304]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042d4:	430b      	orrs	r3, r1
 80042d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80042d8:	e003      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80042e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80042ee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80042f2:	2300      	movs	r3, #0
 80042f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80042f8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80042fc:	460b      	mov	r3, r1
 80042fe:	4313      	orrs	r3, r2
 8004300:	d053      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004306:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800430a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800430e:	d035      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004310:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004314:	d82e      	bhi.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004316:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800431a:	d031      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800431c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004320:	d828      	bhi.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004322:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004326:	d01a      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004328:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800432c:	d822      	bhi.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004332:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004336:	d007      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004338:	e01c      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800433a:	4b32      	ldr	r3, [pc, #200]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800433c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433e:	4a31      	ldr	r2, [pc, #196]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004344:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004346:	e01c      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434c:	3308      	adds	r3, #8
 800434e:	2100      	movs	r1, #0
 8004350:	4618      	mov	r0, r3
 8004352:	f002 fa55 	bl	8006800 <RCCEx_PLL2_Config>
 8004356:	4603      	mov	r3, r0
 8004358:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800435c:	e011      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004362:	3328      	adds	r3, #40	@ 0x28
 8004364:	2100      	movs	r1, #0
 8004366:	4618      	mov	r0, r3
 8004368:	f002 fafc 	bl	8006964 <RCCEx_PLL3_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004372:	e006      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800437a:	e002      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800437c:	bf00      	nop
 800437e:	e000      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10b      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800438a:	4b1e      	ldr	r3, [pc, #120]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800438c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004396:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800439a:	4a1a      	ldr	r2, [pc, #104]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800439c:	430b      	orrs	r3, r1
 800439e:	6593      	str	r3, [r2, #88]	@ 0x58
 80043a0:	e003      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80043aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80043b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80043ba:	2300      	movs	r3, #0
 80043bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80043c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80043c4:	460b      	mov	r3, r1
 80043c6:	4313      	orrs	r3, r2
 80043c8:	d056      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80043ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80043d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043d6:	d038      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80043d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043dc:	d831      	bhi.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80043de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80043e2:	d034      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80043e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80043e8:	d82b      	bhi.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80043ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043ee:	d01d      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80043f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043f4:	d825      	bhi.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d006      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80043fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043fe:	d00a      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004400:	e01f      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004402:	bf00      	nop
 8004404:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004408:	4ba2      	ldr	r3, [pc, #648]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800440a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440c:	4aa1      	ldr	r2, [pc, #644]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800440e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004412:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004414:	e01c      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441a:	3308      	adds	r3, #8
 800441c:	2100      	movs	r1, #0
 800441e:	4618      	mov	r0, r3
 8004420:	f002 f9ee 	bl	8006800 <RCCEx_PLL2_Config>
 8004424:	4603      	mov	r3, r0
 8004426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800442a:	e011      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800442c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004430:	3328      	adds	r3, #40	@ 0x28
 8004432:	2100      	movs	r1, #0
 8004434:	4618      	mov	r0, r3
 8004436:	f002 fa95 	bl	8006964 <RCCEx_PLL3_Config>
 800443a:	4603      	mov	r3, r0
 800443c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004440:	e006      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004448:	e002      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800444a:	bf00      	nop
 800444c:	e000      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800444e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004450:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10b      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004458:	4b8e      	ldr	r3, [pc, #568]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800445a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004464:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004468:	4a8a      	ldr	r2, [pc, #552]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800446a:	430b      	orrs	r3, r1
 800446c:	6593      	str	r3, [r2, #88]	@ 0x58
 800446e:	e003      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004470:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004474:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004480:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004484:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004488:	2300      	movs	r3, #0
 800448a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800448e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004492:	460b      	mov	r3, r1
 8004494:	4313      	orrs	r3, r2
 8004496:	d03a      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800449e:	2b30      	cmp	r3, #48	@ 0x30
 80044a0:	d01f      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80044a2:	2b30      	cmp	r3, #48	@ 0x30
 80044a4:	d819      	bhi.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	d00c      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80044aa:	2b20      	cmp	r3, #32
 80044ac:	d815      	bhi.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d019      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80044b2:	2b10      	cmp	r3, #16
 80044b4:	d111      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b6:	4b77      	ldr	r3, [pc, #476]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ba:	4a76      	ldr	r2, [pc, #472]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80044c2:	e011      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c8:	3308      	adds	r3, #8
 80044ca:	2102      	movs	r1, #2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f002 f997 	bl	8006800 <RCCEx_PLL2_Config>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80044d8:	e006      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044e0:	e002      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80044e2:	bf00      	nop
 80044e4:	e000      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80044e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10a      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80044f0:	4b68      	ldr	r3, [pc, #416]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044f4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80044f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044fe:	4a65      	ldr	r2, [pc, #404]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004500:	430b      	orrs	r3, r1
 8004502:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004504:	e003      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004506:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800450a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800450e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004516:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800451a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800451e:	2300      	movs	r3, #0
 8004520:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004524:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004528:	460b      	mov	r3, r1
 800452a:	4313      	orrs	r3, r2
 800452c:	d051      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004534:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004538:	d035      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800453a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800453e:	d82e      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004540:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004544:	d031      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004546:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800454a:	d828      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800454c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004550:	d01a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004556:	d822      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800455c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004560:	d007      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004562:	e01c      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004564:	4b4b      	ldr	r3, [pc, #300]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004568:	4a4a      	ldr	r2, [pc, #296]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800456a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800456e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004570:	e01c      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004576:	3308      	adds	r3, #8
 8004578:	2100      	movs	r1, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f002 f940 	bl	8006800 <RCCEx_PLL2_Config>
 8004580:	4603      	mov	r3, r0
 8004582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004586:	e011      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458c:	3328      	adds	r3, #40	@ 0x28
 800458e:	2100      	movs	r1, #0
 8004590:	4618      	mov	r0, r3
 8004592:	f002 f9e7 	bl	8006964 <RCCEx_PLL3_Config>
 8004596:	4603      	mov	r3, r0
 8004598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800459c:	e006      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045a4:	e002      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80045a6:	bf00      	nop
 80045a8:	e000      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80045aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10a      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80045b4:	4b37      	ldr	r3, [pc, #220]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045b8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80045bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c2:	4a34      	ldr	r2, [pc, #208]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045c4:	430b      	orrs	r3, r1
 80045c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80045c8:	e003      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80045d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045da:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80045de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045e2:	2300      	movs	r3, #0
 80045e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80045e8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80045ec:	460b      	mov	r3, r1
 80045ee:	4313      	orrs	r3, r2
 80045f0:	d056      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045fc:	d033      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80045fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004602:	d82c      	bhi.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004604:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004608:	d02f      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800460a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800460e:	d826      	bhi.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004610:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004614:	d02b      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004616:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800461a:	d820      	bhi.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800461c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004620:	d012      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004622:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004626:	d81a      	bhi.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004628:	2b00      	cmp	r3, #0
 800462a:	d022      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800462c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004630:	d115      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004636:	3308      	adds	r3, #8
 8004638:	2101      	movs	r1, #1
 800463a:	4618      	mov	r0, r3
 800463c:	f002 f8e0 	bl	8006800 <RCCEx_PLL2_Config>
 8004640:	4603      	mov	r3, r0
 8004642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004646:	e015      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464c:	3328      	adds	r3, #40	@ 0x28
 800464e:	2101      	movs	r1, #1
 8004650:	4618      	mov	r0, r3
 8004652:	f002 f987 	bl	8006964 <RCCEx_PLL3_Config>
 8004656:	4603      	mov	r3, r0
 8004658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800465c:	e00a      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004664:	e006      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004666:	bf00      	nop
 8004668:	e004      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800466a:	bf00      	nop
 800466c:	e002      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800466e:	bf00      	nop
 8004670:	e000      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004672:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004674:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10d      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800467c:	4b05      	ldr	r3, [pc, #20]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800467e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004680:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004688:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800468a:	4a02      	ldr	r2, [pc, #8]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800468c:	430b      	orrs	r3, r1
 800468e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004690:	e006      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004692:	bf00      	nop
 8004694:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004698:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800469c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80046a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80046ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046b0:	2300      	movs	r3, #0
 80046b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046b6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80046ba:	460b      	mov	r3, r1
 80046bc:	4313      	orrs	r3, r2
 80046be:	d055      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80046c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80046c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046cc:	d033      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80046ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046d2:	d82c      	bhi.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80046d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046d8:	d02f      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80046da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046de:	d826      	bhi.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80046e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80046e4:	d02b      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80046e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80046ea:	d820      	bhi.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80046ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046f0:	d012      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80046f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046f6:	d81a      	bhi.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d022      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80046fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004700:	d115      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004706:	3308      	adds	r3, #8
 8004708:	2101      	movs	r1, #1
 800470a:	4618      	mov	r0, r3
 800470c:	f002 f878 	bl	8006800 <RCCEx_PLL2_Config>
 8004710:	4603      	mov	r3, r0
 8004712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004716:	e015      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471c:	3328      	adds	r3, #40	@ 0x28
 800471e:	2101      	movs	r1, #1
 8004720:	4618      	mov	r0, r3
 8004722:	f002 f91f 	bl	8006964 <RCCEx_PLL3_Config>
 8004726:	4603      	mov	r3, r0
 8004728:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800472c:	e00a      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004734:	e006      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004736:	bf00      	nop
 8004738:	e004      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800473a:	bf00      	nop
 800473c:	e002      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800473e:	bf00      	nop
 8004740:	e000      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10b      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800474c:	4ba3      	ldr	r3, [pc, #652]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800474e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004750:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004758:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800475c:	4a9f      	ldr	r2, [pc, #636]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800475e:	430b      	orrs	r3, r1
 8004760:	6593      	str	r3, [r2, #88]	@ 0x58
 8004762:	e003      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004768:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800476c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004778:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800477c:	2300      	movs	r3, #0
 800477e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004782:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004786:	460b      	mov	r3, r1
 8004788:	4313      	orrs	r3, r2
 800478a:	d037      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800478c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004792:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004796:	d00e      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800479c:	d816      	bhi.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d018      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80047a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047a6:	d111      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047a8:	4b8c      	ldr	r3, [pc, #560]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ac:	4a8b      	ldr	r2, [pc, #556]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80047b4:	e00f      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ba:	3308      	adds	r3, #8
 80047bc:	2101      	movs	r1, #1
 80047be:	4618      	mov	r0, r3
 80047c0:	f002 f81e 	bl	8006800 <RCCEx_PLL2_Config>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80047ca:	e004      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047d2:	e000      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80047d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10a      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047de:	4b7f      	ldr	r3, [pc, #508]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80047e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ec:	4a7b      	ldr	r2, [pc, #492]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047ee:	430b      	orrs	r3, r1
 80047f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80047f2:	e003      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80047fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004804:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004808:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800480c:	2300      	movs	r3, #0
 800480e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004812:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004816:	460b      	mov	r3, r1
 8004818:	4313      	orrs	r3, r2
 800481a:	d039      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800481c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004822:	2b03      	cmp	r3, #3
 8004824:	d81c      	bhi.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004826:	a201      	add	r2, pc, #4	@ (adr r2, 800482c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482c:	08004869 	.word	0x08004869
 8004830:	0800483d 	.word	0x0800483d
 8004834:	0800484b 	.word	0x0800484b
 8004838:	08004869 	.word	0x08004869
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800483c:	4b67      	ldr	r3, [pc, #412]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800483e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004840:	4a66      	ldr	r2, [pc, #408]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004846:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004848:	e00f      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800484a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484e:	3308      	adds	r3, #8
 8004850:	2102      	movs	r1, #2
 8004852:	4618      	mov	r0, r3
 8004854:	f001 ffd4 	bl	8006800 <RCCEx_PLL2_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800485e:	e004      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004866:	e000      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800486a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10a      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004872:	4b5a      	ldr	r3, [pc, #360]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004876:	f023 0103 	bic.w	r1, r3, #3
 800487a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800487e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004880:	4a56      	ldr	r2, [pc, #344]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004882:	430b      	orrs	r3, r1
 8004884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004886:	e003      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004888:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800488c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004898:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800489c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048a0:	2300      	movs	r3, #0
 80048a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80048a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80048aa:	460b      	mov	r3, r1
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f000 809f 	beq.w	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048b2:	4b4b      	ldr	r3, [pc, #300]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a4a      	ldr	r2, [pc, #296]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80048b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048be:	f7fc fd2d 	bl	800131c <HAL_GetTick>
 80048c2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048c6:	e00b      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c8:	f7fc fd28 	bl	800131c <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b64      	cmp	r3, #100	@ 0x64
 80048d6:	d903      	bls.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048de:	e005      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048e0:	4b3f      	ldr	r3, [pc, #252]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0ed      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80048ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d179      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80048f4:	4b39      	ldr	r3, [pc, #228]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80048f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004900:	4053      	eors	r3, r2
 8004902:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004906:	2b00      	cmp	r3, #0
 8004908:	d015      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800490a:	4b34      	ldr	r3, [pc, #208]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800490c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004912:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004916:	4b31      	ldr	r3, [pc, #196]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491a:	4a30      	ldr	r2, [pc, #192]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800491c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004920:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004922:	4b2e      	ldr	r3, [pc, #184]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004926:	4a2d      	ldr	r2, [pc, #180]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004928:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800492c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800492e:	4a2b      	ldr	r2, [pc, #172]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004930:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004934:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800493e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004942:	d118      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004944:	f7fc fcea 	bl	800131c <HAL_GetTick>
 8004948:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800494c:	e00d      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494e:	f7fc fce5 	bl	800131c <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004958:	1ad2      	subs	r2, r2, r3
 800495a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800495e:	429a      	cmp	r2, r3
 8004960:	d903      	bls.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004968:	e005      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800496a:	4b1c      	ldr	r3, [pc, #112]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0eb      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800497a:	2b00      	cmp	r3, #0
 800497c:	d129      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800497e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004982:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800498a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800498e:	d10e      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004990:	4b12      	ldr	r3, [pc, #72]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80049a0:	091a      	lsrs	r2, r3, #4
 80049a2:	4b10      	ldr	r3, [pc, #64]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	4a0d      	ldr	r2, [pc, #52]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049a8:	430b      	orrs	r3, r1
 80049aa:	6113      	str	r3, [r2, #16]
 80049ac:	e005      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80049ae:	4b0b      	ldr	r3, [pc, #44]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	4a0a      	ldr	r2, [pc, #40]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80049b8:	6113      	str	r3, [r2, #16]
 80049ba:	4b08      	ldr	r3, [pc, #32]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80049be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80049c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ca:	4a04      	ldr	r2, [pc, #16]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049cc:	430b      	orrs	r3, r1
 80049ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80049d0:	e00e      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80049da:	e009      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80049dc:	58024400 	.word	0x58024400
 80049e0:	58024800 	.word	0x58024800
 80049e4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80049f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f8:	f002 0301 	and.w	r3, r2, #1
 80049fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a00:	2300      	movs	r3, #0
 8004a02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a06:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f000 8089 	beq.w	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a18:	2b28      	cmp	r3, #40	@ 0x28
 8004a1a:	d86b      	bhi.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a22:	bf00      	nop
 8004a24:	08004afd 	.word	0x08004afd
 8004a28:	08004af5 	.word	0x08004af5
 8004a2c:	08004af5 	.word	0x08004af5
 8004a30:	08004af5 	.word	0x08004af5
 8004a34:	08004af5 	.word	0x08004af5
 8004a38:	08004af5 	.word	0x08004af5
 8004a3c:	08004af5 	.word	0x08004af5
 8004a40:	08004af5 	.word	0x08004af5
 8004a44:	08004ac9 	.word	0x08004ac9
 8004a48:	08004af5 	.word	0x08004af5
 8004a4c:	08004af5 	.word	0x08004af5
 8004a50:	08004af5 	.word	0x08004af5
 8004a54:	08004af5 	.word	0x08004af5
 8004a58:	08004af5 	.word	0x08004af5
 8004a5c:	08004af5 	.word	0x08004af5
 8004a60:	08004af5 	.word	0x08004af5
 8004a64:	08004adf 	.word	0x08004adf
 8004a68:	08004af5 	.word	0x08004af5
 8004a6c:	08004af5 	.word	0x08004af5
 8004a70:	08004af5 	.word	0x08004af5
 8004a74:	08004af5 	.word	0x08004af5
 8004a78:	08004af5 	.word	0x08004af5
 8004a7c:	08004af5 	.word	0x08004af5
 8004a80:	08004af5 	.word	0x08004af5
 8004a84:	08004afd 	.word	0x08004afd
 8004a88:	08004af5 	.word	0x08004af5
 8004a8c:	08004af5 	.word	0x08004af5
 8004a90:	08004af5 	.word	0x08004af5
 8004a94:	08004af5 	.word	0x08004af5
 8004a98:	08004af5 	.word	0x08004af5
 8004a9c:	08004af5 	.word	0x08004af5
 8004aa0:	08004af5 	.word	0x08004af5
 8004aa4:	08004afd 	.word	0x08004afd
 8004aa8:	08004af5 	.word	0x08004af5
 8004aac:	08004af5 	.word	0x08004af5
 8004ab0:	08004af5 	.word	0x08004af5
 8004ab4:	08004af5 	.word	0x08004af5
 8004ab8:	08004af5 	.word	0x08004af5
 8004abc:	08004af5 	.word	0x08004af5
 8004ac0:	08004af5 	.word	0x08004af5
 8004ac4:	08004afd 	.word	0x08004afd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004acc:	3308      	adds	r3, #8
 8004ace:	2101      	movs	r1, #1
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f001 fe95 	bl	8006800 <RCCEx_PLL2_Config>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004adc:	e00f      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae2:	3328      	adds	r3, #40	@ 0x28
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f001 ff3c 	bl	8006964 <RCCEx_PLL3_Config>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004af2:	e004      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004afa:	e000      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10a      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004b06:	4bbf      	ldr	r3, [pc, #764]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b0a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b14:	4abb      	ldr	r2, [pc, #748]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b16:	430b      	orrs	r3, r1
 8004b18:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b1a:	e003      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2c:	f002 0302 	and.w	r3, r2, #2
 8004b30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b34:	2300      	movs	r3, #0
 8004b36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004b3a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4313      	orrs	r3, r2
 8004b42:	d041      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b4a:	2b05      	cmp	r3, #5
 8004b4c:	d824      	bhi.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b54 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b54:	08004ba1 	.word	0x08004ba1
 8004b58:	08004b6d 	.word	0x08004b6d
 8004b5c:	08004b83 	.word	0x08004b83
 8004b60:	08004ba1 	.word	0x08004ba1
 8004b64:	08004ba1 	.word	0x08004ba1
 8004b68:	08004ba1 	.word	0x08004ba1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b70:	3308      	adds	r3, #8
 8004b72:	2101      	movs	r1, #1
 8004b74:	4618      	mov	r0, r3
 8004b76:	f001 fe43 	bl	8006800 <RCCEx_PLL2_Config>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b80:	e00f      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b86:	3328      	adds	r3, #40	@ 0x28
 8004b88:	2101      	movs	r1, #1
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f001 feea 	bl	8006964 <RCCEx_PLL3_Config>
 8004b90:	4603      	mov	r3, r0
 8004b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b96:	e004      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b9e:	e000      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10a      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004baa:	4b96      	ldr	r3, [pc, #600]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bae:	f023 0107 	bic.w	r1, r3, #7
 8004bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bb8:	4a92      	ldr	r2, [pc, #584]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bba:	430b      	orrs	r3, r1
 8004bbc:	6553      	str	r3, [r2, #84]	@ 0x54
 8004bbe:	e003      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd0:	f002 0304 	and.w	r3, r2, #4
 8004bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bde:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4313      	orrs	r3, r2
 8004be6:	d044      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bf0:	2b05      	cmp	r3, #5
 8004bf2:	d825      	bhi.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bfc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c49 	.word	0x08004c49
 8004c00:	08004c15 	.word	0x08004c15
 8004c04:	08004c2b 	.word	0x08004c2b
 8004c08:	08004c49 	.word	0x08004c49
 8004c0c:	08004c49 	.word	0x08004c49
 8004c10:	08004c49 	.word	0x08004c49
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c18:	3308      	adds	r3, #8
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f001 fdef 	bl	8006800 <RCCEx_PLL2_Config>
 8004c22:	4603      	mov	r3, r0
 8004c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004c28:	e00f      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c2e:	3328      	adds	r3, #40	@ 0x28
 8004c30:	2101      	movs	r1, #1
 8004c32:	4618      	mov	r0, r3
 8004c34:	f001 fe96 	bl	8006964 <RCCEx_PLL3_Config>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004c3e:	e004      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c46:	e000      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10b      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c52:	4b6c      	ldr	r3, [pc, #432]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c56:	f023 0107 	bic.w	r1, r3, #7
 8004c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c62:	4a68      	ldr	r2, [pc, #416]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c64:	430b      	orrs	r3, r1
 8004c66:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c68:	e003      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7a:	f002 0320 	and.w	r3, r2, #32
 8004c7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c82:	2300      	movs	r3, #0
 8004c84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	d055      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c9e:	d033      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ca4:	d82c      	bhi.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004caa:	d02f      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cb0:	d826      	bhi.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004cb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004cb6:	d02b      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004cb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004cbc:	d820      	bhi.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004cbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cc2:	d012      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004cc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cc8:	d81a      	bhi.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d022      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004cce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cd2:	d115      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd8:	3308      	adds	r3, #8
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f001 fd8f 	bl	8006800 <RCCEx_PLL2_Config>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ce8:	e015      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cee:	3328      	adds	r3, #40	@ 0x28
 8004cf0:	2102      	movs	r1, #2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f001 fe36 	bl	8006964 <RCCEx_PLL3_Config>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004cfe:	e00a      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d06:	e006      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004d08:	bf00      	nop
 8004d0a:	e004      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004d0c:	bf00      	nop
 8004d0e:	e002      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004d10:	bf00      	nop
 8004d12:	e000      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10b      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d1e:	4b39      	ldr	r3, [pc, #228]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d22:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2e:	4a35      	ldr	r2, [pc, #212]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d30:	430b      	orrs	r3, r1
 8004d32:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d34:	e003      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d46:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004d54:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	d058      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d66:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004d6a:	d033      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004d6c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004d70:	d82c      	bhi.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d76:	d02f      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004d78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d7c:	d826      	bhi.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d82:	d02b      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004d84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d88:	d820      	bhi.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d8e:	d012      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004d90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d94:	d81a      	bhi.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d022      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d9e:	d115      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da4:	3308      	adds	r3, #8
 8004da6:	2100      	movs	r1, #0
 8004da8:	4618      	mov	r0, r3
 8004daa:	f001 fd29 	bl	8006800 <RCCEx_PLL2_Config>
 8004dae:	4603      	mov	r3, r0
 8004db0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004db4:	e015      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dba:	3328      	adds	r3, #40	@ 0x28
 8004dbc:	2102      	movs	r1, #2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f001 fdd0 	bl	8006964 <RCCEx_PLL3_Config>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004dca:	e00a      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dd2:	e006      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004dd4:	bf00      	nop
 8004dd6:	e004      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004dd8:	bf00      	nop
 8004dda:	e002      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004ddc:	bf00      	nop
 8004dde:	e000      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10e      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dea:	4b06      	ldr	r3, [pc, #24]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dfa:	4a02      	ldr	r2, [pc, #8]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e00:	e006      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004e02:	bf00      	nop
 8004e04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004e1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e20:	2300      	movs	r3, #0
 8004e22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e26:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	d055      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004e38:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004e3c:	d033      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004e3e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004e42:	d82c      	bhi.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e48:	d02f      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004e4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e4e:	d826      	bhi.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e50:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004e54:	d02b      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004e56:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004e5a:	d820      	bhi.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e60:	d012      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004e62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e66:	d81a      	bhi.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d022      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004e6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e70:	d115      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e76:	3308      	adds	r3, #8
 8004e78:	2100      	movs	r1, #0
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f001 fcc0 	bl	8006800 <RCCEx_PLL2_Config>
 8004e80:	4603      	mov	r3, r0
 8004e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e86:	e015      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8c:	3328      	adds	r3, #40	@ 0x28
 8004e8e:	2102      	movs	r1, #2
 8004e90:	4618      	mov	r0, r3
 8004e92:	f001 fd67 	bl	8006964 <RCCEx_PLL3_Config>
 8004e96:	4603      	mov	r3, r0
 8004e98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e9c:	e00a      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ea4:	e006      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ea6:	bf00      	nop
 8004ea8:	e004      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004eaa:	bf00      	nop
 8004eac:	e002      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004eae:	bf00      	nop
 8004eb0:	e000      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10b      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004ebc:	4ba1      	ldr	r3, [pc, #644]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ecc:	4a9d      	ldr	r2, [pc, #628]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ed2:	e003      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ed8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f002 0308 	and.w	r3, r2, #8
 8004ee8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004eec:	2300      	movs	r3, #0
 8004eee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ef2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	d01e      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f08:	d10c      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0e:	3328      	adds	r3, #40	@ 0x28
 8004f10:	2102      	movs	r1, #2
 8004f12:	4618      	mov	r0, r3
 8004f14:	f001 fd26 	bl	8006964 <RCCEx_PLL3_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004f24:	4b87      	ldr	r3, [pc, #540]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f28:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f34:	4a83      	ldr	r2, [pc, #524]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f36:	430b      	orrs	r3, r1
 8004f38:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f42:	f002 0310 	and.w	r3, r2, #16
 8004f46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004f50:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004f54:	460b      	mov	r3, r1
 8004f56:	4313      	orrs	r3, r2
 8004f58:	d01e      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f66:	d10c      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f6c:	3328      	adds	r3, #40	@ 0x28
 8004f6e:	2102      	movs	r1, #2
 8004f70:	4618      	mov	r0, r3
 8004f72:	f001 fcf7 	bl	8006964 <RCCEx_PLL3_Config>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f82:	4b70      	ldr	r3, [pc, #448]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f92:	4a6c      	ldr	r2, [pc, #432]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f94:	430b      	orrs	r3, r1
 8004f96:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004fa4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004fae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	d03e      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004fc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fc4:	d022      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004fc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fca:	d81b      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fd4:	d00b      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004fd6:	e015      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fdc:	3308      	adds	r3, #8
 8004fde:	2100      	movs	r1, #0
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f001 fc0d 	bl	8006800 <RCCEx_PLL2_Config>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004fec:	e00f      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ff2:	3328      	adds	r3, #40	@ 0x28
 8004ff4:	2102      	movs	r1, #2
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f001 fcb4 	bl	8006964 <RCCEx_PLL3_Config>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005002:	e004      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800500a:	e000      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800500c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800500e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10b      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005016:	4b4b      	ldr	r3, [pc, #300]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800501a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800501e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005022:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005026:	4a47      	ldr	r2, [pc, #284]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005028:	430b      	orrs	r3, r1
 800502a:	6593      	str	r3, [r2, #88]	@ 0x58
 800502c:	e003      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800502e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005032:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005042:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005044:	2300      	movs	r3, #0
 8005046:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005048:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800504c:	460b      	mov	r3, r1
 800504e:	4313      	orrs	r3, r2
 8005050:	d03b      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800505e:	d01f      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005060:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005064:	d818      	bhi.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005066:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800506a:	d003      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800506c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005070:	d007      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005072:	e011      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005074:	4b33      	ldr	r3, [pc, #204]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005078:	4a32      	ldr	r2, [pc, #200]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800507a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800507e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005080:	e00f      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005086:	3328      	adds	r3, #40	@ 0x28
 8005088:	2101      	movs	r1, #1
 800508a:	4618      	mov	r0, r3
 800508c:	f001 fc6a 	bl	8006964 <RCCEx_PLL3_Config>
 8005090:	4603      	mov	r3, r0
 8005092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005096:	e004      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800509e:	e000      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80050a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10b      	bne.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050aa:	4b26      	ldr	r3, [pc, #152]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80050b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ba:	4a22      	ldr	r2, [pc, #136]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050bc:	430b      	orrs	r3, r1
 80050be:	6553      	str	r3, [r2, #84]	@ 0x54
 80050c0:	e003      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80050ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80050d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80050d8:	2300      	movs	r3, #0
 80050da:	677b      	str	r3, [r7, #116]	@ 0x74
 80050dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80050e0:	460b      	mov	r3, r1
 80050e2:	4313      	orrs	r3, r2
 80050e4:	d034      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80050e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80050f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050f4:	d007      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80050f6:	e011      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050f8:	4b12      	ldr	r3, [pc, #72]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fc:	4a11      	ldr	r2, [pc, #68]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005102:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005104:	e00e      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800510a:	3308      	adds	r3, #8
 800510c:	2102      	movs	r1, #2
 800510e:	4618      	mov	r0, r3
 8005110:	f001 fb76 	bl	8006800 <RCCEx_PLL2_Config>
 8005114:	4603      	mov	r3, r0
 8005116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800511a:	e003      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005122:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10d      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800512c:	4b05      	ldr	r3, [pc, #20]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800512e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005130:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800513a:	4a02      	ldr	r2, [pc, #8]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800513c:	430b      	orrs	r3, r1
 800513e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005140:	e006      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005142:	bf00      	nop
 8005144:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800514c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005158:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800515c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800515e:	2300      	movs	r3, #0
 8005160:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005162:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005166:	460b      	mov	r3, r1
 8005168:	4313      	orrs	r3, r2
 800516a:	d00c      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800516c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005170:	3328      	adds	r3, #40	@ 0x28
 8005172:	2102      	movs	r1, #2
 8005174:	4618      	mov	r0, r3
 8005176:	f001 fbf5 	bl	8006964 <RCCEx_PLL3_Config>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005192:	663b      	str	r3, [r7, #96]	@ 0x60
 8005194:	2300      	movs	r3, #0
 8005196:	667b      	str	r3, [r7, #100]	@ 0x64
 8005198:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800519c:	460b      	mov	r3, r1
 800519e:	4313      	orrs	r3, r2
 80051a0:	d038      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80051a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051ae:	d018      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80051b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051b4:	d811      	bhi.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80051b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051ba:	d014      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80051bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051c0:	d80b      	bhi.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d011      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80051c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051ca:	d106      	bne.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051cc:	4bc3      	ldr	r3, [pc, #780]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d0:	4ac2      	ldr	r2, [pc, #776]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80051d8:	e008      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051e0:	e004      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80051e2:	bf00      	nop
 80051e4:	e002      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80051e6:	bf00      	nop
 80051e8:	e000      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80051ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10b      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051f4:	4bb9      	ldr	r3, [pc, #740]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80051fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005204:	4ab5      	ldr	r2, [pc, #724]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005206:	430b      	orrs	r3, r1
 8005208:	6553      	str	r3, [r2, #84]	@ 0x54
 800520a:	e003      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800520c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005210:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005220:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005222:	2300      	movs	r3, #0
 8005224:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005226:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800522a:	460b      	mov	r3, r1
 800522c:	4313      	orrs	r3, r2
 800522e:	d009      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005230:	4baa      	ldr	r3, [pc, #680]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005234:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800523c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800523e:	4aa7      	ldr	r2, [pc, #668]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005240:	430b      	orrs	r3, r1
 8005242:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005250:	653b      	str	r3, [r7, #80]	@ 0x50
 8005252:	2300      	movs	r3, #0
 8005254:	657b      	str	r3, [r7, #84]	@ 0x54
 8005256:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800525a:	460b      	mov	r3, r1
 800525c:	4313      	orrs	r3, r2
 800525e:	d00a      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005260:	4b9e      	ldr	r3, [pc, #632]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005270:	4a9a      	ldr	r2, [pc, #616]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005272:	430b      	orrs	r3, r1
 8005274:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005282:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005284:	2300      	movs	r3, #0
 8005286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005288:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800528c:	460b      	mov	r3, r1
 800528e:	4313      	orrs	r3, r2
 8005290:	d009      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005292:	4b92      	ldr	r3, [pc, #584]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005296:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800529a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052a0:	4a8e      	ldr	r2, [pc, #568]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052a2:	430b      	orrs	r3, r1
 80052a4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80052a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80052b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80052b4:	2300      	movs	r3, #0
 80052b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80052b8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80052bc:	460b      	mov	r3, r1
 80052be:	4313      	orrs	r3, r2
 80052c0:	d00e      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052c2:	4b86      	ldr	r3, [pc, #536]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	4a85      	ldr	r2, [pc, #532]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80052cc:	6113      	str	r3, [r2, #16]
 80052ce:	4b83      	ldr	r3, [pc, #524]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052d0:	6919      	ldr	r1, [r3, #16]
 80052d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80052da:	4a80      	ldr	r2, [pc, #512]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052dc:	430b      	orrs	r3, r1
 80052de:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80052e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80052ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052ee:	2300      	movs	r3, #0
 80052f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052f2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80052f6:	460b      	mov	r3, r1
 80052f8:	4313      	orrs	r3, r2
 80052fa:	d009      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80052fc:	4b77      	ldr	r3, [pc, #476]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005300:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800530a:	4a74      	ldr	r2, [pc, #464]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800530c:	430b      	orrs	r3, r1
 800530e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005318:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800531c:	633b      	str	r3, [r7, #48]	@ 0x30
 800531e:	2300      	movs	r3, #0
 8005320:	637b      	str	r3, [r7, #52]	@ 0x34
 8005322:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005326:	460b      	mov	r3, r1
 8005328:	4313      	orrs	r3, r2
 800532a:	d00a      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800532c:	4b6b      	ldr	r3, [pc, #428]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800532e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005330:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005338:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800533c:	4a67      	ldr	r2, [pc, #412]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800533e:	430b      	orrs	r3, r1
 8005340:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534a:	2100      	movs	r1, #0
 800534c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005354:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005358:	460b      	mov	r3, r1
 800535a:	4313      	orrs	r3, r2
 800535c:	d011      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800535e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005362:	3308      	adds	r3, #8
 8005364:	2100      	movs	r1, #0
 8005366:	4618      	mov	r0, r3
 8005368:	f001 fa4a 	bl	8006800 <RCCEx_PLL2_Config>
 800536c:	4603      	mov	r3, r0
 800536e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800537a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800537e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538a:	2100      	movs	r1, #0
 800538c:	6239      	str	r1, [r7, #32]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	627b      	str	r3, [r7, #36]	@ 0x24
 8005394:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005398:	460b      	mov	r3, r1
 800539a:	4313      	orrs	r3, r2
 800539c:	d011      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800539e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a2:	3308      	adds	r3, #8
 80053a4:	2101      	movs	r1, #1
 80053a6:	4618      	mov	r0, r3
 80053a8:	f001 fa2a 	bl	8006800 <RCCEx_PLL2_Config>
 80053ac:	4603      	mov	r3, r0
 80053ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80053b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80053c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	2100      	movs	r1, #0
 80053cc:	61b9      	str	r1, [r7, #24]
 80053ce:	f003 0304 	and.w	r3, r3, #4
 80053d2:	61fb      	str	r3, [r7, #28]
 80053d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80053d8:	460b      	mov	r3, r1
 80053da:	4313      	orrs	r3, r2
 80053dc:	d011      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e2:	3308      	adds	r3, #8
 80053e4:	2102      	movs	r1, #2
 80053e6:	4618      	mov	r0, r3
 80053e8:	f001 fa0a 	bl	8006800 <RCCEx_PLL2_Config>
 80053ec:	4603      	mov	r3, r0
 80053ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80053f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	2100      	movs	r1, #0
 800540c:	6139      	str	r1, [r7, #16]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005418:	460b      	mov	r3, r1
 800541a:	4313      	orrs	r3, r2
 800541c:	d011      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800541e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005422:	3328      	adds	r3, #40	@ 0x28
 8005424:	2100      	movs	r1, #0
 8005426:	4618      	mov	r0, r3
 8005428:	f001 fa9c 	bl	8006964 <RCCEx_PLL3_Config>
 800542c:	4603      	mov	r3, r0
 800542e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800543e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544a:	2100      	movs	r1, #0
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005458:	460b      	mov	r3, r1
 800545a:	4313      	orrs	r3, r2
 800545c:	d011      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800545e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005462:	3328      	adds	r3, #40	@ 0x28
 8005464:	2101      	movs	r1, #1
 8005466:	4618      	mov	r0, r3
 8005468:	f001 fa7c 	bl	8006964 <RCCEx_PLL3_Config>
 800546c:	4603      	mov	r3, r0
 800546e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800547a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800547e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	2100      	movs	r1, #0
 800548c:	6039      	str	r1, [r7, #0]
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	607b      	str	r3, [r7, #4]
 8005494:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005498:	460b      	mov	r3, r1
 800549a:	4313      	orrs	r3, r2
 800549c:	d011      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800549e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a2:	3328      	adds	r3, #40	@ 0x28
 80054a4:	2102      	movs	r1, #2
 80054a6:	4618      	mov	r0, r3
 80054a8:	f001 fa5c 	bl	8006964 <RCCEx_PLL3_Config>
 80054ac:	4603      	mov	r3, r0
 80054ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80054b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80054c2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	e000      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80054d6:	46bd      	mov	sp, r7
 80054d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054dc:	58024400 	.word	0x58024400

080054e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b090      	sub	sp, #64	@ 0x40
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80054ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054ee:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80054f2:	430b      	orrs	r3, r1
 80054f4:	f040 8094 	bne.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80054f8:	4b9e      	ldr	r3, [pc, #632]	@ (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80054fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005504:	2b04      	cmp	r3, #4
 8005506:	f200 8087 	bhi.w	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800550a:	a201      	add	r2, pc, #4	@ (adr r2, 8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800550c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005510:	08005525 	.word	0x08005525
 8005514:	0800554d 	.word	0x0800554d
 8005518:	08005575 	.word	0x08005575
 800551c:	08005611 	.word	0x08005611
 8005520:	0800559d 	.word	0x0800559d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005524:	4b93      	ldr	r3, [pc, #588]	@ (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800552c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005530:	d108      	bne.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005536:	4618      	mov	r0, r3
 8005538:	f001 f810 	bl	800655c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800553c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005540:	f000 bd45 	b.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005544:	2300      	movs	r3, #0
 8005546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005548:	f000 bd41 	b.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800554c:	4b89      	ldr	r3, [pc, #548]	@ (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005554:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005558:	d108      	bne.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800555a:	f107 0318 	add.w	r3, r7, #24
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fd54 	bl	800600c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005568:	f000 bd31 	b.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800556c:	2300      	movs	r3, #0
 800556e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005570:	f000 bd2d 	b.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005574:	4b7f      	ldr	r3, [pc, #508]	@ (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800557c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005580:	d108      	bne.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005582:	f107 030c 	add.w	r3, r7, #12
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fe94 	bl	80062b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005590:	f000 bd1d 	b.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005594:	2300      	movs	r3, #0
 8005596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005598:	f000 bd19 	b.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800559c:	4b75      	ldr	r3, [pc, #468]	@ (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800559e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80055a4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80055a6:	4b73      	ldr	r3, [pc, #460]	@ (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0304 	and.w	r3, r3, #4
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d10c      	bne.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80055b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d109      	bne.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055b8:	4b6e      	ldr	r3, [pc, #440]	@ (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	08db      	lsrs	r3, r3, #3
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	4a6d      	ldr	r2, [pc, #436]	@ (8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80055c4:	fa22 f303 	lsr.w	r3, r2, r3
 80055c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055ca:	e01f      	b.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80055cc:	4b69      	ldr	r3, [pc, #420]	@ (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055d8:	d106      	bne.n	80055e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80055da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055e0:	d102      	bne.n	80055e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80055e2:	4b66      	ldr	r3, [pc, #408]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80055e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055e6:	e011      	b.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80055e8:	4b62      	ldr	r3, [pc, #392]	@ (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055f4:	d106      	bne.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80055f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055fc:	d102      	bne.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80055fe:	4b60      	ldr	r3, [pc, #384]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005600:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005602:	e003      	b.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005604:	2300      	movs	r3, #0
 8005606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005608:	f000 bce1 	b.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800560c:	f000 bcdf 	b.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005610:	4b5c      	ldr	r3, [pc, #368]	@ (8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005614:	f000 bcdb 	b.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005618:	2300      	movs	r3, #0
 800561a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800561c:	f000 bcd7 	b.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005624:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005628:	430b      	orrs	r3, r1
 800562a:	f040 80ad 	bne.w	8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800562e:	4b51      	ldr	r3, [pc, #324]	@ (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005632:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005636:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800563e:	d056      	beq.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005646:	f200 8090 	bhi.w	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800564a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564c:	2bc0      	cmp	r3, #192	@ 0xc0
 800564e:	f000 8088 	beq.w	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8005652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005654:	2bc0      	cmp	r3, #192	@ 0xc0
 8005656:	f200 8088 	bhi.w	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800565a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565c:	2b80      	cmp	r3, #128	@ 0x80
 800565e:	d032      	beq.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005662:	2b80      	cmp	r3, #128	@ 0x80
 8005664:	f200 8081 	bhi.w	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800566e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005670:	2b40      	cmp	r3, #64	@ 0x40
 8005672:	d014      	beq.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005674:	e079      	b.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005676:	4b3f      	ldr	r3, [pc, #252]	@ (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800567e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005682:	d108      	bne.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005688:	4618      	mov	r0, r3
 800568a:	f000 ff67 	bl	800655c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800568e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005692:	f000 bc9c 	b.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005696:	2300      	movs	r3, #0
 8005698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800569a:	f000 bc98 	b.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800569e:	4b35      	ldr	r3, [pc, #212]	@ (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056aa:	d108      	bne.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056ac:	f107 0318 	add.w	r3, r7, #24
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fcab 	bl	800600c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056ba:	f000 bc88 	b.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056be:	2300      	movs	r3, #0
 80056c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056c2:	f000 bc84 	b.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80056c6:	4b2b      	ldr	r3, [pc, #172]	@ (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056d2:	d108      	bne.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056d4:	f107 030c 	add.w	r3, r7, #12
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 fdeb 	bl	80062b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056e2:	f000 bc74 	b.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056e6:	2300      	movs	r3, #0
 80056e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056ea:	f000 bc70 	b.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80056ee:	4b21      	ldr	r3, [pc, #132]	@ (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80056f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80056f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b04      	cmp	r3, #4
 8005702:	d10c      	bne.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005706:	2b00      	cmp	r3, #0
 8005708:	d109      	bne.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800570a:	4b1a      	ldr	r3, [pc, #104]	@ (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	08db      	lsrs	r3, r3, #3
 8005710:	f003 0303 	and.w	r3, r3, #3
 8005714:	4a18      	ldr	r2, [pc, #96]	@ (8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005716:	fa22 f303 	lsr.w	r3, r2, r3
 800571a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800571c:	e01f      	b.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800571e:	4b15      	ldr	r3, [pc, #84]	@ (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800572a:	d106      	bne.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800572c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005732:	d102      	bne.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005734:	4b11      	ldr	r3, [pc, #68]	@ (800577c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005738:	e011      	b.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800573a:	4b0e      	ldr	r3, [pc, #56]	@ (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005742:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005746:	d106      	bne.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800574a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800574e:	d102      	bne.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005750:	4b0b      	ldr	r3, [pc, #44]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005752:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005754:	e003      	b.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005756:	2300      	movs	r3, #0
 8005758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800575a:	f000 bc38 	b.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800575e:	f000 bc36 	b.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005762:	4b08      	ldr	r3, [pc, #32]	@ (8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005766:	f000 bc32 	b.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800576a:	2300      	movs	r3, #0
 800576c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800576e:	f000 bc2e 	b.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005772:	bf00      	nop
 8005774:	58024400 	.word	0x58024400
 8005778:	03d09000 	.word	0x03d09000
 800577c:	003d0900 	.word	0x003d0900
 8005780:	007a1200 	.word	0x007a1200
 8005784:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800578c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005790:	430b      	orrs	r3, r1
 8005792:	f040 809c 	bne.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005796:	4b9e      	ldr	r3, [pc, #632]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800579a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800579e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80057a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057a6:	d054      	beq.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80057a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057ae:	f200 808b 	bhi.w	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80057b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80057b8:	f000 8083 	beq.w	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80057bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80057c2:	f200 8081 	bhi.w	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80057c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057cc:	d02f      	beq.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80057ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057d4:	d878      	bhi.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80057d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d004      	beq.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80057dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057e2:	d012      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80057e4:	e070      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80057e6:	4b8a      	ldr	r3, [pc, #552]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057f2:	d107      	bne.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 feaf 	bl	800655c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005802:	e3e4      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005804:	2300      	movs	r3, #0
 8005806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005808:	e3e1      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800580a:	4b81      	ldr	r3, [pc, #516]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005812:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005816:	d107      	bne.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005818:	f107 0318 	add.w	r3, r7, #24
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fbf5 	bl	800600c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005826:	e3d2      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800582c:	e3cf      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800582e:	4b78      	ldr	r3, [pc, #480]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800583a:	d107      	bne.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800583c:	f107 030c 	add.w	r3, r7, #12
 8005840:	4618      	mov	r0, r3
 8005842:	f000 fd37 	bl	80062b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800584a:	e3c0      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800584c:	2300      	movs	r3, #0
 800584e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005850:	e3bd      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005852:	4b6f      	ldr	r3, [pc, #444]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005856:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800585a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800585c:	4b6c      	ldr	r3, [pc, #432]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b04      	cmp	r3, #4
 8005866:	d10c      	bne.n	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800586a:	2b00      	cmp	r3, #0
 800586c:	d109      	bne.n	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800586e:	4b68      	ldr	r3, [pc, #416]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	08db      	lsrs	r3, r3, #3
 8005874:	f003 0303 	and.w	r3, r3, #3
 8005878:	4a66      	ldr	r2, [pc, #408]	@ (8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800587a:	fa22 f303 	lsr.w	r3, r2, r3
 800587e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005880:	e01e      	b.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005882:	4b63      	ldr	r3, [pc, #396]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800588a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800588e:	d106      	bne.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005892:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005896:	d102      	bne.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005898:	4b5f      	ldr	r3, [pc, #380]	@ (8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800589a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800589c:	e010      	b.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800589e:	4b5c      	ldr	r3, [pc, #368]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058aa:	d106      	bne.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80058ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058b2:	d102      	bne.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80058b4:	4b59      	ldr	r3, [pc, #356]	@ (8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80058b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058b8:	e002      	b.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80058be:	e386      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80058c0:	e385      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80058c2:	4b57      	ldr	r3, [pc, #348]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80058c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058c6:	e382      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80058c8:	2300      	movs	r3, #0
 80058ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058cc:	e37f      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80058ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058d2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80058d6:	430b      	orrs	r3, r1
 80058d8:	f040 80a7 	bne.w	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80058dc:	4b4c      	ldr	r3, [pc, #304]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058e0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80058e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80058e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058ec:	d055      	beq.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80058ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058f4:	f200 8096 	bhi.w	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80058f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058fe:	f000 8084 	beq.w	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8005902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005904:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005908:	f200 808c 	bhi.w	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800590c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005912:	d030      	beq.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005916:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800591a:	f200 8083 	bhi.w	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800591e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005920:	2b00      	cmp	r3, #0
 8005922:	d004      	beq.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005926:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800592a:	d012      	beq.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800592c:	e07a      	b.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800592e:	4b38      	ldr	r3, [pc, #224]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005936:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800593a:	d107      	bne.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800593c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fe0b 	bl	800655c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800594a:	e340      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005950:	e33d      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005952:	4b2f      	ldr	r3, [pc, #188]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800595a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800595e:	d107      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005960:	f107 0318 	add.w	r3, r7, #24
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fb51 	bl	800600c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800596e:	e32e      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005974:	e32b      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005976:	4b26      	ldr	r3, [pc, #152]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800597e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005982:	d107      	bne.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005984:	f107 030c 	add.w	r3, r7, #12
 8005988:	4618      	mov	r0, r3
 800598a:	f000 fc93 	bl	80062b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005992:	e31c      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005994:	2300      	movs	r3, #0
 8005996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005998:	e319      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800599a:	4b1d      	ldr	r3, [pc, #116]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800599c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800599e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80059a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b04      	cmp	r3, #4
 80059ae:	d10c      	bne.n	80059ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80059b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d109      	bne.n	80059ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059b6:	4b16      	ldr	r3, [pc, #88]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	08db      	lsrs	r3, r3, #3
 80059bc:	f003 0303 	and.w	r3, r3, #3
 80059c0:	4a14      	ldr	r2, [pc, #80]	@ (8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80059c2:	fa22 f303 	lsr.w	r3, r2, r3
 80059c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059c8:	e01e      	b.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059ca:	4b11      	ldr	r3, [pc, #68]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059d6:	d106      	bne.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80059d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059de:	d102      	bne.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80059e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80059e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059e4:	e010      	b.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80059e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059f2:	d106      	bne.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80059f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059fa:	d102      	bne.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80059fc:	4b07      	ldr	r3, [pc, #28]	@ (8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80059fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a00:	e002      	b.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005a06:	e2e2      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005a08:	e2e1      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005a0a:	4b05      	ldr	r3, [pc, #20]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a0e:	e2de      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005a10:	58024400 	.word	0x58024400
 8005a14:	03d09000 	.word	0x03d09000
 8005a18:	003d0900 	.word	0x003d0900
 8005a1c:	007a1200 	.word	0x007a1200
 8005a20:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005a24:	2300      	movs	r3, #0
 8005a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a28:	e2d1      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005a2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a2e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005a32:	430b      	orrs	r3, r1
 8005a34:	f040 809c 	bne.w	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005a38:	4b93      	ldr	r3, [pc, #588]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a3c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005a40:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a48:	d054      	beq.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a50:	f200 808b 	bhi.w	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a5a:	f000 8083 	beq.w	8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a64:	f200 8081 	bhi.w	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a6e:	d02f      	beq.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a76:	d878      	bhi.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d004      	beq.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a84:	d012      	beq.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005a86:	e070      	b.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a88:	4b7f      	ldr	r3, [pc, #508]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a94:	d107      	bne.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 fd5e 	bl	800655c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005aa4:	e293      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005aaa:	e290      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005aac:	4b76      	ldr	r3, [pc, #472]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ab4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ab8:	d107      	bne.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005aba:	f107 0318 	add.w	r3, r7, #24
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 faa4 	bl	800600c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ac8:	e281      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005aca:	2300      	movs	r3, #0
 8005acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ace:	e27e      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ad0:	4b6d      	ldr	r3, [pc, #436]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ad8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005adc:	d107      	bne.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ade:	f107 030c 	add.w	r3, r7, #12
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 fbe6 	bl	80062b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005aec:	e26f      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005aee:	2300      	movs	r3, #0
 8005af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005af2:	e26c      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005af4:	4b64      	ldr	r3, [pc, #400]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005af8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005afc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005afe:	4b62      	ldr	r3, [pc, #392]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0304 	and.w	r3, r3, #4
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	d10c      	bne.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d109      	bne.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b10:	4b5d      	ldr	r3, [pc, #372]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	08db      	lsrs	r3, r3, #3
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	4a5c      	ldr	r2, [pc, #368]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b22:	e01e      	b.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b24:	4b58      	ldr	r3, [pc, #352]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b30:	d106      	bne.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b38:	d102      	bne.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005b3a:	4b55      	ldr	r3, [pc, #340]	@ (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b3e:	e010      	b.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b40:	4b51      	ldr	r3, [pc, #324]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b4c:	d106      	bne.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b54:	d102      	bne.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005b56:	4b4f      	ldr	r3, [pc, #316]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b5a:	e002      	b.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005b60:	e235      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b62:	e234      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b64:	4b4c      	ldr	r3, [pc, #304]	@ (8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b68:	e231      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b6e:	e22e      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b74:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	f040 808f 	bne.w	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005b7e:	4b42      	ldr	r3, [pc, #264]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b82:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005b86:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b8e:	d06b      	beq.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b96:	d874      	bhi.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b9e:	d056      	beq.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ba6:	d86c      	bhi.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005baa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bae:	d03b      	beq.n	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bb6:	d864      	bhi.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bbe:	d021      	beq.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bc6:	d85c      	bhi.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d004      	beq.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bd4:	d004      	beq.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005bd6:	e054      	b.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005bd8:	f7fe fa4c 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 8005bdc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005bde:	e1f6      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005be0:	4b29      	ldr	r3, [pc, #164]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005be8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bec:	d107      	bne.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bee:	f107 0318 	add.w	r3, r7, #24
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fa0a 	bl	800600c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bfc:	e1e7      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c02:	e1e4      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c04:	4b20      	ldr	r3, [pc, #128]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c10:	d107      	bne.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c12:	f107 030c 	add.w	r3, r7, #12
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fb4c 	bl	80062b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c20:	e1d5      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c22:	2300      	movs	r3, #0
 8005c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c26:	e1d2      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c28:	4b17      	ldr	r3, [pc, #92]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b04      	cmp	r3, #4
 8005c32:	d109      	bne.n	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c34:	4b14      	ldr	r3, [pc, #80]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	08db      	lsrs	r3, r3, #3
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	4a13      	ldr	r2, [pc, #76]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005c40:	fa22 f303 	lsr.w	r3, r2, r3
 8005c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c46:	e1c2      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c4c:	e1bf      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c5a:	d102      	bne.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c60:	e1b5      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c62:	2300      	movs	r3, #0
 8005c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c66:	e1b2      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c68:	4b07      	ldr	r3, [pc, #28]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c74:	d102      	bne.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005c76:	4b07      	ldr	r3, [pc, #28]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c7a:	e1a8      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c80:	e1a5      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005c82:	2300      	movs	r3, #0
 8005c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c86:	e1a2      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c88:	58024400 	.word	0x58024400
 8005c8c:	03d09000 	.word	0x03d09000
 8005c90:	003d0900 	.word	0x003d0900
 8005c94:	007a1200 	.word	0x007a1200
 8005c98:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005c9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ca0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	d173      	bne.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005ca8:	4b9c      	ldr	r3, [pc, #624]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005cb0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cb8:	d02f      	beq.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cc0:	d863      	bhi.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cce:	d012      	beq.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005cd0:	e05b      	b.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005cd2:	4b92      	ldr	r3, [pc, #584]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cde:	d107      	bne.n	8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ce0:	f107 0318 	add.w	r3, r7, #24
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 f991 	bl	800600c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cee:	e16e      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cf4:	e16b      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005cf6:	4b89      	ldr	r3, [pc, #548]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d02:	d107      	bne.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d04:	f107 030c 	add.w	r3, r7, #12
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 fad3 	bl	80062b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d12:	e15c      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d14:	2300      	movs	r3, #0
 8005d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d18:	e159      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d1a:	4b80      	ldr	r3, [pc, #512]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d22:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d24:	4b7d      	ldr	r3, [pc, #500]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b04      	cmp	r3, #4
 8005d2e:	d10c      	bne.n	8005d4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d109      	bne.n	8005d4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d36:	4b79      	ldr	r3, [pc, #484]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	08db      	lsrs	r3, r3, #3
 8005d3c:	f003 0303 	and.w	r3, r3, #3
 8005d40:	4a77      	ldr	r2, [pc, #476]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005d42:	fa22 f303 	lsr.w	r3, r2, r3
 8005d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d48:	e01e      	b.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d4a:	4b74      	ldr	r3, [pc, #464]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d56:	d106      	bne.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d5e:	d102      	bne.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005d60:	4b70      	ldr	r3, [pc, #448]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d64:	e010      	b.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d66:	4b6d      	ldr	r3, [pc, #436]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d72:	d106      	bne.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d7a:	d102      	bne.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005d7c:	4b6a      	ldr	r3, [pc, #424]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d80:	e002      	b.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005d82:	2300      	movs	r3, #0
 8005d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005d86:	e122      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005d88:	e121      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d8e:	e11e      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d94:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	d133      	bne.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005d9c:	4b5f      	ldr	r3, [pc, #380]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005da0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005da4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d004      	beq.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005db2:	d012      	beq.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005db4:	e023      	b.n	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005db6:	4b59      	ldr	r3, [pc, #356]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005dc2:	d107      	bne.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005dc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 fbc7 	bl	800655c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dd2:	e0fc      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dd8:	e0f9      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005dda:	4b50      	ldr	r3, [pc, #320]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005de2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005de6:	d107      	bne.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005de8:	f107 0318 	add.w	r3, r7, #24
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 f90d 	bl	800600c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005df6:	e0ea      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dfc:	e0e7      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e02:	e0e4      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005e04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e08:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005e0c:	430b      	orrs	r3, r1
 8005e0e:	f040 808d 	bne.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005e12:	4b42      	ldr	r3, [pc, #264]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e16:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005e1a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e22:	d06b      	beq.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e2a:	d874      	bhi.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e32:	d056      	beq.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e3a:	d86c      	bhi.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e42:	d03b      	beq.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e4a:	d864      	bhi.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e52:	d021      	beq.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e5a:	d85c      	bhi.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d004      	beq.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e68:	d004      	beq.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005e6a:	e054      	b.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005e6c:	f000 f8b8 	bl	8005fe0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005e70:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e72:	e0ac      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e74:	4b29      	ldr	r3, [pc, #164]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e80:	d107      	bne.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e82:	f107 0318 	add.w	r3, r7, #24
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 f8c0 	bl	800600c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e90:	e09d      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e92:	2300      	movs	r3, #0
 8005e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e96:	e09a      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e98:	4b20      	ldr	r3, [pc, #128]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ea0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ea4:	d107      	bne.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ea6:	f107 030c 	add.w	r3, r7, #12
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 fa02 	bl	80062b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005eb4:	e08b      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eba:	e088      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ebc:	4b17      	ldr	r3, [pc, #92]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d109      	bne.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ec8:	4b14      	ldr	r3, [pc, #80]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	08db      	lsrs	r3, r3, #3
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	4a13      	ldr	r2, [pc, #76]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005eda:	e078      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005edc:	2300      	movs	r3, #0
 8005ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ee0:	e075      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eee:	d102      	bne.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ef4:	e06b      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005efa:	e068      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005efc:	4b07      	ldr	r3, [pc, #28]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f08:	d102      	bne.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8005f0a:	4b07      	ldr	r3, [pc, #28]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f0e:	e05e      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f10:	2300      	movs	r3, #0
 8005f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f14:	e05b      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005f16:	2300      	movs	r3, #0
 8005f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f1a:	e058      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f1c:	58024400 	.word	0x58024400
 8005f20:	03d09000 	.word	0x03d09000
 8005f24:	003d0900 	.word	0x003d0900
 8005f28:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f30:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005f34:	430b      	orrs	r3, r1
 8005f36:	d148      	bne.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005f38:	4b27      	ldr	r3, [pc, #156]	@ (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f40:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f48:	d02a      	beq.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f50:	d838      	bhi.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d004      	beq.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f5e:	d00d      	beq.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005f60:	e030      	b.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f62:	4b1d      	ldr	r3, [pc, #116]	@ (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f6e:	d102      	bne.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005f70:	4b1a      	ldr	r3, [pc, #104]	@ (8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f74:	e02b      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f7a:	e028      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f7c:	4b16      	ldr	r3, [pc, #88]	@ (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f88:	d107      	bne.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 fae4 	bl	800655c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f98:	e019      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f9e:	e016      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fac:	d107      	bne.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fae:	f107 0318 	add.w	r3, r7, #24
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 f82a 	bl	800600c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fbc:	e007      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fc2:	e004      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fc8:	e001      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8005fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3740      	adds	r7, #64	@ 0x40
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	58024400 	.word	0x58024400
 8005fdc:	007a1200 	.word	0x007a1200

08005fe0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005fe4:	f7fe f816 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	4b06      	ldr	r3, [pc, #24]	@ (8006004 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	091b      	lsrs	r3, r3, #4
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	4904      	ldr	r1, [pc, #16]	@ (8006008 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005ff6:	5ccb      	ldrb	r3, [r1, r3]
 8005ff8:	f003 031f 	and.w	r3, r3, #31
 8005ffc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006000:	4618      	mov	r0, r3
 8006002:	bd80      	pop	{r7, pc}
 8006004:	58024400 	.word	0x58024400
 8006008:	08008300 	.word	0x08008300

0800600c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800600c:	b480      	push	{r7}
 800600e:	b089      	sub	sp, #36	@ 0x24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006014:	4ba1      	ldr	r3, [pc, #644]	@ (800629c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006018:	f003 0303 	and.w	r3, r3, #3
 800601c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800601e:	4b9f      	ldr	r3, [pc, #636]	@ (800629c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006022:	0b1b      	lsrs	r3, r3, #12
 8006024:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006028:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800602a:	4b9c      	ldr	r3, [pc, #624]	@ (800629c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800602c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602e:	091b      	lsrs	r3, r3, #4
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006036:	4b99      	ldr	r3, [pc, #612]	@ (800629c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800603a:	08db      	lsrs	r3, r3, #3
 800603c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	fb02 f303 	mul.w	r3, r2, r3
 8006046:	ee07 3a90 	vmov	s15, r3
 800604a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 8111 	beq.w	800627c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	2b02      	cmp	r3, #2
 800605e:	f000 8083 	beq.w	8006168 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	2b02      	cmp	r3, #2
 8006066:	f200 80a1 	bhi.w	80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d056      	beq.n	8006124 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006076:	e099      	b.n	80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006078:	4b88      	ldr	r3, [pc, #544]	@ (800629c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0320 	and.w	r3, r3, #32
 8006080:	2b00      	cmp	r3, #0
 8006082:	d02d      	beq.n	80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006084:	4b85      	ldr	r3, [pc, #532]	@ (800629c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	08db      	lsrs	r3, r3, #3
 800608a:	f003 0303 	and.w	r3, r3, #3
 800608e:	4a84      	ldr	r2, [pc, #528]	@ (80062a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006090:	fa22 f303 	lsr.w	r3, r2, r3
 8006094:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	ee07 3a90 	vmov	s15, r3
 800609c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ae:	4b7b      	ldr	r3, [pc, #492]	@ (800629c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b6:	ee07 3a90 	vmov	s15, r3
 80060ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060be:	ed97 6a03 	vldr	s12, [r7, #12]
 80060c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80060de:	e087      	b.n	80061f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80062a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80060ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060f2:	4b6a      	ldr	r3, [pc, #424]	@ (800629c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060fa:	ee07 3a90 	vmov	s15, r3
 80060fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006102:	ed97 6a03 	vldr	s12, [r7, #12]
 8006106:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800610a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800610e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006112:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800611a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800611e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006122:	e065      	b.n	80061f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	ee07 3a90 	vmov	s15, r3
 800612a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800612e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80062ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006136:	4b59      	ldr	r3, [pc, #356]	@ (800629c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800613a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800613e:	ee07 3a90 	vmov	s15, r3
 8006142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006146:	ed97 6a03 	vldr	s12, [r7, #12]
 800614a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800614e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006156:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800615a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800615e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006166:	e043      	b.n	80061f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	ee07 3a90 	vmov	s15, r3
 800616e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006172:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80062b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800617a:	4b48      	ldr	r3, [pc, #288]	@ (800629c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800617c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800617e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006182:	ee07 3a90 	vmov	s15, r3
 8006186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800618a:	ed97 6a03 	vldr	s12, [r7, #12]
 800618e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800619a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800619e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061aa:	e021      	b.n	80061f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	ee07 3a90 	vmov	s15, r3
 80061b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80062ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80061ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061be:	4b37      	ldr	r3, [pc, #220]	@ (800629c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c6:	ee07 3a90 	vmov	s15, r3
 80061ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80061d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80061f0:	4b2a      	ldr	r3, [pc, #168]	@ (800629c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f4:	0a5b      	lsrs	r3, r3, #9
 80061f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061fa:	ee07 3a90 	vmov	s15, r3
 80061fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006202:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006206:	ee37 7a87 	vadd.f32	s14, s15, s14
 800620a:	edd7 6a07 	vldr	s13, [r7, #28]
 800620e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006216:	ee17 2a90 	vmov	r2, s15
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800621e:	4b1f      	ldr	r3, [pc, #124]	@ (800629c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006222:	0c1b      	lsrs	r3, r3, #16
 8006224:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006228:	ee07 3a90 	vmov	s15, r3
 800622c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006230:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006234:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006238:	edd7 6a07 	vldr	s13, [r7, #28]
 800623c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006244:	ee17 2a90 	vmov	r2, s15
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800624c:	4b13      	ldr	r3, [pc, #76]	@ (800629c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800624e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006250:	0e1b      	lsrs	r3, r3, #24
 8006252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006256:	ee07 3a90 	vmov	s15, r3
 800625a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006262:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006266:	edd7 6a07 	vldr	s13, [r7, #28]
 800626a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800626e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006272:	ee17 2a90 	vmov	r2, s15
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800627a:	e008      	b.n	800628e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	609a      	str	r2, [r3, #8]
}
 800628e:	bf00      	nop
 8006290:	3724      	adds	r7, #36	@ 0x24
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	58024400 	.word	0x58024400
 80062a0:	03d09000 	.word	0x03d09000
 80062a4:	46000000 	.word	0x46000000
 80062a8:	4c742400 	.word	0x4c742400
 80062ac:	4a742400 	.word	0x4a742400
 80062b0:	4af42400 	.word	0x4af42400

080062b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b089      	sub	sp, #36	@ 0x24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062bc:	4ba1      	ldr	r3, [pc, #644]	@ (8006544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c0:	f003 0303 	and.w	r3, r3, #3
 80062c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80062c6:	4b9f      	ldr	r3, [pc, #636]	@ (8006544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ca:	0d1b      	lsrs	r3, r3, #20
 80062cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80062d2:	4b9c      	ldr	r3, [pc, #624]	@ (8006544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d6:	0a1b      	lsrs	r3, r3, #8
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80062de:	4b99      	ldr	r3, [pc, #612]	@ (8006544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e2:	08db      	lsrs	r3, r3, #3
 80062e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	fb02 f303 	mul.w	r3, r2, r3
 80062ee:	ee07 3a90 	vmov	s15, r3
 80062f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 8111 	beq.w	8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	2b02      	cmp	r3, #2
 8006306:	f000 8083 	beq.w	8006410 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	2b02      	cmp	r3, #2
 800630e:	f200 80a1 	bhi.w	8006454 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d056      	beq.n	80063cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800631e:	e099      	b.n	8006454 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006320:	4b88      	ldr	r3, [pc, #544]	@ (8006544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b00      	cmp	r3, #0
 800632a:	d02d      	beq.n	8006388 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800632c:	4b85      	ldr	r3, [pc, #532]	@ (8006544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	08db      	lsrs	r3, r3, #3
 8006332:	f003 0303 	and.w	r3, r3, #3
 8006336:	4a84      	ldr	r2, [pc, #528]	@ (8006548 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006338:	fa22 f303 	lsr.w	r3, r2, r3
 800633c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	ee07 3a90 	vmov	s15, r3
 8006344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	ee07 3a90 	vmov	s15, r3
 800634e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006356:	4b7b      	ldr	r3, [pc, #492]	@ (8006544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800635e:	ee07 3a90 	vmov	s15, r3
 8006362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006366:	ed97 6a03 	vldr	s12, [r7, #12]
 800636a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800654c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800636e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800637a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800637e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006382:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006386:	e087      	b.n	8006498 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	ee07 3a90 	vmov	s15, r3
 800638e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006392:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006550 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800639a:	4b6a      	ldr	r3, [pc, #424]	@ (8006544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800639c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063a2:	ee07 3a90 	vmov	s15, r3
 80063a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800654c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063ca:	e065      	b.n	8006498 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	ee07 3a90 	vmov	s15, r3
 80063d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006554 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80063da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063de:	4b59      	ldr	r3, [pc, #356]	@ (8006544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e6:	ee07 3a90 	vmov	s15, r3
 80063ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80063f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800654c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800640a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800640e:	e043      	b.n	8006498 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	ee07 3a90 	vmov	s15, r3
 8006416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800641a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006558 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800641e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006422:	4b48      	ldr	r3, [pc, #288]	@ (8006544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800642a:	ee07 3a90 	vmov	s15, r3
 800642e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006432:	ed97 6a03 	vldr	s12, [r7, #12]
 8006436:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800654c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800643a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800643e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800644a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800644e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006452:	e021      	b.n	8006498 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	ee07 3a90 	vmov	s15, r3
 800645a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800645e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006554 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006466:	4b37      	ldr	r3, [pc, #220]	@ (8006544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800646e:	ee07 3a90 	vmov	s15, r3
 8006472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006476:	ed97 6a03 	vldr	s12, [r7, #12]
 800647a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800654c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800647e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800648a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800648e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006492:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006496:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006498:	4b2a      	ldr	r3, [pc, #168]	@ (8006544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800649a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649c:	0a5b      	lsrs	r3, r3, #9
 800649e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064a2:	ee07 3a90 	vmov	s15, r3
 80064a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80064b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064be:	ee17 2a90 	vmov	r2, s15
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80064c6:	4b1f      	ldr	r3, [pc, #124]	@ (8006544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ca:	0c1b      	lsrs	r3, r3, #16
 80064cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064d0:	ee07 3a90 	vmov	s15, r3
 80064d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80064e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ec:	ee17 2a90 	vmov	r2, s15
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80064f4:	4b13      	ldr	r3, [pc, #76]	@ (8006544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f8:	0e1b      	lsrs	r3, r3, #24
 80064fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064fe:	ee07 3a90 	vmov	s15, r3
 8006502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006506:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800650a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800650e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800651a:	ee17 2a90 	vmov	r2, s15
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006522:	e008      	b.n	8006536 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	609a      	str	r2, [r3, #8]
}
 8006536:	bf00      	nop
 8006538:	3724      	adds	r7, #36	@ 0x24
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	58024400 	.word	0x58024400
 8006548:	03d09000 	.word	0x03d09000
 800654c:	46000000 	.word	0x46000000
 8006550:	4c742400 	.word	0x4c742400
 8006554:	4a742400 	.word	0x4a742400
 8006558:	4af42400 	.word	0x4af42400

0800655c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800655c:	b480      	push	{r7}
 800655e:	b089      	sub	sp, #36	@ 0x24
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006564:	4ba0      	ldr	r3, [pc, #640]	@ (80067e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006568:	f003 0303 	and.w	r3, r3, #3
 800656c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800656e:	4b9e      	ldr	r3, [pc, #632]	@ (80067e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006572:	091b      	lsrs	r3, r3, #4
 8006574:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006578:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800657a:	4b9b      	ldr	r3, [pc, #620]	@ (80067e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800657c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006584:	4b98      	ldr	r3, [pc, #608]	@ (80067e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006588:	08db      	lsrs	r3, r3, #3
 800658a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	fb02 f303 	mul.w	r3, r2, r3
 8006594:	ee07 3a90 	vmov	s15, r3
 8006598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 8111 	beq.w	80067ca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	f000 8083 	beq.w	80066b6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	f200 80a1 	bhi.w	80066fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d056      	beq.n	8006672 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80065c4:	e099      	b.n	80066fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065c6:	4b88      	ldr	r3, [pc, #544]	@ (80067e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0320 	and.w	r3, r3, #32
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d02d      	beq.n	800662e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065d2:	4b85      	ldr	r3, [pc, #532]	@ (80067e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	08db      	lsrs	r3, r3, #3
 80065d8:	f003 0303 	and.w	r3, r3, #3
 80065dc:	4a83      	ldr	r2, [pc, #524]	@ (80067ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80065de:	fa22 f303 	lsr.w	r3, r2, r3
 80065e2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	ee07 3a90 	vmov	s15, r3
 80065ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	ee07 3a90 	vmov	s15, r3
 80065f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065fc:	4b7a      	ldr	r3, [pc, #488]	@ (80067e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006604:	ee07 3a90 	vmov	s15, r3
 8006608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800660c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006610:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006614:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006618:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800661c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006620:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006628:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800662c:	e087      	b.n	800673e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	ee07 3a90 	vmov	s15, r3
 8006634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006638:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80067f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800663c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006640:	4b69      	ldr	r3, [pc, #420]	@ (80067e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006648:	ee07 3a90 	vmov	s15, r3
 800664c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006650:	ed97 6a03 	vldr	s12, [r7, #12]
 8006654:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006658:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800665c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006660:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006664:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800666c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006670:	e065      	b.n	800673e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	ee07 3a90 	vmov	s15, r3
 8006678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800667c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80067f8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006680:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006684:	4b58      	ldr	r3, [pc, #352]	@ (80067e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800668c:	ee07 3a90 	vmov	s15, r3
 8006690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006694:	ed97 6a03 	vldr	s12, [r7, #12]
 8006698:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800669c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066b4:	e043      	b.n	800673e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	ee07 3a90 	vmov	s15, r3
 80066bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066c0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80067fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80066c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066c8:	4b47      	ldr	r3, [pc, #284]	@ (80067e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d0:	ee07 3a90 	vmov	s15, r3
 80066d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80066dc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066f8:	e021      	b.n	800673e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	ee07 3a90 	vmov	s15, r3
 8006700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006704:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80067f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800670c:	4b36      	ldr	r3, [pc, #216]	@ (80067e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800670e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006714:	ee07 3a90 	vmov	s15, r3
 8006718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800671c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006720:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006724:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006728:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800672c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006730:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006738:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800673c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800673e:	4b2a      	ldr	r3, [pc, #168]	@ (80067e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006742:	0a5b      	lsrs	r3, r3, #9
 8006744:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006748:	ee07 3a90 	vmov	s15, r3
 800674c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006750:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006754:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006758:	edd7 6a07 	vldr	s13, [r7, #28]
 800675c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006764:	ee17 2a90 	vmov	r2, s15
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800676c:	4b1e      	ldr	r3, [pc, #120]	@ (80067e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800676e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006770:	0c1b      	lsrs	r3, r3, #16
 8006772:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006782:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006786:	edd7 6a07 	vldr	s13, [r7, #28]
 800678a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800678e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006792:	ee17 2a90 	vmov	r2, s15
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800679a:	4b13      	ldr	r3, [pc, #76]	@ (80067e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800679c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800679e:	0e1b      	lsrs	r3, r3, #24
 80067a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067a4:	ee07 3a90 	vmov	s15, r3
 80067a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80067b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067c0:	ee17 2a90 	vmov	r2, s15
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80067c8:	e008      	b.n	80067dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	609a      	str	r2, [r3, #8]
}
 80067dc:	bf00      	nop
 80067de:	3724      	adds	r7, #36	@ 0x24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	58024400 	.word	0x58024400
 80067ec:	03d09000 	.word	0x03d09000
 80067f0:	46000000 	.word	0x46000000
 80067f4:	4c742400 	.word	0x4c742400
 80067f8:	4a742400 	.word	0x4a742400
 80067fc:	4af42400 	.word	0x4af42400

08006800 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800680e:	4b53      	ldr	r3, [pc, #332]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006812:	f003 0303 	and.w	r3, r3, #3
 8006816:	2b03      	cmp	r3, #3
 8006818:	d101      	bne.n	800681e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e099      	b.n	8006952 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800681e:	4b4f      	ldr	r3, [pc, #316]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a4e      	ldr	r2, [pc, #312]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006824:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800682a:	f7fa fd77 	bl	800131c <HAL_GetTick>
 800682e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006830:	e008      	b.n	8006844 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006832:	f7fa fd73 	bl	800131c <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b02      	cmp	r3, #2
 800683e:	d901      	bls.n	8006844 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e086      	b.n	8006952 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006844:	4b45      	ldr	r3, [pc, #276]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1f0      	bne.n	8006832 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006850:	4b42      	ldr	r3, [pc, #264]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006854:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	031b      	lsls	r3, r3, #12
 800685e:	493f      	ldr	r1, [pc, #252]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006860:	4313      	orrs	r3, r2
 8006862:	628b      	str	r3, [r1, #40]	@ 0x28
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	3b01      	subs	r3, #1
 800686a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	3b01      	subs	r3, #1
 8006874:	025b      	lsls	r3, r3, #9
 8006876:	b29b      	uxth	r3, r3
 8006878:	431a      	orrs	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	3b01      	subs	r3, #1
 8006880:	041b      	lsls	r3, r3, #16
 8006882:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	3b01      	subs	r3, #1
 800688e:	061b      	lsls	r3, r3, #24
 8006890:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006894:	4931      	ldr	r1, [pc, #196]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006896:	4313      	orrs	r3, r2
 8006898:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800689a:	4b30      	ldr	r3, [pc, #192]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 800689c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800689e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	492d      	ldr	r1, [pc, #180]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80068ac:	4b2b      	ldr	r3, [pc, #172]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b0:	f023 0220 	bic.w	r2, r3, #32
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	4928      	ldr	r1, [pc, #160]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80068be:	4b27      	ldr	r3, [pc, #156]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c2:	4a26      	ldr	r2, [pc, #152]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068c4:	f023 0310 	bic.w	r3, r3, #16
 80068c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80068ca:	4b24      	ldr	r3, [pc, #144]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068ce:	4b24      	ldr	r3, [pc, #144]	@ (8006960 <RCCEx_PLL2_Config+0x160>)
 80068d0:	4013      	ands	r3, r2
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	69d2      	ldr	r2, [r2, #28]
 80068d6:	00d2      	lsls	r2, r2, #3
 80068d8:	4920      	ldr	r1, [pc, #128]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80068de:	4b1f      	ldr	r3, [pc, #124]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e2:	4a1e      	ldr	r2, [pc, #120]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068e4:	f043 0310 	orr.w	r3, r3, #16
 80068e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d106      	bne.n	80068fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80068f0:	4b1a      	ldr	r3, [pc, #104]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f4:	4a19      	ldr	r2, [pc, #100]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 80068f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80068fc:	e00f      	b.n	800691e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d106      	bne.n	8006912 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006904:	4b15      	ldr	r3, [pc, #84]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006908:	4a14      	ldr	r2, [pc, #80]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 800690a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800690e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006910:	e005      	b.n	800691e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006912:	4b12      	ldr	r3, [pc, #72]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006916:	4a11      	ldr	r2, [pc, #68]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006918:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800691c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800691e:	4b0f      	ldr	r3, [pc, #60]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a0e      	ldr	r2, [pc, #56]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006924:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006928:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800692a:	f7fa fcf7 	bl	800131c <HAL_GetTick>
 800692e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006930:	e008      	b.n	8006944 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006932:	f7fa fcf3 	bl	800131c <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d901      	bls.n	8006944 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e006      	b.n	8006952 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006944:	4b05      	ldr	r3, [pc, #20]	@ (800695c <RCCEx_PLL2_Config+0x15c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d0f0      	beq.n	8006932 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006950:	7bfb      	ldrb	r3, [r7, #15]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	58024400 	.word	0x58024400
 8006960:	ffff0007 	.word	0xffff0007

08006964 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800696e:	2300      	movs	r3, #0
 8006970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006972:	4b53      	ldr	r3, [pc, #332]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006976:	f003 0303 	and.w	r3, r3, #3
 800697a:	2b03      	cmp	r3, #3
 800697c:	d101      	bne.n	8006982 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e099      	b.n	8006ab6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006982:	4b4f      	ldr	r3, [pc, #316]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a4e      	ldr	r2, [pc, #312]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006988:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800698c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800698e:	f7fa fcc5 	bl	800131c <HAL_GetTick>
 8006992:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006994:	e008      	b.n	80069a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006996:	f7fa fcc1 	bl	800131c <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d901      	bls.n	80069a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e086      	b.n	8006ab6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069a8:	4b45      	ldr	r3, [pc, #276]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1f0      	bne.n	8006996 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80069b4:	4b42      	ldr	r3, [pc, #264]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 80069b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	051b      	lsls	r3, r3, #20
 80069c2:	493f      	ldr	r1, [pc, #252]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	025b      	lsls	r3, r3, #9
 80069da:	b29b      	uxth	r3, r3
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	3b01      	subs	r3, #1
 80069e4:	041b      	lsls	r3, r3, #16
 80069e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80069ea:	431a      	orrs	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	3b01      	subs	r3, #1
 80069f2:	061b      	lsls	r3, r3, #24
 80069f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80069f8:	4931      	ldr	r1, [pc, #196]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80069fe:	4b30      	ldr	r3, [pc, #192]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a02:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	492d      	ldr	r1, [pc, #180]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006a10:	4b2b      	ldr	r3, [pc, #172]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a14:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	4928      	ldr	r1, [pc, #160]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006a22:	4b27      	ldr	r3, [pc, #156]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a26:	4a26      	ldr	r2, [pc, #152]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006a2e:	4b24      	ldr	r3, [pc, #144]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a32:	4b24      	ldr	r3, [pc, #144]	@ (8006ac4 <RCCEx_PLL3_Config+0x160>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	69d2      	ldr	r2, [r2, #28]
 8006a3a:	00d2      	lsls	r2, r2, #3
 8006a3c:	4920      	ldr	r1, [pc, #128]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006a42:	4b1f      	ldr	r3, [pc, #124]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a46:	4a1e      	ldr	r2, [pc, #120]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d106      	bne.n	8006a62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006a54:	4b1a      	ldr	r3, [pc, #104]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a58:	4a19      	ldr	r2, [pc, #100]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a60:	e00f      	b.n	8006a82 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d106      	bne.n	8006a76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006a68:	4b15      	ldr	r3, [pc, #84]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6c:	4a14      	ldr	r2, [pc, #80]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a6e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006a72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a74:	e005      	b.n	8006a82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006a76:	4b12      	ldr	r3, [pc, #72]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7a:	4a11      	ldr	r2, [pc, #68]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a80:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006a82:	4b0f      	ldr	r3, [pc, #60]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a0e      	ldr	r2, [pc, #56]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a8e:	f7fa fc45 	bl	800131c <HAL_GetTick>
 8006a92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a94:	e008      	b.n	8006aa8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a96:	f7fa fc41 	bl	800131c <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d901      	bls.n	8006aa8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e006      	b.n	8006ab6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006aa8:	4b05      	ldr	r3, [pc, #20]	@ (8006ac0 <RCCEx_PLL3_Config+0x15c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0f0      	beq.n	8006a96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	58024400 	.word	0x58024400
 8006ac4:	ffff0007 	.word	0xffff0007

08006ac8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e042      	b.n	8006b60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d106      	bne.n	8006af2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7fa fa45 	bl	8000f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2224      	movs	r2, #36	@ 0x24
 8006af6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0201 	bic.w	r2, r2, #1
 8006b08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d002      	beq.n	8006b18 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fd90 	bl	8007638 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f825 	bl	8006b68 <UART_SetConfig>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d101      	bne.n	8006b28 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e01b      	b.n	8006b60 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685a      	ldr	r2, [r3, #4]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689a      	ldr	r2, [r3, #8]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0201 	orr.w	r2, r2, #1
 8006b56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fe0f 	bl	800777c <UART_CheckIdleState>
 8006b5e:	4603      	mov	r3, r0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3708      	adds	r7, #8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b6c:	b092      	sub	sp, #72	@ 0x48
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	431a      	orrs	r2, r3
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	431a      	orrs	r2, r3
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	69db      	ldr	r3, [r3, #28]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	4bbe      	ldr	r3, [pc, #760]	@ (8006e90 <UART_SetConfig+0x328>)
 8006b98:	4013      	ands	r3, r2
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	6812      	ldr	r2, [r2, #0]
 8006b9e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ba0:	430b      	orrs	r3, r1
 8006ba2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	68da      	ldr	r2, [r3, #12]
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4ab3      	ldr	r2, [pc, #716]	@ (8006e94 <UART_SetConfig+0x32c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d004      	beq.n	8006bd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	689a      	ldr	r2, [r3, #8]
 8006bda:	4baf      	ldr	r3, [pc, #700]	@ (8006e98 <UART_SetConfig+0x330>)
 8006bdc:	4013      	ands	r3, r2
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	6812      	ldr	r2, [r2, #0]
 8006be2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006be4:	430b      	orrs	r3, r1
 8006be6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bee:	f023 010f 	bic.w	r1, r3, #15
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4aa6      	ldr	r2, [pc, #664]	@ (8006e9c <UART_SetConfig+0x334>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d177      	bne.n	8006cf8 <UART_SetConfig+0x190>
 8006c08:	4ba5      	ldr	r3, [pc, #660]	@ (8006ea0 <UART_SetConfig+0x338>)
 8006c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c10:	2b28      	cmp	r3, #40	@ 0x28
 8006c12:	d86d      	bhi.n	8006cf0 <UART_SetConfig+0x188>
 8006c14:	a201      	add	r2, pc, #4	@ (adr r2, 8006c1c <UART_SetConfig+0xb4>)
 8006c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1a:	bf00      	nop
 8006c1c:	08006cc1 	.word	0x08006cc1
 8006c20:	08006cf1 	.word	0x08006cf1
 8006c24:	08006cf1 	.word	0x08006cf1
 8006c28:	08006cf1 	.word	0x08006cf1
 8006c2c:	08006cf1 	.word	0x08006cf1
 8006c30:	08006cf1 	.word	0x08006cf1
 8006c34:	08006cf1 	.word	0x08006cf1
 8006c38:	08006cf1 	.word	0x08006cf1
 8006c3c:	08006cc9 	.word	0x08006cc9
 8006c40:	08006cf1 	.word	0x08006cf1
 8006c44:	08006cf1 	.word	0x08006cf1
 8006c48:	08006cf1 	.word	0x08006cf1
 8006c4c:	08006cf1 	.word	0x08006cf1
 8006c50:	08006cf1 	.word	0x08006cf1
 8006c54:	08006cf1 	.word	0x08006cf1
 8006c58:	08006cf1 	.word	0x08006cf1
 8006c5c:	08006cd1 	.word	0x08006cd1
 8006c60:	08006cf1 	.word	0x08006cf1
 8006c64:	08006cf1 	.word	0x08006cf1
 8006c68:	08006cf1 	.word	0x08006cf1
 8006c6c:	08006cf1 	.word	0x08006cf1
 8006c70:	08006cf1 	.word	0x08006cf1
 8006c74:	08006cf1 	.word	0x08006cf1
 8006c78:	08006cf1 	.word	0x08006cf1
 8006c7c:	08006cd9 	.word	0x08006cd9
 8006c80:	08006cf1 	.word	0x08006cf1
 8006c84:	08006cf1 	.word	0x08006cf1
 8006c88:	08006cf1 	.word	0x08006cf1
 8006c8c:	08006cf1 	.word	0x08006cf1
 8006c90:	08006cf1 	.word	0x08006cf1
 8006c94:	08006cf1 	.word	0x08006cf1
 8006c98:	08006cf1 	.word	0x08006cf1
 8006c9c:	08006ce1 	.word	0x08006ce1
 8006ca0:	08006cf1 	.word	0x08006cf1
 8006ca4:	08006cf1 	.word	0x08006cf1
 8006ca8:	08006cf1 	.word	0x08006cf1
 8006cac:	08006cf1 	.word	0x08006cf1
 8006cb0:	08006cf1 	.word	0x08006cf1
 8006cb4:	08006cf1 	.word	0x08006cf1
 8006cb8:	08006cf1 	.word	0x08006cf1
 8006cbc:	08006ce9 	.word	0x08006ce9
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cc6:	e222      	b.n	800710e <UART_SetConfig+0x5a6>
 8006cc8:	2304      	movs	r3, #4
 8006cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cce:	e21e      	b.n	800710e <UART_SetConfig+0x5a6>
 8006cd0:	2308      	movs	r3, #8
 8006cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cd6:	e21a      	b.n	800710e <UART_SetConfig+0x5a6>
 8006cd8:	2310      	movs	r3, #16
 8006cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cde:	e216      	b.n	800710e <UART_SetConfig+0x5a6>
 8006ce0:	2320      	movs	r3, #32
 8006ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ce6:	e212      	b.n	800710e <UART_SetConfig+0x5a6>
 8006ce8:	2340      	movs	r3, #64	@ 0x40
 8006cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cee:	e20e      	b.n	800710e <UART_SetConfig+0x5a6>
 8006cf0:	2380      	movs	r3, #128	@ 0x80
 8006cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cf6:	e20a      	b.n	800710e <UART_SetConfig+0x5a6>
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a69      	ldr	r2, [pc, #420]	@ (8006ea4 <UART_SetConfig+0x33c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d130      	bne.n	8006d64 <UART_SetConfig+0x1fc>
 8006d02:	4b67      	ldr	r3, [pc, #412]	@ (8006ea0 <UART_SetConfig+0x338>)
 8006d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	2b05      	cmp	r3, #5
 8006d0c:	d826      	bhi.n	8006d5c <UART_SetConfig+0x1f4>
 8006d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d14 <UART_SetConfig+0x1ac>)
 8006d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d14:	08006d2d 	.word	0x08006d2d
 8006d18:	08006d35 	.word	0x08006d35
 8006d1c:	08006d3d 	.word	0x08006d3d
 8006d20:	08006d45 	.word	0x08006d45
 8006d24:	08006d4d 	.word	0x08006d4d
 8006d28:	08006d55 	.word	0x08006d55
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d32:	e1ec      	b.n	800710e <UART_SetConfig+0x5a6>
 8006d34:	2304      	movs	r3, #4
 8006d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d3a:	e1e8      	b.n	800710e <UART_SetConfig+0x5a6>
 8006d3c:	2308      	movs	r3, #8
 8006d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d42:	e1e4      	b.n	800710e <UART_SetConfig+0x5a6>
 8006d44:	2310      	movs	r3, #16
 8006d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d4a:	e1e0      	b.n	800710e <UART_SetConfig+0x5a6>
 8006d4c:	2320      	movs	r3, #32
 8006d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d52:	e1dc      	b.n	800710e <UART_SetConfig+0x5a6>
 8006d54:	2340      	movs	r3, #64	@ 0x40
 8006d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d5a:	e1d8      	b.n	800710e <UART_SetConfig+0x5a6>
 8006d5c:	2380      	movs	r3, #128	@ 0x80
 8006d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d62:	e1d4      	b.n	800710e <UART_SetConfig+0x5a6>
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a4f      	ldr	r2, [pc, #316]	@ (8006ea8 <UART_SetConfig+0x340>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d130      	bne.n	8006dd0 <UART_SetConfig+0x268>
 8006d6e:	4b4c      	ldr	r3, [pc, #304]	@ (8006ea0 <UART_SetConfig+0x338>)
 8006d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d72:	f003 0307 	and.w	r3, r3, #7
 8006d76:	2b05      	cmp	r3, #5
 8006d78:	d826      	bhi.n	8006dc8 <UART_SetConfig+0x260>
 8006d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d80 <UART_SetConfig+0x218>)
 8006d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d80:	08006d99 	.word	0x08006d99
 8006d84:	08006da1 	.word	0x08006da1
 8006d88:	08006da9 	.word	0x08006da9
 8006d8c:	08006db1 	.word	0x08006db1
 8006d90:	08006db9 	.word	0x08006db9
 8006d94:	08006dc1 	.word	0x08006dc1
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d9e:	e1b6      	b.n	800710e <UART_SetConfig+0x5a6>
 8006da0:	2304      	movs	r3, #4
 8006da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006da6:	e1b2      	b.n	800710e <UART_SetConfig+0x5a6>
 8006da8:	2308      	movs	r3, #8
 8006daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dae:	e1ae      	b.n	800710e <UART_SetConfig+0x5a6>
 8006db0:	2310      	movs	r3, #16
 8006db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006db6:	e1aa      	b.n	800710e <UART_SetConfig+0x5a6>
 8006db8:	2320      	movs	r3, #32
 8006dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dbe:	e1a6      	b.n	800710e <UART_SetConfig+0x5a6>
 8006dc0:	2340      	movs	r3, #64	@ 0x40
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dc6:	e1a2      	b.n	800710e <UART_SetConfig+0x5a6>
 8006dc8:	2380      	movs	r3, #128	@ 0x80
 8006dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dce:	e19e      	b.n	800710e <UART_SetConfig+0x5a6>
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a35      	ldr	r2, [pc, #212]	@ (8006eac <UART_SetConfig+0x344>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d130      	bne.n	8006e3c <UART_SetConfig+0x2d4>
 8006dda:	4b31      	ldr	r3, [pc, #196]	@ (8006ea0 <UART_SetConfig+0x338>)
 8006ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	2b05      	cmp	r3, #5
 8006de4:	d826      	bhi.n	8006e34 <UART_SetConfig+0x2cc>
 8006de6:	a201      	add	r2, pc, #4	@ (adr r2, 8006dec <UART_SetConfig+0x284>)
 8006de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dec:	08006e05 	.word	0x08006e05
 8006df0:	08006e0d 	.word	0x08006e0d
 8006df4:	08006e15 	.word	0x08006e15
 8006df8:	08006e1d 	.word	0x08006e1d
 8006dfc:	08006e25 	.word	0x08006e25
 8006e00:	08006e2d 	.word	0x08006e2d
 8006e04:	2300      	movs	r3, #0
 8006e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e0a:	e180      	b.n	800710e <UART_SetConfig+0x5a6>
 8006e0c:	2304      	movs	r3, #4
 8006e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e12:	e17c      	b.n	800710e <UART_SetConfig+0x5a6>
 8006e14:	2308      	movs	r3, #8
 8006e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e1a:	e178      	b.n	800710e <UART_SetConfig+0x5a6>
 8006e1c:	2310      	movs	r3, #16
 8006e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e22:	e174      	b.n	800710e <UART_SetConfig+0x5a6>
 8006e24:	2320      	movs	r3, #32
 8006e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e2a:	e170      	b.n	800710e <UART_SetConfig+0x5a6>
 8006e2c:	2340      	movs	r3, #64	@ 0x40
 8006e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e32:	e16c      	b.n	800710e <UART_SetConfig+0x5a6>
 8006e34:	2380      	movs	r3, #128	@ 0x80
 8006e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e3a:	e168      	b.n	800710e <UART_SetConfig+0x5a6>
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a1b      	ldr	r2, [pc, #108]	@ (8006eb0 <UART_SetConfig+0x348>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d142      	bne.n	8006ecc <UART_SetConfig+0x364>
 8006e46:	4b16      	ldr	r3, [pc, #88]	@ (8006ea0 <UART_SetConfig+0x338>)
 8006e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e4a:	f003 0307 	and.w	r3, r3, #7
 8006e4e:	2b05      	cmp	r3, #5
 8006e50:	d838      	bhi.n	8006ec4 <UART_SetConfig+0x35c>
 8006e52:	a201      	add	r2, pc, #4	@ (adr r2, 8006e58 <UART_SetConfig+0x2f0>)
 8006e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e58:	08006e71 	.word	0x08006e71
 8006e5c:	08006e79 	.word	0x08006e79
 8006e60:	08006e81 	.word	0x08006e81
 8006e64:	08006e89 	.word	0x08006e89
 8006e68:	08006eb5 	.word	0x08006eb5
 8006e6c:	08006ebd 	.word	0x08006ebd
 8006e70:	2300      	movs	r3, #0
 8006e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e76:	e14a      	b.n	800710e <UART_SetConfig+0x5a6>
 8006e78:	2304      	movs	r3, #4
 8006e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e7e:	e146      	b.n	800710e <UART_SetConfig+0x5a6>
 8006e80:	2308      	movs	r3, #8
 8006e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e86:	e142      	b.n	800710e <UART_SetConfig+0x5a6>
 8006e88:	2310      	movs	r3, #16
 8006e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e8e:	e13e      	b.n	800710e <UART_SetConfig+0x5a6>
 8006e90:	cfff69f3 	.word	0xcfff69f3
 8006e94:	58000c00 	.word	0x58000c00
 8006e98:	11fff4ff 	.word	0x11fff4ff
 8006e9c:	40011000 	.word	0x40011000
 8006ea0:	58024400 	.word	0x58024400
 8006ea4:	40004400 	.word	0x40004400
 8006ea8:	40004800 	.word	0x40004800
 8006eac:	40004c00 	.word	0x40004c00
 8006eb0:	40005000 	.word	0x40005000
 8006eb4:	2320      	movs	r3, #32
 8006eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eba:	e128      	b.n	800710e <UART_SetConfig+0x5a6>
 8006ebc:	2340      	movs	r3, #64	@ 0x40
 8006ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ec2:	e124      	b.n	800710e <UART_SetConfig+0x5a6>
 8006ec4:	2380      	movs	r3, #128	@ 0x80
 8006ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eca:	e120      	b.n	800710e <UART_SetConfig+0x5a6>
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4acb      	ldr	r2, [pc, #812]	@ (8007200 <UART_SetConfig+0x698>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d176      	bne.n	8006fc4 <UART_SetConfig+0x45c>
 8006ed6:	4bcb      	ldr	r3, [pc, #812]	@ (8007204 <UART_SetConfig+0x69c>)
 8006ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ede:	2b28      	cmp	r3, #40	@ 0x28
 8006ee0:	d86c      	bhi.n	8006fbc <UART_SetConfig+0x454>
 8006ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ee8 <UART_SetConfig+0x380>)
 8006ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee8:	08006f8d 	.word	0x08006f8d
 8006eec:	08006fbd 	.word	0x08006fbd
 8006ef0:	08006fbd 	.word	0x08006fbd
 8006ef4:	08006fbd 	.word	0x08006fbd
 8006ef8:	08006fbd 	.word	0x08006fbd
 8006efc:	08006fbd 	.word	0x08006fbd
 8006f00:	08006fbd 	.word	0x08006fbd
 8006f04:	08006fbd 	.word	0x08006fbd
 8006f08:	08006f95 	.word	0x08006f95
 8006f0c:	08006fbd 	.word	0x08006fbd
 8006f10:	08006fbd 	.word	0x08006fbd
 8006f14:	08006fbd 	.word	0x08006fbd
 8006f18:	08006fbd 	.word	0x08006fbd
 8006f1c:	08006fbd 	.word	0x08006fbd
 8006f20:	08006fbd 	.word	0x08006fbd
 8006f24:	08006fbd 	.word	0x08006fbd
 8006f28:	08006f9d 	.word	0x08006f9d
 8006f2c:	08006fbd 	.word	0x08006fbd
 8006f30:	08006fbd 	.word	0x08006fbd
 8006f34:	08006fbd 	.word	0x08006fbd
 8006f38:	08006fbd 	.word	0x08006fbd
 8006f3c:	08006fbd 	.word	0x08006fbd
 8006f40:	08006fbd 	.word	0x08006fbd
 8006f44:	08006fbd 	.word	0x08006fbd
 8006f48:	08006fa5 	.word	0x08006fa5
 8006f4c:	08006fbd 	.word	0x08006fbd
 8006f50:	08006fbd 	.word	0x08006fbd
 8006f54:	08006fbd 	.word	0x08006fbd
 8006f58:	08006fbd 	.word	0x08006fbd
 8006f5c:	08006fbd 	.word	0x08006fbd
 8006f60:	08006fbd 	.word	0x08006fbd
 8006f64:	08006fbd 	.word	0x08006fbd
 8006f68:	08006fad 	.word	0x08006fad
 8006f6c:	08006fbd 	.word	0x08006fbd
 8006f70:	08006fbd 	.word	0x08006fbd
 8006f74:	08006fbd 	.word	0x08006fbd
 8006f78:	08006fbd 	.word	0x08006fbd
 8006f7c:	08006fbd 	.word	0x08006fbd
 8006f80:	08006fbd 	.word	0x08006fbd
 8006f84:	08006fbd 	.word	0x08006fbd
 8006f88:	08006fb5 	.word	0x08006fb5
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f92:	e0bc      	b.n	800710e <UART_SetConfig+0x5a6>
 8006f94:	2304      	movs	r3, #4
 8006f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f9a:	e0b8      	b.n	800710e <UART_SetConfig+0x5a6>
 8006f9c:	2308      	movs	r3, #8
 8006f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fa2:	e0b4      	b.n	800710e <UART_SetConfig+0x5a6>
 8006fa4:	2310      	movs	r3, #16
 8006fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006faa:	e0b0      	b.n	800710e <UART_SetConfig+0x5a6>
 8006fac:	2320      	movs	r3, #32
 8006fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fb2:	e0ac      	b.n	800710e <UART_SetConfig+0x5a6>
 8006fb4:	2340      	movs	r3, #64	@ 0x40
 8006fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fba:	e0a8      	b.n	800710e <UART_SetConfig+0x5a6>
 8006fbc:	2380      	movs	r3, #128	@ 0x80
 8006fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fc2:	e0a4      	b.n	800710e <UART_SetConfig+0x5a6>
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a8f      	ldr	r2, [pc, #572]	@ (8007208 <UART_SetConfig+0x6a0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d130      	bne.n	8007030 <UART_SetConfig+0x4c8>
 8006fce:	4b8d      	ldr	r3, [pc, #564]	@ (8007204 <UART_SetConfig+0x69c>)
 8006fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	2b05      	cmp	r3, #5
 8006fd8:	d826      	bhi.n	8007028 <UART_SetConfig+0x4c0>
 8006fda:	a201      	add	r2, pc, #4	@ (adr r2, 8006fe0 <UART_SetConfig+0x478>)
 8006fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe0:	08006ff9 	.word	0x08006ff9
 8006fe4:	08007001 	.word	0x08007001
 8006fe8:	08007009 	.word	0x08007009
 8006fec:	08007011 	.word	0x08007011
 8006ff0:	08007019 	.word	0x08007019
 8006ff4:	08007021 	.word	0x08007021
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ffe:	e086      	b.n	800710e <UART_SetConfig+0x5a6>
 8007000:	2304      	movs	r3, #4
 8007002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007006:	e082      	b.n	800710e <UART_SetConfig+0x5a6>
 8007008:	2308      	movs	r3, #8
 800700a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800700e:	e07e      	b.n	800710e <UART_SetConfig+0x5a6>
 8007010:	2310      	movs	r3, #16
 8007012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007016:	e07a      	b.n	800710e <UART_SetConfig+0x5a6>
 8007018:	2320      	movs	r3, #32
 800701a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800701e:	e076      	b.n	800710e <UART_SetConfig+0x5a6>
 8007020:	2340      	movs	r3, #64	@ 0x40
 8007022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007026:	e072      	b.n	800710e <UART_SetConfig+0x5a6>
 8007028:	2380      	movs	r3, #128	@ 0x80
 800702a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800702e:	e06e      	b.n	800710e <UART_SetConfig+0x5a6>
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a75      	ldr	r2, [pc, #468]	@ (800720c <UART_SetConfig+0x6a4>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d130      	bne.n	800709c <UART_SetConfig+0x534>
 800703a:	4b72      	ldr	r3, [pc, #456]	@ (8007204 <UART_SetConfig+0x69c>)
 800703c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800703e:	f003 0307 	and.w	r3, r3, #7
 8007042:	2b05      	cmp	r3, #5
 8007044:	d826      	bhi.n	8007094 <UART_SetConfig+0x52c>
 8007046:	a201      	add	r2, pc, #4	@ (adr r2, 800704c <UART_SetConfig+0x4e4>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	08007065 	.word	0x08007065
 8007050:	0800706d 	.word	0x0800706d
 8007054:	08007075 	.word	0x08007075
 8007058:	0800707d 	.word	0x0800707d
 800705c:	08007085 	.word	0x08007085
 8007060:	0800708d 	.word	0x0800708d
 8007064:	2300      	movs	r3, #0
 8007066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800706a:	e050      	b.n	800710e <UART_SetConfig+0x5a6>
 800706c:	2304      	movs	r3, #4
 800706e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007072:	e04c      	b.n	800710e <UART_SetConfig+0x5a6>
 8007074:	2308      	movs	r3, #8
 8007076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800707a:	e048      	b.n	800710e <UART_SetConfig+0x5a6>
 800707c:	2310      	movs	r3, #16
 800707e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007082:	e044      	b.n	800710e <UART_SetConfig+0x5a6>
 8007084:	2320      	movs	r3, #32
 8007086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800708a:	e040      	b.n	800710e <UART_SetConfig+0x5a6>
 800708c:	2340      	movs	r3, #64	@ 0x40
 800708e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007092:	e03c      	b.n	800710e <UART_SetConfig+0x5a6>
 8007094:	2380      	movs	r3, #128	@ 0x80
 8007096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800709a:	e038      	b.n	800710e <UART_SetConfig+0x5a6>
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a5b      	ldr	r2, [pc, #364]	@ (8007210 <UART_SetConfig+0x6a8>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d130      	bne.n	8007108 <UART_SetConfig+0x5a0>
 80070a6:	4b57      	ldr	r3, [pc, #348]	@ (8007204 <UART_SetConfig+0x69c>)
 80070a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070aa:	f003 0307 	and.w	r3, r3, #7
 80070ae:	2b05      	cmp	r3, #5
 80070b0:	d826      	bhi.n	8007100 <UART_SetConfig+0x598>
 80070b2:	a201      	add	r2, pc, #4	@ (adr r2, 80070b8 <UART_SetConfig+0x550>)
 80070b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b8:	080070d1 	.word	0x080070d1
 80070bc:	080070d9 	.word	0x080070d9
 80070c0:	080070e1 	.word	0x080070e1
 80070c4:	080070e9 	.word	0x080070e9
 80070c8:	080070f1 	.word	0x080070f1
 80070cc:	080070f9 	.word	0x080070f9
 80070d0:	2302      	movs	r3, #2
 80070d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070d6:	e01a      	b.n	800710e <UART_SetConfig+0x5a6>
 80070d8:	2304      	movs	r3, #4
 80070da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070de:	e016      	b.n	800710e <UART_SetConfig+0x5a6>
 80070e0:	2308      	movs	r3, #8
 80070e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070e6:	e012      	b.n	800710e <UART_SetConfig+0x5a6>
 80070e8:	2310      	movs	r3, #16
 80070ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ee:	e00e      	b.n	800710e <UART_SetConfig+0x5a6>
 80070f0:	2320      	movs	r3, #32
 80070f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070f6:	e00a      	b.n	800710e <UART_SetConfig+0x5a6>
 80070f8:	2340      	movs	r3, #64	@ 0x40
 80070fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070fe:	e006      	b.n	800710e <UART_SetConfig+0x5a6>
 8007100:	2380      	movs	r3, #128	@ 0x80
 8007102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007106:	e002      	b.n	800710e <UART_SetConfig+0x5a6>
 8007108:	2380      	movs	r3, #128	@ 0x80
 800710a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a3f      	ldr	r2, [pc, #252]	@ (8007210 <UART_SetConfig+0x6a8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	f040 80f8 	bne.w	800730a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800711a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800711e:	2b20      	cmp	r3, #32
 8007120:	dc46      	bgt.n	80071b0 <UART_SetConfig+0x648>
 8007122:	2b02      	cmp	r3, #2
 8007124:	f2c0 8082 	blt.w	800722c <UART_SetConfig+0x6c4>
 8007128:	3b02      	subs	r3, #2
 800712a:	2b1e      	cmp	r3, #30
 800712c:	d87e      	bhi.n	800722c <UART_SetConfig+0x6c4>
 800712e:	a201      	add	r2, pc, #4	@ (adr r2, 8007134 <UART_SetConfig+0x5cc>)
 8007130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007134:	080071b7 	.word	0x080071b7
 8007138:	0800722d 	.word	0x0800722d
 800713c:	080071bf 	.word	0x080071bf
 8007140:	0800722d 	.word	0x0800722d
 8007144:	0800722d 	.word	0x0800722d
 8007148:	0800722d 	.word	0x0800722d
 800714c:	080071cf 	.word	0x080071cf
 8007150:	0800722d 	.word	0x0800722d
 8007154:	0800722d 	.word	0x0800722d
 8007158:	0800722d 	.word	0x0800722d
 800715c:	0800722d 	.word	0x0800722d
 8007160:	0800722d 	.word	0x0800722d
 8007164:	0800722d 	.word	0x0800722d
 8007168:	0800722d 	.word	0x0800722d
 800716c:	080071df 	.word	0x080071df
 8007170:	0800722d 	.word	0x0800722d
 8007174:	0800722d 	.word	0x0800722d
 8007178:	0800722d 	.word	0x0800722d
 800717c:	0800722d 	.word	0x0800722d
 8007180:	0800722d 	.word	0x0800722d
 8007184:	0800722d 	.word	0x0800722d
 8007188:	0800722d 	.word	0x0800722d
 800718c:	0800722d 	.word	0x0800722d
 8007190:	0800722d 	.word	0x0800722d
 8007194:	0800722d 	.word	0x0800722d
 8007198:	0800722d 	.word	0x0800722d
 800719c:	0800722d 	.word	0x0800722d
 80071a0:	0800722d 	.word	0x0800722d
 80071a4:	0800722d 	.word	0x0800722d
 80071a8:	0800722d 	.word	0x0800722d
 80071ac:	0800721f 	.word	0x0800721f
 80071b0:	2b40      	cmp	r3, #64	@ 0x40
 80071b2:	d037      	beq.n	8007224 <UART_SetConfig+0x6bc>
 80071b4:	e03a      	b.n	800722c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80071b6:	f7fe ff13 	bl	8005fe0 <HAL_RCCEx_GetD3PCLK1Freq>
 80071ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80071bc:	e03c      	b.n	8007238 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fe ff22 	bl	800600c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80071c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071cc:	e034      	b.n	8007238 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071ce:	f107 0318 	add.w	r3, r7, #24
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff f86e 	bl	80062b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071dc:	e02c      	b.n	8007238 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071de:	4b09      	ldr	r3, [pc, #36]	@ (8007204 <UART_SetConfig+0x69c>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0320 	and.w	r3, r3, #32
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d016      	beq.n	8007218 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80071ea:	4b06      	ldr	r3, [pc, #24]	@ (8007204 <UART_SetConfig+0x69c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	08db      	lsrs	r3, r3, #3
 80071f0:	f003 0303 	and.w	r3, r3, #3
 80071f4:	4a07      	ldr	r2, [pc, #28]	@ (8007214 <UART_SetConfig+0x6ac>)
 80071f6:	fa22 f303 	lsr.w	r3, r2, r3
 80071fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071fc:	e01c      	b.n	8007238 <UART_SetConfig+0x6d0>
 80071fe:	bf00      	nop
 8007200:	40011400 	.word	0x40011400
 8007204:	58024400 	.word	0x58024400
 8007208:	40007800 	.word	0x40007800
 800720c:	40007c00 	.word	0x40007c00
 8007210:	58000c00 	.word	0x58000c00
 8007214:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007218:	4b9d      	ldr	r3, [pc, #628]	@ (8007490 <UART_SetConfig+0x928>)
 800721a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800721c:	e00c      	b.n	8007238 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800721e:	4b9d      	ldr	r3, [pc, #628]	@ (8007494 <UART_SetConfig+0x92c>)
 8007220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007222:	e009      	b.n	8007238 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007224:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800722a:	e005      	b.n	8007238 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007236:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 81de 	beq.w	80075fc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007244:	4a94      	ldr	r2, [pc, #592]	@ (8007498 <UART_SetConfig+0x930>)
 8007246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800724a:	461a      	mov	r2, r3
 800724c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800724e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007252:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	4613      	mov	r3, r2
 800725a:	005b      	lsls	r3, r3, #1
 800725c:	4413      	add	r3, r2
 800725e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007260:	429a      	cmp	r2, r3
 8007262:	d305      	bcc.n	8007270 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800726a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800726c:	429a      	cmp	r2, r3
 800726e:	d903      	bls.n	8007278 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007276:	e1c1      	b.n	80075fc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800727a:	2200      	movs	r2, #0
 800727c:	60bb      	str	r3, [r7, #8]
 800727e:	60fa      	str	r2, [r7, #12]
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007284:	4a84      	ldr	r2, [pc, #528]	@ (8007498 <UART_SetConfig+0x930>)
 8007286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800728a:	b29b      	uxth	r3, r3
 800728c:	2200      	movs	r2, #0
 800728e:	603b      	str	r3, [r7, #0]
 8007290:	607a      	str	r2, [r7, #4]
 8007292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007296:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800729a:	f7f9 f81d 	bl	80002d8 <__aeabi_uldivmod>
 800729e:	4602      	mov	r2, r0
 80072a0:	460b      	mov	r3, r1
 80072a2:	4610      	mov	r0, r2
 80072a4:	4619      	mov	r1, r3
 80072a6:	f04f 0200 	mov.w	r2, #0
 80072aa:	f04f 0300 	mov.w	r3, #0
 80072ae:	020b      	lsls	r3, r1, #8
 80072b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072b4:	0202      	lsls	r2, r0, #8
 80072b6:	6979      	ldr	r1, [r7, #20]
 80072b8:	6849      	ldr	r1, [r1, #4]
 80072ba:	0849      	lsrs	r1, r1, #1
 80072bc:	2000      	movs	r0, #0
 80072be:	460c      	mov	r4, r1
 80072c0:	4605      	mov	r5, r0
 80072c2:	eb12 0804 	adds.w	r8, r2, r4
 80072c6:	eb43 0905 	adc.w	r9, r3, r5
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	469a      	mov	sl, r3
 80072d2:	4693      	mov	fp, r2
 80072d4:	4652      	mov	r2, sl
 80072d6:	465b      	mov	r3, fp
 80072d8:	4640      	mov	r0, r8
 80072da:	4649      	mov	r1, r9
 80072dc:	f7f8 fffc 	bl	80002d8 <__aeabi_uldivmod>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4613      	mov	r3, r2
 80072e6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072ee:	d308      	bcc.n	8007302 <UART_SetConfig+0x79a>
 80072f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072f6:	d204      	bcs.n	8007302 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80072fe:	60da      	str	r2, [r3, #12]
 8007300:	e17c      	b.n	80075fc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007308:	e178      	b.n	80075fc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007312:	f040 80c5 	bne.w	80074a0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007316:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800731a:	2b20      	cmp	r3, #32
 800731c:	dc48      	bgt.n	80073b0 <UART_SetConfig+0x848>
 800731e:	2b00      	cmp	r3, #0
 8007320:	db7b      	blt.n	800741a <UART_SetConfig+0x8b2>
 8007322:	2b20      	cmp	r3, #32
 8007324:	d879      	bhi.n	800741a <UART_SetConfig+0x8b2>
 8007326:	a201      	add	r2, pc, #4	@ (adr r2, 800732c <UART_SetConfig+0x7c4>)
 8007328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732c:	080073b7 	.word	0x080073b7
 8007330:	080073bf 	.word	0x080073bf
 8007334:	0800741b 	.word	0x0800741b
 8007338:	0800741b 	.word	0x0800741b
 800733c:	080073c7 	.word	0x080073c7
 8007340:	0800741b 	.word	0x0800741b
 8007344:	0800741b 	.word	0x0800741b
 8007348:	0800741b 	.word	0x0800741b
 800734c:	080073d7 	.word	0x080073d7
 8007350:	0800741b 	.word	0x0800741b
 8007354:	0800741b 	.word	0x0800741b
 8007358:	0800741b 	.word	0x0800741b
 800735c:	0800741b 	.word	0x0800741b
 8007360:	0800741b 	.word	0x0800741b
 8007364:	0800741b 	.word	0x0800741b
 8007368:	0800741b 	.word	0x0800741b
 800736c:	080073e7 	.word	0x080073e7
 8007370:	0800741b 	.word	0x0800741b
 8007374:	0800741b 	.word	0x0800741b
 8007378:	0800741b 	.word	0x0800741b
 800737c:	0800741b 	.word	0x0800741b
 8007380:	0800741b 	.word	0x0800741b
 8007384:	0800741b 	.word	0x0800741b
 8007388:	0800741b 	.word	0x0800741b
 800738c:	0800741b 	.word	0x0800741b
 8007390:	0800741b 	.word	0x0800741b
 8007394:	0800741b 	.word	0x0800741b
 8007398:	0800741b 	.word	0x0800741b
 800739c:	0800741b 	.word	0x0800741b
 80073a0:	0800741b 	.word	0x0800741b
 80073a4:	0800741b 	.word	0x0800741b
 80073a8:	0800741b 	.word	0x0800741b
 80073ac:	0800740d 	.word	0x0800740d
 80073b0:	2b40      	cmp	r3, #64	@ 0x40
 80073b2:	d02e      	beq.n	8007412 <UART_SetConfig+0x8aa>
 80073b4:	e031      	b.n	800741a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073b6:	f7fc fe5d 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 80073ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80073bc:	e033      	b.n	8007426 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073be:	f7fc fe6f 	bl	80040a0 <HAL_RCC_GetPCLK2Freq>
 80073c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80073c4:	e02f      	b.n	8007426 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fe fe1e 	bl	800600c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80073d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073d4:	e027      	b.n	8007426 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073d6:	f107 0318 	add.w	r3, r7, #24
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fe ff6a 	bl	80062b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073e4:	e01f      	b.n	8007426 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073e6:	4b2d      	ldr	r3, [pc, #180]	@ (800749c <UART_SetConfig+0x934>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0320 	and.w	r3, r3, #32
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d009      	beq.n	8007406 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073f2:	4b2a      	ldr	r3, [pc, #168]	@ (800749c <UART_SetConfig+0x934>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	08db      	lsrs	r3, r3, #3
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	4a24      	ldr	r2, [pc, #144]	@ (8007490 <UART_SetConfig+0x928>)
 80073fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007404:	e00f      	b.n	8007426 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007406:	4b22      	ldr	r3, [pc, #136]	@ (8007490 <UART_SetConfig+0x928>)
 8007408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800740a:	e00c      	b.n	8007426 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800740c:	4b21      	ldr	r3, [pc, #132]	@ (8007494 <UART_SetConfig+0x92c>)
 800740e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007410:	e009      	b.n	8007426 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007418:	e005      	b.n	8007426 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007424:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 80e7 	beq.w	80075fc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007432:	4a19      	ldr	r2, [pc, #100]	@ (8007498 <UART_SetConfig+0x930>)
 8007434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007438:	461a      	mov	r2, r3
 800743a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800743c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007440:	005a      	lsls	r2, r3, #1
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	085b      	lsrs	r3, r3, #1
 8007448:	441a      	add	r2, r3
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007452:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007456:	2b0f      	cmp	r3, #15
 8007458:	d916      	bls.n	8007488 <UART_SetConfig+0x920>
 800745a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007460:	d212      	bcs.n	8007488 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007464:	b29b      	uxth	r3, r3
 8007466:	f023 030f 	bic.w	r3, r3, #15
 800746a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800746c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746e:	085b      	lsrs	r3, r3, #1
 8007470:	b29b      	uxth	r3, r3
 8007472:	f003 0307 	and.w	r3, r3, #7
 8007476:	b29a      	uxth	r2, r3
 8007478:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800747a:	4313      	orrs	r3, r2
 800747c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007484:	60da      	str	r2, [r3, #12]
 8007486:	e0b9      	b.n	80075fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800748e:	e0b5      	b.n	80075fc <UART_SetConfig+0xa94>
 8007490:	03d09000 	.word	0x03d09000
 8007494:	003d0900 	.word	0x003d0900
 8007498:	08008310 	.word	0x08008310
 800749c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80074a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80074a4:	2b20      	cmp	r3, #32
 80074a6:	dc49      	bgt.n	800753c <UART_SetConfig+0x9d4>
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	db7c      	blt.n	80075a6 <UART_SetConfig+0xa3e>
 80074ac:	2b20      	cmp	r3, #32
 80074ae:	d87a      	bhi.n	80075a6 <UART_SetConfig+0xa3e>
 80074b0:	a201      	add	r2, pc, #4	@ (adr r2, 80074b8 <UART_SetConfig+0x950>)
 80074b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b6:	bf00      	nop
 80074b8:	08007543 	.word	0x08007543
 80074bc:	0800754b 	.word	0x0800754b
 80074c0:	080075a7 	.word	0x080075a7
 80074c4:	080075a7 	.word	0x080075a7
 80074c8:	08007553 	.word	0x08007553
 80074cc:	080075a7 	.word	0x080075a7
 80074d0:	080075a7 	.word	0x080075a7
 80074d4:	080075a7 	.word	0x080075a7
 80074d8:	08007563 	.word	0x08007563
 80074dc:	080075a7 	.word	0x080075a7
 80074e0:	080075a7 	.word	0x080075a7
 80074e4:	080075a7 	.word	0x080075a7
 80074e8:	080075a7 	.word	0x080075a7
 80074ec:	080075a7 	.word	0x080075a7
 80074f0:	080075a7 	.word	0x080075a7
 80074f4:	080075a7 	.word	0x080075a7
 80074f8:	08007573 	.word	0x08007573
 80074fc:	080075a7 	.word	0x080075a7
 8007500:	080075a7 	.word	0x080075a7
 8007504:	080075a7 	.word	0x080075a7
 8007508:	080075a7 	.word	0x080075a7
 800750c:	080075a7 	.word	0x080075a7
 8007510:	080075a7 	.word	0x080075a7
 8007514:	080075a7 	.word	0x080075a7
 8007518:	080075a7 	.word	0x080075a7
 800751c:	080075a7 	.word	0x080075a7
 8007520:	080075a7 	.word	0x080075a7
 8007524:	080075a7 	.word	0x080075a7
 8007528:	080075a7 	.word	0x080075a7
 800752c:	080075a7 	.word	0x080075a7
 8007530:	080075a7 	.word	0x080075a7
 8007534:	080075a7 	.word	0x080075a7
 8007538:	08007599 	.word	0x08007599
 800753c:	2b40      	cmp	r3, #64	@ 0x40
 800753e:	d02e      	beq.n	800759e <UART_SetConfig+0xa36>
 8007540:	e031      	b.n	80075a6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007542:	f7fc fd97 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 8007546:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007548:	e033      	b.n	80075b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800754a:	f7fc fda9 	bl	80040a0 <HAL_RCC_GetPCLK2Freq>
 800754e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007550:	e02f      	b.n	80075b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007556:	4618      	mov	r0, r3
 8007558:	f7fe fd58 	bl	800600c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800755c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007560:	e027      	b.n	80075b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007562:	f107 0318 	add.w	r3, r7, #24
 8007566:	4618      	mov	r0, r3
 8007568:	f7fe fea4 	bl	80062b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007570:	e01f      	b.n	80075b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007572:	4b2d      	ldr	r3, [pc, #180]	@ (8007628 <UART_SetConfig+0xac0>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0320 	and.w	r3, r3, #32
 800757a:	2b00      	cmp	r3, #0
 800757c:	d009      	beq.n	8007592 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800757e:	4b2a      	ldr	r3, [pc, #168]	@ (8007628 <UART_SetConfig+0xac0>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	08db      	lsrs	r3, r3, #3
 8007584:	f003 0303 	and.w	r3, r3, #3
 8007588:	4a28      	ldr	r2, [pc, #160]	@ (800762c <UART_SetConfig+0xac4>)
 800758a:	fa22 f303 	lsr.w	r3, r2, r3
 800758e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007590:	e00f      	b.n	80075b2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007592:	4b26      	ldr	r3, [pc, #152]	@ (800762c <UART_SetConfig+0xac4>)
 8007594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007596:	e00c      	b.n	80075b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007598:	4b25      	ldr	r3, [pc, #148]	@ (8007630 <UART_SetConfig+0xac8>)
 800759a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800759c:	e009      	b.n	80075b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800759e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075a4:	e005      	b.n	80075b2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80075b0:	bf00      	nop
    }

    if (pclk != 0U)
 80075b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d021      	beq.n	80075fc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075bc:	4a1d      	ldr	r2, [pc, #116]	@ (8007634 <UART_SetConfig+0xacc>)
 80075be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075c2:	461a      	mov	r2, r3
 80075c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	085b      	lsrs	r3, r3, #1
 80075d0:	441a      	add	r2, r3
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075da:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075de:	2b0f      	cmp	r3, #15
 80075e0:	d909      	bls.n	80075f6 <UART_SetConfig+0xa8e>
 80075e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075e8:	d205      	bcs.n	80075f6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	60da      	str	r2, [r3, #12]
 80075f4:	e002      	b.n	80075fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	2201      	movs	r2, #1
 8007600:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	2201      	movs	r2, #1
 8007608:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	2200      	movs	r2, #0
 8007610:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2200      	movs	r2, #0
 8007616:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007618:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800761c:	4618      	mov	r0, r3
 800761e:	3748      	adds	r7, #72	@ 0x48
 8007620:	46bd      	mov	sp, r7
 8007622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007626:	bf00      	nop
 8007628:	58024400 	.word	0x58024400
 800762c:	03d09000 	.word	0x03d09000
 8007630:	003d0900 	.word	0x003d0900
 8007634:	08008310 	.word	0x08008310

08007638 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007644:	f003 0308 	and.w	r3, r3, #8
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00a      	beq.n	8007662 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	430a      	orrs	r2, r1
 8007660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00a      	beq.n	8007684 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	430a      	orrs	r2, r1
 8007682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00a      	beq.n	80076a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076aa:	f003 0304 	and.w	r3, r3, #4
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00a      	beq.n	80076c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	430a      	orrs	r2, r1
 80076c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076cc:	f003 0310 	and.w	r3, r3, #16
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00a      	beq.n	80076ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ee:	f003 0320 	and.w	r3, r3, #32
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	430a      	orrs	r2, r1
 800770a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007714:	2b00      	cmp	r3, #0
 8007716:	d01a      	beq.n	800774e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007732:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007736:	d10a      	bne.n	800774e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00a      	beq.n	8007770 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	430a      	orrs	r2, r1
 800776e:	605a      	str	r2, [r3, #4]
  }
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b098      	sub	sp, #96	@ 0x60
 8007780:	af02      	add	r7, sp, #8
 8007782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800778c:	f7f9 fdc6 	bl	800131c <HAL_GetTick>
 8007790:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0308 	and.w	r3, r3, #8
 800779c:	2b08      	cmp	r3, #8
 800779e:	d12f      	bne.n	8007800 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077a8:	2200      	movs	r2, #0
 80077aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f88e 	bl	80078d0 <UART_WaitOnFlagUntilTimeout>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d022      	beq.n	8007800 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c2:	e853 3f00 	ldrex	r3, [r3]
 80077c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	461a      	mov	r2, r3
 80077d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80077da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077e0:	e841 2300 	strex	r3, r2, [r1]
 80077e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1e6      	bne.n	80077ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2220      	movs	r2, #32
 80077f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e063      	b.n	80078c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0304 	and.w	r3, r3, #4
 800780a:	2b04      	cmp	r3, #4
 800780c:	d149      	bne.n	80078a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800780e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007816:	2200      	movs	r2, #0
 8007818:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f857 	bl	80078d0 <UART_WaitOnFlagUntilTimeout>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d03c      	beq.n	80078a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	623b      	str	r3, [r7, #32]
   return(result);
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800783c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	461a      	mov	r2, r3
 8007844:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007846:	633b      	str	r3, [r7, #48]	@ 0x30
 8007848:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800784c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800784e:	e841 2300 	strex	r3, r2, [r1]
 8007852:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1e6      	bne.n	8007828 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3308      	adds	r3, #8
 8007860:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	e853 3f00 	ldrex	r3, [r3]
 8007868:	60fb      	str	r3, [r7, #12]
   return(result);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f023 0301 	bic.w	r3, r3, #1
 8007870:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3308      	adds	r3, #8
 8007878:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800787a:	61fa      	str	r2, [r7, #28]
 800787c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787e:	69b9      	ldr	r1, [r7, #24]
 8007880:	69fa      	ldr	r2, [r7, #28]
 8007882:	e841 2300 	strex	r3, r2, [r1]
 8007886:	617b      	str	r3, [r7, #20]
   return(result);
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1e5      	bne.n	800785a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2220      	movs	r2, #32
 8007892:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e012      	b.n	80078c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2220      	movs	r2, #32
 80078a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2220      	movs	r2, #32
 80078ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3758      	adds	r7, #88	@ 0x58
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	603b      	str	r3, [r7, #0]
 80078dc:	4613      	mov	r3, r2
 80078de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078e0:	e04f      	b.n	8007982 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e8:	d04b      	beq.n	8007982 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ea:	f7f9 fd17 	bl	800131c <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	69ba      	ldr	r2, [r7, #24]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d302      	bcc.n	8007900 <UART_WaitOnFlagUntilTimeout+0x30>
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	e04e      	b.n	80079a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0304 	and.w	r3, r3, #4
 800790e:	2b00      	cmp	r3, #0
 8007910:	d037      	beq.n	8007982 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2b80      	cmp	r3, #128	@ 0x80
 8007916:	d034      	beq.n	8007982 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2b40      	cmp	r3, #64	@ 0x40
 800791c:	d031      	beq.n	8007982 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	69db      	ldr	r3, [r3, #28]
 8007924:	f003 0308 	and.w	r3, r3, #8
 8007928:	2b08      	cmp	r3, #8
 800792a:	d110      	bne.n	800794e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2208      	movs	r2, #8
 8007932:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 f839 	bl	80079ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2208      	movs	r2, #8
 800793e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e029      	b.n	80079a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	69db      	ldr	r3, [r3, #28]
 8007954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007958:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800795c:	d111      	bne.n	8007982 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007966:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f000 f81f 	bl	80079ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2220      	movs	r2, #32
 8007972:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e00f      	b.n	80079a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	69da      	ldr	r2, [r3, #28]
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	4013      	ands	r3, r2
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	429a      	cmp	r2, r3
 8007990:	bf0c      	ite	eq
 8007992:	2301      	moveq	r3, #1
 8007994:	2300      	movne	r3, #0
 8007996:	b2db      	uxtb	r3, r3
 8007998:	461a      	mov	r2, r3
 800799a:	79fb      	ldrb	r3, [r7, #7]
 800799c:	429a      	cmp	r2, r3
 800799e:	d0a0      	beq.n	80078e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b095      	sub	sp, #84	@ 0x54
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079bc:	e853 3f00 	ldrex	r3, [r3]
 80079c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80079d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079da:	e841 2300 	strex	r3, r2, [r1]
 80079de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1e6      	bne.n	80079b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3308      	adds	r3, #8
 80079ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	e853 3f00 	ldrex	r3, [r3]
 80079f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80079f6:	69fa      	ldr	r2, [r7, #28]
 80079f8:	4b1e      	ldr	r3, [pc, #120]	@ (8007a74 <UART_EndRxTransfer+0xc8>)
 80079fa:	4013      	ands	r3, r2
 80079fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3308      	adds	r3, #8
 8007a04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1e5      	bne.n	80079e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d118      	bne.n	8007a54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	e853 3f00 	ldrex	r3, [r3]
 8007a2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	f023 0310 	bic.w	r3, r3, #16
 8007a36:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a40:	61bb      	str	r3, [r7, #24]
 8007a42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a44:	6979      	ldr	r1, [r7, #20]
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	e841 2300 	strex	r3, r2, [r1]
 8007a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1e6      	bne.n	8007a22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2220      	movs	r2, #32
 8007a58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007a68:	bf00      	nop
 8007a6a:	3754      	adds	r7, #84	@ 0x54
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	effffffe 	.word	0xeffffffe

08007a78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d101      	bne.n	8007a8e <HAL_UARTEx_DisableFifoMode+0x16>
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	e027      	b.n	8007ade <HAL_UARTEx_DisableFifoMode+0x66>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2224      	movs	r2, #36	@ 0x24
 8007a9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 0201 	bic.w	r2, r2, #1
 8007ab4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007abc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2220      	movs	r2, #32
 8007ad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b084      	sub	sp, #16
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d101      	bne.n	8007b02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007afe:	2302      	movs	r3, #2
 8007b00:	e02d      	b.n	8007b5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2224      	movs	r2, #36	@ 0x24
 8007b0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0201 	bic.w	r2, r2, #1
 8007b28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	683a      	ldr	r2, [r7, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f850 	bl	8007be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b084      	sub	sp, #16
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d101      	bne.n	8007b7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	e02d      	b.n	8007bda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2224      	movs	r2, #36	@ 0x24
 8007b8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f022 0201 	bic.w	r2, r2, #1
 8007ba4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f812 	bl	8007be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
	...

08007be4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d108      	bne.n	8007c06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c04:	e031      	b.n	8007c6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c06:	2310      	movs	r3, #16
 8007c08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c0a:	2310      	movs	r3, #16
 8007c0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	0e5b      	lsrs	r3, r3, #25
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	f003 0307 	and.w	r3, r3, #7
 8007c1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	0f5b      	lsrs	r3, r3, #29
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	f003 0307 	and.w	r3, r3, #7
 8007c2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	7b3a      	ldrb	r2, [r7, #12]
 8007c32:	4911      	ldr	r1, [pc, #68]	@ (8007c78 <UARTEx_SetNbDataToProcess+0x94>)
 8007c34:	5c8a      	ldrb	r2, [r1, r2]
 8007c36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c3a:	7b3a      	ldrb	r2, [r7, #12]
 8007c3c:	490f      	ldr	r1, [pc, #60]	@ (8007c7c <UARTEx_SetNbDataToProcess+0x98>)
 8007c3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c40:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
 8007c4e:	7b7a      	ldrb	r2, [r7, #13]
 8007c50:	4909      	ldr	r1, [pc, #36]	@ (8007c78 <UARTEx_SetNbDataToProcess+0x94>)
 8007c52:	5c8a      	ldrb	r2, [r1, r2]
 8007c54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c58:	7b7a      	ldrb	r2, [r7, #13]
 8007c5a:	4908      	ldr	r1, [pc, #32]	@ (8007c7c <UARTEx_SetNbDataToProcess+0x98>)
 8007c5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007c6a:	bf00      	nop
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	08008328 	.word	0x08008328
 8007c7c:	08008330 	.word	0x08008330

08007c80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c80:	b084      	sub	sp, #16
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b084      	sub	sp, #16
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	f107 001c 	add.w	r0, r7, #28
 8007c8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c92:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d121      	bne.n	8007cde <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	68da      	ldr	r2, [r3, #12]
 8007caa:	4b2c      	ldr	r3, [pc, #176]	@ (8007d5c <USB_CoreInit+0xdc>)
 8007cac:	4013      	ands	r3, r2
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007cbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d105      	bne.n	8007cd2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 faaa 	bl	800822c <USB_CoreReset>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	73fb      	strb	r3, [r7, #15]
 8007cdc:	e01b      	b.n	8007d16 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fa9e 	bl	800822c <USB_CoreReset>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007cf4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d106      	bne.n	8007d0a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	639a      	str	r2, [r3, #56]	@ 0x38
 8007d08:	e005      	b.n	8007d16 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007d16:	7fbb      	ldrb	r3, [r7, #30]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d116      	bne.n	8007d4a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d60 <USB_CoreInit+0xe0>)
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f043 0206 	orr.w	r2, r3, #6
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f043 0220 	orr.w	r2, r3, #32
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d56:	b004      	add	sp, #16
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	ffbdffbf 	.word	0xffbdffbf
 8007d60:	03ee0000 	.word	0x03ee0000

08007d64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f023 0201 	bic.w	r2, r3, #1
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b084      	sub	sp, #16
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	460b      	mov	r3, r1
 8007d90:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d92:	2300      	movs	r3, #0
 8007d94:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007da2:	78fb      	ldrb	r3, [r7, #3]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d115      	bne.n	8007dd4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007db4:	200a      	movs	r0, #10
 8007db6:	f7f9 fabd 	bl	8001334 <HAL_Delay>
      ms += 10U;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	330a      	adds	r3, #10
 8007dbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fa25 	bl	8008210 <USB_GetMode>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d01e      	beq.n	8007e0a <USB_SetCurrentMode+0x84>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2bc7      	cmp	r3, #199	@ 0xc7
 8007dd0:	d9f0      	bls.n	8007db4 <USB_SetCurrentMode+0x2e>
 8007dd2:	e01a      	b.n	8007e0a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007dd4:	78fb      	ldrb	r3, [r7, #3]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d115      	bne.n	8007e06 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007de6:	200a      	movs	r0, #10
 8007de8:	f7f9 faa4 	bl	8001334 <HAL_Delay>
      ms += 10U;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	330a      	adds	r3, #10
 8007df0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fa0c 	bl	8008210 <USB_GetMode>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d005      	beq.n	8007e0a <USB_SetCurrentMode+0x84>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2bc7      	cmp	r3, #199	@ 0xc7
 8007e02:	d9f0      	bls.n	8007de6 <USB_SetCurrentMode+0x60>
 8007e04:	e001      	b.n	8007e0a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e005      	b.n	8007e16 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2bc8      	cmp	r3, #200	@ 0xc8
 8007e0e:	d101      	bne.n	8007e14 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e000      	b.n	8007e16 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e20:	b084      	sub	sp, #16
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b086      	sub	sp, #24
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007e2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	613b      	str	r3, [r7, #16]
 8007e3e:	e009      	b.n	8007e54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	3340      	adds	r3, #64	@ 0x40
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4413      	add	r3, r2
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	3301      	adds	r3, #1
 8007e52:	613b      	str	r3, [r7, #16]
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	2b0e      	cmp	r3, #14
 8007e58:	d9f2      	bls.n	8007e40 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d11c      	bne.n	8007e9c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e70:	f043 0302 	orr.w	r3, r3, #2
 8007e74:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e7a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	601a      	str	r2, [r3, #0]
 8007e9a:	e005      	b.n	8007ea8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ea0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007eae:	461a      	mov	r2, r3
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007eb4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d10d      	bne.n	8007ed8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d104      	bne.n	8007ece <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f968 	bl	800819c <USB_SetDevSpeed>
 8007ecc:	e008      	b.n	8007ee0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ece:	2101      	movs	r1, #1
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f963 	bl	800819c <USB_SetDevSpeed>
 8007ed6:	e003      	b.n	8007ee0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ed8:	2103      	movs	r1, #3
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f95e 	bl	800819c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ee0:	2110      	movs	r1, #16
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f8fa 	bl	80080dc <USB_FlushTxFifo>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f924 	bl	8008140 <USB_FlushRxFifo>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f08:	461a      	mov	r2, r3
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f14:	461a      	mov	r2, r3
 8007f16:	2300      	movs	r3, #0
 8007f18:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f20:	461a      	mov	r2, r3
 8007f22:	2300      	movs	r3, #0
 8007f24:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f26:	2300      	movs	r3, #0
 8007f28:	613b      	str	r3, [r7, #16]
 8007f2a:	e043      	b.n	8007fb4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f42:	d118      	bne.n	8007f76 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10a      	bne.n	8007f60 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f56:	461a      	mov	r2, r3
 8007f58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007f5c:	6013      	str	r3, [r2, #0]
 8007f5e:	e013      	b.n	8007f88 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007f72:	6013      	str	r3, [r2, #0]
 8007f74:	e008      	b.n	8007f88 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	015a      	lsls	r2, r3, #5
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f82:	461a      	mov	r2, r3
 8007f84:	2300      	movs	r3, #0
 8007f86:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f94:	461a      	mov	r2, r3
 8007f96:	2300      	movs	r3, #0
 8007f98:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	015a      	lsls	r2, r3, #5
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007fac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	613b      	str	r3, [r7, #16]
 8007fb4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007fb8:	461a      	mov	r2, r3
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d3b5      	bcc.n	8007f2c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	613b      	str	r3, [r7, #16]
 8007fc4:	e043      	b.n	800804e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	015a      	lsls	r2, r3, #5
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4413      	add	r3, r2
 8007fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fdc:	d118      	bne.n	8008010 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10a      	bne.n	8007ffa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	015a      	lsls	r2, r3, #5
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	4413      	add	r3, r2
 8007fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	e013      	b.n	8008022 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	015a      	lsls	r2, r3, #5
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	4413      	add	r3, r2
 8008002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008006:	461a      	mov	r2, r3
 8008008:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800800c:	6013      	str	r3, [r2, #0]
 800800e:	e008      	b.n	8008022 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	015a      	lsls	r2, r3, #5
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4413      	add	r3, r2
 8008018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800801c:	461a      	mov	r2, r3
 800801e:	2300      	movs	r3, #0
 8008020:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	4413      	add	r3, r2
 800802a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800802e:	461a      	mov	r2, r3
 8008030:	2300      	movs	r3, #0
 8008032:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	015a      	lsls	r2, r3, #5
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	4413      	add	r3, r2
 800803c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008040:	461a      	mov	r2, r3
 8008042:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008046:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	3301      	adds	r3, #1
 800804c:	613b      	str	r3, [r7, #16]
 800804e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008052:	461a      	mov	r2, r3
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	4293      	cmp	r3, r2
 8008058:	d3b5      	bcc.n	8007fc6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008068:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800806c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800807a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800807c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008080:	2b00      	cmp	r3, #0
 8008082:	d105      	bne.n	8008090 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	f043 0210 	orr.w	r2, r3, #16
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	699a      	ldr	r2, [r3, #24]
 8008094:	4b0f      	ldr	r3, [pc, #60]	@ (80080d4 <USB_DevInit+0x2b4>)
 8008096:	4313      	orrs	r3, r2
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800809c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d005      	beq.n	80080b0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	f043 0208 	orr.w	r2, r3, #8
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80080b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d105      	bne.n	80080c4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	699a      	ldr	r2, [r3, #24]
 80080bc:	4b06      	ldr	r3, [pc, #24]	@ (80080d8 <USB_DevInit+0x2b8>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080d0:	b004      	add	sp, #16
 80080d2:	4770      	bx	lr
 80080d4:	803c3800 	.word	0x803c3800
 80080d8:	40000004 	.word	0x40000004

080080dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080e6:	2300      	movs	r3, #0
 80080e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3301      	adds	r3, #1
 80080ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080f6:	d901      	bls.n	80080fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e01b      	b.n	8008134 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	2b00      	cmp	r3, #0
 8008102:	daf2      	bge.n	80080ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	019b      	lsls	r3, r3, #6
 800810c:	f043 0220 	orr.w	r2, r3, #32
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	3301      	adds	r3, #1
 8008118:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008120:	d901      	bls.n	8008126 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e006      	b.n	8008134 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f003 0320 	and.w	r3, r3, #32
 800812e:	2b20      	cmp	r3, #32
 8008130:	d0f0      	beq.n	8008114 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008148:	2300      	movs	r3, #0
 800814a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	3301      	adds	r3, #1
 8008150:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008158:	d901      	bls.n	800815e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e018      	b.n	8008190 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	daf2      	bge.n	800814c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008166:	2300      	movs	r3, #0
 8008168:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2210      	movs	r2, #16
 800816e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	3301      	adds	r3, #1
 8008174:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800817c:	d901      	bls.n	8008182 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e006      	b.n	8008190 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	f003 0310 	and.w	r3, r3, #16
 800818a:	2b10      	cmp	r3, #16
 800818c:	d0f0      	beq.n	8008170 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	68f9      	ldr	r1, [r7, #12]
 80081b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081bc:	4313      	orrs	r3, r2
 80081be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b085      	sub	sp, #20
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80081e8:	f023 0303 	bic.w	r3, r3, #3
 80081ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081fc:	f043 0302 	orr.w	r3, r3, #2
 8008200:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	f003 0301 	and.w	r3, r3, #1
}
 8008220:	4618      	mov	r0, r3
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008234:	2300      	movs	r3, #0
 8008236:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	3301      	adds	r3, #1
 800823c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008244:	d901      	bls.n	800824a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e01b      	b.n	8008282 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	2b00      	cmp	r3, #0
 8008250:	daf2      	bge.n	8008238 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008252:	2300      	movs	r3, #0
 8008254:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	f043 0201 	orr.w	r2, r3, #1
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	3301      	adds	r3, #1
 8008266:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800826e:	d901      	bls.n	8008274 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e006      	b.n	8008282 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	f003 0301 	and.w	r3, r3, #1
 800827c:	2b01      	cmp	r3, #1
 800827e:	d0f0      	beq.n	8008262 <USB_CoreReset+0x36>

  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <memset>:
 800828e:	4402      	add	r2, r0
 8008290:	4603      	mov	r3, r0
 8008292:	4293      	cmp	r3, r2
 8008294:	d100      	bne.n	8008298 <memset+0xa>
 8008296:	4770      	bx	lr
 8008298:	f803 1b01 	strb.w	r1, [r3], #1
 800829c:	e7f9      	b.n	8008292 <memset+0x4>
	...

080082a0 <__libc_init_array>:
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	4d0d      	ldr	r5, [pc, #52]	@ (80082d8 <__libc_init_array+0x38>)
 80082a4:	4c0d      	ldr	r4, [pc, #52]	@ (80082dc <__libc_init_array+0x3c>)
 80082a6:	1b64      	subs	r4, r4, r5
 80082a8:	10a4      	asrs	r4, r4, #2
 80082aa:	2600      	movs	r6, #0
 80082ac:	42a6      	cmp	r6, r4
 80082ae:	d109      	bne.n	80082c4 <__libc_init_array+0x24>
 80082b0:	4d0b      	ldr	r5, [pc, #44]	@ (80082e0 <__libc_init_array+0x40>)
 80082b2:	4c0c      	ldr	r4, [pc, #48]	@ (80082e4 <__libc_init_array+0x44>)
 80082b4:	f000 f818 	bl	80082e8 <_init>
 80082b8:	1b64      	subs	r4, r4, r5
 80082ba:	10a4      	asrs	r4, r4, #2
 80082bc:	2600      	movs	r6, #0
 80082be:	42a6      	cmp	r6, r4
 80082c0:	d105      	bne.n	80082ce <__libc_init_array+0x2e>
 80082c2:	bd70      	pop	{r4, r5, r6, pc}
 80082c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80082c8:	4798      	blx	r3
 80082ca:	3601      	adds	r6, #1
 80082cc:	e7ee      	b.n	80082ac <__libc_init_array+0xc>
 80082ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80082d2:	4798      	blx	r3
 80082d4:	3601      	adds	r6, #1
 80082d6:	e7f2      	b.n	80082be <__libc_init_array+0x1e>
 80082d8:	08008340 	.word	0x08008340
 80082dc:	08008340 	.word	0x08008340
 80082e0:	08008340 	.word	0x08008340
 80082e4:	08008344 	.word	0x08008344

080082e8 <_init>:
 80082e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ea:	bf00      	nop
 80082ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ee:	bc08      	pop	{r3}
 80082f0:	469e      	mov	lr, r3
 80082f2:	4770      	bx	lr

080082f4 <_fini>:
 80082f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f6:	bf00      	nop
 80082f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082fa:	bc08      	pop	{r3}
 80082fc:	469e      	mov	lr, r3
 80082fe:	4770      	bx	lr
