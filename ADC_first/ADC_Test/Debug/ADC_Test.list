
ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008df8  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08009090  08009090  0000a090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080090c8  080090c8  0000a0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080090d0  080090d0  0000a0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080090d4  080090d4  0000a0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  080090d8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000015a8  24000010  080090e8  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240015b8  080090e8  0000b5b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017557  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fde  00000000  00000000  00022595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001068  00000000  00000000  00025578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c89  00000000  00000000  000265e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038f47  00000000  00000000  00027269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000180b1  00000000  00000000  000601b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016be33  00000000  00000000  00078261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e4094  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004418  00000000  00000000  001e40d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007b  00000000  00000000  001e84f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009078 	.word	0x08009078

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08009078 	.word	0x08009078

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ADC_custom_init>:

uint32_t temp_buffer[1000];
int temp_buff_index=0;


void ADC_custom_init(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0


//	ADC3->CR &= ~ADC_CR_ADSTART;
	ADC3->SQR1=0; // per azzerare la configurazione dell'ide
 80005cc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80005d0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80005d4:	2200      	movs	r2, #0
 80005d6:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->SQR1 |= (18 << ADC_SQR1_SQ1_Pos);
 80005d8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80005dc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80005e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005e2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80005e6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80005ea:	f442 6290 	orr.w	r2, r2, #1152	@ 0x480
 80005ee:	631a      	str	r2, [r3, #48]	@ 0x30
//	ADC3->SQR1 |= (18 << ADC_SQR1_SQ2_Pos);

	ADC3->SQR1 &= ~(1 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere
 80005f0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80005f4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80005f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005fa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80005fe:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000602:	f022 0201 	bic.w	r2, r2, #1
 8000606:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->PCSEL |= ADC_PCSEL_PCSEL_18; // Dichiaro quali canali leggere : 18 e 19
 8000608:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800060c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000610:	69da      	ldr	r2, [r3, #28]
 8000612:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000616:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800061a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800061e:	61da      	str	r2, [r3, #28]
//	ADC3->CR &= ~ADC_CR_DEEPPWD;
//	ADC3->CR |= ADC_CR_ADVREGEN;
//	while((ADC3->ISR & ADC_ISR_LDORDY) != 1){}

	/* Calibrazione */
	ADC3->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 8000620:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000624:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000628:	689a      	ldr	r2, [r3, #8]
 800062a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800062e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000632:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8000636:	609a      	str	r2, [r3, #8]
	ADC3->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 8000638:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800063c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000640:	689a      	ldr	r2, [r3, #8]
 8000642:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000646:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800064a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800064e:	609a      	str	r2, [r3, #8]
	ADC3->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 8000650:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000654:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000658:	689a      	ldr	r2, [r3, #8]
 800065a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800065e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000662:	f022 0201 	bic.w	r2, r2, #1
 8000666:	609a      	str	r2, [r3, #8]
	ADC3->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 8000668:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800066c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000670:	689a      	ldr	r2, [r3, #8]
 8000672:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000676:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800067a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800067e:	609a      	str	r2, [r3, #8]


	while((ADC3->CR & ADC_CR_ADCAL) != 0){};
 8000680:	bf00      	nop
 8000682:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000686:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	2b00      	cmp	r3, #0
 800068e:	dbf8      	blt.n	8000682 <ADC_custom_init+0xba>
	// FIne calibrazione
}
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <ADC_start>:

void ADC_start(){
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
	/* Accensione ADC */

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 80006a0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006a4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006ae:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80006b2:	f042 0201 	orr.w	r2, r2, #1
 80006b6:	601a      	str	r2, [r3, #0]
	ADC3->CR |= ADC_CR_ADEN;		// Accendo l' ADC
 80006b8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006bc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80006c0:	689a      	ldr	r2, [r3, #8]
 80006c2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006c6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80006ca:	f042 0201 	orr.w	r2, r2, #1
 80006ce:	609a      	str	r2, [r3, #8]

	while((ADC3->ISR & ADC_ISR_ADRDY) != 0){}
 80006d0:	bf00      	nop
 80006d2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006d6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d1f6      	bne.n	80006d2 <ADC_start+0x36>

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 80006e4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006e8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006f2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80006f6:	f042 0201 	orr.w	r2, r2, #1
 80006fa:	601a      	str	r2, [r3, #0]
	// Fine accensione

	/* ADR ACCESO */
//	ADC3_COMMON->CCR |= 0xb << ADC_CCR_PRESC_Pos; // Imposto un prescaler per il clock in modo da aver misure più precise di temperatura

	ADC3->CFGR |= ADC_CFGR_CONT;				// Imposto la modalità di misura continua
 80006fc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000700:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000704:	68da      	ldr	r2, [r3, #12]
 8000706:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800070a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800070e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000712:	60da      	str	r2, [r3, #12]
	ADC3->CFGR |= ADC_CFGR_AUTDLY;				// Evito l'overrun: misuro solo dopo aver finito la precedente misura
 8000714:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000718:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800071c:	68da      	ldr	r2, [r3, #12]
 800071e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000722:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000726:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800072a:	60da      	str	r2, [r3, #12]

	ADC3->SMPR2 |= (7 << ADC_SMPR2_SMP18_Pos);	// Indico Il tempo prima della misura
 800072c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000730:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000734:	699a      	ldr	r2, [r3, #24]
 8000736:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800073a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800073e:	f042 62e0 	orr.w	r2, r2, #117440512	@ 0x7000000
 8000742:	619a      	str	r2, [r3, #24]
//	ADC3->SMPR2 |= (7 << ADC_SMPR2_SMP19_Pos);

	ADC3_COMMON->CCR |= ADC_CCR_TSEN;			// Abilito il termometro
 8000744:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 8000748:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800074c:	689a      	ldr	r2, [r3, #8]
 800074e:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 8000752:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000756:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800075a:	609a      	str	r2, [r3, #8]
//	ADC3_COMMON->CCR |= ADC_CCR_VREFEN;			// Abilito la tensione di riferimento


	ADC3->IER |= ADC_IER_EOCIE;					// Abilito l'interrupt di fine conversione
 800075c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000760:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800076a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800076e:	f042 0204 	orr.w	r2, r2, #4
 8000772:	605a      	str	r2, [r3, #4]
	ADC3->CR  |= ADC_CR_ADSTART;				// Inizio le misurazioni
 8000774:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000778:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800077c:	689a      	ldr	r2, [r3, #8]
 800077e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000782:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000786:	f042 0204 	orr.w	r2, r2, #4
 800078a:	609a      	str	r2, [r3, #8]
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <ADC_custom_interrupt>:

void ADC_custom_interrupt(){
 8000796:	b480      	push	{r7}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
	extern int ADC3_interr_number;
	extern uint32_t temp_buffer[];
	extern int temp_buff_index;


	uint16_t data_raw = ADC3->DR;
 800079c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80007a0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80007a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a6:	80fb      	strh	r3, [r7, #6]

	uint32_t temp = ( ( 80000UL * (uint32_t)(data_raw - TS_CAL_30C) ) / (uint32_t)(TS_CAL_110C - TS_CAL_30C) ) + 30000UL;
 80007a8:	88fa      	ldrh	r2, [r7, #6]
 80007aa:	f64e 0320 	movw	r3, #59424	@ 0xe820
 80007ae:	f6c1 73f1 	movt	r3, #8177	@ 0x1ff1
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	461a      	mov	r2, r3
 80007b8:	f44f 5362 	mov.w	r3, #14464	@ 0x3880
 80007bc:	f2c0 0301 	movt	r3, #1
 80007c0:	fb03 f202 	mul.w	r2, r3, r2
 80007c4:	f64e 0340 	movw	r3, #59456	@ 0xe840
 80007c8:	f6c1 73f1 	movt	r3, #8177	@ 0x1ff1
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	4619      	mov	r1, r3
 80007d0:	f64e 0320 	movw	r3, #59424	@ 0xe820
 80007d4:	f6c1 73f1 	movt	r3, #8177	@ 0x1ff1
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	1acb      	subs	r3, r1, r3
 80007dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80007e0:	f247 5330 	movw	r3, #30000	@ 0x7530
 80007e4:	4413      	add	r3, r2
 80007e6:	603b      	str	r3, [r7, #0]

	if(temp_buff_index < sizeof(temp_buffer)/sizeof(temp_buffer[0])){
 80007e8:	f640 73cc 	movw	r3, #4044	@ 0xfcc
 80007ec:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007f6:	d216      	bcs.n	8000826 <ADC_custom_interrupt+0x90>

			temp_buffer[temp_buff_index] = temp;
 80007f8:	f640 73cc 	movw	r3, #4044	@ 0xfcc
 80007fc:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	f240 032c 	movw	r3, #44	@ 0x2c
 8000806:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800080a:	6839      	ldr	r1, [r7, #0]
 800080c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			++temp_buff_index;
 8000810:	f640 73cc 	movw	r3, #4044	@ 0xfcc
 8000814:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	f640 73cc 	movw	r3, #4044	@ 0xfcc
 8000820:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000824:	601a      	str	r2, [r3, #0]
	}
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <init_usart3>:
#include "Custom_usart.h"

unsigned char* converted_buffer_pointer;
int data_index=0;

void init_usart3(){
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

    USART3->CR1 |= USART_CR1_TE;
 8000836:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800083a:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000844:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000848:	f042 0208 	orr.w	r2, r2, #8
 800084c:	601a      	str	r2, [r3, #0]
    USART3->CR1 |= USART_CR1_RE;
 800084e:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000852:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800085c:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000860:	f042 0204 	orr.w	r2, r2, #4
 8000864:	601a      	str	r2, [r3, #0]

    //USART3->CR1 ^= USART_CR1_TXEIE;
    USART3->CR1 |= USART_CR1_RXNEIE;
 8000866:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800086a:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000874:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000878:	f042 0220 	orr.w	r2, r2, #32
 800087c:	601a      	str	r2, [r3, #0]

    USART3->CR1 |= USART_CR1_UE;
 800087e:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000882:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800088c:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000890:	f042 0201 	orr.w	r2, r2, #1
 8000894:	601a      	str	r2, [r3, #0]

}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <usart3_interrupt>:

void usart3_interrupt(){
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0

	extern uint32_t temp_buffer[];
	extern data_index;

	if(USART3->ISR & USART_ISR_RXNE_RXFNE){
 80008a6:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80008aa:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80008ae:	69db      	ldr	r3, [r3, #28]
 80008b0:	f003 0320 	and.w	r3, r3, #32
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d038      	beq.n	800092a <usart3_interrupt+0x8a>
		if(USART3->ISR & USART_ISR_TXE_TXFNF){
 80008b8:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80008bc:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d02f      	beq.n	800092a <usart3_interrupt+0x8a>

			char received_data = USART3->RDR;
 80008ca:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80008ce:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80008d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008d4:	71fb      	strb	r3, [r7, #7]

			USART3->CR1 ^= USART_CR1_TXEIE;
 80008d6:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80008da:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80008e4:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80008e8:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 80008ec:	601a      	str	r2, [r3, #0]

			if(received_data=='e'){
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	2b65      	cmp	r3, #101	@ 0x65
 80008f2:	d11a      	bne.n	800092a <usart3_interrupt+0x8a>
                data_index=0;
 80008f4:	f640 73d4 	movw	r3, #4052	@ 0xfd4
 80008f8:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]

                converted_buffer_pointer = (unsigned char*)temp_buffer;
 8000900:	f640 73d0 	movw	r3, #4048	@ 0xfd0
 8000904:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000908:	f240 022c 	movw	r2, #44	@ 0x2c
 800090c:	f2c2 4200 	movt	r2, #9216	@ 0x2400
 8000910:	601a      	str	r2, [r3, #0]
				// FUNC() GENERA VETTORE DI DATI SE NECESSARIO
                //genera_vett_esp(data_buffer, (int)SIZE_OF_BUFF(data_buffer), 0, 0);
                USART3->CR1 |= USART_CR1_TXEIE;
 8000912:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000916:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000920:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000924:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000928:	601a      	str	r2, [r3, #0]
			}
		}
	}

	if((USART3->ISR & USART_ISR_TXE_TXFNF) && (USART3->CR1 & USART_CR1_TXEIE) && !(USART3->ISR & USART_ISR_RXNE_RXFNE)){
 800092a:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800092e:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000932:	69db      	ldr	r3, [r3, #28]
 8000934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000938:	2b00      	cmp	r3, #0
 800093a:	d042      	beq.n	80009c2 <usart3_interrupt+0x122>
 800093c:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000940:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800094a:	2b00      	cmp	r3, #0
 800094c:	d039      	beq.n	80009c2 <usart3_interrupt+0x122>
 800094e:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000952:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000956:	69db      	ldr	r3, [r3, #28]
 8000958:	f003 0320 	and.w	r3, r3, #32
 800095c:	2b00      	cmp	r3, #0
 800095e:	d130      	bne.n	80009c2 <usart3_interrupt+0x122>

        if( data_index < 1000 * sizeof(temp_buffer[0])){
 8000960:	f640 73d4 	movw	r3, #4052	@ 0xfd4
 8000964:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800096e:	d21c      	bcs.n	80009aa <usart3_interrupt+0x10a>

            USART3->TDR = converted_buffer_pointer[data_index];
 8000970:	f640 73d0 	movw	r3, #4048	@ 0xfd0
 8000974:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	f640 73d4 	movw	r3, #4052	@ 0xfd4
 800097e:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4413      	add	r3, r2
 8000986:	781a      	ldrb	r2, [r3, #0]
 8000988:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800098c:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000990:	629a      	str	r2, [r3, #40]	@ 0x28
            ++data_index;
 8000992:	f640 73d4 	movw	r3, #4052	@ 0xfd4
 8000996:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	f640 73d4 	movw	r3, #4052	@ 0xfd4
 80009a2:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	e00b      	b.n	80009c2 <usart3_interrupt+0x122>
        }else{
            USART3->CR1 ^= USART_CR1_TXEIE_TXFNFIE;
 80009aa:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80009ae:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80009b8:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80009bc:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 80009c0:	601a      	str	r2, [r3, #0]
        }
	}

	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 80009c2:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80009c6:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80009ca:	6a1a      	ldr	r2, [r3, #32]
 80009cc:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80009d0:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80009d4:	f042 0208 	orr.w	r2, r2, #8
 80009d8:	621a      	str	r2, [r3, #32]
	USART3->ICR |= USART_ICR_TCCF;  //Azzeramento flag interrupt trasmissione
 80009da:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80009de:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80009e2:	6a1a      	ldr	r2, [r3, #32]
 80009e4:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80009e8:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80009ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80009f0:	621a      	str	r2, [r3, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 80009f2:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80009f6:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80009fa:	699a      	ldr	r2, [r3, #24]
 80009fc:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000a00:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000a04:	f042 0208 	orr.w	r2, r2, #8
 8000a08:	619a      	str	r2, [r3, #24]

}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b088      	sub	sp, #32
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]
 8000a2a:	615a      	str	r2, [r3, #20]
 8000a2c:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a2e:	f640 72d8 	movw	r2, #4056	@ 0xfd8
 8000a32:	f2c2 4200 	movt	r2, #9216	@ 0x2400
 8000a36:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000a3a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000a3e:	6013      	str	r3, [r2, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a40:	f640 73d8 	movw	r3, #4056	@ 0xfd8
 8000a44:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a4c:	f640 73d8 	movw	r3, #4056	@ 0xfd8
 8000a50:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a58:	f640 73d8 	movw	r3, #4056	@ 0xfd8
 8000a5c:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000a60:	2204      	movs	r2, #4
 8000a62:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a64:	f640 73d8 	movw	r3, #4056	@ 0xfd8
 8000a68:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a70:	f640 73d8 	movw	r3, #4056	@ 0xfd8
 8000a74:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000a78:	2200      	movs	r2, #0
 8000a7a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000a7c:	f640 73d8 	movw	r3, #4056	@ 0xfd8
 8000a80:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000a84:	2201      	movs	r2, #1
 8000a86:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a88:	f640 73d8 	movw	r3, #4056	@ 0xfd8
 8000a8c:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000a90:	2200      	movs	r2, #0
 8000a92:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a94:	f640 73d8 	movw	r3, #4056	@ 0xfd8
 8000a98:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aa0:	f640 73d8 	movw	r3, #4056	@ 0xfd8
 8000aa4:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000aac:	f640 73d8 	movw	r3, #4056	@ 0xfd8
 8000ab0:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ab8:	f640 73d8 	movw	r3, #4056	@ 0xfd8
 8000abc:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ac4:	f640 73d8 	movw	r3, #4056	@ 0xfd8
 8000ac8:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000acc:	2200      	movs	r2, #0
 8000ace:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000ad0:	f640 73d8 	movw	r3, #4056	@ 0xfd8
 8000ad4:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000ade:	f640 73d8 	movw	r3, #4056	@ 0xfd8
 8000ae2:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000aea:	f640 70d8 	movw	r0, #4056	@ 0xfd8
 8000aee:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 8000af2:	f001 f8a7 	bl	8001c44 <HAL_ADC_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8000afc:	f000 faf6 	bl	80010ec <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000b00:	f640 73d8 	movw	r3, #4056	@ 0xfd8
 8000b04:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b0c:	f640 70d8 	movw	r0, #4056	@ 0xfd8
 8000b10:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 8000b14:	f001 f896 	bl	8001c44 <HAL_ADC_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_ADC3_Init+0x10c>
  {
    Error_Handler();
 8000b1e:	f000 fae5 	bl	80010ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b22:	2300      	movs	r3, #0
 8000b24:	f6cc 3384 	movt	r3, #52100	@ 0xcb84
 8000b28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b2a:	2306      	movs	r3, #6
 8000b2c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b32:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b36:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	4619      	mov	r1, r3
 8000b48:	f640 70d8 	movw	r0, #4056	@ 0xfd8
 8000b4c:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 8000b50:	f001 fa2e 	bl	8001fb0 <HAL_ADC_ConfigChannel>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_ADC3_Init+0x148>
  {
    Error_Handler();
 8000b5a:	f000 fac7 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b0b4      	sub	sp, #208	@ 0xd0
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	22c0      	movs	r2, #192	@ 0xc0
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f008 fa51 	bl	800901e <memset>
  if(adcHandle->Instance==ADC3)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000b84:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d145      	bne.n	8000c18 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b8c:	f04f 0200 	mov.w	r2, #0
 8000b90:	f2c0 0208 	movt	r2, #8
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000ba0:	2312      	movs	r3, #18
 8000ba2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000bac:	2302      	movs	r3, #2
 8000bae:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bb0:	23c0      	movs	r3, #192	@ 0xc0
 8000bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000bb4:	2320      	movs	r3, #32
 8000bb6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000bb8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000bbc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f003 fd77 	bl	80046bc <HAL_RCCEx_PeriphCLKConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000bd4:	f000 fa8a 	bl	80010ec <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000bd8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000bdc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000be0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000be4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000be8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000bec:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000bf0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000bf4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000bf8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	207f      	movs	r0, #127	@ 0x7f
 8000c0e:	f001 ff64 	bl	8002ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000c12:	207f      	movs	r0, #127	@ 0x7f
 8000c14:	f001 ff7b 	bl	8002b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000c18:	bf00      	nop
 8000c1a:	37d0      	adds	r7, #208	@ 0xd0
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08c      	sub	sp, #48	@ 0x30
 8000c24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000c3a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000c3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c42:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000c46:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000c4a:	f042 0204 	orr.w	r2, r2, #4
 8000c4e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000c52:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000c56:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5e:	f003 0304 	and.w	r3, r3, #4
 8000c62:	61bb      	str	r3, [r7, #24]
 8000c64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c66:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000c6a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000c6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c72:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000c76:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000c7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000c7e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000c82:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000c86:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000c9a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000c9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ca2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000ca6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000caa:	f042 0201 	orr.w	r2, r2, #1
 8000cae:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000cb2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000cb6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000cca:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000cce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000cd2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000cd6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000cda:	f042 0202 	orr.w	r2, r2, #2
 8000cde:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000ce2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000ce6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000cfa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000cfe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000d02:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d06:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d0a:	f042 0208 	orr.w	r2, r2, #8
 8000d0e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000d12:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d16:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1e:	f003 0308 	and.w	r3, r3, #8
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d26:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d2a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d2e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000d32:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d36:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000d3e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000d42:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d46:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d56:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d5a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000d62:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d66:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d6a:	f042 0210 	orr.w	r2, r2, #16
 8000d6e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000d72:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d76:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7e:	f003 0310 	and.w	r3, r3, #16
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000d8c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000d90:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000d94:	f002 f896 	bl	8002ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d9e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8000da2:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000da6:	f002 f88d 	bl	8002ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2102      	movs	r1, #2
 8000dae:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000db2:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000db6:	f002 f885 	bl	8002ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000dd2:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000dd6:	f001 feb4 	bl	8002b42 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000dda:	2332      	movs	r3, #50	@ 0x32
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dea:	230b      	movs	r3, #11
 8000dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000df8:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000dfc:	f001 fea1 	bl	8002b42 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e00:	2386      	movs	r3, #134	@ 0x86
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e10:	230b      	movs	r3, #11
 8000e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000e20:	f001 fe8f 	bl	8002b42 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e24:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000e40:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000e44:	f001 fe7d 	bl	8002b42 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e5a:	230b      	movs	r3, #11
 8000e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4619      	mov	r1, r3
 8000e64:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000e68:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000e6c:	f001 fe69 	bl	8002b42 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000e70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8000e8c:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000e90:	f001 fe57 	bl	8002b42 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000e94:	2380      	movs	r3, #128	@ 0x80
 8000e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e98:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8000eac:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000eb0:	f001 fe47 	bl	8002b42 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000eb4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec6:	230b      	movs	r3, #11
 8000ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8000ed4:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000ed8:	f001 fe33 	bl	8002b42 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000edc:	2302      	movs	r3, #2
 8000ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000ef6:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000efa:	f001 fe22 	bl	8002b42 <HAL_GPIO_Init>

}
 8000efe:	bf00      	nop
 8000f00:	3730      	adds	r7, #48	@ 0x30
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0a:	f000 fc38 	bl	800177e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0e:	f000 f810 	bl	8000f32 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f12:	f7ff fe85 	bl	8000c20 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000f16:	f7ff fd7e 	bl	8000a16 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8000f1a:	f000 fa28 	bl	800136e <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f1e:	f000 fb21 	bl	8001564 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */


  init_usart3();		// inizializzo l'usart
 8000f22:	f7ff fc86 	bl	8000832 <init_usart3>

  ADC_custom_init();	// Inizializzo la periferica
 8000f26:	f7ff fb4f 	bl	80005c8 <ADC_custom_init>

  ADC_start();			// Inizializzo il termometro e faccio partire l'ADC
 8000f2a:	f7ff fbb7 	bl	800069c <ADC_start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f2e:	bf00      	nop
 8000f30:	e7fd      	b.n	8000f2e <main+0x28>

08000f32 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b09e      	sub	sp, #120	@ 0x78
 8000f36:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f3c:	224c      	movs	r2, #76	@ 0x4c
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f008 f86c 	bl	800901e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	2220      	movs	r2, #32
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f008 f865 	bl	800901e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f54:	2002      	movs	r0, #2
 8000f56:	f002 f8fe 	bl	8003156 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f62:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8000f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f6c:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8000f70:	f022 0201 	bic.w	r2, r2, #1
 8000f74:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f7a:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8000f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000f8a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000f8e:	699a      	ldr	r2, [r3, #24]
 8000f90:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000f94:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000f98:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000f9c:	619a      	str	r2, [r3, #24]
 8000f9e:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000fa2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fb0:	bf00      	nop
 8000fb2:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000fb6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fc4:	d1f5      	bne.n	8000fb2 <SystemClock_Config+0x80>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000fca:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000fce:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000fd2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000fd6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000fda:	f042 0202 	orr.w	r2, r2, #2
 8000fde:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000fe2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000fe6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000fea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000ffe:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001002:	699a      	ldr	r2, [r3, #24]
 8001004:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8001008:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800100c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8001010:	619a      	str	r2, [r3, #24]
 8001012:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8001016:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001026:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 800102a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800102c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001030:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8001034:	f042 0201 	orr.w	r2, r2, #1
 8001038:	62da      	str	r2, [r3, #44]	@ 0x2c
 800103a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800103e:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8001042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800104c:	bf00      	nop
 800104e:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8001052:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800105c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001060:	d1f5      	bne.n	800104e <SystemClock_Config+0x11c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001062:	2321      	movs	r3, #33	@ 0x21
 8001064:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001066:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800106a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800106c:	2301      	movs	r3, #1
 800106e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001070:	2302      	movs	r3, #2
 8001072:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001074:	2302      	movs	r3, #2
 8001076:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001078:	2301      	movs	r3, #1
 800107a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 800107c:	2378      	movs	r3, #120	@ 0x78
 800107e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001080:	2302      	movs	r3, #2
 8001082:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001084:	2303      	movs	r3, #3
 8001086:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001088:	2302      	movs	r3, #2
 800108a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800108c:	230c      	movs	r3, #12
 800108e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001090:	2300      	movs	r3, #0
 8001092:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001098:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800109c:	4618      	mov	r0, r3
 800109e:	f002 f8b3 	bl	8003208 <HAL_RCC_OscConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x17a>
  {
    Error_Handler();
 80010a8:	f000 f820 	bl	80010ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ac:	233f      	movs	r3, #63	@ 0x3f
 80010ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b0:	2303      	movs	r3, #3
 80010b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010b8:	2308      	movs	r3, #8
 80010ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010bc:	2340      	movs	r3, #64	@ 0x40
 80010be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010c0:	2340      	movs	r3, #64	@ 0x40
 80010c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010ca:	2340      	movs	r3, #64	@ 0x40
 80010cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	2104      	movs	r1, #4
 80010d4:	4618      	mov	r0, r3
 80010d6:	f002 fe7d 	bl	8003dd4 <HAL_RCC_ClockConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0x1b2>
  {
    Error_Handler();
 80010e0:	f000 f804 	bl	80010ec <Error_Handler>
  }
}
 80010e4:	bf00      	nop
 80010e6:	3778      	adds	r7, #120	@ 0x78
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f0:	b672      	cpsid	i
}
 80010f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <Error_Handler+0x8>

080010f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001102:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001106:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800110a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800110e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001112:	f042 0202 	orr.w	r2, r2, #2
 8001116:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 800111a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800111e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001122:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800113e:	bf00      	nop
 8001140:	e7fd      	b.n	800113e <NMI_Handler+0x4>

08001142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001146:	bf00      	nop
 8001148:	e7fd      	b.n	8001146 <HardFault_Handler+0x4>

0800114a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114e:	bf00      	nop
 8001150:	e7fd      	b.n	800114e <MemManage_Handler+0x4>

08001152 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001156:	bf00      	nop
 8001158:	e7fd      	b.n	8001156 <BusFault_Handler+0x4>

0800115a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800115e:	bf00      	nop
 8001160:	e7fd      	b.n	800115e <UsageFault_Handler+0x4>

08001162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001190:	f000 fb76 	bl	8001880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	usart3_interrupt();
 800119c:	f7ff fb80 	bl	80008a0 <usart3_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	ADC_custom_interrupt();
 80011a8:	f7ff faf5 	bl	8000796 <ADC_custom_interrupt>
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
  /* USER CODE BEGIN ADC3_IRQn 1 */
	}
  /* USER CODE END ADC3_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011b4:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 80011b8:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 80011bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80011c0:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 80011c4:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 80011c8:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 80011cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011d4:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d80d      	bhi.n	80011fe <SystemInit+0x4e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011e6:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f023 020f 	bic.w	r2, r3, #15
 80011f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011f4:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 80011f8:	f042 0207 	orr.w	r2, r2, #7
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011fe:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001202:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800120c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001210:	f042 0201 	orr.w	r2, r2, #1
 8001214:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001216:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800121a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001222:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001226:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800122a:	6819      	ldr	r1, [r3, #0]
 800122c:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8001230:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8001234:	f64e 537f 	movw	r3, #60799	@ 0xed7f
 8001238:	f6ce 23f6 	movt	r3, #60150	@ 0xeaf6
 800123c:	400b      	ands	r3, r1
 800123e:	6013      	str	r3, [r2, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001240:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001244:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00d      	beq.n	800126e <SystemInit+0xbe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001252:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001256:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f023 020f 	bic.w	r2, r3, #15
 8001260:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001264:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 8001268:	f042 0207 	orr.w	r2, r2, #7
 800126c:	601a      	str	r2, [r3, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800126e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001272:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800127a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800127e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001286:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800128a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800128e:	2200      	movs	r2, #0
 8001290:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001292:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001296:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800129a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800129e:	f2c0 2202 	movt	r2, #514	@ 0x202
 80012a2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012a4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80012a8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80012ac:	2200      	movs	r2, #0
 80012ae:	f2c0 12ff 	movt	r2, #511	@ 0x1ff
 80012b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012b4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80012b8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80012bc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80012c0:	f2c0 1201 	movt	r2, #257	@ 0x101
 80012c4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012c6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80012ca:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80012ce:	2200      	movs	r2, #0
 80012d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012d2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80012d6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80012da:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80012de:	f2c0 1201 	movt	r2, #257	@ 0x101
 80012e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012e4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80012e8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80012ec:	2200      	movs	r2, #0
 80012ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012f0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80012f4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80012f8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80012fc:	f2c0 1201 	movt	r2, #257	@ 0x101
 8001300:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001302:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001306:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800130a:	2200      	movs	r2, #0
 800130c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800130e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001312:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800131c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001320:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001324:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001326:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800132a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800132e:	2200      	movs	r2, #0
 8001330:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001332:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001336:	f6c5 4300 	movt	r3, #23552	@ 0x5c00
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2300      	movs	r3, #0
 800133e:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 8001342:	4013      	ands	r3, r2
 8001344:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001348:	d205      	bcs.n	8001356 <SystemInit+0x1a6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800134a:	f248 1308 	movw	r3, #33032	@ 0x8108
 800134e:	f2c5 1300 	movt	r3, #20736	@ 0x5100
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001356:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800135a:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 800135e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001362:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001372:	f241 023c 	movw	r2, #4156	@ 0x103c
 8001376:	f2c2 4200 	movt	r2, #9216	@ 0x2400
 800137a:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800137e:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8001382:	6013      	str	r3, [r2, #0]
  huart3.Init.BaudRate = 9600;
 8001384:	f241 033c 	movw	r3, #4156	@ 0x103c
 8001388:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800138c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001390:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	f241 033c 	movw	r3, #4156	@ 0x103c
 8001396:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800139e:	f241 033c 	movw	r3, #4156	@ 0x103c
 80013a2:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013aa:	f241 033c 	movw	r3, #4156	@ 0x103c
 80013ae:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013b6:	f241 033c 	movw	r3, #4156	@ 0x103c
 80013ba:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80013be:	220c      	movs	r2, #12
 80013c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c2:	f241 033c 	movw	r3, #4156	@ 0x103c
 80013c6:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ce:	f241 033c 	movw	r3, #4156	@ 0x103c
 80013d2:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013da:	f241 033c 	movw	r3, #4156	@ 0x103c
 80013de:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80013e2:	2200      	movs	r2, #0
 80013e4:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013e6:	f241 033c 	movw	r3, #4156	@ 0x103c
 80013ea:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80013ee:	2200      	movs	r2, #0
 80013f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f2:	f241 033c 	movw	r3, #4156	@ 0x103c
 80013f6:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80013fa:	2200      	movs	r2, #0
 80013fc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013fe:	f241 003c 	movw	r0, #4156	@ 0x103c
 8001402:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 8001406:	f006 f9d5 	bl	80077b4 <HAL_UART_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_USART3_UART_Init+0xa6>
  {
    Error_Handler();
 8001410:	f7ff fe6c 	bl	80010ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001414:	2100      	movs	r1, #0
 8001416:	f241 003c 	movw	r0, #4156	@ 0x103c
 800141a:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 800141e:	f007 fa26 	bl	800886e <HAL_UARTEx_SetTxFifoThreshold>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_USART3_UART_Init+0xbe>
  {
    Error_Handler();
 8001428:	f7ff fe60 	bl	80010ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800142c:	2100      	movs	r1, #0
 800142e:	f241 003c 	movw	r0, #4156	@ 0x103c
 8001432:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 8001436:	f007 fa58 	bl	80088ea <HAL_UARTEx_SetRxFifoThreshold>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_USART3_UART_Init+0xd6>
  {
    Error_Handler();
 8001440:	f7ff fe54 	bl	80010ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001444:	f241 003c 	movw	r0, #4156	@ 0x103c
 8001448:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 800144c:	f007 f9d6 	bl	80087fc <HAL_UARTEx_DisableFifoMode>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_USART3_UART_Init+0xec>
  {
    Error_Handler();
 8001456:	f7ff fe49 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b0ba      	sub	sp, #232	@ 0xe8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	22c0      	movs	r2, #192	@ 0xc0
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f007 fdcd 	bl	800901e <memset>
  if(uartHandle->Instance==USART3)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800148c:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8001490:	429a      	cmp	r2, r3
 8001492:	d163      	bne.n	800155c <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001494:	f04f 0202 	mov.w	r2, #2
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	4618      	mov	r0, r3
 80014ac:	f003 f906 	bl	80046bc <HAL_RCCEx_PeriphCLKConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_UART_MspInit+0x5c>
    {
      Error_Handler();
 80014b6:	f7ff fe19 	bl	80010ec <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014ba:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80014be:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80014c2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80014c6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80014ca:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80014ce:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80014d2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80014d6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80014da:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80014de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ea:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80014ee:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80014f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80014f6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80014fa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80014fe:	f042 0208 	orr.w	r2, r2, #8
 8001502:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001506:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800150a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800151a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800151e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001534:	2307      	movs	r3, #7
 8001536:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800153a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800153e:	4619      	mov	r1, r3
 8001540:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8001544:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8001548:	f001 fafb 	bl	8002b42 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2100      	movs	r1, #0
 8001550:	2027      	movs	r0, #39	@ 0x27
 8001552:	f001 fac2 	bl	8002ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001556:	2027      	movs	r0, #39	@ 0x27
 8001558:	f001 fad9 	bl	8002b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800155c:	bf00      	nop
 800155e:	37e8      	adds	r7, #232	@ 0xe8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001568:	f241 02d0 	movw	r2, #4304	@ 0x10d0
 800156c:	f2c2 4200 	movt	r2, #9216	@ 0x2400
 8001570:	2300      	movs	r3, #0
 8001572:	f2c4 0308 	movt	r3, #16392	@ 0x4008
 8001576:	6013      	str	r3, [r2, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001578:	f241 03d0 	movw	r3, #4304	@ 0x10d0
 800157c:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001580:	2209      	movs	r2, #9
 8001582:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001584:	f241 03d0 	movw	r3, #4304	@ 0x10d0
 8001588:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800158c:	2202      	movs	r2, #2
 800158e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001590:	f241 03d0 	movw	r3, #4304	@ 0x10d0
 8001594:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001598:	2200      	movs	r2, #0
 800159a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800159c:	f241 03d0 	movw	r3, #4304	@ 0x10d0
 80015a0:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80015a4:	2202      	movs	r2, #2
 80015a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80015a8:	f241 03d0 	movw	r3, #4304	@ 0x10d0
 80015ac:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80015b0:	2201      	movs	r2, #1
 80015b2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80015b4:	f241 03d0 	movw	r3, #4304	@ 0x10d0
 80015b8:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80015bc:	2200      	movs	r2, #0
 80015be:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015c0:	f241 03d0 	movw	r3, #4304	@ 0x10d0
 80015c4:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80015c8:	2200      	movs	r2, #0
 80015ca:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80015cc:	f241 03d0 	movw	r3, #4304	@ 0x10d0
 80015d0:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80015d4:	2201      	movs	r2, #1
 80015d6:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80015d8:	f241 03d0 	movw	r3, #4304	@ 0x10d0
 80015dc:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80015e0:	2201      	movs	r2, #1
 80015e2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015e4:	f241 03d0 	movw	r3, #4304	@ 0x10d0
 80015e8:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80015ec:	2200      	movs	r2, #0
 80015ee:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015f0:	f241 00d0 	movw	r0, #4304	@ 0x10d0
 80015f4:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 80015f8:	f001 fc7d 	bl	8002ef6 <HAL_PCD_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_USB_OTG_FS_PCD_Init+0xa2>
  {
    Error_Handler();
 8001602:	f7ff fd73 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b0ba      	sub	sp, #232	@ 0xe8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001612:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001622:	f107 0310 	add.w	r3, r7, #16
 8001626:	22c0      	movs	r2, #192	@ 0xc0
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f007 fcf7 	bl	800901e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	2300      	movs	r3, #0
 8001636:	f2c4 0308 	movt	r3, #16392	@ 0x4008
 800163a:	429a      	cmp	r2, r3
 800163c:	d171      	bne.n	8001722 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	f2c0 0204 	movt	r2, #4
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800164e:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001652:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001656:	f107 0310 	add.w	r3, r7, #16
 800165a:	4618      	mov	r0, r3
 800165c:	f003 f82e 	bl	80046bc <HAL_RCCEx_PeriphCLKConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_PCD_MspInit+0x60>
    {
      Error_Handler();
 8001666:	f7ff fd41 	bl	80010ec <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800166a:	f001 fdba 	bl	80031e2 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001672:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001676:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800167a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800167e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001682:	f042 0201 	orr.w	r2, r2, #1
 8001686:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800168a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800168e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800169e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80016a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80016b8:	230a      	movs	r3, #10
 80016ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016be:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016c2:	4619      	mov	r1, r3
 80016c4:	2000      	movs	r0, #0
 80016c6:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 80016ca:	f001 fa3a 	bl	8002b42 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016e6:	4619      	mov	r1, r3
 80016e8:	2000      	movs	r0, #0
 80016ea:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 80016ee:	f001 fa28 	bl	8002b42 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016f2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80016f6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80016fa:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80016fe:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001702:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001706:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800170a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 800170e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001712:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001716:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800171a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001722:	bf00      	nop
 8001724:	37e8      	adds	r7, #232	@ 0xe8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800172c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001764 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001730:	f7ff fd3e 	bl	80011b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001734:	480c      	ldr	r0, [pc, #48]	@ (8001768 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001736:	490d      	ldr	r1, [pc, #52]	@ (800176c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001738:	4a0d      	ldr	r2, [pc, #52]	@ (8001770 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800174c:	4c0a      	ldr	r4, [pc, #40]	@ (8001778 <LoopFillZerobss+0x22>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175a:	f007 fc69 	bl	8009030 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175e:	f7ff fbd2 	bl	8000f06 <main>
  bx  lr
 8001762:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001764:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001768:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800176c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001770:	080090d8 	.word	0x080090d8
  ldr r2, =_sbss
 8001774:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001778:	240015b8 	.word	0x240015b8

0800177c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC_IRQHandler>

0800177e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001784:	2003      	movs	r0, #3
 8001786:	f001 f99d 	bl	8002ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800178a:	f002 fd6b 	bl	8004264 <HAL_RCC_GetSysClockFreq>
 800178e:	4601      	mov	r1, r0
 8001790:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001794:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	0a1b      	lsrs	r3, r3, #8
 800179c:	f003 020f 	and.w	r2, r3, #15
 80017a0:	f249 0390 	movw	r3, #37008	@ 0x9090
 80017a4:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80017a8:	5c9b      	ldrb	r3, [r3, r2]
 80017aa:	f003 031f 	and.w	r3, r3, #31
 80017ae:	fa21 f303 	lsr.w	r3, r1, r3
 80017b2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017b4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80017b8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	f003 020f 	and.w	r2, r3, #15
 80017c2:	f249 0390 	movw	r3, #37008	@ 0x9090
 80017c6:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80017ca:	5c9b      	ldrb	r3, [r3, r2]
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	40da      	lsrs	r2, r3
 80017d4:	f240 0304 	movw	r3, #4
 80017d8:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80017dc:	601a      	str	r2, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017de:	f240 0300 	movw	r3, #0
 80017e2:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ea:	2000      	movs	r0, #0
 80017ec:	f000 f80c 	bl	8001808 <HAL_InitTick>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_Init+0x7c>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e002      	b.n	8001800 <HAL_Init+0x82>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017fa:	f7ff fc7d 	bl	80010f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001810:	f240 030c 	movw	r3, #12
 8001814:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_InitTick+0x1a>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e02a      	b.n	8001878 <HAL_InitTick+0x70>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001822:	f240 0300 	movw	r3, #0
 8001826:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	f240 030c 	movw	r3, #12
 8001830:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	4619      	mov	r1, r3
 8001838:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800183c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001840:	fbb2 f3f3 	udiv	r3, r2, r3
 8001844:	4618      	mov	r0, r3
 8001846:	f001 f970 	bl	8002b2a <HAL_SYSTICK_Config>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_InitTick+0x4c>
    {
      return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e011      	b.n	8001878 <HAL_InitTick+0x70>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b0f      	cmp	r3, #15
 8001858:	d80d      	bhi.n	8001876 <HAL_InitTick+0x6e>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800185a:	2200      	movs	r2, #0
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	f04f 30ff 	mov.w	r0, #4294967295
 8001862:	f001 f93a 	bl	8002ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001866:	f240 0308 	movw	r3, #8
 800186a:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	e000      	b.n	8001878 <HAL_InitTick+0x70>
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001884:	f240 030c 	movw	r3, #12
 8001888:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	f241 53b4 	movw	r3, #5556	@ 0x15b4
 8001894:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	441a      	add	r2, r3
 800189c:	f241 53b4 	movw	r3, #5556	@ 0x15b4
 80018a0:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80018a4:	601a      	str	r2, [r3, #0]
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	f241 53b4 	movw	r3, #5556	@ 0x15b4
 80018b8:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80018bc:	681b      	ldr	r3, [r3, #0]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d0:	f7ff ffee 	bl	80018b0 <HAL_GetTick>
 80018d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e0:	d008      	beq.n	80018f4 <HAL_Delay+0x2c>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e2:	f240 030c 	movw	r3, #12
 80018e6:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4413      	add	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018f4:	bf00      	nop
 80018f6:	f7ff ffdb 	bl	80018b0 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	429a      	cmp	r2, r3
 8001904:	d8f7      	bhi.n	80018f6 <HAL_Delay+0x2e>
  {
  }
}
 8001906:	bf00      	nop
 8001908:	bf00      	nop
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001914:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001918:	f6c5 4300 	movt	r3, #23552	@ 0x5c00
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	0c1b      	lsrs	r3, r3, #16
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	609a      	str	r2, [r3, #8]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	609a      	str	r2, [r3, #8]
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001992:	b480      	push	{r7}
 8001994:	b087      	sub	sp, #28
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3360      	adds	r3, #96	@ 0x60
 80019a4:	461a      	mov	r2, r3
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	430b      	orrs	r3, r1
 80019c0:	431a      	orrs	r2, r3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80019c6:	bf00      	nop
 80019c8:	371c      	adds	r7, #28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b085      	sub	sp, #20
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	431a      	orrs	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	611a      	str	r2, [r3, #16]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3360      	adds	r3, #96	@ 0x60
 8001a14:	461a      	mov	r2, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	601a      	str	r2, [r3, #0]
  }
}
 8001a2e:	bf00      	nop
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b087      	sub	sp, #28
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	3330      	adds	r3, #48	@ 0x30
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	0a1b      	lsrs	r3, r3, #8
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	4413      	add	r3, r2
 8001a58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	211f      	movs	r1, #31
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	401a      	ands	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	0e9b      	lsrs	r3, r3, #26
 8001a72:	f003 011f 	and.w	r1, r3, #31
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	f003 031f 	and.w	r3, r3, #31
 8001a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a80:	431a      	orrs	r2, r3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a86:	bf00      	nop
 8001a88:	371c      	adds	r7, #28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b087      	sub	sp, #28
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	3314      	adds	r3, #20
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	0e5b      	lsrs	r3, r3, #25
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	4413      	add	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	0d1b      	lsrs	r3, r3, #20
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	2107      	movs	r1, #7
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	0d1b      	lsrs	r3, r3, #20
 8001acc:	f003 031f 	and.w	r3, r3, #31
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001adc:	bf00      	nop
 8001ade:	371c      	adds	r7, #28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b00:	43db      	mvns	r3, r3
 8001b02:	401a      	ands	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f003 0118 	and.w	r1, r3, #24
 8001b0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b0e:	f2c0 030f 	movt	r3, #15
 8001b12:	fa23 f101 	lsr.w	r1, r3, r1
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	400b      	ands	r3, r1
 8001b1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	f64f 73c0 	movw	r3, #65472	@ 0xffc0
 8001b42:	f6c5 73ff 	movt	r3, #24575	@ 0x5fff
 8001b46:	4013      	ands	r3, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6093      	str	r3, [r2, #8]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b6c:	d101      	bne.n	8001b72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	f64f 73c0 	movw	r3, #65472	@ 0xffc0
 8001b90:	f6c6 73ff 	movt	r3, #28671	@ 0x6fff
 8001b94:	4013      	ands	r3, r2
 8001b96:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001bbe:	d101      	bne.n	8001bc4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <LL_ADC_IsEnabled+0x18>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <LL_ADC_IsEnabled+0x1a>
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d101      	bne.n	8001c10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d101      	bne.n	8001c36 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b089      	sub	sp, #36	@ 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e1a4      	b.n	8001fa8 <HAL_ADC_Init+0x364>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7fe ff7a 	bl	8000b66 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff67 	bl	8001b58 <LL_ADC_IsDeepPowerDownEnabled>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d004      	beq.n	8001c9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff4c 	bl	8001b32 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ff83 	bl	8001baa <LL_ADC_IsInternalRegulatorEnabled>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d11a      	bne.n	8001ce0 <HAL_ADC_Init+0x9c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ff66 	bl	8001b80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cb4:	f240 0300 	movw	r3, #0
 8001cb8:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	099a      	lsrs	r2, r3, #6
 8001cc0:	f642 5363 	movw	r3, #11619	@ 0x2d63
 8001cc4:	f2c0 533e 	movt	r3, #1342	@ 0x53e
 8001cc8:	fba3 2302 	umull	r2, r3, r3, r2
 8001ccc:	099b      	lsrs	r3, r3, #6
 8001cce:	3301      	adds	r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cd2:	e002      	b.n	8001cda <HAL_ADC_Init+0x96>
    {
      wait_loop_index--;
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f9      	bne.n	8001cd4 <HAL_ADC_Init+0x90>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff60 	bl	8001baa <LL_ADC_IsInternalRegulatorEnabled>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10d      	bne.n	8001d0c <HAL_ADC_Init+0xc8>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf4:	f043 0210 	orr.w	r2, r3, #16
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff71 	bl	8001bf8 <LL_ADC_REG_IsConversionOngoing>
 8001d16:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d1c:	f003 0310 	and.w	r3, r3, #16
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f040 8138 	bne.w	8001f96 <HAL_ADC_Init+0x352>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f040 8134 	bne.w	8001f96 <HAL_ADC_Init+0x352>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d32:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d36:	f043 0202 	orr.w	r2, r3, #2
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff ff45 	bl	8001bd2 <LL_ADC_IsEnabled>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d151      	bne.n	8001df2 <HAL_ADC_Init+0x1ae>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d56:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d007      	beq.n	8001d6e <HAL_ADC_Init+0x12a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8001d66:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d114      	bne.n	8001d98 <HAL_ADC_Init+0x154>
 8001d6e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d72:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8001d76:	f7ff ff2c 	bl	8001bd2 <LL_ADC_IsEnabled>
 8001d7a:	4604      	mov	r4, r0
 8001d7c:	f44f 5004 	mov.w	r0, #8448	@ 0x2100
 8001d80:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8001d84:	f7ff ff25 	bl	8001bd2 <LL_ADC_IsEnabled>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4323      	orrs	r3, r4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	bf0c      	ite	eq
 8001d90:	2301      	moveq	r3, #1
 8001d92:	2300      	movne	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	e00b      	b.n	8001db0 <HAL_ADC_Init+0x16c>
 8001d98:	f44f 40c0 	mov.w	r0, #24576	@ 0x6000
 8001d9c:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8001da0:	f7ff ff17 	bl	8001bd2 <LL_ADC_IsEnabled>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	bf0c      	ite	eq
 8001daa:	2301      	moveq	r3, #1
 8001dac:	2300      	movne	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01e      	beq.n	8001df2 <HAL_ADC_Init+0x1ae>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dbc:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d007      	beq.n	8001dd4 <HAL_ADC_Init+0x190>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8001dcc:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d104      	bne.n	8001dde <HAL_ADC_Init+0x19a>
 8001dd4:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 8001dd8:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001ddc:	e003      	b.n	8001de6 <HAL_ADC_Init+0x1a2>
 8001dde:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 8001de2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6852      	ldr	r2, [r2, #4]
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fd9c 	bl	800192a <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001df2:	f7ff fd8d 	bl	8001910 <HAL_GetREVID>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d914      	bls.n	8001e2a <HAL_ADC_Init+0x1e6>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b10      	cmp	r3, #16
 8001e06:	d110      	bne.n	8001e2a <HAL_ADC_Init+0x1e6>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	7d5b      	ldrb	r3, [r3, #21]
 8001e0c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e12:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e18:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7f1b      	ldrb	r3, [r3, #28]
 8001e1e:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e20:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e22:	f043 030c 	orr.w	r3, r3, #12
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	e00d      	b.n	8001e46 <HAL_ADC_Init+0x202>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	7d5b      	ldrb	r3, [r3, #21]
 8001e2e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e34:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e3a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7f1b      	ldrb	r3, [r3, #28]
 8001e40:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	7f1b      	ldrb	r3, [r3, #28]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d106      	bne.n	8001e5c <HAL_ADC_Init+0x218>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	045b      	lsls	r3, r3, #17
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d009      	beq.n	8001e78 <HAL_ADC_Init+0x234>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e68:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e70:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	f24c 0303 	movw	r3, #49155	@ 0xc003
 8001e82:	f6cf 73f0 	movt	r3, #65520	@ 0xfff0
 8001e86:	4013      	ands	r3, r2
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	69b9      	ldr	r1, [r7, #24]
 8001e8e:	430b      	orrs	r3, r1
 8001e90:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff feae 	bl	8001bf8 <LL_ADC_REG_IsConversionOngoing>
 8001e9c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff febb 	bl	8001c1e <LL_ADC_INJ_IsConversionOngoing>
 8001ea8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d150      	bne.n	8001f52 <HAL_ADC_Init+0x30e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d14d      	bne.n	8001f52 <HAL_ADC_Init+0x30e>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	7d1b      	ldrb	r3, [r3, #20]
 8001eba:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	f64b 73fc 	movw	r3, #49148	@ 0xbffc
 8001ece:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	69b9      	ldr	r1, [r7, #24]
 8001eda:	430b      	orrs	r3, r1
 8001edc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d11e      	bne.n	8001f26 <HAL_ADC_Init+0x2e2>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eec:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	f64f 031e 	movw	r3, #63518	@ 0xf81e
 8001ef8:	f6cf 4300 	movt	r3, #64512	@ 0xfc00
 8001efc:	4013      	ands	r3, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f02:	3a01      	subs	r2, #1
 8001f04:	0411      	lsls	r1, r2, #16
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f0a:	4311      	orrs	r1, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f10:	4311      	orrs	r1, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f16:	430a      	orrs	r2, r1
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	611a      	str	r2, [r3, #16]
 8001f24:	e007      	b.n	8001f36 <HAL_ADC_Init+0x2f2>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0201 	bic.w	r2, r2, #1
 8001f34:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 fbc5 	bl	80026dc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d10c      	bne.n	8001f74 <HAL_ADC_Init+0x330>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f60:	f023 010f 	bic.w	r1, r3, #15
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	1e5a      	subs	r2, r3, #1
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f72:	e007      	b.n	8001f84 <HAL_ADC_Init+0x340>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 020f 	bic.w	r2, r2, #15
 8001f82:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f88:	f023 0303 	bic.w	r3, r3, #3
 8001f8c:	f043 0201 	orr.w	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f94:	e007      	b.n	8001fa6 <HAL_ADC_Init+0x362>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f9a:	f043 0210 	orr.w	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fa6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3724      	adds	r7, #36	@ 0x24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd90      	pop	{r4, r7, pc}

08001fb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b0a1      	sub	sp, #132	@ 0x84
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f2c4 73ff 	movt	r3, #18431	@ 0x47ff
 8001fce:	429a      	cmp	r2, r3
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x2e>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e37a      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x724>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fe04 	bl	8001bf8 <LL_ADC_REG_IsConversionOngoing>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f040 835f 	bne.w	80026b6 <HAL_ADC_ConfigChannel+0x706>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	db2c      	blt.n	800205a <HAL_ADC_ConfigChannel+0xaa>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002008:	2b00      	cmp	r3, #0
 800200a:	d108      	bne.n	800201e <HAL_ADC_ConfigChannel+0x6e>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0e9b      	lsrs	r3, r3, #26
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	2201      	movs	r2, #1
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	e016      	b.n	800204c <HAL_ADC_ConfigChannel+0x9c>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800202c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800202e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002030:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_ADC_ConfigChannel+0x8a>
  {
    return 32U;
 8002036:	2320      	movs	r3, #32
 8002038:	e003      	b.n	8002042 <HAL_ADC_ConfigChannel+0x92>
  }
  return __builtin_clz(value);
 800203a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800203c:	fab3 f383 	clz	r3, r3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	2201      	movs	r2, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	69d1      	ldr	r1, [r2, #28]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	430b      	orrs	r3, r1
 8002058:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	6859      	ldr	r1, [r3, #4]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	f7ff fce7 	bl	8001a3a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fdc1 	bl	8001bf8 <LL_ADC_REG_IsConversionOngoing>
 8002076:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fdce 	bl	8001c1e <LL_ADC_INJ_IsConversionOngoing>
 8002082:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002084:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002086:	2b00      	cmp	r3, #0
 8002088:	f040 80b6 	bne.w	80021f8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800208c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800208e:	2b00      	cmp	r3, #0
 8002090:	f040 80b2 	bne.w	80021f8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6819      	ldr	r1, [r3, #0]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	461a      	mov	r2, r3
 80020a2:	f7ff fcf6 	bl	8001a92 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80020a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020aa:	f6c5 4300 	movt	r3, #23552	@ 0x5c00
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80020b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80020b8:	d10b      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x122>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	089b      	lsrs	r3, r3, #2
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	e01d      	b.n	800210e <HAL_ADC_ConfigChannel+0x15e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10b      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x148>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	e00a      	b.n	800210e <HAL_ADC_ConfigChannel+0x15e>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2b04      	cmp	r3, #4
 8002116:	d027      	beq.n	8002168 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6919      	ldr	r1, [r3, #16]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002126:	f7ff fc34 	bl	8001992 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	6919      	ldr	r1, [r3, #16]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	7e5b      	ldrb	r3, [r3, #25]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d102      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x190>
 800213a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800213e:	e000      	b.n	8002142 <HAL_ADC_ConfigChannel+0x192>
 8002140:	2300      	movs	r3, #0
 8002142:	461a      	mov	r2, r3
 8002144:	f7ff fc5e 	bl	8001a04 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	6919      	ldr	r1, [r3, #16]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	7e1b      	ldrb	r3, [r3, #24]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d102      	bne.n	800215e <HAL_ADC_ConfigChannel+0x1ae>
 8002158:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800215c:	e000      	b.n	8002160 <HAL_ADC_ConfigChannel+0x1b0>
 800215e:	2300      	movs	r3, #0
 8002160:	461a      	mov	r2, r3
 8002162:	f7ff fc36 	bl	80019d2 <LL_ADC_SetDataRightShift>
 8002166:	e047      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x248>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800216e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	069b      	lsls	r3, r3, #26
 8002178:	429a      	cmp	r2, r3
 800217a:	d107      	bne.n	800218c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800218a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002192:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	069b      	lsls	r3, r3, #26
 800219c:	429a      	cmp	r2, r3
 800219e:	d107      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80021ae:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	069b      	lsls	r3, r3, #26
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d107      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80021d2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	069b      	lsls	r3, r3, #26
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d107      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80021f6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fce8 	bl	8001bd2 <LL_ADC_IsEnabled>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	f040 825f 	bne.w	80026c8 <HAL_ADC_ConfigChannel+0x718>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6819      	ldr	r1, [r3, #0]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	461a      	mov	r2, r3
 8002218:	f7ff fc66 	bl	8001ae8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	2300      	movs	r3, #0
 8002222:	f2c4 73ff 	movt	r3, #18431	@ 0x47ff
 8002226:	429a      	cmp	r2, r3
 8002228:	f040 812e 	bne.w	8002488 <HAL_ADC_ConfigChannel+0x4d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10b      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x2a4>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	0e9b      	lsrs	r3, r3, #26
 8002242:	3301      	adds	r3, #1
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	2b09      	cmp	r3, #9
 800224a:	bf94      	ite	ls
 800224c:	2301      	movls	r3, #1
 800224e:	2300      	movhi	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	e019      	b.n	8002288 <HAL_ADC_ConfigChannel+0x2d8>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800225c:	fa93 f3a3 	rbit	r3, r3
 8002260:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002264:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002266:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 800226c:	2320      	movs	r3, #32
 800226e:	e003      	b.n	8002278 <HAL_ADC_ConfigChannel+0x2c8>
  return __builtin_clz(value);
 8002270:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	3301      	adds	r3, #1
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	2b09      	cmp	r3, #9
 8002280:	bf94      	ite	ls
 8002282:	2301      	movls	r3, #1
 8002284:	2300      	movhi	r3, #0
 8002286:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002288:	2b00      	cmp	r3, #0
 800228a:	d079      	beq.n	8002380 <HAL_ADC_ConfigChannel+0x3d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002294:	2b00      	cmp	r3, #0
 8002296:	d107      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x2f8>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0e9b      	lsrs	r3, r3, #26
 800229e:	3301      	adds	r3, #1
 80022a0:	069b      	lsls	r3, r3, #26
 80022a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022a6:	e015      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x324>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80022b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022b8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80022ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x314>
    return 32U;
 80022c0:	2320      	movs	r3, #32
 80022c2:	e003      	b.n	80022cc <HAL_ADC_ConfigChannel+0x31c>
  return __builtin_clz(value);
 80022c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	3301      	adds	r3, #1
 80022ce:	069b      	lsls	r3, r3, #26
 80022d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d109      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x344>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0e9b      	lsrs	r3, r3, #26
 80022e6:	3301      	adds	r3, #1
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	2101      	movs	r1, #1
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	e017      	b.n	8002324 <HAL_ADC_ConfigChannel+0x374>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002304:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002306:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800230c:	2320      	movs	r3, #32
 800230e:	e003      	b.n	8002318 <HAL_ADC_ConfigChannel+0x368>
  return __builtin_clz(value);
 8002310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	3301      	adds	r3, #1
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	2101      	movs	r1, #1
 8002320:	fa01 f303 	lsl.w	r3, r1, r3
 8002324:	ea42 0103 	orr.w	r1, r2, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10a      	bne.n	800234a <HAL_ADC_ConfigChannel+0x39a>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0e9b      	lsrs	r3, r3, #26
 800233a:	3301      	adds	r3, #1
 800233c:	f003 021f 	and.w	r2, r3, #31
 8002340:	4613      	mov	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4413      	add	r3, r2
 8002346:	051b      	lsls	r3, r3, #20
 8002348:	e018      	b.n	800237c <HAL_ADC_ConfigChannel+0x3cc>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800235a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800235c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x3b6>
    return 32U;
 8002362:	2320      	movs	r3, #32
 8002364:	e003      	b.n	800236e <HAL_ADC_ConfigChannel+0x3be>
  return __builtin_clz(value);
 8002366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002368:	fab3 f383 	clz	r3, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	3301      	adds	r3, #1
 8002370:	f003 021f 	and.w	r2, r3, #31
 8002374:	4613      	mov	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800237c:	430b      	orrs	r3, r1
 800237e:	e07e      	b.n	800247e <HAL_ADC_ConfigChannel+0x4ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002388:	2b00      	cmp	r3, #0
 800238a:	d107      	bne.n	800239c <HAL_ADC_ConfigChannel+0x3ec>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	0e9b      	lsrs	r3, r3, #26
 8002392:	3301      	adds	r3, #1
 8002394:	069b      	lsls	r3, r3, #26
 8002396:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800239a:	e015      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x418>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80023aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80023ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x408>
    return 32U;
 80023b4:	2320      	movs	r3, #32
 80023b6:	e003      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 80023b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	3301      	adds	r3, #1
 80023c2:	069b      	lsls	r3, r3, #26
 80023c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d109      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x438>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	0e9b      	lsrs	r3, r3, #26
 80023da:	3301      	adds	r3, #1
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	2101      	movs	r1, #1
 80023e2:	fa01 f303 	lsl.w	r3, r1, r3
 80023e6:	e017      	b.n	8002418 <HAL_ADC_ConfigChannel+0x468>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	61bb      	str	r3, [r7, #24]
  return result;
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x454>
    return 32U;
 8002400:	2320      	movs	r3, #32
 8002402:	e003      	b.n	800240c <HAL_ADC_ConfigChannel+0x45c>
  return __builtin_clz(value);
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	3301      	adds	r3, #1
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	2101      	movs	r1, #1
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	ea42 0103 	orr.w	r1, r2, r3
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10d      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x494>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	0e9b      	lsrs	r3, r3, #26
 800242e:	3301      	adds	r3, #1
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	3b1e      	subs	r3, #30
 800243c:	051b      	lsls	r3, r3, #20
 800243e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002442:	e01b      	b.n	800247c <HAL_ADC_ConfigChannel+0x4cc>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	60fb      	str	r3, [r7, #12]
  return result;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x4b0>
    return 32U;
 800245c:	2320      	movs	r3, #32
 800245e:	e003      	b.n	8002468 <HAL_ADC_ConfigChannel+0x4b8>
  return __builtin_clz(value);
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	3301      	adds	r3, #1
 800246a:	f003 021f 	and.w	r2, r3, #31
 800246e:	4613      	mov	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4413      	add	r3, r2
 8002474:	3b1e      	subs	r3, #30
 8002476:	051b      	lsls	r3, r3, #20
 8002478:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800247c:	430b      	orrs	r3, r1
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	6892      	ldr	r2, [r2, #8]
 8002482:	4619      	mov	r1, r3
 8002484:	f7ff fb05 	bl	8001a92 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	f280 811b 	bge.w	80026c8 <HAL_ADC_ConfigChannel+0x718>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800249a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800249e:	429a      	cmp	r2, r3
 80024a0:	d007      	beq.n	80024b2 <HAL_ADC_ConfigChannel+0x502>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 80024aa:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d104      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x50c>
 80024b2:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 80024b6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80024ba:	e003      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x514>
 80024bc:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 80024c0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fa56 	bl	8001976 <LL_ADC_GetCommonPathInternalCh>
 80024ca:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024d4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80024d8:	429a      	cmp	r2, r3
 80024da:	d007      	beq.n	80024ec <HAL_ADC_ConfigChannel+0x53c>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 80024e4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d114      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x566>
 80024ec:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80024f0:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 80024f4:	f7ff fb6d 	bl	8001bd2 <LL_ADC_IsEnabled>
 80024f8:	4604      	mov	r4, r0
 80024fa:	f44f 5004 	mov.w	r0, #8448	@ 0x2100
 80024fe:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8002502:	f7ff fb66 	bl	8001bd2 <LL_ADC_IsEnabled>
 8002506:	4603      	mov	r3, r0
 8002508:	4323      	orrs	r3, r4
 800250a:	2b00      	cmp	r3, #0
 800250c:	bf0c      	ite	eq
 800250e:	2301      	moveq	r3, #1
 8002510:	2300      	movne	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	e00b      	b.n	800252e <HAL_ADC_ConfigChannel+0x57e>
 8002516:	f44f 40c0 	mov.w	r0, #24576	@ 0x6000
 800251a:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 800251e:	f7ff fb58 	bl	8001bd2 <LL_ADC_IsEnabled>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 80b7 	beq.w	80026a2 <HAL_ADC_ConfigChannel+0x6f2>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2300      	movs	r3, #0
 800253a:	f6cc 3384 	movt	r3, #52100	@ 0xcb84
 800253e:	429a      	cmp	r2, r3
 8002540:	d145      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x61e>
 8002542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002544:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d140      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x61e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002554:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002558:	429a      	cmp	r2, r3
 800255a:	f040 80b5 	bne.w	80026c8 <HAL_ADC_ConfigChannel+0x718>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002566:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800256a:	429a      	cmp	r2, r3
 800256c:	d007      	beq.n	800257e <HAL_ADC_ConfigChannel+0x5ce>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8002576:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800257a:	429a      	cmp	r2, r3
 800257c:	d104      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x5d8>
 800257e:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 8002582:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002586:	e003      	b.n	8002590 <HAL_ADC_ConfigChannel+0x5e0>
 8002588:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 800258c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002590:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002592:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff f9d9 	bl	8001950 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800259e:	f240 0300 	movw	r3, #0
 80025a2:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	099a      	lsrs	r2, r3, #6
 80025aa:	f642 5363 	movw	r3, #11619	@ 0x2d63
 80025ae:	f2c0 533e 	movt	r3, #1342	@ 0x53e
 80025b2:	fba3 2302 	umull	r2, r3, r3, r2
 80025b6:	099b      	lsrs	r3, r3, #6
 80025b8:	3301      	adds	r3, #1
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80025be:	e002      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x616>
              {
                wait_loop_index--;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f9      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x610>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025cc:	e07c      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x718>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	2300      	movs	r3, #0
 80025d4:	f2cc 7352 	movt	r3, #51026	@ 0xc752
 80025d8:	429a      	cmp	r2, r3
 80025da:	d12d      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x688>
 80025dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d128      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x688>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80025ee:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d168      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x718>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025fe:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002602:	429a      	cmp	r2, r3
 8002604:	d007      	beq.n	8002616 <HAL_ADC_ConfigChannel+0x666>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 800260e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002612:	429a      	cmp	r2, r3
 8002614:	d104      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x670>
 8002616:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 800261a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800261e:	e003      	b.n	8002628 <HAL_ADC_ConfigChannel+0x678>
 8002620:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 8002624:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002628:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800262a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff f98d 	bl	8001950 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002636:	e047      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x718>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	2300      	movs	r3, #0
 800263e:	f6cc 73b8 	movt	r3, #53176	@ 0xcfb8
 8002642:	429a      	cmp	r2, r3
 8002644:	d140      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x718>
 8002646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002648:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d13b      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x718>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002658:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800265c:	429a      	cmp	r2, r3
 800265e:	d133      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x718>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002668:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800266c:	429a      	cmp	r2, r3
 800266e:	d007      	beq.n	8002680 <HAL_ADC_ConfigChannel+0x6d0>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8002678:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800267c:	429a      	cmp	r2, r3
 800267e:	d104      	bne.n	800268a <HAL_ADC_ConfigChannel+0x6da>
 8002680:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 8002684:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002688:	e003      	b.n	8002692 <HAL_ADC_ConfigChannel+0x6e2>
 800268a:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 800268e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002692:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002694:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff f958 	bl	8001950 <LL_ADC_SetCommonPathInternalCh>
 80026a0:	e012      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x718>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a6:	f043 0220 	orr.w	r2, r3, #32
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80026b4:	e008      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x718>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ba:	f043 0220 	orr.w	r2, r3, #32
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80026d0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3784      	adds	r7, #132	@ 0x84
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd90      	pop	{r4, r7, pc}

080026dc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026ec:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d007      	beq.n	8002704 <ADC_ConfigureBoostMode+0x28>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 80026fc:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002700:	429a      	cmp	r2, r3
 8002702:	d10c      	bne.n	800271e <ADC_ConfigureBoostMode+0x42>
 8002704:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 8002708:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002712:	2b00      	cmp	r3, #0
 8002714:	bf14      	ite	ne
 8002716:	2301      	movne	r3, #1
 8002718:	2300      	moveq	r3, #0
 800271a:	b2db      	uxtb	r3, r3
 800271c:	e00b      	b.n	8002736 <ADC_ConfigureBoostMode+0x5a>
 800271e:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 8002722:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800272c:	2b00      	cmp	r3, #0
 800272e:	bf14      	ite	ne
 8002730:	2301      	movne	r3, #1
 8002732:	2300      	moveq	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d01c      	beq.n	8002774 <ADC_ConfigureBoostMode+0x98>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800273a:	f001 ff53 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 800273e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002748:	d010      	beq.n	800276c <ADC_ConfigureBoostMode+0x90>
 800274a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800274e:	d875      	bhi.n	800283c <ADC_ConfigureBoostMode+0x160>
 8002750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002754:	d002      	beq.n	800275c <ADC_ConfigureBoostMode+0x80>
 8002756:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800275a:	d16f      	bne.n	800283c <ADC_ConfigureBoostMode+0x160>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	0c1b      	lsrs	r3, r3, #16
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	fbb2 f3f3 	udiv	r3, r2, r3
 8002768:	60fb      	str	r3, [r7, #12]
        break;
 800276a:	e06a      	b.n	8002842 <ADC_ConfigureBoostMode+0x166>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	089b      	lsrs	r3, r3, #2
 8002770:	60fb      	str	r3, [r7, #12]
        break;
 8002772:	e066      	b.n	8002842 <ADC_ConfigureBoostMode+0x166>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002774:	f04f 0000 	mov.w	r0, #0
 8002778:	f2c0 0008 	movt	r0, #8
 800277c:	f04f 0100 	mov.w	r1, #0
 8002780:	f003 fac4 	bl	8005d0c <HAL_RCCEx_GetPeriphCLKFreq>
 8002784:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800278e:	d051      	beq.n	8002834 <ADC_ConfigureBoostMode+0x158>
 8002790:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002794:	d854      	bhi.n	8002840 <ADC_ConfigureBoostMode+0x164>
 8002796:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800279a:	d047      	beq.n	800282c <ADC_ConfigureBoostMode+0x150>
 800279c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80027a0:	d84e      	bhi.n	8002840 <ADC_ConfigureBoostMode+0x164>
 80027a2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80027a6:	d03d      	beq.n	8002824 <ADC_ConfigureBoostMode+0x148>
 80027a8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80027ac:	d848      	bhi.n	8002840 <ADC_ConfigureBoostMode+0x164>
 80027ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027b2:	d033      	beq.n	800281c <ADC_ConfigureBoostMode+0x140>
 80027b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027b8:	d842      	bhi.n	8002840 <ADC_ConfigureBoostMode+0x164>
 80027ba:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80027be:	d029      	beq.n	8002814 <ADC_ConfigureBoostMode+0x138>
 80027c0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80027c4:	d83c      	bhi.n	8002840 <ADC_ConfigureBoostMode+0x164>
 80027c6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80027ca:	d01a      	beq.n	8002802 <ADC_ConfigureBoostMode+0x126>
 80027cc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80027d0:	d836      	bhi.n	8002840 <ADC_ConfigureBoostMode+0x164>
 80027d2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80027d6:	d014      	beq.n	8002802 <ADC_ConfigureBoostMode+0x126>
 80027d8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80027dc:	d830      	bhi.n	8002840 <ADC_ConfigureBoostMode+0x164>
 80027de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027e2:	d00e      	beq.n	8002802 <ADC_ConfigureBoostMode+0x126>
 80027e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027e8:	d82a      	bhi.n	8002840 <ADC_ConfigureBoostMode+0x164>
 80027ea:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80027ee:	d008      	beq.n	8002802 <ADC_ConfigureBoostMode+0x126>
 80027f0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80027f4:	d824      	bhi.n	8002840 <ADC_ConfigureBoostMode+0x164>
 80027f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80027fa:	d002      	beq.n	8002802 <ADC_ConfigureBoostMode+0x126>
 80027fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002800:	d11e      	bne.n	8002840 <ADC_ConfigureBoostMode+0x164>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	0c9b      	lsrs	r3, r3, #18
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002810:	60fb      	str	r3, [r7, #12]
        break;
 8002812:	e016      	b.n	8002842 <ADC_ConfigureBoostMode+0x166>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	091b      	lsrs	r3, r3, #4
 8002818:	60fb      	str	r3, [r7, #12]
        break;
 800281a:	e012      	b.n	8002842 <ADC_ConfigureBoostMode+0x166>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	60fb      	str	r3, [r7, #12]
        break;
 8002822:	e00e      	b.n	8002842 <ADC_ConfigureBoostMode+0x166>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	099b      	lsrs	r3, r3, #6
 8002828:	60fb      	str	r3, [r7, #12]
        break;
 800282a:	e00a      	b.n	8002842 <ADC_ConfigureBoostMode+0x166>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	09db      	lsrs	r3, r3, #7
 8002830:	60fb      	str	r3, [r7, #12]
        break;
 8002832:	e006      	b.n	8002842 <ADC_ConfigureBoostMode+0x166>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	60fb      	str	r3, [r7, #12]
        break;
 800283a:	e002      	b.n	8002842 <ADC_ConfigureBoostMode+0x166>
        break;
 800283c:	bf00      	nop
 800283e:	e000      	b.n	8002842 <ADC_ConfigureBoostMode+0x166>
      default:
        break;
 8002840:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002842:	f7ff f865 	bl	8001910 <HAL_GetREVID>
 8002846:	4603      	mov	r3, r0
 8002848:	f241 0203 	movw	r2, #4099	@ 0x1003
 800284c:	4293      	cmp	r3, r2
 800284e:	d818      	bhi.n	8002882 <ADC_ConfigureBoostMode+0x1a6>
  {
    if (freq > 20000000UL)
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 8002856:	f2c0 1331 	movt	r3, #305	@ 0x131
 800285a:	429a      	cmp	r2, r3
 800285c:	d908      	bls.n	8002870 <ADC_ConfigureBoostMode+0x194>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800286c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800286e:	e047      	b.n	8002900 <ADC_ConfigureBoostMode+0x224>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800287e:	609a      	str	r2, [r3, #8]
}
 8002880:	e03e      	b.n	8002900 <ADC_ConfigureBoostMode+0x224>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	085b      	lsrs	r3, r3, #1
 8002886:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	f645 6310 	movw	r3, #24080	@ 0x5e10
 800288e:	f2c0 035f 	movt	r3, #95	@ 0x5f
 8002892:	429a      	cmp	r2, r3
 8002894:	d808      	bhi.n	80028a8 <ADC_ConfigureBoostMode+0x1cc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80028a4:	609a      	str	r2, [r3, #8]
}
 80028a6:	e02b      	b.n	8002900 <ADC_ConfigureBoostMode+0x224>
    else if (freq <= 12500000UL)
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	f64b 4320 	movw	r3, #48160	@ 0xbc20
 80028ae:	f2c0 03be 	movt	r3, #190	@ 0xbe
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d80a      	bhi.n	80028cc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028c8:	609a      	str	r2, [r3, #8]
}
 80028ca:	e019      	b.n	8002900 <ADC_ConfigureBoostMode+0x224>
    else if (freq <= 25000000UL)
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	f647 0340 	movw	r3, #30784	@ 0x7840
 80028d2:	f2c0 137d 	movt	r3, #381	@ 0x17d
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d80a      	bhi.n	80028f0 <ADC_ConfigureBoostMode+0x214>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ec:	609a      	str	r2, [r3, #8]
}
 80028ee:	e007      	b.n	8002900 <ADC_ConfigureBoostMode+0x224>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80028fe:	609a      	str	r2, [r3, #8]
}
 8002900:	bf00      	nop
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002918:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 800291c:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800292a:	4013      	ands	r3, r2
 800292c:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002936:	2300      	movs	r3, #0
 8002938:	f2c0 53fa 	movt	r3, #1530	@ 0x5fa
 800293c:	4313      	orrs	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002940:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8002944:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	60da      	str	r2, [r3, #12]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800295c:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8002960:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	0a1b      	lsrs	r3, r3, #8
 8002968:	f003 0307 	and.w	r3, r3, #7
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	4603      	mov	r3, r0
 800297e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002980:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002984:	2b00      	cmp	r3, #0
 8002986:	db0e      	blt.n	80029a6 <__NVIC_EnableIRQ+0x30>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	f003 011f 	and.w	r1, r3, #31
 800298e:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8002992:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002996:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800299a:	0952      	lsrs	r2, r2, #5
 800299c:	2001      	movs	r0, #1
 800299e:	fa00 f101 	lsl.w	r1, r0, r1
 80029a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	4603      	mov	r3, r0
 80029ba:	6039      	str	r1, [r7, #0]
 80029bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	db0e      	blt.n	80029e4 <__NVIC_SetPriority+0x32>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	b2d9      	uxtb	r1, r3
 80029ca:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 80029ce:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 80029d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029d6:	0109      	lsls	r1, r1, #4
 80029d8:	b2c9      	uxtb	r1, r1
 80029da:	4413      	add	r3, r2
 80029dc:	460a      	mov	r2, r1
 80029de:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e2:	e00e      	b.n	8002a02 <__NVIC_SetPriority+0x50>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	b2d9      	uxtb	r1, r3
 80029e8:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 80029ec:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 80029f0:	88fa      	ldrh	r2, [r7, #6]
 80029f2:	f002 020f 	and.w	r2, r2, #15
 80029f6:	3a04      	subs	r2, #4
 80029f8:	0109      	lsls	r1, r1, #4
 80029fa:	b2c9      	uxtb	r1, r1
 80029fc:	4413      	add	r3, r2
 80029fe:	460a      	mov	r2, r1
 8002a00:	761a      	strb	r2, [r3, #24]
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b089      	sub	sp, #36	@ 0x24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f1c3 0307 	rsb	r3, r3, #7
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	bf28      	it	cs
 8002a2c:	2304      	movcs	r3, #4
 8002a2e:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	3304      	adds	r3, #4
 8002a34:	2b06      	cmp	r3, #6
 8002a36:	d902      	bls.n	8002a3e <NVIC_EncodePriority+0x30>
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	3b03      	subs	r3, #3
 8002a3c:	e000      	b.n	8002a40 <NVIC_EncodePriority+0x32>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a42:	f04f 32ff 	mov.w	r2, #4294967295
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43da      	mvns	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	401a      	ands	r2, r3
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a56:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a60:	43d9      	mvns	r1, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a66:	4313      	orrs	r3, r2
         );
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3724      	adds	r7, #36	@ 0x24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a84:	d301      	bcc.n	8002a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a86:	2301      	movs	r3, #1
 8002a88:	e018      	b.n	8002abc <SysTick_Config+0x48>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8a:	f24e 0310 	movw	r3, #57360	@ 0xe010
 8002a8e:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	3a01      	subs	r2, #1
 8002a96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a98:	210f      	movs	r1, #15
 8002a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9e:	f7ff ff88 	bl	80029b2 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa2:	f24e 0310 	movw	r3, #57360	@ 0xe010
 8002aa6:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aae:	f24e 0310 	movw	r3, #57360	@ 0xe010
 8002ab2:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002ab6:	2207      	movs	r2, #7
 8002ab8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff ff1b 	bl	8002908 <__NVIC_SetPriorityGrouping>
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b086      	sub	sp, #24
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
 8002ae6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae8:	f7ff ff36 	bl	8002958 <__NVIC_GetPriorityGrouping>
 8002aec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	6978      	ldr	r0, [r7, #20]
 8002af4:	f7ff ff8b 	bl	8002a0e <NVIC_EncodePriority>
 8002af8:	4602      	mov	r2, r0
 8002afa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ff56 	bl	80029b2 <__NVIC_SetPriority>
}
 8002b06:	bf00      	nop
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	4603      	mov	r3, r0
 8002b16:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff2a 	bl	8002976 <__NVIC_EnableIRQ>
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff ff9e 	bl	8002a74 <SysTick_Config>
 8002b38:	4603      	mov	r3, r0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b089      	sub	sp, #36	@ 0x24
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002b50:	2380      	movs	r3, #128	@ 0x80
 8002b52:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8002b56:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b58:	e1a5      	b.n	8002ea6 <HAL_GPIO_Init+0x364>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	2101      	movs	r1, #1
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	fa01 f303 	lsl.w	r3, r1, r3
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 8197 	beq.w	8002ea0 <HAL_GPIO_Init+0x35e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d005      	beq.n	8002b8a <HAL_GPIO_Init+0x48>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d130      	bne.n	8002bec <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	2203      	movs	r2, #3
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 0201 	and.w	r2, r3, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d017      	beq.n	8002c28 <HAL_GPIO_Init+0xe6>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	2203      	movs	r2, #3
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d123      	bne.n	8002c7c <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	08da      	lsrs	r2, r3, #3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3208      	adds	r2, #8
 8002c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	220f      	movs	r2, #15
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	08da      	lsrs	r2, r3, #3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3208      	adds	r2, #8
 8002c76:	69b9      	ldr	r1, [r7, #24]
 8002c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	2203      	movs	r2, #3
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0203 	and.w	r2, r3, #3
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80f1 	beq.w	8002ea0 <HAL_GPIO_Init+0x35e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cbe:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8002cc2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002cc6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8002cca:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8002cce:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002cd2:	f042 0202 	orr.w	r2, r2, #2
 8002cd6:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8002cda:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8002cde:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002ce2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cf2:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	0892      	lsrs	r2, r2, #2
 8002cfa:	3202      	adds	r2, #2
 8002cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d052      	beq.n	8002dca <HAL_GPIO_Init+0x288>
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d2a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d049      	beq.n	8002dc6 <HAL_GPIO_Init+0x284>
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d38:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d040      	beq.n	8002dc2 <HAL_GPIO_Init+0x280>
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002d46:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d037      	beq.n	8002dbe <HAL_GPIO_Init+0x27c>
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d54:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d02e      	beq.n	8002dba <HAL_GPIO_Init+0x278>
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002d62:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d025      	beq.n	8002db6 <HAL_GPIO_Init+0x274>
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002d70:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d01c      	beq.n	8002db2 <HAL_GPIO_Init+0x270>
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002d7e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d013      	beq.n	8002dae <HAL_GPIO_Init+0x26c>
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d8c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d00a      	beq.n	8002daa <HAL_GPIO_Init+0x268>
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8002d9a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d101      	bne.n	8002da6 <HAL_GPIO_Init+0x264>
 8002da2:	2309      	movs	r3, #9
 8002da4:	e012      	b.n	8002dcc <HAL_GPIO_Init+0x28a>
 8002da6:	230a      	movs	r3, #10
 8002da8:	e010      	b.n	8002dcc <HAL_GPIO_Init+0x28a>
 8002daa:	2308      	movs	r3, #8
 8002dac:	e00e      	b.n	8002dcc <HAL_GPIO_Init+0x28a>
 8002dae:	2307      	movs	r3, #7
 8002db0:	e00c      	b.n	8002dcc <HAL_GPIO_Init+0x28a>
 8002db2:	2306      	movs	r3, #6
 8002db4:	e00a      	b.n	8002dcc <HAL_GPIO_Init+0x28a>
 8002db6:	2305      	movs	r3, #5
 8002db8:	e008      	b.n	8002dcc <HAL_GPIO_Init+0x28a>
 8002dba:	2304      	movs	r3, #4
 8002dbc:	e006      	b.n	8002dcc <HAL_GPIO_Init+0x28a>
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e004      	b.n	8002dcc <HAL_GPIO_Init+0x28a>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e002      	b.n	8002dcc <HAL_GPIO_Init+0x28a>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <HAL_GPIO_Init+0x28a>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	f002 0203 	and.w	r2, r2, #3
 8002dd2:	0092      	lsls	r2, r2, #2
 8002dd4:	4093      	lsls	r3, r2
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ddc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002de0:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	0892      	lsrs	r2, r2, #2
 8002de8:	3202      	adds	r2, #2
 8002dea:	69b9      	ldr	r1, [r7, #24]
 8002dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002df0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_Init+0x2d4>
        {
          temp |= iocurrent;
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002e16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_GPIO_Init+0x32e>
        {
          temp |= iocurrent;
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_GPIO_Init+0x358>
        {
          temp |= iocurrent;
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f47f ae52 	bne.w	8002b5a <HAL_GPIO_Init+0x18>
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	bf00      	nop
 8002eba:	3724      	adds	r7, #36	@ 0x24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	807b      	strh	r3, [r7, #2]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ed4:	787b      	ldrb	r3, [r7, #1]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eda:	887a      	ldrh	r2, [r7, #2]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ee0:	e003      	b.n	8002eea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ee2:	887b      	ldrh	r3, [r7, #2]
 8002ee4:	041a      	lsls	r2, r3, #16
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	619a      	str	r2, [r3, #24]
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b086      	sub	sp, #24
 8002efa:	af02      	add	r7, sp, #8
 8002efc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0fe      	b.n	8003106 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d106      	bne.n	8002f22 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7fe fb74 	bl	800160a <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2203      	movs	r2, #3
 8002f26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f005 fde0 	bl	8008af4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	7c1a      	ldrb	r2, [r3, #16]
 8002f3c:	f88d 2000 	strb.w	r2, [sp]
 8002f40:	3304      	adds	r3, #4
 8002f42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f44:	f005 fd64 	bl	8008a10 <USB_CoreInit>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d005      	beq.n	8002f5a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2202      	movs	r2, #2
 8002f52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e0d5      	b.n	8003106 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f005 fdd8 	bl	8008b16 <USB_SetCurrentMode>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0c6      	b.n	8003106 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f78:	2300      	movs	r3, #0
 8002f7a:	73fb      	strb	r3, [r7, #15]
 8002f7c:	e04a      	b.n	8003014 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f7e:	7bfa      	ldrb	r2, [r7, #15]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	3315      	adds	r3, #21
 8002f8e:	2201      	movs	r2, #1
 8002f90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f92:	7bfa      	ldrb	r2, [r7, #15]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3314      	adds	r3, #20
 8002fa2:	7bfa      	ldrb	r2, [r7, #15]
 8002fa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	b298      	uxth	r0, r3
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	332e      	adds	r3, #46	@ 0x2e
 8002fba:	4602      	mov	r2, r0
 8002fbc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fbe:	7bfa      	ldrb	r2, [r7, #15]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	3318      	adds	r3, #24
 8002fce:	2200      	movs	r2, #0
 8002fd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fd2:	7bfa      	ldrb	r2, [r7, #15]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	4413      	add	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	331c      	adds	r3, #28
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fe6:	7bfa      	ldrb	r2, [r7, #15]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3320      	adds	r3, #32
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ffa:	7bfa      	ldrb	r2, [r7, #15]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	3324      	adds	r3, #36	@ 0x24
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	3301      	adds	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	791b      	ldrb	r3, [r3, #4]
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	429a      	cmp	r2, r3
 800301c:	d3af      	bcc.n	8002f7e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]
 8003022:	e044      	b.n	80030ae <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003036:	2200      	movs	r2, #0
 8003038:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800303a:	7bfa      	ldrb	r2, [r7, #15]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800304c:	7bfa      	ldrb	r2, [r7, #15]
 800304e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003050:	7bfa      	ldrb	r2, [r7, #15]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003062:	2200      	movs	r2, #0
 8003064:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003066:	7bfa      	ldrb	r2, [r7, #15]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800307c:	7bfa      	ldrb	r2, [r7, #15]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003092:	7bfa      	ldrb	r2, [r7, #15]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	3301      	adds	r3, #1
 80030ac:	73fb      	strb	r3, [r7, #15]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	791b      	ldrb	r3, [r3, #4]
 80030b2:	7bfa      	ldrb	r2, [r7, #15]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d3b5      	bcc.n	8003024 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	7c1a      	ldrb	r2, [r3, #16]
 80030c0:	f88d 2000 	strb.w	r2, [sp]
 80030c4:	3304      	adds	r3, #4
 80030c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030c8:	f005 fd71 	bl	8008bae <USB_DevInit>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2202      	movs	r2, #2
 80030d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e013      	b.n	8003106 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	7b1b      	ldrb	r3, [r3, #12]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d102      	bne.n	80030fa <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f80a 	bl	800310e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f005 ff2d 	bl	8008f5e <USB_DevDisconnect>

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800310e:	b480      	push	{r7}
 8003110:	b085      	sub	sp, #20
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800313c:	2303      	movs	r3, #3
 800313e:	f2c1 0300 	movt	r3, #4096	@ 0x1000
 8003142:	4313      	orrs	r3, r2
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800315e:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8003162:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b04      	cmp	r3, #4
 800316e:	d00d      	beq.n	800318c <HAL_PWREx_ConfigSupply+0x36>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003170:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8003174:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_PWREx_ConfigSupply+0x32>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e028      	b.n	80031da <HAL_PWREx_ConfigSupply+0x84>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	e026      	b.n	80031da <HAL_PWREx_ConfigSupply+0x84>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800318c:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8003190:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f023 0107 	bic.w	r1, r3, #7
 800319a:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800319e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80031a8:	f7fe fb82 	bl	80018b0 <HAL_GetTick>
 80031ac:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031ae:	e009      	b.n	80031c4 <HAL_PWREx_ConfigSupply+0x6e>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031b0:	f7fe fb7e 	bl	80018b0 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031be:	d901      	bls.n	80031c4 <HAL_PWREx_ConfigSupply+0x6e>
    {
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e00a      	b.n	80031da <HAL_PWREx_ConfigSupply+0x84>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031c4:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80031c8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031d6:	d1eb      	bne.n	80031b0 <HAL_PWREx_ConfigSupply+0x5a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80031e2:	b480      	push	{r7}
 80031e4:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80031e6:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80031ea:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80031f4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80031f8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80031fc:	60da      	str	r2, [r3, #12]
}
 80031fe:	bf00      	nop
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08c      	sub	sp, #48	@ 0x30
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d102      	bne.n	800321c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	f000 bdd8 	b.w	8003dcc <HAL_RCC_OscConfig+0xbc4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80c5 	beq.w	80033b4 <HAL_RCC_OscConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800322a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800322e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003238:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800323a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800323e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003244:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003248:	2b10      	cmp	r3, #16
 800324a:	d007      	beq.n	800325c <HAL_RCC_OscConfig+0x54>
 800324c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324e:	2b18      	cmp	r3, #24
 8003250:	d116      	bne.n	8003280 <HAL_RCC_OscConfig+0x78>
 8003252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d111      	bne.n	8003280 <HAL_RCC_OscConfig+0x78>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800325c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003260:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 80a1 	beq.w	80033b2 <HAL_RCC_OscConfig+0x1aa>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f040 809c 	bne.w	80033b2 <HAL_RCC_OscConfig+0x1aa>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	f000 bda6 	b.w	8003dcc <HAL_RCC_OscConfig+0xbc4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003288:	d10c      	bne.n	80032a4 <HAL_RCC_OscConfig+0x9c>
 800328a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800328e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003298:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800329c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	e052      	b.n	800334a <HAL_RCC_OscConfig+0x142>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d118      	bne.n	80032de <HAL_RCC_OscConfig+0xd6>
 80032ac:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80032b0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80032ba:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80032be:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80032c8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80032d2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80032d6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	e035      	b.n	800334a <HAL_RCC_OscConfig+0x142>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032e6:	d118      	bne.n	800331a <HAL_RCC_OscConfig+0x112>
 80032e8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80032ec:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80032f6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80032fa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003304:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800330e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003312:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	e017      	b.n	800334a <HAL_RCC_OscConfig+0x142>
 800331a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800331e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003328:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800332c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003336:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003340:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003344:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003348:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d017      	beq.n	8003382 <HAL_RCC_OscConfig+0x17a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003352:	f7fe faad 	bl	80018b0 <HAL_GetTick>
 8003356:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003358:	e009      	b.n	800336e <HAL_RCC_OscConfig+0x166>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800335a:	f7fe faa9 	bl	80018b0 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b64      	cmp	r3, #100	@ 0x64
 8003366:	d902      	bls.n	800336e <HAL_RCC_OscConfig+0x166>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	f000 bd2f 	b.w	8003dcc <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800336e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003372:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0ec      	beq.n	800335a <HAL_RCC_OscConfig+0x152>
 8003380:	e018      	b.n	80033b4 <HAL_RCC_OscConfig+0x1ac>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003382:	f7fe fa95 	bl	80018b0 <HAL_GetTick>
 8003386:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003388:	e009      	b.n	800339e <HAL_RCC_OscConfig+0x196>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800338a:	f7fe fa91 	bl	80018b0 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b64      	cmp	r3, #100	@ 0x64
 8003396:	d902      	bls.n	800339e <HAL_RCC_OscConfig+0x196>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	f000 bd17 	b.w	8003dcc <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800339e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80033a2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1ec      	bne.n	800338a <HAL_RCC_OscConfig+0x182>
 80033b0:	e000      	b.n	80033b4 <HAL_RCC_OscConfig+0x1ac>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 8113 	beq.w	80035e8 <HAL_RCC_OscConfig+0x3e0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033c2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80033c6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033d2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80033d6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80033da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033dc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <HAL_RCC_OscConfig+0x1ec>
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	2b18      	cmp	r3, #24
 80033e8:	d176      	bne.n	80034d8 <HAL_RCC_OscConfig+0x2d0>
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d171      	bne.n	80034d8 <HAL_RCC_OscConfig+0x2d0>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033f4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80033f8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	2b00      	cmp	r3, #0
 8003404:	d006      	beq.n	8003414 <HAL_RCC_OscConfig+0x20c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d102      	bne.n	8003414 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	f000 bcdc 	b.w	8003dcc <HAL_RCC_OscConfig+0xbc4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003414:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003418:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 0119 	bic.w	r1, r3, #25
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800342a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800342e:	430a      	orrs	r2, r1
 8003430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003432:	f7fe fa3d 	bl	80018b0 <HAL_GetTick>
 8003436:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003438:	e009      	b.n	800344e <HAL_RCC_OscConfig+0x246>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800343a:	f7fe fa39 	bl	80018b0 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d902      	bls.n	800344e <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	f000 bcbf 	b.w	8003dcc <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800344e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003452:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0ec      	beq.n	800343a <HAL_RCC_OscConfig+0x232>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	f7fe fa56 	bl	8001910 <HAL_GetREVID>
 8003464:	4603      	mov	r3, r0
 8003466:	f241 0203 	movw	r2, #4099	@ 0x1003
 800346a:	4293      	cmp	r3, r2
 800346c:	d823      	bhi.n	80034b6 <HAL_RCC_OscConfig+0x2ae>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	2b40      	cmp	r3, #64	@ 0x40
 8003474:	d10e      	bne.n	8003494 <HAL_RCC_OscConfig+0x28c>
 8003476:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800347a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003484:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003488:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800348c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003490:	605a      	str	r2, [r3, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003492:	e0a9      	b.n	80035e8 <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003494:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003498:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 317c 	bic.w	r1, r3, #258048	@ 0x3f000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	031a      	lsls	r2, r3, #12
 80034a8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80034ac:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80034b0:	430a      	orrs	r2, r1
 80034b2:	605a      	str	r2, [r3, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b4:	e098      	b.n	80035e8 <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80034ba:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f023 41fe 	bic.w	r1, r3, #2130706432	@ 0x7f000000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	061a      	lsls	r2, r3, #24
 80034ca:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80034ce:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034d6:	e087      	b.n	80035e8 <HAL_RCC_OscConfig+0x3e0>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d061      	beq.n	80035a4 <HAL_RCC_OscConfig+0x39c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034e0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80034e4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f023 0119 	bic.w	r1, r3, #25
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80034f6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80034fa:	430a      	orrs	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fe:	f7fe f9d7 	bl	80018b0 <HAL_GetTick>
 8003502:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003504:	e009      	b.n	800351a <HAL_RCC_OscConfig+0x312>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003506:	f7fe f9d3 	bl	80018b0 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d902      	bls.n	800351a <HAL_RCC_OscConfig+0x312>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	f000 bc59 	b.w	8003dcc <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800351a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800351e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0ec      	beq.n	8003506 <HAL_RCC_OscConfig+0x2fe>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352c:	f7fe f9f0 	bl	8001910 <HAL_GetREVID>
 8003530:	4603      	mov	r3, r0
 8003532:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003536:	4293      	cmp	r3, r2
 8003538:	d823      	bhi.n	8003582 <HAL_RCC_OscConfig+0x37a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b40      	cmp	r3, #64	@ 0x40
 8003540:	d10e      	bne.n	8003560 <HAL_RCC_OscConfig+0x358>
 8003542:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003546:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003550:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003554:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003558:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800355c:	605a      	str	r2, [r3, #4]
 800355e:	e043      	b.n	80035e8 <HAL_RCC_OscConfig+0x3e0>
 8003560:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003564:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 317c 	bic.w	r1, r3, #258048	@ 0x3f000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	031a      	lsls	r2, r3, #12
 8003574:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003578:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800357c:	430a      	orrs	r2, r1
 800357e:	605a      	str	r2, [r3, #4]
 8003580:	e032      	b.n	80035e8 <HAL_RCC_OscConfig+0x3e0>
 8003582:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003586:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f023 41fe 	bic.w	r1, r3, #2130706432	@ 0x7f000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	061a      	lsls	r2, r3, #24
 8003596:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800359a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800359e:	430a      	orrs	r2, r1
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	e021      	b.n	80035e8 <HAL_RCC_OscConfig+0x3e0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80035a8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80035b2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80035b6:	f022 0201 	bic.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fe f978 	bl	80018b0 <HAL_GetTick>
 80035c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x3ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c4:	f7fe f974 	bl	80018b0 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e3fa      	b.n	8003dcc <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035d6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80035da:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1ed      	bne.n	80035c4 <HAL_RCC_OscConfig+0x3bc>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80e8 	beq.w	80037c6 <HAL_RCC_OscConfig+0x5be>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035f6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80035fa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003604:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003606:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800360a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800360e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003610:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2b08      	cmp	r3, #8
 8003616:	d007      	beq.n	8003628 <HAL_RCC_OscConfig+0x420>
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2b18      	cmp	r3, #24
 800361c:	d14f      	bne.n	80036be <HAL_RCC_OscConfig+0x4b6>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	2b01      	cmp	r3, #1
 8003626:	d14a      	bne.n	80036be <HAL_RCC_OscConfig+0x4b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003628:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800362c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d005      	beq.n	8003646 <HAL_RCC_OscConfig+0x43e>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	2b80      	cmp	r3, #128	@ 0x80
 8003640:	d001      	beq.n	8003646 <HAL_RCC_OscConfig+0x43e>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e3c2      	b.n	8003dcc <HAL_RCC_OscConfig+0xbc4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003646:	f7fe f963 	bl	8001910 <HAL_GetREVID>
 800364a:	4603      	mov	r3, r0
 800364c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003650:	4293      	cmp	r3, r2
 8003652:	d823      	bhi.n	800369c <HAL_RCC_OscConfig+0x494>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	2b20      	cmp	r3, #32
 800365a:	d10e      	bne.n	800367a <HAL_RCC_OscConfig+0x472>
 800365c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003660:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800366a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800366e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003672:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003676:	605a      	str	r2, [r3, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003678:	e0a5      	b.n	80037c6 <HAL_RCC_OscConfig+0x5be>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800367a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800367e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f023 41f8 	bic.w	r1, r3, #2080374784	@ 0x7c000000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	069a      	lsls	r2, r3, #26
 800368e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003692:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800369a:	e094      	b.n	80037c6 <HAL_RCC_OscConfig+0x5be>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800369c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80036a0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	061a      	lsls	r2, r3, #24
 80036b0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80036b4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80036b8:	430a      	orrs	r2, r1
 80036ba:	60da      	str	r2, [r3, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036bc:	e083      	b.n	80037c6 <HAL_RCC_OscConfig+0x5be>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d05d      	beq.n	8003782 <HAL_RCC_OscConfig+0x57a>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80036c6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80036ca:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80036d4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80036d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036de:	f7fe f8e7 	bl	80018b0 <HAL_GetTick>
 80036e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80036e6:	f7fe f8e3 	bl	80018b0 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e369      	b.n	8003dcc <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036f8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80036fc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0ed      	beq.n	80036e6 <HAL_RCC_OscConfig+0x4de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800370a:	f7fe f901 	bl	8001910 <HAL_GetREVID>
 800370e:	4603      	mov	r3, r0
 8003710:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003714:	4293      	cmp	r3, r2
 8003716:	d823      	bhi.n	8003760 <HAL_RCC_OscConfig+0x558>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	2b20      	cmp	r3, #32
 800371e:	d10e      	bne.n	800373e <HAL_RCC_OscConfig+0x536>
 8003720:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003724:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800372e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003732:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003736:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800373a:	605a      	str	r2, [r3, #4]
 800373c:	e043      	b.n	80037c6 <HAL_RCC_OscConfig+0x5be>
 800373e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003742:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f023 41f8 	bic.w	r1, r3, #2080374784	@ 0x7c000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	069a      	lsls	r2, r3, #26
 8003752:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003756:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	e032      	b.n	80037c6 <HAL_RCC_OscConfig+0x5be>
 8003760:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003764:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	061a      	lsls	r2, r3, #24
 8003774:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003778:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800377c:	430a      	orrs	r2, r1
 800377e:	60da      	str	r2, [r3, #12]
 8003780:	e021      	b.n	80037c6 <HAL_RCC_OscConfig+0x5be>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003782:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003786:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003790:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003794:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379a:	f7fe f889 	bl	80018b0 <HAL_GetTick>
 800379e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80037a2:	f7fe f885 	bl	80018b0 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e30b      	b.n	8003dcc <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80037b4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80037b8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1ed      	bne.n	80037a2 <HAL_RCC_OscConfig+0x59a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d048      	beq.n	8003864 <HAL_RCC_OscConfig+0x65c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d022      	beq.n	8003820 <HAL_RCC_OscConfig+0x618>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037da:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80037de:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80037e2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80037e4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80037e8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80037ec:	f042 0201 	orr.w	r2, r2, #1
 80037f0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f2:	f7fe f85d 	bl	80018b0 <HAL_GetTick>
 80037f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x604>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fa:	f7fe f859 	bl	80018b0 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e2df      	b.n	8003dcc <HAL_RCC_OscConfig+0xbc4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800380c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003810:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0ed      	beq.n	80037fa <HAL_RCC_OscConfig+0x5f2>
 800381e:	e021      	b.n	8003864 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003820:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003824:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003828:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800382a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800382e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003832:	f022 0201 	bic.w	r2, r2, #1
 8003836:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fe f83a 	bl	80018b0 <HAL_GetTick>
 800383c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x64a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003840:	f7fe f836 	bl	80018b0 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x64a>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e2bc      	b.n	8003dcc <HAL_RCC_OscConfig+0xbc4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003852:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003856:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800385a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1ed      	bne.n	8003840 <HAL_RCC_OscConfig+0x638>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	2b00      	cmp	r3, #0
 800386e:	d048      	beq.n	8003902 <HAL_RCC_OscConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d022      	beq.n	80038be <HAL_RCC_OscConfig+0x6b6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003878:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800387c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003886:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800388a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800388e:	601a      	str	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003890:	f7fe f80e 	bl	80018b0 <HAL_GetTick>
 8003894:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x6a2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003898:	f7fe f80a 	bl	80018b0 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x6a2>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e290      	b.n	8003dcc <HAL_RCC_OscConfig+0xbc4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80038aa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80038ae:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0ed      	beq.n	8003898 <HAL_RCC_OscConfig+0x690>
 80038bc:	e021      	b.n	8003902 <HAL_RCC_OscConfig+0x6fa>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038be:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80038c2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80038cc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80038d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038d4:	601a      	str	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80038d6:	f7fd ffeb 	bl	80018b0 <HAL_GetTick>
 80038da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x6e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038de:	f7fd ffe7 	bl	80018b0 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x6e8>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e26d      	b.n	8003dcc <HAL_RCC_OscConfig+0xbc4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038f0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80038f4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1ed      	bne.n	80038de <HAL_RCC_OscConfig+0x6d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 80ba 	beq.w	8003a84 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003910:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8003914:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800391e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003922:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003926:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003928:	f7fd ffc2 	bl	80018b0 <HAL_GetTick>
 800392c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x73a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003930:	f7fd ffbe 	bl	80018b0 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b64      	cmp	r3, #100	@ 0x64
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x73a>
      {
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e244      	b.n	8003dcc <HAL_RCC_OscConfig+0xbc4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003942:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8003946:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0ed      	beq.n	8003930 <HAL_RCC_OscConfig+0x728>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d10c      	bne.n	8003976 <HAL_RCC_OscConfig+0x76e>
 800395c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003960:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003964:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003966:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800396a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	671a      	str	r2, [r3, #112]	@ 0x70
 8003974:	e051      	b.n	8003a1a <HAL_RCC_OscConfig+0x812>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d118      	bne.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
 800397e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003982:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003986:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003988:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800398c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003990:	f022 0201 	bic.w	r2, r2, #1
 8003994:	671a      	str	r2, [r3, #112]	@ 0x70
 8003996:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800399a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800399e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80039a0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80039a4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80039a8:	f022 0204 	bic.w	r2, r2, #4
 80039ac:	671a      	str	r2, [r3, #112]	@ 0x70
 80039ae:	e034      	b.n	8003a1a <HAL_RCC_OscConfig+0x812>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b05      	cmp	r3, #5
 80039b6:	d118      	bne.n	80039ea <HAL_RCC_OscConfig+0x7e2>
 80039b8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80039bc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80039c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80039c2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80039c6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80039ca:	f042 0204 	orr.w	r2, r2, #4
 80039ce:	671a      	str	r2, [r3, #112]	@ 0x70
 80039d0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80039d4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80039d8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80039da:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80039de:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	671a      	str	r2, [r3, #112]	@ 0x70
 80039e8:	e017      	b.n	8003a1a <HAL_RCC_OscConfig+0x812>
 80039ea:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80039ee:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80039f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80039f4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80039f8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80039fc:	f022 0201 	bic.w	r2, r2, #1
 8003a00:	671a      	str	r2, [r3, #112]	@ 0x70
 8003a02:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003a06:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003a0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a0c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003a10:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003a14:	f022 0204 	bic.w	r2, r2, #4
 8003a18:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d018      	beq.n	8003a54 <HAL_RCC_OscConfig+0x84c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a22:	f7fd ff45 	bl	80018b0 <HAL_GetTick>
 8003a26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a28:	e00a      	b.n	8003a40 <HAL_RCC_OscConfig+0x838>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a2a:	f7fd ff41 	bl	80018b0 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x838>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e1c5      	b.n	8003dcc <HAL_RCC_OscConfig+0xbc4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a40:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003a44:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0eb      	beq.n	8003a2a <HAL_RCC_OscConfig+0x822>
 8003a52:	e017      	b.n	8003a84 <HAL_RCC_OscConfig+0x87c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a54:	f7fd ff2c 	bl	80018b0 <HAL_GetTick>
 8003a58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a5a:	e00a      	b.n	8003a72 <HAL_RCC_OscConfig+0x86a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5c:	f7fd ff28 	bl	80018b0 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x86a>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e1ac      	b.n	8003dcc <HAL_RCC_OscConfig+0xbc4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a72:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003a76:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1eb      	bne.n	8003a5c <HAL_RCC_OscConfig+0x854>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 819e 	beq.w	8003dca <HAL_RCC_OscConfig+0xbc2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003a8e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003a92:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a9c:	2b18      	cmp	r3, #24
 8003a9e:	f000 810e 	beq.w	8003cbe <HAL_RCC_OscConfig+0xab6>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	f040 80e6 	bne.w	8003c78 <HAL_RCC_OscConfig+0xa70>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aac:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003ab0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003aba:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003abe:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8003ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fd fef4 	bl	80018b0 <HAL_GetTick>
 8003ac8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x8d6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fd fef0 	bl	80018b0 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x8d6>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e176      	b.n	8003dcc <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ade:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003ae2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1ed      	bne.n	8003acc <HAL_RCC_OscConfig+0x8c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003af0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003af4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003af8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003afa:	f64f 430c 	movw	r3, #64524	@ 0xfc0c
 8003afe:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 8003b02:	4013      	ands	r3, r2
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b0c:	0112      	lsls	r2, r2, #4
 8003b0e:	4311      	orrs	r1, r2
 8003b10:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8003b14:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	6293      	str	r3, [r2, #40]	@ 0x28
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b20:	3b01      	subs	r3, #1
 8003b22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	025b      	lsls	r3, r3, #9
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b36:	3b01      	subs	r3, #1
 8003b38:	041b      	lsls	r3, r3, #16
 8003b3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003b3e:	ea42 0103 	orr.w	r1, r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b46:	3b01      	subs	r3, #1
 8003b48:	061b      	lsls	r3, r3, #24
 8003b4a:	f003 42fe 	and.w	r2, r3, #2130706432	@ 0x7f000000
 8003b4e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b52:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b56:	430a      	orrs	r2, r1
 8003b58:	631a      	str	r2, [r3, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003b5a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b5e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b64:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b68:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b6c:	f022 0201 	bic.w	r2, r2, #1
 8003b70:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b72:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b76:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b7c:	2307      	movs	r3, #7
 8003b7e:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 8003b82:	4013      	ands	r3, r2
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003b88:	00d1      	lsls	r1, r2, #3
 8003b8a:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8003b8e:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8003b92:	430b      	orrs	r3, r1
 8003b94:	6353      	str	r3, [r2, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003b96:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b9a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba0:	f023 010c 	bic.w	r1, r3, #12
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ba8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003bac:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003bb4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003bb8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbe:	f023 0102 	bic.w	r1, r3, #2
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bc6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003bca:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003bd2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003bd6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bdc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003be0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003be4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003be8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bea:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003bee:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bf4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003bf8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003bfc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003c00:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c02:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003c06:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c0c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003c10:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003c14:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003c18:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003c1a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003c1e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c24:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003c28:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003c2c:	f042 0201 	orr.w	r2, r2, #1
 8003c30:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c32:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003c36:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003c40:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003c44:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4a:	f7fd fe31 	bl	80018b0 <HAL_GetTick>
 8003c4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0xa5c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c52:	f7fd fe2d 	bl	80018b0 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0xa5c>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e0b3      	b.n	8003dcc <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c64:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003c68:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0ed      	beq.n	8003c52 <HAL_RCC_OscConfig+0xa4a>
 8003c76:	e0a8      	b.n	8003dca <HAL_RCC_OscConfig+0xbc2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c78:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003c7c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003c86:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003c8a:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8003c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fd fe0e 	bl	80018b0 <HAL_GetTick>
 8003c94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0xaa2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c98:	f7fd fe0a 	bl	80018b0 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0xaa2>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e090      	b.n	8003dcc <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003caa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003cae:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1ed      	bne.n	8003c98 <HAL_RCC_OscConfig+0xa90>
 8003cbc:	e085      	b.n	8003dca <HAL_RCC_OscConfig+0xbc2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003cbe:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003cc2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003cca:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003cce:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d031      	beq.n	8003d42 <HAL_RCC_OscConfig+0xb3a>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f003 0203 	and.w	r2, r3, #3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d12a      	bne.n	8003d42 <HAL_RCC_OscConfig+0xb3a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	091b      	lsrs	r3, r3, #4
 8003cf0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d122      	bne.n	8003d42 <HAL_RCC_OscConfig+0xb3a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d06:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d11a      	bne.n	8003d42 <HAL_RCC_OscConfig+0xb3a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	0a5b      	lsrs	r3, r3, #9
 8003d10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d18:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d111      	bne.n	8003d42 <HAL_RCC_OscConfig+0xb3a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	0c1b      	lsrs	r3, r3, #16
 8003d22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d108      	bne.n	8003d42 <HAL_RCC_OscConfig+0xb3a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	0e1b      	lsrs	r3, r3, #24
 8003d34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0xb3e>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e042      	b.n	8003dcc <HAL_RCC_OscConfig+0xbc4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003d46:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003d4a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d50:	08db      	lsrs	r3, r3, #3
 8003d52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d56:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d033      	beq.n	8003dca <HAL_RCC_OscConfig+0xbc2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003d62:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003d66:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d6c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003d70:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003d74:	f022 0201 	bic.w	r2, r2, #1
 8003d78:	62da      	str	r2, [r3, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d7a:	f7fd fd99 	bl	80018b0 <HAL_GetTick>
 8003d7e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003d80:	bf00      	nop
 8003d82:	f7fd fd95 	bl	80018b0 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d0f9      	beq.n	8003d82 <HAL_RCC_OscConfig+0xb7a>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d8e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003d92:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003d96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d98:	2307      	movs	r3, #7
 8003d9a:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 8003d9e:	4013      	ands	r3, r2
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003da4:	00d1      	lsls	r1, r2, #3
 8003da6:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8003daa:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8003dae:	430b      	orrs	r3, r1
 8003db0:	6353      	str	r3, [r2, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003db2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003db6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dbc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003dc0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003dc4:	f042 0201 	orr.w	r2, r2, #1
 8003dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3730      	adds	r7, #48	@ 0x30
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e239      	b.n	800425c <HAL_RCC_ClockConfig+0x488>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003de8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003dec:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d919      	bls.n	8003e30 <HAL_RCC_ClockConfig+0x5c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e00:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f023 010f 	bic.w	r1, r3, #15
 8003e0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e0e:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e1c:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x5c>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e215      	b.n	800425c <HAL_RCC_ClockConfig+0x488>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d019      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x9c>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003e44:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d90e      	bls.n	8003e70 <HAL_RCC_ClockConfig+0x9c>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e52:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003e56:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003e68:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	619a      	str	r2, [r3, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d019      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0xdc>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003e84:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d90e      	bls.n	8003eb0 <HAL_RCC_ClockConfig+0xdc>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e92:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003e96:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695a      	ldr	r2, [r3, #20]
 8003ea4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003ea8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003eac:	430a      	orrs	r2, r1
 8003eae:	61da      	str	r2, [r3, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0310 	and.w	r3, r3, #16
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d019      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x11c>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699a      	ldr	r2, [r3, #24]
 8003ec0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003ec4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d90e      	bls.n	8003ef0 <HAL_RCC_ClockConfig+0x11c>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ed2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003ed6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699a      	ldr	r2, [r3, #24]
 8003ee4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003ee8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003eec:	430a      	orrs	r2, r1
 8003eee:	61da      	str	r2, [r3, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d019      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x15c>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69da      	ldr	r2, [r3, #28]
 8003f00:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003f04:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d90e      	bls.n	8003f30 <HAL_RCC_ClockConfig+0x15c>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f12:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003f16:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003f28:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	621a      	str	r2, [r3, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d019      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x19c>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003f44:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d90e      	bls.n	8003f70 <HAL_RCC_ClockConfig+0x19c>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f52:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003f56:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	f023 010f 	bic.w	r1, r3, #15
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003f68:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	619a      	str	r2, [r3, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d070      	beq.n	800405e <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f7c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003f80:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003f92:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003f96:	430a      	orrs	r2, r1
 8003f98:	619a      	str	r2, [r3, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d10a      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x1e4>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fa2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003fa6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d12a      	bne.n	800400a <HAL_RCC_ClockConfig+0x236>
      {
        return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e151      	b.n	800425c <HAL_RCC_ClockConfig+0x488>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d10a      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0x202>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fc0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003fc4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d11b      	bne.n	800400a <HAL_RCC_ClockConfig+0x236>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e142      	b.n	800425c <HAL_RCC_ClockConfig+0x488>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d10a      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0x220>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003fde:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003fe2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10c      	bne.n	800400a <HAL_RCC_ClockConfig+0x236>
      {
        return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e133      	b.n	800425c <HAL_RCC_ClockConfig+0x488>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ff4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003ff8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_RCC_ClockConfig+0x236>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e128      	b.n	800425c <HAL_RCC_ClockConfig+0x488>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800400a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800400e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f023 0107 	bic.w	r1, r3, #7
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004020:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004024:	430a      	orrs	r2, r1
 8004026:	611a      	str	r2, [r3, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004028:	f7fd fc42 	bl	80018b0 <HAL_GetTick>
 800402c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402e:	e00a      	b.n	8004046 <HAL_RCC_ClockConfig+0x272>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004030:	f7fd fc3e 	bl	80018b0 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800403e:	4293      	cmp	r3, r2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_ClockConfig+0x272>
      {
        return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e10a      	b.n	800425c <HAL_RCC_ClockConfig+0x488>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004046:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800404a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	429a      	cmp	r2, r3
 800405c:	d1e8      	bne.n	8004030 <HAL_RCC_ClockConfig+0x25c>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d019      	beq.n	800409e <HAL_RCC_ClockConfig+0x2ca>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004072:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	429a      	cmp	r2, r3
 800407e:	d20e      	bcs.n	800409e <HAL_RCC_ClockConfig+0x2ca>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004080:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004084:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	f023 010f 	bic.w	r1, r3, #15
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004096:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800409a:	430a      	orrs	r2, r1
 800409c:	619a      	str	r2, [r3, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800409e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80040a2:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d219      	bcs.n	80040e6 <HAL_RCC_ClockConfig+0x312>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80040b6:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f023 010f 	bic.w	r1, r3, #15
 80040c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80040c4:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80040d2:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d001      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x312>
    {
      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e0ba      	b.n	800425c <HAL_RCC_ClockConfig+0x488>
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d019      	beq.n	8004126 <HAL_RCC_ClockConfig+0x352>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80040fa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004104:	429a      	cmp	r2, r3
 8004106:	d20e      	bcs.n	8004126 <HAL_RCC_ClockConfig+0x352>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004108:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800410c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800411e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004122:	430a      	orrs	r2, r1
 8004124:	619a      	str	r2, [r3, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d019      	beq.n	8004166 <HAL_RCC_ClockConfig+0x392>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800413a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004144:	429a      	cmp	r2, r3
 8004146:	d20e      	bcs.n	8004166 <HAL_RCC_ClockConfig+0x392>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004148:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800414c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800415e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004162:	430a      	orrs	r2, r1
 8004164:	61da      	str	r2, [r3, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0310 	and.w	r3, r3, #16
 800416e:	2b00      	cmp	r3, #0
 8004170:	d019      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x3d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800417a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004184:	429a      	cmp	r2, r3
 8004186:	d20e      	bcs.n	80041a6 <HAL_RCC_ClockConfig+0x3d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004188:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800418c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800419e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80041a2:	430a      	orrs	r2, r1
 80041a4:	61da      	str	r2, [r3, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d019      	beq.n	80041e6 <HAL_RCC_ClockConfig+0x412>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69da      	ldr	r2, [r3, #28]
 80041b6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80041ba:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d20e      	bcs.n	80041e6 <HAL_RCC_ClockConfig+0x412>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041c8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80041cc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69da      	ldr	r2, [r3, #28]
 80041da:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80041de:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80041e2:	430a      	orrs	r2, r1
 80041e4:	621a      	str	r2, [r3, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041e6:	f000 f83d 	bl	8004264 <HAL_RCC_GetSysClockFreq>
 80041ea:	4601      	mov	r1, r0
 80041ec:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80041f0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	0a1b      	lsrs	r3, r3, #8
 80041f8:	f003 020f 	and.w	r2, r3, #15
 80041fc:	f249 0390 	movw	r3, #37008	@ 0x9090
 8004200:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8004204:	5c9b      	ldrb	r3, [r3, r2]
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	fa21 f303 	lsr.w	r3, r1, r3
 800420e:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004210:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004214:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	f003 020f 	and.w	r2, r3, #15
 800421e:	f249 0390 	movw	r3, #37008	@ 0x9090
 8004222:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8004226:	5c9b      	ldrb	r3, [r3, r2]
 8004228:	f003 031f 	and.w	r3, r3, #31
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	40da      	lsrs	r2, r3
 8004230:	f240 0304 	movw	r3, #4
 8004234:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8004238:	601a      	str	r2, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800423a:	f240 0300 	movw	r3, #0
 800423e:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004246:	f240 0308 	movw	r3, #8
 800424a:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f7fd fad9 	bl	8001808 <HAL_InitTick>
 8004256:	4603      	mov	r3, r0
 8004258:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800425a:	7bfb      	ldrb	r3, [r7, #15]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004264:	b480      	push	{r7}
 8004266:	b089      	sub	sp, #36	@ 0x24
 8004268:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800426a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800426e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004278:	2b18      	cmp	r3, #24
 800427a:	f200 81a5 	bhi.w	80045c8 <HAL_RCC_GetSysClockFreq+0x364>
 800427e:	a201      	add	r2, pc, #4	@ (adr r2, 8004284 <HAL_RCC_GetSysClockFreq+0x20>)
 8004280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004284:	080042e9 	.word	0x080042e9
 8004288:	080045c9 	.word	0x080045c9
 800428c:	080045c9 	.word	0x080045c9
 8004290:	080045c9 	.word	0x080045c9
 8004294:	080045c9 	.word	0x080045c9
 8004298:	080045c9 	.word	0x080045c9
 800429c:	080045c9 	.word	0x080045c9
 80042a0:	080045c9 	.word	0x080045c9
 80042a4:	08004325 	.word	0x08004325
 80042a8:	080045c9 	.word	0x080045c9
 80042ac:	080045c9 	.word	0x080045c9
 80042b0:	080045c9 	.word	0x080045c9
 80042b4:	080045c9 	.word	0x080045c9
 80042b8:	080045c9 	.word	0x080045c9
 80042bc:	080045c9 	.word	0x080045c9
 80042c0:	080045c9 	.word	0x080045c9
 80042c4:	08004331 	.word	0x08004331
 80042c8:	080045c9 	.word	0x080045c9
 80042cc:	080045c9 	.word	0x080045c9
 80042d0:	080045c9 	.word	0x080045c9
 80042d4:	080045c9 	.word	0x080045c9
 80042d8:	080045c9 	.word	0x080045c9
 80042dc:	080045c9 	.word	0x080045c9
 80042e0:	080045c9 	.word	0x080045c9
 80042e4:	0800433d 	.word	0x0800433d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042e8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80042ec:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00e      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0xb4>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042fa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80042fe:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	08db      	lsrs	r3, r3, #3
 8004306:	f003 0203 	and.w	r2, r3, #3
 800430a:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800430e:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8004312:	40d3      	lsrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004316:	e15d      	b.n	80045d4 <HAL_RCC_GetSysClockFreq+0x370>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004318:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800431c:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8004320:	61bb      	str	r3, [r7, #24]
      break;
 8004322:	e157      	b.n	80045d4 <HAL_RCC_GetSysClockFreq+0x370>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004324:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8004328:	f2c0 033d 	movt	r3, #61	@ 0x3d
 800432c:	61bb      	str	r3, [r7, #24]
      break;
 800432e:	e151      	b.n	80045d4 <HAL_RCC_GetSysClockFreq+0x370>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004330:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8004334:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8004338:	61bb      	str	r3, [r7, #24]
      break;
 800433a:	e14b      	b.n	80045d4 <HAL_RCC_GetSysClockFreq+0x370>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800433c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004340:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800434c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004350:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004356:	091b      	lsrs	r3, r3, #4
 8004358:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800435c:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800435e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004362:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800436e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004372:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004378:	08db      	lsrs	r3, r3, #3
 800437a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	fb02 f303 	mul.w	r3, r2, r3
 8004384:	ee07 3a90 	vmov	s15, r3
 8004388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438c:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 8115 	beq.w	80045c2 <HAL_RCC_GetSysClockFreq+0x35e>
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b02      	cmp	r3, #2
 800439c:	f000 80a2 	beq.w	80044e4 <HAL_RCC_GetSysClockFreq+0x280>
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	f200 80c9 	bhi.w	800453a <HAL_RCC_GetSysClockFreq+0x2d6>
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_RCC_GetSysClockFreq+0x152>
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d06c      	beq.n	800448e <HAL_RCC_GetSysClockFreq+0x22a>
 80043b4:	e0c1      	b.n	800453a <HAL_RCC_GetSysClockFreq+0x2d6>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043b6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80043ba:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0320 	and.w	r3, r3, #32
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d037      	beq.n	8004438 <HAL_RCC_GetSysClockFreq+0x1d4>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043c8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80043cc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	08db      	lsrs	r3, r3, #3
 80043d4:	f003 0203 	and.w	r2, r3, #3
 80043d8:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80043dc:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 80043e0:	40d3      	lsrs	r3, r2
 80043e2:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	ee07 3a90 	vmov	s15, r3
 80043ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	ee07 3a90 	vmov	s15, r3
 80043f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043fc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004400:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004412:	ed97 6a02 	vldr	s12, [r7, #8]
 8004416:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 800441a:	ee05 3a90 	vmov	s11, r3
 800441e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800442a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800442e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004432:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004436:	e0ab      	b.n	8004590 <HAL_RCC_GetSysClockFreq+0x32c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004442:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8004446:	f6c4 4374 	movt	r3, #19572	@ 0x4c74
 800444a:	ee06 3a90 	vmov	s13, r3
 800444e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004452:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004456:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800445a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004460:	ee07 3a90 	vmov	s15, r3
 8004464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004468:	ed97 6a02 	vldr	s12, [r7, #8]
 800446c:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8004470:	ee05 3a90 	vmov	s11, r3
 8004474:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004478:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800447c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004480:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004488:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800448c:	e080      	b.n	8004590 <HAL_RCC_GetSysClockFreq+0x32c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	ee07 3a90 	vmov	s15, r3
 8004494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004498:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800449c:	f6c4 2374 	movt	r3, #19060	@ 0x4a74
 80044a0:	ee06 3a90 	vmov	s13, r3
 80044a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044a8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80044ac:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80044b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044be:	ed97 6a02 	vldr	s12, [r7, #8]
 80044c2:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 80044c6:	ee05 3a90 	vmov	s11, r3
 80044ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044e2:	e055      	b.n	8004590 <HAL_RCC_GetSysClockFreq+0x32c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	ee07 3a90 	vmov	s15, r3
 80044ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ee:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80044f2:	f6c4 23f4 	movt	r3, #19188	@ 0x4af4
 80044f6:	ee06 3a90 	vmov	s13, r3
 80044fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044fe:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004502:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450c:	ee07 3a90 	vmov	s15, r3
 8004510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004514:	ed97 6a02 	vldr	s12, [r7, #8]
 8004518:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 800451c:	ee05 3a90 	vmov	s11, r3
 8004520:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004524:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004528:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800452c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004534:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004538:	e02a      	b.n	8004590 <HAL_RCC_GetSysClockFreq+0x32c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	ee07 3a90 	vmov	s15, r3
 8004540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004544:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8004548:	f6c4 2374 	movt	r3, #19060	@ 0x4a74
 800454c:	ee06 3a90 	vmov	s13, r3
 8004550:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004554:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004558:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800455c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456a:	ed97 6a02 	vldr	s12, [r7, #8]
 800456e:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8004572:	ee05 3a90 	vmov	s11, r3
 8004576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800457a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800457e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800458a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800458e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004590:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004594:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459a:	0a5b      	lsrs	r3, r3, #9
 800459c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045a0:	3301      	adds	r3, #1
 80045a2:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80045b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ba:	ee17 3a90 	vmov	r3, s15
 80045be:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_GetSysClockFreq+0x370>
        sysclockfreq = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	61bb      	str	r3, [r7, #24]
      break;
 80045c6:	e005      	b.n	80045d4 <HAL_RCC_GetSysClockFreq+0x370>

    default:
      sysclockfreq = CSI_VALUE;
 80045c8:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80045cc:	f2c0 033d 	movt	r3, #61	@ 0x3d
 80045d0:	61bb      	str	r3, [r7, #24]
      break;
 80045d2:	bf00      	nop
  }

  return sysclockfreq;
 80045d4:	69bb      	ldr	r3, [r7, #24]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3724      	adds	r7, #36	@ 0x24
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop

080045e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80045ea:	f7ff fe3b 	bl	8004264 <HAL_RCC_GetSysClockFreq>
 80045ee:	4601      	mov	r1, r0
 80045f0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80045f4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	0a1b      	lsrs	r3, r3, #8
 80045fc:	f003 020f 	and.w	r2, r3, #15
 8004600:	f249 0390 	movw	r3, #37008	@ 0x9090
 8004604:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8004608:	5c9b      	ldrb	r3, [r3, r2]
 800460a:	f003 031f 	and.w	r3, r3, #31
 800460e:	fa21 f303 	lsr.w	r3, r1, r3
 8004612:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004614:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004618:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	f003 020f 	and.w	r2, r3, #15
 8004622:	f249 0390 	movw	r3, #37008	@ 0x9090
 8004626:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800462a:	5c9b      	ldrb	r3, [r3, r2]
 800462c:	f003 031f 	and.w	r3, r3, #31
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	40da      	lsrs	r2, r3
 8004634:	f240 0304 	movw	r3, #4
 8004638:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800463c:	601a      	str	r2, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800463e:	f240 0300 	movw	r3, #0
 8004642:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800464a:	f240 0304 	movw	r3, #4
 800464e:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8004652:	681b      	ldr	r3, [r3, #0]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004660:	f7ff ffc0 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 8004664:	4601      	mov	r1, r0
 8004666:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800466a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	091b      	lsrs	r3, r3, #4
 8004672:	f003 0207 	and.w	r2, r3, #7
 8004676:	f249 0390 	movw	r3, #37008	@ 0x9090
 800467a:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800467e:	5c9b      	ldrb	r3, [r3, r2]
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004688:	4618      	mov	r0, r3
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004690:	f7ff ffa8 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 8004694:	4601      	mov	r1, r0
 8004696:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800469a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	0a1b      	lsrs	r3, r3, #8
 80046a2:	f003 0207 	and.w	r2, r3, #7
 80046a6:	f249 0390 	movw	r3, #37008	@ 0x9090
 80046aa:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80046ae:	5c9b      	ldrb	r3, [r3, r2]
 80046b0:	f003 031f 	and.w	r3, r3, #31
 80046b4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046c0:	b0ca      	sub	sp, #296	@ 0x128
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046c8:	2300      	movs	r3, #0
 80046ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046ce:	2300      	movs	r3, #0
 80046d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80046e0:	2500      	movs	r5, #0
 80046e2:	ea54 0305 	orrs.w	r3, r4, r5
 80046e6:	d055      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80046e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046f2:	d035      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80046f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046f8:	d82e      	bhi.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80046fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046fe:	d020      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8004700:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004704:	d828      	bhi.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800470a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800470e:	d00d      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004710:	e022      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004712:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004716:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800471a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471c:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004720:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004728:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800472a:	e01a      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xa6>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800472c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004730:	3308      	adds	r3, #8
 8004732:	2102      	movs	r1, #2
 8004734:	4618      	mov	r0, r3
 8004736:	f002 fe41 	bl	80073bc <RCCEx_PLL2_Config>
 800473a:	4603      	mov	r3, r0
 800473c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004740:	e00f      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xa6>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004746:	3328      	adds	r3, #40	@ 0x28
 8004748:	2102      	movs	r1, #2
 800474a:	4618      	mov	r0, r3
 800474c:	f002 ff34 	bl	80075b8 <RCCEx_PLL3_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004756:	e004      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xa6>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800475e:	e000      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xa6>
        break;
 8004760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004766:	2b00      	cmp	r3, #0
 8004768:	d110      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xd0>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800476a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800476e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004774:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800477e:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004782:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004786:	430b      	orrs	r3, r1
 8004788:	6513      	str	r3, [r2, #80]	@ 0x50
 800478a:	e003      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004790:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80047a0:	f04f 0900 	mov.w	r9, #0
 80047a4:	ea58 0309 	orrs.w	r3, r8, r9
 80047a8:	d053      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80047aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d830      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80047b4:	a201      	add	r2, pc, #4	@ (adr r2, 80047bc <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80047b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ba:	bf00      	nop
 80047bc:	080047d1 	.word	0x080047d1
 80047c0:	080047eb 	.word	0x080047eb
 80047c4:	08004801 	.word	0x08004801
 80047c8:	0800481f 	.word	0x0800481f
 80047cc:	0800481f 	.word	0x0800481f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047d0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80047d4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80047d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047da:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80047de:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80047e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047e8:	e01a      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x164>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ee:	3308      	adds	r3, #8
 80047f0:	2100      	movs	r1, #0
 80047f2:	4618      	mov	r0, r3
 80047f4:	f002 fde2 	bl	80073bc <RCCEx_PLL2_Config>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047fe:	e00f      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x164>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004804:	3328      	adds	r3, #40	@ 0x28
 8004806:	2100      	movs	r1, #0
 8004808:	4618      	mov	r0, r3
 800480a:	f002 fed5 	bl	80075b8 <RCCEx_PLL3_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004814:	e004      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x164>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800481c:	e000      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x164>
        break;
 800481e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004820:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004824:	2b00      	cmp	r3, #0
 8004826:	d110      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x18e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004828:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800482c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004832:	f023 0107 	bic.w	r1, r3, #7
 8004836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483c:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004840:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004844:	430b      	orrs	r3, r1
 8004846:	6513      	str	r3, [r2, #80]	@ 0x50
 8004848:	e003      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x196>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800484e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800485e:	f04f 0b00 	mov.w	fp, #0
 8004862:	ea5a 030b 	orrs.w	r3, sl, fp
 8004866:	d058      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800486e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004872:	d036      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
 8004874:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004878:	d82f      	bhi.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800487a:	2bc0      	cmp	r3, #192	@ 0xc0
 800487c:	d033      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800487e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004880:	d82b      	bhi.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004882:	2b80      	cmp	r3, #128	@ 0x80
 8004884:	d01e      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004886:	2b80      	cmp	r3, #128	@ 0x80
 8004888:	d827      	bhi.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800488e:	2b40      	cmp	r3, #64	@ 0x40
 8004890:	d00d      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8004892:	e022      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004894:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004898:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800489c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489e:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80048a2:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80048a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80048ac:	e01c      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b2:	3308      	adds	r3, #8
 80048b4:	2100      	movs	r1, #0
 80048b6:	4618      	mov	r0, r3
 80048b8:	f002 fd80 	bl	80073bc <RCCEx_PLL2_Config>
 80048bc:	4603      	mov	r3, r0
 80048be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80048c2:	e011      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c8:	3328      	adds	r3, #40	@ 0x28
 80048ca:	2100      	movs	r1, #0
 80048cc:	4618      	mov	r0, r3
 80048ce:	f002 fe73 	bl	80075b8 <RCCEx_PLL3_Config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80048d8:	e006      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048e0:	e002      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
        break;
 80048e2:	bf00      	nop
 80048e4:	e000      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
        break;
 80048e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d110      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x256>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80048f0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80048f4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80048f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048fa:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004904:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004908:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 800490c:	430b      	orrs	r3, r1
 800490e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004910:	e003      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004916:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800491a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004922:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004926:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800492a:	2300      	movs	r3, #0
 800492c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004930:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004934:	460b      	mov	r3, r1
 8004936:	4313      	orrs	r3, r2
 8004938:	d05f      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800493a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004942:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004946:	d03b      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004948:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800494c:	d834      	bhi.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800494e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004952:	d037      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004954:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004958:	d82e      	bhi.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800495a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800495e:	d020      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8004960:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004964:	d828      	bhi.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800496a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800496e:	d00d      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004970:	e022      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004972:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004976:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800497a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497c:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004980:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004988:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800498a:	e01c      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x30a>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800498c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004990:	3308      	adds	r3, #8
 8004992:	2100      	movs	r1, #0
 8004994:	4618      	mov	r0, r3
 8004996:	f002 fd11 	bl	80073bc <RCCEx_PLL2_Config>
 800499a:	4603      	mov	r3, r0
 800499c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80049a0:	e011      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x30a>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a6:	3328      	adds	r3, #40	@ 0x28
 80049a8:	2100      	movs	r1, #0
 80049aa:	4618      	mov	r0, r3
 80049ac:	f002 fe04 	bl	80075b8 <RCCEx_PLL3_Config>
 80049b0:	4603      	mov	r3, r0
 80049b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049b6:	e006      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049be:	e002      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
        break;
 80049c0:	bf00      	nop
 80049c2:	e000      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
        break;
 80049c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d111      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80049ce:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80049d2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80049d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80049dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80049e4:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80049e8:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80049ec:	430b      	orrs	r3, r1
 80049ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80049f0:	e003      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x33e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80049fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004a06:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004a10:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004a14:	460b      	mov	r3, r1
 8004a16:	4313      	orrs	r3, r2
 8004a18:	d05f      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004a22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a26:	d03b      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004a28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a2c:	d834      	bhi.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8004a2e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a32:	d037      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004a34:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a38:	d82e      	bhi.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8004a3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a3e:	d020      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8004a40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a44:	d828      	bhi.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8004a4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a4e:	d00d      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8004a50:	e022      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a52:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004a56:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5c:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004a60:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a6a:	e01c      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a70:	3308      	adds	r3, #8
 8004a72:	2100      	movs	r1, #0
 8004a74:	4618      	mov	r0, r3
 8004a76:	f002 fca1 	bl	80073bc <RCCEx_PLL2_Config>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004a80:	e011      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a86:	3328      	adds	r3, #40	@ 0x28
 8004a88:	2100      	movs	r1, #0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f002 fd94 	bl	80075b8 <RCCEx_PLL3_Config>
 8004a90:	4603      	mov	r3, r0
 8004a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a96:	e006      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a9e:	e002      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        break;
 8004aa0:	bf00      	nop
 8004aa2:	e000      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        break;
 8004aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d111      	bne.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004aae:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004ab2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004ac4:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004ac8:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004acc:	430b      	orrs	r3, r1
 8004ace:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ad0:	e003      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x41e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ad6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004ae6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004aea:	2300      	movs	r3, #0
 8004aec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004af0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004af4:	460b      	mov	r3, r1
 8004af6:	4313      	orrs	r3, r2
 8004af8:	d046      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b00:	2b30      	cmp	r3, #48	@ 0x30
 8004b02:	d025      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004b04:	2b30      	cmp	r3, #48	@ 0x30
 8004b06:	d81f      	bhi.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004b08:	2b20      	cmp	r3, #32
 8004b0a:	d012      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d81b      	bhi.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01f      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004b14:	2b10      	cmp	r3, #16
 8004b16:	d117      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b18:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004b1c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b22:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004b26:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004b30:	e011      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x49a>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b36:	3308      	adds	r3, #8
 8004b38:	2102      	movs	r1, #2
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f002 fc3e 	bl	80073bc <RCCEx_PLL2_Config>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004b46:	e006      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x49a>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b4e:	e002      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x49a>
        break;
 8004b50:	bf00      	nop
 8004b52:	e000      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x49a>
        break;
 8004b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d110      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b5e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004b62:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b68:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b72:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004b76:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004b7a:	430b      	orrs	r3, r1
 8004b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b7e:	e003      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b90:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004b94:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004b9e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	d05d      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bb2:	d03b      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8004bb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bb8:	d834      	bhi.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x568>
 8004bba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bbe:	d037      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8004bc0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bc4:	d82e      	bhi.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x568>
 8004bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bca:	d020      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x552>
 8004bcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bd0:	d828      	bhi.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x568>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bda:	d00d      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8004bdc:	e022      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x568>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bde:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004be2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be8:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004bec:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004bf6:	e01c      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x576>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfc:	3308      	adds	r3, #8
 8004bfe:	2100      	movs	r1, #0
 8004c00:	4618      	mov	r0, r3
 8004c02:	f002 fbdb 	bl	80073bc <RCCEx_PLL2_Config>
 8004c06:	4603      	mov	r3, r0
 8004c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c0c:	e011      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x576>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c12:	3328      	adds	r3, #40	@ 0x28
 8004c14:	2100      	movs	r1, #0
 8004c16:	4618      	mov	r0, r3
 8004c18:	f002 fcce 	bl	80075b8 <RCCEx_PLL3_Config>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c22:	e006      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x576>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c2a:	e002      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x576>
        break;
 8004c2c:	bf00      	nop
 8004c2e:	e000      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x576>
        break;
 8004c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d110      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c3a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004c3e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c44:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c4e:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004c52:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004c56:	430b      	orrs	r3, r1
 8004c58:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c5a:	e003      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004c70:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c74:	2300      	movs	r3, #0
 8004c76:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004c7a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4313      	orrs	r3, r2
 8004c82:	d059      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c8e:	d033      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8004c90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c94:	d82c      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004c96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c9a:	d02f      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x640>
 8004c9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ca0:	d826      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004ca2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ca6:	d02b      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x644>
 8004ca8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cac:	d820      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004cae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cb2:	d012      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x61e>
 8004cb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cb8:	d81a      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d022      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004cbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cc2:	d115      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x634>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc8:	3308      	adds	r3, #8
 8004cca:	2101      	movs	r1, #1
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f002 fb75 	bl	80073bc <RCCEx_PLL2_Config>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004cd8:	e015      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cde:	3328      	adds	r3, #40	@ 0x28
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f002 fc68 	bl	80075b8 <RCCEx_PLL3_Config>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004cee:	e00a      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x64a>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cf6:	e006      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x64a>
        break;
 8004cf8:	bf00      	nop
 8004cfa:	e004      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x64a>
        break;
 8004cfc:	bf00      	nop
 8004cfe:	e002      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x64a>
        break;
 8004d00:	bf00      	nop
 8004d02:	e000      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x64a>
        break;
 8004d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d110      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d0e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004d12:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d18:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d22:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004d26:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004d2a:	430b      	orrs	r3, r1
 8004d2c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d2e:	e003      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004d44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d4e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4313      	orrs	r3, r2
 8004d56:	d05b      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x754>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d64:	d033      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x712>
 8004d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d6a:	d82c      	bhi.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8004d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d70:	d02f      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x716>
 8004d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d76:	d826      	bhi.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8004d78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d7c:	d02b      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x71a>
 8004d7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d82:	d820      	bhi.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8004d84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d88:	d012      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8004d8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d8e:	d81a      	bhi.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d022      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8004d94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d98:	d115      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d9e:	3308      	adds	r3, #8
 8004da0:	2101      	movs	r1, #1
 8004da2:	4618      	mov	r0, r3
 8004da4:	f002 fb0a 	bl	80073bc <RCCEx_PLL2_Config>
 8004da8:	4603      	mov	r3, r0
 8004daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004dae:	e015      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x720>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db4:	3328      	adds	r3, #40	@ 0x28
 8004db6:	2101      	movs	r1, #1
 8004db8:	4618      	mov	r0, r3
 8004dba:	f002 fbfd 	bl	80075b8 <RCCEx_PLL3_Config>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004dc4:	e00a      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x720>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dcc:	e006      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x720>
        break;
 8004dce:	bf00      	nop
 8004dd0:	e004      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x720>
        break;
 8004dd2:	bf00      	nop
 8004dd4:	e002      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x720>
        break;
 8004dd6:	bf00      	nop
 8004dd8:	e000      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x720>
        break;
 8004dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d111      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004de4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004de8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004dfa:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004dfe:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004e02:	430b      	orrs	r3, r1
 8004e04:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e06:	e003      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x754>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e20:	2300      	movs	r3, #0
 8004e22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004e26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	d043      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e3a:	d014      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8004e3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e40:	d81c      	bhi.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d01e      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8004e46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e4a:	d117      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e4c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004e50:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e56:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004e5a:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e64:	e00f      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x7ca>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6a:	3308      	adds	r3, #8
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f002 faa4 	bl	80073bc <RCCEx_PLL2_Config>
 8004e74:	4603      	mov	r3, r0
 8004e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e7a:	e004      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x7ca>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e82:	e000      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x7ca>
        break;
 8004e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d110      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e8e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004e92:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e98:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea2:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004ea6:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004eaa:	430b      	orrs	r3, r1
 8004eac:	6513      	str	r3, [r2, #80]	@ 0x50
 8004eae:	e003      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004ece:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	d045      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d822      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8004ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8004ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee8:	08004f31 	.word	0x08004f31
 8004eec:	08004ef9 	.word	0x08004ef9
 8004ef0:	08004f13 	.word	0x08004f13
 8004ef4:	08004f31 	.word	0x08004f31
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ef8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004efc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f02:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004f06:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f10:	e00f      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x876>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f16:	3308      	adds	r3, #8
 8004f18:	2102      	movs	r1, #2
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f002 fa4e 	bl	80073bc <RCCEx_PLL2_Config>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f26:	e004      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x876>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f2e:	e000      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x876>
        break;
 8004f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d110      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f3a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004f3e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004f42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f44:	f023 0103 	bic.w	r1, r3, #3
 8004f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f4e:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004f52:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004f56:	430b      	orrs	r3, r1
 8004f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f5a:	e003      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004f70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f74:	2300      	movs	r3, #0
 8004f76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f000 80d0 	beq.w	8005126 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f86:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8004f8a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f44f 4290 	mov.w	r2, #18432	@ 0x4800
 8004f94:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f9e:	f7fc fc87 	bl	80018b0 <HAL_GetTick>
 8004fa2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fa6:	e00b      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x904>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fa8:	f7fc fc82 	bl	80018b0 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b64      	cmp	r3, #100	@ 0x64
 8004fb6:	d903      	bls.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x904>
      {
        ret = HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x916>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fc0:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8004fc4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0ea      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      }
    }

    if (ret == HAL_OK)
 8004fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f040 80a1 	bne.w	800511e <HAL_RCCEx_PeriphCLKConfig+0xa62>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004fdc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004fe0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004fe4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004fee:	4053      	eors	r3, r2
 8004ff0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d027      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ff8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004ffc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005006:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800500a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800500e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005014:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005018:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 800501c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005020:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005022:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005026:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800502a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800502c:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005030:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005034:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005038:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800503a:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 800503e:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005042:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005046:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800504c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005050:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005054:	d11b      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005056:	f7fc fc2b 	bl	80018b0 <HAL_GetTick>
 800505a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800505e:	e00d      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x9c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005060:	f7fc fc26 	bl	80018b0 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800506a:	1ad2      	subs	r2, r2, r3
 800506c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005070:	429a      	cmp	r2, r3
 8005072:	d903      	bls.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x9c0>
          {
            ret = HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800507a:	e008      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800507c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005080:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0e8      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
          }
        }
      }

      if (ret == HAL_OK)
 800508e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005092:	2b00      	cmp	r3, #0
 8005094:	d13e      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xa58>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800509a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800509e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050a6:	d117      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 80050a8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80050ac:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80050b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050be:	091a      	lsrs	r2, r3, #4
 80050c0:	f64f 73cf 	movw	r3, #65487	@ 0xffcf
 80050c4:	f2c0 03ff 	movt	r3, #255	@ 0xff
 80050c8:	4013      	ands	r3, r2
 80050ca:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80050ce:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80050d2:	430b      	orrs	r3, r1
 80050d4:	6113      	str	r3, [r2, #16]
 80050d6:	e00b      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80050d8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80050dc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80050e6:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80050ea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80050ee:	6113      	str	r3, [r2, #16]
 80050f0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80050f4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80050f8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80050fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005106:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 800510a:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 800510e:	430b      	orrs	r3, r1
 8005110:	6713      	str	r3, [r2, #112]	@ 0x70
 8005112:	e008      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005114:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005118:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800511c:	e003      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800511e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	f002 0301 	and.w	r3, r2, #1
 8005132:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005136:	2300      	movs	r3, #0
 8005138:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800513c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005140:	460b      	mov	r3, r1
 8005142:	4313      	orrs	r3, r2
 8005144:	f000 808e 	beq.w	8005264 <HAL_RCCEx_PeriphCLKConfig+0xba8>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800514c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800514e:	2b28      	cmp	r3, #40	@ 0x28
 8005150:	d86a      	bhi.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xb6c>
 8005152:	a201      	add	r2, pc, #4	@ (adr r2, 8005158 <HAL_RCCEx_PeriphCLKConfig+0xa9c>)
 8005154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005158:	08005231 	.word	0x08005231
 800515c:	08005229 	.word	0x08005229
 8005160:	08005229 	.word	0x08005229
 8005164:	08005229 	.word	0x08005229
 8005168:	08005229 	.word	0x08005229
 800516c:	08005229 	.word	0x08005229
 8005170:	08005229 	.word	0x08005229
 8005174:	08005229 	.word	0x08005229
 8005178:	080051fd 	.word	0x080051fd
 800517c:	08005229 	.word	0x08005229
 8005180:	08005229 	.word	0x08005229
 8005184:	08005229 	.word	0x08005229
 8005188:	08005229 	.word	0x08005229
 800518c:	08005229 	.word	0x08005229
 8005190:	08005229 	.word	0x08005229
 8005194:	08005229 	.word	0x08005229
 8005198:	08005213 	.word	0x08005213
 800519c:	08005229 	.word	0x08005229
 80051a0:	08005229 	.word	0x08005229
 80051a4:	08005229 	.word	0x08005229
 80051a8:	08005229 	.word	0x08005229
 80051ac:	08005229 	.word	0x08005229
 80051b0:	08005229 	.word	0x08005229
 80051b4:	08005229 	.word	0x08005229
 80051b8:	08005231 	.word	0x08005231
 80051bc:	08005229 	.word	0x08005229
 80051c0:	08005229 	.word	0x08005229
 80051c4:	08005229 	.word	0x08005229
 80051c8:	08005229 	.word	0x08005229
 80051cc:	08005229 	.word	0x08005229
 80051d0:	08005229 	.word	0x08005229
 80051d4:	08005229 	.word	0x08005229
 80051d8:	08005231 	.word	0x08005231
 80051dc:	08005229 	.word	0x08005229
 80051e0:	08005229 	.word	0x08005229
 80051e4:	08005229 	.word	0x08005229
 80051e8:	08005229 	.word	0x08005229
 80051ec:	08005229 	.word	0x08005229
 80051f0:	08005229 	.word	0x08005229
 80051f4:	08005229 	.word	0x08005229
 80051f8:	08005231 	.word	0x08005231
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005200:	3308      	adds	r3, #8
 8005202:	2101      	movs	r1, #1
 8005204:	4618      	mov	r0, r3
 8005206:	f002 f8d9 	bl	80073bc <RCCEx_PLL2_Config>
 800520a:	4603      	mov	r3, r0
 800520c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005210:	e00f      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xb76>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005216:	3328      	adds	r3, #40	@ 0x28
 8005218:	2101      	movs	r1, #1
 800521a:	4618      	mov	r0, r3
 800521c:	f002 f9cc 	bl	80075b8 <RCCEx_PLL3_Config>
 8005220:	4603      	mov	r3, r0
 8005222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005226:	e004      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800522e:	e000      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        break;
 8005230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005236:	2b00      	cmp	r3, #0
 8005238:	d110      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800523a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800523e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005244:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800524c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800524e:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005252:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005256:	430b      	orrs	r3, r1
 8005258:	6553      	str	r3, [r2, #84]	@ 0x54
 800525a:	e003      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xba8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005260:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526c:	f002 0302 	and.w	r3, r2, #2
 8005270:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005274:	2300      	movs	r3, #0
 8005276:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800527a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800527e:	460b      	mov	r3, r1
 8005280:	4313      	orrs	r3, r2
 8005282:	d047      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xc58>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005288:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800528a:	2b05      	cmp	r3, #5
 800528c:	d824      	bhi.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
 800528e:	a201      	add	r2, pc, #4	@ (adr r2, 8005294 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005294:	080052e1 	.word	0x080052e1
 8005298:	080052ad 	.word	0x080052ad
 800529c:	080052c3 	.word	0x080052c3
 80052a0:	080052e1 	.word	0x080052e1
 80052a4:	080052e1 	.word	0x080052e1
 80052a8:	080052e1 	.word	0x080052e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b0:	3308      	adds	r3, #8
 80052b2:	2101      	movs	r1, #1
 80052b4:	4618      	mov	r0, r3
 80052b6:	f002 f881 	bl	80073bc <RCCEx_PLL2_Config>
 80052ba:	4603      	mov	r3, r0
 80052bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80052c0:	e00f      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c6:	3328      	adds	r3, #40	@ 0x28
 80052c8:	2101      	movs	r1, #1
 80052ca:	4618      	mov	r0, r3
 80052cc:	f002 f974 	bl	80075b8 <RCCEx_PLL3_Config>
 80052d0:	4603      	mov	r3, r0
 80052d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80052d6:	e004      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052de:	e000      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
        break;
 80052e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d110      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xc50>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80052ea:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80052ee:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80052f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f4:	f023 0107 	bic.w	r1, r3, #7
 80052f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052fe:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005302:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005306:	430b      	orrs	r3, r1
 8005308:	6553      	str	r3, [r2, #84]	@ 0x54
 800530a:	e003      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xc58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005310:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	f002 0304 	and.w	r3, r2, #4
 8005320:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005324:	2300      	movs	r3, #0
 8005326:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800532a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800532e:	460b      	mov	r3, r1
 8005330:	4313      	orrs	r3, r2
 8005332:	d04a      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005338:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800533c:	2b05      	cmp	r3, #5
 800533e:	d825      	bhi.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8005340:	a201      	add	r2, pc, #4	@ (adr r2, 8005348 <HAL_RCCEx_PeriphCLKConfig+0xc8c>)
 8005342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005346:	bf00      	nop
 8005348:	08005395 	.word	0x08005395
 800534c:	08005361 	.word	0x08005361
 8005350:	08005377 	.word	0x08005377
 8005354:	08005395 	.word	0x08005395
 8005358:	08005395 	.word	0x08005395
 800535c:	08005395 	.word	0x08005395
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005364:	3308      	adds	r3, #8
 8005366:	2101      	movs	r1, #1
 8005368:	4618      	mov	r0, r3
 800536a:	f002 f827 	bl	80073bc <RCCEx_PLL2_Config>
 800536e:	4603      	mov	r3, r0
 8005370:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005374:	e00f      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xcda>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800537a:	3328      	adds	r3, #40	@ 0x28
 800537c:	2101      	movs	r1, #1
 800537e:	4618      	mov	r0, r3
 8005380:	f002 f91a 	bl	80075b8 <RCCEx_PLL3_Config>
 8005384:	4603      	mov	r3, r0
 8005386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800538a:	e004      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xcda>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005392:	e000      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xcda>
        break;
 8005394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800539a:	2b00      	cmp	r3, #0
 800539c:	d111      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800539e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80053a2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80053a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a8:	f023 0107 	bic.w	r1, r3, #7
 80053ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053b4:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80053b8:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80053bc:	430b      	orrs	r3, r1
 80053be:	6593      	str	r3, [r2, #88]	@ 0x58
 80053c0:	e003      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d2:	f002 0320 	and.w	r3, r2, #32
 80053d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053da:	2300      	movs	r3, #0
 80053dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053e4:	460b      	mov	r3, r1
 80053e6:	4313      	orrs	r3, r2
 80053e8:	d05b      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80053ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053f6:	d033      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 80053f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053fc:	d82c      	bhi.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
 80053fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005402:	d02f      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0xda8>
 8005404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005408:	d826      	bhi.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
 800540a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800540e:	d02b      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8005410:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005414:	d820      	bhi.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
 8005416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800541a:	d012      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800541c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005420:	d81a      	bhi.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
 8005422:	2b00      	cmp	r3, #0
 8005424:	d022      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8005426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800542a:	d115      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800542c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005430:	3308      	adds	r3, #8
 8005432:	2100      	movs	r1, #0
 8005434:	4618      	mov	r0, r3
 8005436:	f001 ffc1 	bl	80073bc <RCCEx_PLL2_Config>
 800543a:	4603      	mov	r3, r0
 800543c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005440:	e015      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xdb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005446:	3328      	adds	r3, #40	@ 0x28
 8005448:	2102      	movs	r1, #2
 800544a:	4618      	mov	r0, r3
 800544c:	f002 f8b4 	bl	80075b8 <RCCEx_PLL3_Config>
 8005450:	4603      	mov	r3, r0
 8005452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005456:	e00a      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800545e:	e006      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 8005460:	bf00      	nop
 8005462:	e004      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 8005464:	bf00      	nop
 8005466:	e002      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 8005468:	bf00      	nop
 800546a:	e000      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 800546c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800546e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005472:	2b00      	cmp	r3, #0
 8005474:	d111      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0xdde>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005476:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800547a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800547e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005480:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800548c:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005490:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005494:	430b      	orrs	r3, r1
 8005496:	6553      	str	r3, [r2, #84]	@ 0x54
 8005498:	e003      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800549a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800549e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80054a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054aa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80054ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054b2:	2300      	movs	r3, #0
 80054b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80054b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80054bc:	460b      	mov	r3, r1
 80054be:	4313      	orrs	r3, r2
 80054c0:	d05b      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xebe>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80054c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054ca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80054ce:	d033      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
 80054d0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80054d4:	d82c      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80054d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054da:	d02f      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xe80>
 80054dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054e0:	d826      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80054e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054e6:	d02b      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xe84>
 80054e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054ec:	d820      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80054ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054f2:	d012      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xe5e>
 80054f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054f8:	d81a      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d022      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xe88>
 80054fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005502:	d115      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xe74>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005508:	3308      	adds	r3, #8
 800550a:	2100      	movs	r1, #0
 800550c:	4618      	mov	r0, r3
 800550e:	f001 ff55 	bl	80073bc <RCCEx_PLL2_Config>
 8005512:	4603      	mov	r3, r0
 8005514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005518:	e015      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xe8a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800551a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551e:	3328      	adds	r3, #40	@ 0x28
 8005520:	2102      	movs	r1, #2
 8005522:	4618      	mov	r0, r3
 8005524:	f002 f848 	bl	80075b8 <RCCEx_PLL3_Config>
 8005528:	4603      	mov	r3, r0
 800552a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800552e:	e00a      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005536:	e006      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
        break;
 8005538:	bf00      	nop
 800553a:	e004      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
        break;
 800553c:	bf00      	nop
 800553e:	e002      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
        break;
 8005540:	bf00      	nop
 8005542:	e000      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
        break;
 8005544:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005546:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800554a:	2b00      	cmp	r3, #0
 800554c:	d111      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800554e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005552:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005558:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800555c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005560:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005564:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005568:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 800556c:	430b      	orrs	r3, r1
 800556e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005570:	e003      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xebe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005576:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800557a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005582:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005586:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800558a:	2300      	movs	r3, #0
 800558c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005590:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005594:	460b      	mov	r3, r1
 8005596:	4313      	orrs	r3, r2
 8005598:	d05b      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xf96>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800559a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800559e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055a2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80055a6:	d033      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xf54>
 80055a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80055ac:	d82c      	bhi.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xf4c>
 80055ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055b2:	d02f      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0xf58>
 80055b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055b8:	d826      	bhi.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xf4c>
 80055ba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80055be:	d02b      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xf5c>
 80055c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80055c4:	d820      	bhi.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xf4c>
 80055c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055ca:	d012      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
 80055cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055d0:	d81a      	bhi.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xf4c>
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d022      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xf60>
 80055d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055da:	d115      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xf4c>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e0:	3308      	adds	r3, #8
 80055e2:	2100      	movs	r1, #0
 80055e4:	4618      	mov	r0, r3
 80055e6:	f001 fee9 	bl	80073bc <RCCEx_PLL2_Config>
 80055ea:	4603      	mov	r3, r0
 80055ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80055f0:	e015      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xf62>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f6:	3328      	adds	r3, #40	@ 0x28
 80055f8:	2102      	movs	r1, #2
 80055fa:	4618      	mov	r0, r3
 80055fc:	f001 ffdc 	bl	80075b8 <RCCEx_PLL3_Config>
 8005600:	4603      	mov	r3, r0
 8005602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005606:	e00a      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xf62>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800560e:	e006      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xf62>
        break;
 8005610:	bf00      	nop
 8005612:	e004      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xf62>
        break;
 8005614:	bf00      	nop
 8005616:	e002      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xf62>
        break;
 8005618:	bf00      	nop
 800561a:	e000      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xf62>
        break;
 800561c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800561e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005622:	2b00      	cmp	r3, #0
 8005624:	d111      	bne.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xf8e>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005626:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800562a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800562e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005630:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005638:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800563c:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005640:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005644:	430b      	orrs	r3, r1
 8005646:	6593      	str	r3, [r2, #88]	@ 0x58
 8005648:	e003      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xf96>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800564e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f002 0308 	and.w	r3, r2, #8
 800565e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005662:	2300      	movs	r3, #0
 8005664:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005668:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800566c:	460b      	mov	r3, r1
 800566e:	4313      	orrs	r3, r2
 8005670:	d024      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x1000>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005676:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800567a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800567e:	d10c      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xfde>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005684:	3328      	adds	r3, #40	@ 0x28
 8005686:	2102      	movs	r1, #2
 8005688:	4618      	mov	r0, r3
 800568a:	f001 ff95 	bl	80075b8 <RCCEx_PLL3_Config>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xfde>
      {
        status = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800569a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800569e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80056a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056b0:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80056b4:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80056b8:	430b      	orrs	r3, r1
 80056ba:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	f002 0310 	and.w	r3, r2, #16
 80056c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056cc:	2300      	movs	r3, #0
 80056ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80056d2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80056d6:	460b      	mov	r3, r1
 80056d8:	4313      	orrs	r3, r2
 80056da:	d024      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x106a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80056dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056e8:	d10c      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x1048>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ee:	3328      	adds	r3, #40	@ 0x28
 80056f0:	2102      	movs	r1, #2
 80056f2:	4618      	mov	r0, r3
 80056f4:	f001 ff60 	bl	80075b8 <RCCEx_PLL3_Config>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x1048>
      {
        status = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005704:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005708:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800570c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800570e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005716:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800571a:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 800571e:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005722:	430b      	orrs	r3, r1
 8005724:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005732:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005736:	2300      	movs	r3, #0
 8005738:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800573c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005740:	460b      	mov	r3, r1
 8005742:	4313      	orrs	r3, r2
 8005744:	d044      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1114>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800574e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005752:	d022      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x10de>
 8005754:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005758:	d81b      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x10d6>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x10aa>
 800575e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005762:	d00b      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8005764:	e015      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x10d6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576a:	3308      	adds	r3, #8
 800576c:	2100      	movs	r1, #0
 800576e:	4618      	mov	r0, r3
 8005770:	f001 fe24 	bl	80073bc <RCCEx_PLL2_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800577a:	e00f      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x10e0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800577c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005780:	3328      	adds	r3, #40	@ 0x28
 8005782:	2102      	movs	r1, #2
 8005784:	4618      	mov	r0, r3
 8005786:	f001 ff17 	bl	80075b8 <RCCEx_PLL3_Config>
 800578a:	4603      	mov	r3, r0
 800578c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005790:	e004      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005798:	e000      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
        break;
 800579a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800579c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d111      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x110c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057a4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80057a8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80057ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80057b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80057ba:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80057be:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80057c2:	430b      	orrs	r3, r1
 80057c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80057c6:	e003      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1114>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80057dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057de:	2300      	movs	r3, #0
 80057e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057e2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80057e6:	460b      	mov	r3, r1
 80057e8:	4313      	orrs	r3, r2
 80057ea:	d047      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80057ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057f8:	d025      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80057fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057fe:	d81e      	bhi.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x1182>
 8005800:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005804:	d003      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x1152>
 8005806:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800580a:	d00d      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800580c:	e017      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x1182>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800580e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005812:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005818:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 800581c:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005820:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005824:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005826:	e00f      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x118c>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582c:	3328      	adds	r3, #40	@ 0x28
 800582e:	2101      	movs	r1, #1
 8005830:	4618      	mov	r0, r3
 8005832:	f001 fec1 	bl	80075b8 <RCCEx_PLL3_Config>
 8005836:	4603      	mov	r3, r0
 8005838:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800583c:	e004      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x118c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005844:	e000      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x118c>
        break;
 8005846:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800584c:	2b00      	cmp	r3, #0
 800584e:	d111      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x11b8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005850:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005854:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800585a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800585e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005866:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 800586a:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 800586e:	430b      	orrs	r3, r1
 8005870:	6553      	str	r3, [r2, #84]	@ 0x54
 8005872:	e003      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005874:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005878:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005884:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005888:	673b      	str	r3, [r7, #112]	@ 0x70
 800588a:	2300      	movs	r3, #0
 800588c:	677b      	str	r3, [r7, #116]	@ 0x74
 800588e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005892:	460b      	mov	r3, r1
 8005894:	4313      	orrs	r3, r2
 8005896:	d03d      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x1258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800589c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x11ee>
 80058a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058a6:	d00d      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1208>
 80058a8:	e017      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x121e>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058aa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80058ae:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80058b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b4:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80058b8:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80058bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80058c2:	e00e      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x1226>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c8:	3308      	adds	r3, #8
 80058ca:	2102      	movs	r1, #2
 80058cc:	4618      	mov	r0, r3
 80058ce:	f001 fd75 	bl	80073bc <RCCEx_PLL2_Config>
 80058d2:	4603      	mov	r3, r0
 80058d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80058d8:	e003      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x1226>

      default:
        ret = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d110      	bne.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x1250>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80058ea:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80058ee:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80058f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058f4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058fe:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005902:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005906:	430b      	orrs	r3, r1
 8005908:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800590a:	e003      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x1258>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005910:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005920:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005922:	2300      	movs	r3, #0
 8005924:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005926:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800592a:	460b      	mov	r3, r1
 800592c:	4313      	orrs	r3, r2
 800592e:	d00c      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005934:	3328      	adds	r3, #40	@ 0x28
 8005936:	2102      	movs	r1, #2
 8005938:	4618      	mov	r0, r3
 800593a:	f001 fe3d 	bl	80075b8 <RCCEx_PLL3_Config>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x128e>
    {
      status = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800594a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005952:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005956:	663b      	str	r3, [r7, #96]	@ 0x60
 8005958:	2300      	movs	r3, #0
 800595a:	667b      	str	r3, [r7, #100]	@ 0x64
 800595c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005960:	460b      	mov	r3, r1
 8005962:	4313      	orrs	r3, r2
 8005964:	d044      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1334>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800596a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800596e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005972:	d01e      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
 8005974:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005978:	d817      	bhi.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 800597a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800597e:	d01a      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x12fa>
 8005980:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005984:	d811      	bhi.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8005986:	2b00      	cmp	r3, #0
 8005988:	d017      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x12fe>
 800598a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800598e:	d10c      	bne.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x12ee>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005990:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005994:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599a:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 800599e:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80059a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80059a8:	e008      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1300>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059b0:	e004      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1300>
        break;
 80059b2:	bf00      	nop
 80059b4:	e002      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1300>
        break;
 80059b6:	bf00      	nop
 80059b8:	e000      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1300>
        break;
 80059ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d111      	bne.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059c4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80059c8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80059cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80059d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059da:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80059de:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80059e2:	430b      	orrs	r3, r1
 80059e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80059e6:	e003      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1334>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80059fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059fe:	2300      	movs	r3, #0
 8005a00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a02:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005a06:	460b      	mov	r3, r1
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	d00f      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x1370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a0c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005a10:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a16:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a20:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005a24:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005a38:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005a42:	460b      	mov	r3, r1
 8005a44:	4313      	orrs	r3, r2
 8005a46:	d010      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x13ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005a48:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005a4c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a5e:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005a62:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005a66:	430b      	orrs	r3, r1
 8005a68:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a72:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005a76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a78:	2300      	movs	r3, #0
 8005a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a7c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005a80:	460b      	mov	r3, r1
 8005a82:	4313      	orrs	r3, r2
 8005a84:	d00f      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x13ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a86:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005a8a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a90:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a9a:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005a9e:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005aa2:	430b      	orrs	r3, r1
 8005aa4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005ab2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ab8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005abc:	460b      	mov	r3, r1
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	d01a      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x143c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ac2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005ac6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005ad0:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005ad4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005ad8:	6113      	str	r3, [r2, #16]
 8005ada:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005ade:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005ae2:	6919      	ldr	r1, [r3, #16]
 8005ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005aec:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005af0:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005af4:	430b      	orrs	r3, r1
 8005af6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005b04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b06:	2300      	movs	r3, #0
 8005b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b0a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4313      	orrs	r3, r2
 8005b12:	d00f      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1478>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005b14:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005b18:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b1e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b28:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005b2c:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005b30:	430b      	orrs	r3, r1
 8005b32:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005b40:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b42:	2300      	movs	r3, #0
 8005b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b46:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	d010      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x14b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b50:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005b54:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b5a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b66:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005b6a:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b84:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	d011      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x14f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b92:	3308      	adds	r3, #8
 8005b94:	2100      	movs	r1, #0
 8005b96:	4618      	mov	r0, r3
 8005b98:	f001 fc10 	bl	80073bc <RCCEx_PLL2_Config>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x14f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bba:	2100      	movs	r1, #0
 8005bbc:	6239      	str	r1, [r7, #32]
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	d011      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x1536>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd2:	3308      	adds	r3, #8
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f001 fbf0 	bl	80073bc <RCCEx_PLL2_Config>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x1536>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	61b9      	str	r1, [r7, #24]
 8005bfe:	f003 0304 	and.w	r3, r3, #4
 8005c02:	61fb      	str	r3, [r7, #28]
 8005c04:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	d011      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x1576>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c12:	3308      	adds	r3, #8
 8005c14:	2102      	movs	r1, #2
 8005c16:	4618      	mov	r0, r3
 8005c18:	f001 fbd0 	bl	80073bc <RCCEx_PLL2_Config>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x1576>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	6139      	str	r1, [r7, #16]
 8005c3e:	f003 0308 	and.w	r3, r3, #8
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	d011      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x15b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c52:	3328      	adds	r3, #40	@ 0x28
 8005c54:	2100      	movs	r1, #0
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 fcae 	bl	80075b8 <RCCEx_PLL3_Config>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x15b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	f003 0310 	and.w	r3, r3, #16
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	d011      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x15f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c92:	3328      	adds	r3, #40	@ 0x28
 8005c94:	2101      	movs	r1, #1
 8005c96:	4618      	mov	r0, r3
 8005c98:	f001 fc8e 	bl	80075b8 <RCCEx_PLL3_Config>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x15f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cba:	2100      	movs	r1, #0
 8005cbc:	6039      	str	r1, [r7, #0]
 8005cbe:	f003 0320 	and.w	r3, r3, #32
 8005cc2:	607b      	str	r3, [r7, #4]
 8005cc4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	d011      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x1636>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd2:	3328      	adds	r3, #40	@ 0x28
 8005cd4:	2102      	movs	r1, #2
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f001 fc6e 	bl	80075b8 <RCCEx_PLL3_Config>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x1636>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005cf2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x1642>
  {
    return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	e000      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1644>
  }
  return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005d06:	46bd      	mov	sp, r7
 8005d08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005d0c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b090      	sub	sp, #64	@ 0x40
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005d16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d1a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	f040 80bb 	bne.w	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005d24:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005d28:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d2e:	f003 0307 	and.w	r3, r3, #7
 8005d32:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	f200 80ab 	bhi.w	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8005d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x38>)
 8005d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d42:	bf00      	nop
 8005d44:	08005d59 	.word	0x08005d59
 8005d48:	08005d87 	.word	0x08005d87
 8005d4c:	08005db5 	.word	0x08005db5
 8005d50:	08005e85 	.word	0x08005e85
 8005d54:	08005de3 	.word	0x08005de3
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d58:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005d5c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d6a:	d108      	bne.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d70:	4618      	mov	r0, r3
 8005d72:	f001 f997 	bl	80070a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d7a:	f000 be5c 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d82:	f000 be58 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d86:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005d8a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d98:	d108      	bne.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d9a:	f107 0318 	add.w	r3, r7, #24
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fe66 	bl	8006a70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005da8:	f000 be45 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005db0:	f000 be41 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005db4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005db8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005dc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dc6:	d108      	bne.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dc8:	f107 030c 	add.w	r3, r7, #12
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 ffdc 	bl	8006d8a <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dd6:	f000 be2e 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dde:	f000 be2a 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005de2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005de6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005df0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005df2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005df6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d111      	bne.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8005e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10e      	bne.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e0a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005e0e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	08db      	lsrs	r3, r3, #3
 8005e16:	f003 0203 	and.w	r2, r3, #3
 8005e1a:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8005e1e:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8005e22:	40d3      	lsrs	r3, r2
 8005e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e26:	e02b      	b.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e28:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005e2c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e3a:	d109      	bne.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8005e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e42:	d105      	bne.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005e44:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8005e48:	f2c0 033d 	movt	r3, #61	@ 0x3d
 8005e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e4e:	e017      	b.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e50:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005e54:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e62:	d109      	bne.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8005e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e6a:	d105      	bne.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005e6c:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8005e70:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8005e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e76:	e003      	b.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005e7c:	f000 bddb 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 8005e80:	f000 bdd9 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005e84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e88:	f2c0 03bb 	movt	r3, #187	@ 0xbb
 8005e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e8e:	f000 bdd2 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      default :
      {
        frequency = 0;
 8005e92:	2300      	movs	r3, #0
 8005e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e96:	f000 bdce 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005e9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e9e:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005ea2:	430b      	orrs	r3, r1
 8005ea4:	f040 80c8 	bne.w	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005ea8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005eac:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eb2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005eb6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ebe:	d05f      	beq.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ec6:	f200 80b3 	bhi.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ecc:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ece:	f000 80a8 	beq.w	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed4:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ed6:	f200 80ab 	bhi.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005edc:	2b80      	cmp	r3, #128	@ 0x80
 8005ede:	d038      	beq.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee2:	2b80      	cmp	r3, #128	@ 0x80
 8005ee4:	f200 80a4 	bhi.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef0:	2b40      	cmp	r3, #64	@ 0x40
 8005ef2:	d017      	beq.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8005ef4:	e09c      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ef6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005efa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f08:	d108      	bne.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f001 f8c8 	bl	80070a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f18:	f000 bd8d 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f20:	f000 bd89 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f24:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005f28:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f36:	d108      	bne.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f38:	f107 0318 	add.w	r3, r7, #24
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fd97 	bl	8006a70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f46:	f000 bd76 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f4e:	f000 bd72 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f52:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005f56:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f64:	d108      	bne.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f66:	f107 030c 	add.w	r3, r7, #12
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 ff0d 	bl	8006d8a <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f74:	f000 bd5f 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f7c:	f000 bd5b 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f80:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005f84:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f8e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f90:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005f94:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0304 	and.w	r3, r3, #4
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d111      	bne.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
 8005fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10e      	bne.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fa8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005fac:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	08db      	lsrs	r3, r3, #3
 8005fb4:	f003 0203 	and.w	r2, r3, #3
 8005fb8:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8005fbc:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8005fc0:	40d3      	lsrs	r3, r2
 8005fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fc4:	e02b      	b.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005fc6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005fca:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fd8:	d109      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 8005fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fe0:	d105      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005fe2:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8005fe6:	f2c0 033d 	movt	r3, #61	@ 0x3d
 8005fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fec:	e017      	b.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005fee:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005ff2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ffc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006000:	d109      	bne.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
 8006002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006004:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006008:	d105      	bne.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800600a:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800600e:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8006012:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006014:	e003      	b.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800601a:	f000 bd0c 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 800601e:	f000 bd0a 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006026:	f2c0 03bb 	movt	r3, #187	@ 0xbb
 800602a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800602c:	f000 bd03 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      default :
      {
        frequency = 0;
 8006030:	2300      	movs	r3, #0
 8006032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006034:	f000 bcff 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800603c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006040:	430b      	orrs	r3, r1
 8006042:	f040 80cd 	bne.w	80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006046:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800604a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800604e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006050:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006054:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006058:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800605c:	d064      	beq.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 800605e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006060:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006064:	f200 80b8 	bhi.w	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8006068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800606e:	f000 80ac 	beq.w	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006074:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006078:	f200 80ae 	bhi.w	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 800607c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006082:	d03a      	beq.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 8006084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006086:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800608a:	f200 80a5 	bhi.w	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 800608e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006090:	2b00      	cmp	r3, #0
 8006092:	d004      	beq.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x392>
 8006094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006096:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800609a:	d017      	beq.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800609c:	e09c      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800609e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80060a2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060b0:	d108      	bne.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fff4 	bl	80070a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060c0:	f000 bcb9 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80060c4:	2300      	movs	r3, #0
 80060c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060c8:	f000 bcb5 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060cc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80060d0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060de:	d108      	bne.n	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060e0:	f107 0318 	add.w	r3, r7, #24
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 fcc3 	bl	8006a70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060ee:	f000 bca2 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80060f2:	2300      	movs	r3, #0
 80060f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060f6:	f000 bc9e 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060fa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80060fe:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006108:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800610c:	d108      	bne.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800610e:	f107 030c 	add.w	r3, r7, #12
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fe39 	bl	8006d8a <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800611c:	f000 bc8b 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006120:	2300      	movs	r3, #0
 8006122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006124:	f000 bc87 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006128:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800612c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006132:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006136:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006138:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800613c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b04      	cmp	r3, #4
 8006148:	d111      	bne.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800614a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10e      	bne.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006150:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006154:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	08db      	lsrs	r3, r3, #3
 800615c:	f003 0203 	and.w	r2, r3, #3
 8006160:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8006164:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8006168:	40d3      	lsrs	r3, r2
 800616a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800616c:	e02b      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800616e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006172:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800617c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006180:	d109      	bne.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006184:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006188:	d105      	bne.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800618a:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800618e:	f2c0 033d 	movt	r3, #61	@ 0x3d
 8006192:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006194:	e017      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006196:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800619a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061a8:	d109      	bne.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80061aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061b0:	d105      	bne.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80061b2:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 80061b6:	f2c0 037a 	movt	r3, #122	@ 0x7a
 80061ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061bc:	e003      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80061c2:	f000 bc38 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 80061c6:	f000 bc36 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80061ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061ce:	f2c0 03bb 	movt	r3, #187	@ 0xbb
 80061d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d4:	f000 bc2f 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      default :
      {
        frequency = 0;
 80061d8:	2300      	movs	r3, #0
 80061da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061dc:	f000 bc2b 	b.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80061e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061e4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80061e8:	430b      	orrs	r3, r1
 80061ea:	f040 80c3 	bne.w	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80061ee:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80061f2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80061f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061f8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80061fc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006200:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006204:	d05e      	beq.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8006206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006208:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800620c:	f200 80af 	bhi.w	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 8006210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006212:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006216:	f000 80a4 	beq.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
 800621a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006220:	f200 80a5 	bhi.w	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 8006224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006226:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800622a:	d036      	beq.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800622c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006232:	f200 809c 	bhi.w	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 8006236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006238:	2b00      	cmp	r3, #0
 800623a:	d004      	beq.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
 800623c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006242:	d015      	beq.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8006244:	e093      	b.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x662>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006246:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800624a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006254:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006258:	d107      	bne.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800625a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800625e:	4618      	mov	r0, r3
 8006260:	f000 ff20 	bl	80070a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006268:	e3e5      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 800626a:	2300      	movs	r3, #0
 800626c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800626e:	e3e2      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006270:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006274:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800627e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006282:	d107      	bne.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006284:	f107 0318 	add.w	r3, r7, #24
 8006288:	4618      	mov	r0, r3
 800628a:	f000 fbf1 	bl	8006a70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006292:	e3d0      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006294:	2300      	movs	r3, #0
 8006296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006298:	e3cd      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800629a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800629e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062ac:	d107      	bne.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062ae:	f107 030c 	add.w	r3, r7, #12
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 fd69 	bl	8006d8a <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062bc:	e3bb      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062c2:	e3b8      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80062c4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80062c8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80062cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80062d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062d4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80062d8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0304 	and.w	r3, r3, #4
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d111      	bne.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80062e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10e      	bne.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062ec:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80062f0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	08db      	lsrs	r3, r3, #3
 80062f8:	f003 0203 	and.w	r2, r3, #3
 80062fc:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8006300:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8006304:	40d3      	lsrs	r3, r2
 8006306:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006308:	e02a      	b.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800630a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800630e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006318:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800631c:	d109      	bne.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800631e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006320:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006324:	d105      	bne.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006326:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800632a:	f2c0 033d 	movt	r3, #61	@ 0x3d
 800632e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006330:	e016      	b.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006332:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006336:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006340:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006344:	d109      	bne.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x64e>
 8006346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006348:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800634c:	d105      	bne.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x64e>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800634e:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8006352:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8006356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006358:	e002      	b.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800635a:	2300      	movs	r3, #0
 800635c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800635e:	e36a      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 8006360:	e369      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006366:	f2c0 03bb 	movt	r3, #187	@ 0xbb
 800636a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800636c:	e363      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      default :
      {
        frequency = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006372:	e360      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006378:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800637c:	430b      	orrs	r3, r1
 800637e:	f040 80c3 	bne.w	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006382:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006386:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800638a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800638c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006390:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006394:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006398:	d05e      	beq.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800639a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063a0:	f200 80af 	bhi.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
 80063a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063aa:	f000 80a4 	beq.w	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 80063ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063b4:	f200 80a5 	bhi.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
 80063b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063be:	d036      	beq.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
 80063c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063c6:	f200 809c 	bhi.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
 80063ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d004      	beq.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 80063d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d6:	d015      	beq.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80063d8:	e093      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063da:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80063de:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063ec:	d107      	bne.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fe56 	bl	80070a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80063f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063fc:	e31b      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80063fe:	2300      	movs	r3, #0
 8006400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006402:	e318      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006404:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006408:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006412:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006416:	d107      	bne.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006418:	f107 0318 	add.w	r3, r7, #24
 800641c:	4618      	mov	r0, r3
 800641e:	f000 fb27 	bl	8006a70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006426:	e306      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006428:	2300      	movs	r3, #0
 800642a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800642c:	e303      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800642e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006432:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800643c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006440:	d107      	bne.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006442:	f107 030c 	add.w	r3, r7, #12
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fc9f 	bl	8006d8a <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006450:	e2f1      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006452:	2300      	movs	r3, #0
 8006454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006456:	e2ee      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006458:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800645c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006462:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006466:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006468:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800646c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0304 	and.w	r3, r3, #4
 8006476:	2b04      	cmp	r3, #4
 8006478:	d111      	bne.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
 800647a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10e      	bne.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006480:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006484:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	08db      	lsrs	r3, r3, #3
 800648c:	f003 0203 	and.w	r2, r3, #3
 8006490:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8006494:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8006498:	40d3      	lsrs	r3, r2
 800649a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800649c:	e02a      	b.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800649e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80064a2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064b0:	d109      	bne.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
 80064b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064b8:	d105      	bne.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80064ba:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80064be:	f2c0 033d 	movt	r3, #61	@ 0x3d
 80064c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064c4:	e016      	b.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064c6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80064ca:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064d8:	d109      	bne.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80064da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064e0:	d105      	bne.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80064e2:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 80064e6:	f2c0 037a 	movt	r3, #122	@ 0x7a
 80064ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064ec:	e002      	b.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80064ee:	2300      	movs	r3, #0
 80064f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80064f2:	e2a0      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 80064f4:	e29f      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80064f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064fa:	f2c0 03bb 	movt	r3, #187	@ 0xbb
 80064fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006500:	e299      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      default :
      {
        frequency = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006506:	e296      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800650c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006510:	430b      	orrs	r3, r1
 8006512:	f040 80a5 	bne.w	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006516:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800651a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800651e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006520:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006524:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800652c:	f000 8082 	beq.w	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x928>
 8006530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006532:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006536:	f200 8090 	bhi.w	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
 800653a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006540:	d065      	beq.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x902>
 8006542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006544:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006548:	f200 8087 	bhi.w	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
 800654c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006552:	d041      	beq.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8006554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006556:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800655a:	d87e      	bhi.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
 800655c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006562:	d024      	beq.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006566:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800656a:	d876      	bhi.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
 800656c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656e:	2b00      	cmp	r3, #0
 8006570:	d004      	beq.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8006572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006578:	d004      	beq.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x878>
 800657a:	e06e      	b.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800657c:	f7fe f86e 	bl	800465c <HAL_RCC_GetPCLK1Freq>
 8006580:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006582:	e258      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006584:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006588:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006592:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006596:	d107      	bne.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006598:	f107 0318 	add.w	r3, r7, #24
 800659c:	4618      	mov	r0, r3
 800659e:	f000 fa67 	bl	8006a70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065a6:	e246      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80065a8:	2300      	movs	r3, #0
 80065aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065ac:	e243      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065ae:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80065b2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065c0:	d107      	bne.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065c2:	f107 030c 	add.w	r3, r7, #12
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 fbdf 	bl	8006d8a <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065d0:	e231      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80065d2:	2300      	movs	r3, #0
 80065d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065d6:	e22e      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065d8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80065dc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0304 	and.w	r3, r3, #4
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	d10e      	bne.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065ea:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80065ee:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	08db      	lsrs	r3, r3, #3
 80065f6:	f003 0203 	and.w	r2, r3, #3
 80065fa:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80065fe:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8006602:	40d3      	lsrs	r3, r2
 8006604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006606:	e216      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006608:	2300      	movs	r3, #0
 800660a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800660c:	e213      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800660e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006612:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800661c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006620:	d105      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x922>
        {
          frequency = CSI_VALUE;
 8006622:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8006626:	f2c0 033d 	movt	r3, #61	@ 0x3d
 800662a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800662c:	e203      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 800662e:	2300      	movs	r3, #0
 8006630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006632:	e200      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006634:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006638:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006642:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006646:	d105      	bne.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
        {
          frequency = HSE_VALUE;
 8006648:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800664c:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8006650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006652:	e1f0      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006654:	2300      	movs	r3, #0
 8006656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006658:	e1ed      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      default :
      {
        frequency = 0;
 800665a:	2300      	movs	r3, #0
 800665c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800665e:	e1ea      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006660:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006664:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006668:	430b      	orrs	r3, r1
 800666a:	f040 8095 	bne.w	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800666e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006672:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006678:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800667c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800667e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006680:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006684:	d036      	beq.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9e8>
 8006686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006688:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800668c:	f200 8081 	bhi.w	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8006690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006692:	2b00      	cmp	r3, #0
 8006694:	d004      	beq.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800669c:	d015      	beq.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800669e:	e078      	b.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066a0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80066a4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066b2:	d107      	bne.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066b4:	f107 0318 	add.w	r3, r7, #24
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 f9d9 	bl	8006a70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066c2:	e1b8      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80066c4:	2300      	movs	r3, #0
 80066c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066c8:	e1b5      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066ca:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80066ce:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066dc:	d107      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066de:	f107 030c 	add.w	r3, r7, #12
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fb51 	bl	8006d8a <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066ec:	e1a3      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066f2:	e1a0      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066f4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80066f8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80066fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006702:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006704:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006708:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0304 	and.w	r3, r3, #4
 8006712:	2b04      	cmp	r3, #4
 8006714:	d111      	bne.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
 8006716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10e      	bne.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800671c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006720:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	08db      	lsrs	r3, r3, #3
 8006728:	f003 0203 	and.w	r2, r3, #3
 800672c:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8006730:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8006734:	40d3      	lsrs	r3, r2
 8006736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006738:	e02a      	b.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800673a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800673e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006748:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800674c:	d109      	bne.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 800674e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006750:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006754:	d105      	bne.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006756:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800675a:	f2c0 033d 	movt	r3, #61	@ 0x3d
 800675e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006760:	e016      	b.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006762:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006766:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006770:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006774:	d109      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
 8006776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006778:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800677c:	d105      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800677e:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8006782:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8006786:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006788:	e002      	b.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800678e:	e152      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 8006790:	e151      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      default :
      {
        frequency = 0;
 8006792:	2300      	movs	r3, #0
 8006794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006796:	e14e      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800679c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80067a0:	430b      	orrs	r3, r1
 80067a2:	d13c      	bne.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80067a4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80067a8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80067ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067b2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80067b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d004      	beq.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 80067ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067c0:	d015      	beq.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 80067c2:	e029      	b.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067c4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80067c8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067d6:	d107      	bne.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 fc61 	bl	80070a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067e6:	e126      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80067e8:	2300      	movs	r3, #0
 80067ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067ec:	e123      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067ee:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80067f2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006800:	d107      	bne.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0xb06>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006802:	f107 0318 	add.w	r3, r7, #24
 8006806:	4618      	mov	r0, r3
 8006808:	f000 f932 	bl	8006a70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006810:	e111      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006812:	2300      	movs	r3, #0
 8006814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006816:	e10e      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      default :
      {
        frequency = 0;
 8006818:	2300      	movs	r3, #0
 800681a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800681c:	e10b      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800681e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006822:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006826:	430b      	orrs	r3, r1
 8006828:	f040 80a5 	bne.w	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800682c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006830:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006836:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800683a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800683c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006842:	f000 8082 	beq.w	800694a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006848:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800684c:	f200 8090 	bhi.w	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006856:	d065      	beq.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0xc18>
 8006858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800685e:	f200 8087 	bhi.w	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006864:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006868:	d041      	beq.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800686a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006870:	d87e      	bhi.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006874:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006878:	d024      	beq.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 800687a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006880:	d876      	bhi.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006884:	2b00      	cmp	r3, #0
 8006886:	d004      	beq.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8006888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800688a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800688e:	d004      	beq.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 8006890:	e06e      	b.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006892:	f000 f8d5 	bl	8006a40 <HAL_RCCEx_GetD3PCLK1Freq>
 8006896:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006898:	e0cd      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800689a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800689e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068ac:	d107      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068ae:	f107 0318 	add.w	r3, r7, #24
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 f8dc 	bl	8006a70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068bc:	e0bb      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80068be:	2300      	movs	r3, #0
 80068c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068c2:	e0b8      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068c4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80068c8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068d6:	d107      	bne.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbdc>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068d8:	f107 030c 	add.w	r3, r7, #12
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 fa54 	bl	8006d8a <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068e6:	e0a6      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80068e8:	2300      	movs	r3, #0
 80068ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068ec:	e0a3      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068ee:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80068f2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0304 	and.w	r3, r3, #4
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d10e      	bne.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006900:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006904:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	08db      	lsrs	r3, r3, #3
 800690c:	f003 0203 	and.w	r2, r3, #3
 8006910:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8006914:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8006918:	40d3      	lsrs	r3, r2
 800691a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800691c:	e08b      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 800691e:	2300      	movs	r3, #0
 8006920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006922:	e088      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006924:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006928:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006936:	d105      	bne.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
        {
          frequency = CSI_VALUE;
 8006938:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800693c:	f2c0 033d 	movt	r3, #61	@ 0x3d
 8006940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006942:	e078      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006944:	2300      	movs	r3, #0
 8006946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006948:	e075      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800694a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800694e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006958:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800695c:	d105      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
        {
          frequency = HSE_VALUE;
 800695e:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8006962:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8006966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006968:	e065      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 800696a:	2300      	movs	r3, #0
 800696c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800696e:	e062      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006970:	2300      	movs	r3, #0
 8006972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006974:	e05f      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006976:	e9d7 2300 	ldrd	r2, r3, [r7]
 800697a:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800697e:	430b      	orrs	r3, r1
 8006980:	d157      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0xd26>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006982:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006986:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800698a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800698c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006990:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006994:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006998:	d033      	beq.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0xcf6>
 800699a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069a0:	d844      	bhi.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 80069a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d004      	beq.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80069a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069ae:	d013      	beq.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 80069b0:	e03c      	b.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80069b2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80069b6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069c4:	d105      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
        {
          frequency = HSE_VALUE;
 80069c6:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 80069ca:	f2c0 037a 	movt	r3, #122	@ 0x7a
 80069ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069d0:	e031      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069d6:	e02e      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069d8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80069dc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069ea:	d107      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fb57 	bl	80070a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069fa:	e01c      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a00:	e019      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a02:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006a06:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a14:	d107      	bne.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xd1a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a16:	f107 0318 	add.w	r3, r7, #24
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 f828 	bl	8006a70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a24:	e007      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a2a:	e004      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      default :
      {
        frequency = 0;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a30:	e001      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }
  else
  {
    frequency = 0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3740      	adds	r7, #64	@ 0x40
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006a44:	f7fd fdce 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 8006a48:	4601      	mov	r1, r0
 8006a4a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006a4e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	091b      	lsrs	r3, r3, #4
 8006a56:	f003 0207 	and.w	r2, r3, #7
 8006a5a:	f249 0390 	movw	r3, #37008	@ 0x9090
 8006a5e:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8006a62:	5c9b      	ldrb	r3, [r3, r2]
 8006a64:	f003 031f 	and.w	r3, r3, #31
 8006a68:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b089      	sub	sp, #36	@ 0x24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a78:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006a7c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a82:	f003 0303 	and.w	r3, r3, #3
 8006a86:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006a88:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006a8c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a92:	0b1b      	lsrs	r3, r3, #12
 8006a94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a98:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a9a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006a9e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa4:	091b      	lsrs	r3, r3, #4
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006aac:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006ab0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab6:	08db      	lsrs	r3, r3, #3
 8006ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	fb02 f303 	mul.w	r3, r2, r3
 8006ac2:	ee07 3a90 	vmov	s15, r3
 8006ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 814b 	beq.w	8006d6c <HAL_RCCEx_GetPLL2ClockFreq+0x2fc>
  {
    switch (pllsource)
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	f000 80a2 	beq.w	8006c22 <HAL_RCCEx_GetPLL2ClockFreq+0x1b2>
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	f200 80c9 	bhi.w	8006c78 <HAL_RCCEx_GetPLL2ClockFreq+0x208>
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <HAL_RCCEx_GetPLL2ClockFreq+0x84>
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d06c      	beq.n	8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006af2:	e0c1      	b.n	8006c78 <HAL_RCCEx_GetPLL2ClockFreq+0x208>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006af4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006af8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0320 	and.w	r3, r3, #32
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d037      	beq.n	8006b76 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b06:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006b0a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	08db      	lsrs	r3, r3, #3
 8006b12:	f003 0203 	and.w	r2, r3, #3
 8006b16:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8006b1a:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8006b1e:	40d3      	lsrs	r3, r2
 8006b20:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	ee07 3a90 	vmov	s15, r3
 8006b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b3a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006b3e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b48:	ee07 3a90 	vmov	s15, r3
 8006b4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b50:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b54:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8006b58:	ee05 3a90 	vmov	s11, r3
 8006b5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b70:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b74:	e0ab      	b.n	8006cce <HAL_RCCEx_GetPLL2ClockFreq+0x25e>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	ee07 3a90 	vmov	s15, r3
 8006b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b80:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8006b84:	f6c4 4374 	movt	r3, #19572	@ 0x4c74
 8006b88:	ee06 3a90 	vmov	s13, r3
 8006b8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b90:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006b94:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006baa:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8006bae:	ee05 3a90 	vmov	s11, r3
 8006bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bca:	e080      	b.n	8006cce <HAL_RCCEx_GetPLL2ClockFreq+0x25e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	ee07 3a90 	vmov	s15, r3
 8006bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd6:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8006bda:	f6c4 2374 	movt	r3, #19060	@ 0x4a74
 8006bde:	ee06 3a90 	vmov	s13, r3
 8006be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006be6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006bea:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf4:	ee07 3a90 	vmov	s15, r3
 8006bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c00:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8006c04:	ee05 3a90 	vmov	s11, r3
 8006c08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c20:	e055      	b.n	8006cce <HAL_RCCEx_GetPLL2ClockFreq+0x25e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	ee07 3a90 	vmov	s15, r3
 8006c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c2c:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8006c30:	f6c4 23f4 	movt	r3, #19188	@ 0x4af4
 8006c34:	ee06 3a90 	vmov	s13, r3
 8006c38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c3c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006c40:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c56:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8006c5a:	ee05 3a90 	vmov	s11, r3
 8006c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c76:	e02a      	b.n	8006cce <HAL_RCCEx_GetPLL2ClockFreq+0x25e>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	ee07 3a90 	vmov	s15, r3
 8006c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c82:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8006c86:	f6c4 2374 	movt	r3, #19060	@ 0x4a74
 8006c8a:	ee06 3a90 	vmov	s13, r3
 8006c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c92:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006c96:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca0:	ee07 3a90 	vmov	s15, r3
 8006ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cac:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8006cb0:	ee05 3a90 	vmov	s11, r3
 8006cb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ccc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006cce:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006cd2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd8:	0a5b      	lsrs	r3, r3, #9
 8006cda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ce6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cee:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cfa:	ee17 2a90 	vmov	r2, s15
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006d02:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006d06:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d0c:	0c1b      	lsrs	r3, r3, #16
 8006d0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d12:	ee07 3a90 	vmov	s15, r3
 8006d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d22:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d2e:	ee17 2a90 	vmov	r2, s15
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006d36:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006d3a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d40:	0e1b      	lsrs	r3, r3, #24
 8006d42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d46:	ee07 3a90 	vmov	s15, r3
 8006d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d56:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d62:	ee17 2a90 	vmov	r2, s15
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006d6a:	e008      	b.n	8006d7e <HAL_RCCEx_GetPLL2ClockFreq+0x30e>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	609a      	str	r2, [r3, #8]
}
 8006d7e:	bf00      	nop
 8006d80:	3724      	adds	r7, #36	@ 0x24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b089      	sub	sp, #36	@ 0x24
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d92:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006d96:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9c:	f003 0303 	and.w	r3, r3, #3
 8006da0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006da2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006da6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dac:	0d1b      	lsrs	r3, r3, #20
 8006dae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006db2:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006db4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006db8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbe:	0a1b      	lsrs	r3, r3, #8
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006dc6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006dca:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dd0:	08db      	lsrs	r3, r3, #3
 8006dd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	fb02 f303 	mul.w	r3, r2, r3
 8006ddc:	ee07 3a90 	vmov	s15, r3
 8006de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 814b 	beq.w	8007086 <HAL_RCCEx_GetPLL3ClockFreq+0x2fc>
  {
    switch (pllsource)
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	f000 80a2 	beq.w	8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x1b2>
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	f200 80c9 	bhi.w	8006f92 <HAL_RCCEx_GetPLL3ClockFreq+0x208>
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <HAL_RCCEx_GetPLL3ClockFreq+0x84>
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d06c      	beq.n	8006ee6 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006e0c:	e0c1      	b.n	8006f92 <HAL_RCCEx_GetPLL3ClockFreq+0x208>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e0e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006e12:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0320 	and.w	r3, r3, #32
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d037      	beq.n	8006e90 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e20:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006e24:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	08db      	lsrs	r3, r3, #3
 8006e2c:	f003 0203 	and.w	r2, r3, #3
 8006e30:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8006e34:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8006e38:	40d3      	lsrs	r3, r2
 8006e3a:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	ee07 3a90 	vmov	s15, r3
 8006e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	ee07 3a90 	vmov	s15, r3
 8006e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e54:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006e58:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e6e:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8006e72:	ee05 3a90 	vmov	s11, r3
 8006e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006e8e:	e0ab      	b.n	8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x25e>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	ee07 3a90 	vmov	s15, r3
 8006e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9a:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8006e9e:	f6c4 4374 	movt	r3, #19572	@ 0x4c74
 8006ea2:	ee06 3a90 	vmov	s13, r3
 8006ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eaa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006eae:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb8:	ee07 3a90 	vmov	s15, r3
 8006ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec0:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ec4:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8006ec8:	ee05 3a90 	vmov	s11, r3
 8006ecc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ed0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ed4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ed8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ee4:	e080      	b.n	8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x25e>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	ee07 3a90 	vmov	s15, r3
 8006eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef0:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8006ef4:	f6c4 2374 	movt	r3, #19060	@ 0x4a74
 8006ef8:	ee06 3a90 	vmov	s13, r3
 8006efc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f00:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006f04:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f0e:	ee07 3a90 	vmov	s15, r3
 8006f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f16:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f1a:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8006f1e:	ee05 3a90 	vmov	s11, r3
 8006f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f3a:	e055      	b.n	8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x25e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	ee07 3a90 	vmov	s15, r3
 8006f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f46:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8006f4a:	f6c4 23f4 	movt	r3, #19188	@ 0x4af4
 8006f4e:	ee06 3a90 	vmov	s13, r3
 8006f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f56:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006f5a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f64:	ee07 3a90 	vmov	s15, r3
 8006f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f70:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8006f74:	ee05 3a90 	vmov	s11, r3
 8006f78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f90:	e02a      	b.n	8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x25e>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	ee07 3a90 	vmov	s15, r3
 8006f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9c:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8006fa0:	f6c4 2374 	movt	r3, #19060	@ 0x4a74
 8006fa4:	ee06 3a90 	vmov	s13, r3
 8006fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fac:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006fb0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fc6:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8006fca:	ee05 3a90 	vmov	s11, r3
 8006fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fe6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006fe8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006fec:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff2:	0a5b      	lsrs	r3, r3, #9
 8006ff4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ff8:	ee07 3a90 	vmov	s15, r3
 8006ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007000:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007004:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007008:	edd7 6a07 	vldr	s13, [r7, #28]
 800700c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007014:	ee17 2a90 	vmov	r2, s15
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800701c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007020:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007026:	0c1b      	lsrs	r3, r3, #16
 8007028:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800702c:	ee07 3a90 	vmov	s15, r3
 8007030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007034:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007038:	ee37 7a87 	vadd.f32	s14, s15, s14
 800703c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007048:	ee17 2a90 	vmov	r2, s15
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007050:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007054:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800705a:	0e1b      	lsrs	r3, r3, #24
 800705c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007060:	ee07 3a90 	vmov	s15, r3
 8007064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007068:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800706c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007070:	edd7 6a07 	vldr	s13, [r7, #28]
 8007074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800707c:	ee17 2a90 	vmov	r2, s15
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007084:	e008      	b.n	8007098 <HAL_RCCEx_GetPLL3ClockFreq+0x30e>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	609a      	str	r2, [r3, #8]
}
 8007098:	bf00      	nop
 800709a:	3724      	adds	r7, #36	@ 0x24
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b089      	sub	sp, #36	@ 0x24
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070ac:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80070b0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80070b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b6:	f003 0303 	and.w	r3, r3, #3
 80070ba:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80070bc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80070c0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80070c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c6:	091b      	lsrs	r3, r3, #4
 80070c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070cc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80070ce:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80070d2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80070d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80070de:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80070e2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80070e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070e8:	08db      	lsrs	r3, r3, #3
 80070ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	fb02 f303 	mul.w	r3, r2, r3
 80070f4:	ee07 3a90 	vmov	s15, r3
 80070f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	2b00      	cmp	r3, #0
 8007104:	f000 814b 	beq.w	800739e <HAL_RCCEx_GetPLL1ClockFreq+0x2fa>
  {
    switch (pllsource)
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	2b02      	cmp	r3, #2
 800710c:	f000 80a2 	beq.w	8007254 <HAL_RCCEx_GetPLL1ClockFreq+0x1b0>
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	2b02      	cmp	r3, #2
 8007114:	f200 80c9 	bhi.w	80072aa <HAL_RCCEx_GetPLL1ClockFreq+0x206>
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <HAL_RCCEx_GetPLL1ClockFreq+0x82>
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d06c      	beq.n	80071fe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007124:	e0c1      	b.n	80072aa <HAL_RCCEx_GetPLL1ClockFreq+0x206>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007126:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800712a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0320 	and.w	r3, r3, #32
 8007134:	2b00      	cmp	r3, #0
 8007136:	d037      	beq.n	80071a8 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007138:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800713c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	08db      	lsrs	r3, r3, #3
 8007144:	f003 0203 	and.w	r2, r3, #3
 8007148:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800714c:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8007150:	40d3      	lsrs	r3, r2
 8007152:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	ee07 3a90 	vmov	s15, r3
 8007164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007168:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800716c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007170:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007182:	ed97 6a03 	vldr	s12, [r7, #12]
 8007186:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 800718a:	ee05 3a90 	vmov	s11, r3
 800718e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800719a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800719e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071a6:	e0ab      	b.n	8007300 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b2:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80071b6:	f6c4 4374 	movt	r3, #19572	@ 0x4c74
 80071ba:	ee06 3a90 	vmov	s13, r3
 80071be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80071c6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80071ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d0:	ee07 3a90 	vmov	s15, r3
 80071d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80071dc:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 80071e0:	ee05 3a90 	vmov	s11, r3
 80071e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071fc:	e080      	b.n	8007300 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	ee07 3a90 	vmov	s15, r3
 8007204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007208:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800720c:	f6c4 2374 	movt	r3, #19060	@ 0x4a74
 8007210:	ee06 3a90 	vmov	s13, r3
 8007214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007218:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800721c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007226:	ee07 3a90 	vmov	s15, r3
 800722a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800722e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007232:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8007236:	ee05 3a90 	vmov	s11, r3
 800723a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800723e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800724a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007252:	e055      	b.n	8007300 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725e:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8007262:	f6c4 23f4 	movt	r3, #19188	@ 0x4af4
 8007266:	ee06 3a90 	vmov	s13, r3
 800726a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007272:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800727c:	ee07 3a90 	vmov	s15, r3
 8007280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007284:	ed97 6a03 	vldr	s12, [r7, #12]
 8007288:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 800728c:	ee05 3a90 	vmov	s11, r3
 8007290:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007294:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007298:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800729c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072a8:	e02a      	b.n	8007300 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	ee07 3a90 	vmov	s15, r3
 80072b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b4:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80072b8:	f6c4 4374 	movt	r3, #19572	@ 0x4c74
 80072bc:	ee06 3a90 	vmov	s13, r3
 80072c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072c4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80072c8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80072cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072da:	ed97 6a03 	vldr	s12, [r7, #12]
 80072de:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 80072e2:	ee05 3a90 	vmov	s11, r3
 80072e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072fe:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007300:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007304:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800730a:	0a5b      	lsrs	r3, r3, #9
 800730c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007310:	ee07 3a90 	vmov	s15, r3
 8007314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007318:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800731c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007320:	edd7 6a07 	vldr	s13, [r7, #28]
 8007324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800732c:	ee17 2a90 	vmov	r2, s15
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007334:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007338:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800733c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800733e:	0c1b      	lsrs	r3, r3, #16
 8007340:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007344:	ee07 3a90 	vmov	s15, r3
 8007348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007350:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007354:	edd7 6a07 	vldr	s13, [r7, #28]
 8007358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800735c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007360:	ee17 2a90 	vmov	r2, s15
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007368:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800736c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007372:	0e1b      	lsrs	r3, r3, #24
 8007374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007378:	ee07 3a90 	vmov	s15, r3
 800737c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007380:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007384:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007388:	edd7 6a07 	vldr	s13, [r7, #28]
 800738c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007394:	ee17 2a90 	vmov	r2, s15
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800739c:	e008      	b.n	80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x30c>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	609a      	str	r2, [r3, #8]
}
 80073b0:	bf00      	nop
 80073b2:	3724      	adds	r7, #36	@ 0x24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073c6:	2300      	movs	r3, #0
 80073c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073ca:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80073ce:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80073d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d4:	f003 0303 	and.w	r3, r3, #3
 80073d8:	2b03      	cmp	r3, #3
 80073da:	d101      	bne.n	80073e0 <RCCEx_PLL2_Config+0x24>
  {
    return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e0e7      	b.n	80075b0 <RCCEx_PLL2_Config+0x1f4>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80073e0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80073e4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80073ee:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80073f2:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80073f6:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073f8:	f7fa fa5a 	bl	80018b0 <HAL_GetTick>
 80073fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073fe:	e008      	b.n	8007412 <RCCEx_PLL2_Config+0x56>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007400:	f7fa fa56 	bl	80018b0 <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	2b02      	cmp	r3, #2
 800740c:	d901      	bls.n	8007412 <RCCEx_PLL2_Config+0x56>
      {
        return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e0ce      	b.n	80075b0 <RCCEx_PLL2_Config+0x1f4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007412:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007416:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1ed      	bne.n	8007400 <RCCEx_PLL2_Config+0x44>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007424:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007428:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800742c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800742e:	f423 317c 	bic.w	r1, r3, #258048	@ 0x3f000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	031a      	lsls	r2, r3, #12
 8007438:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800743c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007440:	430a      	orrs	r2, r1
 8007442:	629a      	str	r2, [r3, #40]	@ 0x28
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	3b01      	subs	r3, #1
 800744a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	3b01      	subs	r3, #1
 8007454:	025b      	lsls	r3, r3, #9
 8007456:	b29b      	uxth	r3, r3
 8007458:	431a      	orrs	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	3b01      	subs	r3, #1
 8007460:	041b      	lsls	r3, r3, #16
 8007462:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007466:	ea42 0103 	orr.w	r1, r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	3b01      	subs	r3, #1
 8007470:	061b      	lsls	r3, r3, #24
 8007472:	f003 42fe 	and.w	r2, r3, #2130706432	@ 0x7f000000
 8007476:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800747a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800747e:	430a      	orrs	r2, r1
 8007480:	639a      	str	r2, [r3, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007482:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007486:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800748a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748c:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	695a      	ldr	r2, [r3, #20]
 8007494:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007498:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800749c:	430a      	orrs	r2, r1
 800749e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80074a0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80074a4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80074a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074aa:	f023 0120 	bic.w	r1, r3, #32
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	699a      	ldr	r2, [r3, #24]
 80074b2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80074b6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80074ba:	430a      	orrs	r2, r1
 80074bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80074be:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80074c2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80074c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074c8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80074cc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80074d0:	f022 0210 	bic.w	r2, r2, #16
 80074d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80074d6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80074da:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80074de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074e0:	2307      	movs	r3, #7
 80074e2:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 80074e6:	4013      	ands	r3, r2
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	69d2      	ldr	r2, [r2, #28]
 80074ec:	00d1      	lsls	r1, r2, #3
 80074ee:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80074f2:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80074f6:	430b      	orrs	r3, r1
 80074f8:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80074fa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80074fe:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007504:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007508:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800750c:	f042 0210 	orr.w	r2, r2, #16
 8007510:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10c      	bne.n	8007532 <RCCEx_PLL2_Config+0x176>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007518:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800751c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007522:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007526:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800752a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800752e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007530:	e01b      	b.n	800756a <RCCEx_PLL2_Config+0x1ae>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d10c      	bne.n	8007552 <RCCEx_PLL2_Config+0x196>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007538:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800753c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007542:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007546:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800754a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800754e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007550:	e00b      	b.n	800756a <RCCEx_PLL2_Config+0x1ae>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007552:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007556:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800755a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800755c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007560:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007564:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8007568:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800756a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800756e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007578:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800757c:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8007580:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007582:	f7fa f995 	bl	80018b0 <HAL_GetTick>
 8007586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007588:	e008      	b.n	800759c <RCCEx_PLL2_Config+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800758a:	f7fa f991 	bl	80018b0 <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	2b02      	cmp	r3, #2
 8007596:	d901      	bls.n	800759c <RCCEx_PLL2_Config+0x1e0>
      {
        return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e009      	b.n	80075b0 <RCCEx_PLL2_Config+0x1f4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800759c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80075a0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0ed      	beq.n	800758a <RCCEx_PLL2_Config+0x1ce>
    }

  }


  return status;
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075c6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80075ca:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80075ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d0:	f003 0303 	and.w	r3, r3, #3
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d101      	bne.n	80075dc <RCCEx_PLL3_Config+0x24>
  {
    return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e0e7      	b.n	80077ac <RCCEx_PLL3_Config+0x1f4>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80075dc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80075e0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80075ea:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80075ee:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80075f2:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075f4:	f7fa f95c 	bl	80018b0 <HAL_GetTick>
 80075f8:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075fa:	e008      	b.n	800760e <RCCEx_PLL3_Config+0x56>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075fc:	f7fa f958 	bl	80018b0 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	2b02      	cmp	r3, #2
 8007608:	d901      	bls.n	800760e <RCCEx_PLL3_Config+0x56>
      {
        return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e0ce      	b.n	80077ac <RCCEx_PLL3_Config+0x1f4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800760e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007612:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1ed      	bne.n	80075fc <RCCEx_PLL3_Config+0x44>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007620:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007624:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800762a:	f023 717c 	bic.w	r1, r3, #66060288	@ 0x3f00000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	051a      	lsls	r2, r3, #20
 8007634:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007638:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800763c:	430a      	orrs	r2, r1
 800763e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	3b01      	subs	r3, #1
 8007646:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	3b01      	subs	r3, #1
 8007650:	025b      	lsls	r3, r3, #9
 8007652:	b29b      	uxth	r3, r3
 8007654:	431a      	orrs	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	3b01      	subs	r3, #1
 800765c:	041b      	lsls	r3, r3, #16
 800765e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007662:	ea42 0103 	orr.w	r1, r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	3b01      	subs	r3, #1
 800766c:	061b      	lsls	r3, r3, #24
 800766e:	f003 42fe 	and.w	r2, r3, #2130706432	@ 0x7f000000
 8007672:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007676:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800767a:	430a      	orrs	r2, r1
 800767c:	641a      	str	r2, [r3, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800767e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007682:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007688:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	695a      	ldr	r2, [r3, #20]
 8007690:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007694:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007698:	430a      	orrs	r2, r1
 800769a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800769c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80076a0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80076a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a6:	f423 7100 	bic.w	r1, r3, #512	@ 0x200
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	699a      	ldr	r2, [r3, #24]
 80076ae:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80076b2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80076b6:	430a      	orrs	r2, r1
 80076b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80076ba:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80076be:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80076c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076c4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80076c8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80076cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80076d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80076d2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80076d6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80076da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076dc:	2307      	movs	r3, #7
 80076de:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 80076e2:	4013      	ands	r3, r2
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	69d2      	ldr	r2, [r2, #28]
 80076e8:	00d1      	lsls	r1, r2, #3
 80076ea:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80076ee:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80076f2:	430b      	orrs	r3, r1
 80076f4:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80076f6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80076fa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80076fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007700:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007704:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007708:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800770c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10c      	bne.n	800772e <RCCEx_PLL3_Config+0x176>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007714:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007718:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800771c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800771e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007722:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007726:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800772a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800772c:	e01b      	b.n	8007766 <RCCEx_PLL3_Config+0x1ae>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d10c      	bne.n	800774e <RCCEx_PLL3_Config+0x196>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007734:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007738:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800773c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800773e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007742:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007746:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800774a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800774c:	e00b      	b.n	8007766 <RCCEx_PLL3_Config+0x1ae>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800774e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007752:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007758:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800775c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007760:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007764:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007766:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800776a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007774:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007778:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800777c:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800777e:	f7fa f897 	bl	80018b0 <HAL_GetTick>
 8007782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007784:	e008      	b.n	8007798 <RCCEx_PLL3_Config+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007786:	f7fa f893 	bl	80018b0 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b02      	cmp	r3, #2
 8007792:	d901      	bls.n	8007798 <RCCEx_PLL3_Config+0x1e0>
      {
        return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e009      	b.n	80077ac <RCCEx_PLL3_Config+0x1f4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007798:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800779c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d0ed      	beq.n	8007786 <RCCEx_PLL3_Config+0x1ce>
    }

  }


  return status;
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e042      	b.n	800784c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d106      	bne.n	80077de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7f9 fe40 	bl	800145e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2224      	movs	r2, #36	@ 0x24
 80077e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f022 0201 	bic.w	r2, r2, #1
 80077f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fddc 	bl	80083bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f825 	bl	8007854 <UART_SetConfig>
 800780a:	4603      	mov	r3, r0
 800780c:	2b01      	cmp	r3, #1
 800780e:	d101      	bne.n	8007814 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e01b      	b.n	800784c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007822:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689a      	ldr	r2, [r3, #8]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007832:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f042 0201 	orr.w	r2, r2, #1
 8007842:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fe5b 	bl	8008500 <UART_CheckIdleState>
 800784a:	4603      	mov	r3, r0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007858:	b092      	sub	sp, #72	@ 0x48
 800785a:	af00      	add	r7, sp, #0
 800785c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	689a      	ldr	r2, [r3, #8]
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	431a      	orrs	r2, r3
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	431a      	orrs	r2, r3
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	69db      	ldr	r3, [r3, #28]
 8007878:	4313      	orrs	r3, r2
 800787a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	f646 13f3 	movw	r3, #27123	@ 0x69f3
 8007886:	f6cc 73ff 	movt	r3, #53247	@ 0xcfff
 800788a:	4013      	ands	r3, r2
 800788c:	697a      	ldr	r2, [r7, #20]
 800788e:	6812      	ldr	r2, [r2, #0]
 8007890:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007892:	430b      	orrs	r3, r1
 8007894:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	68da      	ldr	r2, [r3, #12]
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80078ba:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 80078be:	429a      	cmp	r2, r3
 80078c0:	d004      	beq.n	80078cc <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078c8:	4313      	orrs	r3, r2
 80078ca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689a      	ldr	r2, [r3, #8]
 80078d2:	f24f 43ff 	movw	r3, #62719	@ 0xf4ff
 80078d6:	f2c1 13ff 	movt	r3, #4607	@ 0x11ff
 80078da:	4013      	ands	r3, r2
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	6812      	ldr	r2, [r2, #0]
 80078e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80078e2:	430b      	orrs	r3, r1
 80078e4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ec:	f023 010f 	bic.w	r1, r3, #15
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	430a      	orrs	r2, r1
 80078fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007904:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007908:	429a      	cmp	r2, r3
 800790a:	d179      	bne.n	8007a00 <UART_SetConfig+0x1ac>
 800790c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007910:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007916:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800791a:	2b28      	cmp	r3, #40	@ 0x28
 800791c:	d86c      	bhi.n	80079f8 <UART_SetConfig+0x1a4>
 800791e:	a201      	add	r2, pc, #4	@ (adr r2, 8007924 <UART_SetConfig+0xd0>)
 8007920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007924:	080079c9 	.word	0x080079c9
 8007928:	080079f9 	.word	0x080079f9
 800792c:	080079f9 	.word	0x080079f9
 8007930:	080079f9 	.word	0x080079f9
 8007934:	080079f9 	.word	0x080079f9
 8007938:	080079f9 	.word	0x080079f9
 800793c:	080079f9 	.word	0x080079f9
 8007940:	080079f9 	.word	0x080079f9
 8007944:	080079d1 	.word	0x080079d1
 8007948:	080079f9 	.word	0x080079f9
 800794c:	080079f9 	.word	0x080079f9
 8007950:	080079f9 	.word	0x080079f9
 8007954:	080079f9 	.word	0x080079f9
 8007958:	080079f9 	.word	0x080079f9
 800795c:	080079f9 	.word	0x080079f9
 8007960:	080079f9 	.word	0x080079f9
 8007964:	080079d9 	.word	0x080079d9
 8007968:	080079f9 	.word	0x080079f9
 800796c:	080079f9 	.word	0x080079f9
 8007970:	080079f9 	.word	0x080079f9
 8007974:	080079f9 	.word	0x080079f9
 8007978:	080079f9 	.word	0x080079f9
 800797c:	080079f9 	.word	0x080079f9
 8007980:	080079f9 	.word	0x080079f9
 8007984:	080079e1 	.word	0x080079e1
 8007988:	080079f9 	.word	0x080079f9
 800798c:	080079f9 	.word	0x080079f9
 8007990:	080079f9 	.word	0x080079f9
 8007994:	080079f9 	.word	0x080079f9
 8007998:	080079f9 	.word	0x080079f9
 800799c:	080079f9 	.word	0x080079f9
 80079a0:	080079f9 	.word	0x080079f9
 80079a4:	080079e9 	.word	0x080079e9
 80079a8:	080079f9 	.word	0x080079f9
 80079ac:	080079f9 	.word	0x080079f9
 80079b0:	080079f9 	.word	0x080079f9
 80079b4:	080079f9 	.word	0x080079f9
 80079b8:	080079f9 	.word	0x080079f9
 80079bc:	080079f9 	.word	0x080079f9
 80079c0:	080079f9 	.word	0x080079f9
 80079c4:	080079f1 	.word	0x080079f1
 80079c8:	2301      	movs	r3, #1
 80079ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ce:	e240      	b.n	8007e52 <UART_SetConfig+0x5fe>
 80079d0:	2304      	movs	r3, #4
 80079d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079d6:	e23c      	b.n	8007e52 <UART_SetConfig+0x5fe>
 80079d8:	2308      	movs	r3, #8
 80079da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079de:	e238      	b.n	8007e52 <UART_SetConfig+0x5fe>
 80079e0:	2310      	movs	r3, #16
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e6:	e234      	b.n	8007e52 <UART_SetConfig+0x5fe>
 80079e8:	2320      	movs	r3, #32
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ee:	e230      	b.n	8007e52 <UART_SetConfig+0x5fe>
 80079f0:	2340      	movs	r3, #64	@ 0x40
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079f6:	e22c      	b.n	8007e52 <UART_SetConfig+0x5fe>
 80079f8:	2380      	movs	r3, #128	@ 0x80
 80079fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079fe:	e228      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007a08:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d133      	bne.n	8007a78 <UART_SetConfig+0x224>
 8007a10:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007a14:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a1a:	f003 0307 	and.w	r3, r3, #7
 8007a1e:	2b05      	cmp	r3, #5
 8007a20:	d826      	bhi.n	8007a70 <UART_SetConfig+0x21c>
 8007a22:	a201      	add	r2, pc, #4	@ (adr r2, 8007a28 <UART_SetConfig+0x1d4>)
 8007a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a28:	08007a41 	.word	0x08007a41
 8007a2c:	08007a49 	.word	0x08007a49
 8007a30:	08007a51 	.word	0x08007a51
 8007a34:	08007a59 	.word	0x08007a59
 8007a38:	08007a61 	.word	0x08007a61
 8007a3c:	08007a69 	.word	0x08007a69
 8007a40:	2300      	movs	r3, #0
 8007a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a46:	e204      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007a48:	2304      	movs	r3, #4
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a4e:	e200      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007a50:	2308      	movs	r3, #8
 8007a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a56:	e1fc      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007a58:	2310      	movs	r3, #16
 8007a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a5e:	e1f8      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007a60:	2320      	movs	r3, #32
 8007a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a66:	e1f4      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007a68:	2340      	movs	r3, #64	@ 0x40
 8007a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a6e:	e1f0      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007a70:	2380      	movs	r3, #128	@ 0x80
 8007a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a76:	e1ec      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8007a80:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d133      	bne.n	8007af0 <UART_SetConfig+0x29c>
 8007a88:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007a8c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a92:	f003 0307 	and.w	r3, r3, #7
 8007a96:	2b05      	cmp	r3, #5
 8007a98:	d826      	bhi.n	8007ae8 <UART_SetConfig+0x294>
 8007a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa0 <UART_SetConfig+0x24c>)
 8007a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa0:	08007ab9 	.word	0x08007ab9
 8007aa4:	08007ac1 	.word	0x08007ac1
 8007aa8:	08007ac9 	.word	0x08007ac9
 8007aac:	08007ad1 	.word	0x08007ad1
 8007ab0:	08007ad9 	.word	0x08007ad9
 8007ab4:	08007ae1 	.word	0x08007ae1
 8007ab8:	2300      	movs	r3, #0
 8007aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007abe:	e1c8      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007ac0:	2304      	movs	r3, #4
 8007ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ac6:	e1c4      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007ac8:	2308      	movs	r3, #8
 8007aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ace:	e1c0      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007ad0:	2310      	movs	r3, #16
 8007ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ad6:	e1bc      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007ad8:	2320      	movs	r3, #32
 8007ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ade:	e1b8      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007ae0:	2340      	movs	r3, #64	@ 0x40
 8007ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae6:	e1b4      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007ae8:	2380      	movs	r3, #128	@ 0x80
 8007aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aee:	e1b0      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	f44f 4398 	mov.w	r3, #19456	@ 0x4c00
 8007af8:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d133      	bne.n	8007b68 <UART_SetConfig+0x314>
 8007b00:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007b04:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b0a:	f003 0307 	and.w	r3, r3, #7
 8007b0e:	2b05      	cmp	r3, #5
 8007b10:	d826      	bhi.n	8007b60 <UART_SetConfig+0x30c>
 8007b12:	a201      	add	r2, pc, #4	@ (adr r2, 8007b18 <UART_SetConfig+0x2c4>)
 8007b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b18:	08007b31 	.word	0x08007b31
 8007b1c:	08007b39 	.word	0x08007b39
 8007b20:	08007b41 	.word	0x08007b41
 8007b24:	08007b49 	.word	0x08007b49
 8007b28:	08007b51 	.word	0x08007b51
 8007b2c:	08007b59 	.word	0x08007b59
 8007b30:	2300      	movs	r3, #0
 8007b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b36:	e18c      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007b38:	2304      	movs	r3, #4
 8007b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b3e:	e188      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007b40:	2308      	movs	r3, #8
 8007b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b46:	e184      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007b48:	2310      	movs	r3, #16
 8007b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b4e:	e180      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007b50:	2320      	movs	r3, #32
 8007b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b56:	e17c      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007b58:	2340      	movs	r3, #64	@ 0x40
 8007b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b5e:	e178      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007b60:	2380      	movs	r3, #128	@ 0x80
 8007b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b66:	e174      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8007b70:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d133      	bne.n	8007be0 <UART_SetConfig+0x38c>
 8007b78:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007b7c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b82:	f003 0307 	and.w	r3, r3, #7
 8007b86:	2b05      	cmp	r3, #5
 8007b88:	d826      	bhi.n	8007bd8 <UART_SetConfig+0x384>
 8007b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b90 <UART_SetConfig+0x33c>)
 8007b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b90:	08007ba9 	.word	0x08007ba9
 8007b94:	08007bb1 	.word	0x08007bb1
 8007b98:	08007bb9 	.word	0x08007bb9
 8007b9c:	08007bc1 	.word	0x08007bc1
 8007ba0:	08007bc9 	.word	0x08007bc9
 8007ba4:	08007bd1 	.word	0x08007bd1
 8007ba8:	2300      	movs	r3, #0
 8007baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bae:	e150      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007bb0:	2304      	movs	r3, #4
 8007bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bb6:	e14c      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007bb8:	2308      	movs	r3, #8
 8007bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bbe:	e148      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007bc0:	2310      	movs	r3, #16
 8007bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bc6:	e144      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007bc8:	2320      	movs	r3, #32
 8007bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bce:	e140      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007bd0:	2340      	movs	r3, #64	@ 0x40
 8007bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bd6:	e13c      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007bd8:	2380      	movs	r3, #128	@ 0x80
 8007bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bde:	e138      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8007be8:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d179      	bne.n	8007ce4 <UART_SetConfig+0x490>
 8007bf0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007bf4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bfe:	2b28      	cmp	r3, #40	@ 0x28
 8007c00:	d86c      	bhi.n	8007cdc <UART_SetConfig+0x488>
 8007c02:	a201      	add	r2, pc, #4	@ (adr r2, 8007c08 <UART_SetConfig+0x3b4>)
 8007c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c08:	08007cad 	.word	0x08007cad
 8007c0c:	08007cdd 	.word	0x08007cdd
 8007c10:	08007cdd 	.word	0x08007cdd
 8007c14:	08007cdd 	.word	0x08007cdd
 8007c18:	08007cdd 	.word	0x08007cdd
 8007c1c:	08007cdd 	.word	0x08007cdd
 8007c20:	08007cdd 	.word	0x08007cdd
 8007c24:	08007cdd 	.word	0x08007cdd
 8007c28:	08007cb5 	.word	0x08007cb5
 8007c2c:	08007cdd 	.word	0x08007cdd
 8007c30:	08007cdd 	.word	0x08007cdd
 8007c34:	08007cdd 	.word	0x08007cdd
 8007c38:	08007cdd 	.word	0x08007cdd
 8007c3c:	08007cdd 	.word	0x08007cdd
 8007c40:	08007cdd 	.word	0x08007cdd
 8007c44:	08007cdd 	.word	0x08007cdd
 8007c48:	08007cbd 	.word	0x08007cbd
 8007c4c:	08007cdd 	.word	0x08007cdd
 8007c50:	08007cdd 	.word	0x08007cdd
 8007c54:	08007cdd 	.word	0x08007cdd
 8007c58:	08007cdd 	.word	0x08007cdd
 8007c5c:	08007cdd 	.word	0x08007cdd
 8007c60:	08007cdd 	.word	0x08007cdd
 8007c64:	08007cdd 	.word	0x08007cdd
 8007c68:	08007cc5 	.word	0x08007cc5
 8007c6c:	08007cdd 	.word	0x08007cdd
 8007c70:	08007cdd 	.word	0x08007cdd
 8007c74:	08007cdd 	.word	0x08007cdd
 8007c78:	08007cdd 	.word	0x08007cdd
 8007c7c:	08007cdd 	.word	0x08007cdd
 8007c80:	08007cdd 	.word	0x08007cdd
 8007c84:	08007cdd 	.word	0x08007cdd
 8007c88:	08007ccd 	.word	0x08007ccd
 8007c8c:	08007cdd 	.word	0x08007cdd
 8007c90:	08007cdd 	.word	0x08007cdd
 8007c94:	08007cdd 	.word	0x08007cdd
 8007c98:	08007cdd 	.word	0x08007cdd
 8007c9c:	08007cdd 	.word	0x08007cdd
 8007ca0:	08007cdd 	.word	0x08007cdd
 8007ca4:	08007cdd 	.word	0x08007cdd
 8007ca8:	08007cd5 	.word	0x08007cd5
 8007cac:	2301      	movs	r3, #1
 8007cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cb2:	e0ce      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007cb4:	2304      	movs	r3, #4
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cba:	e0ca      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007cbc:	2308      	movs	r3, #8
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cc2:	e0c6      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007cc4:	2310      	movs	r3, #16
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cca:	e0c2      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007ccc:	2320      	movs	r3, #32
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd2:	e0be      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007cd4:	2340      	movs	r3, #64	@ 0x40
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cda:	e0ba      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007cdc:	2380      	movs	r3, #128	@ 0x80
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ce2:	e0b6      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8007cec:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d133      	bne.n	8007d5c <UART_SetConfig+0x508>
 8007cf4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007cf8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cfe:	f003 0307 	and.w	r3, r3, #7
 8007d02:	2b05      	cmp	r3, #5
 8007d04:	d826      	bhi.n	8007d54 <UART_SetConfig+0x500>
 8007d06:	a201      	add	r2, pc, #4	@ (adr r2, 8007d0c <UART_SetConfig+0x4b8>)
 8007d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0c:	08007d25 	.word	0x08007d25
 8007d10:	08007d2d 	.word	0x08007d2d
 8007d14:	08007d35 	.word	0x08007d35
 8007d18:	08007d3d 	.word	0x08007d3d
 8007d1c:	08007d45 	.word	0x08007d45
 8007d20:	08007d4d 	.word	0x08007d4d
 8007d24:	2300      	movs	r3, #0
 8007d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d2a:	e092      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007d2c:	2304      	movs	r3, #4
 8007d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d32:	e08e      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007d34:	2308      	movs	r3, #8
 8007d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3a:	e08a      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007d3c:	2310      	movs	r3, #16
 8007d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d42:	e086      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007d44:	2320      	movs	r3, #32
 8007d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d4a:	e082      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007d4c:	2340      	movs	r3, #64	@ 0x40
 8007d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d52:	e07e      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007d54:	2380      	movs	r3, #128	@ 0x80
 8007d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d5a:	e07a      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	f44f 43f8 	mov.w	r3, #31744	@ 0x7c00
 8007d64:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d133      	bne.n	8007dd4 <UART_SetConfig+0x580>
 8007d6c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007d70:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d76:	f003 0307 	and.w	r3, r3, #7
 8007d7a:	2b05      	cmp	r3, #5
 8007d7c:	d826      	bhi.n	8007dcc <UART_SetConfig+0x578>
 8007d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d84 <UART_SetConfig+0x530>)
 8007d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d84:	08007d9d 	.word	0x08007d9d
 8007d88:	08007da5 	.word	0x08007da5
 8007d8c:	08007dad 	.word	0x08007dad
 8007d90:	08007db5 	.word	0x08007db5
 8007d94:	08007dbd 	.word	0x08007dbd
 8007d98:	08007dc5 	.word	0x08007dc5
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007da2:	e056      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007da4:	2304      	movs	r3, #4
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007daa:	e052      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007dac:	2308      	movs	r3, #8
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007db2:	e04e      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007db4:	2310      	movs	r3, #16
 8007db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dba:	e04a      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007dbc:	2320      	movs	r3, #32
 8007dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dc2:	e046      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007dc4:	2340      	movs	r3, #64	@ 0x40
 8007dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dca:	e042      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007dcc:	2380      	movs	r3, #128	@ 0x80
 8007dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dd2:	e03e      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007ddc:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d133      	bne.n	8007e4c <UART_SetConfig+0x5f8>
 8007de4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007de8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dee:	f003 0307 	and.w	r3, r3, #7
 8007df2:	2b05      	cmp	r3, #5
 8007df4:	d826      	bhi.n	8007e44 <UART_SetConfig+0x5f0>
 8007df6:	a201      	add	r2, pc, #4	@ (adr r2, 8007dfc <UART_SetConfig+0x5a8>)
 8007df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfc:	08007e15 	.word	0x08007e15
 8007e00:	08007e1d 	.word	0x08007e1d
 8007e04:	08007e25 	.word	0x08007e25
 8007e08:	08007e2d 	.word	0x08007e2d
 8007e0c:	08007e35 	.word	0x08007e35
 8007e10:	08007e3d 	.word	0x08007e3d
 8007e14:	2302      	movs	r3, #2
 8007e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e1a:	e01a      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007e1c:	2304      	movs	r3, #4
 8007e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e22:	e016      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007e24:	2308      	movs	r3, #8
 8007e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e2a:	e012      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007e2c:	2310      	movs	r3, #16
 8007e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e32:	e00e      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007e34:	2320      	movs	r3, #32
 8007e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e3a:	e00a      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007e3c:	2340      	movs	r3, #64	@ 0x40
 8007e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e42:	e006      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007e44:	2380      	movs	r3, #128	@ 0x80
 8007e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e4a:	e002      	b.n	8007e52 <UART_SetConfig+0x5fe>
 8007e4c:	2380      	movs	r3, #128	@ 0x80
 8007e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007e5a:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	f040 8100 	bne.w	8008064 <UART_SetConfig+0x810>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e64:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007e68:	2b20      	cmp	r3, #32
 8007e6a:	dc47      	bgt.n	8007efc <UART_SetConfig+0x6a8>
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	f2c0 8084 	blt.w	8007f7a <UART_SetConfig+0x726>
 8007e72:	3b02      	subs	r3, #2
 8007e74:	2b1e      	cmp	r3, #30
 8007e76:	f200 8080 	bhi.w	8007f7a <UART_SetConfig+0x726>
 8007e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e80 <UART_SetConfig+0x62c>)
 8007e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e80:	08007f03 	.word	0x08007f03
 8007e84:	08007f7b 	.word	0x08007f7b
 8007e88:	08007f0b 	.word	0x08007f0b
 8007e8c:	08007f7b 	.word	0x08007f7b
 8007e90:	08007f7b 	.word	0x08007f7b
 8007e94:	08007f7b 	.word	0x08007f7b
 8007e98:	08007f1b 	.word	0x08007f1b
 8007e9c:	08007f7b 	.word	0x08007f7b
 8007ea0:	08007f7b 	.word	0x08007f7b
 8007ea4:	08007f7b 	.word	0x08007f7b
 8007ea8:	08007f7b 	.word	0x08007f7b
 8007eac:	08007f7b 	.word	0x08007f7b
 8007eb0:	08007f7b 	.word	0x08007f7b
 8007eb4:	08007f7b 	.word	0x08007f7b
 8007eb8:	08007f2b 	.word	0x08007f2b
 8007ebc:	08007f7b 	.word	0x08007f7b
 8007ec0:	08007f7b 	.word	0x08007f7b
 8007ec4:	08007f7b 	.word	0x08007f7b
 8007ec8:	08007f7b 	.word	0x08007f7b
 8007ecc:	08007f7b 	.word	0x08007f7b
 8007ed0:	08007f7b 	.word	0x08007f7b
 8007ed4:	08007f7b 	.word	0x08007f7b
 8007ed8:	08007f7b 	.word	0x08007f7b
 8007edc:	08007f7b 	.word	0x08007f7b
 8007ee0:	08007f7b 	.word	0x08007f7b
 8007ee4:	08007f7b 	.word	0x08007f7b
 8007ee8:	08007f7b 	.word	0x08007f7b
 8007eec:	08007f7b 	.word	0x08007f7b
 8007ef0:	08007f7b 	.word	0x08007f7b
 8007ef4:	08007f7b 	.word	0x08007f7b
 8007ef8:	08007f67 	.word	0x08007f67
 8007efc:	2b40      	cmp	r3, #64	@ 0x40
 8007efe:	d038      	beq.n	8007f72 <UART_SetConfig+0x71e>
 8007f00:	e03b      	b.n	8007f7a <UART_SetConfig+0x726>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007f02:	f7fe fd9d 	bl	8006a40 <HAL_RCCEx_GetD3PCLK1Freq>
 8007f06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f08:	e03d      	b.n	8007f86 <UART_SetConfig+0x732>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fe fdae 	bl	8006a70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f18:	e035      	b.n	8007f86 <UART_SetConfig+0x732>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f1a:	f107 0318 	add.w	r3, r7, #24
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fe ff33 	bl	8006d8a <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f28:	e02d      	b.n	8007f86 <UART_SetConfig+0x732>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f2a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007f2e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0320 	and.w	r3, r3, #32
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00e      	beq.n	8007f5a <UART_SetConfig+0x706>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f3c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007f40:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	08db      	lsrs	r3, r3, #3
 8007f48:	f003 0203 	and.w	r2, r3, #3
 8007f4c:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8007f50:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8007f54:	40d3      	lsrs	r3, r2
 8007f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f58:	e015      	b.n	8007f86 <UART_SetConfig+0x732>
          pclk = (uint32_t) HSI_VALUE;
 8007f5a:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8007f5e:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8007f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f64:	e00f      	b.n	8007f86 <UART_SetConfig+0x732>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f66:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8007f6a:	f2c0 033d 	movt	r3, #61	@ 0x3d
 8007f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f70:	e009      	b.n	8007f86 <UART_SetConfig+0x732>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f78:	e005      	b.n	8007f86 <UART_SetConfig+0x732>
      default:
        pclk = 0U;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007f84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f000 8202 	beq.w	8008392 <UART_SetConfig+0xb3e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f92:	f249 03a0 	movw	r3, #37024	@ 0x90a0
 8007f96:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8007f9a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fa6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	4613      	mov	r3, r2
 8007fae:	005b      	lsls	r3, r3, #1
 8007fb0:	4413      	add	r3, r2
 8007fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d305      	bcc.n	8007fc4 <UART_SetConfig+0x770>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d903      	bls.n	8007fcc <UART_SetConfig+0x778>
      {
        ret = HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007fca:	e1e2      	b.n	8008392 <UART_SetConfig+0xb3e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fce:	2200      	movs	r2, #0
 8007fd0:	60bb      	str	r3, [r7, #8]
 8007fd2:	60fa      	str	r2, [r7, #12]
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fd8:	f249 03a0 	movw	r3, #37024	@ 0x90a0
 8007fdc:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8007fe0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	603b      	str	r3, [r7, #0]
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ff0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ff4:	f7f8 f970 	bl	80002d8 <__aeabi_uldivmod>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	4619      	mov	r1, r3
 8008000:	f04f 0200 	mov.w	r2, #0
 8008004:	f04f 0300 	mov.w	r3, #0
 8008008:	020b      	lsls	r3, r1, #8
 800800a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800800e:	0202      	lsls	r2, r0, #8
 8008010:	6979      	ldr	r1, [r7, #20]
 8008012:	6849      	ldr	r1, [r1, #4]
 8008014:	0849      	lsrs	r1, r1, #1
 8008016:	2000      	movs	r0, #0
 8008018:	460c      	mov	r4, r1
 800801a:	4605      	mov	r5, r0
 800801c:	eb12 0804 	adds.w	r8, r2, r4
 8008020:	eb43 0905 	adc.w	r9, r3, r5
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	469a      	mov	sl, r3
 800802c:	4693      	mov	fp, r2
 800802e:	4652      	mov	r2, sl
 8008030:	465b      	mov	r3, fp
 8008032:	4640      	mov	r0, r8
 8008034:	4649      	mov	r1, r9
 8008036:	f7f8 f94f 	bl	80002d8 <__aeabi_uldivmod>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4613      	mov	r3, r2
 8008040:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008044:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008048:	d308      	bcc.n	800805c <UART_SetConfig+0x808>
 800804a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008050:	d204      	bcs.n	800805c <UART_SetConfig+0x808>
        {
          huart->Instance->BRR = usartdiv;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008058:	60da      	str	r2, [r3, #12]
 800805a:	e19a      	b.n	8008392 <UART_SetConfig+0xb3e>
        }
        else
        {
          ret = HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008062:	e196      	b.n	8008392 <UART_SetConfig+0xb3e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	69db      	ldr	r3, [r3, #28]
 8008068:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800806c:	f040 80d1 	bne.w	8008212 <UART_SetConfig+0x9be>
  {
    switch (clocksource)
 8008070:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008074:	2b20      	cmp	r3, #32
 8008076:	dc4b      	bgt.n	8008110 <UART_SetConfig+0x8bc>
 8008078:	2b00      	cmp	r3, #0
 800807a:	f2c0 808c 	blt.w	8008196 <UART_SetConfig+0x942>
 800807e:	2b20      	cmp	r3, #32
 8008080:	f200 8089 	bhi.w	8008196 <UART_SetConfig+0x942>
 8008084:	a201      	add	r2, pc, #4	@ (adr r2, 800808c <UART_SetConfig+0x838>)
 8008086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808a:	bf00      	nop
 800808c:	08008117 	.word	0x08008117
 8008090:	0800811f 	.word	0x0800811f
 8008094:	08008197 	.word	0x08008197
 8008098:	08008197 	.word	0x08008197
 800809c:	08008127 	.word	0x08008127
 80080a0:	08008197 	.word	0x08008197
 80080a4:	08008197 	.word	0x08008197
 80080a8:	08008197 	.word	0x08008197
 80080ac:	08008137 	.word	0x08008137
 80080b0:	08008197 	.word	0x08008197
 80080b4:	08008197 	.word	0x08008197
 80080b8:	08008197 	.word	0x08008197
 80080bc:	08008197 	.word	0x08008197
 80080c0:	08008197 	.word	0x08008197
 80080c4:	08008197 	.word	0x08008197
 80080c8:	08008197 	.word	0x08008197
 80080cc:	08008147 	.word	0x08008147
 80080d0:	08008197 	.word	0x08008197
 80080d4:	08008197 	.word	0x08008197
 80080d8:	08008197 	.word	0x08008197
 80080dc:	08008197 	.word	0x08008197
 80080e0:	08008197 	.word	0x08008197
 80080e4:	08008197 	.word	0x08008197
 80080e8:	08008197 	.word	0x08008197
 80080ec:	08008197 	.word	0x08008197
 80080f0:	08008197 	.word	0x08008197
 80080f4:	08008197 	.word	0x08008197
 80080f8:	08008197 	.word	0x08008197
 80080fc:	08008197 	.word	0x08008197
 8008100:	08008197 	.word	0x08008197
 8008104:	08008197 	.word	0x08008197
 8008108:	08008197 	.word	0x08008197
 800810c:	08008183 	.word	0x08008183
 8008110:	2b40      	cmp	r3, #64	@ 0x40
 8008112:	d03c      	beq.n	800818e <UART_SetConfig+0x93a>
 8008114:	e03f      	b.n	8008196 <UART_SetConfig+0x942>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008116:	f7fc faa1 	bl	800465c <HAL_RCC_GetPCLK1Freq>
 800811a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800811c:	e041      	b.n	80081a2 <UART_SetConfig+0x94e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800811e:	f7fc fab5 	bl	800468c <HAL_RCC_GetPCLK2Freq>
 8008122:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008124:	e03d      	b.n	80081a2 <UART_SetConfig+0x94e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008126:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800812a:	4618      	mov	r0, r3
 800812c:	f7fe fca0 	bl	8006a70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008134:	e035      	b.n	80081a2 <UART_SetConfig+0x94e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008136:	f107 0318 	add.w	r3, r7, #24
 800813a:	4618      	mov	r0, r3
 800813c:	f7fe fe25 	bl	8006d8a <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008144:	e02d      	b.n	80081a2 <UART_SetConfig+0x94e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008146:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800814a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0320 	and.w	r3, r3, #32
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00e      	beq.n	8008176 <UART_SetConfig+0x922>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008158:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800815c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	08db      	lsrs	r3, r3, #3
 8008164:	f003 0203 	and.w	r2, r3, #3
 8008168:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800816c:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8008170:	40d3      	lsrs	r3, r2
 8008172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008174:	e015      	b.n	80081a2 <UART_SetConfig+0x94e>
          pclk = (uint32_t) HSI_VALUE;
 8008176:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800817a:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 800817e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008180:	e00f      	b.n	80081a2 <UART_SetConfig+0x94e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008182:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8008186:	f2c0 033d 	movt	r3, #61	@ 0x3d
 800818a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800818c:	e009      	b.n	80081a2 <UART_SetConfig+0x94e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800818e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008194:	e005      	b.n	80081a2 <UART_SetConfig+0x94e>
      default:
        pclk = 0U;
 8008196:	2300      	movs	r3, #0
 8008198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80081a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f000 80f4 	beq.w	8008392 <UART_SetConfig+0xb3e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081ae:	f249 03a0 	movw	r3, #37024	@ 0x90a0
 80081b2:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80081b6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80081ba:	461a      	mov	r2, r3
 80081bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081be:	fbb3 f3f2 	udiv	r3, r3, r2
 80081c2:	005a      	lsls	r2, r3, #1
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	085b      	lsrs	r3, r3, #1
 80081ca:	441a      	add	r2, r3
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d8:	2b0f      	cmp	r3, #15
 80081da:	d916      	bls.n	800820a <UART_SetConfig+0x9b6>
 80081dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081e2:	d212      	bcs.n	800820a <UART_SetConfig+0x9b6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	f023 030f 	bic.w	r3, r3, #15
 80081ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f0:	085b      	lsrs	r3, r3, #1
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	f003 0307 	and.w	r3, r3, #7
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80081fc:	4313      	orrs	r3, r2
 80081fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008206:	60da      	str	r2, [r3, #12]
 8008208:	e0c3      	b.n	8008392 <UART_SetConfig+0xb3e>
      }
      else
      {
        ret = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008210:	e0bf      	b.n	8008392 <UART_SetConfig+0xb3e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008212:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008216:	2b20      	cmp	r3, #32
 8008218:	dc4a      	bgt.n	80082b0 <UART_SetConfig+0xa5c>
 800821a:	2b00      	cmp	r3, #0
 800821c:	f2c0 808b 	blt.w	8008336 <UART_SetConfig+0xae2>
 8008220:	2b20      	cmp	r3, #32
 8008222:	f200 8088 	bhi.w	8008336 <UART_SetConfig+0xae2>
 8008226:	a201      	add	r2, pc, #4	@ (adr r2, 800822c <UART_SetConfig+0x9d8>)
 8008228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822c:	080082b7 	.word	0x080082b7
 8008230:	080082bf 	.word	0x080082bf
 8008234:	08008337 	.word	0x08008337
 8008238:	08008337 	.word	0x08008337
 800823c:	080082c7 	.word	0x080082c7
 8008240:	08008337 	.word	0x08008337
 8008244:	08008337 	.word	0x08008337
 8008248:	08008337 	.word	0x08008337
 800824c:	080082d7 	.word	0x080082d7
 8008250:	08008337 	.word	0x08008337
 8008254:	08008337 	.word	0x08008337
 8008258:	08008337 	.word	0x08008337
 800825c:	08008337 	.word	0x08008337
 8008260:	08008337 	.word	0x08008337
 8008264:	08008337 	.word	0x08008337
 8008268:	08008337 	.word	0x08008337
 800826c:	080082e7 	.word	0x080082e7
 8008270:	08008337 	.word	0x08008337
 8008274:	08008337 	.word	0x08008337
 8008278:	08008337 	.word	0x08008337
 800827c:	08008337 	.word	0x08008337
 8008280:	08008337 	.word	0x08008337
 8008284:	08008337 	.word	0x08008337
 8008288:	08008337 	.word	0x08008337
 800828c:	08008337 	.word	0x08008337
 8008290:	08008337 	.word	0x08008337
 8008294:	08008337 	.word	0x08008337
 8008298:	08008337 	.word	0x08008337
 800829c:	08008337 	.word	0x08008337
 80082a0:	08008337 	.word	0x08008337
 80082a4:	08008337 	.word	0x08008337
 80082a8:	08008337 	.word	0x08008337
 80082ac:	08008323 	.word	0x08008323
 80082b0:	2b40      	cmp	r3, #64	@ 0x40
 80082b2:	d03c      	beq.n	800832e <UART_SetConfig+0xada>
 80082b4:	e03f      	b.n	8008336 <UART_SetConfig+0xae2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082b6:	f7fc f9d1 	bl	800465c <HAL_RCC_GetPCLK1Freq>
 80082ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80082bc:	e041      	b.n	8008342 <UART_SetConfig+0xaee>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082be:	f7fc f9e5 	bl	800468c <HAL_RCC_GetPCLK2Freq>
 80082c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80082c4:	e03d      	b.n	8008342 <UART_SetConfig+0xaee>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fe fbd0 	bl	8006a70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80082d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082d4:	e035      	b.n	8008342 <UART_SetConfig+0xaee>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082d6:	f107 0318 	add.w	r3, r7, #24
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fe fd55 	bl	8006d8a <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082e4:	e02d      	b.n	8008342 <UART_SetConfig+0xaee>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082e6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80082ea:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0320 	and.w	r3, r3, #32
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00e      	beq.n	8008316 <UART_SetConfig+0xac2>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80082f8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80082fc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	08db      	lsrs	r3, r3, #3
 8008304:	f003 0203 	and.w	r2, r3, #3
 8008308:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800830c:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8008310:	40d3      	lsrs	r3, r2
 8008312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008314:	e015      	b.n	8008342 <UART_SetConfig+0xaee>
          pclk = (uint32_t) HSI_VALUE;
 8008316:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800831a:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 800831e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008320:	e00f      	b.n	8008342 <UART_SetConfig+0xaee>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008322:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8008326:	f2c0 033d 	movt	r3, #61	@ 0x3d
 800832a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800832c:	e009      	b.n	8008342 <UART_SetConfig+0xaee>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800832e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008334:	e005      	b.n	8008342 <UART_SetConfig+0xaee>
      default:
        pclk = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008340:	bf00      	nop
    }

    if (pclk != 0U)
 8008342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008344:	2b00      	cmp	r3, #0
 8008346:	d024      	beq.n	8008392 <UART_SetConfig+0xb3e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800834c:	f249 03a0 	movw	r3, #37024	@ 0x90a0
 8008350:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8008354:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008358:	461a      	mov	r2, r3
 800835a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800835c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	085b      	lsrs	r3, r3, #1
 8008366:	441a      	add	r2, r3
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008370:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008374:	2b0f      	cmp	r3, #15
 8008376:	d909      	bls.n	800838c <UART_SetConfig+0xb38>
 8008378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800837a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800837e:	d205      	bcs.n	800838c <UART_SetConfig+0xb38>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008382:	b29a      	uxth	r2, r3
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	60da      	str	r2, [r3, #12]
 800838a:	e002      	b.n	8008392 <UART_SetConfig+0xb3e>
      }
      else
      {
        ret = HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	2201      	movs	r2, #1
 8008396:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2201      	movs	r2, #1
 800839e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	2200      	movs	r2, #0
 80083a6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	2200      	movs	r2, #0
 80083ac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80083ae:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3748      	adds	r7, #72	@ 0x48
 80083b6:	46bd      	mov	sp, r7
 80083b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080083bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c8:	f003 0308 	and.w	r3, r3, #8
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00a      	beq.n	80083e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	430a      	orrs	r2, r1
 80083e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00a      	beq.n	8008408 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	430a      	orrs	r2, r1
 8008406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800840c:	f003 0302 	and.w	r3, r3, #2
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00a      	beq.n	800842a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800842e:	f003 0304 	and.w	r3, r3, #4
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00a      	beq.n	800844c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	430a      	orrs	r2, r1
 800844a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008450:	f003 0310 	and.w	r3, r3, #16
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00a      	beq.n	800846e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	430a      	orrs	r2, r1
 800846c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008472:	f003 0320 	and.w	r3, r3, #32
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00a      	beq.n	8008490 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	430a      	orrs	r2, r1
 800848e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008498:	2b00      	cmp	r3, #0
 800849a:	d01a      	beq.n	80084d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	430a      	orrs	r2, r1
 80084b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084ba:	d10a      	bne.n	80084d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	430a      	orrs	r2, r1
 80084d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00a      	beq.n	80084f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	430a      	orrs	r2, r1
 80084f2:	605a      	str	r2, [r3, #4]
  }
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b098      	sub	sp, #96	@ 0x60
 8008504:	af02      	add	r7, sp, #8
 8008506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008510:	f7f9 f9ce 	bl	80018b0 <HAL_GetTick>
 8008514:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0308 	and.w	r3, r3, #8
 8008520:	2b08      	cmp	r3, #8
 8008522:	d12f      	bne.n	8008584 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008524:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800852c:	2200      	movs	r2, #0
 800852e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f88e 	bl	8008654 <UART_WaitOnFlagUntilTimeout>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d022      	beq.n	8008584 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008546:	e853 3f00 	ldrex	r3, [r3]
 800854a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800854c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800854e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008552:	653b      	str	r3, [r7, #80]	@ 0x50
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	461a      	mov	r2, r3
 800855a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800855c:	647b      	str	r3, [r7, #68]	@ 0x44
 800855e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008560:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008562:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008564:	e841 2300 	strex	r3, r2, [r1]
 8008568:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800856a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800856c:	2b00      	cmp	r3, #0
 800856e:	d1e6      	bne.n	800853e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2220      	movs	r2, #32
 8008574:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e063      	b.n	800864c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 0304 	and.w	r3, r3, #4
 800858e:	2b04      	cmp	r3, #4
 8008590:	d149      	bne.n	8008626 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008592:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800859a:	2200      	movs	r2, #0
 800859c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f857 	bl	8008654 <UART_WaitOnFlagUntilTimeout>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d03c      	beq.n	8008626 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b4:	e853 3f00 	ldrex	r3, [r3]
 80085b8:	623b      	str	r3, [r7, #32]
   return(result);
 80085ba:	6a3b      	ldr	r3, [r7, #32]
 80085bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	461a      	mov	r2, r3
 80085c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80085cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085d2:	e841 2300 	strex	r3, r2, [r1]
 80085d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1e6      	bne.n	80085ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	3308      	adds	r3, #8
 80085e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	e853 3f00 	ldrex	r3, [r3]
 80085ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f023 0301 	bic.w	r3, r3, #1
 80085f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3308      	adds	r3, #8
 80085fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085fe:	61fa      	str	r2, [r7, #28]
 8008600:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008602:	69b9      	ldr	r1, [r7, #24]
 8008604:	69fa      	ldr	r2, [r7, #28]
 8008606:	e841 2300 	strex	r3, r2, [r1]
 800860a:	617b      	str	r3, [r7, #20]
   return(result);
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1e5      	bne.n	80085de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2220      	movs	r2, #32
 8008616:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	e012      	b.n	800864c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2220      	movs	r2, #32
 800862a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2220      	movs	r2, #32
 8008632:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3758      	adds	r7, #88	@ 0x58
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	603b      	str	r3, [r7, #0]
 8008660:	4613      	mov	r3, r2
 8008662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008664:	e04f      	b.n	8008706 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800866c:	d04b      	beq.n	8008706 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800866e:	f7f9 f91f 	bl	80018b0 <HAL_GetTick>
 8008672:	4602      	mov	r2, r0
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	429a      	cmp	r2, r3
 800867c:	d302      	bcc.n	8008684 <UART_WaitOnFlagUntilTimeout+0x30>
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d101      	bne.n	8008688 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e04e      	b.n	8008726 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0304 	and.w	r3, r3, #4
 8008692:	2b00      	cmp	r3, #0
 8008694:	d037      	beq.n	8008706 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	2b80      	cmp	r3, #128	@ 0x80
 800869a:	d034      	beq.n	8008706 <UART_WaitOnFlagUntilTimeout+0xb2>
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	2b40      	cmp	r3, #64	@ 0x40
 80086a0:	d031      	beq.n	8008706 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	69db      	ldr	r3, [r3, #28]
 80086a8:	f003 0308 	and.w	r3, r3, #8
 80086ac:	2b08      	cmp	r3, #8
 80086ae:	d110      	bne.n	80086d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2208      	movs	r2, #8
 80086b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f000 f838 	bl	800872e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2208      	movs	r2, #8
 80086c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e029      	b.n	8008726 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	69db      	ldr	r3, [r3, #28]
 80086d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086e0:	d111      	bne.n	8008706 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f000 f81e 	bl	800872e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2220      	movs	r2, #32
 80086f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008702:	2303      	movs	r3, #3
 8008704:	e00f      	b.n	8008726 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	69da      	ldr	r2, [r3, #28]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	4013      	ands	r3, r2
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	429a      	cmp	r2, r3
 8008714:	bf0c      	ite	eq
 8008716:	2301      	moveq	r3, #1
 8008718:	2300      	movne	r3, #0
 800871a:	b2db      	uxtb	r3, r3
 800871c:	461a      	mov	r2, r3
 800871e:	79fb      	ldrb	r3, [r7, #7]
 8008720:	429a      	cmp	r2, r3
 8008722:	d0a0      	beq.n	8008666 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800872e:	b480      	push	{r7}
 8008730:	b095      	sub	sp, #84	@ 0x54
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800873e:	e853 3f00 	ldrex	r3, [r3]
 8008742:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008746:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800874a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	461a      	mov	r2, r3
 8008752:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008754:	643b      	str	r3, [r7, #64]	@ 0x40
 8008756:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008758:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800875a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800875c:	e841 2300 	strex	r3, r2, [r1]
 8008760:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1e6      	bne.n	8008736 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	3308      	adds	r3, #8
 800876e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	e853 3f00 	ldrex	r3, [r3]
 8008776:	61fb      	str	r3, [r7, #28]
   return(result);
 8008778:	69fa      	ldr	r2, [r7, #28]
 800877a:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800877e:	f6ce 73ff 	movt	r3, #61439	@ 0xefff
 8008782:	4013      	ands	r3, r2
 8008784:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3308      	adds	r3, #8
 800878c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800878e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008790:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008792:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008794:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008796:	e841 2300 	strex	r3, r2, [r1]
 800879a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800879c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1e2      	bne.n	8008768 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d118      	bne.n	80087dc <UART_EndRxTransfer+0xae>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	e853 3f00 	ldrex	r3, [r3]
 80087b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	f023 0310 	bic.w	r3, r3, #16
 80087be:	647b      	str	r3, [r7, #68]	@ 0x44
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	461a      	mov	r2, r3
 80087c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087c8:	61bb      	str	r3, [r7, #24]
 80087ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	6979      	ldr	r1, [r7, #20]
 80087ce:	69ba      	ldr	r2, [r7, #24]
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	613b      	str	r3, [r7, #16]
   return(result);
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e6      	bne.n	80087aa <UART_EndRxTransfer+0x7c>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2220      	movs	r2, #32
 80087e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80087f0:	bf00      	nop
 80087f2:	3754      	adds	r7, #84	@ 0x54
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800880a:	2b01      	cmp	r3, #1
 800880c:	d101      	bne.n	8008812 <HAL_UARTEx_DisableFifoMode+0x16>
 800880e:	2302      	movs	r3, #2
 8008810:	e027      	b.n	8008862 <HAL_UARTEx_DisableFifoMode+0x66>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2201      	movs	r2, #1
 8008816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2224      	movs	r2, #36	@ 0x24
 800881e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f022 0201 	bic.w	r2, r2, #1
 8008838:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008840:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2220      	movs	r2, #32
 8008854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3714      	adds	r7, #20
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b084      	sub	sp, #16
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800887e:	2b01      	cmp	r3, #1
 8008880:	d101      	bne.n	8008886 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008882:	2302      	movs	r3, #2
 8008884:	e02d      	b.n	80088e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2224      	movs	r2, #36	@ 0x24
 8008892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f022 0201 	bic.w	r2, r2, #1
 80088ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	683a      	ldr	r2, [r7, #0]
 80088be:	430a      	orrs	r2, r1
 80088c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f84f 	bl	8008966 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2220      	movs	r2, #32
 80088d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b084      	sub	sp, #16
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d101      	bne.n	8008902 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088fe:	2302      	movs	r3, #2
 8008900:	e02d      	b.n	800895e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2224      	movs	r2, #36	@ 0x24
 800890e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f022 0201 	bic.w	r2, r2, #1
 8008928:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	683a      	ldr	r2, [r7, #0]
 800893a:	430a      	orrs	r2, r1
 800893c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f811 	bl	8008966 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2220      	movs	r2, #32
 8008950:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008966:	b480      	push	{r7}
 8008968:	b085      	sub	sp, #20
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008972:	2b00      	cmp	r3, #0
 8008974:	d108      	bne.n	8008988 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008986:	e03d      	b.n	8008a04 <UARTEx_SetNbDataToProcess+0x9e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008988:	2310      	movs	r3, #16
 800898a:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800898c:	2310      	movs	r3, #16
 800898e:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	0e5b      	lsrs	r3, r3, #25
 8008998:	b2db      	uxtb	r3, r3
 800899a:	f003 0307 	and.w	r3, r3, #7
 800899e:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	0f5b      	lsrs	r3, r3, #29
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	f003 0307 	and.w	r3, r3, #7
 80089ae:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089b0:	7bba      	ldrb	r2, [r7, #14]
 80089b2:	7b39      	ldrb	r1, [r7, #12]
 80089b4:	f249 03b8 	movw	r3, #37048	@ 0x90b8
 80089b8:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80089bc:	5c5b      	ldrb	r3, [r3, r1]
 80089be:	fb03 f202 	mul.w	r2, r3, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80089c2:	7b39      	ldrb	r1, [r7, #12]
 80089c4:	f249 03c0 	movw	r3, #37056	@ 0x90c0
 80089c8:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80089cc:	5c5b      	ldrb	r3, [r3, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089da:	7bfa      	ldrb	r2, [r7, #15]
 80089dc:	7b79      	ldrb	r1, [r7, #13]
 80089de:	f249 03b8 	movw	r3, #37048	@ 0x90b8
 80089e2:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80089e6:	5c5b      	ldrb	r3, [r3, r1]
 80089e8:	fb03 f202 	mul.w	r2, r3, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80089ec:	7b79      	ldrb	r1, [r7, #13]
 80089ee:	f249 03c0 	movw	r3, #37056	@ 0x90c0
 80089f2:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80089f6:	5c5b      	ldrb	r3, [r3, r1]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008a04:	bf00      	nop
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a10:	b084      	sub	sp, #16
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b084      	sub	sp, #16
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	f107 001c 	add.w	r0, r7, #28
 8008a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a22:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d124      	bne.n	8008a74 <USB_CoreInit+0x64>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68da      	ldr	r2, [r3, #12]
 8008a3a:	f64f 73bf 	movw	r3, #65471	@ 0xffbf
 8008a3e:	f6cf 73bd 	movt	r3, #65469	@ 0xffbd
 8008a42:	4013      	ands	r3, r2
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a54:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d105      	bne.n	8008a68 <USB_CoreInit+0x58>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 faa7 	bl	8008fbc <USB_CoreReset>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	73fb      	strb	r3, [r7, #15]
 8008a72:	e01b      	b.n	8008aac <USB_CoreInit+0x9c>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fa9b 	bl	8008fbc <USB_CoreReset>
 8008a86:	4603      	mov	r3, r0
 8008a88:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a8a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d106      	bne.n	8008aa0 <USB_CoreInit+0x90>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a96:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8008a9e:	e005      	b.n	8008aac <USB_CoreInit+0x9c>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aa4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008aac:	7fbb      	ldrb	r3, [r7, #30]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d118      	bne.n	8008ae4 <USB_CoreInit+0xd4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	f2c0 33ee 	movt	r3, #1006	@ 0x3ee
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f043 0206 	orr.w	r2, r3, #6
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	f043 0220 	orr.w	r2, r3, #32
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008af0:	b004      	add	sp, #16
 8008af2:	4770      	bx	lr

08008af4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f023 0201 	bic.w	r2, r3, #1
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b084      	sub	sp, #16
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	460b      	mov	r3, r1
 8008b20:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008b22:	2300      	movs	r3, #0
 8008b24:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b32:	78fb      	ldrb	r3, [r7, #3]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d115      	bne.n	8008b64 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008b44:	200a      	movs	r0, #10
 8008b46:	f7f8 febf 	bl	80018c8 <HAL_Delay>
      ms += 10U;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	330a      	adds	r3, #10
 8008b4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fa25 	bl	8008fa0 <USB_GetMode>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d01e      	beq.n	8008b9a <USB_SetCurrentMode+0x84>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008b60:	d9f0      	bls.n	8008b44 <USB_SetCurrentMode+0x2e>
 8008b62:	e01a      	b.n	8008b9a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b64:	78fb      	ldrb	r3, [r7, #3]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d115      	bne.n	8008b96 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008b76:	200a      	movs	r0, #10
 8008b78:	f7f8 fea6 	bl	80018c8 <HAL_Delay>
      ms += 10U;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	330a      	adds	r3, #10
 8008b80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fa0c 	bl	8008fa0 <USB_GetMode>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d005      	beq.n	8008b9a <USB_SetCurrentMode+0x84>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2bc7      	cmp	r3, #199	@ 0xc7
 8008b92:	d9f0      	bls.n	8008b76 <USB_SetCurrentMode+0x60>
 8008b94:	e001      	b.n	8008b9a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e005      	b.n	8008ba6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2bc8      	cmp	r3, #200	@ 0xc8
 8008b9e:	d101      	bne.n	8008ba4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e000      	b.n	8008ba6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bae:	b084      	sub	sp, #16
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008bbc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008bc8:	2300      	movs	r3, #0
 8008bca:	613b      	str	r3, [r7, #16]
 8008bcc:	e009      	b.n	8008be2 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	3340      	adds	r3, #64	@ 0x40
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	2200      	movs	r2, #0
 8008bda:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	3301      	adds	r3, #1
 8008be0:	613b      	str	r3, [r7, #16]
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	2b0e      	cmp	r3, #14
 8008be6:	d9f2      	bls.n	8008bce <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008be8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d11c      	bne.n	8008c2a <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008bfe:	f043 0302 	orr.w	r3, r3, #2
 8008c02:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c08:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	e005      	b.n	8008c36 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c2e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	2300      	movs	r3, #0
 8008c40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c42:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d10d      	bne.n	8008c66 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d104      	bne.n	8008c5c <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c52:	2100      	movs	r1, #0
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f969 	bl	8008f2c <USB_SetDevSpeed>
 8008c5a:	e008      	b.n	8008c6e <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f964 	bl	8008f2c <USB_SetDevSpeed>
 8008c64:	e003      	b.n	8008c6e <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008c66:	2103      	movs	r1, #3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f95f 	bl	8008f2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c6e:	2110      	movs	r1, #16
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f8fb 	bl	8008e6c <USB_FlushTxFifo>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f925 	bl	8008ed0 <USB_FlushRxFifo>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c96:	461a      	mov	r2, r3
 8008c98:	2300      	movs	r3, #0
 8008c9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cae:	461a      	mov	r2, r3
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	613b      	str	r3, [r7, #16]
 8008cb8:	e043      	b.n	8008d42 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cd0:	d118      	bne.n	8008d04 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d10a      	bne.n	8008cee <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	015a      	lsls	r2, r3, #5
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	4413      	add	r3, r2
 8008ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008cea:	6013      	str	r3, [r2, #0]
 8008cec:	e013      	b.n	8008d16 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	015a      	lsls	r2, r3, #5
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008d00:	6013      	str	r3, [r2, #0]
 8008d02:	e008      	b.n	8008d16 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	015a      	lsls	r2, r3, #5
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d10:	461a      	mov	r2, r3
 8008d12:	2300      	movs	r3, #0
 8008d14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	015a      	lsls	r2, r3, #5
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d22:	461a      	mov	r2, r3
 8008d24:	2300      	movs	r3, #0
 8008d26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	015a      	lsls	r2, r3, #5
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	4413      	add	r3, r2
 8008d30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d34:	461a      	mov	r2, r3
 8008d36:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008d3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	613b      	str	r3, [r7, #16]
 8008d42:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d46:	461a      	mov	r2, r3
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d3b5      	bcc.n	8008cba <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d4e:	2300      	movs	r3, #0
 8008d50:	613b      	str	r3, [r7, #16]
 8008d52:	e043      	b.n	8008ddc <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	015a      	lsls	r2, r3, #5
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d6a:	d118      	bne.n	8008d9e <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d10a      	bne.n	8008d88 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	015a      	lsls	r2, r3, #5
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	4413      	add	r3, r2
 8008d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d7e:	461a      	mov	r2, r3
 8008d80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008d84:	6013      	str	r3, [r2, #0]
 8008d86:	e013      	b.n	8008db0 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	015a      	lsls	r2, r3, #5
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	4413      	add	r3, r2
 8008d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d94:	461a      	mov	r2, r3
 8008d96:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008d9a:	6013      	str	r3, [r2, #0]
 8008d9c:	e008      	b.n	8008db0 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	015a      	lsls	r2, r3, #5
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	4413      	add	r3, r2
 8008da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008daa:	461a      	mov	r2, r3
 8008dac:	2300      	movs	r3, #0
 8008dae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	015a      	lsls	r2, r3, #5
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	4413      	add	r3, r2
 8008db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	015a      	lsls	r2, r3, #5
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008dd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	613b      	str	r3, [r7, #16]
 8008ddc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008de0:	461a      	mov	r2, r3
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d3b5      	bcc.n	8008d54 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008df6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008dfa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008e08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e0a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d105      	bne.n	8008e1e <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	f043 0210 	orr.w	r2, r3, #16
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	699a      	ldr	r2, [r3, #24]
 8008e22:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8008e26:	f2c8 033c 	movt	r3, #32828	@ 0x803c
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008e30:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d005      	beq.n	8008e44 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	f043 0208 	orr.w	r2, r3, #8
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008e44:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d107      	bne.n	8008e5c <USB_DevInit+0x2ae>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	699a      	ldr	r2, [r3, #24]
 8008e50:	2304      	movs	r3, #4
 8008e52:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8008e56:	4313      	orrs	r3, r2
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3718      	adds	r7, #24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e68:	b004      	add	sp, #16
 8008e6a:	4770      	bx	lr

08008e6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e86:	d901      	bls.n	8008e8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e01b      	b.n	8008ec4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	daf2      	bge.n	8008e7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e94:	2300      	movs	r3, #0
 8008e96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	019b      	lsls	r3, r3, #6
 8008e9c:	f043 0220 	orr.w	r2, r3, #32
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008eb0:	d901      	bls.n	8008eb6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e006      	b.n	8008ec4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	f003 0320 	and.w	r3, r3, #32
 8008ebe:	2b20      	cmp	r3, #32
 8008ec0:	d0f0      	beq.n	8008ea4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ee8:	d901      	bls.n	8008eee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008eea:	2303      	movs	r3, #3
 8008eec:	e018      	b.n	8008f20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	daf2      	bge.n	8008edc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2210      	movs	r2, #16
 8008efe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	3301      	adds	r3, #1
 8008f04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f0c:	d901      	bls.n	8008f12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	e006      	b.n	8008f20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	f003 0310 	and.w	r3, r3, #16
 8008f1a:	2b10      	cmp	r3, #16
 8008f1c:	d0f0      	beq.n	8008f00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	78fb      	ldrb	r3, [r7, #3]
 8008f46:	68f9      	ldr	r1, [r7, #12]
 8008f48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3714      	adds	r7, #20
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b085      	sub	sp, #20
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008f78:	f023 0303 	bic.w	r3, r3, #3
 8008f7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f8c:	f043 0302 	orr.w	r3, r3, #2
 8008f90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	695b      	ldr	r3, [r3, #20]
 8008fac:	f003 0301 	and.w	r3, r3, #1
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008fd4:	d901      	bls.n	8008fda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	e01b      	b.n	8009012 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	daf2      	bge.n	8008fc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	f043 0201 	orr.w	r2, r3, #1
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ffe:	d901      	bls.n	8009004 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	e006      	b.n	8009012 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	f003 0301 	and.w	r3, r3, #1
 800900c:	2b01      	cmp	r3, #1
 800900e:	d0f0      	beq.n	8008ff2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <memset>:
 800901e:	4402      	add	r2, r0
 8009020:	4603      	mov	r3, r0
 8009022:	4293      	cmp	r3, r2
 8009024:	d100      	bne.n	8009028 <memset+0xa>
 8009026:	4770      	bx	lr
 8009028:	f803 1b01 	strb.w	r1, [r3], #1
 800902c:	e7f9      	b.n	8009022 <memset+0x4>
	...

08009030 <__libc_init_array>:
 8009030:	b570      	push	{r4, r5, r6, lr}
 8009032:	4d0d      	ldr	r5, [pc, #52]	@ (8009068 <__libc_init_array+0x38>)
 8009034:	4c0d      	ldr	r4, [pc, #52]	@ (800906c <__libc_init_array+0x3c>)
 8009036:	1b64      	subs	r4, r4, r5
 8009038:	10a4      	asrs	r4, r4, #2
 800903a:	2600      	movs	r6, #0
 800903c:	42a6      	cmp	r6, r4
 800903e:	d109      	bne.n	8009054 <__libc_init_array+0x24>
 8009040:	4d0b      	ldr	r5, [pc, #44]	@ (8009070 <__libc_init_array+0x40>)
 8009042:	4c0c      	ldr	r4, [pc, #48]	@ (8009074 <__libc_init_array+0x44>)
 8009044:	f000 f818 	bl	8009078 <_init>
 8009048:	1b64      	subs	r4, r4, r5
 800904a:	10a4      	asrs	r4, r4, #2
 800904c:	2600      	movs	r6, #0
 800904e:	42a6      	cmp	r6, r4
 8009050:	d105      	bne.n	800905e <__libc_init_array+0x2e>
 8009052:	bd70      	pop	{r4, r5, r6, pc}
 8009054:	f855 3b04 	ldr.w	r3, [r5], #4
 8009058:	4798      	blx	r3
 800905a:	3601      	adds	r6, #1
 800905c:	e7ee      	b.n	800903c <__libc_init_array+0xc>
 800905e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009062:	4798      	blx	r3
 8009064:	3601      	adds	r6, #1
 8009066:	e7f2      	b.n	800904e <__libc_init_array+0x1e>
 8009068:	080090d0 	.word	0x080090d0
 800906c:	080090d0 	.word	0x080090d0
 8009070:	080090d0 	.word	0x080090d0
 8009074:	080090d4 	.word	0x080090d4

08009078 <_init>:
 8009078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907a:	bf00      	nop
 800907c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800907e:	bc08      	pop	{r3}
 8009080:	469e      	mov	lr, r3
 8009082:	4770      	bx	lr

08009084 <_fini>:
 8009084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009086:	bf00      	nop
 8009088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800908a:	bc08      	pop	{r3}
 800908c:	469e      	mov	lr, r3
 800908e:	4770      	bx	lr
