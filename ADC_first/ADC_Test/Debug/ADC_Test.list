
ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095b0  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08009848  08009848  0000a848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009880  08009880  0000a880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009888  08009888  0000a888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800988c  0800988c  0000a88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08009890  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e24  24000010  080098a0  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000e34  080098a0  0000be34  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d1d0  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000037ff  00000000  00000000  0002820e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001608  00000000  00000000  0002ba10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001116  00000000  00000000  0002d018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a764  00000000  00000000  0002e12e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001edfb  00000000  00000000  00068892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001780ea  00000000  00000000  0008768d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ff777  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005da8  00000000  00000000  001ff7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007b  00000000  00000000  00205564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009830 	.word	0x08009830

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08009830 	.word	0x08009830

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ADC_custom_init>:
uint16_t temp_buffer[1000] = {0};
uint32_t temp_converted[1000] = {0};
int temp_buff_index=0;


void ADC_custom_init(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0


//	ADC3->CR &= ~ADC_CR_ADSTART;
	ADC3->SQR1=0; // per azzerare la configurazione dell'ide
 80005cc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80005d0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80005d4:	2200      	movs	r2, #0
 80005d6:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere
 80005d8:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 80005dc:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80005e0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80005e4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80005e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80005ea:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_SQ1_Pos);
 80005ec:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 80005f0:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80005f4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80005f8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80005fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80005fe:	631a      	str	r2, [r3, #48]	@ 0x30
//	ADC3->SQR1 |= (18 << ADC_SQR1_SQ2_Pos);

	ADC3->PCSEL |= ADC_PCSEL_PCSEL_0; // Dichiaro quali canali leggere : 18 e 19
 8000600:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000604:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000608:	69da      	ldr	r2, [r3, #28]
 800060a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800060e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000612:	f042 0201 	orr.w	r2, r2, #1
 8000616:	61da      	str	r2, [r3, #28]
//	ADC3->PCSEL |= ADC_PCSEL_PCSEL_19;

	// Tipicamente gestiti dall'IDE
	ADC3->CR &= ~ADC_CR_DEEPPWD;
 8000618:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800061c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000620:	689a      	ldr	r2, [r3, #8]
 8000622:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000626:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800062a:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800062e:	609a      	str	r2, [r3, #8]
	ADC3->CR |= ADC_CR_ADVREGEN;
 8000630:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000634:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000638:	689a      	ldr	r2, [r3, #8]
 800063a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800063e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000642:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000646:	609a      	str	r2, [r3, #8]
//	while((ADC3->ISR & ADC_ISR_LDORDY) != 1){}

	/* Calibrazione */
	ADC3->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 8000648:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800064c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000650:	689a      	ldr	r2, [r3, #8]
 8000652:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000656:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800065a:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800065e:	609a      	str	r2, [r3, #8]
	ADC3->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 8000660:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000664:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000668:	689a      	ldr	r2, [r3, #8]
 800066a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800066e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000672:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000676:	609a      	str	r2, [r3, #8]
	ADC3->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 8000678:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800067c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000680:	689a      	ldr	r2, [r3, #8]
 8000682:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000686:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800068a:	f022 0201 	bic.w	r2, r2, #1
 800068e:	609a      	str	r2, [r3, #8]
	ADC3->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 8000690:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000694:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000698:	689a      	ldr	r2, [r3, #8]
 800069a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800069e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80006a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80006a6:	609a      	str	r2, [r3, #8]


	while((ADC3->CR & ADC_CR_ADCAL) != 0){};
 80006a8:	bf00      	nop
 80006aa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006ae:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	dbf8      	blt.n	80006aa <ADC_custom_init+0xe2>
	// FIne calibrazione
}
 80006b8:	bf00      	nop
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <ADC_start>:

void ADC_start(){
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
	/* Accensione ADC */

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 80006c8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006cc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006d6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80006da:	f042 0201 	orr.w	r2, r2, #1
 80006de:	601a      	str	r2, [r3, #0]
	ADC3->CR |= ADC_CR_ADEN;		// Accendo l' ADC
 80006e0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006e4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80006e8:	689a      	ldr	r2, [r3, #8]
 80006ea:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006ee:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80006f2:	f042 0201 	orr.w	r2, r2, #1
 80006f6:	609a      	str	r2, [r3, #8]

	while((ADC3->ISR & ADC_ISR_ADRDY) != 0){}
 80006f8:	bf00      	nop
 80006fa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006fe:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f003 0301 	and.w	r3, r3, #1
 8000708:	2b00      	cmp	r3, #0
 800070a:	d1f6      	bne.n	80006fa <ADC_start+0x36>

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 800070c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000710:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800071a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800071e:	f042 0201 	orr.w	r2, r2, #1
 8000722:	601a      	str	r2, [r3, #0]
	// Fine accensione

	/* ADR ACCESO */
	ADC3_COMMON->CCR |= 0x1 << ADC_CCR_PRESC_Pos; // Imposto un prescaler per il clock in modo da aver misure più precise di temperatura
 8000724:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 8000728:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800072c:	689a      	ldr	r2, [r3, #8]
 800072e:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 8000732:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000736:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800073a:	609a      	str	r2, [r3, #8]
//	ADC3->SMPR2 |= (7 << ADC_SMPR2_SMP18_Pos);	// Indico Il tempo prima della misura
//	ADC3->SMPR2 |= (7 << ADC_SMPR2_SMP19_Pos);

//	ADC3_COMMON->CCR |= ADC_CCR_TSEN;			// Abilito il termometro
//	ADC3_COMMON->CCR |= ADC_CCR_VREFEN;			// Abilito la tensione di riferimento
	TIM6->PSC = 48;
 800073c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000740:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000744:	2230      	movs	r2, #48	@ 0x30
 8000746:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 1;
 8000748:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074c:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000750:	2201      	movs	r2, #1
 8000752:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->CNT = 0;
 8000754:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000758:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->DIER |= TIM_DIER_UIE;
 8000760:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000764:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000768:	68da      	ldr	r2, [r3, #12]
 800076a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076e:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000772:	f042 0201 	orr.w	r2, r2, #1
 8000776:	60da      	str	r2, [r3, #12]
	TIM6->CR1 |= TIM_CR1_CEN;
 8000778:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800077c:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000786:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800078a:	f042 0201 	orr.w	r2, r2, #1
 800078e:	601a      	str	r2, [r3, #0]

	ADC3->IER |= ADC_IER_EOCIE;					// Abilito l'interrupt di fine conversione
 8000790:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000794:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000798:	685a      	ldr	r2, [r3, #4]
 800079a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800079e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80007a2:	f042 0204 	orr.w	r2, r2, #4
 80007a6:	605a      	str	r2, [r3, #4]
	ADC3->CR  |= ADC_CR_ADSTART;				// Inizio le misurazioni
 80007a8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80007ac:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80007b0:	689a      	ldr	r2, [r3, #8]
 80007b2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80007b6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80007ba:	f042 0204 	orr.w	r2, r2, #4
 80007be:	609a      	str	r2, [r3, #8]
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <ADC_custom_interrupt>:



void ADC_custom_interrupt(){
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
	extern uint16_t temp_buffer[];

//	uint16_t data_raw = ADC3->DR;

	//uint32_t temp = ( ( 80000UL * (uint32_t)(data_raw - TS_CAL_30C) ) / (uint32_t)(TS_CAL_110C - TS_CAL_30C) ) + 30000UL;
	if(ADC3->ISR & ADC_ISR_EOC){
 80007ce:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80007d2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f003 0304 	and.w	r3, r3, #4
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d02f      	beq.n	8000840 <ADC_custom_interrupt+0x76>
		if(temp_buff_index < 1000){
 80007e0:	f240 73fc 	movw	r3, #2044	@ 0x7fc
 80007e4:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007ee:	da27      	bge.n	8000840 <ADC_custom_interrupt+0x76>

				temp_buffer[temp_buff_index] = ADC3->DR;
 80007f0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80007f4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80007f8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80007fa:	f240 73fc 	movw	r3, #2044	@ 0x7fc
 80007fe:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	b289      	uxth	r1, r1
 8000806:	f240 032c 	movw	r3, #44	@ 0x2c
 800080a:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800080e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				temp_buff_index++;
 8000812:	f240 73fc 	movw	r3, #2044	@ 0x7fc
 8000816:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	f240 73fc 	movw	r3, #2044	@ 0x7fc
 8000822:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000826:	601a      	str	r2, [r3, #0]
				ADC3->ISR |= ADC_ISR_EOC;
 8000828:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800082c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000836:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800083a:	f042 0204 	orr.w	r2, r2, #4
 800083e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <init_usart3>:
#include "Custom_usart.h"

unsigned char* converted_buffer_pointer;
int data_index=0;

void init_usart3(){
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

    USART3->CR1 |= USART_CR1_TE;
 800084e:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000852:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800085c:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000860:	f042 0208 	orr.w	r2, r2, #8
 8000864:	601a      	str	r2, [r3, #0]
    USART3->CR1 |= USART_CR1_RE;
 8000866:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800086a:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000874:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000878:	f042 0204 	orr.w	r2, r2, #4
 800087c:	601a      	str	r2, [r3, #0]

    //USART3->CR1 ^= USART_CR1_TXEIE;
    USART3->CR1 |= USART_CR1_RXNEIE;
 800087e:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000882:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800088c:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000890:	f042 0220 	orr.w	r2, r2, #32
 8000894:	601a      	str	r2, [r3, #0]

    USART3->CR1 |= USART_CR1_UE;
 8000896:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800089a:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80008a4:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80008a8:	f042 0201 	orr.w	r2, r2, #1
 80008ac:	601a      	str	r2, [r3, #0]

}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <usart3_interrupt>:

void usart3_interrupt(){
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0

	extern uint16_t temp_buffer[];
	extern data_index;

	if(USART3->ISR & USART_ISR_RXNE_RXFNE){
 80008be:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80008c2:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80008c6:	69db      	ldr	r3, [r3, #28]
 80008c8:	f003 0320 	and.w	r3, r3, #32
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d038      	beq.n	8000942 <usart3_interrupt+0x8a>
		if(USART3->ISR & USART_ISR_TXE_TXFNF){
 80008d0:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80008d4:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d02f      	beq.n	8000942 <usart3_interrupt+0x8a>

			char received_data = USART3->RDR;
 80008e2:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80008e6:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80008ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008ec:	71fb      	strb	r3, [r7, #7]

			USART3->CR1 ^= USART_CR1_TXEIE;
 80008ee:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80008f2:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80008fc:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000900:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 8000904:	601a      	str	r2, [r3, #0]

			if(received_data=='e'){
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b65      	cmp	r3, #101	@ 0x65
 800090a:	d11a      	bne.n	8000942 <usart3_interrupt+0x8a>
                data_index=0;
 800090c:	f640 0304 	movw	r3, #2052	@ 0x804
 8000910:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]

                converted_buffer_pointer = (unsigned char*)temp_buffer;
 8000918:	f640 0300 	movw	r3, #2048	@ 0x800
 800091c:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000920:	f240 022c 	movw	r2, #44	@ 0x2c
 8000924:	f2c2 4200 	movt	r2, #9216	@ 0x2400
 8000928:	601a      	str	r2, [r3, #0]
				// FUNC() GENERA VETTORE DI DATI SE NECESSARIO
                //genera_vett_esp(data_buffer, (int)SIZE_OF_BUFF(data_buffer), 0, 0);
                USART3->CR1 |= USART_CR1_TXEIE;
 800092a:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800092e:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000938:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800093c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000940:	601a      	str	r2, [r3, #0]
			}
		}
	}

	if((USART3->ISR & USART_ISR_TXE_TXFNF) && (USART3->CR1 & USART_CR1_TXEIE) && !(USART3->ISR & USART_ISR_RXNE_RXFNE)){
 8000942:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000946:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800094a:	69db      	ldr	r3, [r3, #28]
 800094c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000950:	2b00      	cmp	r3, #0
 8000952:	d042      	beq.n	80009da <usart3_interrupt+0x122>
 8000954:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000958:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000962:	2b00      	cmp	r3, #0
 8000964:	d039      	beq.n	80009da <usart3_interrupt+0x122>
 8000966:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800096a:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800096e:	69db      	ldr	r3, [r3, #28]
 8000970:	f003 0320 	and.w	r3, r3, #32
 8000974:	2b00      	cmp	r3, #0
 8000976:	d130      	bne.n	80009da <usart3_interrupt+0x122>

        if( data_index < 1000 * sizeof(temp_buffer[0])){
 8000978:	f640 0304 	movw	r3, #2052	@ 0x804
 800097c:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000986:	d21c      	bcs.n	80009c2 <usart3_interrupt+0x10a>

            USART3->TDR = converted_buffer_pointer[data_index];
 8000988:	f640 0300 	movw	r3, #2048	@ 0x800
 800098c:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	f640 0304 	movw	r3, #2052	@ 0x804
 8000996:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4413      	add	r3, r2
 800099e:	781a      	ldrb	r2, [r3, #0]
 80009a0:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80009a4:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80009a8:	629a      	str	r2, [r3, #40]	@ 0x28
            ++data_index;
 80009aa:	f640 0304 	movw	r3, #2052	@ 0x804
 80009ae:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	1c5a      	adds	r2, r3, #1
 80009b6:	f640 0304 	movw	r3, #2052	@ 0x804
 80009ba:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	e00b      	b.n	80009da <usart3_interrupt+0x122>
        }else{
            USART3->CR1 ^= USART_CR1_TXEIE_TXFNFIE;
 80009c2:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80009c6:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80009d0:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80009d4:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 80009d8:	601a      	str	r2, [r3, #0]
        }
	}

	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 80009da:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80009de:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80009e2:	6a1a      	ldr	r2, [r3, #32]
 80009e4:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80009e8:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80009ec:	f042 0208 	orr.w	r2, r2, #8
 80009f0:	621a      	str	r2, [r3, #32]
	USART3->ICR |= USART_ICR_TCCF;  //Azzeramento flag interrupt trasmissione
 80009f2:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80009f6:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80009fa:	6a1a      	ldr	r2, [r3, #32]
 80009fc:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000a00:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000a04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000a08:	621a      	str	r2, [r3, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 8000a0a:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000a0e:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000a12:	699a      	ldr	r2, [r3, #24]
 8000a14:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000a18:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000a1c:	f042 0208 	orr.w	r2, r2, #8
 8000a20:	619a      	str	r2, [r3, #24]

}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b088      	sub	sp, #32
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]
 8000a42:	615a      	str	r2, [r3, #20]
 8000a44:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a46:	f640 0208 	movw	r2, #2056	@ 0x808
 8000a4a:	f2c2 4200 	movt	r2, #9216	@ 0x2400
 8000a4e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000a52:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000a56:	6013      	str	r3, [r2, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a58:	f640 0308 	movw	r3, #2056	@ 0x808
 8000a5c:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a64:	f640 0308 	movw	r3, #2056	@ 0x808
 8000a68:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a70:	f640 0308 	movw	r3, #2056	@ 0x808
 8000a74:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000a78:	2204      	movs	r2, #4
 8000a7a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a7c:	f640 0308 	movw	r3, #2056	@ 0x808
 8000a80:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000a84:	2200      	movs	r2, #0
 8000a86:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a88:	f640 0308 	movw	r3, #2056	@ 0x808
 8000a8c:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000a90:	2200      	movs	r2, #0
 8000a92:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000a94:	f640 0308 	movw	r3, #2056	@ 0x808
 8000a98:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000aa0:	f640 0308 	movw	r3, #2056	@ 0x808
 8000aa4:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000aac:	f640 0308 	movw	r3, #2056	@ 0x808
 8000ab0:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000ab4:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000ab8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000aba:	f640 0308 	movw	r3, #2056	@ 0x808
 8000abe:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000ac2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ac6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ac8:	f640 0308 	movw	r3, #2056	@ 0x808
 8000acc:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ad4:	f640 0308 	movw	r3, #2056	@ 0x808
 8000ad8:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000adc:	2200      	movs	r2, #0
 8000ade:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ae0:	f640 0308 	movw	r3, #2056	@ 0x808
 8000ae4:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000ae8:	2200      	movs	r2, #0
 8000aea:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000aec:	f640 0308 	movw	r3, #2056	@ 0x808
 8000af0:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000af4:	2200      	movs	r2, #0
 8000af6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000afa:	f640 0308 	movw	r3, #2056	@ 0x808
 8000afe:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000b02:	2201      	movs	r2, #1
 8000b04:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b06:	f640 0008 	movw	r0, #2056	@ 0x808
 8000b0a:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 8000b0e:	f001 f964 	bl	8001dda <HAL_ADC_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_ADC3_Init+0xee>
  {
    Error_Handler();
 8000b18:	f000 fb14 	bl	8001144 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000b1c:	f640 0308 	movw	r3, #2056	@ 0x808
 8000b20:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b28:	f640 0008 	movw	r0, #2056	@ 0x808
 8000b2c:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 8000b30:	f001 f953 	bl	8001dda <HAL_ADC_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_ADC3_Init+0x110>
  {
    Error_Handler();
 8000b3a:	f000 fb03 	bl	8001144 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b42:	2306      	movs	r3, #6
 8000b44:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b4a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b4e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b50:	2304      	movs	r3, #4
 8000b52:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f640 0008 	movw	r0, #2056	@ 0x808
 8000b64:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 8000b68:	f001 faed 	bl	8002146 <HAL_ADC_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_ADC3_Init+0x148>
  {
    Error_Handler();
 8000b72:	f000 fae7 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	3720      	adds	r7, #32
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b0b4      	sub	sp, #208	@ 0xd0
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	22c0      	movs	r2, #192	@ 0xc0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f008 fe21 	bl	80097d6 <memset>
  if(adcHandle->Instance==ADC3)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000b9c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d163      	bne.n	8000c6c <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ba4:	f04f 0200 	mov.w	r2, #0
 8000ba8:	f2c0 0208 	movt	r2, #8
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000bb8:	2312      	movs	r3, #18
 8000bba:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bc8:	23c0      	movs	r3, #192	@ 0xc0
 8000bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000bcc:	2320      	movs	r3, #32
 8000bce:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000bd0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000bd4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	4618      	mov	r0, r3
 8000be2:	f003 fe37 	bl	8004854 <HAL_RCCEx_PeriphCLKConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000bec:	f000 faaa 	bl	8001144 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000bf0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000bf4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000bf8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000bfc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000c00:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000c04:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000c08:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000c0c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000c10:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c20:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000c24:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000c28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c2c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000c30:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000c34:	f042 0204 	orr.w	r2, r2, #4
 8000c38:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000c3c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000c40:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c48:	f003 0304 	and.w	r3, r3, #4
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000c50:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8000c54:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000c58:	f000 ff17 	bl	8001a8a <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2100      	movs	r1, #0
 8000c60:	207f      	movs	r0, #127	@ 0x7f
 8000c62:	f002 f805 	bl	8002c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000c66:	207f      	movs	r0, #127	@ 0x7f
 8000c68:	f002 f81c 	bl	8002ca4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	37d0      	adds	r7, #208	@ 0xd0
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08c      	sub	sp, #48	@ 0x30
 8000c78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000c8e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000c92:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c96:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000c9a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000c9e:	f042 0204 	orr.w	r2, r2, #4
 8000ca2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000ca6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000caa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	61bb      	str	r3, [r7, #24]
 8000cb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cba:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000cbe:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000cc2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000cc6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000cca:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000cce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000cd2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000cd6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000cda:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000cee:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000cf2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000cf6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000cfa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000cfe:	f042 0201 	orr.w	r2, r2, #1
 8000d02:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000d06:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d0a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d1e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d22:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000d26:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d2a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d2e:	f042 0202 	orr.w	r2, r2, #2
 8000d32:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000d36:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d3a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d4e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d52:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000d56:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d5a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d5e:	f042 0208 	orr.w	r2, r2, #8
 8000d62:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000d66:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d6a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d7a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d7e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d82:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000d86:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d8a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000d92:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000d96:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d9a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000daa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000dae:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000db2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000db6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000dba:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000dbe:	f042 0210 	orr.w	r2, r2, #16
 8000dc2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000dc6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000dca:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd2:	f003 0310 	and.w	r3, r3, #16
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000de0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000de4:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000de8:	f002 f937 	bl	800305a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000df2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8000df6:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000dfa:	f002 f92e 	bl	800305a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2102      	movs	r1, #2
 8000e02:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000e06:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000e0a:	f002 f926 	bl	800305a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e14:	2300      	movs	r3, #0
 8000e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000e26:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000e2a:	f001 ff55 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e2e:	2332      	movs	r3, #50	@ 0x32
 8000e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e3e:	230b      	movs	r3, #11
 8000e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	4619      	mov	r1, r3
 8000e48:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000e4c:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000e50:	f001 ff42 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e54:	2386      	movs	r3, #134	@ 0x86
 8000e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e64:	230b      	movs	r3, #11
 8000e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000e74:	f001 ff30 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e78:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000e94:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000e98:	f001 ff1e 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eae:	230b      	movs	r3, #11
 8000eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000ebc:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000ec0:	f001 ff0a 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ec4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8000ee0:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000ee4:	f001 fef8 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000ee8:	2380      	movs	r3, #128	@ 0x80
 8000eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4619      	mov	r1, r3
 8000efc:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8000f00:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000f04:	f001 fee8 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f08:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f1a:	230b      	movs	r3, #11
 8000f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8000f28:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000f2c:	f001 fed4 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000f4a:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000f4e:	f001 fec3 	bl	8002cd8 <HAL_GPIO_Init>

}
 8000f52:	bf00      	nop
 8000f54:	3730      	adds	r7, #48	@ 0x30
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5e:	f000 fcbe 	bl	80018de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f62:	f000 f812 	bl	8000f8a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f66:	f7ff fe85 	bl	8000c74 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000f6a:	f7ff fd60 	bl	8000a2e <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8000f6e:	f000 faae 	bl	80014ce <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f72:	f000 fba7 	bl	80016c4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 8000f76:	f000 fa30 	bl	80013da <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */


  init_usart3();		// inizializzo l'usart
 8000f7a:	f7ff fc66 	bl	800084a <init_usart3>

  ADC_custom_init();	// Inizializzo la periferica
 8000f7e:	f7ff fb23 	bl	80005c8 <ADC_custom_init>

  ADC_start();			// Inizializzo il termometro e faccio partire l'ADC
 8000f82:	f7ff fb9f 	bl	80006c4 <ADC_start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f86:	bf00      	nop
 8000f88:	e7fd      	b.n	8000f86 <main+0x2c>

08000f8a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b09e      	sub	sp, #120	@ 0x78
 8000f8e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f94:	224c      	movs	r2, #76	@ 0x4c
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f008 fc1c 	bl	80097d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	2220      	movs	r2, #32
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f008 fc15 	bl	80097d6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fac:	2002      	movs	r0, #2
 8000fae:	f002 f99d 	bl	80032ec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fba:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8000fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fc4:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8000fc8:	f022 0201 	bic.w	r2, r2, #1
 8000fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fd2:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8000fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000fe2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000fe6:	699a      	ldr	r2, [r3, #24]
 8000fe8:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000fec:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000ff0:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000ff4:	619a      	str	r2, [r3, #24]
 8000ff6:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000ffa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001008:	bf00      	nop
 800100a:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800100e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001018:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800101c:	d1f5      	bne.n	800100a <SystemClock_Config+0x80>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001022:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001026:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800102a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800102e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001032:	f042 0202 	orr.w	r2, r2, #2
 8001036:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 800103a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800103e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001042:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800104e:	2300      	movs	r3, #0
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8001056:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800105a:	699a      	ldr	r2, [r3, #24]
 800105c:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8001060:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001064:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8001068:	619a      	str	r2, [r3, #24]
 800106a:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800106e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800107e:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8001082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001084:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001088:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 800108c:	f042 0201 	orr.w	r2, r2, #1
 8001090:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001092:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001096:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 800109a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010a4:	bf00      	nop
 80010a6:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80010aa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010b8:	d1f5      	bne.n	80010a6 <SystemClock_Config+0x11c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80010ba:	2321      	movs	r3, #33	@ 0x21
 80010bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010be:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80010c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010c4:	2301      	movs	r3, #1
 80010c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c8:	2302      	movs	r3, #2
 80010ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010cc:	2302      	movs	r3, #2
 80010ce:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010d0:	2301      	movs	r3, #1
 80010d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 80010d4:	2378      	movs	r3, #120	@ 0x78
 80010d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010d8:	2302      	movs	r3, #2
 80010da:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80010dc:	2303      	movs	r3, #3
 80010de:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010e4:	230c      	movs	r3, #12
 80010e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f4:	4618      	mov	r0, r3
 80010f6:	f002 f952 	bl	800339e <HAL_RCC_OscConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0x17a>
  {
    Error_Handler();
 8001100:	f000 f820 	bl	8001144 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001104:	233f      	movs	r3, #63	@ 0x3f
 8001106:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001108:	2303      	movs	r3, #3
 800110a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001110:	2308      	movs	r3, #8
 8001112:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001114:	2340      	movs	r3, #64	@ 0x40
 8001116:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001118:	2340      	movs	r3, #64	@ 0x40
 800111a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800111c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001122:	2340      	movs	r3, #64	@ 0x40
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	2104      	movs	r1, #4
 800112c:	4618      	mov	r0, r3
 800112e:	f002 ff1c 	bl	8003f6a <HAL_RCC_ClockConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x1b2>
  {
    Error_Handler();
 8001138:	f000 f804 	bl	8001144 <Error_Handler>
  }
}
 800113c:	bf00      	nop
 800113e:	3778      	adds	r7, #120	@ 0x78
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001148:	b672      	cpsid	i
}
 800114a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <Error_Handler+0x8>

08001150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800115a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800115e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8001162:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001166:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800116a:	f042 0202 	orr.w	r2, r2, #2
 800116e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8001172:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001176:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800117a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001196:	bf00      	nop
 8001198:	e7fd      	b.n	8001196 <NMI_Handler+0x4>

0800119a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119e:	bf00      	nop
 80011a0:	e7fd      	b.n	800119e <HardFault_Handler+0x4>

080011a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a6:	bf00      	nop
 80011a8:	e7fd      	b.n	80011a6 <MemManage_Handler+0x4>

080011aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	bf00      	nop
 80011b0:	e7fd      	b.n	80011ae <BusFault_Handler+0x4>

080011b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b6:	bf00      	nop
 80011b8:	e7fd      	b.n	80011b6 <UsageFault_Handler+0x4>

080011ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e8:	f000 fbfa 	bl	80019e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	usart3_interrupt();
 80011f4:	f7ff fb60 	bl	80008b8 <usart3_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}

080011fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001200:	f640 006c 	movw	r0, #2156	@ 0x86c
 8001204:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 8001208:	f006 fbf7 	bl	80079fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}

08001210 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	ADC_custom_interrupt();
 8001214:	f7ff fad9 	bl	80007ca <ADC_custom_interrupt>
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
  /* USER CODE BEGIN ADC3_IRQn 1 */
	}
  /* USER CODE END ADC3_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}

0800121c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001220:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8001224:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8001228:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800122c:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8001230:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8001234:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8001238:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800123c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001240:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	2b06      	cmp	r3, #6
 800124c:	d80d      	bhi.n	800126a <SystemInit+0x4e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800124e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001252:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f023 020f 	bic.w	r2, r3, #15
 800125c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001260:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 8001264:	f042 0207 	orr.w	r2, r2, #7
 8001268:	601a      	str	r2, [r3, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800126a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800126e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001278:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800127c:	f042 0201 	orr.w	r2, r2, #1
 8001280:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001282:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001286:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800128e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001292:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001296:	6819      	ldr	r1, [r3, #0]
 8001298:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 800129c:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80012a0:	f64e 537f 	movw	r3, #60799	@ 0xed7f
 80012a4:	f6ce 23f6 	movt	r3, #60150	@ 0xeaf6
 80012a8:	400b      	ands	r3, r1
 80012aa:	6013      	str	r3, [r2, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012b0:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00d      	beq.n	80012da <SystemInit+0xbe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012c2:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f023 020f 	bic.w	r2, r3, #15
 80012cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012d0:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 80012d4:	f042 0207 	orr.w	r2, r2, #7
 80012d8:	601a      	str	r2, [r3, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012da:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80012de:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012e6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80012ea:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012f2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80012f6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012fe:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001302:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001306:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800130a:	f2c0 2202 	movt	r2, #514	@ 0x202
 800130e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001310:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001314:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001318:	2200      	movs	r2, #0
 800131a:	f2c0 12ff 	movt	r2, #511	@ 0x1ff
 800131e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001320:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001324:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001328:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800132c:	f2c0 1201 	movt	r2, #257	@ 0x101
 8001330:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001332:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001336:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800133a:	2200      	movs	r2, #0
 800133c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800133e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001342:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001346:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800134a:	f2c0 1201 	movt	r2, #257	@ 0x101
 800134e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001350:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001354:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001358:	2200      	movs	r2, #0
 800135a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800135c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001360:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001364:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8001368:	f2c0 1201 	movt	r2, #257	@ 0x101
 800136c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800136e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001372:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001376:	2200      	movs	r2, #0
 8001378:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800137a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800137e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001388:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800138c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001390:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001392:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001396:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800139a:	2200      	movs	r2, #0
 800139c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800139e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a2:	f6c5 4300 	movt	r3, #23552	@ 0x5c00
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	2300      	movs	r3, #0
 80013aa:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 80013ae:	4013      	ands	r3, r2
 80013b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013b4:	d205      	bcs.n	80013c2 <SystemInit+0x1a6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013b6:	f248 1308 	movw	r3, #33032	@ 0x8108
 80013ba:	f2c5 1300 	movt	r3, #20736	@ 0x5100
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013c6:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 80013ca:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80013ce:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b084      	sub	sp, #16
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80013ea:	f640 026c 	movw	r2, #2156	@ 0x86c
 80013ee:	f2c2 4200 	movt	r2, #9216	@ 0x2400
 80013f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013f6:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80013fa:	6013      	str	r3, [r2, #0]
  htim6.Init.Prescaler = 0;
 80013fc:	f640 036c 	movw	r3, #2156	@ 0x86c
 8001400:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001404:	2200      	movs	r2, #0
 8001406:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001408:	f640 036c 	movw	r3, #2156	@ 0x86c
 800140c:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001414:	f640 036c 	movw	r3, #2156	@ 0x86c
 8001418:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800141c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001420:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001422:	f640 036c 	movw	r3, #2156	@ 0x86c
 8001426:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800142e:	f640 006c 	movw	r0, #2156	@ 0x86c
 8001432:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 8001436:	f006 fa89 	bl	800794c <HAL_TIM_Base_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM6_Init+0x6a>
  {
    Error_Handler();
 8001440:	f7ff fe80 	bl	8001144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001444:	2320      	movs	r3, #32
 8001446:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	4619      	mov	r1, r3
 8001450:	f640 006c 	movw	r0, #2156	@ 0x86c
 8001454:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 8001458:	f006 fcd0 	bl	8007dfc <HAL_TIMEx_MasterConfigSynchronization>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM6_Init+0x8c>
  {
    Error_Handler();
 8001462:	f7ff fe6f 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b084      	sub	sp, #16
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800147e:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8001482:	429a      	cmp	r2, r3
 8001484:	d11f      	bne.n	80014c6 <HAL_TIM_Base_MspInit+0x58>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001486:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800148a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800148e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001492:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001496:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800149a:	f042 0210 	orr.w	r2, r2, #16
 800149e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80014a2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80014a6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80014aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	2036      	movs	r0, #54	@ 0x36
 80014bc:	f001 fbd8 	bl	8002c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014c0:	2036      	movs	r0, #54	@ 0x36
 80014c2:	f001 fbef 	bl	8002ca4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014d2:	f640 02b8 	movw	r2, #2232	@ 0x8b8
 80014d6:	f2c2 4200 	movt	r2, #9216	@ 0x2400
 80014da:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80014de:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80014e2:	6013      	str	r3, [r2, #0]
  huart3.Init.BaudRate = 9600;
 80014e4:	f640 03b8 	movw	r3, #2232	@ 0x8b8
 80014e8:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80014ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014f2:	f640 03b8 	movw	r3, #2232	@ 0x8b8
 80014f6:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014fe:	f640 03b8 	movw	r3, #2232	@ 0x8b8
 8001502:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800150a:	f640 03b8 	movw	r3, #2232	@ 0x8b8
 800150e:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001516:	f640 03b8 	movw	r3, #2232	@ 0x8b8
 800151a:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800151e:	220c      	movs	r2, #12
 8001520:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001522:	f640 03b8 	movw	r3, #2232	@ 0x8b8
 8001526:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800152a:	2200      	movs	r2, #0
 800152c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800152e:	f640 03b8 	movw	r3, #2232	@ 0x8b8
 8001532:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800153a:	f640 03b8 	movw	r3, #2232	@ 0x8b8
 800153e:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001546:	f640 03b8 	movw	r3, #2232	@ 0x8b8
 800154a:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800154e:	2200      	movs	r2, #0
 8001550:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001552:	f640 03b8 	movw	r3, #2232	@ 0x8b8
 8001556:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800155a:	2200      	movs	r2, #0
 800155c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800155e:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8001562:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 8001566:	f006 fd00 	bl	8007f6a <HAL_UART_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_USART3_UART_Init+0xa6>
  {
    Error_Handler();
 8001570:	f7ff fde8 	bl	8001144 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001574:	2100      	movs	r1, #0
 8001576:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 800157a:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 800157e:	f007 fd52 	bl	8009026 <HAL_UARTEx_SetTxFifoThreshold>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_USART3_UART_Init+0xbe>
  {
    Error_Handler();
 8001588:	f7ff fddc 	bl	8001144 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800158c:	2100      	movs	r1, #0
 800158e:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8001592:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 8001596:	f007 fd84 	bl	80090a2 <HAL_UARTEx_SetRxFifoThreshold>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_USART3_UART_Init+0xd6>
  {
    Error_Handler();
 80015a0:	f7ff fdd0 	bl	8001144 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015a4:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80015a8:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 80015ac:	f007 fd02 	bl	8008fb4 <HAL_UARTEx_DisableFifoMode>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_USART3_UART_Init+0xec>
  {
    Error_Handler();
 80015b6:	f7ff fdc5 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b0ba      	sub	sp, #232	@ 0xe8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015d6:	f107 0310 	add.w	r3, r7, #16
 80015da:	22c0      	movs	r2, #192	@ 0xc0
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f008 f8f9 	bl	80097d6 <memset>
  if(uartHandle->Instance==USART3)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80015ec:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d163      	bne.n	80016bc <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015f4:	f04f 0202 	mov.w	r2, #2
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001606:	f107 0310 	add.w	r3, r7, #16
 800160a:	4618      	mov	r0, r3
 800160c:	f003 f922 	bl	8004854 <HAL_RCCEx_PeriphCLKConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_UART_MspInit+0x5c>
    {
      Error_Handler();
 8001616:	f7ff fd95 	bl	8001144 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800161a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800161e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001622:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001626:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800162a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800162e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001632:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001636:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800163a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800163e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001642:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800164a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800164e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001652:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001656:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800165a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800165e:	f042 0208 	orr.w	r2, r2, #8
 8001662:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001666:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800166a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800167a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800167e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001694:	2307      	movs	r3, #7
 8001696:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800169e:	4619      	mov	r1, r3
 80016a0:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80016a4:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 80016a8:	f001 fb16 	bl	8002cd8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2100      	movs	r1, #0
 80016b0:	2027      	movs	r0, #39	@ 0x27
 80016b2:	f001 fadd 	bl	8002c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016b6:	2027      	movs	r0, #39	@ 0x27
 80016b8:	f001 faf4 	bl	8002ca4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016bc:	bf00      	nop
 80016be:	37e8      	adds	r7, #232	@ 0xe8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80016c8:	f640 124c 	movw	r2, #2380	@ 0x94c
 80016cc:	f2c2 4200 	movt	r2, #9216	@ 0x2400
 80016d0:	2300      	movs	r3, #0
 80016d2:	f2c4 0308 	movt	r3, #16392	@ 0x4008
 80016d6:	6013      	str	r3, [r2, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80016d8:	f640 134c 	movw	r3, #2380	@ 0x94c
 80016dc:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80016e0:	2209      	movs	r2, #9
 80016e2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80016e4:	f640 134c 	movw	r3, #2380	@ 0x94c
 80016e8:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80016ec:	2202      	movs	r2, #2
 80016ee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80016f0:	f640 134c 	movw	r3, #2380	@ 0x94c
 80016f4:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80016f8:	2200      	movs	r2, #0
 80016fa:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016fc:	f640 134c 	movw	r3, #2380	@ 0x94c
 8001700:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001704:	2202      	movs	r2, #2
 8001706:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001708:	f640 134c 	movw	r3, #2380	@ 0x94c
 800170c:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001710:	2201      	movs	r2, #1
 8001712:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001714:	f640 134c 	movw	r3, #2380	@ 0x94c
 8001718:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800171c:	2200      	movs	r2, #0
 800171e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001720:	f640 134c 	movw	r3, #2380	@ 0x94c
 8001724:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001728:	2200      	movs	r2, #0
 800172a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800172c:	f640 134c 	movw	r3, #2380	@ 0x94c
 8001730:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001734:	2201      	movs	r2, #1
 8001736:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001738:	f640 134c 	movw	r3, #2380	@ 0x94c
 800173c:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001740:	2201      	movs	r2, #1
 8001742:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001744:	f640 134c 	movw	r3, #2380	@ 0x94c
 8001748:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800174c:	2200      	movs	r2, #0
 800174e:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001750:	f640 104c 	movw	r0, #2380	@ 0x94c
 8001754:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 8001758:	f001 fc98 	bl	800308c <HAL_PCD_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_USB_OTG_FS_PCD_Init+0xa2>
  {
    Error_Handler();
 8001762:	f7ff fcef 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b0ba      	sub	sp, #232	@ 0xe8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001772:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001782:	f107 0310 	add.w	r3, r7, #16
 8001786:	22c0      	movs	r2, #192	@ 0xc0
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f008 f823 	bl	80097d6 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	2300      	movs	r3, #0
 8001796:	f2c4 0308 	movt	r3, #16392	@ 0x4008
 800179a:	429a      	cmp	r2, r3
 800179c:	d171      	bne.n	8001882 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f2c0 0204 	movt	r2, #4
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80017ae:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80017b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b6:	f107 0310 	add.w	r3, r7, #16
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 f84a 	bl	8004854 <HAL_RCCEx_PeriphCLKConfig>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_PCD_MspInit+0x60>
    {
      Error_Handler();
 80017c6:	f7ff fcbd 	bl	8001144 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80017ca:	f001 fdd5 	bl	8003378 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80017d2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80017d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80017da:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80017de:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80017e2:	f042 0201 	orr.w	r2, r2, #1
 80017e6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80017ea:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80017ee:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80017f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80017fe:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001802:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001818:	230a      	movs	r3, #10
 800181a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001822:	4619      	mov	r1, r3
 8001824:	2000      	movs	r0, #0
 8001826:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 800182a:	f001 fa55 	bl	8002cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800182e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001832:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001836:	2300      	movs	r3, #0
 8001838:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001846:	4619      	mov	r1, r3
 8001848:	2000      	movs	r0, #0
 800184a:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 800184e:	f001 fa43 	bl	8002cd8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001852:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001856:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800185a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800185e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001862:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001866:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800186a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 800186e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001872:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001876:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800187a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001882:	bf00      	nop
 8001884:	37e8      	adds	r7, #232	@ 0xe8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800188c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001890:	f7ff fcc4 	bl	800121c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001894:	480c      	ldr	r0, [pc, #48]	@ (80018c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001896:	490d      	ldr	r1, [pc, #52]	@ (80018cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001898:	4a0d      	ldr	r2, [pc, #52]	@ (80018d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800189c:	e002      	b.n	80018a4 <LoopCopyDataInit>

0800189e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a2:	3304      	adds	r3, #4

080018a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a8:	d3f9      	bcc.n	800189e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018aa:	4a0a      	ldr	r2, [pc, #40]	@ (80018d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018ac:	4c0a      	ldr	r4, [pc, #40]	@ (80018d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b0:	e001      	b.n	80018b6 <LoopFillZerobss>

080018b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b4:	3204      	adds	r2, #4

080018b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b8:	d3fb      	bcc.n	80018b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ba:	f007 ff95 	bl	80097e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018be:	f7ff fb4c 	bl	8000f5a <main>
  bx  lr
 80018c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018c4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018cc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80018d0:	08009890 	.word	0x08009890
  ldr r2, =_sbss
 80018d4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80018d8:	24000e34 	.word	0x24000e34

080018dc <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018dc:	e7fe      	b.n	80018dc <ADC_IRQHandler>

080018de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e4:	2003      	movs	r0, #3
 80018e6:	f001 f9b8 	bl	8002c5a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018ea:	f002 fd87 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 80018ee:	4601      	mov	r1, r0
 80018f0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80018f4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	0a1b      	lsrs	r3, r3, #8
 80018fc:	f003 020f 	and.w	r2, r3, #15
 8001900:	f649 0348 	movw	r3, #38984	@ 0x9848
 8001904:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001908:	5c9b      	ldrb	r3, [r3, r2]
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	fa21 f303 	lsr.w	r3, r1, r3
 8001912:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001914:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001918:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f003 020f 	and.w	r2, r3, #15
 8001922:	f649 0348 	movw	r3, #38984	@ 0x9848
 8001926:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800192a:	5c9b      	ldrb	r3, [r3, r2]
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	40da      	lsrs	r2, r3
 8001934:	f240 0304 	movw	r3, #4
 8001938:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800193c:	601a      	str	r2, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800193e:	f240 0300 	movw	r3, #0
 8001942:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800194a:	2000      	movs	r0, #0
 800194c:	f000 f80c 	bl	8001968 <HAL_InitTick>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_Init+0x7c>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e002      	b.n	8001960 <HAL_Init+0x82>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800195a:	f7ff fbf9 	bl	8001150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001970:	f240 030c 	movw	r3, #12
 8001974:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_InitTick+0x1a>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e02a      	b.n	80019d8 <HAL_InitTick+0x70>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001982:	f240 0300 	movw	r3, #0
 8001986:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	f240 030c 	movw	r3, #12
 8001990:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	4619      	mov	r1, r3
 8001998:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800199c:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a4:	4618      	mov	r0, r3
 80019a6:	f001 f98b 	bl	8002cc0 <HAL_SYSTICK_Config>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_InitTick+0x4c>
    {
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e011      	b.n	80019d8 <HAL_InitTick+0x70>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b0f      	cmp	r3, #15
 80019b8:	d80d      	bhi.n	80019d6 <HAL_InitTick+0x6e>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ba:	2200      	movs	r2, #0
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	f04f 30ff 	mov.w	r0, #4294967295
 80019c2:	f001 f955 	bl	8002c70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c6:	f240 0308 	movw	r3, #8
 80019ca:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e000      	b.n	80019d8 <HAL_InitTick+0x70>
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019e4:	f240 030c 	movw	r3, #12
 80019e8:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	f640 6330 	movw	r3, #3632	@ 0xe30
 80019f4:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	441a      	add	r2, r3
 80019fc:	f640 6330 	movw	r3, #3632	@ 0xe30
 8001a00:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001a04:	601a      	str	r2, [r3, #0]
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return uwTick;
 8001a14:	f640 6330 	movw	r3, #3632	@ 0xe30
 8001a18:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001a1c:	681b      	ldr	r3, [r3, #0]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a30:	f7ff ffee 	bl	8001a10 <HAL_GetTick>
 8001a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a40:	d008      	beq.n	8001a54 <HAL_Delay+0x2c>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a42:	f240 030c 	movw	r3, #12
 8001a46:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a54:	bf00      	nop
 8001a56:	f7ff ffdb 	bl	8001a10 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d8f7      	bhi.n	8001a56 <HAL_Delay+0x2e>
  {
  }
}
 8001a66:	bf00      	nop
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a78:	f6c5 4300 	movt	r3, #23552	@ 0x5c00
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	0c1b      	lsrs	r3, r3, #16
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001a94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a98:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	ea02 0103 	and.w	r1, r2, r3
 8001aa6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aaa:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	605a      	str	r2, [r3, #4]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	609a      	str	r2, [r3, #8]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	3360      	adds	r3, #96	@ 0x60
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	430b      	orrs	r3, r1
 8001b56:	431a      	orrs	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	fa01 f303 	lsl.w	r3, r1, r3
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	611a      	str	r2, [r3, #16]
}
 8001b8e:	bf00      	nop
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b087      	sub	sp, #28
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	3360      	adds	r3, #96	@ 0x60
 8001baa:	461a      	mov	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	601a      	str	r2, [r3, #0]
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	371c      	adds	r7, #28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	3330      	adds	r3, #48	@ 0x30
 8001be0:	461a      	mov	r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	4413      	add	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	211f      	movs	r1, #31
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	401a      	ands	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	0e9b      	lsrs	r3, r3, #26
 8001c08:	f003 011f 	and.w	r1, r3, #31
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	431a      	orrs	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c1c:	bf00      	nop
 8001c1e:	371c      	adds	r7, #28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3314      	adds	r3, #20
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	0e5b      	lsrs	r3, r3, #25
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	0d1b      	lsrs	r3, r3, #20
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	2107      	movs	r1, #7
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	0d1b      	lsrs	r3, r3, #20
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c72:	bf00      	nop
 8001c74:	371c      	adds	r7, #28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b085      	sub	sp, #20
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c96:	43db      	mvns	r3, r3
 8001c98:	401a      	ands	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f003 0118 	and.w	r1, r3, #24
 8001ca0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ca4:	f2c0 030f 	movt	r3, #15
 8001ca8:	fa23 f101 	lsr.w	r1, r3, r1
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	400b      	ands	r3, r1
 8001cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	f64f 73c0 	movw	r3, #65472	@ 0xffc0
 8001cd8:	f6c5 73ff 	movt	r3, #24575	@ 0x5fff
 8001cdc:	4013      	ands	r3, r2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6093      	str	r3, [r2, #8]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d02:	d101      	bne.n	8001d08 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	f64f 73c0 	movw	r3, #65472	@ 0xffc0
 8001d26:	f6c6 73ff 	movt	r3, #28671	@ 0x6fff
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d54:	d101      	bne.n	8001d5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <LL_ADC_IsEnabled+0x18>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <LL_ADC_IsEnabled+0x1a>
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d101      	bne.n	8001da6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d101      	bne.n	8001dcc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dda:	b590      	push	{r4, r7, lr}
 8001ddc:	b089      	sub	sp, #36	@ 0x24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e1a4      	b.n	800213e <HAL_ADC_Init+0x364>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d109      	bne.n	8001e16 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe febb 	bl	8000b7e <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ff67 	bl	8001cee <LL_ADC_IsDeepPowerDownEnabled>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d004      	beq.n	8001e30 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff ff4c 	bl	8001cc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff83 	bl	8001d40 <LL_ADC_IsInternalRegulatorEnabled>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d11a      	bne.n	8001e76 <HAL_ADC_Init+0x9c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff66 	bl	8001d16 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e4a:	f240 0300 	movw	r3, #0
 8001e4e:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	099a      	lsrs	r2, r3, #6
 8001e56:	f642 5363 	movw	r3, #11619	@ 0x2d63
 8001e5a:	f2c0 533e 	movt	r3, #1342	@ 0x53e
 8001e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8001e62:	099b      	lsrs	r3, r3, #6
 8001e64:	3301      	adds	r3, #1
 8001e66:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e68:	e002      	b.n	8001e70 <HAL_ADC_Init+0x96>
    {
      wait_loop_index--;
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f9      	bne.n	8001e6a <HAL_ADC_Init+0x90>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff60 	bl	8001d40 <LL_ADC_IsInternalRegulatorEnabled>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10d      	bne.n	8001ea2 <HAL_ADC_Init+0xc8>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8a:	f043 0210 	orr.w	r2, r3, #16
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e96:	f043 0201 	orr.w	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ff71 	bl	8001d8e <LL_ADC_REG_IsConversionOngoing>
 8001eac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f040 8138 	bne.w	800212c <HAL_ADC_Init+0x352>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f040 8134 	bne.w	800212c <HAL_ADC_Init+0x352>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ecc:	f043 0202 	orr.w	r2, r3, #2
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff45 	bl	8001d68 <LL_ADC_IsEnabled>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d151      	bne.n	8001f88 <HAL_ADC_Init+0x1ae>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001eec:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d007      	beq.n	8001f04 <HAL_ADC_Init+0x12a>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8001efc:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d114      	bne.n	8001f2e <HAL_ADC_Init+0x154>
 8001f04:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001f08:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8001f0c:	f7ff ff2c 	bl	8001d68 <LL_ADC_IsEnabled>
 8001f10:	4604      	mov	r4, r0
 8001f12:	f44f 5004 	mov.w	r0, #8448	@ 0x2100
 8001f16:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8001f1a:	f7ff ff25 	bl	8001d68 <LL_ADC_IsEnabled>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4323      	orrs	r3, r4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	bf0c      	ite	eq
 8001f26:	2301      	moveq	r3, #1
 8001f28:	2300      	movne	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	e00b      	b.n	8001f46 <HAL_ADC_Init+0x16c>
 8001f2e:	f44f 40c0 	mov.w	r0, #24576	@ 0x6000
 8001f32:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8001f36:	f7ff ff17 	bl	8001d68 <LL_ADC_IsEnabled>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	bf0c      	ite	eq
 8001f40:	2301      	moveq	r3, #1
 8001f42:	2300      	movne	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01e      	beq.n	8001f88 <HAL_ADC_Init+0x1ae>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f52:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d007      	beq.n	8001f6a <HAL_ADC_Init+0x190>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8001f62:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d104      	bne.n	8001f74 <HAL_ADC_Init+0x19a>
 8001f6a:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 8001f6e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001f72:	e003      	b.n	8001f7c <HAL_ADC_Init+0x1a2>
 8001f74:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 8001f78:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6852      	ldr	r2, [r2, #4]
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fd9c 	bl	8001ac0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001f88:	f7ff fd72 	bl	8001a70 <HAL_GetREVID>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d914      	bls.n	8001fc0 <HAL_ADC_Init+0x1e6>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d110      	bne.n	8001fc0 <HAL_ADC_Init+0x1e6>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7d5b      	ldrb	r3, [r3, #21]
 8001fa2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fa8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001fae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7f1b      	ldrb	r3, [r3, #28]
 8001fb4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001fb6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fb8:	f043 030c 	orr.w	r3, r3, #12
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	e00d      	b.n	8001fdc <HAL_ADC_Init+0x202>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7d5b      	ldrb	r3, [r3, #21]
 8001fc4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001fd0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7f1b      	ldrb	r3, [r3, #28]
 8001fd6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7f1b      	ldrb	r3, [r3, #28]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d106      	bne.n	8001ff2 <HAL_ADC_Init+0x218>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	045b      	lsls	r3, r3, #17
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d009      	beq.n	800200e <HAL_ADC_Init+0x234>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	f24c 0303 	movw	r3, #49155	@ 0xc003
 8002018:	f6cf 73f0 	movt	r3, #65520	@ 0xfff0
 800201c:	4013      	ands	r3, r2
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	69b9      	ldr	r1, [r7, #24]
 8002024:	430b      	orrs	r3, r1
 8002026:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff feae 	bl	8001d8e <LL_ADC_REG_IsConversionOngoing>
 8002032:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff febb 	bl	8001db4 <LL_ADC_INJ_IsConversionOngoing>
 800203e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d150      	bne.n	80020e8 <HAL_ADC_Init+0x30e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d14d      	bne.n	80020e8 <HAL_ADC_Init+0x30e>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	7d1b      	ldrb	r3, [r3, #20]
 8002050:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	f64b 73fc 	movw	r3, #49148	@ 0xbffc
 8002064:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 8002068:	4013      	ands	r3, r2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	69b9      	ldr	r1, [r7, #24]
 8002070:	430b      	orrs	r3, r1
 8002072:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800207a:	2b01      	cmp	r3, #1
 800207c:	d11e      	bne.n	80020bc <HAL_ADC_Init+0x2e2>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002082:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	f64f 031e 	movw	r3, #63518	@ 0xf81e
 800208e:	f6cf 4300 	movt	r3, #64512	@ 0xfc00
 8002092:	4013      	ands	r3, r2
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002098:	3a01      	subs	r2, #1
 800209a:	0411      	lsls	r1, r2, #16
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020a0:	4311      	orrs	r1, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80020a6:	4311      	orrs	r1, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020ac:	430a      	orrs	r2, r1
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f042 0201 	orr.w	r2, r2, #1
 80020b8:	611a      	str	r2, [r3, #16]
 80020ba:	e007      	b.n	80020cc <HAL_ADC_Init+0x2f2>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0201 	bic.w	r2, r2, #1
 80020ca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fbc5 	bl	8002872 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d10c      	bne.n	800210a <HAL_ADC_Init+0x330>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	f023 010f 	bic.w	r1, r3, #15
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	1e5a      	subs	r2, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	631a      	str	r2, [r3, #48]	@ 0x30
 8002108:	e007      	b.n	800211a <HAL_ADC_Init+0x340>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 020f 	bic.w	r2, r2, #15
 8002118:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211e:	f023 0303 	bic.w	r3, r3, #3
 8002122:	f043 0201 	orr.w	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	655a      	str	r2, [r3, #84]	@ 0x54
 800212a:	e007      	b.n	800213c <HAL_ADC_Init+0x362>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002130:	f043 0210 	orr.w	r2, r3, #16
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800213c:	7ffb      	ldrb	r3, [r7, #31]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	@ 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd90      	pop	{r4, r7, pc}

08002146 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002146:	b590      	push	{r4, r7, lr}
 8002148:	b0a1      	sub	sp, #132	@ 0x84
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	2300      	movs	r3, #0
 8002160:	f2c4 73ff 	movt	r3, #18431	@ 0x47ff
 8002164:	429a      	cmp	r2, r3
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x2e>
 8002170:	2302      	movs	r3, #2
 8002172:	e37a      	b.n	800286a <HAL_ADC_ConfigChannel+0x724>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff fe04 	bl	8001d8e <LL_ADC_REG_IsConversionOngoing>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	f040 835f 	bne.w	800284c <HAL_ADC_ConfigChannel+0x706>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	db2c      	blt.n	80021f0 <HAL_ADC_ConfigChannel+0xaa>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d108      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x6e>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	0e9b      	lsrs	r3, r3, #26
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	2201      	movs	r2, #1
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	e016      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x9c>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021c4:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x8a>
  {
    return 32U;
 80021cc:	2320      	movs	r3, #32
 80021ce:	e003      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x92>
  }
  return __builtin_clz(value);
 80021d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	2201      	movs	r2, #1
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	69d1      	ldr	r1, [r2, #28]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	430b      	orrs	r3, r1
 80021ee:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	6859      	ldr	r1, [r3, #4]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	f7ff fce7 	bl	8001bd0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fdc1 	bl	8001d8e <LL_ADC_REG_IsConversionOngoing>
 800220c:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fdce 	bl	8001db4 <LL_ADC_INJ_IsConversionOngoing>
 8002218:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800221a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800221c:	2b00      	cmp	r3, #0
 800221e:	f040 80b6 	bne.w	800238e <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002222:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002224:	2b00      	cmp	r3, #0
 8002226:	f040 80b2 	bne.w	800238e <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6819      	ldr	r1, [r3, #0]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	461a      	mov	r2, r3
 8002238:	f7ff fcf6 	bl	8001c28 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800223c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002240:	f6c5 4300 	movt	r3, #23552	@ 0x5c00
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800224a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800224e:	d10b      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x122>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	695a      	ldr	r2, [r3, #20]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	089b      	lsrs	r3, r3, #2
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	e01d      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x15e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10b      	bne.n	800228e <HAL_ADC_ConfigChannel+0x148>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	089b      	lsrs	r3, r3, #2
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	e00a      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x15e>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	089b      	lsrs	r3, r3, #2
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d027      	beq.n	80022fe <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	6919      	ldr	r1, [r3, #16]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022bc:	f7ff fc34 	bl	8001b28 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	6919      	ldr	r1, [r3, #16]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	7e5b      	ldrb	r3, [r3, #25]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d102      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x190>
 80022d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80022d4:	e000      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x192>
 80022d6:	2300      	movs	r3, #0
 80022d8:	461a      	mov	r2, r3
 80022da:	f7ff fc5e 	bl	8001b9a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6919      	ldr	r1, [r3, #16]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	7e1b      	ldrb	r3, [r3, #24]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d102      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x1ae>
 80022ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80022f2:	e000      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1b0>
 80022f4:	2300      	movs	r3, #0
 80022f6:	461a      	mov	r2, r3
 80022f8:	f7ff fc36 	bl	8001b68 <LL_ADC_SetDataRightShift>
 80022fc:	e047      	b.n	800238e <HAL_ADC_ConfigChannel+0x248>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002304:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	069b      	lsls	r3, r3, #26
 800230e:	429a      	cmp	r2, r3
 8002310:	d107      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002320:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002328:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	069b      	lsls	r3, r3, #26
 8002332:	429a      	cmp	r2, r3
 8002334:	d107      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002344:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800234c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	069b      	lsls	r3, r3, #26
 8002356:	429a      	cmp	r2, r3
 8002358:	d107      	bne.n	800236a <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002368:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002370:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	069b      	lsls	r3, r3, #26
 800237a:	429a      	cmp	r2, r3
 800237c:	d107      	bne.n	800238e <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800238c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fce8 	bl	8001d68 <LL_ADC_IsEnabled>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	f040 825f 	bne.w	800285e <HAL_ADC_ConfigChannel+0x718>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	6819      	ldr	r1, [r3, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	461a      	mov	r2, r3
 80023ae:	f7ff fc66 	bl	8001c7e <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	2300      	movs	r3, #0
 80023b8:	f2c4 73ff 	movt	r3, #18431	@ 0x47ff
 80023bc:	429a      	cmp	r2, r3
 80023be:	f040 812e 	bne.w	800261e <HAL_ADC_ConfigChannel+0x4d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10b      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x2a4>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	0e9b      	lsrs	r3, r3, #26
 80023d8:	3301      	adds	r3, #1
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	2b09      	cmp	r3, #9
 80023e0:	bf94      	ite	ls
 80023e2:	2301      	movls	r3, #1
 80023e4:	2300      	movhi	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	e019      	b.n	800241e <HAL_ADC_ConfigChannel+0x2d8>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023f2:	fa93 f3a3 	rbit	r3, r3
 80023f6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80023f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80023fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 8002402:	2320      	movs	r3, #32
 8002404:	e003      	b.n	800240e <HAL_ADC_ConfigChannel+0x2c8>
  return __builtin_clz(value);
 8002406:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002408:	fab3 f383 	clz	r3, r3
 800240c:	b2db      	uxtb	r3, r3
 800240e:	3301      	adds	r3, #1
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	2b09      	cmp	r3, #9
 8002416:	bf94      	ite	ls
 8002418:	2301      	movls	r3, #1
 800241a:	2300      	movhi	r3, #0
 800241c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800241e:	2b00      	cmp	r3, #0
 8002420:	d079      	beq.n	8002516 <HAL_ADC_ConfigChannel+0x3d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800242a:	2b00      	cmp	r3, #0
 800242c:	d107      	bne.n	800243e <HAL_ADC_ConfigChannel+0x2f8>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	0e9b      	lsrs	r3, r3, #26
 8002434:	3301      	adds	r3, #1
 8002436:	069b      	lsls	r3, r3, #26
 8002438:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800243c:	e015      	b.n	800246a <HAL_ADC_ConfigChannel+0x324>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800244c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800244e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002450:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_ADC_ConfigChannel+0x314>
    return 32U;
 8002456:	2320      	movs	r3, #32
 8002458:	e003      	b.n	8002462 <HAL_ADC_ConfigChannel+0x31c>
  return __builtin_clz(value);
 800245a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	3301      	adds	r3, #1
 8002464:	069b      	lsls	r3, r3, #26
 8002466:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <HAL_ADC_ConfigChannel+0x344>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	0e9b      	lsrs	r3, r3, #26
 800247c:	3301      	adds	r3, #1
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	2101      	movs	r1, #1
 8002484:	fa01 f303 	lsl.w	r3, r1, r3
 8002488:	e017      	b.n	80024ba <HAL_ADC_ConfigChannel+0x374>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800249a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800249c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80024a2:	2320      	movs	r3, #32
 80024a4:	e003      	b.n	80024ae <HAL_ADC_ConfigChannel+0x368>
  return __builtin_clz(value);
 80024a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024a8:	fab3 f383 	clz	r3, r3
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	3301      	adds	r3, #1
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	2101      	movs	r1, #1
 80024b6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ba:	ea42 0103 	orr.w	r1, r2, r3
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10a      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x39a>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	0e9b      	lsrs	r3, r3, #26
 80024d0:	3301      	adds	r3, #1
 80024d2:	f003 021f 	and.w	r2, r3, #31
 80024d6:	4613      	mov	r3, r2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4413      	add	r3, r2
 80024dc:	051b      	lsls	r3, r3, #20
 80024de:	e018      	b.n	8002512 <HAL_ADC_ConfigChannel+0x3cc>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80024ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80024f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x3b6>
    return 32U;
 80024f8:	2320      	movs	r3, #32
 80024fa:	e003      	b.n	8002504 <HAL_ADC_ConfigChannel+0x3be>
  return __builtin_clz(value);
 80024fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	3301      	adds	r3, #1
 8002506:	f003 021f 	and.w	r2, r3, #31
 800250a:	4613      	mov	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002512:	430b      	orrs	r3, r1
 8002514:	e07e      	b.n	8002614 <HAL_ADC_ConfigChannel+0x4ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800251e:	2b00      	cmp	r3, #0
 8002520:	d107      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x3ec>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	0e9b      	lsrs	r3, r3, #26
 8002528:	3301      	adds	r3, #1
 800252a:	069b      	lsls	r3, r3, #26
 800252c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002530:	e015      	b.n	800255e <HAL_ADC_ConfigChannel+0x418>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_ADC_ConfigChannel+0x408>
    return 32U;
 800254a:	2320      	movs	r3, #32
 800254c:	e003      	b.n	8002556 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 800254e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	3301      	adds	r3, #1
 8002558:	069b      	lsls	r3, r3, #26
 800255a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002566:	2b00      	cmp	r3, #0
 8002568:	d109      	bne.n	800257e <HAL_ADC_ConfigChannel+0x438>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	0e9b      	lsrs	r3, r3, #26
 8002570:	3301      	adds	r3, #1
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	2101      	movs	r1, #1
 8002578:	fa01 f303 	lsl.w	r3, r1, r3
 800257c:	e017      	b.n	80025ae <HAL_ADC_ConfigChannel+0x468>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	fa93 f3a3 	rbit	r3, r3
 800258a:	61bb      	str	r3, [r7, #24]
  return result;
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_ADC_ConfigChannel+0x454>
    return 32U;
 8002596:	2320      	movs	r3, #32
 8002598:	e003      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x45c>
  return __builtin_clz(value);
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	3301      	adds	r3, #1
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	2101      	movs	r1, #1
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	ea42 0103 	orr.w	r1, r2, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10d      	bne.n	80025da <HAL_ADC_ConfigChannel+0x494>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	0e9b      	lsrs	r3, r3, #26
 80025c4:	3301      	adds	r3, #1
 80025c6:	f003 021f 	and.w	r2, r3, #31
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	3b1e      	subs	r3, #30
 80025d2:	051b      	lsls	r3, r3, #20
 80025d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025d8:	e01b      	b.n	8002612 <HAL_ADC_ConfigChannel+0x4cc>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	60fb      	str	r3, [r7, #12]
  return result;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x4b0>
    return 32U;
 80025f2:	2320      	movs	r3, #32
 80025f4:	e003      	b.n	80025fe <HAL_ADC_ConfigChannel+0x4b8>
  return __builtin_clz(value);
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	fab3 f383 	clz	r3, r3
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	3301      	adds	r3, #1
 8002600:	f003 021f 	and.w	r2, r3, #31
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	3b1e      	subs	r3, #30
 800260c:	051b      	lsls	r3, r3, #20
 800260e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002612:	430b      	orrs	r3, r1
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	6892      	ldr	r2, [r2, #8]
 8002618:	4619      	mov	r1, r3
 800261a:	f7ff fb05 	bl	8001c28 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	f280 811b 	bge.w	800285e <HAL_ADC_ConfigChannel+0x718>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002630:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002634:	429a      	cmp	r2, r3
 8002636:	d007      	beq.n	8002648 <HAL_ADC_ConfigChannel+0x502>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8002640:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002644:	429a      	cmp	r2, r3
 8002646:	d104      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x50c>
 8002648:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 800264c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002650:	e003      	b.n	800265a <HAL_ADC_ConfigChannel+0x514>
 8002652:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 8002656:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fa56 	bl	8001b0c <LL_ADC_GetCommonPathInternalCh>
 8002660:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800266a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800266e:	429a      	cmp	r2, r3
 8002670:	d007      	beq.n	8002682 <HAL_ADC_ConfigChannel+0x53c>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 800267a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800267e:	429a      	cmp	r2, r3
 8002680:	d114      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x566>
 8002682:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002686:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 800268a:	f7ff fb6d 	bl	8001d68 <LL_ADC_IsEnabled>
 800268e:	4604      	mov	r4, r0
 8002690:	f44f 5004 	mov.w	r0, #8448	@ 0x2100
 8002694:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8002698:	f7ff fb66 	bl	8001d68 <LL_ADC_IsEnabled>
 800269c:	4603      	mov	r3, r0
 800269e:	4323      	orrs	r3, r4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bf0c      	ite	eq
 80026a4:	2301      	moveq	r3, #1
 80026a6:	2300      	movne	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	e00b      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x57e>
 80026ac:	f44f 40c0 	mov.w	r0, #24576	@ 0x6000
 80026b0:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 80026b4:	f7ff fb58 	bl	8001d68 <LL_ADC_IsEnabled>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bf0c      	ite	eq
 80026be:	2301      	moveq	r3, #1
 80026c0:	2300      	movne	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80b7 	beq.w	8002838 <HAL_ADC_ConfigChannel+0x6f2>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	2300      	movs	r3, #0
 80026d0:	f6cc 3384 	movt	r3, #52100	@ 0xcb84
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d145      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x61e>
 80026d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d140      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x61e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80026ea:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80026ee:	429a      	cmp	r2, r3
 80026f0:	f040 80b5 	bne.w	800285e <HAL_ADC_ConfigChannel+0x718>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026fc:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002700:	429a      	cmp	r2, r3
 8002702:	d007      	beq.n	8002714 <HAL_ADC_ConfigChannel+0x5ce>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 800270c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002710:	429a      	cmp	r2, r3
 8002712:	d104      	bne.n	800271e <HAL_ADC_ConfigChannel+0x5d8>
 8002714:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 8002718:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800271c:	e003      	b.n	8002726 <HAL_ADC_ConfigChannel+0x5e0>
 800271e:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 8002722:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002726:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002728:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff f9d9 	bl	8001ae6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002734:	f240 0300 	movw	r3, #0
 8002738:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	099a      	lsrs	r2, r3, #6
 8002740:	f642 5363 	movw	r3, #11619	@ 0x2d63
 8002744:	f2c0 533e 	movt	r3, #1342	@ 0x53e
 8002748:	fba3 2302 	umull	r2, r3, r3, r2
 800274c:	099b      	lsrs	r3, r3, #6
 800274e:	3301      	adds	r3, #1
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002754:	e002      	b.n	800275c <HAL_ADC_ConfigChannel+0x616>
              {
                wait_loop_index--;
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	3b01      	subs	r3, #1
 800275a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f9      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x610>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002762:	e07c      	b.n	800285e <HAL_ADC_ConfigChannel+0x718>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	2300      	movs	r3, #0
 800276a:	f2cc 7352 	movt	r3, #51026	@ 0xc752
 800276e:	429a      	cmp	r2, r3
 8002770:	d12d      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x688>
 8002772:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002774:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d128      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x688>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002784:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002788:	429a      	cmp	r2, r3
 800278a:	d168      	bne.n	800285e <HAL_ADC_ConfigChannel+0x718>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002794:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002798:	429a      	cmp	r2, r3
 800279a:	d007      	beq.n	80027ac <HAL_ADC_ConfigChannel+0x666>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 80027a4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d104      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x670>
 80027ac:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 80027b0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80027b4:	e003      	b.n	80027be <HAL_ADC_ConfigChannel+0x678>
 80027b6:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 80027ba:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80027be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80027c0:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80027c4:	4611      	mov	r1, r2
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff f98d 	bl	8001ae6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027cc:	e047      	b.n	800285e <HAL_ADC_ConfigChannel+0x718>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	2300      	movs	r3, #0
 80027d4:	f6cc 73b8 	movt	r3, #53176	@ 0xcfb8
 80027d8:	429a      	cmp	r2, r3
 80027da:	d140      	bne.n	800285e <HAL_ADC_ConfigChannel+0x718>
 80027dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d13b      	bne.n	800285e <HAL_ADC_ConfigChannel+0x718>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80027ee:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d133      	bne.n	800285e <HAL_ADC_ConfigChannel+0x718>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027fe:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002802:	429a      	cmp	r2, r3
 8002804:	d007      	beq.n	8002816 <HAL_ADC_ConfigChannel+0x6d0>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 800280e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002812:	429a      	cmp	r2, r3
 8002814:	d104      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x6da>
 8002816:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 800281a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800281e:	e003      	b.n	8002828 <HAL_ADC_ConfigChannel+0x6e2>
 8002820:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 8002824:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002828:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800282a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff f958 	bl	8001ae6 <LL_ADC_SetCommonPathInternalCh>
 8002836:	e012      	b.n	800285e <HAL_ADC_ConfigChannel+0x718>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283c:	f043 0220 	orr.w	r2, r3, #32
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800284a:	e008      	b.n	800285e <HAL_ADC_ConfigChannel+0x718>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002850:	f043 0220 	orr.w	r2, r3, #32
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002866:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800286a:	4618      	mov	r0, r3
 800286c:	3784      	adds	r7, #132	@ 0x84
 800286e:	46bd      	mov	sp, r7
 8002870:	bd90      	pop	{r4, r7, pc}

08002872 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002882:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002886:	429a      	cmp	r2, r3
 8002888:	d007      	beq.n	800289a <ADC_ConfigureBoostMode+0x28>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8002892:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002896:	429a      	cmp	r2, r3
 8002898:	d10c      	bne.n	80028b4 <ADC_ConfigureBoostMode+0x42>
 800289a:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 800289e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf14      	ite	ne
 80028ac:	2301      	movne	r3, #1
 80028ae:	2300      	moveq	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	e00b      	b.n	80028cc <ADC_ConfigureBoostMode+0x5a>
 80028b4:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 80028b8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bf14      	ite	ne
 80028c6:	2301      	movne	r3, #1
 80028c8:	2300      	moveq	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01c      	beq.n	800290a <ADC_ConfigureBoostMode+0x98>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80028d0:	f001 ff54 	bl	800477c <HAL_RCC_GetHCLKFreq>
 80028d4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80028de:	d010      	beq.n	8002902 <ADC_ConfigureBoostMode+0x90>
 80028e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80028e4:	d875      	bhi.n	80029d2 <ADC_ConfigureBoostMode+0x160>
 80028e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028ea:	d002      	beq.n	80028f2 <ADC_ConfigureBoostMode+0x80>
 80028ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80028f0:	d16f      	bne.n	80029d2 <ADC_ConfigureBoostMode+0x160>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	0c1b      	lsrs	r3, r3, #16
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fe:	60fb      	str	r3, [r7, #12]
        break;
 8002900:	e06a      	b.n	80029d8 <ADC_ConfigureBoostMode+0x166>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	089b      	lsrs	r3, r3, #2
 8002906:	60fb      	str	r3, [r7, #12]
        break;
 8002908:	e066      	b.n	80029d8 <ADC_ConfigureBoostMode+0x166>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800290a:	f04f 0000 	mov.w	r0, #0
 800290e:	f2c0 0008 	movt	r0, #8
 8002912:	f04f 0100 	mov.w	r1, #0
 8002916:	f003 fac5 	bl	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq>
 800291a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002924:	d051      	beq.n	80029ca <ADC_ConfigureBoostMode+0x158>
 8002926:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800292a:	d854      	bhi.n	80029d6 <ADC_ConfigureBoostMode+0x164>
 800292c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002930:	d047      	beq.n	80029c2 <ADC_ConfigureBoostMode+0x150>
 8002932:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002936:	d84e      	bhi.n	80029d6 <ADC_ConfigureBoostMode+0x164>
 8002938:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800293c:	d03d      	beq.n	80029ba <ADC_ConfigureBoostMode+0x148>
 800293e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002942:	d848      	bhi.n	80029d6 <ADC_ConfigureBoostMode+0x164>
 8002944:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002948:	d033      	beq.n	80029b2 <ADC_ConfigureBoostMode+0x140>
 800294a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800294e:	d842      	bhi.n	80029d6 <ADC_ConfigureBoostMode+0x164>
 8002950:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002954:	d029      	beq.n	80029aa <ADC_ConfigureBoostMode+0x138>
 8002956:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800295a:	d83c      	bhi.n	80029d6 <ADC_ConfigureBoostMode+0x164>
 800295c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002960:	d01a      	beq.n	8002998 <ADC_ConfigureBoostMode+0x126>
 8002962:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002966:	d836      	bhi.n	80029d6 <ADC_ConfigureBoostMode+0x164>
 8002968:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800296c:	d014      	beq.n	8002998 <ADC_ConfigureBoostMode+0x126>
 800296e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002972:	d830      	bhi.n	80029d6 <ADC_ConfigureBoostMode+0x164>
 8002974:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002978:	d00e      	beq.n	8002998 <ADC_ConfigureBoostMode+0x126>
 800297a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800297e:	d82a      	bhi.n	80029d6 <ADC_ConfigureBoostMode+0x164>
 8002980:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002984:	d008      	beq.n	8002998 <ADC_ConfigureBoostMode+0x126>
 8002986:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800298a:	d824      	bhi.n	80029d6 <ADC_ConfigureBoostMode+0x164>
 800298c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002990:	d002      	beq.n	8002998 <ADC_ConfigureBoostMode+0x126>
 8002992:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002996:	d11e      	bne.n	80029d6 <ADC_ConfigureBoostMode+0x164>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	0c9b      	lsrs	r3, r3, #18
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a6:	60fb      	str	r3, [r7, #12]
        break;
 80029a8:	e016      	b.n	80029d8 <ADC_ConfigureBoostMode+0x166>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	60fb      	str	r3, [r7, #12]
        break;
 80029b0:	e012      	b.n	80029d8 <ADC_ConfigureBoostMode+0x166>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	095b      	lsrs	r3, r3, #5
 80029b6:	60fb      	str	r3, [r7, #12]
        break;
 80029b8:	e00e      	b.n	80029d8 <ADC_ConfigureBoostMode+0x166>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	099b      	lsrs	r3, r3, #6
 80029be:	60fb      	str	r3, [r7, #12]
        break;
 80029c0:	e00a      	b.n	80029d8 <ADC_ConfigureBoostMode+0x166>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	09db      	lsrs	r3, r3, #7
 80029c6:	60fb      	str	r3, [r7, #12]
        break;
 80029c8:	e006      	b.n	80029d8 <ADC_ConfigureBoostMode+0x166>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	0a1b      	lsrs	r3, r3, #8
 80029ce:	60fb      	str	r3, [r7, #12]
        break;
 80029d0:	e002      	b.n	80029d8 <ADC_ConfigureBoostMode+0x166>
        break;
 80029d2:	bf00      	nop
 80029d4:	e000      	b.n	80029d8 <ADC_ConfigureBoostMode+0x166>
      default:
        break;
 80029d6:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80029d8:	f7ff f84a 	bl	8001a70 <HAL_GetREVID>
 80029dc:	4603      	mov	r3, r0
 80029de:	f241 0203 	movw	r2, #4099	@ 0x1003
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d818      	bhi.n	8002a18 <ADC_ConfigureBoostMode+0x1a6>
  {
    if (freq > 20000000UL)
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 80029ec:	f2c0 1331 	movt	r3, #305	@ 0x131
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d908      	bls.n	8002a06 <ADC_ConfigureBoostMode+0x194>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a02:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002a04:	e047      	b.n	8002a96 <ADC_ConfigureBoostMode+0x224>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a14:	609a      	str	r2, [r3, #8]
}
 8002a16:	e03e      	b.n	8002a96 <ADC_ConfigureBoostMode+0x224>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	085b      	lsrs	r3, r3, #1
 8002a1c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	f645 6310 	movw	r3, #24080	@ 0x5e10
 8002a24:	f2c0 035f 	movt	r3, #95	@ 0x5f
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d808      	bhi.n	8002a3e <ADC_ConfigureBoostMode+0x1cc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002a3a:	609a      	str	r2, [r3, #8]
}
 8002a3c:	e02b      	b.n	8002a96 <ADC_ConfigureBoostMode+0x224>
    else if (freq <= 12500000UL)
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	f64b 4320 	movw	r3, #48160	@ 0xbc20
 8002a44:	f2c0 03be 	movt	r3, #190	@ 0xbe
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d80a      	bhi.n	8002a62 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a5e:	609a      	str	r2, [r3, #8]
}
 8002a60:	e019      	b.n	8002a96 <ADC_ConfigureBoostMode+0x224>
    else if (freq <= 25000000UL)
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	f647 0340 	movw	r3, #30784	@ 0x7840
 8002a68:	f2c0 137d 	movt	r3, #381	@ 0x17d
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d80a      	bhi.n	8002a86 <ADC_ConfigureBoostMode+0x214>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a82:	609a      	str	r2, [r3, #8]
}
 8002a84:	e007      	b.n	8002a96 <ADC_ConfigureBoostMode+0x224>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002a94:	609a      	str	r2, [r3, #8]
}
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aae:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8002ab2:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002acc:	2300      	movs	r3, #0
 8002ace:	f2c0 53fa 	movt	r3, #1530	@ 0x5fa
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ad6:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8002ada:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
}
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af2:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8002af6:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	0a1b      	lsrs	r3, r3, #8
 8002afe:	f003 0307 	and.w	r3, r3, #7
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	db0e      	blt.n	8002b3c <__NVIC_EnableIRQ+0x30>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	f003 011f 	and.w	r1, r3, #31
 8002b24:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8002b28:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002b2c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b30:	0952      	lsrs	r2, r2, #5
 8002b32:	2001      	movs	r0, #1
 8002b34:	fa00 f101 	lsl.w	r1, r0, r1
 8002b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	6039      	str	r1, [r7, #0]
 8002b52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	db0e      	blt.n	8002b7a <__NVIC_SetPriority+0x32>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	b2d9      	uxtb	r1, r3
 8002b60:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8002b64:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002b68:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b6c:	0109      	lsls	r1, r1, #4
 8002b6e:	b2c9      	uxtb	r1, r1
 8002b70:	4413      	add	r3, r2
 8002b72:	460a      	mov	r2, r1
 8002b74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b78:	e00e      	b.n	8002b98 <__NVIC_SetPriority+0x50>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	b2d9      	uxtb	r1, r3
 8002b7e:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8002b82:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002b86:	88fa      	ldrh	r2, [r7, #6]
 8002b88:	f002 020f 	and.w	r2, r2, #15
 8002b8c:	3a04      	subs	r2, #4
 8002b8e:	0109      	lsls	r1, r1, #4
 8002b90:	b2c9      	uxtb	r1, r1
 8002b92:	4413      	add	r3, r2
 8002b94:	460a      	mov	r2, r1
 8002b96:	761a      	strb	r2, [r3, #24]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b089      	sub	sp, #36	@ 0x24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f1c3 0307 	rsb	r3, r3, #7
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	bf28      	it	cs
 8002bc2:	2304      	movcs	r3, #4
 8002bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	2b06      	cmp	r3, #6
 8002bcc:	d902      	bls.n	8002bd4 <NVIC_EncodePriority+0x30>
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3b03      	subs	r3, #3
 8002bd2:	e000      	b.n	8002bd6 <NVIC_EncodePriority+0x32>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43da      	mvns	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	401a      	ands	r2, r3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bec:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	43d9      	mvns	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bfc:	4313      	orrs	r3, r2
         );
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3724      	adds	r7, #36	@ 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c1a:	d301      	bcc.n	8002c20 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e018      	b.n	8002c52 <SysTick_Config+0x48>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c20:	f24e 0310 	movw	r3, #57360	@ 0xe010
 8002c24:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	3a01      	subs	r2, #1
 8002c2c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c2e:	210f      	movs	r1, #15
 8002c30:	f04f 30ff 	mov.w	r0, #4294967295
 8002c34:	f7ff ff88 	bl	8002b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c38:	f24e 0310 	movw	r3, #57360	@ 0xe010
 8002c3c:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002c40:	2200      	movs	r2, #0
 8002c42:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c44:	f24e 0310 	movw	r3, #57360	@ 0xe010
 8002c48:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002c4c:	2207      	movs	r2, #7
 8002c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff ff1b 	bl	8002a9e <__NVIC_SetPriorityGrouping>
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c7e:	f7ff ff36 	bl	8002aee <__NVIC_GetPriorityGrouping>
 8002c82:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	68b9      	ldr	r1, [r7, #8]
 8002c88:	6978      	ldr	r0, [r7, #20]
 8002c8a:	f7ff ff8b 	bl	8002ba4 <NVIC_EncodePriority>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff ff56 	bl	8002b48 <__NVIC_SetPriority>
}
 8002c9c:	bf00      	nop
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff ff2a 	bl	8002b0c <__NVIC_EnableIRQ>
}
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff ff9e 	bl	8002c0a <SysTick_Config>
 8002cce:	4603      	mov	r3, r0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b089      	sub	sp, #36	@ 0x24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002ce6:	2380      	movs	r3, #128	@ 0x80
 8002ce8:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8002cec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002cee:	e1a5      	b.n	800303c <HAL_GPIO_Init+0x364>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 8197 	beq.w	8003036 <HAL_GPIO_Init+0x35e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d005      	beq.n	8002d20 <HAL_GPIO_Init+0x48>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d130      	bne.n	8002d82 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	2203      	movs	r2, #3
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d56:	2201      	movs	r2, #1
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	091b      	lsrs	r3, r3, #4
 8002d6c:	f003 0201 	and.w	r2, r3, #1
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b03      	cmp	r3, #3
 8002d8c:	d017      	beq.n	8002dbe <HAL_GPIO_Init+0xe6>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	2203      	movs	r2, #3
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d123      	bne.n	8002e12 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	08da      	lsrs	r2, r3, #3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3208      	adds	r2, #8
 8002dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	220f      	movs	r2, #15
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4013      	ands	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	08da      	lsrs	r2, r3, #3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3208      	adds	r2, #8
 8002e0c:	69b9      	ldr	r1, [r7, #24]
 8002e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 0203 	and.w	r2, r3, #3
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80f1 	beq.w	8003036 <HAL_GPIO_Init+0x35e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e54:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8002e58:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002e5c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8002e60:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8002e64:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002e68:	f042 0202 	orr.w	r2, r2, #2
 8002e6c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8002e70:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8002e74:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002e78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e88:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8002e8c:	69fa      	ldr	r2, [r7, #28]
 8002e8e:	0892      	lsrs	r2, r2, #2
 8002e90:	3202      	adds	r2, #2
 8002e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	220f      	movs	r2, #15
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d052      	beq.n	8002f60 <HAL_GPIO_Init+0x288>
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ec0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d049      	beq.n	8002f5c <HAL_GPIO_Init+0x284>
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ece:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d040      	beq.n	8002f58 <HAL_GPIO_Init+0x280>
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002edc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d037      	beq.n	8002f54 <HAL_GPIO_Init+0x27c>
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002eea:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d02e      	beq.n	8002f50 <HAL_GPIO_Init+0x278>
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002ef8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d025      	beq.n	8002f4c <HAL_GPIO_Init+0x274>
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002f06:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d01c      	beq.n	8002f48 <HAL_GPIO_Init+0x270>
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002f14:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d013      	beq.n	8002f44 <HAL_GPIO_Init+0x26c>
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f22:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d00a      	beq.n	8002f40 <HAL_GPIO_Init+0x268>
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8002f30:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d101      	bne.n	8002f3c <HAL_GPIO_Init+0x264>
 8002f38:	2309      	movs	r3, #9
 8002f3a:	e012      	b.n	8002f62 <HAL_GPIO_Init+0x28a>
 8002f3c:	230a      	movs	r3, #10
 8002f3e:	e010      	b.n	8002f62 <HAL_GPIO_Init+0x28a>
 8002f40:	2308      	movs	r3, #8
 8002f42:	e00e      	b.n	8002f62 <HAL_GPIO_Init+0x28a>
 8002f44:	2307      	movs	r3, #7
 8002f46:	e00c      	b.n	8002f62 <HAL_GPIO_Init+0x28a>
 8002f48:	2306      	movs	r3, #6
 8002f4a:	e00a      	b.n	8002f62 <HAL_GPIO_Init+0x28a>
 8002f4c:	2305      	movs	r3, #5
 8002f4e:	e008      	b.n	8002f62 <HAL_GPIO_Init+0x28a>
 8002f50:	2304      	movs	r3, #4
 8002f52:	e006      	b.n	8002f62 <HAL_GPIO_Init+0x28a>
 8002f54:	2303      	movs	r3, #3
 8002f56:	e004      	b.n	8002f62 <HAL_GPIO_Init+0x28a>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e002      	b.n	8002f62 <HAL_GPIO_Init+0x28a>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <HAL_GPIO_Init+0x28a>
 8002f60:	2300      	movs	r3, #0
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	f002 0203 	and.w	r2, r2, #3
 8002f68:	0092      	lsls	r2, r2, #2
 8002f6a:	4093      	lsls	r3, r2
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f76:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8002f7a:	69fa      	ldr	r2, [r7, #28]
 8002f7c:	0892      	lsrs	r2, r2, #2
 8002f7e:	3202      	adds	r2, #2
 8002f80:	69b9      	ldr	r1, [r7, #24]
 8002f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_GPIO_Init+0x2d4>
        {
          temp |= iocurrent;
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002fac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002fda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_GPIO_Init+0x32e>
        {
          temp |= iocurrent;
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_GPIO_Init+0x358>
        {
          temp |= iocurrent;
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3301      	adds	r3, #1
 800303a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	fa22 f303 	lsr.w	r3, r2, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	f47f ae52 	bne.w	8002cf0 <HAL_GPIO_Init+0x18>
  }
}
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	3724      	adds	r7, #36	@ 0x24
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	807b      	strh	r3, [r7, #2]
 8003066:	4613      	mov	r3, r2
 8003068:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800306a:	787b      	ldrb	r3, [r7, #1]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003070:	887a      	ldrh	r2, [r7, #2]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003076:	e003      	b.n	8003080 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003078:	887b      	ldrh	r3, [r7, #2]
 800307a:	041a      	lsls	r2, r3, #16
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	619a      	str	r2, [r3, #24]
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af02      	add	r7, sp, #8
 8003092:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e0fe      	b.n	800329c <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fe fb59 	bl	800176a <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2203      	movs	r2, #3
 80030bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f006 f8f1 	bl	80092ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	7c1a      	ldrb	r2, [r3, #16]
 80030d2:	f88d 2000 	strb.w	r2, [sp]
 80030d6:	3304      	adds	r3, #4
 80030d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030da:	f006 f875 	bl	80091c8 <USB_CoreInit>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0d5      	b.n	800329c <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2100      	movs	r1, #0
 80030f6:	4618      	mov	r0, r3
 80030f8:	f006 f8e9 	bl	80092ce <USB_SetCurrentMode>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2202      	movs	r2, #2
 8003106:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e0c6      	b.n	800329c <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800310e:	2300      	movs	r3, #0
 8003110:	73fb      	strb	r3, [r7, #15]
 8003112:	e04a      	b.n	80031aa <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003114:	7bfa      	ldrb	r2, [r7, #15]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	3315      	adds	r3, #21
 8003124:	2201      	movs	r2, #1
 8003126:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003128:	7bfa      	ldrb	r2, [r7, #15]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	3314      	adds	r3, #20
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800313c:	7bfa      	ldrb	r2, [r7, #15]
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	b298      	uxth	r0, r3
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	332e      	adds	r3, #46	@ 0x2e
 8003150:	4602      	mov	r2, r0
 8003152:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003154:	7bfa      	ldrb	r2, [r7, #15]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	3318      	adds	r3, #24
 8003164:	2200      	movs	r2, #0
 8003166:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003168:	7bfa      	ldrb	r2, [r7, #15]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	331c      	adds	r3, #28
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800317c:	7bfa      	ldrb	r2, [r7, #15]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	3320      	adds	r3, #32
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	3324      	adds	r3, #36	@ 0x24
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	3301      	adds	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	791b      	ldrb	r3, [r3, #4]
 80031ae:	7bfa      	ldrb	r2, [r7, #15]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d3af      	bcc.n	8003114 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b4:	2300      	movs	r3, #0
 80031b6:	73fb      	strb	r3, [r7, #15]
 80031b8:	e044      	b.n	8003244 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031ba:	7bfa      	ldrb	r2, [r7, #15]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031d0:	7bfa      	ldrb	r2, [r7, #15]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80031e2:	7bfa      	ldrb	r2, [r7, #15]
 80031e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031e6:	7bfa      	ldrb	r2, [r7, #15]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80031f8:	2200      	movs	r2, #0
 80031fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031fc:	7bfa      	ldrb	r2, [r7, #15]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003212:	7bfa      	ldrb	r2, [r7, #15]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	4413      	add	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003228:	7bfa      	ldrb	r2, [r7, #15]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	3301      	adds	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	791b      	ldrb	r3, [r3, #4]
 8003248:	7bfa      	ldrb	r2, [r7, #15]
 800324a:	429a      	cmp	r2, r3
 800324c:	d3b5      	bcc.n	80031ba <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	7c1a      	ldrb	r2, [r3, #16]
 8003256:	f88d 2000 	strb.w	r2, [sp]
 800325a:	3304      	adds	r3, #4
 800325c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800325e:	f006 f882 	bl	8009366 <USB_DevInit>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e013      	b.n	800329c <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	7b1b      	ldrb	r3, [r3, #12]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d102      	bne.n	8003290 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f80a 	bl	80032a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f006 fa3e 	bl	8009716 <USB_DevDisconnect>

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80032d2:	2303      	movs	r3, #3
 80032d4:	f2c1 0300 	movt	r3, #4096	@ 0x1000
 80032d8:	4313      	orrs	r3, r2
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80032f4:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80032f8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b04      	cmp	r3, #4
 8003304:	d00d      	beq.n	8003322 <HAL_PWREx_ConfigSupply+0x36>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003306:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800330a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	429a      	cmp	r2, r3
 8003318:	d001      	beq.n	800331e <HAL_PWREx_ConfigSupply+0x32>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e028      	b.n	8003370 <HAL_PWREx_ConfigSupply+0x84>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	e026      	b.n	8003370 <HAL_PWREx_ConfigSupply+0x84>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003322:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8003326:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f023 0107 	bic.w	r1, r3, #7
 8003330:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8003334:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	430a      	orrs	r2, r1
 800333c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800333e:	f7fe fb67 	bl	8001a10 <HAL_GetTick>
 8003342:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003344:	e009      	b.n	800335a <HAL_PWREx_ConfigSupply+0x6e>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003346:	f7fe fb63 	bl	8001a10 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003354:	d901      	bls.n	800335a <HAL_PWREx_ConfigSupply+0x6e>
    {
      return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e00a      	b.n	8003370 <HAL_PWREx_ConfigSupply+0x84>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800335a:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800335e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800336c:	d1eb      	bne.n	8003346 <HAL_PWREx_ConfigSupply+0x5a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800337c:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8003380:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800338a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800338e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003392:	60da      	str	r2, [r3, #12]
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b08c      	sub	sp, #48	@ 0x30
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d102      	bne.n	80033b2 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f000 bdd8 	b.w	8003f62 <HAL_RCC_OscConfig+0xbc4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 80c5 	beq.w	800354a <HAL_RCC_OscConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033c0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80033c4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033d0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80033d4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80033d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033da:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80033dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033de:	2b10      	cmp	r3, #16
 80033e0:	d007      	beq.n	80033f2 <HAL_RCC_OscConfig+0x54>
 80033e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033e4:	2b18      	cmp	r3, #24
 80033e6:	d116      	bne.n	8003416 <HAL_RCC_OscConfig+0x78>
 80033e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d111      	bne.n	8003416 <HAL_RCC_OscConfig+0x78>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80033f6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 80a1 	beq.w	8003548 <HAL_RCC_OscConfig+0x1aa>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	f040 809c 	bne.w	8003548 <HAL_RCC_OscConfig+0x1aa>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	f000 bda6 	b.w	8003f62 <HAL_RCC_OscConfig+0xbc4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800341e:	d10c      	bne.n	800343a <HAL_RCC_OscConfig+0x9c>
 8003420:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003424:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800342e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003432:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	e052      	b.n	80034e0 <HAL_RCC_OscConfig+0x142>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d118      	bne.n	8003474 <HAL_RCC_OscConfig+0xd6>
 8003442:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003446:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003450:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003454:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800345e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003468:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800346c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	e035      	b.n	80034e0 <HAL_RCC_OscConfig+0x142>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800347c:	d118      	bne.n	80034b0 <HAL_RCC_OscConfig+0x112>
 800347e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003482:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800348c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003490:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800349a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80034a4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80034a8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	e017      	b.n	80034e0 <HAL_RCC_OscConfig+0x142>
 80034b0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80034b4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80034be:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80034c2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80034cc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80034d6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80034da:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034de:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d017      	beq.n	8003518 <HAL_RCC_OscConfig+0x17a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7fe fa92 	bl	8001a10 <HAL_GetTick>
 80034ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034ee:	e009      	b.n	8003504 <HAL_RCC_OscConfig+0x166>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f0:	f7fe fa8e 	bl	8001a10 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	@ 0x64
 80034fc:	d902      	bls.n	8003504 <HAL_RCC_OscConfig+0x166>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	f000 bd2f 	b.w	8003f62 <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003504:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003508:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0ec      	beq.n	80034f0 <HAL_RCC_OscConfig+0x152>
 8003516:	e018      	b.n	800354a <HAL_RCC_OscConfig+0x1ac>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fe fa7a 	bl	8001a10 <HAL_GetTick>
 800351c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800351e:	e009      	b.n	8003534 <HAL_RCC_OscConfig+0x196>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003520:	f7fe fa76 	bl	8001a10 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	@ 0x64
 800352c:	d902      	bls.n	8003534 <HAL_RCC_OscConfig+0x196>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	f000 bd17 	b.w	8003f62 <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003534:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003538:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1ec      	bne.n	8003520 <HAL_RCC_OscConfig+0x182>
 8003546:	e000      	b.n	800354a <HAL_RCC_OscConfig+0x1ac>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8113 	beq.w	800377e <HAL_RCC_OscConfig+0x3e0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003558:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800355c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003566:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003568:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800356c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003572:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d007      	beq.n	800358a <HAL_RCC_OscConfig+0x1ec>
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	2b18      	cmp	r3, #24
 800357e:	d176      	bne.n	800366e <HAL_RCC_OscConfig+0x2d0>
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d171      	bne.n	800366e <HAL_RCC_OscConfig+0x2d0>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800358a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800358e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d006      	beq.n	80035aa <HAL_RCC_OscConfig+0x20c>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d102      	bne.n	80035aa <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	f000 bcdc 	b.w	8003f62 <HAL_RCC_OscConfig+0xbc4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80035aa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80035ae:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f023 0119 	bic.w	r1, r3, #25
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80035c0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80035c4:	430a      	orrs	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fe fa22 	bl	8001a10 <HAL_GetTick>
 80035cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035ce:	e009      	b.n	80035e4 <HAL_RCC_OscConfig+0x246>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d0:	f7fe fa1e 	bl	8001a10 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d902      	bls.n	80035e4 <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	f000 bcbf 	b.w	8003f62 <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035e4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80035e8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0ec      	beq.n	80035d0 <HAL_RCC_OscConfig+0x232>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f6:	f7fe fa3b 	bl	8001a70 <HAL_GetREVID>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003600:	4293      	cmp	r3, r2
 8003602:	d823      	bhi.n	800364c <HAL_RCC_OscConfig+0x2ae>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	2b40      	cmp	r3, #64	@ 0x40
 800360a:	d10e      	bne.n	800362a <HAL_RCC_OscConfig+0x28c>
 800360c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003610:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800361a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800361e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003622:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003626:	605a      	str	r2, [r3, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003628:	e0a9      	b.n	800377e <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800362e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f423 317c 	bic.w	r1, r3, #258048	@ 0x3f000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	031a      	lsls	r2, r3, #12
 800363e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003642:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800364a:	e098      	b.n	800377e <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003650:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f023 41fe 	bic.w	r1, r3, #2130706432	@ 0x7f000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	061a      	lsls	r2, r3, #24
 8003660:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003664:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003668:	430a      	orrs	r2, r1
 800366a:	605a      	str	r2, [r3, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800366c:	e087      	b.n	800377e <HAL_RCC_OscConfig+0x3e0>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d061      	beq.n	800373a <HAL_RCC_OscConfig+0x39c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003676:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800367a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f023 0119 	bic.w	r1, r3, #25
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800368c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003690:	430a      	orrs	r2, r1
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7fe f9bc 	bl	8001a10 <HAL_GetTick>
 8003698:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800369a:	e009      	b.n	80036b0 <HAL_RCC_OscConfig+0x312>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800369c:	f7fe f9b8 	bl	8001a10 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d902      	bls.n	80036b0 <HAL_RCC_OscConfig+0x312>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	f000 bc59 	b.w	8003f62 <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036b0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80036b4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0ec      	beq.n	800369c <HAL_RCC_OscConfig+0x2fe>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c2:	f7fe f9d5 	bl	8001a70 <HAL_GetREVID>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d823      	bhi.n	8003718 <HAL_RCC_OscConfig+0x37a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	2b40      	cmp	r3, #64	@ 0x40
 80036d6:	d10e      	bne.n	80036f6 <HAL_RCC_OscConfig+0x358>
 80036d8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80036dc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80036e6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80036ea:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80036ee:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80036f2:	605a      	str	r2, [r3, #4]
 80036f4:	e043      	b.n	800377e <HAL_RCC_OscConfig+0x3e0>
 80036f6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80036fa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 317c 	bic.w	r1, r3, #258048	@ 0x3f000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	031a      	lsls	r2, r3, #12
 800370a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800370e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	e032      	b.n	800377e <HAL_RCC_OscConfig+0x3e0>
 8003718:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800371c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f023 41fe 	bic.w	r1, r3, #2130706432	@ 0x7f000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	061a      	lsls	r2, r3, #24
 800372c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003730:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003734:	430a      	orrs	r2, r1
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	e021      	b.n	800377e <HAL_RCC_OscConfig+0x3e0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800373a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800373e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003748:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800374c:	f022 0201 	bic.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003752:	f7fe f95d 	bl	8001a10 <HAL_GetTick>
 8003756:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x3ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800375a:	f7fe f959 	bl	8001a10 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e3fa      	b.n	8003f62 <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800376c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003770:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1ed      	bne.n	800375a <HAL_RCC_OscConfig+0x3bc>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 80e8 	beq.w	800395c <HAL_RCC_OscConfig+0x5be>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800378c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003790:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800379a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800379c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80037a0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80037a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d007      	beq.n	80037be <HAL_RCC_OscConfig+0x420>
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b18      	cmp	r3, #24
 80037b2:	d14f      	bne.n	8003854 <HAL_RCC_OscConfig+0x4b6>
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d14a      	bne.n	8003854 <HAL_RCC_OscConfig+0x4b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037be:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80037c2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_OscConfig+0x43e>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	2b80      	cmp	r3, #128	@ 0x80
 80037d6:	d001      	beq.n	80037dc <HAL_RCC_OscConfig+0x43e>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e3c2      	b.n	8003f62 <HAL_RCC_OscConfig+0xbc4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037dc:	f7fe f948 	bl	8001a70 <HAL_GetREVID>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d823      	bhi.n	8003832 <HAL_RCC_OscConfig+0x494>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	2b20      	cmp	r3, #32
 80037f0:	d10e      	bne.n	8003810 <HAL_RCC_OscConfig+0x472>
 80037f2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80037f6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003800:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003804:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003808:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800380c:	605a      	str	r2, [r3, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800380e:	e0a5      	b.n	800395c <HAL_RCC_OscConfig+0x5be>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003810:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003814:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f023 41f8 	bic.w	r1, r3, #2080374784	@ 0x7c000000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	069a      	lsls	r2, r3, #26
 8003824:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003828:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800382c:	430a      	orrs	r2, r1
 800382e:	605a      	str	r2, [r3, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003830:	e094      	b.n	800395c <HAL_RCC_OscConfig+0x5be>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003832:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003836:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	061a      	lsls	r2, r3, #24
 8003846:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800384a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800384e:	430a      	orrs	r2, r1
 8003850:	60da      	str	r2, [r3, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003852:	e083      	b.n	800395c <HAL_RCC_OscConfig+0x5be>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d05d      	beq.n	8003918 <HAL_RCC_OscConfig+0x57a>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800385c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003860:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800386a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800386e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fe f8cc 	bl	8001a10 <HAL_GetTick>
 8003878:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800387c:	f7fe f8c8 	bl	8001a10 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e369      	b.n	8003f62 <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800388e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003892:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0ed      	beq.n	800387c <HAL_RCC_OscConfig+0x4de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038a0:	f7fe f8e6 	bl	8001a70 <HAL_GetREVID>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d823      	bhi.n	80038f6 <HAL_RCC_OscConfig+0x558>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	2b20      	cmp	r3, #32
 80038b4:	d10e      	bne.n	80038d4 <HAL_RCC_OscConfig+0x536>
 80038b6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80038ba:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80038c4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80038c8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80038cc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	e043      	b.n	800395c <HAL_RCC_OscConfig+0x5be>
 80038d4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80038d8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f023 41f8 	bic.w	r1, r3, #2080374784	@ 0x7c000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	069a      	lsls	r2, r3, #26
 80038e8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80038ec:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80038f0:	430a      	orrs	r2, r1
 80038f2:	605a      	str	r2, [r3, #4]
 80038f4:	e032      	b.n	800395c <HAL_RCC_OscConfig+0x5be>
 80038f6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80038fa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	061a      	lsls	r2, r3, #24
 800390a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800390e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003912:	430a      	orrs	r2, r1
 8003914:	60da      	str	r2, [r3, #12]
 8003916:	e021      	b.n	800395c <HAL_RCC_OscConfig+0x5be>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003918:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800391c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003926:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800392a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800392e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003930:	f7fe f86e 	bl	8001a10 <HAL_GetTick>
 8003934:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003938:	f7fe f86a 	bl	8001a10 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e30b      	b.n	8003f62 <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800394a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800394e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ed      	bne.n	8003938 <HAL_RCC_OscConfig+0x59a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0308 	and.w	r3, r3, #8
 8003964:	2b00      	cmp	r3, #0
 8003966:	d048      	beq.n	80039fa <HAL_RCC_OscConfig+0x65c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d022      	beq.n	80039b6 <HAL_RCC_OscConfig+0x618>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003970:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003974:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003978:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800397a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800397e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003988:	f7fe f842 	bl	8001a10 <HAL_GetTick>
 800398c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x604>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003990:	f7fe f83e 	bl	8001a10 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e2df      	b.n	8003f62 <HAL_RCC_OscConfig+0xbc4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039a2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80039a6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80039aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0ed      	beq.n	8003990 <HAL_RCC_OscConfig+0x5f2>
 80039b4:	e021      	b.n	80039fa <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80039ba:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80039be:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80039c0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80039c4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80039c8:	f022 0201 	bic.w	r2, r2, #1
 80039cc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ce:	f7fe f81f 	bl	8001a10 <HAL_GetTick>
 80039d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x64a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d6:	f7fe f81b 	bl	8001a10 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x64a>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e2bc      	b.n	8003f62 <HAL_RCC_OscConfig+0xbc4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039e8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80039ec:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80039f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1ed      	bne.n	80039d6 <HAL_RCC_OscConfig+0x638>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d048      	beq.n	8003a98 <HAL_RCC_OscConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d022      	beq.n	8003a54 <HAL_RCC_OscConfig+0x6b6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a0e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003a12:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003a1c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003a20:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a24:	601a      	str	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a26:	f7fd fff3 	bl	8001a10 <HAL_GetTick>
 8003a2a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x6a2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a2e:	f7fd ffef 	bl	8001a10 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x6a2>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e290      	b.n	8003f62 <HAL_RCC_OscConfig+0xbc4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a40:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003a44:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0ed      	beq.n	8003a2e <HAL_RCC_OscConfig+0x690>
 8003a52:	e021      	b.n	8003a98 <HAL_RCC_OscConfig+0x6fa>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a54:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003a58:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003a62:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003a66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a6a:	601a      	str	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a6c:	f7fd ffd0 	bl	8001a10 <HAL_GetTick>
 8003a70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x6e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a74:	f7fd ffcc 	bl	8001a10 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x6e8>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e26d      	b.n	8003f62 <HAL_RCC_OscConfig+0xbc4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a86:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003a8a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1ed      	bne.n	8003a74 <HAL_RCC_OscConfig+0x6d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 80ba 	beq.w	8003c1a <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003aa6:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8003aaa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8003ab4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003ab8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003abc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003abe:	f7fd ffa7 	bl	8001a10 <HAL_GetTick>
 8003ac2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x73a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac6:	f7fd ffa3 	bl	8001a10 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b64      	cmp	r3, #100	@ 0x64
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x73a>
      {
        return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e244      	b.n	8003f62 <HAL_RCC_OscConfig+0xbc4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ad8:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8003adc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0ed      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x728>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d10c      	bne.n	8003b0c <HAL_RCC_OscConfig+0x76e>
 8003af2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003af6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003afa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003afc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b00:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b04:	f042 0201 	orr.w	r2, r2, #1
 8003b08:	671a      	str	r2, [r3, #112]	@ 0x70
 8003b0a:	e051      	b.n	8003bb0 <HAL_RCC_OscConfig+0x812>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d118      	bne.n	8003b46 <HAL_RCC_OscConfig+0x7a8>
 8003b14:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b18:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b1c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b1e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b22:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b26:	f022 0201 	bic.w	r2, r2, #1
 8003b2a:	671a      	str	r2, [r3, #112]	@ 0x70
 8003b2c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b30:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b34:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b36:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b3a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b3e:	f022 0204 	bic.w	r2, r2, #4
 8003b42:	671a      	str	r2, [r3, #112]	@ 0x70
 8003b44:	e034      	b.n	8003bb0 <HAL_RCC_OscConfig+0x812>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b05      	cmp	r3, #5
 8003b4c:	d118      	bne.n	8003b80 <HAL_RCC_OscConfig+0x7e2>
 8003b4e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b52:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b56:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b58:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b5c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b60:	f042 0204 	orr.w	r2, r2, #4
 8003b64:	671a      	str	r2, [r3, #112]	@ 0x70
 8003b66:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b6a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b70:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b74:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b78:	f042 0201 	orr.w	r2, r2, #1
 8003b7c:	671a      	str	r2, [r3, #112]	@ 0x70
 8003b7e:	e017      	b.n	8003bb0 <HAL_RCC_OscConfig+0x812>
 8003b80:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b84:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b88:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b8a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b8e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b92:	f022 0201 	bic.w	r2, r2, #1
 8003b96:	671a      	str	r2, [r3, #112]	@ 0x70
 8003b98:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b9c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003ba0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ba2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003ba6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003baa:	f022 0204 	bic.w	r2, r2, #4
 8003bae:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d018      	beq.n	8003bea <HAL_RCC_OscConfig+0x84c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb8:	f7fd ff2a 	bl	8001a10 <HAL_GetTick>
 8003bbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bbe:	e00a      	b.n	8003bd6 <HAL_RCC_OscConfig+0x838>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc0:	f7fd ff26 	bl	8001a10 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x838>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e1c5      	b.n	8003f62 <HAL_RCC_OscConfig+0xbc4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bd6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003bda:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0eb      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x822>
 8003be8:	e017      	b.n	8003c1a <HAL_RCC_OscConfig+0x87c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bea:	f7fd ff11 	bl	8001a10 <HAL_GetTick>
 8003bee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bf0:	e00a      	b.n	8003c08 <HAL_RCC_OscConfig+0x86a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf2:	f7fd ff0d 	bl	8001a10 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x86a>
        {
          return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e1ac      	b.n	8003f62 <HAL_RCC_OscConfig+0xbc4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c08:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003c0c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1eb      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x854>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 819e 	beq.w	8003f60 <HAL_RCC_OscConfig+0xbc2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c24:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003c28:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c32:	2b18      	cmp	r3, #24
 8003c34:	f000 810e 	beq.w	8003e54 <HAL_RCC_OscConfig+0xab6>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	f040 80e6 	bne.w	8003e0e <HAL_RCC_OscConfig+0xa70>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c42:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003c46:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003c50:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003c54:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8003c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5a:	f7fd fed9 	bl	8001a10 <HAL_GetTick>
 8003c5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x8d6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c62:	f7fd fed5 	bl	8001a10 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x8d6>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e176      	b.n	8003f62 <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c74:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003c78:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1ed      	bne.n	8003c62 <HAL_RCC_OscConfig+0x8c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c86:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003c8a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003c8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c90:	f64f 430c 	movw	r3, #64524	@ 0xfc0c
 8003c94:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 8003c98:	4013      	ands	r3, r2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003ca2:	0112      	lsls	r2, r2, #4
 8003ca4:	4311      	orrs	r1, r2
 8003ca6:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8003caa:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	6293      	str	r3, [r2, #40]	@ 0x28
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	025b      	lsls	r3, r3, #9
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	041b      	lsls	r3, r3, #16
 8003cd0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003cd4:	ea42 0103 	orr.w	r1, r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	061b      	lsls	r3, r3, #24
 8003ce0:	f003 42fe 	and.w	r2, r3, #2130706432	@ 0x7f000000
 8003ce4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003ce8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003cec:	430a      	orrs	r2, r1
 8003cee:	631a      	str	r2, [r3, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003cf0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003cf4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cfa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003cfe:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d08:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003d0c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003d10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d12:	2307      	movs	r3, #7
 8003d14:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 8003d18:	4013      	ands	r3, r2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d1e:	00d1      	lsls	r1, r2, #3
 8003d20:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8003d24:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	6353      	str	r3, [r2, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d2c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003d30:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d36:	f023 010c 	bic.w	r1, r3, #12
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d3e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003d42:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003d46:	430a      	orrs	r2, r1
 8003d48:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d4a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003d4e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d54:	f023 0102 	bic.w	r1, r3, #2
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d5c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003d60:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003d64:	430a      	orrs	r2, r1
 8003d66:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d68:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003d6c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d72:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003d76:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003d7a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d80:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003d84:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d8a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003d8e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003d92:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003d96:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d98:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003d9c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003da6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003daa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003dae:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003db0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003db4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dba:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003dbe:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003dcc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003dd6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003dda:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de0:	f7fd fe16 	bl	8001a10 <HAL_GetTick>
 8003de4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0xa5c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fd fe12 	bl	8001a10 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0xa5c>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e0b3      	b.n	8003f62 <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dfa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003dfe:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0ed      	beq.n	8003de8 <HAL_RCC_OscConfig+0xa4a>
 8003e0c:	e0a8      	b.n	8003f60 <HAL_RCC_OscConfig+0xbc2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e0e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003e12:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003e1c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003e20:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8003e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e26:	f7fd fdf3 	bl	8001a10 <HAL_GetTick>
 8003e2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0xaa2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e2e:	f7fd fdef 	bl	8001a10 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0xaa2>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e090      	b.n	8003f62 <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e40:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003e44:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1ed      	bne.n	8003e2e <HAL_RCC_OscConfig+0xa90>
 8003e52:	e085      	b.n	8003f60 <HAL_RCC_OscConfig+0xbc2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e54:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003e58:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e60:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003e64:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d031      	beq.n	8003ed8 <HAL_RCC_OscConfig+0xb3a>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f003 0203 	and.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d12a      	bne.n	8003ed8 <HAL_RCC_OscConfig+0xb3a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d122      	bne.n	8003ed8 <HAL_RCC_OscConfig+0xb3a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d11a      	bne.n	8003ed8 <HAL_RCC_OscConfig+0xb3a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	0a5b      	lsrs	r3, r3, #9
 8003ea6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d111      	bne.n	8003ed8 <HAL_RCC_OscConfig+0xb3a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	0c1b      	lsrs	r3, r3, #16
 8003eb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d108      	bne.n	8003ed8 <HAL_RCC_OscConfig+0xb3a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	0e1b      	lsrs	r3, r3, #24
 8003eca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_OscConfig+0xb3e>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e042      	b.n	8003f62 <HAL_RCC_OscConfig+0xbc4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003edc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003ee0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee6:	08db      	lsrs	r3, r3, #3
 8003ee8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003eec:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d033      	beq.n	8003f60 <HAL_RCC_OscConfig+0xbc2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003ef8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003efc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f02:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003f06:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003f0a:	f022 0201 	bic.w	r2, r2, #1
 8003f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f10:	f7fd fd7e 	bl	8001a10 <HAL_GetTick>
 8003f14:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003f16:	bf00      	nop
 8003f18:	f7fd fd7a 	bl	8001a10 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d0f9      	beq.n	8003f18 <HAL_RCC_OscConfig+0xb7a>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f24:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003f28:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003f2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f2e:	2307      	movs	r3, #7
 8003f30:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 8003f34:	4013      	ands	r3, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f3a:	00d1      	lsls	r1, r2, #3
 8003f3c:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8003f40:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8003f44:	430b      	orrs	r3, r1
 8003f46:	6353      	str	r3, [r2, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003f48:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003f4c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f52:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003f56:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3730      	adds	r7, #48	@ 0x30
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b086      	sub	sp, #24
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e239      	b.n	80043f2 <HAL_RCC_ClockConfig+0x488>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f82:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d919      	bls.n	8003fc6 <HAL_RCC_ClockConfig+0x5c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f96:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f023 010f 	bic.w	r1, r3, #15
 8003fa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003fa4:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003fb2:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d001      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x5c>
    {
      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e215      	b.n	80043f2 <HAL_RCC_ClockConfig+0x488>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d019      	beq.n	8004006 <HAL_RCC_ClockConfig+0x9c>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003fda:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d90e      	bls.n	8004006 <HAL_RCC_ClockConfig+0x9c>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fe8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003fec:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003ffe:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004002:	430a      	orrs	r2, r1
 8004004:	619a      	str	r2, [r3, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d019      	beq.n	8004046 <HAL_RCC_ClockConfig+0xdc>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800401a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004024:	429a      	cmp	r2, r3
 8004026:	d90e      	bls.n	8004046 <HAL_RCC_ClockConfig+0xdc>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004028:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800402c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695a      	ldr	r2, [r3, #20]
 800403a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800403e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004042:	430a      	orrs	r2, r1
 8004044:	61da      	str	r2, [r3, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	2b00      	cmp	r3, #0
 8004050:	d019      	beq.n	8004086 <HAL_RCC_ClockConfig+0x11c>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800405a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004064:	429a      	cmp	r2, r3
 8004066:	d90e      	bls.n	8004086 <HAL_RCC_ClockConfig+0x11c>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004068:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800406c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800407e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004082:	430a      	orrs	r2, r1
 8004084:	61da      	str	r2, [r3, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	2b00      	cmp	r3, #0
 8004090:	d019      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x15c>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69da      	ldr	r2, [r3, #28]
 8004096:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800409a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d90e      	bls.n	80040c6 <HAL_RCC_ClockConfig+0x15c>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80040a8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80040ac:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69da      	ldr	r2, [r3, #28]
 80040ba:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80040be:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80040c2:	430a      	orrs	r2, r1
 80040c4:	621a      	str	r2, [r3, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d019      	beq.n	8004106 <HAL_RCC_ClockConfig+0x19c>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80040da:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d90e      	bls.n	8004106 <HAL_RCC_ClockConfig+0x19c>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80040ec:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	f023 010f 	bic.w	r1, r3, #15
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80040fe:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004102:	430a      	orrs	r2, r1
 8004104:	619a      	str	r2, [r3, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d070      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004112:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004116:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004128:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800412c:	430a      	orrs	r2, r1
 800412e:	619a      	str	r2, [r3, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b02      	cmp	r3, #2
 8004136:	d10a      	bne.n	800414e <HAL_RCC_ClockConfig+0x1e4>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004138:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800413c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d12a      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x236>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e151      	b.n	80043f2 <HAL_RCC_ClockConfig+0x488>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d10a      	bne.n	800416c <HAL_RCC_ClockConfig+0x202>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004156:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800415a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d11b      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x236>
      {
        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e142      	b.n	80043f2 <HAL_RCC_ClockConfig+0x488>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d10a      	bne.n	800418a <HAL_RCC_ClockConfig+0x220>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004174:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004178:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10c      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x236>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e133      	b.n	80043f2 <HAL_RCC_ClockConfig+0x488>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800418a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800418e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x236>
      {
        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e128      	b.n	80043f2 <HAL_RCC_ClockConfig+0x488>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041a0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80041a4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f023 0107 	bic.w	r1, r3, #7
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80041b6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80041ba:	430a      	orrs	r2, r1
 80041bc:	611a      	str	r2, [r3, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041be:	f7fd fc27 	bl	8001a10 <HAL_GetTick>
 80041c2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c4:	e00a      	b.n	80041dc <HAL_RCC_ClockConfig+0x272>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c6:	f7fd fc23 	bl	8001a10 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_ClockConfig+0x272>
      {
        return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e10a      	b.n	80043f2 <HAL_RCC_ClockConfig+0x488>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041dc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80041e0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d1e8      	bne.n	80041c6 <HAL_RCC_ClockConfig+0x25c>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d019      	beq.n	8004234 <HAL_RCC_ClockConfig+0x2ca>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004208:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	429a      	cmp	r2, r3
 8004214:	d20e      	bcs.n	8004234 <HAL_RCC_ClockConfig+0x2ca>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004216:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800421a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	f023 010f 	bic.w	r1, r3, #15
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800422c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004230:	430a      	orrs	r2, r1
 8004232:	619a      	str	r2, [r3, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004234:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004238:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	429a      	cmp	r2, r3
 8004246:	d219      	bcs.n	800427c <HAL_RCC_ClockConfig+0x312>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004248:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800424c:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f023 010f 	bic.w	r1, r3, #15
 8004256:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800425a:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004264:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004268:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d001      	beq.n	800427c <HAL_RCC_ClockConfig+0x312>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0ba      	b.n	80043f2 <HAL_RCC_ClockConfig+0x488>
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d019      	beq.n	80042bc <HAL_RCC_ClockConfig+0x352>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004290:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800429a:	429a      	cmp	r2, r3
 800429c:	d20e      	bcs.n	80042bc <HAL_RCC_ClockConfig+0x352>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800429e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80042a2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80042b4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80042b8:	430a      	orrs	r2, r1
 80042ba:	619a      	str	r2, [r3, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d019      	beq.n	80042fc <HAL_RCC_ClockConfig+0x392>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	695a      	ldr	r2, [r3, #20]
 80042cc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80042d0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042da:	429a      	cmp	r2, r3
 80042dc:	d20e      	bcs.n	80042fc <HAL_RCC_ClockConfig+0x392>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042de:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80042e2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80042f4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80042f8:	430a      	orrs	r2, r1
 80042fa:	61da      	str	r2, [r3, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b00      	cmp	r3, #0
 8004306:	d019      	beq.n	800433c <HAL_RCC_ClockConfig+0x3d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699a      	ldr	r2, [r3, #24]
 800430c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004310:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800431a:	429a      	cmp	r2, r3
 800431c:	d20e      	bcs.n	800433c <HAL_RCC_ClockConfig+0x3d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800431e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004322:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	699a      	ldr	r2, [r3, #24]
 8004330:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004334:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004338:	430a      	orrs	r2, r1
 800433a:	61da      	str	r2, [r3, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	2b00      	cmp	r3, #0
 8004346:	d019      	beq.n	800437c <HAL_RCC_ClockConfig+0x412>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69da      	ldr	r2, [r3, #28]
 800434c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004350:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800435a:	429a      	cmp	r2, r3
 800435c:	d20e      	bcs.n	800437c <HAL_RCC_ClockConfig+0x412>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800435e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004362:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004374:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004378:	430a      	orrs	r2, r1
 800437a:	621a      	str	r2, [r3, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800437c:	f000 f83e 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 8004380:	4601      	mov	r1, r0
 8004382:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004386:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	0a1b      	lsrs	r3, r3, #8
 800438e:	f003 020f 	and.w	r2, r3, #15
 8004392:	f649 0348 	movw	r3, #38984	@ 0x9848
 8004396:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800439a:	5c9b      	ldrb	r3, [r3, r2]
 800439c:	f003 031f 	and.w	r3, r3, #31
 80043a0:	fa21 f303 	lsr.w	r3, r1, r3
 80043a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043a6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80043aa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	f003 020f 	and.w	r2, r3, #15
 80043b4:	f649 0348 	movw	r3, #38984	@ 0x9848
 80043b8:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80043bc:	5c9b      	ldrb	r3, [r3, r2]
 80043be:	f003 031f 	and.w	r3, r3, #31
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	40da      	lsrs	r2, r3
 80043c6:	f240 0304 	movw	r3, #4
 80043ca:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80043ce:	601a      	str	r2, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043d0:	f240 0300 	movw	r3, #0
 80043d4:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80043dc:	f240 0308 	movw	r3, #8
 80043e0:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fd fabe 	bl	8001968 <HAL_InitTick>
 80043ec:	4603      	mov	r3, r0
 80043ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b089      	sub	sp, #36	@ 0x24
 8004400:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004402:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004406:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004410:	2b18      	cmp	r3, #24
 8004412:	f200 81a5 	bhi.w	8004760 <HAL_RCC_GetSysClockFreq+0x364>
 8004416:	a201      	add	r2, pc, #4	@ (adr r2, 800441c <HAL_RCC_GetSysClockFreq+0x20>)
 8004418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441c:	08004481 	.word	0x08004481
 8004420:	08004761 	.word	0x08004761
 8004424:	08004761 	.word	0x08004761
 8004428:	08004761 	.word	0x08004761
 800442c:	08004761 	.word	0x08004761
 8004430:	08004761 	.word	0x08004761
 8004434:	08004761 	.word	0x08004761
 8004438:	08004761 	.word	0x08004761
 800443c:	080044bd 	.word	0x080044bd
 8004440:	08004761 	.word	0x08004761
 8004444:	08004761 	.word	0x08004761
 8004448:	08004761 	.word	0x08004761
 800444c:	08004761 	.word	0x08004761
 8004450:	08004761 	.word	0x08004761
 8004454:	08004761 	.word	0x08004761
 8004458:	08004761 	.word	0x08004761
 800445c:	080044c9 	.word	0x080044c9
 8004460:	08004761 	.word	0x08004761
 8004464:	08004761 	.word	0x08004761
 8004468:	08004761 	.word	0x08004761
 800446c:	08004761 	.word	0x08004761
 8004470:	08004761 	.word	0x08004761
 8004474:	08004761 	.word	0x08004761
 8004478:	08004761 	.word	0x08004761
 800447c:	080044d5 	.word	0x080044d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004480:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004484:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00e      	beq.n	80044b0 <HAL_RCC_GetSysClockFreq+0xb4>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004492:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004496:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	08db      	lsrs	r3, r3, #3
 800449e:	f003 0203 	and.w	r2, r3, #3
 80044a2:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80044a6:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 80044aa:	40d3      	lsrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80044ae:	e15d      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x370>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80044b0:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80044b4:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 80044b8:	61bb      	str	r3, [r7, #24]
      break;
 80044ba:	e157      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x370>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80044bc:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80044c0:	f2c0 033d 	movt	r3, #61	@ 0x3d
 80044c4:	61bb      	str	r3, [r7, #24]
      break;
 80044c6:	e151      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x370>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80044c8:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 80044cc:	f2c0 037a 	movt	r3, #122	@ 0x7a
 80044d0:	61bb      	str	r3, [r7, #24]
      break;
 80044d2:	e14b      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x370>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044d4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80044d8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80044dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80044e4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80044e8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80044ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ee:	091b      	lsrs	r3, r3, #4
 80044f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044f4:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80044f6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80044fa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80044fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004506:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800450a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800450e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004510:	08db      	lsrs	r3, r3, #3
 8004512:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	fb02 f303 	mul.w	r3, r2, r3
 800451c:	ee07 3a90 	vmov	s15, r3
 8004520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004524:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 8115 	beq.w	800475a <HAL_RCC_GetSysClockFreq+0x35e>
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	2b02      	cmp	r3, #2
 8004534:	f000 80a2 	beq.w	800467c <HAL_RCC_GetSysClockFreq+0x280>
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2b02      	cmp	r3, #2
 800453c:	f200 80c9 	bhi.w	80046d2 <HAL_RCC_GetSysClockFreq+0x2d6>
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_RCC_GetSysClockFreq+0x152>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d06c      	beq.n	8004626 <HAL_RCC_GetSysClockFreq+0x22a>
 800454c:	e0c1      	b.n	80046d2 <HAL_RCC_GetSysClockFreq+0x2d6>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800454e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004552:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	2b00      	cmp	r3, #0
 800455e:	d037      	beq.n	80045d0 <HAL_RCC_GetSysClockFreq+0x1d4>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004560:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004564:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	08db      	lsrs	r3, r3, #3
 800456c:	f003 0203 	and.w	r2, r3, #3
 8004570:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8004574:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8004578:	40d3      	lsrs	r3, r2
 800457a:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	ee07 3a90 	vmov	s15, r3
 800458c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004594:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004598:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800459c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ae:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 80045b2:	ee05 3a90 	vmov	s11, r3
 80045b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80045ce:	e0ab      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x32c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045da:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80045de:	f6c4 4374 	movt	r3, #19572	@ 0x4c74
 80045e2:	ee06 3a90 	vmov	s13, r3
 80045e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ea:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80045ee:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80045f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f8:	ee07 3a90 	vmov	s15, r3
 80045fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004600:	ed97 6a02 	vldr	s12, [r7, #8]
 8004604:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8004608:	ee05 3a90 	vmov	s11, r3
 800460c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004610:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004614:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004618:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800461c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004620:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004624:	e080      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x32c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	ee07 3a90 	vmov	s15, r3
 800462c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004630:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8004634:	f6c4 2374 	movt	r3, #19060	@ 0x4a74
 8004638:	ee06 3a90 	vmov	s13, r3
 800463c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004640:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004644:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004656:	ed97 6a02 	vldr	s12, [r7, #8]
 800465a:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 800465e:	ee05 3a90 	vmov	s11, r3
 8004662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800466e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004676:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800467a:	e055      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x32c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004686:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800468a:	f6c4 23f4 	movt	r3, #19188	@ 0x4af4
 800468e:	ee06 3a90 	vmov	s13, r3
 8004692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004696:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800469a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800469e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a4:	ee07 3a90 	vmov	s15, r3
 80046a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80046b0:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 80046b4:	ee05 3a90 	vmov	s11, r3
 80046b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046cc:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046d0:	e02a      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x32c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	ee07 3a90 	vmov	s15, r3
 80046d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046dc:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80046e0:	f6c4 2374 	movt	r3, #19060	@ 0x4a74
 80046e4:	ee06 3a90 	vmov	s13, r3
 80046e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ec:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80046f0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80046f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004702:	ed97 6a02 	vldr	s12, [r7, #8]
 8004706:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 800470a:	ee05 3a90 	vmov	s11, r3
 800470e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004716:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800471a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004722:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004726:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004728:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800472c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004732:	0a5b      	lsrs	r3, r3, #9
 8004734:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004738:	3301      	adds	r3, #1
 800473a:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004746:	edd7 6a07 	vldr	s13, [r7, #28]
 800474a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800474e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004752:	ee17 3a90 	vmov	r3, s15
 8004756:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004758:	e008      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x370>
        sysclockfreq = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	61bb      	str	r3, [r7, #24]
      break;
 800475e:	e005      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x370>

    default:
      sysclockfreq = CSI_VALUE;
 8004760:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8004764:	f2c0 033d 	movt	r3, #61	@ 0x3d
 8004768:	61bb      	str	r3, [r7, #24]
      break;
 800476a:	bf00      	nop
  }

  return sysclockfreq;
 800476c:	69bb      	ldr	r3, [r7, #24]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3724      	adds	r7, #36	@ 0x24
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop

0800477c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004782:	f7ff fe3b 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 8004786:	4601      	mov	r1, r0
 8004788:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800478c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	f003 020f 	and.w	r2, r3, #15
 8004798:	f649 0348 	movw	r3, #38984	@ 0x9848
 800479c:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80047a0:	5c9b      	ldrb	r3, [r3, r2]
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	fa21 f303 	lsr.w	r3, r1, r3
 80047aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047ac:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80047b0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	f003 020f 	and.w	r2, r3, #15
 80047ba:	f649 0348 	movw	r3, #38984	@ 0x9848
 80047be:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80047c2:	5c9b      	ldrb	r3, [r3, r2]
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	40da      	lsrs	r2, r3
 80047cc:	f240 0304 	movw	r3, #4
 80047d0:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80047d4:	601a      	str	r2, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047d6:	f240 0300 	movw	r3, #0
 80047da:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047e2:	f240 0304 	movw	r3, #4
 80047e6:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80047ea:	681b      	ldr	r3, [r3, #0]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047f8:	f7ff ffc0 	bl	800477c <HAL_RCC_GetHCLKFreq>
 80047fc:	4601      	mov	r1, r0
 80047fe:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004802:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	091b      	lsrs	r3, r3, #4
 800480a:	f003 0207 	and.w	r2, r3, #7
 800480e:	f649 0348 	movw	r3, #38984	@ 0x9848
 8004812:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8004816:	5c9b      	ldrb	r3, [r3, r2]
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004820:	4618      	mov	r0, r3
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004828:	f7ff ffa8 	bl	800477c <HAL_RCC_GetHCLKFreq>
 800482c:	4601      	mov	r1, r0
 800482e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004832:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	0a1b      	lsrs	r3, r3, #8
 800483a:	f003 0207 	and.w	r2, r3, #7
 800483e:	f649 0348 	movw	r3, #38984	@ 0x9848
 8004842:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8004846:	5c9b      	ldrb	r3, [r3, r2]
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004850:	4618      	mov	r0, r3
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004858:	b0ca      	sub	sp, #296	@ 0x128
 800485a:	af00      	add	r7, sp, #0
 800485c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004860:	2300      	movs	r3, #0
 8004862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004866:	2300      	movs	r3, #0
 8004868:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800486c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004874:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004878:	2500      	movs	r5, #0
 800487a:	ea54 0305 	orrs.w	r3, r4, r5
 800487e:	d055      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004884:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004886:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800488a:	d035      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800488c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004890:	d82e      	bhi.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8004892:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004896:	d020      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x86>
 8004898:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800489c:	d828      	bhi.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80048a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048a6:	d00d      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80048a8:	e022      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048aa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80048ae:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80048b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b4:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80048b8:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80048bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048c2:	e01a      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xa6>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c8:	3308      	adds	r3, #8
 80048ca:	2102      	movs	r1, #2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f002 fe41 	bl	8007554 <RCCEx_PLL2_Config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048d8:	e00f      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xa6>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048de:	3328      	adds	r3, #40	@ 0x28
 80048e0:	2102      	movs	r1, #2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f002 ff34 	bl	8007750 <RCCEx_PLL3_Config>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048ee:	e004      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xa6>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048f6:	e000      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xa6>
        break;
 80048f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d110      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004902:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004906:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800490a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800490c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004914:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004916:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 800491a:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 800491e:	430b      	orrs	r3, r1
 8004920:	6513      	str	r3, [r2, #80]	@ 0x50
 8004922:	e003      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004928:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800492c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004934:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004938:	f04f 0900 	mov.w	r9, #0
 800493c:	ea58 0309 	orrs.w	r3, r8, r9
 8004940:	d053      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004948:	2b04      	cmp	r3, #4
 800494a:	d830      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800494c:	a201      	add	r2, pc, #4	@ (adr r2, 8004954 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800494e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004952:	bf00      	nop
 8004954:	08004969 	.word	0x08004969
 8004958:	08004983 	.word	0x08004983
 800495c:	08004999 	.word	0x08004999
 8004960:	080049b7 	.word	0x080049b7
 8004964:	080049b7 	.word	0x080049b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004968:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800496c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004972:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004976:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 800497a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800497e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004980:	e01a      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x164>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004986:	3308      	adds	r3, #8
 8004988:	2100      	movs	r1, #0
 800498a:	4618      	mov	r0, r3
 800498c:	f002 fde2 	bl	8007554 <RCCEx_PLL2_Config>
 8004990:	4603      	mov	r3, r0
 8004992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004996:	e00f      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x164>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499c:	3328      	adds	r3, #40	@ 0x28
 800499e:	2100      	movs	r1, #0
 80049a0:	4618      	mov	r0, r3
 80049a2:	f002 fed5 	bl	8007750 <RCCEx_PLL3_Config>
 80049a6:	4603      	mov	r3, r0
 80049a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049ac:	e004      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x164>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049b4:	e000      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x164>
        break;
 80049b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d110      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049c0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80049c4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80049c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ca:	f023 0107 	bic.w	r1, r3, #7
 80049ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d4:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80049d8:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80049dc:	430b      	orrs	r3, r1
 80049de:	6513      	str	r3, [r2, #80]	@ 0x50
 80049e0:	e003      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x196>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80049ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80049f6:	f04f 0b00 	mov.w	fp, #0
 80049fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80049fe:	d058      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a0a:	d036      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x226>
 8004a0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a10:	d82f      	bhi.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004a12:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a14:	d033      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a16:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a18:	d82b      	bhi.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004a1a:	2b80      	cmp	r3, #128	@ 0x80
 8004a1c:	d01e      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004a1e:	2b80      	cmp	r3, #128	@ 0x80
 8004a20:	d827      	bhi.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004a26:	2b40      	cmp	r3, #64	@ 0x40
 8004a28:	d00d      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8004a2a:	e022      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a2c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004a30:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a36:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004a3a:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004a3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a44:	e01c      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x22c>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f002 fd80 	bl	8007554 <RCCEx_PLL2_Config>
 8004a54:	4603      	mov	r3, r0
 8004a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a5a:	e011      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x22c>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a60:	3328      	adds	r3, #40	@ 0x28
 8004a62:	2100      	movs	r1, #0
 8004a64:	4618      	mov	r0, r3
 8004a66:	f002 fe73 	bl	8007750 <RCCEx_PLL3_Config>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a70:	e006      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x22c>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a78:	e002      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x22c>
        break;
 8004a7a:	bf00      	nop
 8004a7c:	e000      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x22c>
        break;
 8004a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d110      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x256>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004a88:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004a8c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a92:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a9c:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004aa0:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004aa4:	430b      	orrs	r3, r1
 8004aa6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004aa8:	e003      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aba:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004abe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004ac8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004acc:	460b      	mov	r3, r1
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	d05f      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004ada:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ade:	d03b      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004ae0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ae4:	d834      	bhi.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004ae6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004aea:	d037      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004aec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004af0:	d82e      	bhi.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004af2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004af6:	d020      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8004af8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004afc:	d828      	bhi.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8004b02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b06:	d00d      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004b08:	e022      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b0a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004b0e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b14:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004b18:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b22:	e01c      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x30a>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b28:	3308      	adds	r3, #8
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f002 fd11 	bl	8007554 <RCCEx_PLL2_Config>
 8004b32:	4603      	mov	r3, r0
 8004b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004b38:	e011      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x30a>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3e:	3328      	adds	r3, #40	@ 0x28
 8004b40:	2100      	movs	r1, #0
 8004b42:	4618      	mov	r0, r3
 8004b44:	f002 fe04 	bl	8007750 <RCCEx_PLL3_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b4e:	e006      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x30a>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b56:	e002      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x30a>
        break;
 8004b58:	bf00      	nop
 8004b5a:	e000      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x30a>
        break;
 8004b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d111      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b66:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004b6a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b70:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b7c:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004b80:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004b84:	430b      	orrs	r3, r1
 8004b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b88:	e003      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004b9e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004ba8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004bac:	460b      	mov	r3, r1
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	d05f      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004bba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004bbe:	d03b      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004bc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004bc4:	d834      	bhi.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8004bc6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004bca:	d037      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004bcc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004bd0:	d82e      	bhi.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8004bd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bd6:	d020      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8004bd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bdc:	d828      	bhi.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x396>
 8004be2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004be6:	d00d      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8004be8:	e022      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bea:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004bee:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf4:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004bf8:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c02:	e01c      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c08:	3308      	adds	r3, #8
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f002 fca1 	bl	8007554 <RCCEx_PLL2_Config>
 8004c12:	4603      	mov	r3, r0
 8004c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004c18:	e011      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1e:	3328      	adds	r3, #40	@ 0x28
 8004c20:	2100      	movs	r1, #0
 8004c22:	4618      	mov	r0, r3
 8004c24:	f002 fd94 	bl	8007750 <RCCEx_PLL3_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c2e:	e006      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c36:	e002      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        break;
 8004c38:	bf00      	nop
 8004c3a:	e000      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        break;
 8004c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d111      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004c46:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004c4a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c50:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004c5c:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004c60:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004c64:	430b      	orrs	r3, r1
 8004c66:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c68:	e003      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x41e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004c7e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004c82:	2300      	movs	r3, #0
 8004c84:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004c88:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	d046      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c98:	2b30      	cmp	r3, #48	@ 0x30
 8004c9a:	d025      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004c9c:	2b30      	cmp	r3, #48	@ 0x30
 8004c9e:	d81f      	bhi.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	d012      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	d81b      	bhi.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01f      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004cac:	2b10      	cmp	r3, #16
 8004cae:	d117      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004cb4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cba:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004cbe:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004cc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004cc8:	e011      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x49a>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cce:	3308      	adds	r3, #8
 8004cd0:	2102      	movs	r1, #2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f002 fc3e 	bl	8007554 <RCCEx_PLL2_Config>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004cde:	e006      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x49a>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ce6:	e002      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x49a>
        break;
 8004ce8:	bf00      	nop
 8004cea:	e000      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x49a>
        break;
 8004cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d110      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004cf6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004cfa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d00:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d0a:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004d0e:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004d12:	430b      	orrs	r3, r1
 8004d14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d16:	e003      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004d2c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004d30:	2300      	movs	r3, #0
 8004d32:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004d36:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	d05d      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d4a:	d03b      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8004d4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d50:	d834      	bhi.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x568>
 8004d52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d56:	d037      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8004d58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d5c:	d82e      	bhi.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x568>
 8004d5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d62:	d020      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x552>
 8004d64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d68:	d828      	bhi.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x568>
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d72:	d00d      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8004d74:	e022      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x568>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d76:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004d7a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d80:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004d84:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d8e:	e01c      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x576>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d94:	3308      	adds	r3, #8
 8004d96:	2100      	movs	r1, #0
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f002 fbdb 	bl	8007554 <RCCEx_PLL2_Config>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004da4:	e011      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x576>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004daa:	3328      	adds	r3, #40	@ 0x28
 8004dac:	2100      	movs	r1, #0
 8004dae:	4618      	mov	r0, r3
 8004db0:	f002 fcce 	bl	8007750 <RCCEx_PLL3_Config>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004dba:	e006      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x576>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dc2:	e002      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x576>
        break;
 8004dc4:	bf00      	nop
 8004dc6:	e000      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x576>
        break;
 8004dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d110      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004dd2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004dd6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ddc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004de6:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004dea:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004dee:	430b      	orrs	r3, r1
 8004df0:	6513      	str	r3, [r2, #80]	@ 0x50
 8004df2:	e003      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004df8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004e08:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004e12:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004e16:	460b      	mov	r3, r1
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	d059      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e22:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e26:	d033      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8004e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e2c:	d82c      	bhi.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004e2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e32:	d02f      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8004e34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e38:	d826      	bhi.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004e3a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e3e:	d02b      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x644>
 8004e40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e44:	d820      	bhi.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004e46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e4a:	d012      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x61e>
 8004e4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e50:	d81a      	bhi.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d022      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004e56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e5a:	d115      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x634>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e60:	3308      	adds	r3, #8
 8004e62:	2101      	movs	r1, #1
 8004e64:	4618      	mov	r0, r3
 8004e66:	f002 fb75 	bl	8007554 <RCCEx_PLL2_Config>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004e70:	e015      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x64a>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e76:	3328      	adds	r3, #40	@ 0x28
 8004e78:	2101      	movs	r1, #1
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f002 fc68 	bl	8007750 <RCCEx_PLL3_Config>
 8004e80:	4603      	mov	r3, r0
 8004e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004e86:	e00a      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x64a>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e8e:	e006      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x64a>
        break;
 8004e90:	bf00      	nop
 8004e92:	e004      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x64a>
        break;
 8004e94:	bf00      	nop
 8004e96:	e002      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x64a>
        break;
 8004e98:	bf00      	nop
 8004e9a:	e000      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x64a>
        break;
 8004e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d110      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ea6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004eaa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eb0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004eba:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004ebe:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004ec2:	430b      	orrs	r3, r1
 8004ec4:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ec6:	e003      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ecc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004edc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ee6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4313      	orrs	r3, r2
 8004eee:	d05b      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x754>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004efc:	d033      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x712>
 8004efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f02:	d82c      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8004f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f08:	d02f      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x716>
 8004f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f0e:	d826      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8004f10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f14:	d02b      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x71a>
 8004f16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f1a:	d820      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8004f1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f20:	d012      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8004f22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f26:	d81a      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d022      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8004f2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f30:	d115      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f36:	3308      	adds	r3, #8
 8004f38:	2101      	movs	r1, #1
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f002 fb0a 	bl	8007554 <RCCEx_PLL2_Config>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f46:	e015      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x720>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4c:	3328      	adds	r3, #40	@ 0x28
 8004f4e:	2101      	movs	r1, #1
 8004f50:	4618      	mov	r0, r3
 8004f52:	f002 fbfd 	bl	8007750 <RCCEx_PLL3_Config>
 8004f56:	4603      	mov	r3, r0
 8004f58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f5c:	e00a      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x720>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f64:	e006      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x720>
        break;
 8004f66:	bf00      	nop
 8004f68:	e004      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x720>
        break;
 8004f6a:	bf00      	nop
 8004f6c:	e002      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x720>
        break;
 8004f6e:	bf00      	nop
 8004f70:	e000      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x720>
        break;
 8004f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d111      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f7c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004f80:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f86:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f92:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004f96:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004f9a:	430b      	orrs	r3, r1
 8004f9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f9e:	e003      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x754>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004fb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004fbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	d043      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fd2:	d014      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8004fd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fd8:	d81c      	bhi.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01e      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8004fde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fe2:	d117      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fe4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004fe8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fee:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004ff2:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004ff6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004ffc:	e00f      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x7ca>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005002:	3308      	adds	r3, #8
 8005004:	2101      	movs	r1, #1
 8005006:	4618      	mov	r0, r3
 8005008:	f002 faa4 	bl	8007554 <RCCEx_PLL2_Config>
 800500c:	4603      	mov	r3, r0
 800500e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005012:	e004      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x7ca>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800501a:	e000      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x7ca>
        break;
 800501c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800501e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005022:	2b00      	cmp	r3, #0
 8005024:	d110      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005026:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800502a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800502e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005030:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503a:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 800503e:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005042:	430b      	orrs	r3, r1
 8005044:	6513      	str	r3, [r2, #80]	@ 0x50
 8005046:	e003      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800504c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005058:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800505c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005060:	2300      	movs	r3, #0
 8005062:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005066:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800506a:	460b      	mov	r3, r1
 800506c:	4313      	orrs	r3, r2
 800506e:	d045      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005076:	2b03      	cmp	r3, #3
 8005078:	d822      	bhi.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800507a:	a201      	add	r2, pc, #4	@ (adr r2, 8005080 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 800507c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005080:	080050c9 	.word	0x080050c9
 8005084:	08005091 	.word	0x08005091
 8005088:	080050ab 	.word	0x080050ab
 800508c:	080050c9 	.word	0x080050c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005090:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005094:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509a:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 800509e:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80050a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80050a8:	e00f      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x876>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ae:	3308      	adds	r3, #8
 80050b0:	2102      	movs	r1, #2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f002 fa4e 	bl	8007554 <RCCEx_PLL2_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80050be:	e004      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x876>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050c6:	e000      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x876>
        break;
 80050c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d110      	bne.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80050d2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80050d6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80050da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050dc:	f023 0103 	bic.w	r1, r3, #3
 80050e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050e6:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80050ea:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80050ee:	430b      	orrs	r3, r1
 80050f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050f2:	e003      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005108:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800510c:	2300      	movs	r3, #0
 800510e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005112:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005116:	460b      	mov	r3, r1
 8005118:	4313      	orrs	r3, r2
 800511a:	f000 80d0 	beq.w	80052be <HAL_RCCEx_PeriphCLKConfig+0xa6a>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800511e:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8005122:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f44f 4290 	mov.w	r2, #18432	@ 0x4800
 800512c:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005134:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005136:	f7fc fc6b 	bl	8001a10 <HAL_GetTick>
 800513a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800513e:	e00b      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x904>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005140:	f7fc fc66 	bl	8001a10 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b64      	cmp	r3, #100	@ 0x64
 800514e:	d903      	bls.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x904>
      {
        ret = HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005156:	e008      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x916>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005158:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800515c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0ea      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      }
    }

    if (ret == HAL_OK)
 800516a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800516e:	2b00      	cmp	r3, #0
 8005170:	f040 80a1 	bne.w	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005174:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005178:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800517c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800517e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005182:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005186:	4053      	eors	r3, r2
 8005188:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800518c:	2b00      	cmp	r3, #0
 800518e:	d027      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005190:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005194:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800519e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051a2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80051a6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80051aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ac:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80051b0:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80051b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051b8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051ba:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80051be:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80051c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c4:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80051c8:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80051cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051d0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80051d2:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80051d6:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80051da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051de:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80051e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051ec:	d11b      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ee:	f7fc fc0f 	bl	8001a10 <HAL_GetTick>
 80051f2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051f6:	e00d      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f8:	f7fc fc0a 	bl	8001a10 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005202:	1ad2      	subs	r2, r2, r3
 8005204:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005208:	429a      	cmp	r2, r3
 800520a:	d903      	bls.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
          {
            ret = HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005212:	e008      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005214:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005218:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800521c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0e8      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
          }
        }
      }

      if (ret == HAL_OK)
 8005226:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800522a:	2b00      	cmp	r3, #0
 800522c:	d13e      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800522e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005232:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800523a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800523e:	d117      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8005240:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005244:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800524e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005252:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005256:	091a      	lsrs	r2, r3, #4
 8005258:	f64f 73cf 	movw	r3, #65487	@ 0xffcf
 800525c:	f2c0 03ff 	movt	r3, #255	@ 0xff
 8005260:	4013      	ands	r3, r2
 8005262:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005266:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 800526a:	430b      	orrs	r3, r1
 800526c:	6113      	str	r3, [r2, #16]
 800526e:	e00b      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005270:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005274:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 800527e:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005282:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005286:	6113      	str	r3, [r2, #16]
 8005288:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800528c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005290:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005296:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800529a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800529e:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80052a2:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80052a6:	430b      	orrs	r3, r1
 80052a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80052aa:	e008      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xa6a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80052b4:	e003      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xa6a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80052be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c6:	f002 0301 	and.w	r3, r2, #1
 80052ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052ce:	2300      	movs	r3, #0
 80052d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80052d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80052d8:	460b      	mov	r3, r1
 80052da:	4313      	orrs	r3, r2
 80052dc:	f000 808e 	beq.w	80053fc <HAL_RCCEx_PeriphCLKConfig+0xba8>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80052e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052e6:	2b28      	cmp	r3, #40	@ 0x28
 80052e8:	d86a      	bhi.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xb6c>
 80052ea:	a201      	add	r2, pc, #4	@ (adr r2, 80052f0 <HAL_RCCEx_PeriphCLKConfig+0xa9c>)
 80052ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f0:	080053c9 	.word	0x080053c9
 80052f4:	080053c1 	.word	0x080053c1
 80052f8:	080053c1 	.word	0x080053c1
 80052fc:	080053c1 	.word	0x080053c1
 8005300:	080053c1 	.word	0x080053c1
 8005304:	080053c1 	.word	0x080053c1
 8005308:	080053c1 	.word	0x080053c1
 800530c:	080053c1 	.word	0x080053c1
 8005310:	08005395 	.word	0x08005395
 8005314:	080053c1 	.word	0x080053c1
 8005318:	080053c1 	.word	0x080053c1
 800531c:	080053c1 	.word	0x080053c1
 8005320:	080053c1 	.word	0x080053c1
 8005324:	080053c1 	.word	0x080053c1
 8005328:	080053c1 	.word	0x080053c1
 800532c:	080053c1 	.word	0x080053c1
 8005330:	080053ab 	.word	0x080053ab
 8005334:	080053c1 	.word	0x080053c1
 8005338:	080053c1 	.word	0x080053c1
 800533c:	080053c1 	.word	0x080053c1
 8005340:	080053c1 	.word	0x080053c1
 8005344:	080053c1 	.word	0x080053c1
 8005348:	080053c1 	.word	0x080053c1
 800534c:	080053c1 	.word	0x080053c1
 8005350:	080053c9 	.word	0x080053c9
 8005354:	080053c1 	.word	0x080053c1
 8005358:	080053c1 	.word	0x080053c1
 800535c:	080053c1 	.word	0x080053c1
 8005360:	080053c1 	.word	0x080053c1
 8005364:	080053c1 	.word	0x080053c1
 8005368:	080053c1 	.word	0x080053c1
 800536c:	080053c1 	.word	0x080053c1
 8005370:	080053c9 	.word	0x080053c9
 8005374:	080053c1 	.word	0x080053c1
 8005378:	080053c1 	.word	0x080053c1
 800537c:	080053c1 	.word	0x080053c1
 8005380:	080053c1 	.word	0x080053c1
 8005384:	080053c1 	.word	0x080053c1
 8005388:	080053c1 	.word	0x080053c1
 800538c:	080053c1 	.word	0x080053c1
 8005390:	080053c9 	.word	0x080053c9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005398:	3308      	adds	r3, #8
 800539a:	2101      	movs	r1, #1
 800539c:	4618      	mov	r0, r3
 800539e:	f002 f8d9 	bl	8007554 <RCCEx_PLL2_Config>
 80053a2:	4603      	mov	r3, r0
 80053a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80053a8:	e00f      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xb76>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ae:	3328      	adds	r3, #40	@ 0x28
 80053b0:	2101      	movs	r1, #1
 80053b2:	4618      	mov	r0, r3
 80053b4:	f002 f9cc 	bl	8007750 <RCCEx_PLL3_Config>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80053be:	e004      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xb76>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053c6:	e000      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xb76>
        break;
 80053c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d110      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80053d2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80053d6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80053da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053dc:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80053e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053e6:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80053ea:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80053ee:	430b      	orrs	r3, r1
 80053f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80053f2:	e003      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xba8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80053fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005404:	f002 0302 	and.w	r3, r2, #2
 8005408:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800540c:	2300      	movs	r3, #0
 800540e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005412:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005416:	460b      	mov	r3, r1
 8005418:	4313      	orrs	r3, r2
 800541a:	d047      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xc58>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800541c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005420:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005422:	2b05      	cmp	r3, #5
 8005424:	d824      	bhi.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
 8005426:	a201      	add	r2, pc, #4	@ (adr r2, 800542c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542c:	08005479 	.word	0x08005479
 8005430:	08005445 	.word	0x08005445
 8005434:	0800545b 	.word	0x0800545b
 8005438:	08005479 	.word	0x08005479
 800543c:	08005479 	.word	0x08005479
 8005440:	08005479 	.word	0x08005479
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005448:	3308      	adds	r3, #8
 800544a:	2101      	movs	r1, #1
 800544c:	4618      	mov	r0, r3
 800544e:	f002 f881 	bl	8007554 <RCCEx_PLL2_Config>
 8005452:	4603      	mov	r3, r0
 8005454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005458:	e00f      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xc26>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800545a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800545e:	3328      	adds	r3, #40	@ 0x28
 8005460:	2101      	movs	r1, #1
 8005462:	4618      	mov	r0, r3
 8005464:	f002 f974 	bl	8007750 <RCCEx_PLL3_Config>
 8005468:	4603      	mov	r3, r0
 800546a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800546e:	e004      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xc26>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005476:	e000      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xc26>
        break;
 8005478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800547a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800547e:	2b00      	cmp	r3, #0
 8005480:	d110      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005482:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005486:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800548a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800548c:	f023 0107 	bic.w	r1, r3, #7
 8005490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005494:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005496:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 800549a:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 800549e:	430b      	orrs	r3, r1
 80054a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80054a2:	e003      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xc58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b4:	f002 0304 	and.w	r3, r2, #4
 80054b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054bc:	2300      	movs	r3, #0
 80054be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054c2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4313      	orrs	r3, r2
 80054ca:	d04a      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80054cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054d4:	2b05      	cmp	r3, #5
 80054d6:	d825      	bhi.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 80054d8:	a201      	add	r2, pc, #4	@ (adr r2, 80054e0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>)
 80054da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054de:	bf00      	nop
 80054e0:	0800552d 	.word	0x0800552d
 80054e4:	080054f9 	.word	0x080054f9
 80054e8:	0800550f 	.word	0x0800550f
 80054ec:	0800552d 	.word	0x0800552d
 80054f0:	0800552d 	.word	0x0800552d
 80054f4:	0800552d 	.word	0x0800552d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054fc:	3308      	adds	r3, #8
 80054fe:	2101      	movs	r1, #1
 8005500:	4618      	mov	r0, r3
 8005502:	f002 f827 	bl	8007554 <RCCEx_PLL2_Config>
 8005506:	4603      	mov	r3, r0
 8005508:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800550c:	e00f      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xcda>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800550e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005512:	3328      	adds	r3, #40	@ 0x28
 8005514:	2101      	movs	r1, #1
 8005516:	4618      	mov	r0, r3
 8005518:	f002 f91a 	bl	8007750 <RCCEx_PLL3_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005522:	e004      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xcda>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800552a:	e000      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xcda>
        break;
 800552c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800552e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005532:	2b00      	cmp	r3, #0
 8005534:	d111      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xd06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005536:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800553a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800553e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005540:	f023 0107 	bic.w	r1, r3, #7
 8005544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005548:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800554c:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005550:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005554:	430b      	orrs	r3, r1
 8005556:	6593      	str	r3, [r2, #88]	@ 0x58
 8005558:	e003      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800555e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556a:	f002 0320 	and.w	r3, r2, #32
 800556e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005572:	2300      	movs	r3, #0
 8005574:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005578:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800557c:	460b      	mov	r3, r1
 800557e:	4313      	orrs	r3, r2
 8005580:	d05b      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800558a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800558e:	d033      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 8005590:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005594:	d82c      	bhi.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
 8005596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800559a:	d02f      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xda8>
 800559c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055a0:	d826      	bhi.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
 80055a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80055a6:	d02b      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80055a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80055ac:	d820      	bhi.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
 80055ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055b2:	d012      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80055b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055b8:	d81a      	bhi.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d022      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 80055be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055c2:	d115      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c8:	3308      	adds	r3, #8
 80055ca:	2100      	movs	r1, #0
 80055cc:	4618      	mov	r0, r3
 80055ce:	f001 ffc1 	bl	8007554 <RCCEx_PLL2_Config>
 80055d2:	4603      	mov	r3, r0
 80055d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80055d8:	e015      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xdb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055de:	3328      	adds	r3, #40	@ 0x28
 80055e0:	2102      	movs	r1, #2
 80055e2:	4618      	mov	r0, r3
 80055e4:	f002 f8b4 	bl	8007750 <RCCEx_PLL3_Config>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80055ee:	e00a      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055f6:	e006      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 80055f8:	bf00      	nop
 80055fa:	e004      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 80055fc:	bf00      	nop
 80055fe:	e002      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 8005600:	bf00      	nop
 8005602:	e000      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 8005604:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005606:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800560a:	2b00      	cmp	r3, #0
 800560c:	d111      	bne.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xdde>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800560e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005612:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005618:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800561c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005624:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005628:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 800562c:	430b      	orrs	r3, r1
 800562e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005630:	e003      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xde6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005636:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800563a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005646:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800564a:	2300      	movs	r3, #0
 800564c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005650:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005654:	460b      	mov	r3, r1
 8005656:	4313      	orrs	r3, r2
 8005658:	d05b      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xebe>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800565a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005662:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005666:	d033      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
 8005668:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800566c:	d82c      	bhi.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800566e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005672:	d02f      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe80>
 8005674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005678:	d826      	bhi.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800567a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800567e:	d02b      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0xe84>
 8005680:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005684:	d820      	bhi.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8005686:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800568a:	d012      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
 800568c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005690:	d81a      	bhi.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8005692:	2b00      	cmp	r3, #0
 8005694:	d022      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xe88>
 8005696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800569a:	d115      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800569c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a0:	3308      	adds	r3, #8
 80056a2:	2100      	movs	r1, #0
 80056a4:	4618      	mov	r0, r3
 80056a6:	f001 ff55 	bl	8007554 <RCCEx_PLL2_Config>
 80056aa:	4603      	mov	r3, r0
 80056ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80056b0:	e015      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xe8a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b6:	3328      	adds	r3, #40	@ 0x28
 80056b8:	2102      	movs	r1, #2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f002 f848 	bl	8007750 <RCCEx_PLL3_Config>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80056c6:	e00a      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xe8a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056ce:	e006      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xe8a>
        break;
 80056d0:	bf00      	nop
 80056d2:	e004      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xe8a>
        break;
 80056d4:	bf00      	nop
 80056d6:	e002      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xe8a>
        break;
 80056d8:	bf00      	nop
 80056da:	e000      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xe8a>
        break;
 80056dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d111      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056e6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80056ea:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80056ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056f0:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80056f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056fc:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005700:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005704:	430b      	orrs	r3, r1
 8005706:	6593      	str	r3, [r2, #88]	@ 0x58
 8005708:	e003      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xebe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800570e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800571e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005722:	2300      	movs	r3, #0
 8005724:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005728:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800572c:	460b      	mov	r3, r1
 800572e:	4313      	orrs	r3, r2
 8005730:	d05b      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0xf96>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005736:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800573a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800573e:	d033      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xf54>
 8005740:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005744:	d82c      	bhi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xf4c>
 8005746:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800574a:	d02f      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xf58>
 800574c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005750:	d826      	bhi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xf4c>
 8005752:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005756:	d02b      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xf5c>
 8005758:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800575c:	d820      	bhi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xf4c>
 800575e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005762:	d012      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xf36>
 8005764:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005768:	d81a      	bhi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xf4c>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d022      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xf60>
 800576e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005772:	d115      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xf4c>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005778:	3308      	adds	r3, #8
 800577a:	2100      	movs	r1, #0
 800577c:	4618      	mov	r0, r3
 800577e:	f001 fee9 	bl	8007554 <RCCEx_PLL2_Config>
 8005782:	4603      	mov	r3, r0
 8005784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005788:	e015      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800578a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578e:	3328      	adds	r3, #40	@ 0x28
 8005790:	2102      	movs	r1, #2
 8005792:	4618      	mov	r0, r3
 8005794:	f001 ffdc 	bl	8007750 <RCCEx_PLL3_Config>
 8005798:	4603      	mov	r3, r0
 800579a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800579e:	e00a      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057a6:	e006      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
        break;
 80057a8:	bf00      	nop
 80057aa:	e004      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
        break;
 80057ac:	bf00      	nop
 80057ae:	e002      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
        break;
 80057b0:	bf00      	nop
 80057b2:	e000      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
        break;
 80057b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d111      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xf8e>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80057be:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80057c2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80057c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80057cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80057d4:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80057d8:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80057dc:	430b      	orrs	r3, r1
 80057de:	6593      	str	r3, [r2, #88]	@ 0x58
 80057e0:	e003      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0xf96>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80057ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f2:	f002 0308 	and.w	r3, r2, #8
 80057f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057fa:	2300      	movs	r3, #0
 80057fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005800:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005804:	460b      	mov	r3, r1
 8005806:	4313      	orrs	r3, r2
 8005808:	d024      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x1000>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800580a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800580e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005816:	d10c      	bne.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0xfde>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581c:	3328      	adds	r3, #40	@ 0x28
 800581e:	2102      	movs	r1, #2
 8005820:	4618      	mov	r0, r3
 8005822:	f001 ff95 	bl	8007750 <RCCEx_PLL3_Config>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0xfde>
      {
        status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005832:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005836:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800583a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800583c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005844:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005848:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 800584c:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005850:	430b      	orrs	r3, r1
 8005852:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585c:	f002 0310 	and.w	r3, r2, #16
 8005860:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005864:	2300      	movs	r3, #0
 8005866:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800586a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800586e:	460b      	mov	r3, r1
 8005870:	4313      	orrs	r3, r2
 8005872:	d024      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x106a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005878:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800587c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005880:	d10c      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x1048>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005886:	3328      	adds	r3, #40	@ 0x28
 8005888:	2102      	movs	r1, #2
 800588a:	4618      	mov	r0, r3
 800588c:	f001 ff60 	bl	8007750 <RCCEx_PLL3_Config>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x1048>
      {
        status = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800589c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80058a0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80058a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058b2:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80058b6:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80058ba:	430b      	orrs	r3, r1
 80058bc:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80058ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058ce:	2300      	movs	r3, #0
 80058d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058d4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80058d8:	460b      	mov	r3, r1
 80058da:	4313      	orrs	r3, r2
 80058dc:	d044      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x1114>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80058de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80058e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058ea:	d022      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x10de>
 80058ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058f0:	d81b      	bhi.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x10d6>
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x10aa>
 80058f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058fa:	d00b      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80058fc:	e015      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x10d6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005902:	3308      	adds	r3, #8
 8005904:	2100      	movs	r1, #0
 8005906:	4618      	mov	r0, r3
 8005908:	f001 fe24 	bl	8007554 <RCCEx_PLL2_Config>
 800590c:	4603      	mov	r3, r0
 800590e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005912:	e00f      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x10e0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005918:	3328      	adds	r3, #40	@ 0x28
 800591a:	2102      	movs	r1, #2
 800591c:	4618      	mov	r0, r3
 800591e:	f001 ff17 	bl	8007750 <RCCEx_PLL3_Config>
 8005922:	4603      	mov	r3, r0
 8005924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005928:	e004      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005930:	e000      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
        break;
 8005932:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005938:	2b00      	cmp	r3, #0
 800593a:	d111      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x110c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800593c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005940:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005946:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800594a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005952:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005956:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 800595a:	430b      	orrs	r3, r1
 800595c:	6593      	str	r3, [r2, #88]	@ 0x58
 800595e:	e003      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x1114>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005964:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005970:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005974:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005976:	2300      	movs	r3, #0
 8005978:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800597a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800597e:	460b      	mov	r3, r1
 8005980:	4313      	orrs	r3, r2
 8005982:	d047      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005990:	d025      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8005992:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005996:	d81e      	bhi.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x1182>
 8005998:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800599c:	d003      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
 800599e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059a2:	d00d      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80059a4:	e017      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x1182>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059a6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80059aa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80059ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b0:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80059b4:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80059b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80059be:	e00f      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x118c>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c4:	3328      	adds	r3, #40	@ 0x28
 80059c6:	2101      	movs	r1, #1
 80059c8:	4618      	mov	r0, r3
 80059ca:	f001 fec1 	bl	8007750 <RCCEx_PLL3_Config>
 80059ce:	4603      	mov	r3, r0
 80059d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80059d4:	e004      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x118c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059dc:	e000      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x118c>
        break;
 80059de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d111      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x11b8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059e8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80059ec:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80059f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80059f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059fe:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005a02:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005a06:	430b      	orrs	r3, r1
 8005a08:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a0a:	e003      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005a20:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a22:	2300      	movs	r3, #0
 8005a24:	677b      	str	r3, [r7, #116]	@ 0x74
 8005a26:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	d03d      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x1258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x11ee>
 8005a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a3e:	d00d      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1208>
 8005a40:	e017      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x121e>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a42:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005a46:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4c:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005a50:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005a5a:	e00e      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x1226>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a60:	3308      	adds	r3, #8
 8005a62:	2102      	movs	r1, #2
 8005a64:	4618      	mov	r0, r3
 8005a66:	f001 fd75 	bl	8007554 <RCCEx_PLL2_Config>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005a70:	e003      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x1226>

      default:
        ret = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d110      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1250>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005a82:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005a86:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a8c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a96:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005a9a:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005a9e:	430b      	orrs	r3, r1
 8005aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005aa2:	e003      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x1258>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005ab8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aba:	2300      	movs	r3, #0
 8005abc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005abe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	d00c      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005acc:	3328      	adds	r3, #40	@ 0x28
 8005ace:	2102      	movs	r1, #2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 fe3d 	bl	8007750 <RCCEx_PLL3_Config>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    {
      status = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005aee:	663b      	str	r3, [r7, #96]	@ 0x60
 8005af0:	2300      	movs	r3, #0
 8005af2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005af4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005af8:	460b      	mov	r3, r1
 8005afa:	4313      	orrs	r3, r2
 8005afc:	d044      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x1334>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b0a:	d01e      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
 8005b0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b10:	d817      	bhi.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8005b12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b16:	d01a      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x12fa>
 8005b18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b1c:	d811      	bhi.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d017      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x12fe>
 8005b22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b26:	d10c      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b28:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005b2c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b32:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005b36:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005b40:	e008      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x1300>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b48:	e004      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x1300>
        break;
 8005b4a:	bf00      	nop
 8005b4c:	e002      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x1300>
        break;
 8005b4e:	bf00      	nop
 8005b50:	e000      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x1300>
        break;
 8005b52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d111      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x132c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b5c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005b60:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b72:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005b76:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005b7a:	430b      	orrs	r3, r1
 8005b7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b7e:	e003      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x1334>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b90:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005b94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b96:	2300      	movs	r3, #0
 8005b98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b9a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	d00f      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ba4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005ba8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bae:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bb8:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005bbc:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005bd0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bd6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	d010      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x13ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005be0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005be4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005bf6:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005bfa:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005bfe:	430b      	orrs	r3, r1
 8005c00:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c10:	2300      	movs	r3, #0
 8005c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c14:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005c18:	460b      	mov	r3, r1
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	d00f      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x13ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c1e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005c22:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c28:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c32:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005c36:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005c3a:	430b      	orrs	r3, r1
 8005c3c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c46:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005c4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c50:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005c54:	460b      	mov	r3, r1
 8005c56:	4313      	orrs	r3, r2
 8005c58:	d01a      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x143c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c5a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005c5e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005c68:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005c6c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c70:	6113      	str	r3, [r2, #16]
 8005c72:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005c76:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005c7a:	6919      	ldr	r1, [r3, #16]
 8005c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c80:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005c84:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005c88:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c98:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ca2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	d00f      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x1478>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005cac:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005cb0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cb6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc0:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005cc4:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005cd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cda:	2300      	movs	r3, #0
 8005cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cde:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	d010      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x14b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ce8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005cec:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cfe:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005d02:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005d06:	430b      	orrs	r3, r1
 8005d08:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d12:	2100      	movs	r1, #0
 8005d14:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d1c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005d20:	460b      	mov	r3, r1
 8005d22:	4313      	orrs	r3, r2
 8005d24:	d011      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x14f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2a:	3308      	adds	r3, #8
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f001 fc10 	bl	8007554 <RCCEx_PLL2_Config>
 8005d34:	4603      	mov	r3, r0
 8005d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x14f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d52:	2100      	movs	r1, #0
 8005d54:	6239      	str	r1, [r7, #32]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d5c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005d60:	460b      	mov	r3, r1
 8005d62:	4313      	orrs	r3, r2
 8005d64:	d011      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x1536>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6a:	3308      	adds	r3, #8
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f001 fbf0 	bl	8007554 <RCCEx_PLL2_Config>
 8005d74:	4603      	mov	r3, r0
 8005d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x1536>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	2100      	movs	r1, #0
 8005d94:	61b9      	str	r1, [r7, #24]
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	61fb      	str	r3, [r7, #28]
 8005d9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005da0:	460b      	mov	r3, r1
 8005da2:	4313      	orrs	r3, r2
 8005da4:	d011      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x1576>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005daa:	3308      	adds	r3, #8
 8005dac:	2102      	movs	r1, #2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f001 fbd0 	bl	8007554 <RCCEx_PLL2_Config>
 8005db4:	4603      	mov	r3, r0
 8005db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x1576>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	6139      	str	r1, [r7, #16]
 8005dd6:	f003 0308 	and.w	r3, r3, #8
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005de0:	460b      	mov	r3, r1
 8005de2:	4313      	orrs	r3, r2
 8005de4:	d011      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x15b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dea:	3328      	adds	r3, #40	@ 0x28
 8005dec:	2100      	movs	r1, #0
 8005dee:	4618      	mov	r0, r3
 8005df0:	f001 fcae 	bl	8007750 <RCCEx_PLL3_Config>
 8005df4:	4603      	mov	r3, r0
 8005df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x15b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e12:	2100      	movs	r1, #0
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	f003 0310 	and.w	r3, r3, #16
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005e20:	460b      	mov	r3, r1
 8005e22:	4313      	orrs	r3, r2
 8005e24:	d011      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x15f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e2a:	3328      	adds	r3, #40	@ 0x28
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f001 fc8e 	bl	8007750 <RCCEx_PLL3_Config>
 8005e34:	4603      	mov	r3, r0
 8005e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x15f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e52:	2100      	movs	r1, #0
 8005e54:	6039      	str	r1, [r7, #0]
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	607b      	str	r3, [r7, #4]
 8005e5c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005e60:	460b      	mov	r3, r1
 8005e62:	4313      	orrs	r3, r2
 8005e64:	d011      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x1636>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6a:	3328      	adds	r3, #40	@ 0x28
 8005e6c:	2102      	movs	r1, #2
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f001 fc6e 	bl	8007750 <RCCEx_PLL3_Config>
 8005e74:	4603      	mov	r3, r0
 8005e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x1636>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005e8a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x1642>
  {
    return HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	e000      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1644>
  }
  return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005ea4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b090      	sub	sp, #64	@ 0x40
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005eae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eb2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005eb6:	430b      	orrs	r3, r1
 8005eb8:	f040 80bb 	bne.w	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005ebc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005ec0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	f200 80ab 	bhi.w	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8005ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x38>)
 8005ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eda:	bf00      	nop
 8005edc:	08005ef1 	.word	0x08005ef1
 8005ee0:	08005f1f 	.word	0x08005f1f
 8005ee4:	08005f4d 	.word	0x08005f4d
 8005ee8:	0800601d 	.word	0x0800601d
 8005eec:	08005f7b 	.word	0x08005f7b
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ef0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005ef4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005efe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f02:	d108      	bne.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f001 f997 	bl	800723c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f12:	f000 be5c 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8005f16:	2300      	movs	r3, #0
 8005f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f1a:	f000 be58 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f1e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005f22:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f30:	d108      	bne.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f32:	f107 0318 	add.w	r3, r7, #24
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fe66 	bl	8006c08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f40:	f000 be45 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f48:	f000 be41 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f4c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005f50:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f5e:	d108      	bne.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f60:	f107 030c 	add.w	r3, r7, #12
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 ffdc 	bl	8006f22 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f6e:	f000 be2e 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f76:	f000 be2a 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f7a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005f7e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f88:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f8a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005f8e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b04      	cmp	r3, #4
 8005f9a:	d111      	bne.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8005f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10e      	bne.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fa2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005fa6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	08db      	lsrs	r3, r3, #3
 8005fae:	f003 0203 	and.w	r2, r3, #3
 8005fb2:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8005fb6:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8005fba:	40d3      	lsrs	r3, r2
 8005fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fbe:	e02b      	b.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005fc0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005fc4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fd2:	d109      	bne.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8005fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fda:	d105      	bne.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005fdc:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8005fe0:	f2c0 033d 	movt	r3, #61	@ 0x3d
 8005fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fe6:	e017      	b.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005fe8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005fec:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ff6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ffa:	d109      	bne.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8005ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ffe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006002:	d105      	bne.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006004:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8006008:	f2c0 037a 	movt	r3, #122	@ 0x7a
 800600c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800600e:	e003      	b.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006010:	2300      	movs	r3, #0
 8006012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006014:	f000 bddb 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 8006018:	f000 bdd9 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800601c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006020:	f2c0 03bb 	movt	r3, #187	@ 0xbb
 8006024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006026:	f000 bdd2 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      default :
      {
        frequency = 0;
 800602a:	2300      	movs	r3, #0
 800602c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800602e:	f000 bdce 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006032:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006036:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800603a:	430b      	orrs	r3, r1
 800603c:	f040 80c8 	bne.w	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006040:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006044:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800604a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800604e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006052:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006056:	d05f      	beq.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8006058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800605e:	f200 80b3 	bhi.w	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8006062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006064:	2bc0      	cmp	r3, #192	@ 0xc0
 8006066:	f000 80a8 	beq.w	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x316>
 800606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606c:	2bc0      	cmp	r3, #192	@ 0xc0
 800606e:	f200 80ab 	bhi.w	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8006072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006074:	2b80      	cmp	r3, #128	@ 0x80
 8006076:	d038      	beq.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 8006078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607a:	2b80      	cmp	r3, #128	@ 0x80
 800607c:	f200 80a4 	bhi.w	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8006080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006088:	2b40      	cmp	r3, #64	@ 0x40
 800608a:	d017      	beq.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 800608c:	e09c      	b.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800608e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006092:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800609c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060a0:	d108      	bne.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060a6:	4618      	mov	r0, r3
 80060a8:	f001 f8c8 	bl	800723c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060b0:	f000 bd8d 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060b8:	f000 bd89 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060bc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80060c0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060ce:	d108      	bne.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060d0:	f107 0318 	add.w	r3, r7, #24
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 fd97 	bl	8006c08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060de:	f000 bd76 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80060e2:	2300      	movs	r3, #0
 80060e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060e6:	f000 bd72 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060ea:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80060ee:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060fc:	d108      	bne.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060fe:	f107 030c 	add.w	r3, r7, #12
 8006102:	4618      	mov	r0, r3
 8006104:	f000 ff0d 	bl	8006f22 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800610c:	f000 bd5f 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006114:	f000 bd5b 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006118:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800611c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006122:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006126:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006128:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800612c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0304 	and.w	r3, r3, #4
 8006136:	2b04      	cmp	r3, #4
 8006138:	d111      	bne.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
 800613a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10e      	bne.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006140:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006144:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	08db      	lsrs	r3, r3, #3
 800614c:	f003 0203 	and.w	r2, r3, #3
 8006150:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8006154:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8006158:	40d3      	lsrs	r3, r2
 800615a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800615c:	e02b      	b.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800615e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006162:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800616c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006170:	d109      	bne.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 8006172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006174:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006178:	d105      	bne.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800617a:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800617e:	f2c0 033d 	movt	r3, #61	@ 0x3d
 8006182:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006184:	e017      	b.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006186:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800618a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006194:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006198:	d109      	bne.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
 800619a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800619c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061a0:	d105      	bne.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80061a2:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 80061a6:	f2c0 037a 	movt	r3, #122	@ 0x7a
 80061aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061ac:	e003      	b.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80061ae:	2300      	movs	r3, #0
 80061b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80061b2:	f000 bd0c 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 80061b6:	f000 bd0a 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80061ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061be:	f2c0 03bb 	movt	r3, #187	@ 0xbb
 80061c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061c4:	f000 bd03 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      default :
      {
        frequency = 0;
 80061c8:	2300      	movs	r3, #0
 80061ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061cc:	f000 bcff 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80061d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061d4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80061d8:	430b      	orrs	r3, r1
 80061da:	f040 80cd 	bne.w	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80061de:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80061e2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80061e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061e8:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80061ec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80061ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061f4:	d064      	beq.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 80061f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061fc:	f200 80b8 	bhi.w	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8006200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006202:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006206:	f000 80ac 	beq.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800620a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006210:	f200 80ae 	bhi.w	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8006214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006216:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800621a:	d03a      	beq.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 800621c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006222:	f200 80a5 	bhi.w	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8006226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006228:	2b00      	cmp	r3, #0
 800622a:	d004      	beq.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x392>
 800622c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006232:	d017      	beq.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006234:	e09c      	b.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006236:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800623a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006244:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006248:	d108      	bne.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800624a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800624e:	4618      	mov	r0, r3
 8006250:	f000 fff4 	bl	800723c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006258:	f000 bcb9 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006260:	f000 bcb5 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006264:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006268:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006272:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006276:	d108      	bne.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006278:	f107 0318 	add.w	r3, r7, #24
 800627c:	4618      	mov	r0, r3
 800627e:	f000 fcc3 	bl	8006c08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006286:	f000 bca2 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 800628a:	2300      	movs	r3, #0
 800628c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800628e:	f000 bc9e 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006292:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006296:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062a4:	d108      	bne.n	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062a6:	f107 030c 	add.w	r3, r7, #12
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 fe39 	bl	8006f22 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062b4:	f000 bc8b 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80062b8:	2300      	movs	r3, #0
 80062ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062bc:	f000 bc87 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80062c0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80062c4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80062c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80062ce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062d0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80062d4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d111      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80062e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10e      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062e8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80062ec:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	08db      	lsrs	r3, r3, #3
 80062f4:	f003 0203 	and.w	r2, r3, #3
 80062f8:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80062fc:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8006300:	40d3      	lsrs	r3, r2
 8006302:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006304:	e02b      	b.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006306:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800630a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006314:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006318:	d109      	bne.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800631a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800631c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006320:	d105      	bne.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006322:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8006326:	f2c0 033d 	movt	r3, #61	@ 0x3d
 800632a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800632c:	e017      	b.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800632e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006332:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800633c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006340:	d109      	bne.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006344:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006348:	d105      	bne.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800634a:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800634e:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8006352:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006354:	e003      	b.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006356:	2300      	movs	r3, #0
 8006358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800635a:	f000 bc38 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 800635e:	f000 bc36 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006366:	f2c0 03bb 	movt	r3, #187	@ 0xbb
 800636a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800636c:	f000 bc2f 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      default :
      {
        frequency = 0;
 8006370:	2300      	movs	r3, #0
 8006372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006374:	f000 bc2b 	b.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800637c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006380:	430b      	orrs	r3, r1
 8006382:	f040 80c3 	bne.w	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006386:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800638a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800638e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006390:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006394:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006398:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800639c:	d05e      	beq.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 800639e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063a4:	f200 80af 	bhi.w	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 80063a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80063ae:	f000 80a4 	beq.w	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
 80063b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80063b8:	f200 80a5 	bhi.w	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 80063bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063c2:	d036      	beq.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80063c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063ca:	f200 809c 	bhi.w	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 80063ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d004      	beq.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
 80063d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063da:	d015      	beq.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80063dc:	e093      	b.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063de:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80063e2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063f0:	d107      	bne.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 ff20 	bl	800723c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80063fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006400:	e3e5      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006406:	e3e2      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006408:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800640c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006416:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800641a:	d107      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800641c:	f107 0318 	add.w	r3, r7, #24
 8006420:	4618      	mov	r0, r3
 8006422:	f000 fbf1 	bl	8006c08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800642a:	e3d0      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 800642c:	2300      	movs	r3, #0
 800642e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006430:	e3cd      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006432:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006436:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006440:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006444:	d107      	bne.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006446:	f107 030c 	add.w	r3, r7, #12
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fd69 	bl	8006f22 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006454:	e3bb      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006456:	2300      	movs	r3, #0
 8006458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800645a:	e3b8      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800645c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006460:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006466:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800646a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800646c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006470:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0304 	and.w	r3, r3, #4
 800647a:	2b04      	cmp	r3, #4
 800647c:	d111      	bne.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800647e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10e      	bne.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006484:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006488:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	08db      	lsrs	r3, r3, #3
 8006490:	f003 0203 	and.w	r2, r3, #3
 8006494:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8006498:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 800649c:	40d3      	lsrs	r3, r2
 800649e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064a0:	e02a      	b.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064a2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80064a6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064b4:	d109      	bne.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80064b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064bc:	d105      	bne.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x626>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80064be:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80064c2:	f2c0 033d 	movt	r3, #61	@ 0x3d
 80064c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064c8:	e016      	b.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064ca:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80064ce:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064dc:	d109      	bne.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x64e>
 80064de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064e4:	d105      	bne.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x64e>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80064e6:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 80064ea:	f2c0 037a 	movt	r3, #122	@ 0x7a
 80064ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064f0:	e002      	b.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80064f2:	2300      	movs	r3, #0
 80064f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80064f6:	e36a      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 80064f8:	e369      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80064fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064fe:	f2c0 03bb 	movt	r3, #187	@ 0xbb
 8006502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006504:	e363      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      default :
      {
        frequency = 0;
 8006506:	2300      	movs	r3, #0
 8006508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800650a:	e360      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800650c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006510:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006514:	430b      	orrs	r3, r1
 8006516:	f040 80c3 	bne.w	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800651a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800651e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006524:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006528:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800652a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006530:	d05e      	beq.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8006532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006534:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006538:	f200 80af 	bhi.w	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
 800653c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006542:	f000 80a4 	beq.w	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8006546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006548:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800654c:	f200 80a5 	bhi.w	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
 8006550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006556:	d036      	beq.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
 8006558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800655e:	f200 809c 	bhi.w	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
 8006562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006564:	2b00      	cmp	r3, #0
 8006566:	d004      	beq.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8006568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800656e:	d015      	beq.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006570:	e093      	b.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006572:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006576:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006580:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006584:	d107      	bne.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006586:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fe56 	bl	800723c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006594:	e31b      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006596:	2300      	movs	r3, #0
 8006598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800659a:	e318      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800659c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80065a0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065ae:	d107      	bne.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065b0:	f107 0318 	add.w	r3, r7, #24
 80065b4:	4618      	mov	r0, r3
 80065b6:	f000 fb27 	bl	8006c08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065be:	e306      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80065c0:	2300      	movs	r3, #0
 80065c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065c4:	e303      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065c6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80065ca:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065d8:	d107      	bne.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x746>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065da:	f107 030c 	add.w	r3, r7, #12
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fc9f 	bl	8006f22 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065e8:	e2f1      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80065ea:	2300      	movs	r3, #0
 80065ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065ee:	e2ee      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80065f0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80065f4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80065f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80065fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006600:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006604:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0304 	and.w	r3, r3, #4
 800660e:	2b04      	cmp	r3, #4
 8006610:	d111      	bne.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
 8006612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10e      	bne.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006618:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800661c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	08db      	lsrs	r3, r3, #3
 8006624:	f003 0203 	and.w	r2, r3, #3
 8006628:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800662c:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8006630:	40d3      	lsrs	r3, r2
 8006632:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006634:	e02a      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006636:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800663a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006644:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006648:	d109      	bne.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
 800664a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800664c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006650:	d105      	bne.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006652:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8006656:	f2c0 033d 	movt	r3, #61	@ 0x3d
 800665a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800665c:	e016      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800665e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006662:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800666c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006670:	d109      	bne.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8006672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006674:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006678:	d105      	bne.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800667a:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800667e:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8006682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006684:	e002      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006686:	2300      	movs	r3, #0
 8006688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800668a:	e2a0      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 800668c:	e29f      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800668e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006692:	f2c0 03bb 	movt	r3, #187	@ 0xbb
 8006696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006698:	e299      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      default :
      {
        frequency = 0;
 800669a:	2300      	movs	r3, #0
 800669c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800669e:	e296      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80066a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066a4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80066a8:	430b      	orrs	r3, r1
 80066aa:	f040 80a5 	bne.w	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80066ae:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80066b2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80066b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066b8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80066bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80066be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066c4:	f000 8082 	beq.w	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x928>
 80066c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066ce:	f200 8090 	bhi.w	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
 80066d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066d8:	d065      	beq.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x902>
 80066da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066e0:	f200 8087 	bhi.w	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
 80066e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066ea:	d041      	beq.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 80066ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066f2:	d87e      	bhi.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
 80066f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066fa:	d024      	beq.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80066fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006702:	d876      	bhi.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
 8006704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006706:	2b00      	cmp	r3, #0
 8006708:	d004      	beq.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 800670a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006710:	d004      	beq.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x878>
 8006712:	e06e      	b.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006714:	f7fe f86e 	bl	80047f4 <HAL_RCC_GetPCLK1Freq>
 8006718:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800671a:	e258      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800671c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006720:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800672a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800672e:	d107      	bne.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006730:	f107 0318 	add.w	r3, r7, #24
 8006734:	4618      	mov	r0, r3
 8006736:	f000 fa67 	bl	8006c08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800673e:	e246      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006740:	2300      	movs	r3, #0
 8006742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006744:	e243      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006746:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800674a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006754:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006758:	d107      	bne.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800675a:	f107 030c 	add.w	r3, r7, #12
 800675e:	4618      	mov	r0, r3
 8006760:	f000 fbdf 	bl	8006f22 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006768:	e231      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 800676a:	2300      	movs	r3, #0
 800676c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800676e:	e22e      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006770:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006774:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0304 	and.w	r3, r3, #4
 800677e:	2b04      	cmp	r3, #4
 8006780:	d10e      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006782:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006786:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	08db      	lsrs	r3, r3, #3
 800678e:	f003 0203 	and.w	r2, r3, #3
 8006792:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8006796:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 800679a:	40d3      	lsrs	r3, r2
 800679c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800679e:	e216      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80067a0:	2300      	movs	r3, #0
 80067a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067a4:	e213      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80067a6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80067aa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067b8:	d105      	bne.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
        {
          frequency = CSI_VALUE;
 80067ba:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80067be:	f2c0 033d 	movt	r3, #61	@ 0x3d
 80067c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067c4:	e203      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80067c6:	2300      	movs	r3, #0
 80067c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067ca:	e200      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067cc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80067d0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067de:	d105      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x948>
        {
          frequency = HSE_VALUE;
 80067e0:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 80067e4:	f2c0 037a 	movt	r3, #122	@ 0x7a
 80067e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067ea:	e1f0      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067f0:	e1ed      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      default :
      {
        frequency = 0;
 80067f2:	2300      	movs	r3, #0
 80067f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067f6:	e1ea      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80067f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067fc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006800:	430b      	orrs	r3, r1
 8006802:	f040 8095 	bne.w	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006806:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800680a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800680e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006810:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006814:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006818:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800681c:	d036      	beq.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x9e8>
 800681e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006820:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006824:	f200 8081 	bhi.w	800692a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8006828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682a:	2b00      	cmp	r3, #0
 800682c:	d004      	beq.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800682e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006834:	d015      	beq.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006836:	e078      	b.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006838:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800683c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006846:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800684a:	d107      	bne.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800684c:	f107 0318 	add.w	r3, r7, #24
 8006850:	4618      	mov	r0, r3
 8006852:	f000 f9d9 	bl	8006c08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800685a:	e1b8      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 800685c:	2300      	movs	r3, #0
 800685e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006860:	e1b5      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006862:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006866:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006874:	d107      	bne.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006876:	f107 030c 	add.w	r3, r7, #12
 800687a:	4618      	mov	r0, r3
 800687c:	f000 fb51 	bl	8006f22 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006884:	e1a3      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006886:	2300      	movs	r3, #0
 8006888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800688a:	e1a0      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800688c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006890:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006896:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800689a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800689c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80068a0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d111      	bne.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
 80068ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10e      	bne.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068b4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80068b8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	08db      	lsrs	r3, r3, #3
 80068c0:	f003 0203 	and.w	r2, r3, #3
 80068c4:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80068c8:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 80068cc:	40d3      	lsrs	r3, r2
 80068ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068d0:	e02a      	b.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068d2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80068d6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068e4:	d109      	bne.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 80068e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068ec:	d105      	bne.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80068ee:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80068f2:	f2c0 033d 	movt	r3, #61	@ 0x3d
 80068f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068f8:	e016      	b.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068fa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80068fe:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800690c:	d109      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
 800690e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006910:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006914:	d105      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006916:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800691a:	f2c0 037a 	movt	r3, #122	@ 0x7a
 800691e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006920:	e002      	b.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006922:	2300      	movs	r3, #0
 8006924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006926:	e152      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 8006928:	e151      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      default :
      {
        frequency = 0;
 800692a:	2300      	movs	r3, #0
 800692c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800692e:	e14e      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006934:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006938:	430b      	orrs	r3, r1
 800693a:	d13c      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800693c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006940:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006946:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800694a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800694c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800694e:	2b00      	cmp	r3, #0
 8006950:	d004      	beq.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 8006952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006958:	d015      	beq.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 800695a:	e029      	b.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800695c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006960:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800696a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800696e:	d107      	bne.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006970:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006974:	4618      	mov	r0, r3
 8006976:	f000 fc61 	bl	800723c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800697a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800697c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800697e:	e126      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006980:	2300      	movs	r3, #0
 8006982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006984:	e123      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006986:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800698a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006994:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006998:	d107      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0xb06>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800699a:	f107 0318 	add.w	r3, r7, #24
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 f932 	bl	8006c08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069a8:	e111      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069ae:	e10e      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      default :
      {
        frequency = 0;
 80069b0:	2300      	movs	r3, #0
 80069b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069b4:	e10b      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80069b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ba:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80069be:	430b      	orrs	r3, r1
 80069c0:	f040 80a5 	bne.w	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80069c4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80069c8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80069cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ce:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80069d2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80069d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069da:	f000 8082 	beq.w	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80069de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069e4:	f200 8090 	bhi.w	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80069e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ee:	d065      	beq.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0xc18>
 80069f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069f6:	f200 8087 	bhi.w	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80069fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a00:	d041      	beq.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8006a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a08:	d87e      	bhi.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a10:	d024      	beq.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8006a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a18:	d876      	bhi.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d004      	beq.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8006a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a26:	d004      	beq.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 8006a28:	e06e      	b.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006a2a:	f000 f8d5 	bl	8006bd8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006a2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a30:	e0cd      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a32:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006a36:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a44:	d107      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a46:	f107 0318 	add.w	r3, r7, #24
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 f8dc 	bl	8006c08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a54:	e0bb      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006a56:	2300      	movs	r3, #0
 8006a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a5a:	e0b8      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a5c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006a60:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a6e:	d107      	bne.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xbdc>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a70:	f107 030c 	add.w	r3, r7, #12
 8006a74:	4618      	mov	r0, r3
 8006a76:	f000 fa54 	bl	8006f22 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a7e:	e0a6      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006a80:	2300      	movs	r3, #0
 8006a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a84:	e0a3      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a86:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006a8a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b04      	cmp	r3, #4
 8006a96:	d10e      	bne.n	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a98:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006a9c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	08db      	lsrs	r3, r3, #3
 8006aa4:	f003 0203 	and.w	r2, r3, #3
 8006aa8:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8006aac:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8006ab0:	40d3      	lsrs	r3, r2
 8006ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ab4:	e08b      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aba:	e088      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006abc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006ac0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ace:	d105      	bne.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
        {
          frequency = CSI_VALUE;
 8006ad0:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8006ad4:	f2c0 033d 	movt	r3, #61	@ 0x3d
 8006ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ada:	e078      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006adc:	2300      	movs	r3, #0
 8006ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ae0:	e075      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ae2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006ae6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006af0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006af4:	d105      	bne.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
        {
          frequency = HSE_VALUE;
 8006af6:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8006afa:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8006afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b00:	e065      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006b02:	2300      	movs	r3, #0
 8006b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b06:	e062      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b0c:	e05f      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b12:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006b16:	430b      	orrs	r3, r1
 8006b18:	d157      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0xd26>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006b1a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006b1e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006b28:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b30:	d033      	beq.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0xcf6>
 8006b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b38:	d844      	bhi.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d004      	beq.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8006b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b46:	d013      	beq.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8006b48:	e03c      	b.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b4a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006b4e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b5c:	d105      	bne.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
        {
          frequency = HSE_VALUE;
 8006b5e:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8006b62:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8006b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b68:	e031      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b6e:	e02e      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b70:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006b74:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b82:	d107      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 fb57 	bl	800723c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b92:	e01c      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b98:	e019      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b9a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006b9e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ba8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bac:	d107      	bne.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0xd1a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bae:	f107 0318 	add.w	r3, r7, #24
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 f828 	bl	8006c08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bbc:	e007      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bc2:	e004      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      default :
      {
        frequency = 0;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bc8:	e001      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }
  else
  {
    frequency = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3740      	adds	r7, #64	@ 0x40
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006bdc:	f7fd fdce 	bl	800477c <HAL_RCC_GetHCLKFreq>
 8006be0:	4601      	mov	r1, r0
 8006be2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006be6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	091b      	lsrs	r3, r3, #4
 8006bee:	f003 0207 	and.w	r2, r3, #7
 8006bf2:	f649 0348 	movw	r3, #38984	@ 0x9848
 8006bf6:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8006bfa:	5c9b      	ldrb	r3, [r3, r2]
 8006bfc:	f003 031f 	and.w	r3, r3, #31
 8006c00:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b089      	sub	sp, #36	@ 0x24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c10:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006c14:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1a:	f003 0303 	and.w	r3, r3, #3
 8006c1e:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006c20:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006c24:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c2a:	0b1b      	lsrs	r3, r3, #12
 8006c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006c32:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006c36:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3c:	091b      	lsrs	r3, r3, #4
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006c44:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006c48:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c4e:	08db      	lsrs	r3, r3, #3
 8006c50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	fb02 f303 	mul.w	r3, r2, r3
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 814b 	beq.w	8006f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2fc>
  {
    switch (pllsource)
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	f000 80a2 	beq.w	8006dba <HAL_RCCEx_GetPLL2ClockFreq+0x1b2>
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	f200 80c9 	bhi.w	8006e10 <HAL_RCCEx_GetPLL2ClockFreq+0x208>
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <HAL_RCCEx_GetPLL2ClockFreq+0x84>
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d06c      	beq.n	8006d64 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006c8a:	e0c1      	b.n	8006e10 <HAL_RCCEx_GetPLL2ClockFreq+0x208>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c8c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006c90:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d037      	beq.n	8006d0e <HAL_RCCEx_GetPLL2ClockFreq+0x106>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c9e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006ca2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	08db      	lsrs	r3, r3, #3
 8006caa:	f003 0203 	and.w	r2, r3, #3
 8006cae:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8006cb2:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8006cb6:	40d3      	lsrs	r3, r2
 8006cb8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	ee07 3a90 	vmov	s15, r3
 8006cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	ee07 3a90 	vmov	s15, r3
 8006cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cd2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006cd6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ce0:	ee07 3a90 	vmov	s15, r3
 8006ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ce8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cec:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8006cf0:	ee05 3a90 	vmov	s11, r3
 8006cf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d08:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d0c:	e0ab      	b.n	8006e66 <HAL_RCCEx_GetPLL2ClockFreq+0x25e>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	ee07 3a90 	vmov	s15, r3
 8006d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d18:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8006d1c:	f6c4 4374 	movt	r3, #19572	@ 0x4c74
 8006d20:	ee06 3a90 	vmov	s13, r3
 8006d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d28:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006d2c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d36:	ee07 3a90 	vmov	s15, r3
 8006d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d42:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8006d46:	ee05 3a90 	vmov	s11, r3
 8006d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d62:	e080      	b.n	8006e66 <HAL_RCCEx_GetPLL2ClockFreq+0x25e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	ee07 3a90 	vmov	s15, r3
 8006d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6e:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8006d72:	f6c4 2374 	movt	r3, #19060	@ 0x4a74
 8006d76:	ee06 3a90 	vmov	s13, r3
 8006d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d7e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006d82:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d8c:	ee07 3a90 	vmov	s15, r3
 8006d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d94:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d98:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8006d9c:	ee05 3a90 	vmov	s11, r3
 8006da0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006da4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006da8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006db4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006db8:	e055      	b.n	8006e66 <HAL_RCCEx_GetPLL2ClockFreq+0x25e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	ee07 3a90 	vmov	s15, r3
 8006dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc4:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8006dc8:	f6c4 23f4 	movt	r3, #19188	@ 0x4af4
 8006dcc:	ee06 3a90 	vmov	s13, r3
 8006dd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dd4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006dd8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de2:	ee07 3a90 	vmov	s15, r3
 8006de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dee:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8006df2:	ee05 3a90 	vmov	s11, r3
 8006df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e0e:	e02a      	b.n	8006e66 <HAL_RCCEx_GetPLL2ClockFreq+0x25e>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1a:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8006e1e:	f6c4 2374 	movt	r3, #19060	@ 0x4a74
 8006e22:	ee06 3a90 	vmov	s13, r3
 8006e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e2a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006e2e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e38:	ee07 3a90 	vmov	s15, r3
 8006e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e40:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e44:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8006e48:	ee05 3a90 	vmov	s11, r3
 8006e4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e64:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006e66:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006e6a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e70:	0a5b      	lsrs	r3, r3, #9
 8006e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e76:	ee07 3a90 	vmov	s15, r3
 8006e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e86:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e92:	ee17 2a90 	vmov	r2, s15
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006e9a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006e9e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea4:	0c1b      	lsrs	r3, r3, #16
 8006ea6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eaa:	ee07 3a90 	vmov	s15, r3
 8006eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006eb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eba:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ec6:	ee17 2a90 	vmov	r2, s15
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006ece:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006ed2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed8:	0e1b      	lsrs	r3, r3, #24
 8006eda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006eea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eee:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006efa:	ee17 2a90 	vmov	r2, s15
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006f02:	e008      	b.n	8006f16 <HAL_RCCEx_GetPLL2ClockFreq+0x30e>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	609a      	str	r2, [r3, #8]
}
 8006f16:	bf00      	nop
 8006f18:	3724      	adds	r7, #36	@ 0x24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b089      	sub	sp, #36	@ 0x24
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f2a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006f2e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f34:	f003 0303 	and.w	r3, r3, #3
 8006f38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006f3a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006f3e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f44:	0d1b      	lsrs	r3, r3, #20
 8006f46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f4a:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006f4c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006f50:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f56:	0a1b      	lsrs	r3, r3, #8
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006f5e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006f62:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f68:	08db      	lsrs	r3, r3, #3
 8006f6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	fb02 f303 	mul.w	r3, r2, r3
 8006f74:	ee07 3a90 	vmov	s15, r3
 8006f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 814b 	beq.w	800721e <HAL_RCCEx_GetPLL3ClockFreq+0x2fc>
  {
    switch (pllsource)
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	f000 80a2 	beq.w	80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1b2>
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	f200 80c9 	bhi.w	800712a <HAL_RCCEx_GetPLL3ClockFreq+0x208>
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <HAL_RCCEx_GetPLL3ClockFreq+0x84>
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d06c      	beq.n	800707e <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006fa4:	e0c1      	b.n	800712a <HAL_RCCEx_GetPLL3ClockFreq+0x208>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fa6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006faa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0320 	and.w	r3, r3, #32
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d037      	beq.n	8007028 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fb8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006fbc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	08db      	lsrs	r3, r3, #3
 8006fc4:	f003 0203 	and.w	r2, r3, #3
 8006fc8:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8006fcc:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8006fd0:	40d3      	lsrs	r3, r2
 8006fd2:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	ee07 3a90 	vmov	s15, r3
 8006fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	ee07 3a90 	vmov	s15, r3
 8006fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fec:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006ff0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007002:	ed97 6a03 	vldr	s12, [r7, #12]
 8007006:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 800700a:	ee05 3a90 	vmov	s11, r3
 800700e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800701a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800701e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007022:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007026:	e0ab      	b.n	8007180 <HAL_RCCEx_GetPLL3ClockFreq+0x25e>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	ee07 3a90 	vmov	s15, r3
 800702e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007032:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8007036:	f6c4 4374 	movt	r3, #19572	@ 0x4c74
 800703a:	ee06 3a90 	vmov	s13, r3
 800703e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007042:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007046:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800704a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007050:	ee07 3a90 	vmov	s15, r3
 8007054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007058:	ed97 6a03 	vldr	s12, [r7, #12]
 800705c:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8007060:	ee05 3a90 	vmov	s11, r3
 8007064:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007068:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800706c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007070:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007078:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800707c:	e080      	b.n	8007180 <HAL_RCCEx_GetPLL3ClockFreq+0x25e>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	ee07 3a90 	vmov	s15, r3
 8007084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007088:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800708c:	f6c4 2374 	movt	r3, #19060	@ 0x4a74
 8007090:	ee06 3a90 	vmov	s13, r3
 8007094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007098:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800709c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80070a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a6:	ee07 3a90 	vmov	s15, r3
 80070aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80070b2:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 80070b6:	ee05 3a90 	vmov	s11, r3
 80070ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070d2:	e055      	b.n	8007180 <HAL_RCCEx_GetPLL3ClockFreq+0x25e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070de:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80070e2:	f6c4 23f4 	movt	r3, #19188	@ 0x4af4
 80070e6:	ee06 3a90 	vmov	s13, r3
 80070ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ee:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80070f2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80070f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070fc:	ee07 3a90 	vmov	s15, r3
 8007100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007104:	ed97 6a03 	vldr	s12, [r7, #12]
 8007108:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 800710c:	ee05 3a90 	vmov	s11, r3
 8007110:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007114:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007118:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800711c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007124:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007128:	e02a      	b.n	8007180 <HAL_RCCEx_GetPLL3ClockFreq+0x25e>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	ee07 3a90 	vmov	s15, r3
 8007130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007134:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8007138:	f6c4 2374 	movt	r3, #19060	@ 0x4a74
 800713c:	ee06 3a90 	vmov	s13, r3
 8007140:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007144:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007148:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800714c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715a:	ed97 6a03 	vldr	s12, [r7, #12]
 800715e:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8007162:	ee05 3a90 	vmov	s11, r3
 8007166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800716a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800716e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800717e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007180:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007184:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800718a:	0a5b      	lsrs	r3, r3, #9
 800718c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007190:	ee07 3a90 	vmov	s15, r3
 8007194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007198:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800719c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80071a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ac:	ee17 2a90 	vmov	r2, s15
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80071b4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80071b8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80071bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071be:	0c1b      	lsrs	r3, r3, #16
 80071c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071c4:	ee07 3a90 	vmov	s15, r3
 80071c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80071d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071e0:	ee17 2a90 	vmov	r2, s15
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80071e8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80071ec:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80071f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f2:	0e1b      	lsrs	r3, r3, #24
 80071f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071f8:	ee07 3a90 	vmov	s15, r3
 80071fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007200:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007204:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007208:	edd7 6a07 	vldr	s13, [r7, #28]
 800720c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007214:	ee17 2a90 	vmov	r2, s15
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800721c:	e008      	b.n	8007230 <HAL_RCCEx_GetPLL3ClockFreq+0x30e>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	609a      	str	r2, [r3, #8]
}
 8007230:	bf00      	nop
 8007232:	3724      	adds	r7, #36	@ 0x24
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800723c:	b480      	push	{r7}
 800723e:	b089      	sub	sp, #36	@ 0x24
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007244:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007248:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800724c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724e:	f003 0303 	and.w	r3, r3, #3
 8007252:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007254:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007258:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800725c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800725e:	091b      	lsrs	r3, r3, #4
 8007260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007264:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007266:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800726a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800726e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007276:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800727a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800727e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007280:	08db      	lsrs	r3, r3, #3
 8007282:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	fb02 f303 	mul.w	r3, r2, r3
 800728c:	ee07 3a90 	vmov	s15, r3
 8007290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007294:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 814b 	beq.w	8007536 <HAL_RCCEx_GetPLL1ClockFreq+0x2fa>
  {
    switch (pllsource)
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	f000 80a2 	beq.w	80073ec <HAL_RCCEx_GetPLL1ClockFreq+0x1b0>
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	f200 80c9 	bhi.w	8007442 <HAL_RCCEx_GetPLL1ClockFreq+0x206>
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d003      	beq.n	80072be <HAL_RCCEx_GetPLL1ClockFreq+0x82>
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d06c      	beq.n	8007396 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80072bc:	e0c1      	b.n	8007442 <HAL_RCCEx_GetPLL1ClockFreq+0x206>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072be:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80072c2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0320 	and.w	r3, r3, #32
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d037      	beq.n	8007340 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072d0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80072d4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	08db      	lsrs	r3, r3, #3
 80072dc:	f003 0203 	and.w	r2, r3, #3
 80072e0:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80072e4:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 80072e8:	40d3      	lsrs	r3, r2
 80072ea:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	ee07 3a90 	vmov	s15, r3
 80072fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007300:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007304:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007308:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800730c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800730e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007312:	ee07 3a90 	vmov	s15, r3
 8007316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800731a:	ed97 6a03 	vldr	s12, [r7, #12]
 800731e:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8007322:	ee05 3a90 	vmov	s11, r3
 8007326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800732a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800732e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800733a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800733e:	e0ab      	b.n	8007498 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734a:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800734e:	f6c4 4374 	movt	r3, #19572	@ 0x4c74
 8007352:	ee06 3a90 	vmov	s13, r3
 8007356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800735a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800735e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007368:	ee07 3a90 	vmov	s15, r3
 800736c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007370:	ed97 6a03 	vldr	s12, [r7, #12]
 8007374:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8007378:	ee05 3a90 	vmov	s11, r3
 800737c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007380:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007384:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007388:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007390:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007394:	e080      	b.n	8007498 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	ee07 3a90 	vmov	s15, r3
 800739c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a0:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80073a4:	f6c4 2374 	movt	r3, #19060	@ 0x4a74
 80073a8:	ee06 3a90 	vmov	s13, r3
 80073ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073b0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80073b4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80073b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ca:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 80073ce:	ee05 3a90 	vmov	s11, r3
 80073d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073ea:	e055      	b.n	8007498 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	ee07 3a90 	vmov	s15, r3
 80073f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f6:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80073fa:	f6c4 23f4 	movt	r3, #19188	@ 0x4af4
 80073fe:	ee06 3a90 	vmov	s13, r3
 8007402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007406:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800740a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800740e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007414:	ee07 3a90 	vmov	s15, r3
 8007418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007420:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8007424:	ee05 3a90 	vmov	s11, r3
 8007428:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800742c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007430:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007434:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800743c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007440:	e02a      	b.n	8007498 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	ee07 3a90 	vmov	s15, r3
 8007448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744c:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8007450:	f6c4 4374 	movt	r3, #19572	@ 0x4c74
 8007454:	ee06 3a90 	vmov	s13, r3
 8007458:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800745c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007460:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800746a:	ee07 3a90 	vmov	s15, r3
 800746e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007472:	ed97 6a03 	vldr	s12, [r7, #12]
 8007476:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 800747a:	ee05 3a90 	vmov	s11, r3
 800747e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800748a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800748e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007492:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007496:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007498:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800749c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80074a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074a2:	0a5b      	lsrs	r3, r3, #9
 80074a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074a8:	ee07 3a90 	vmov	s15, r3
 80074ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80074bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074c4:	ee17 2a90 	vmov	r2, s15
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80074cc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80074d0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80074d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d6:	0c1b      	lsrs	r3, r3, #16
 80074d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074dc:	ee07 3a90 	vmov	s15, r3
 80074e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80074f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074f8:	ee17 2a90 	vmov	r2, s15
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007500:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007504:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800750a:	0e1b      	lsrs	r3, r3, #24
 800750c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007510:	ee07 3a90 	vmov	s15, r3
 8007514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007518:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800751c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007520:	edd7 6a07 	vldr	s13, [r7, #28]
 8007524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800752c:	ee17 2a90 	vmov	r2, s15
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007534:	e008      	b.n	8007548 <HAL_RCCEx_GetPLL1ClockFreq+0x30c>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	609a      	str	r2, [r3, #8]
}
 8007548:	bf00      	nop
 800754a:	3724      	adds	r7, #36	@ 0x24
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800755e:	2300      	movs	r3, #0
 8007560:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007562:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007566:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800756a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756c:	f003 0303 	and.w	r3, r3, #3
 8007570:	2b03      	cmp	r3, #3
 8007572:	d101      	bne.n	8007578 <RCCEx_PLL2_Config+0x24>
  {
    return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e0e7      	b.n	8007748 <RCCEx_PLL2_Config+0x1f4>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007578:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800757c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007586:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800758a:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800758e:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007590:	f7fa fa3e 	bl	8001a10 <HAL_GetTick>
 8007594:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007596:	e008      	b.n	80075aa <RCCEx_PLL2_Config+0x56>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007598:	f7fa fa3a 	bl	8001a10 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d901      	bls.n	80075aa <RCCEx_PLL2_Config+0x56>
      {
        return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e0ce      	b.n	8007748 <RCCEx_PLL2_Config+0x1f4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075aa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80075ae:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1ed      	bne.n	8007598 <RCCEx_PLL2_Config+0x44>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80075bc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80075c0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80075c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c6:	f423 317c 	bic.w	r1, r3, #258048	@ 0x3f000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	031a      	lsls	r2, r3, #12
 80075d0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80075d4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80075d8:	430a      	orrs	r2, r1
 80075da:	629a      	str	r2, [r3, #40]	@ 0x28
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	3b01      	subs	r3, #1
 80075ec:	025b      	lsls	r3, r3, #9
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	431a      	orrs	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	041b      	lsls	r3, r3, #16
 80075fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80075fe:	ea42 0103 	orr.w	r1, r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	3b01      	subs	r3, #1
 8007608:	061b      	lsls	r3, r3, #24
 800760a:	f003 42fe 	and.w	r2, r3, #2130706432	@ 0x7f000000
 800760e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007612:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007616:	430a      	orrs	r2, r1
 8007618:	639a      	str	r2, [r3, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800761a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800761e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007624:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	695a      	ldr	r2, [r3, #20]
 800762c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007630:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007634:	430a      	orrs	r2, r1
 8007636:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007638:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800763c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007642:	f023 0120 	bic.w	r1, r3, #32
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	699a      	ldr	r2, [r3, #24]
 800764a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800764e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007652:	430a      	orrs	r2, r1
 8007654:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007656:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800765a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800765e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007660:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007664:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007668:	f022 0210 	bic.w	r2, r2, #16
 800766c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800766e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007672:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007676:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007678:	2307      	movs	r3, #7
 800767a:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 800767e:	4013      	ands	r3, r2
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	69d2      	ldr	r2, [r2, #28]
 8007684:	00d1      	lsls	r1, r2, #3
 8007686:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 800768a:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 800768e:	430b      	orrs	r3, r1
 8007690:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007692:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007696:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800769a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800769c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80076a0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80076a4:	f042 0210 	orr.w	r2, r2, #16
 80076a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10c      	bne.n	80076ca <RCCEx_PLL2_Config+0x176>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80076b0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80076b4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80076b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ba:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80076be:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80076c2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80076c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80076c8:	e01b      	b.n	8007702 <RCCEx_PLL2_Config+0x1ae>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d10c      	bne.n	80076ea <RCCEx_PLL2_Config+0x196>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80076d0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80076d4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80076d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076da:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80076de:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80076e2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80076e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80076e8:	e00b      	b.n	8007702 <RCCEx_PLL2_Config+0x1ae>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076ea:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80076ee:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80076f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076f4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80076f8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80076fc:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8007700:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007702:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007706:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007710:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007714:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8007718:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800771a:	f7fa f979 	bl	8001a10 <HAL_GetTick>
 800771e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007720:	e008      	b.n	8007734 <RCCEx_PLL2_Config+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007722:	f7fa f975 	bl	8001a10 <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	2b02      	cmp	r3, #2
 800772e:	d901      	bls.n	8007734 <RCCEx_PLL2_Config+0x1e0>
      {
        return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e009      	b.n	8007748 <RCCEx_PLL2_Config+0x1f4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007734:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007738:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d0ed      	beq.n	8007722 <RCCEx_PLL2_Config+0x1ce>
    }

  }


  return status;
 8007746:	7bfb      	ldrb	r3, [r7, #15]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800775a:	2300      	movs	r3, #0
 800775c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800775e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007762:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007768:	f003 0303 	and.w	r3, r3, #3
 800776c:	2b03      	cmp	r3, #3
 800776e:	d101      	bne.n	8007774 <RCCEx_PLL3_Config+0x24>
  {
    return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e0e7      	b.n	8007944 <RCCEx_PLL3_Config+0x1f4>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007774:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007778:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007782:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007786:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800778a:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800778c:	f7fa f940 	bl	8001a10 <HAL_GetTick>
 8007790:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007792:	e008      	b.n	80077a6 <RCCEx_PLL3_Config+0x56>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007794:	f7fa f93c 	bl	8001a10 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d901      	bls.n	80077a6 <RCCEx_PLL3_Config+0x56>
      {
        return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e0ce      	b.n	8007944 <RCCEx_PLL3_Config+0x1f4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077a6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80077aa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1ed      	bne.n	8007794 <RCCEx_PLL3_Config+0x44>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80077b8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80077bc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80077c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c2:	f023 717c 	bic.w	r1, r3, #66060288	@ 0x3f00000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	051a      	lsls	r2, r3, #20
 80077cc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80077d0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80077d4:	430a      	orrs	r2, r1
 80077d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	3b01      	subs	r3, #1
 80077de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	025b      	lsls	r3, r3, #9
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	3b01      	subs	r3, #1
 80077f4:	041b      	lsls	r3, r3, #16
 80077f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80077fa:	ea42 0103 	orr.w	r1, r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	3b01      	subs	r3, #1
 8007804:	061b      	lsls	r3, r3, #24
 8007806:	f003 42fe 	and.w	r2, r3, #2130706432	@ 0x7f000000
 800780a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800780e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007812:	430a      	orrs	r2, r1
 8007814:	641a      	str	r2, [r3, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007816:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800781a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800781e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007820:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	695a      	ldr	r2, [r3, #20]
 8007828:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800782c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007830:	430a      	orrs	r2, r1
 8007832:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007834:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007838:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800783c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783e:	f423 7100 	bic.w	r1, r3, #512	@ 0x200
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	699a      	ldr	r2, [r3, #24]
 8007846:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800784a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800784e:	430a      	orrs	r2, r1
 8007850:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007852:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007856:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800785a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800785c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007860:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007864:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007868:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800786a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800786e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007872:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007874:	2307      	movs	r3, #7
 8007876:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 800787a:	4013      	ands	r3, r2
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	69d2      	ldr	r2, [r2, #28]
 8007880:	00d1      	lsls	r1, r2, #3
 8007882:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8007886:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 800788a:	430b      	orrs	r3, r1
 800788c:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800788e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007892:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007898:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800789c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80078a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10c      	bne.n	80078c6 <RCCEx_PLL3_Config+0x176>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80078ac:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80078b0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80078b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80078ba:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80078be:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80078c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80078c4:	e01b      	b.n	80078fe <RCCEx_PLL3_Config+0x1ae>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d10c      	bne.n	80078e6 <RCCEx_PLL3_Config+0x196>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078cc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80078d0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80078d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078d6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80078da:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80078de:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80078e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80078e4:	e00b      	b.n	80078fe <RCCEx_PLL3_Config+0x1ae>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80078e6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80078ea:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80078ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80078f4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80078f8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80078fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80078fe:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007902:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800790c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007910:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007914:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007916:	f7fa f87b 	bl	8001a10 <HAL_GetTick>
 800791a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800791c:	e008      	b.n	8007930 <RCCEx_PLL3_Config+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800791e:	f7fa f877 	bl	8001a10 <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	2b02      	cmp	r3, #2
 800792a:	d901      	bls.n	8007930 <RCCEx_PLL3_Config+0x1e0>
      {
        return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e009      	b.n	8007944 <RCCEx_PLL3_Config+0x1f4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007930:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007934:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d0ed      	beq.n	800791e <RCCEx_PLL3_Config+0x1ce>
    }

  }


  return status;
 8007942:	7bfb      	ldrb	r3, [r7, #15]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e049      	b.n	80079f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d106      	bne.n	8007978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7f9 fd7b 	bl	800146e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	3304      	adds	r3, #4
 8007988:	4619      	mov	r1, r3
 800798a:	4610      	mov	r0, r2
 800798c:	f000 f96e 	bl	8007c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b084      	sub	sp, #16
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	f003 0302 	and.w	r3, r3, #2
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d020      	beq.n	8007a5e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d01b      	beq.n	8007a5e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f06f 0202 	mvn.w	r2, #2
 8007a2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	f003 0303 	and.w	r3, r3, #3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d003      	beq.n	8007a4c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f8f3 	bl	8007c30 <HAL_TIM_IC_CaptureCallback>
 8007a4a:	e005      	b.n	8007a58 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f8e5 	bl	8007c1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f8f6 	bl	8007c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d020      	beq.n	8007aaa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f003 0304 	and.w	r3, r3, #4
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d01b      	beq.n	8007aaa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f06f 0204 	mvn.w	r2, #4
 8007a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d003      	beq.n	8007a98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f8cd 	bl	8007c30 <HAL_TIM_IC_CaptureCallback>
 8007a96:	e005      	b.n	8007aa4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f8bf 	bl	8007c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f8d0 	bl	8007c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	f003 0308 	and.w	r3, r3, #8
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d020      	beq.n	8007af6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f003 0308 	and.w	r3, r3, #8
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d01b      	beq.n	8007af6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f06f 0208 	mvn.w	r2, #8
 8007ac6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2204      	movs	r2, #4
 8007acc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	69db      	ldr	r3, [r3, #28]
 8007ad4:	f003 0303 	and.w	r3, r3, #3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d003      	beq.n	8007ae4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f8a7 	bl	8007c30 <HAL_TIM_IC_CaptureCallback>
 8007ae2:	e005      	b.n	8007af0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f899 	bl	8007c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f8aa 	bl	8007c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f003 0310 	and.w	r3, r3, #16
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d020      	beq.n	8007b42 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f003 0310 	and.w	r3, r3, #16
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d01b      	beq.n	8007b42 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f06f 0210 	mvn.w	r2, #16
 8007b12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2208      	movs	r2, #8
 8007b18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d003      	beq.n	8007b30 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f881 	bl	8007c30 <HAL_TIM_IC_CaptureCallback>
 8007b2e:	e005      	b.n	8007b3c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f873 	bl	8007c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f884 	bl	8007c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	f003 0301 	and.w	r3, r3, #1
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00c      	beq.n	8007b66 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d007      	beq.n	8007b66 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f06f 0201 	mvn.w	r2, #1
 8007b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f851 	bl	8007c08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d104      	bne.n	8007b7a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00c      	beq.n	8007b94 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d007      	beq.n	8007b94 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f9d7 	bl	8007f42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00c      	beq.n	8007bb8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d007      	beq.n	8007bb8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f9cf 	bl	8007f56 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00c      	beq.n	8007bdc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d007      	beq.n	8007bdc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f83e 	bl	8007c58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f003 0320 	and.w	r3, r3, #32
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00c      	beq.n	8007c00 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f003 0320 	and.w	r3, r3, #32
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d007      	beq.n	8007c00 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f06f 0220 	mvn.w	r2, #32
 8007bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f997 	bl	8007f2e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c00:	bf00      	nop
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d01f      	beq.n	8007cc8 <TIM_Base_SetConfig+0x5c>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c8e:	d01b      	beq.n	8007cc8 <TIM_Base_SetConfig+0x5c>
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c96:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d014      	beq.n	8007cc8 <TIM_Base_SetConfig+0x5c>
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007ca4:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d00d      	beq.n	8007cc8 <TIM_Base_SetConfig+0x5c>
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007cb2:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d006      	beq.n	8007cc8 <TIM_Base_SetConfig+0x5c>
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007cc0:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d108      	bne.n	8007cda <TIM_Base_SetConfig+0x6e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d034      	beq.n	8007d50 <TIM_Base_SetConfig+0xe4>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cec:	d030      	beq.n	8007d50 <TIM_Base_SetConfig+0xe4>
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007cf4:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d029      	beq.n	8007d50 <TIM_Base_SetConfig+0xe4>
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007d02:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d022      	beq.n	8007d50 <TIM_Base_SetConfig+0xe4>
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007d10:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d01b      	beq.n	8007d50 <TIM_Base_SetConfig+0xe4>
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d1e:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d014      	beq.n	8007d50 <TIM_Base_SetConfig+0xe4>
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007d2c:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d00d      	beq.n	8007d50 <TIM_Base_SetConfig+0xe4>
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007d3a:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d006      	beq.n	8007d50 <TIM_Base_SetConfig+0xe4>
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8007d48:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d108      	bne.n	8007d62 <TIM_Base_SetConfig+0xf6>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	689a      	ldr	r2, [r3, #8]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	2300      	movs	r3, #0
 8007d8a:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d01b      	beq.n	8007dca <TIM_Base_SetConfig+0x15e>
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d98:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d014      	beq.n	8007dca <TIM_Base_SetConfig+0x15e>
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007da6:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d00d      	beq.n	8007dca <TIM_Base_SetConfig+0x15e>
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007db4:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d006      	beq.n	8007dca <TIM_Base_SetConfig+0x15e>
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8007dc2:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d103      	bne.n	8007dd2 <TIM_Base_SetConfig+0x166>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	691a      	ldr	r2, [r3, #16]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d105      	bne.n	8007df0 <TIM_Base_SetConfig+0x184>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	f023 0201 	bic.w	r2, r3, #1
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	611a      	str	r2, [r3, #16]
  }
}
 8007df0:	bf00      	nop
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d101      	bne.n	8007e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e10:	2302      	movs	r3, #2
 8007e12:	e086      	b.n	8007f22 <HAL_TIMEx_MasterConfigSynchronization+0x126>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d007      	beq.n	8007e52 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e4a:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d108      	bne.n	8007e64 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007e58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	2300      	movs	r3, #0
 8007e84:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d034      	beq.n	8007ef6 <HAL_TIMEx_MasterConfigSynchronization+0xfa>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e94:	d02f      	beq.n	8007ef6 <HAL_TIMEx_MasterConfigSynchronization+0xfa>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e9e:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d027      	beq.n	8007ef6 <HAL_TIMEx_MasterConfigSynchronization+0xfa>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007eae:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d01f      	beq.n	8007ef6 <HAL_TIMEx_MasterConfigSynchronization+0xfa>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007ebe:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d017      	beq.n	8007ef6 <HAL_TIMEx_MasterConfigSynchronization+0xfa>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ece:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d00f      	beq.n	8007ef6 <HAL_TIMEx_MasterConfigSynchronization+0xfa>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007ede:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d007      	beq.n	8007ef6 <HAL_TIMEx_MasterConfigSynchronization+0xfa>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007eee:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d10c      	bne.n	8007f10 <HAL_TIMEx_MasterConfigSynchronization+0x114>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007efc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b083      	sub	sp, #12
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f36:	bf00      	nop
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b083      	sub	sp, #12
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f4a:	bf00      	nop
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b083      	sub	sp, #12
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f5e:	bf00      	nop
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b082      	sub	sp, #8
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e042      	b.n	8008002 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d106      	bne.n	8007f94 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7f9 fb15 	bl	80015be <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2224      	movs	r2, #36	@ 0x24
 8007f98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 0201 	bic.w	r2, r2, #1
 8007faa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fddd 	bl	8008b74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f826 	bl	800800c <UART_SetConfig>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d101      	bne.n	8007fca <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e01b      	b.n	8008002 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007fd8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689a      	ldr	r2, [r3, #8]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007fe8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f042 0201 	orr.w	r2, r2, #1
 8007ff8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fe5c 	bl	8008cb8 <UART_CheckIdleState>
 8008000:	4603      	mov	r3, r0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
	...

0800800c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800800c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008010:	b092      	sub	sp, #72	@ 0x48
 8008012:	af00      	add	r7, sp, #0
 8008014:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	431a      	orrs	r2, r3
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	431a      	orrs	r2, r3
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	69db      	ldr	r3, [r3, #28]
 8008030:	4313      	orrs	r3, r2
 8008032:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	f646 13f3 	movw	r3, #27123	@ 0x69f3
 800803e:	f6cc 73ff 	movt	r3, #53247	@ 0xcfff
 8008042:	4013      	ands	r3, r2
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	6812      	ldr	r2, [r2, #0]
 8008048:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800804a:	430b      	orrs	r3, r1
 800804c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	68da      	ldr	r2, [r3, #12]
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	430a      	orrs	r2, r1
 8008062:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008072:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8008076:	429a      	cmp	r2, r3
 8008078:	d004      	beq.n	8008084 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008080:	4313      	orrs	r3, r2
 8008082:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	689a      	ldr	r2, [r3, #8]
 800808a:	f24f 43ff 	movw	r3, #62719	@ 0xf4ff
 800808e:	f2c1 13ff 	movt	r3, #4607	@ 0x11ff
 8008092:	4013      	ands	r3, r2
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	6812      	ldr	r2, [r2, #0]
 8008098:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800809a:	430b      	orrs	r3, r1
 800809c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a4:	f023 010f 	bic.w	r1, r3, #15
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80080bc:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d179      	bne.n	80081b8 <UART_SetConfig+0x1ac>
 80080c4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80080c8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80080cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080d2:	2b28      	cmp	r3, #40	@ 0x28
 80080d4:	d86c      	bhi.n	80081b0 <UART_SetConfig+0x1a4>
 80080d6:	a201      	add	r2, pc, #4	@ (adr r2, 80080dc <UART_SetConfig+0xd0>)
 80080d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080dc:	08008181 	.word	0x08008181
 80080e0:	080081b1 	.word	0x080081b1
 80080e4:	080081b1 	.word	0x080081b1
 80080e8:	080081b1 	.word	0x080081b1
 80080ec:	080081b1 	.word	0x080081b1
 80080f0:	080081b1 	.word	0x080081b1
 80080f4:	080081b1 	.word	0x080081b1
 80080f8:	080081b1 	.word	0x080081b1
 80080fc:	08008189 	.word	0x08008189
 8008100:	080081b1 	.word	0x080081b1
 8008104:	080081b1 	.word	0x080081b1
 8008108:	080081b1 	.word	0x080081b1
 800810c:	080081b1 	.word	0x080081b1
 8008110:	080081b1 	.word	0x080081b1
 8008114:	080081b1 	.word	0x080081b1
 8008118:	080081b1 	.word	0x080081b1
 800811c:	08008191 	.word	0x08008191
 8008120:	080081b1 	.word	0x080081b1
 8008124:	080081b1 	.word	0x080081b1
 8008128:	080081b1 	.word	0x080081b1
 800812c:	080081b1 	.word	0x080081b1
 8008130:	080081b1 	.word	0x080081b1
 8008134:	080081b1 	.word	0x080081b1
 8008138:	080081b1 	.word	0x080081b1
 800813c:	08008199 	.word	0x08008199
 8008140:	080081b1 	.word	0x080081b1
 8008144:	080081b1 	.word	0x080081b1
 8008148:	080081b1 	.word	0x080081b1
 800814c:	080081b1 	.word	0x080081b1
 8008150:	080081b1 	.word	0x080081b1
 8008154:	080081b1 	.word	0x080081b1
 8008158:	080081b1 	.word	0x080081b1
 800815c:	080081a1 	.word	0x080081a1
 8008160:	080081b1 	.word	0x080081b1
 8008164:	080081b1 	.word	0x080081b1
 8008168:	080081b1 	.word	0x080081b1
 800816c:	080081b1 	.word	0x080081b1
 8008170:	080081b1 	.word	0x080081b1
 8008174:	080081b1 	.word	0x080081b1
 8008178:	080081b1 	.word	0x080081b1
 800817c:	080081a9 	.word	0x080081a9
 8008180:	2301      	movs	r3, #1
 8008182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008186:	e240      	b.n	800860a <UART_SetConfig+0x5fe>
 8008188:	2304      	movs	r3, #4
 800818a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800818e:	e23c      	b.n	800860a <UART_SetConfig+0x5fe>
 8008190:	2308      	movs	r3, #8
 8008192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008196:	e238      	b.n	800860a <UART_SetConfig+0x5fe>
 8008198:	2310      	movs	r3, #16
 800819a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800819e:	e234      	b.n	800860a <UART_SetConfig+0x5fe>
 80081a0:	2320      	movs	r3, #32
 80081a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081a6:	e230      	b.n	800860a <UART_SetConfig+0x5fe>
 80081a8:	2340      	movs	r3, #64	@ 0x40
 80081aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ae:	e22c      	b.n	800860a <UART_SetConfig+0x5fe>
 80081b0:	2380      	movs	r3, #128	@ 0x80
 80081b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081b6:	e228      	b.n	800860a <UART_SetConfig+0x5fe>
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80081c0:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d133      	bne.n	8008230 <UART_SetConfig+0x224>
 80081c8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80081cc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80081d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081d2:	f003 0307 	and.w	r3, r3, #7
 80081d6:	2b05      	cmp	r3, #5
 80081d8:	d826      	bhi.n	8008228 <UART_SetConfig+0x21c>
 80081da:	a201      	add	r2, pc, #4	@ (adr r2, 80081e0 <UART_SetConfig+0x1d4>)
 80081dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e0:	080081f9 	.word	0x080081f9
 80081e4:	08008201 	.word	0x08008201
 80081e8:	08008209 	.word	0x08008209
 80081ec:	08008211 	.word	0x08008211
 80081f0:	08008219 	.word	0x08008219
 80081f4:	08008221 	.word	0x08008221
 80081f8:	2300      	movs	r3, #0
 80081fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081fe:	e204      	b.n	800860a <UART_SetConfig+0x5fe>
 8008200:	2304      	movs	r3, #4
 8008202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008206:	e200      	b.n	800860a <UART_SetConfig+0x5fe>
 8008208:	2308      	movs	r3, #8
 800820a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800820e:	e1fc      	b.n	800860a <UART_SetConfig+0x5fe>
 8008210:	2310      	movs	r3, #16
 8008212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008216:	e1f8      	b.n	800860a <UART_SetConfig+0x5fe>
 8008218:	2320      	movs	r3, #32
 800821a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800821e:	e1f4      	b.n	800860a <UART_SetConfig+0x5fe>
 8008220:	2340      	movs	r3, #64	@ 0x40
 8008222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008226:	e1f0      	b.n	800860a <UART_SetConfig+0x5fe>
 8008228:	2380      	movs	r3, #128	@ 0x80
 800822a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800822e:	e1ec      	b.n	800860a <UART_SetConfig+0x5fe>
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8008238:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800823c:	429a      	cmp	r2, r3
 800823e:	d133      	bne.n	80082a8 <UART_SetConfig+0x29c>
 8008240:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8008244:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8008248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800824a:	f003 0307 	and.w	r3, r3, #7
 800824e:	2b05      	cmp	r3, #5
 8008250:	d826      	bhi.n	80082a0 <UART_SetConfig+0x294>
 8008252:	a201      	add	r2, pc, #4	@ (adr r2, 8008258 <UART_SetConfig+0x24c>)
 8008254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008258:	08008271 	.word	0x08008271
 800825c:	08008279 	.word	0x08008279
 8008260:	08008281 	.word	0x08008281
 8008264:	08008289 	.word	0x08008289
 8008268:	08008291 	.word	0x08008291
 800826c:	08008299 	.word	0x08008299
 8008270:	2300      	movs	r3, #0
 8008272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008276:	e1c8      	b.n	800860a <UART_SetConfig+0x5fe>
 8008278:	2304      	movs	r3, #4
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800827e:	e1c4      	b.n	800860a <UART_SetConfig+0x5fe>
 8008280:	2308      	movs	r3, #8
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008286:	e1c0      	b.n	800860a <UART_SetConfig+0x5fe>
 8008288:	2310      	movs	r3, #16
 800828a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800828e:	e1bc      	b.n	800860a <UART_SetConfig+0x5fe>
 8008290:	2320      	movs	r3, #32
 8008292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008296:	e1b8      	b.n	800860a <UART_SetConfig+0x5fe>
 8008298:	2340      	movs	r3, #64	@ 0x40
 800829a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800829e:	e1b4      	b.n	800860a <UART_SetConfig+0x5fe>
 80082a0:	2380      	movs	r3, #128	@ 0x80
 80082a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082a6:	e1b0      	b.n	800860a <UART_SetConfig+0x5fe>
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	f44f 4398 	mov.w	r3, #19456	@ 0x4c00
 80082b0:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d133      	bne.n	8008320 <UART_SetConfig+0x314>
 80082b8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80082bc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80082c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082c2:	f003 0307 	and.w	r3, r3, #7
 80082c6:	2b05      	cmp	r3, #5
 80082c8:	d826      	bhi.n	8008318 <UART_SetConfig+0x30c>
 80082ca:	a201      	add	r2, pc, #4	@ (adr r2, 80082d0 <UART_SetConfig+0x2c4>)
 80082cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d0:	080082e9 	.word	0x080082e9
 80082d4:	080082f1 	.word	0x080082f1
 80082d8:	080082f9 	.word	0x080082f9
 80082dc:	08008301 	.word	0x08008301
 80082e0:	08008309 	.word	0x08008309
 80082e4:	08008311 	.word	0x08008311
 80082e8:	2300      	movs	r3, #0
 80082ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ee:	e18c      	b.n	800860a <UART_SetConfig+0x5fe>
 80082f0:	2304      	movs	r3, #4
 80082f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082f6:	e188      	b.n	800860a <UART_SetConfig+0x5fe>
 80082f8:	2308      	movs	r3, #8
 80082fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082fe:	e184      	b.n	800860a <UART_SetConfig+0x5fe>
 8008300:	2310      	movs	r3, #16
 8008302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008306:	e180      	b.n	800860a <UART_SetConfig+0x5fe>
 8008308:	2320      	movs	r3, #32
 800830a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800830e:	e17c      	b.n	800860a <UART_SetConfig+0x5fe>
 8008310:	2340      	movs	r3, #64	@ 0x40
 8008312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008316:	e178      	b.n	800860a <UART_SetConfig+0x5fe>
 8008318:	2380      	movs	r3, #128	@ 0x80
 800831a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800831e:	e174      	b.n	800860a <UART_SetConfig+0x5fe>
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8008328:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800832c:	429a      	cmp	r2, r3
 800832e:	d133      	bne.n	8008398 <UART_SetConfig+0x38c>
 8008330:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8008334:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8008338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800833a:	f003 0307 	and.w	r3, r3, #7
 800833e:	2b05      	cmp	r3, #5
 8008340:	d826      	bhi.n	8008390 <UART_SetConfig+0x384>
 8008342:	a201      	add	r2, pc, #4	@ (adr r2, 8008348 <UART_SetConfig+0x33c>)
 8008344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008348:	08008361 	.word	0x08008361
 800834c:	08008369 	.word	0x08008369
 8008350:	08008371 	.word	0x08008371
 8008354:	08008379 	.word	0x08008379
 8008358:	08008381 	.word	0x08008381
 800835c:	08008389 	.word	0x08008389
 8008360:	2300      	movs	r3, #0
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008366:	e150      	b.n	800860a <UART_SetConfig+0x5fe>
 8008368:	2304      	movs	r3, #4
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800836e:	e14c      	b.n	800860a <UART_SetConfig+0x5fe>
 8008370:	2308      	movs	r3, #8
 8008372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008376:	e148      	b.n	800860a <UART_SetConfig+0x5fe>
 8008378:	2310      	movs	r3, #16
 800837a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800837e:	e144      	b.n	800860a <UART_SetConfig+0x5fe>
 8008380:	2320      	movs	r3, #32
 8008382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008386:	e140      	b.n	800860a <UART_SetConfig+0x5fe>
 8008388:	2340      	movs	r3, #64	@ 0x40
 800838a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800838e:	e13c      	b.n	800860a <UART_SetConfig+0x5fe>
 8008390:	2380      	movs	r3, #128	@ 0x80
 8008392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008396:	e138      	b.n	800860a <UART_SetConfig+0x5fe>
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80083a0:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d179      	bne.n	800849c <UART_SetConfig+0x490>
 80083a8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80083ac:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80083b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80083b6:	2b28      	cmp	r3, #40	@ 0x28
 80083b8:	d86c      	bhi.n	8008494 <UART_SetConfig+0x488>
 80083ba:	a201      	add	r2, pc, #4	@ (adr r2, 80083c0 <UART_SetConfig+0x3b4>)
 80083bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c0:	08008465 	.word	0x08008465
 80083c4:	08008495 	.word	0x08008495
 80083c8:	08008495 	.word	0x08008495
 80083cc:	08008495 	.word	0x08008495
 80083d0:	08008495 	.word	0x08008495
 80083d4:	08008495 	.word	0x08008495
 80083d8:	08008495 	.word	0x08008495
 80083dc:	08008495 	.word	0x08008495
 80083e0:	0800846d 	.word	0x0800846d
 80083e4:	08008495 	.word	0x08008495
 80083e8:	08008495 	.word	0x08008495
 80083ec:	08008495 	.word	0x08008495
 80083f0:	08008495 	.word	0x08008495
 80083f4:	08008495 	.word	0x08008495
 80083f8:	08008495 	.word	0x08008495
 80083fc:	08008495 	.word	0x08008495
 8008400:	08008475 	.word	0x08008475
 8008404:	08008495 	.word	0x08008495
 8008408:	08008495 	.word	0x08008495
 800840c:	08008495 	.word	0x08008495
 8008410:	08008495 	.word	0x08008495
 8008414:	08008495 	.word	0x08008495
 8008418:	08008495 	.word	0x08008495
 800841c:	08008495 	.word	0x08008495
 8008420:	0800847d 	.word	0x0800847d
 8008424:	08008495 	.word	0x08008495
 8008428:	08008495 	.word	0x08008495
 800842c:	08008495 	.word	0x08008495
 8008430:	08008495 	.word	0x08008495
 8008434:	08008495 	.word	0x08008495
 8008438:	08008495 	.word	0x08008495
 800843c:	08008495 	.word	0x08008495
 8008440:	08008485 	.word	0x08008485
 8008444:	08008495 	.word	0x08008495
 8008448:	08008495 	.word	0x08008495
 800844c:	08008495 	.word	0x08008495
 8008450:	08008495 	.word	0x08008495
 8008454:	08008495 	.word	0x08008495
 8008458:	08008495 	.word	0x08008495
 800845c:	08008495 	.word	0x08008495
 8008460:	0800848d 	.word	0x0800848d
 8008464:	2301      	movs	r3, #1
 8008466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800846a:	e0ce      	b.n	800860a <UART_SetConfig+0x5fe>
 800846c:	2304      	movs	r3, #4
 800846e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008472:	e0ca      	b.n	800860a <UART_SetConfig+0x5fe>
 8008474:	2308      	movs	r3, #8
 8008476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800847a:	e0c6      	b.n	800860a <UART_SetConfig+0x5fe>
 800847c:	2310      	movs	r3, #16
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008482:	e0c2      	b.n	800860a <UART_SetConfig+0x5fe>
 8008484:	2320      	movs	r3, #32
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800848a:	e0be      	b.n	800860a <UART_SetConfig+0x5fe>
 800848c:	2340      	movs	r3, #64	@ 0x40
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008492:	e0ba      	b.n	800860a <UART_SetConfig+0x5fe>
 8008494:	2380      	movs	r3, #128	@ 0x80
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800849a:	e0b6      	b.n	800860a <UART_SetConfig+0x5fe>
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80084a4:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d133      	bne.n	8008514 <UART_SetConfig+0x508>
 80084ac:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80084b0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80084b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084b6:	f003 0307 	and.w	r3, r3, #7
 80084ba:	2b05      	cmp	r3, #5
 80084bc:	d826      	bhi.n	800850c <UART_SetConfig+0x500>
 80084be:	a201      	add	r2, pc, #4	@ (adr r2, 80084c4 <UART_SetConfig+0x4b8>)
 80084c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c4:	080084dd 	.word	0x080084dd
 80084c8:	080084e5 	.word	0x080084e5
 80084cc:	080084ed 	.word	0x080084ed
 80084d0:	080084f5 	.word	0x080084f5
 80084d4:	080084fd 	.word	0x080084fd
 80084d8:	08008505 	.word	0x08008505
 80084dc:	2300      	movs	r3, #0
 80084de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084e2:	e092      	b.n	800860a <UART_SetConfig+0x5fe>
 80084e4:	2304      	movs	r3, #4
 80084e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ea:	e08e      	b.n	800860a <UART_SetConfig+0x5fe>
 80084ec:	2308      	movs	r3, #8
 80084ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084f2:	e08a      	b.n	800860a <UART_SetConfig+0x5fe>
 80084f4:	2310      	movs	r3, #16
 80084f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084fa:	e086      	b.n	800860a <UART_SetConfig+0x5fe>
 80084fc:	2320      	movs	r3, #32
 80084fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008502:	e082      	b.n	800860a <UART_SetConfig+0x5fe>
 8008504:	2340      	movs	r3, #64	@ 0x40
 8008506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800850a:	e07e      	b.n	800860a <UART_SetConfig+0x5fe>
 800850c:	2380      	movs	r3, #128	@ 0x80
 800850e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008512:	e07a      	b.n	800860a <UART_SetConfig+0x5fe>
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	f44f 43f8 	mov.w	r3, #31744	@ 0x7c00
 800851c:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8008520:	429a      	cmp	r2, r3
 8008522:	d133      	bne.n	800858c <UART_SetConfig+0x580>
 8008524:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8008528:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800852c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800852e:	f003 0307 	and.w	r3, r3, #7
 8008532:	2b05      	cmp	r3, #5
 8008534:	d826      	bhi.n	8008584 <UART_SetConfig+0x578>
 8008536:	a201      	add	r2, pc, #4	@ (adr r2, 800853c <UART_SetConfig+0x530>)
 8008538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853c:	08008555 	.word	0x08008555
 8008540:	0800855d 	.word	0x0800855d
 8008544:	08008565 	.word	0x08008565
 8008548:	0800856d 	.word	0x0800856d
 800854c:	08008575 	.word	0x08008575
 8008550:	0800857d 	.word	0x0800857d
 8008554:	2300      	movs	r3, #0
 8008556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800855a:	e056      	b.n	800860a <UART_SetConfig+0x5fe>
 800855c:	2304      	movs	r3, #4
 800855e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008562:	e052      	b.n	800860a <UART_SetConfig+0x5fe>
 8008564:	2308      	movs	r3, #8
 8008566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800856a:	e04e      	b.n	800860a <UART_SetConfig+0x5fe>
 800856c:	2310      	movs	r3, #16
 800856e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008572:	e04a      	b.n	800860a <UART_SetConfig+0x5fe>
 8008574:	2320      	movs	r3, #32
 8008576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800857a:	e046      	b.n	800860a <UART_SetConfig+0x5fe>
 800857c:	2340      	movs	r3, #64	@ 0x40
 800857e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008582:	e042      	b.n	800860a <UART_SetConfig+0x5fe>
 8008584:	2380      	movs	r3, #128	@ 0x80
 8008586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800858a:	e03e      	b.n	800860a <UART_SetConfig+0x5fe>
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008594:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8008598:	429a      	cmp	r2, r3
 800859a:	d133      	bne.n	8008604 <UART_SetConfig+0x5f8>
 800859c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80085a0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80085a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	2b05      	cmp	r3, #5
 80085ac:	d826      	bhi.n	80085fc <UART_SetConfig+0x5f0>
 80085ae:	a201      	add	r2, pc, #4	@ (adr r2, 80085b4 <UART_SetConfig+0x5a8>)
 80085b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b4:	080085cd 	.word	0x080085cd
 80085b8:	080085d5 	.word	0x080085d5
 80085bc:	080085dd 	.word	0x080085dd
 80085c0:	080085e5 	.word	0x080085e5
 80085c4:	080085ed 	.word	0x080085ed
 80085c8:	080085f5 	.word	0x080085f5
 80085cc:	2302      	movs	r3, #2
 80085ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085d2:	e01a      	b.n	800860a <UART_SetConfig+0x5fe>
 80085d4:	2304      	movs	r3, #4
 80085d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085da:	e016      	b.n	800860a <UART_SetConfig+0x5fe>
 80085dc:	2308      	movs	r3, #8
 80085de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085e2:	e012      	b.n	800860a <UART_SetConfig+0x5fe>
 80085e4:	2310      	movs	r3, #16
 80085e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ea:	e00e      	b.n	800860a <UART_SetConfig+0x5fe>
 80085ec:	2320      	movs	r3, #32
 80085ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085f2:	e00a      	b.n	800860a <UART_SetConfig+0x5fe>
 80085f4:	2340      	movs	r3, #64	@ 0x40
 80085f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085fa:	e006      	b.n	800860a <UART_SetConfig+0x5fe>
 80085fc:	2380      	movs	r3, #128	@ 0x80
 80085fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008602:	e002      	b.n	800860a <UART_SetConfig+0x5fe>
 8008604:	2380      	movs	r3, #128	@ 0x80
 8008606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008612:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8008616:	429a      	cmp	r2, r3
 8008618:	f040 8100 	bne.w	800881c <UART_SetConfig+0x810>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800861c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008620:	2b20      	cmp	r3, #32
 8008622:	dc47      	bgt.n	80086b4 <UART_SetConfig+0x6a8>
 8008624:	2b02      	cmp	r3, #2
 8008626:	f2c0 8084 	blt.w	8008732 <UART_SetConfig+0x726>
 800862a:	3b02      	subs	r3, #2
 800862c:	2b1e      	cmp	r3, #30
 800862e:	f200 8080 	bhi.w	8008732 <UART_SetConfig+0x726>
 8008632:	a201      	add	r2, pc, #4	@ (adr r2, 8008638 <UART_SetConfig+0x62c>)
 8008634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008638:	080086bb 	.word	0x080086bb
 800863c:	08008733 	.word	0x08008733
 8008640:	080086c3 	.word	0x080086c3
 8008644:	08008733 	.word	0x08008733
 8008648:	08008733 	.word	0x08008733
 800864c:	08008733 	.word	0x08008733
 8008650:	080086d3 	.word	0x080086d3
 8008654:	08008733 	.word	0x08008733
 8008658:	08008733 	.word	0x08008733
 800865c:	08008733 	.word	0x08008733
 8008660:	08008733 	.word	0x08008733
 8008664:	08008733 	.word	0x08008733
 8008668:	08008733 	.word	0x08008733
 800866c:	08008733 	.word	0x08008733
 8008670:	080086e3 	.word	0x080086e3
 8008674:	08008733 	.word	0x08008733
 8008678:	08008733 	.word	0x08008733
 800867c:	08008733 	.word	0x08008733
 8008680:	08008733 	.word	0x08008733
 8008684:	08008733 	.word	0x08008733
 8008688:	08008733 	.word	0x08008733
 800868c:	08008733 	.word	0x08008733
 8008690:	08008733 	.word	0x08008733
 8008694:	08008733 	.word	0x08008733
 8008698:	08008733 	.word	0x08008733
 800869c:	08008733 	.word	0x08008733
 80086a0:	08008733 	.word	0x08008733
 80086a4:	08008733 	.word	0x08008733
 80086a8:	08008733 	.word	0x08008733
 80086ac:	08008733 	.word	0x08008733
 80086b0:	0800871f 	.word	0x0800871f
 80086b4:	2b40      	cmp	r3, #64	@ 0x40
 80086b6:	d038      	beq.n	800872a <UART_SetConfig+0x71e>
 80086b8:	e03b      	b.n	8008732 <UART_SetConfig+0x726>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80086ba:	f7fe fa8d 	bl	8006bd8 <HAL_RCCEx_GetD3PCLK1Freq>
 80086be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80086c0:	e03d      	b.n	800873e <UART_SetConfig+0x732>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fe fa9e 	bl	8006c08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80086cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086d0:	e035      	b.n	800873e <UART_SetConfig+0x732>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086d2:	f107 0318 	add.w	r3, r7, #24
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fe fc23 	bl	8006f22 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086e0:	e02d      	b.n	800873e <UART_SetConfig+0x732>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086e2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80086e6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0320 	and.w	r3, r3, #32
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00e      	beq.n	8008712 <UART_SetConfig+0x706>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80086f4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80086f8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	08db      	lsrs	r3, r3, #3
 8008700:	f003 0203 	and.w	r2, r3, #3
 8008704:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8008708:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 800870c:	40d3      	lsrs	r3, r2
 800870e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008710:	e015      	b.n	800873e <UART_SetConfig+0x732>
          pclk = (uint32_t) HSI_VALUE;
 8008712:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8008716:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 800871a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800871c:	e00f      	b.n	800873e <UART_SetConfig+0x732>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800871e:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8008722:	f2c0 033d 	movt	r3, #61	@ 0x3d
 8008726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008728:	e009      	b.n	800873e <UART_SetConfig+0x732>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800872a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800872e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008730:	e005      	b.n	800873e <UART_SetConfig+0x732>
      default:
        pclk = 0U;
 8008732:	2300      	movs	r3, #0
 8008734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800873c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800873e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 8202 	beq.w	8008b4a <UART_SetConfig+0xb3e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800874a:	f649 0358 	movw	r3, #39000	@ 0x9858
 800874e:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8008752:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008756:	461a      	mov	r2, r3
 8008758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800875a:	fbb3 f3f2 	udiv	r3, r3, r2
 800875e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	685a      	ldr	r2, [r3, #4]
 8008764:	4613      	mov	r3, r2
 8008766:	005b      	lsls	r3, r3, #1
 8008768:	4413      	add	r3, r2
 800876a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800876c:	429a      	cmp	r2, r3
 800876e:	d305      	bcc.n	800877c <UART_SetConfig+0x770>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008778:	429a      	cmp	r2, r3
 800877a:	d903      	bls.n	8008784 <UART_SetConfig+0x778>
      {
        ret = HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008782:	e1e2      	b.n	8008b4a <UART_SetConfig+0xb3e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008786:	2200      	movs	r2, #0
 8008788:	60bb      	str	r3, [r7, #8]
 800878a:	60fa      	str	r2, [r7, #12]
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008790:	f649 0358 	movw	r3, #39000	@ 0x9858
 8008794:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8008798:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800879c:	b29b      	uxth	r3, r3
 800879e:	2200      	movs	r2, #0
 80087a0:	603b      	str	r3, [r7, #0]
 80087a2:	607a      	str	r2, [r7, #4]
 80087a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087ac:	f7f7 fd94 	bl	80002d8 <__aeabi_uldivmod>
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	4610      	mov	r0, r2
 80087b6:	4619      	mov	r1, r3
 80087b8:	f04f 0200 	mov.w	r2, #0
 80087bc:	f04f 0300 	mov.w	r3, #0
 80087c0:	020b      	lsls	r3, r1, #8
 80087c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80087c6:	0202      	lsls	r2, r0, #8
 80087c8:	6979      	ldr	r1, [r7, #20]
 80087ca:	6849      	ldr	r1, [r1, #4]
 80087cc:	0849      	lsrs	r1, r1, #1
 80087ce:	2000      	movs	r0, #0
 80087d0:	460c      	mov	r4, r1
 80087d2:	4605      	mov	r5, r0
 80087d4:	eb12 0804 	adds.w	r8, r2, r4
 80087d8:	eb43 0905 	adc.w	r9, r3, r5
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	469a      	mov	sl, r3
 80087e4:	4693      	mov	fp, r2
 80087e6:	4652      	mov	r2, sl
 80087e8:	465b      	mov	r3, fp
 80087ea:	4640      	mov	r0, r8
 80087ec:	4649      	mov	r1, r9
 80087ee:	f7f7 fd73 	bl	80002d8 <__aeabi_uldivmod>
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	4613      	mov	r3, r2
 80087f8:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008800:	d308      	bcc.n	8008814 <UART_SetConfig+0x808>
 8008802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008804:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008808:	d204      	bcs.n	8008814 <UART_SetConfig+0x808>
        {
          huart->Instance->BRR = usartdiv;
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008810:	60da      	str	r2, [r3, #12]
 8008812:	e19a      	b.n	8008b4a <UART_SetConfig+0xb3e>
        }
        else
        {
          ret = HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800881a:	e196      	b.n	8008b4a <UART_SetConfig+0xb3e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	69db      	ldr	r3, [r3, #28]
 8008820:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008824:	f040 80d1 	bne.w	80089ca <UART_SetConfig+0x9be>
  {
    switch (clocksource)
 8008828:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800882c:	2b20      	cmp	r3, #32
 800882e:	dc4b      	bgt.n	80088c8 <UART_SetConfig+0x8bc>
 8008830:	2b00      	cmp	r3, #0
 8008832:	f2c0 808c 	blt.w	800894e <UART_SetConfig+0x942>
 8008836:	2b20      	cmp	r3, #32
 8008838:	f200 8089 	bhi.w	800894e <UART_SetConfig+0x942>
 800883c:	a201      	add	r2, pc, #4	@ (adr r2, 8008844 <UART_SetConfig+0x838>)
 800883e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008842:	bf00      	nop
 8008844:	080088cf 	.word	0x080088cf
 8008848:	080088d7 	.word	0x080088d7
 800884c:	0800894f 	.word	0x0800894f
 8008850:	0800894f 	.word	0x0800894f
 8008854:	080088df 	.word	0x080088df
 8008858:	0800894f 	.word	0x0800894f
 800885c:	0800894f 	.word	0x0800894f
 8008860:	0800894f 	.word	0x0800894f
 8008864:	080088ef 	.word	0x080088ef
 8008868:	0800894f 	.word	0x0800894f
 800886c:	0800894f 	.word	0x0800894f
 8008870:	0800894f 	.word	0x0800894f
 8008874:	0800894f 	.word	0x0800894f
 8008878:	0800894f 	.word	0x0800894f
 800887c:	0800894f 	.word	0x0800894f
 8008880:	0800894f 	.word	0x0800894f
 8008884:	080088ff 	.word	0x080088ff
 8008888:	0800894f 	.word	0x0800894f
 800888c:	0800894f 	.word	0x0800894f
 8008890:	0800894f 	.word	0x0800894f
 8008894:	0800894f 	.word	0x0800894f
 8008898:	0800894f 	.word	0x0800894f
 800889c:	0800894f 	.word	0x0800894f
 80088a0:	0800894f 	.word	0x0800894f
 80088a4:	0800894f 	.word	0x0800894f
 80088a8:	0800894f 	.word	0x0800894f
 80088ac:	0800894f 	.word	0x0800894f
 80088b0:	0800894f 	.word	0x0800894f
 80088b4:	0800894f 	.word	0x0800894f
 80088b8:	0800894f 	.word	0x0800894f
 80088bc:	0800894f 	.word	0x0800894f
 80088c0:	0800894f 	.word	0x0800894f
 80088c4:	0800893b 	.word	0x0800893b
 80088c8:	2b40      	cmp	r3, #64	@ 0x40
 80088ca:	d03c      	beq.n	8008946 <UART_SetConfig+0x93a>
 80088cc:	e03f      	b.n	800894e <UART_SetConfig+0x942>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088ce:	f7fb ff91 	bl	80047f4 <HAL_RCC_GetPCLK1Freq>
 80088d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80088d4:	e041      	b.n	800895a <UART_SetConfig+0x94e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088d6:	f7fb ffa5 	bl	8004824 <HAL_RCC_GetPCLK2Freq>
 80088da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80088dc:	e03d      	b.n	800895a <UART_SetConfig+0x94e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe f990 	bl	8006c08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80088e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088ec:	e035      	b.n	800895a <UART_SetConfig+0x94e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088ee:	f107 0318 	add.w	r3, r7, #24
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fe fb15 	bl	8006f22 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088fc:	e02d      	b.n	800895a <UART_SetConfig+0x94e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088fe:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8008902:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0320 	and.w	r3, r3, #32
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00e      	beq.n	800892e <UART_SetConfig+0x922>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008910:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8008914:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	08db      	lsrs	r3, r3, #3
 800891c:	f003 0203 	and.w	r2, r3, #3
 8008920:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8008924:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8008928:	40d3      	lsrs	r3, r2
 800892a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800892c:	e015      	b.n	800895a <UART_SetConfig+0x94e>
          pclk = (uint32_t) HSI_VALUE;
 800892e:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8008932:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8008936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008938:	e00f      	b.n	800895a <UART_SetConfig+0x94e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800893a:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800893e:	f2c0 033d 	movt	r3, #61	@ 0x3d
 8008942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008944:	e009      	b.n	800895a <UART_SetConfig+0x94e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800894a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800894c:	e005      	b.n	800895a <UART_SetConfig+0x94e>
      default:
        pclk = 0U;
 800894e:	2300      	movs	r3, #0
 8008950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008958:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800895a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800895c:	2b00      	cmp	r3, #0
 800895e:	f000 80f4 	beq.w	8008b4a <UART_SetConfig+0xb3e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008966:	f649 0358 	movw	r3, #39000	@ 0x9858
 800896a:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800896e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008972:	461a      	mov	r2, r3
 8008974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008976:	fbb3 f3f2 	udiv	r3, r3, r2
 800897a:	005a      	lsls	r2, r3, #1
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	085b      	lsrs	r3, r3, #1
 8008982:	441a      	add	r2, r3
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	fbb2 f3f3 	udiv	r3, r2, r3
 800898c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800898e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008990:	2b0f      	cmp	r3, #15
 8008992:	d916      	bls.n	80089c2 <UART_SetConfig+0x9b6>
 8008994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008996:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800899a:	d212      	bcs.n	80089c2 <UART_SetConfig+0x9b6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800899c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800899e:	b29b      	uxth	r3, r3
 80089a0:	f023 030f 	bic.w	r3, r3, #15
 80089a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a8:	085b      	lsrs	r3, r3, #1
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	f003 0307 	and.w	r3, r3, #7
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80089b4:	4313      	orrs	r3, r2
 80089b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80089be:	60da      	str	r2, [r3, #12]
 80089c0:	e0c3      	b.n	8008b4a <UART_SetConfig+0xb3e>
      }
      else
      {
        ret = HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80089c8:	e0bf      	b.n	8008b4a <UART_SetConfig+0xb3e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80089ce:	2b20      	cmp	r3, #32
 80089d0:	dc4a      	bgt.n	8008a68 <UART_SetConfig+0xa5c>
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f2c0 808b 	blt.w	8008aee <UART_SetConfig+0xae2>
 80089d8:	2b20      	cmp	r3, #32
 80089da:	f200 8088 	bhi.w	8008aee <UART_SetConfig+0xae2>
 80089de:	a201      	add	r2, pc, #4	@ (adr r2, 80089e4 <UART_SetConfig+0x9d8>)
 80089e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e4:	08008a6f 	.word	0x08008a6f
 80089e8:	08008a77 	.word	0x08008a77
 80089ec:	08008aef 	.word	0x08008aef
 80089f0:	08008aef 	.word	0x08008aef
 80089f4:	08008a7f 	.word	0x08008a7f
 80089f8:	08008aef 	.word	0x08008aef
 80089fc:	08008aef 	.word	0x08008aef
 8008a00:	08008aef 	.word	0x08008aef
 8008a04:	08008a8f 	.word	0x08008a8f
 8008a08:	08008aef 	.word	0x08008aef
 8008a0c:	08008aef 	.word	0x08008aef
 8008a10:	08008aef 	.word	0x08008aef
 8008a14:	08008aef 	.word	0x08008aef
 8008a18:	08008aef 	.word	0x08008aef
 8008a1c:	08008aef 	.word	0x08008aef
 8008a20:	08008aef 	.word	0x08008aef
 8008a24:	08008a9f 	.word	0x08008a9f
 8008a28:	08008aef 	.word	0x08008aef
 8008a2c:	08008aef 	.word	0x08008aef
 8008a30:	08008aef 	.word	0x08008aef
 8008a34:	08008aef 	.word	0x08008aef
 8008a38:	08008aef 	.word	0x08008aef
 8008a3c:	08008aef 	.word	0x08008aef
 8008a40:	08008aef 	.word	0x08008aef
 8008a44:	08008aef 	.word	0x08008aef
 8008a48:	08008aef 	.word	0x08008aef
 8008a4c:	08008aef 	.word	0x08008aef
 8008a50:	08008aef 	.word	0x08008aef
 8008a54:	08008aef 	.word	0x08008aef
 8008a58:	08008aef 	.word	0x08008aef
 8008a5c:	08008aef 	.word	0x08008aef
 8008a60:	08008aef 	.word	0x08008aef
 8008a64:	08008adb 	.word	0x08008adb
 8008a68:	2b40      	cmp	r3, #64	@ 0x40
 8008a6a:	d03c      	beq.n	8008ae6 <UART_SetConfig+0xada>
 8008a6c:	e03f      	b.n	8008aee <UART_SetConfig+0xae2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a6e:	f7fb fec1 	bl	80047f4 <HAL_RCC_GetPCLK1Freq>
 8008a72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a74:	e041      	b.n	8008afa <UART_SetConfig+0xaee>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a76:	f7fb fed5 	bl	8004824 <HAL_RCC_GetPCLK2Freq>
 8008a7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a7c:	e03d      	b.n	8008afa <UART_SetConfig+0xaee>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fe f8c0 	bl	8006c08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a8c:	e035      	b.n	8008afa <UART_SetConfig+0xaee>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a8e:	f107 0318 	add.w	r3, r7, #24
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fe fa45 	bl	8006f22 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a9c:	e02d      	b.n	8008afa <UART_SetConfig+0xaee>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a9e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8008aa2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 0320 	and.w	r3, r3, #32
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00e      	beq.n	8008ace <UART_SetConfig+0xac2>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ab0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8008ab4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	08db      	lsrs	r3, r3, #3
 8008abc:	f003 0203 	and.w	r2, r3, #3
 8008ac0:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8008ac4:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8008ac8:	40d3      	lsrs	r3, r2
 8008aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008acc:	e015      	b.n	8008afa <UART_SetConfig+0xaee>
          pclk = (uint32_t) HSI_VALUE;
 8008ace:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8008ad2:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8008ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ad8:	e00f      	b.n	8008afa <UART_SetConfig+0xaee>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ada:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8008ade:	f2c0 033d 	movt	r3, #61	@ 0x3d
 8008ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ae4:	e009      	b.n	8008afa <UART_SetConfig+0xaee>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aec:	e005      	b.n	8008afa <UART_SetConfig+0xaee>
      default:
        pclk = 0U;
 8008aee:	2300      	movs	r3, #0
 8008af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008af8:	bf00      	nop
    }

    if (pclk != 0U)
 8008afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d024      	beq.n	8008b4a <UART_SetConfig+0xb3e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b04:	f649 0358 	movw	r3, #39000	@ 0x9858
 8008b08:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8008b0c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008b10:	461a      	mov	r2, r3
 8008b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b14:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	085b      	lsrs	r3, r3, #1
 8008b1e:	441a      	add	r2, r3
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b28:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2c:	2b0f      	cmp	r3, #15
 8008b2e:	d909      	bls.n	8008b44 <UART_SetConfig+0xb38>
 8008b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b36:	d205      	bcs.n	8008b44 <UART_SetConfig+0xb38>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	60da      	str	r2, [r3, #12]
 8008b42:	e002      	b.n	8008b4a <UART_SetConfig+0xb3e>
      }
      else
      {
        ret = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	2200      	movs	r2, #0
 8008b64:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008b66:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3748      	adds	r7, #72	@ 0x48
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b80:	f003 0308 	and.w	r3, r3, #8
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00a      	beq.n	8008b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc4:	f003 0302 	and.w	r3, r3, #2
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00a      	beq.n	8008be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be6:	f003 0304 	and.w	r3, r3, #4
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00a      	beq.n	8008c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	430a      	orrs	r2, r1
 8008c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c08:	f003 0310 	and.w	r3, r3, #16
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00a      	beq.n	8008c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c2a:	f003 0320 	and.w	r3, r3, #32
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d01a      	beq.n	8008c8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	430a      	orrs	r2, r1
 8008c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c72:	d10a      	bne.n	8008c8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	430a      	orrs	r2, r1
 8008c88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00a      	beq.n	8008cac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	430a      	orrs	r2, r1
 8008caa:	605a      	str	r2, [r3, #4]
  }
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b098      	sub	sp, #96	@ 0x60
 8008cbc:	af02      	add	r7, sp, #8
 8008cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cc8:	f7f8 fea2 	bl	8001a10 <HAL_GetTick>
 8008ccc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0308 	and.w	r3, r3, #8
 8008cd8:	2b08      	cmp	r3, #8
 8008cda:	d12f      	bne.n	8008d3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f88e 	bl	8008e0c <UART_WaitOnFlagUntilTimeout>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d022      	beq.n	8008d3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfe:	e853 3f00 	ldrex	r3, [r3]
 8008d02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	461a      	mov	r2, r3
 8008d12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d14:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d16:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d1c:	e841 2300 	strex	r3, r2, [r1]
 8008d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1e6      	bne.n	8008cf6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2220      	movs	r2, #32
 8008d2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	e063      	b.n	8008e04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 0304 	and.w	r3, r3, #4
 8008d46:	2b04      	cmp	r3, #4
 8008d48:	d149      	bne.n	8008dde <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d52:	2200      	movs	r2, #0
 8008d54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f857 	bl	8008e0c <UART_WaitOnFlagUntilTimeout>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d03c      	beq.n	8008dde <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6c:	e853 3f00 	ldrex	r3, [r3]
 8008d70:	623b      	str	r3, [r7, #32]
   return(result);
 8008d72:	6a3b      	ldr	r3, [r7, #32]
 8008d74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d82:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d8a:	e841 2300 	strex	r3, r2, [r1]
 8008d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1e6      	bne.n	8008d64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3308      	adds	r3, #8
 8008d9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	e853 3f00 	ldrex	r3, [r3]
 8008da4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f023 0301 	bic.w	r3, r3, #1
 8008dac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3308      	adds	r3, #8
 8008db4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008db6:	61fa      	str	r2, [r7, #28]
 8008db8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dba:	69b9      	ldr	r1, [r7, #24]
 8008dbc:	69fa      	ldr	r2, [r7, #28]
 8008dbe:	e841 2300 	strex	r3, r2, [r1]
 8008dc2:	617b      	str	r3, [r7, #20]
   return(result);
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1e5      	bne.n	8008d96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2220      	movs	r2, #32
 8008dce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e012      	b.n	8008e04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2220      	movs	r2, #32
 8008de2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2220      	movs	r2, #32
 8008dea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3758      	adds	r7, #88	@ 0x58
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	603b      	str	r3, [r7, #0]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e1c:	e04f      	b.n	8008ebe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e24:	d04b      	beq.n	8008ebe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e26:	f7f8 fdf3 	bl	8001a10 <HAL_GetTick>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	69ba      	ldr	r2, [r7, #24]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d302      	bcc.n	8008e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d101      	bne.n	8008e40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e04e      	b.n	8008ede <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0304 	and.w	r3, r3, #4
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d037      	beq.n	8008ebe <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	2b80      	cmp	r3, #128	@ 0x80
 8008e52:	d034      	beq.n	8008ebe <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2b40      	cmp	r3, #64	@ 0x40
 8008e58:	d031      	beq.n	8008ebe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	69db      	ldr	r3, [r3, #28]
 8008e60:	f003 0308 	and.w	r3, r3, #8
 8008e64:	2b08      	cmp	r3, #8
 8008e66:	d110      	bne.n	8008e8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2208      	movs	r2, #8
 8008e6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f000 f838 	bl	8008ee6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2208      	movs	r2, #8
 8008e7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e029      	b.n	8008ede <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	69db      	ldr	r3, [r3, #28]
 8008e90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e98:	d111      	bne.n	8008ebe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008ea2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 f81e 	bl	8008ee6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2220      	movs	r2, #32
 8008eae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e00f      	b.n	8008ede <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	69da      	ldr	r2, [r3, #28]
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	bf0c      	ite	eq
 8008ece:	2301      	moveq	r3, #1
 8008ed0:	2300      	movne	r3, #0
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	79fb      	ldrb	r3, [r7, #7]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d0a0      	beq.n	8008e1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b095      	sub	sp, #84	@ 0x54
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ef6:	e853 3f00 	ldrex	r3, [r3]
 8008efa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f14:	e841 2300 	strex	r3, r2, [r1]
 8008f18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1e6      	bne.n	8008eee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3308      	adds	r3, #8
 8008f26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f28:	6a3b      	ldr	r3, [r7, #32]
 8008f2a:	e853 3f00 	ldrex	r3, [r3]
 8008f2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f30:	69fa      	ldr	r2, [r7, #28]
 8008f32:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8008f36:	f6ce 73ff 	movt	r3, #61439	@ 0xefff
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3308      	adds	r3, #8
 8008f44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f4e:	e841 2300 	strex	r3, r2, [r1]
 8008f52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1e2      	bne.n	8008f20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d118      	bne.n	8008f94 <UART_EndRxTransfer+0xae>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	e853 3f00 	ldrex	r3, [r3]
 8008f6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f023 0310 	bic.w	r3, r3, #16
 8008f76:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f80:	61bb      	str	r3, [r7, #24]
 8008f82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f84:	6979      	ldr	r1, [r7, #20]
 8008f86:	69ba      	ldr	r2, [r7, #24]
 8008f88:	e841 2300 	strex	r3, r2, [r1]
 8008f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1e6      	bne.n	8008f62 <UART_EndRxTransfer+0x7c>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2220      	movs	r2, #32
 8008f98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008fa8:	bf00      	nop
 8008faa:	3754      	adds	r7, #84	@ 0x54
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d101      	bne.n	8008fca <HAL_UARTEx_DisableFifoMode+0x16>
 8008fc6:	2302      	movs	r3, #2
 8008fc8:	e027      	b.n	800901a <HAL_UARTEx_DisableFifoMode+0x66>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2224      	movs	r2, #36	@ 0x24
 8008fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f022 0201 	bic.w	r2, r2, #1
 8008ff0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008ff8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2220      	movs	r2, #32
 800900c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009036:	2b01      	cmp	r3, #1
 8009038:	d101      	bne.n	800903e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800903a:	2302      	movs	r3, #2
 800903c:	e02d      	b.n	800909a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2224      	movs	r2, #36	@ 0x24
 800904a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f022 0201 	bic.w	r2, r2, #1
 8009064:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f84f 	bl	800911e <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2220      	movs	r2, #32
 800908c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b084      	sub	sp, #16
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d101      	bne.n	80090ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80090b6:	2302      	movs	r3, #2
 80090b8:	e02d      	b.n	8009116 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2224      	movs	r2, #36	@ 0x24
 80090c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f022 0201 	bic.w	r2, r2, #1
 80090e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	683a      	ldr	r2, [r7, #0]
 80090f2:	430a      	orrs	r2, r1
 80090f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f811 	bl	800911e <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2220      	movs	r2, #32
 8009108:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800911e:	b480      	push	{r7}
 8009120:	b085      	sub	sp, #20
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800912a:	2b00      	cmp	r3, #0
 800912c:	d108      	bne.n	8009140 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2201      	movs	r2, #1
 8009132:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2201      	movs	r2, #1
 800913a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800913e:	e03d      	b.n	80091bc <UARTEx_SetNbDataToProcess+0x9e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009140:	2310      	movs	r3, #16
 8009142:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009144:	2310      	movs	r3, #16
 8009146:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	0e5b      	lsrs	r3, r3, #25
 8009150:	b2db      	uxtb	r3, r3
 8009152:	f003 0307 	and.w	r3, r3, #7
 8009156:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	0f5b      	lsrs	r3, r3, #29
 8009160:	b2db      	uxtb	r3, r3
 8009162:	f003 0307 	and.w	r3, r3, #7
 8009166:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009168:	7bba      	ldrb	r2, [r7, #14]
 800916a:	7b39      	ldrb	r1, [r7, #12]
 800916c:	f649 0370 	movw	r3, #39024	@ 0x9870
 8009170:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8009174:	5c5b      	ldrb	r3, [r3, r1]
 8009176:	fb03 f202 	mul.w	r2, r3, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800917a:	7b39      	ldrb	r1, [r7, #12]
 800917c:	f649 0378 	movw	r3, #39032	@ 0x9878
 8009180:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8009184:	5c5b      	ldrb	r3, [r3, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009186:	fb92 f3f3 	sdiv	r3, r2, r3
 800918a:	b29a      	uxth	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009192:	7bfa      	ldrb	r2, [r7, #15]
 8009194:	7b79      	ldrb	r1, [r7, #13]
 8009196:	f649 0370 	movw	r3, #39024	@ 0x9870
 800919a:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800919e:	5c5b      	ldrb	r3, [r3, r1]
 80091a0:	fb03 f202 	mul.w	r2, r3, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80091a4:	7b79      	ldrb	r1, [r7, #13]
 80091a6:	f649 0378 	movw	r3, #39032	@ 0x9878
 80091aa:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80091ae:	5c5b      	ldrb	r3, [r3, r1]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80091bc:	bf00      	nop
 80091be:	3714      	adds	r7, #20
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80091c8:	b084      	sub	sp, #16
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b084      	sub	sp, #16
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	f107 001c 	add.w	r0, r7, #28
 80091d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80091da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d124      	bne.n	800922c <USB_CoreInit+0x64>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	68da      	ldr	r2, [r3, #12]
 80091f2:	f64f 73bf 	movw	r3, #65471	@ 0xffbf
 80091f6:	f6cf 73bd 	movt	r3, #65469	@ 0xffbd
 80091fa:	4013      	ands	r3, r2
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800920c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009210:	2b01      	cmp	r3, #1
 8009212:	d105      	bne.n	8009220 <USB_CoreInit+0x58>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 faa7 	bl	8009774 <USB_CoreReset>
 8009226:	4603      	mov	r3, r0
 8009228:	73fb      	strb	r3, [r7, #15]
 800922a:	e01b      	b.n	8009264 <USB_CoreInit+0x9c>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fa9b 	bl	8009774 <USB_CoreReset>
 800923e:	4603      	mov	r3, r0
 8009240:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009242:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009246:	2b00      	cmp	r3, #0
 8009248:	d106      	bne.n	8009258 <USB_CoreInit+0x90>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800924e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	639a      	str	r2, [r3, #56]	@ 0x38
 8009256:	e005      	b.n	8009264 <USB_CoreInit+0x9c>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800925c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009264:	7fbb      	ldrb	r3, [r7, #30]
 8009266:	2b01      	cmp	r3, #1
 8009268:	d118      	bne.n	800929c <USB_CoreInit+0xd4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800926e:	b29a      	uxth	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009278:	2300      	movs	r3, #0
 800927a:	f2c0 33ee 	movt	r3, #1006	@ 0x3ee
 800927e:	4313      	orrs	r3, r2
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f043 0206 	orr.w	r2, r3, #6
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f043 0220 	orr.w	r2, r3, #32
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800929c:	7bfb      	ldrb	r3, [r7, #15]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092a8:	b004      	add	sp, #16
 80092aa:	4770      	bx	lr

080092ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	f023 0201 	bic.w	r2, r3, #1
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	370c      	adds	r7, #12
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr

080092ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	460b      	mov	r3, r1
 80092d8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80092da:	2300      	movs	r3, #0
 80092dc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80092ea:	78fb      	ldrb	r3, [r7, #3]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d115      	bne.n	800931c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80092fc:	200a      	movs	r0, #10
 80092fe:	f7f8 fb93 	bl	8001a28 <HAL_Delay>
      ms += 10U;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	330a      	adds	r3, #10
 8009306:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 fa25 	bl	8009758 <USB_GetMode>
 800930e:	4603      	mov	r3, r0
 8009310:	2b01      	cmp	r3, #1
 8009312:	d01e      	beq.n	8009352 <USB_SetCurrentMode+0x84>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2bc7      	cmp	r3, #199	@ 0xc7
 8009318:	d9f0      	bls.n	80092fc <USB_SetCurrentMode+0x2e>
 800931a:	e01a      	b.n	8009352 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800931c:	78fb      	ldrb	r3, [r7, #3]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d115      	bne.n	800934e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800932e:	200a      	movs	r0, #10
 8009330:	f7f8 fb7a 	bl	8001a28 <HAL_Delay>
      ms += 10U;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	330a      	adds	r3, #10
 8009338:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 fa0c 	bl	8009758 <USB_GetMode>
 8009340:	4603      	mov	r3, r0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d005      	beq.n	8009352 <USB_SetCurrentMode+0x84>
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2bc7      	cmp	r3, #199	@ 0xc7
 800934a:	d9f0      	bls.n	800932e <USB_SetCurrentMode+0x60>
 800934c:	e001      	b.n	8009352 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e005      	b.n	800935e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2bc8      	cmp	r3, #200	@ 0xc8
 8009356:	d101      	bne.n	800935c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	e000      	b.n	800935e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009366:	b084      	sub	sp, #16
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009374:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009378:	2300      	movs	r3, #0
 800937a:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009380:	2300      	movs	r3, #0
 8009382:	613b      	str	r3, [r7, #16]
 8009384:	e009      	b.n	800939a <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	3340      	adds	r3, #64	@ 0x40
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	2200      	movs	r2, #0
 8009392:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	3301      	adds	r3, #1
 8009398:	613b      	str	r3, [r7, #16]
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	2b0e      	cmp	r3, #14
 800939e:	d9f2      	bls.n	8009386 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80093a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d11c      	bne.n	80093e2 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80093b6:	f043 0302 	orr.w	r3, r3, #2
 80093ba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	601a      	str	r2, [r3, #0]
 80093e0:	e005      	b.n	80093ee <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093e6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80093f4:	461a      	mov	r2, r3
 80093f6:	2300      	movs	r3, #0
 80093f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80093fa:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d10d      	bne.n	800941e <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009402:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009406:	2b00      	cmp	r3, #0
 8009408:	d104      	bne.n	8009414 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800940a:	2100      	movs	r1, #0
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f969 	bl	80096e4 <USB_SetDevSpeed>
 8009412:	e008      	b.n	8009426 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009414:	2101      	movs	r1, #1
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f964 	bl	80096e4 <USB_SetDevSpeed>
 800941c:	e003      	b.n	8009426 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800941e:	2103      	movs	r1, #3
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f95f 	bl	80096e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009426:	2110      	movs	r1, #16
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f8fb 	bl	8009624 <USB_FlushTxFifo>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d001      	beq.n	8009438 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f925 	bl	8009688 <USB_FlushRxFifo>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d001      	beq.n	8009448 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800944e:	461a      	mov	r2, r3
 8009450:	2300      	movs	r3, #0
 8009452:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800945a:	461a      	mov	r2, r3
 800945c:	2300      	movs	r3, #0
 800945e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009466:	461a      	mov	r2, r3
 8009468:	2300      	movs	r3, #0
 800946a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800946c:	2300      	movs	r3, #0
 800946e:	613b      	str	r3, [r7, #16]
 8009470:	e043      	b.n	80094fa <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	015a      	lsls	r2, r3, #5
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	4413      	add	r3, r2
 800947a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009484:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009488:	d118      	bne.n	80094bc <USB_DevInit+0x156>
    {
      if (i == 0U)
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10a      	bne.n	80094a6 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	015a      	lsls	r2, r3, #5
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	4413      	add	r3, r2
 8009498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800949c:	461a      	mov	r2, r3
 800949e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80094a2:	6013      	str	r3, [r2, #0]
 80094a4:	e013      	b.n	80094ce <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	015a      	lsls	r2, r3, #5
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094b2:	461a      	mov	r2, r3
 80094b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80094b8:	6013      	str	r3, [r2, #0]
 80094ba:	e008      	b.n	80094ce <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	015a      	lsls	r2, r3, #5
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	4413      	add	r3, r2
 80094c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094c8:	461a      	mov	r2, r3
 80094ca:	2300      	movs	r3, #0
 80094cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	015a      	lsls	r2, r3, #5
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	4413      	add	r3, r2
 80094d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094da:	461a      	mov	r2, r3
 80094dc:	2300      	movs	r3, #0
 80094de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	015a      	lsls	r2, r3, #5
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4413      	add	r3, r2
 80094e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094ec:	461a      	mov	r2, r3
 80094ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80094f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	3301      	adds	r3, #1
 80094f8:	613b      	str	r3, [r7, #16]
 80094fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80094fe:	461a      	mov	r2, r3
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	4293      	cmp	r3, r2
 8009504:	d3b5      	bcc.n	8009472 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009506:	2300      	movs	r3, #0
 8009508:	613b      	str	r3, [r7, #16]
 800950a:	e043      	b.n	8009594 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	015a      	lsls	r2, r3, #5
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	4413      	add	r3, r2
 8009514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800951e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009522:	d118      	bne.n	8009556 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10a      	bne.n	8009540 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	015a      	lsls	r2, r3, #5
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	4413      	add	r3, r2
 8009532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009536:	461a      	mov	r2, r3
 8009538:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800953c:	6013      	str	r3, [r2, #0]
 800953e:	e013      	b.n	8009568 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	015a      	lsls	r2, r3, #5
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	4413      	add	r3, r2
 8009548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800954c:	461a      	mov	r2, r3
 800954e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009552:	6013      	str	r3, [r2, #0]
 8009554:	e008      	b.n	8009568 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	015a      	lsls	r2, r3, #5
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	4413      	add	r3, r2
 800955e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009562:	461a      	mov	r2, r3
 8009564:	2300      	movs	r3, #0
 8009566:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	015a      	lsls	r2, r3, #5
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	4413      	add	r3, r2
 8009570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009574:	461a      	mov	r2, r3
 8009576:	2300      	movs	r3, #0
 8009578:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	015a      	lsls	r2, r3, #5
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	4413      	add	r3, r2
 8009582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009586:	461a      	mov	r2, r3
 8009588:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800958c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	3301      	adds	r3, #1
 8009592:	613b      	str	r3, [r7, #16]
 8009594:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009598:	461a      	mov	r2, r3
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	4293      	cmp	r3, r2
 800959e:	d3b5      	bcc.n	800950c <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80095ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80095c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80095c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d105      	bne.n	80095d6 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	f043 0210 	orr.w	r2, r3, #16
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	699a      	ldr	r2, [r3, #24]
 80095da:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80095de:	f2c8 033c 	movt	r3, #32828	@ 0x803c
 80095e2:	4313      	orrs	r3, r2
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80095e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d005      	beq.n	80095fc <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	f043 0208 	orr.w	r2, r3, #8
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80095fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009600:	2b01      	cmp	r3, #1
 8009602:	d107      	bne.n	8009614 <USB_DevInit+0x2ae>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	699a      	ldr	r2, [r3, #24]
 8009608:	2304      	movs	r3, #4
 800960a:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800960e:	4313      	orrs	r3, r2
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009614:	7dfb      	ldrb	r3, [r7, #23]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3718      	adds	r7, #24
 800961a:	46bd      	mov	sp, r7
 800961c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009620:	b004      	add	sp, #16
 8009622:	4770      	bx	lr

08009624 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800962e:	2300      	movs	r3, #0
 8009630:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	3301      	adds	r3, #1
 8009636:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800963e:	d901      	bls.n	8009644 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009640:	2303      	movs	r3, #3
 8009642:	e01b      	b.n	800967c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	2b00      	cmp	r3, #0
 800964a:	daf2      	bge.n	8009632 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800964c:	2300      	movs	r3, #0
 800964e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	019b      	lsls	r3, r3, #6
 8009654:	f043 0220 	orr.w	r2, r3, #32
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	3301      	adds	r3, #1
 8009660:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009668:	d901      	bls.n	800966e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800966a:	2303      	movs	r3, #3
 800966c:	e006      	b.n	800967c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	f003 0320 	and.w	r3, r3, #32
 8009676:	2b20      	cmp	r3, #32
 8009678:	d0f0      	beq.n	800965c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3714      	adds	r7, #20
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009690:	2300      	movs	r3, #0
 8009692:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	3301      	adds	r3, #1
 8009698:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80096a0:	d901      	bls.n	80096a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80096a2:	2303      	movs	r3, #3
 80096a4:	e018      	b.n	80096d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	daf2      	bge.n	8009694 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80096ae:	2300      	movs	r3, #0
 80096b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2210      	movs	r2, #16
 80096b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	3301      	adds	r3, #1
 80096bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80096c4:	d901      	bls.n	80096ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80096c6:	2303      	movs	r3, #3
 80096c8:	e006      	b.n	80096d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	f003 0310 	and.w	r3, r3, #16
 80096d2:	2b10      	cmp	r3, #16
 80096d4:	d0f0      	beq.n	80096b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3714      	adds	r7, #20
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	460b      	mov	r3, r1
 80096ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	78fb      	ldrb	r3, [r7, #3]
 80096fe:	68f9      	ldr	r1, [r7, #12]
 8009700:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009704:	4313      	orrs	r3, r2
 8009706:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3714      	adds	r7, #20
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr

08009716 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009716:	b480      	push	{r7}
 8009718:	b085      	sub	sp, #20
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009730:	f023 0303 	bic.w	r3, r3, #3
 8009734:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009744:	f043 0302 	orr.w	r3, r3, #2
 8009748:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3714      	adds	r7, #20
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	695b      	ldr	r3, [r3, #20]
 8009764:	f003 0301 	and.w	r3, r3, #1
}
 8009768:	4618      	mov	r0, r3
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800977c:	2300      	movs	r3, #0
 800977e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	3301      	adds	r3, #1
 8009784:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800978c:	d901      	bls.n	8009792 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800978e:	2303      	movs	r3, #3
 8009790:	e01b      	b.n	80097ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	2b00      	cmp	r3, #0
 8009798:	daf2      	bge.n	8009780 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800979a:	2300      	movs	r3, #0
 800979c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	f043 0201 	orr.w	r2, r3, #1
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	3301      	adds	r3, #1
 80097ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80097b6:	d901      	bls.n	80097bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80097b8:	2303      	movs	r3, #3
 80097ba:	e006      	b.n	80097ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d0f0      	beq.n	80097aa <USB_CoreReset+0x36>

  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3714      	adds	r7, #20
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <memset>:
 80097d6:	4402      	add	r2, r0
 80097d8:	4603      	mov	r3, r0
 80097da:	4293      	cmp	r3, r2
 80097dc:	d100      	bne.n	80097e0 <memset+0xa>
 80097de:	4770      	bx	lr
 80097e0:	f803 1b01 	strb.w	r1, [r3], #1
 80097e4:	e7f9      	b.n	80097da <memset+0x4>
	...

080097e8 <__libc_init_array>:
 80097e8:	b570      	push	{r4, r5, r6, lr}
 80097ea:	4d0d      	ldr	r5, [pc, #52]	@ (8009820 <__libc_init_array+0x38>)
 80097ec:	4c0d      	ldr	r4, [pc, #52]	@ (8009824 <__libc_init_array+0x3c>)
 80097ee:	1b64      	subs	r4, r4, r5
 80097f0:	10a4      	asrs	r4, r4, #2
 80097f2:	2600      	movs	r6, #0
 80097f4:	42a6      	cmp	r6, r4
 80097f6:	d109      	bne.n	800980c <__libc_init_array+0x24>
 80097f8:	4d0b      	ldr	r5, [pc, #44]	@ (8009828 <__libc_init_array+0x40>)
 80097fa:	4c0c      	ldr	r4, [pc, #48]	@ (800982c <__libc_init_array+0x44>)
 80097fc:	f000 f818 	bl	8009830 <_init>
 8009800:	1b64      	subs	r4, r4, r5
 8009802:	10a4      	asrs	r4, r4, #2
 8009804:	2600      	movs	r6, #0
 8009806:	42a6      	cmp	r6, r4
 8009808:	d105      	bne.n	8009816 <__libc_init_array+0x2e>
 800980a:	bd70      	pop	{r4, r5, r6, pc}
 800980c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009810:	4798      	blx	r3
 8009812:	3601      	adds	r6, #1
 8009814:	e7ee      	b.n	80097f4 <__libc_init_array+0xc>
 8009816:	f855 3b04 	ldr.w	r3, [r5], #4
 800981a:	4798      	blx	r3
 800981c:	3601      	adds	r6, #1
 800981e:	e7f2      	b.n	8009806 <__libc_init_array+0x1e>
 8009820:	08009888 	.word	0x08009888
 8009824:	08009888 	.word	0x08009888
 8009828:	08009888 	.word	0x08009888
 800982c:	0800988c 	.word	0x0800988c

08009830 <_init>:
 8009830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009832:	bf00      	nop
 8009834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009836:	bc08      	pop	{r3}
 8009838:	469e      	mov	lr, r3
 800983a:	4770      	bx	lr

0800983c <_fini>:
 800983c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983e:	bf00      	nop
 8009840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009842:	bc08      	pop	{r3}
 8009844:	469e      	mov	lr, r3
 8009846:	4770      	bx	lr
